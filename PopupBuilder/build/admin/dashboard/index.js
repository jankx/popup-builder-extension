(() => {
    var t = {
            41: (t, e, i) => {
                "use strict";
                function s(t, e, i) {
                    var s = "";
                    return (
                        i.split(" ").forEach(function (i) {
                            void 0 !== t[i] ? e.push(t[i] + ";") : i && (s += i + " ");
                        }),
                        s
                    );
                }
                i.d(e, { Rk: () => s, SF: () => n, sk: () => o });
                var n = function (t, e, i) {
                        var s = t.key + "-" + e.name;
                        !1 === i && void 0 === t.registered[s] && (t.registered[s] = e.styles);
                    },
                    o = function (t, e, i) {
                        n(t, e, i);
                        var s = t.key + "-" + e.name;
                        if (void 0 === t.inserted[e.name]) {
                            var o = e;
                            do {
                                t.insert(e === o ? "." + s : "", o, t.sheet, !0), (o = o.next);
                            } while (void 0 !== o);
                        }
                    };
            },
            45: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => n });
                var s = i(8587);
                function n(t, e) {
                    if (null == t) return {};
                    var i,
                        n,
                        o = (0, s.A)(t, e);
                    if (Object.getOwnPropertySymbols) {
                        var a = Object.getOwnPropertySymbols(t);
                        for (n = 0; n < a.length; n++) (i = a[n]), e.includes(i) || ({}.propertyIsEnumerable.call(t, i) && (o[i] = t[i]));
                    }
                    return o;
                }
            },
            390: (t, e, i) => {
                "use strict";
                i.d(e, {
                    C: () => h,
                    Cv: () => M,
                    G1: () => r,
                    K2: () => m,
                    Nc: () => w,
                    OW: () => g,
                    Sh: () => x,
                    Tb: () => _,
                    Tp: () => u,
                    VF: () => y,
                    YL: () => p,
                    c4: () => v,
                    di: () => b,
                    mw: () => C,
                    nf: () => k,
                    rH: () => d,
                    se: () => f,
                });
                var s = i(9735),
                    n = 1,
                    o = 1,
                    a = 0,
                    r = 0,
                    l = 0,
                    c = "";
                function d(t, e, i, s, a, r, l) {
                    return { value: t, root: e, parent: i, type: s, props: a, children: r, line: n, column: o, length: l, return: "" };
                }
                function h(t, e) {
                    return (0, s.kp)(d("", null, null, "", null, null, 0), t, { length: -t.length }, e);
                }
                function u() {
                    return l;
                }
                function p() {
                    return (l = r > 0 ? (0, s.wN)(c, --r) : 0), o--, 10 === l && ((o = 1), n--), l;
                }
                function m() {
                    return (l = r < a ? (0, s.wN)(c, r++) : 0), o++, 10 === l && ((o = 1), n++), l;
                }
                function f() {
                    return (0, s.wN)(c, r);
                }
                function g() {
                    return r;
                }
                function b(t, e) {
                    return (0, s.c1)(c, t, e);
                }
                function x(t) {
                    switch (t) {
                        case 0:
                        case 9:
                        case 10:
                        case 13:
                        case 32:
                            return 5;
                        case 33:
                        case 43:
                        case 44:
                        case 47:
                        case 62:
                        case 64:
                        case 126:
                        case 59:
                        case 123:
                        case 125:
                            return 4;
                        case 58:
                            return 3;
                        case 34:
                        case 39:
                        case 40:
                        case 91:
                            return 2;
                        case 41:
                        case 93:
                            return 1;
                    }
                    return 0;
                }
                function v(t) {
                    return (n = o = 1), (a = (0, s.b2)((c = t))), (r = 0), [];
                }
                function y(t) {
                    return (c = ""), t;
                }
                function _(t) {
                    return (0, s.Bq)(b(r - 1, z(91 === t ? t + 2 : 40 === t ? t + 1 : t)));
                }
                function C(t) {
                    for (; (l = f()) && l < 33; ) m();
                    return x(t) > 2 || x(l) > 3 ? "" : " ";
                }
                function w(t, e) {
                    for (; --e && m() && !(l < 48 || l > 102 || (l > 57 && l < 65) || (l > 70 && l < 97)); );
                    return b(t, g() + (e < 6 && 32 == f() && 32 == m()));
                }
                function z(t) {
                    for (; m(); )
                        switch (l) {
                            case t:
                                return r;
                            case 34:
                            case 39:
                                34 !== t && 39 !== t && z(l);
                                break;
                            case 40:
                                41 === t && z(t);
                                break;
                            case 92:
                                m();
                        }
                    return r;
                }
                function k(t, e) {
                    for (; m() && t + l !== 57 && (t + l !== 84 || 47 !== f()); );
                    return "/*" + b(e, r - 1) + "*" + (0, s.HT)(47 === t ? t : m());
                }
                function M(t) {
                    for (; !x(f()); ) m();
                    return b(t, r);
                }
            },
            405: (t, e, i) => {
                "use strict";
                i.d(e, { u: () => d });
                var s = i(4467),
                    n = i(9379),
                    o = i(3453),
                    a = i(45),
                    r = i(1609),
                    l = i(9800),
                    c = ["defaultOptions", "cacheOptions", "loadOptions", "options", "isLoading", "onInputChange", "filterOption"];
                function d(t) {
                    var e = t.defaultOptions,
                        i = void 0 !== e && e,
                        d = t.cacheOptions,
                        h = void 0 !== d && d,
                        u = t.loadOptions;
                    t.options;
                    var p = t.isLoading,
                        m = void 0 !== p && p,
                        f = t.onInputChange,
                        g = t.filterOption,
                        b = void 0 === g ? null : g,
                        x = (0, a.A)(t, c),
                        v = x.inputValue,
                        y = (0, r.useRef)(void 0),
                        _ = (0, r.useRef)(!1),
                        C = (0, r.useState)(Array.isArray(i) ? i : void 0),
                        w = (0, o.A)(C, 2),
                        z = w[0],
                        k = w[1],
                        M = (0, r.useState)(void 0 !== v ? v : ""),
                        j = (0, o.A)(M, 2),
                        S = j[0],
                        A = j[1],
                        L = (0, r.useState)(!0 === i),
                        D = (0, o.A)(L, 2),
                        T = D[0],
                        E = D[1],
                        O = (0, r.useState)(void 0),
                        P = (0, o.A)(O, 2),
                        I = P[0],
                        N = P[1],
                        R = (0, r.useState)([]),
                        V = (0, o.A)(R, 2),
                        F = V[0],
                        B = V[1],
                        H = (0, r.useState)(!1),
                        W = (0, o.A)(H, 2),
                        Y = W[0],
                        $ = W[1],
                        U = (0, r.useState)({}),
                        Z = (0, o.A)(U, 2),
                        G = Z[0],
                        K = Z[1],
                        q = (0, r.useState)(void 0),
                        X = (0, o.A)(q, 2),
                        J = X[0],
                        Q = X[1],
                        tt = (0, r.useState)(void 0),
                        et = (0, o.A)(tt, 2),
                        it = et[0],
                        st = et[1];
                    h !== it && (K({}), st(h)),
                        i !== J && (k(Array.isArray(i) ? i : void 0), Q(i)),
                        (0, r.useEffect)(function () {
                            return (
                                (_.current = !0),
                                function () {
                                    _.current = !1;
                                }
                            );
                        }, []);
                    var nt = (0, r.useCallback)(
                        function (t, e) {
                            if (!u) return e();
                            var i = u(t, e);
                            i &&
                                "function" == typeof i.then &&
                                i.then(e, function () {
                                    return e();
                                });
                        },
                        [u]
                    );
                    (0, r.useEffect)(function () {
                        !0 === i &&
                            nt(S, function (t) {
                                _.current && (k(t || []), E(!!y.current));
                            });
                    }, []);
                    var ot = (0, r.useCallback)(
                            function (t, e) {
                                var i = (0, l.L)(t, e, f);
                                if (!i) return (y.current = void 0), A(""), N(""), B([]), E(!1), void $(!1);
                                if (h && G[i]) A(i), N(i), B(G[i]), E(!1), $(!1);
                                else {
                                    var o = (y.current = {});
                                    A(i),
                                        E(!0),
                                        $(!I),
                                        nt(i, function (t) {
                                            _ && o === y.current && ((y.current = void 0), E(!1), N(i), B(t || []), $(!1), K(t ? (0, n.A)((0, n.A)({}, G), {}, (0, s.A)({}, i, t)) : G));
                                        });
                                }
                            },
                            [h, nt, I, G, f]
                        ),
                        at = Y ? [] : S && I ? F : z || [];
                    return (0, n.A)((0, n.A)({}, x), {}, { options: at, isLoading: T || m, onInputChange: ot, filterOption: b });
                }
            },
            428: (t) => {
                "use strict";
                t.exports = window.jQuery;
            },
            483: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => a, l: () => o });
                var s = i(4534),
                    n = i(9735);
                function o(t, e) {
                    for (var i = "", s = (0, n.FK)(t), o = 0; o < s; o++) i += e(t[o], o, t, e) || "";
                    return i;
                }
                function a(t, e, i, a) {
                    switch (t.type) {
                        case s.IO:
                            if (t.children.length) break;
                        case s.yE:
                        case s.LU:
                            return (t.return = t.return || t.value);
                        case s.YK:
                            return "";
                        case s.Sv:
                            return (t.return = t.value + "{" + o(t.children, a) + "}");
                        case s.XZ:
                            t.value = t.props.join(",");
                    }
                    return (0, n.b2)((i = o(t.children, a))) ? (t.return = t.value + "{" + i + "}") : "";
                }
            },
            519: (t, e, i) => {
                "use strict";
                function s() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                i.d(e, { A: () => s });
            },
            568: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => b });
                var s = i(7723),
                    n = i(1455),
                    o = i.n(n);
                const a = window.wp.data;
                var r = i(1416),
                    l = i(6427),
                    c = i(790);
                const d = (0, c.jsx)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "14",
                    height: "14",
                    fill: "none",
                    children: (0, c.jsx)("path", {
                        d: "M1.6 3.4H12.4M11.2 3.4v8.4A1.2 1.2 0 0 1 10 13H4a1.2 1.2 0 0 1-1.2-1.2V3.4m1.8 0V2.2A1.2 1.2 0 0 1 5.8 1h2.4a1.2 1.2 0 0 1 1.2 1.2v1.2M5.8 6.4V10M8.2 6.4V10",
                        stroke: "#181A26",
                        strokeWidth: "1.5",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                    }),
                });
                var h = i(6087),
                    u = i(1409),
                    p = i(7008),
                    m = i(4519);
                const f = window.wp.coreData;
                var g = i(9458);
                const b = function () {
                    const [t, e] = (0, h.useState)(!0),
                        [i, n] = (0, h.useState)([]),
                        [b, x] = (0, h.useState)([]),
                        [v, y] = (0, h.useState)(null),
                        [_, C] = (0, h.useState)(""),
                        [w, z] = (0, h.useState)(!1),
                        [k, M] = (0, h.useState)(""),
                        [j, S] = (0, h.useState)(null),
                        [A, L] = (0, h.useState)("asc"),
                        [D, T] = (0, h.useState)({ value: 10, label: "10 / page" }),
                        [E, O] = (0, h.useState)({ value: "all", label: "All" }),
                        [P, I] = (0, h.useState)(1),
                        [N, R] = (0, h.useState)(!1),
                        [V, F] = (0, h.useState)(null),
                        [B, H] = (0, h.useState)(""),
                        W = "popupkit-campaigns",
                        Y = () => z(!1),
                        $ = {
                            title: (0, s.__)("Title", "popup-builder-block"),
                            status: (0, s.__)("Status", "popup-builder-block"),
                            type: (0, s.__)("Type", "popup-builder-block"),
                            views: (0, s.__)("Views", "popup-builder-block"),
                            conversion: (0, s.__)("Conversion", "popup-builder-block"),
                            conversion_rate: (0, s.__)("Conversion Rate", "popup-builder-block"),
                            author: (0, s.__)("Author", "popup-builder-block"),
                            date: (0, s.__)("Date", "popup-builder-block"),
                            actions: (0, s.__)("Actions", "popup-builder-block"),
                        },
                        U = (t) =>
                            String(t)
                                .toLowerCase()
                                .replace(/[^a-z0-9\s]/gi, " ")
                                .replace(/\s+/g, " ")
                                .trim(),
                        Z = (0, h.useMemo)(() => {
                            if (!i.length) return [];
                            let t = i;
                            switch (E.value) {
                                case "all":
                                    t = i.filter((t) => "trash" !== t.status);
                                    break;
                                case "publish":
                                    t = i.filter((t) => "publish" === t.status && !0 === t.meta?.status);
                                    break;
                                case "draft":
                                    t = i.filter((t) => !1 === t.meta?.status || "draft" === t.status);
                                    break;
                                case "schedule":
                                    t = i.filter((t) => t.meta?.scheduleDateTime);
                                    break;
                                case "trash":
                                    t = i.filter((t) => "trash" === t.status);
                            }
                            if (!k) return t;
                            const e = U(k);
                            return t.filter((t) => U(Object.values(t).join(" ")).includes(e));
                        }, [k, E, i]),
                        G = (0, h.useMemo)(
                            () =>
                                j
                                    ? [...Z].sort((t, e) => {
                                          let i = t[j],
                                              s = e[j];
                                          var n, o;
                                          if ("title" === j) (i = null !== (n = t.title) && void 0 !== n ? n : ""), (s = null !== (o = e.title) && void 0 !== o ? o : "");
                                          else if ("author" === j) {
                                              var a, r;
                                              (i = null !== (a = t.author) && void 0 !== a ? a : ""), (s = null !== (r = e.author) && void 0 !== r ? r : "");
                                          }
                                          (i = null != i ? i : ""), (s = null != s ? s : "");
                                          const l = !isNaN(parseFloat(i)) && isFinite(i),
                                              c = !isNaN(parseFloat(s)) && isFinite(s);
                                          return l && c ? ("asc" === A ? parseFloat(i) - parseFloat(s) : parseFloat(s) - parseFloat(i)) : "asc" === A ? String(i).localeCompare(String(s)) : String(s).localeCompare(String(i));
                                      })
                                    : Z,
                            [Z, j, A]
                        ),
                        K = (0, h.useMemo)(() => {
                            const t = (P - 1) * D.value;
                            return G.slice(t, t + D.value);
                        }, [G, P, D]);
                    (0, h.useEffect)(() => {
                        o()({ path: "/pbb/v1/popup/campaigns?status[]=publish&status[]=draft&status[]=trash" })
                            .then((t) => {
                                "success" == t.status && n(t.data), e(!1);
                            })
                            .catch((t) => {
                                console.error(t), e(!1);
                            });
                    }, []),
                        (0, h.useEffect)(() => {
                            const t = (t) => {
                                t.target.closest(".actions-container") || F(null);
                            };
                            return (
                                document.addEventListener("click", t),
                                () => {
                                    document.removeEventListener("click", t);
                                }
                            );
                        }, []);
                    const q = Math.ceil(i.length / D.value),
                        X = (t) => {
                            C("delete"), z(!0), H(t);
                        },
                        J = async (t, e) => {
                            const i = "popupkit-campaigns",
                                s = e ? "publish" : "draft",
                                r = e;
                            let l = (0, a.select)(f.store).getEntityRecord("postType", i, t);
                            l || (await (0, a.dispatch)(f.store).receiveEntityRecords("postType", i, await o()({ path: `/pbb/v1/${i}/${t}` }), { id: t }), (l = (0, a.select)(f.store).getEntityRecord("postType", i, t))),
                                (0, a.dispatch)(f.store).editEntityRecord("postType", i, t, { status: s, meta: { ...l.meta, status: r } }),
                                (await (0, a.dispatch)(f.store).saveEditedEntityRecord("postType", i, t))
                                    ? (n((e) => e.map((e) => (e.id === t ? { ...e, status: s, meta: { ...e.meta, status: r } } : e))), u.oR.success("Campaign status updated successfully!", { autoClose: 2e3, pauseOnHover: !1 }))
                                    : u.oR.error("Failed to update campaign status!", { autoClose: 2e3, pauseOnHover: !1 });
                        };
                    return (0, c.jsxs)(c.Fragment, {
                        children: [
                            (0, c.jsx)(u.N9, {}),
                            (0, c.jsx)("h3", { className: "pbb-campaigns-title", children: (0, s.__)("Campaigns", "popup-builder-block") }),
                            (0, c.jsxs)("div", {
                                className: "pbb-campaigns-header",
                                children: [
                                    (0, c.jsx)("a", { href: `${window.popupBuilderBlock?.adminUrl}post-new.php?post_type=${W}`, className: "pbb-cbtn", children: (0, s.__)("Add New Campaign", "popup-builder-block") }),
                                    (0, c.jsx)("a", { href: `${window.popupBuilderBlock?.adminUrl}admin.php?page=popupkit#templates`, className: "pbb-cbtn cbtn-two", children: (0, s.__)("Choose From Templates", "popup-builder-block") }),
                                ],
                            }),
                            (0, c.jsxs)("div", {
                                className: "pbb-campaigns-table-wrapper",
                                children: [
                                    (0, c.jsxs)("div", {
                                        className: "pbb-campaigns-headers",
                                        children: [
                                            (0, c.jsx)("div", {
                                                className: "pbb-campaigns-wrap",
                                                children: (0, c.jsx)("input", { className: "pbb-campaigns-search", type: "text", placeholder: "Search...", value: k, onChange: (t) => M(t.target.value) }),
                                            }),
                                            (0, c.jsxs)("div", {
                                                className: "pbb-campaigns-actions",
                                                children: [
                                                    (0, c.jsx)("div", {
                                                        className: "pbb-subscribers-select campaigns-type",
                                                        children: (0, c.jsx)(r.A, {
                                                            options: [
                                                                { label: (0, s.__)("All", "gutenkit-blocks-addon"), value: "all" },
                                                                { label: (0, s.__)("Active", "gutenkit-blocks-addon"), value: "publish" },
                                                                { label: (0, s.__)("Inactive", "gutenkit-blocks-addon"), value: "draft" },
                                                                { label: (0, s.__)("Schedule", "gutenkit-blocks-addon"), value: "schedule" },
                                                                { label: (0, s.__)("Trash", "gutenkit-blocks-addon"), value: "trash" },
                                                            ],
                                                            isSearchable: !1,
                                                            value: E,
                                                            onChange: (t) => O(t),
                                                        }),
                                                    }),
                                                    (0, c.jsx)("div", {
                                                        className: "pbb-campaigns-select rows-per-page",
                                                        children: (0, c.jsx)(r.A, {
                                                            options: [
                                                                { label: (0, s.__)("5 / page", "gutenkit-blocks-addon"), value: 5 },
                                                                { label: (0, s.__)("10 / page", "gutenkit-blocks-addon"), value: 10 },
                                                                { label: (0, s.__)("20 / page", "gutenkit-blocks-addon"), value: 20 },
                                                                { label: (0, s.__)("30 / page", "gutenkit-blocks-addon"), value: 30 },
                                                                { label: (0, s.__)("50 / page", "gutenkit-blocks-addon"), value: 50 },
                                                            ],
                                                            isSearchable: !1,
                                                            value: D,
                                                            onChange: (t) => T(t),
                                                        }),
                                                    }),
                                                ],
                                            }),
                                        ],
                                    }),
                                    (0, c.jsx)("div", {
                                        className: "pbb-campaigns-table-wrap",
                                        children: (0, c.jsxs)("table", {
                                            className: "wp-list-table widefat striped table-view-list posts pbb-campaigns-table",
                                            children: [
                                                (0, c.jsx)("thead", {
                                                    children: (0, c.jsxs)("tr", {
                                                        children: [
                                                            (0, c.jsxs)("td", {
                                                                id: "cb",
                                                                className: "manage-column column-cb check-column",
                                                                children: [
                                                                    (0, c.jsx)("input", {
                                                                        type: "checkbox",
                                                                        onChange: () => {
                                                                            if (0 === K.length) return;
                                                                            const t = (P - 1) * D.value,
                                                                                e = t + D.value,
                                                                                i = G.slice(t, e).map((t) => t.id),
                                                                                s = i.every((t) => b.includes(t));
                                                                            x(s ? b.filter((t) => !i.includes(t)) : [...new Set([...b, ...i])]);
                                                                        },
                                                                        checked: K.length > 0 && K.every((t) => b.includes(t.id)),
                                                                    }),
                                                                    (0, c.jsx)("label", {
                                                                        htmlFor: "cb-select-all-1",
                                                                        children: (0, c.jsx)("span", { className: "screen-reader-text", children: (0, s.__)("Select All", "popup-builder-block") }),
                                                                    }),
                                                                ],
                                                            }),
                                                            Object.keys($ || {}).map((t) => {
                                                                const e = !["views", "conversion", "conversion_rate", "actions", "status"].includes(t);
                                                                return (0, c.jsxs)(
                                                                    "th",
                                                                    {
                                                                        onClick: e ? () => (S(t), void L("asc" === A ? "desc" : "asc")) : void 0,
                                                                        className: `manage-column column-${t}`,
                                                                        style: { cursor: e ? "pointer" : "default" },
                                                                        children: [$[t], " ", e && j === t && ("asc" === A ? "▲" : "▼")],
                                                                    },
                                                                    t
                                                                );
                                                            }),
                                                        ],
                                                    }),
                                                }),
                                                (0, c.jsxs)("tbody", {
                                                    children: [
                                                        i.length > 0 &&
                                                            K.map((t) => {
                                                                const e = t.id;
                                                                let i = t.views > 0 ? (Number(t.converted) / Number(t.views)) * 100 : 0;
                                                                return (
                                                                    (i = Number.isInteger(i) ? i : i.toFixed(2)),
                                                                    (0, c.jsxs)(
                                                                        "tr",
                                                                        {
                                                                            className: "iedit",
                                                                            children: [
                                                                                (0, c.jsxs)("th", {
                                                                                    scope: "row",
                                                                                    className: "check-column pbb-campaigns-checkbox",
                                                                                    children: [
                                                                                        (0, c.jsx)("input", {
                                                                                            type: "checkbox",
                                                                                            checked: b.includes(e),
                                                                                            onChange: () => {
                                                                                                return (t = e), void x((e) => (e.includes(t) ? e.filter((e) => e !== t) : [...e, t]));
                                                                                                var t;
                                                                                            },
                                                                                        }),
                                                                                        (0, c.jsx)("label", {
                                                                                            htmlFor: "cb-select-2630",
                                                                                            children: (0, c.jsx)("span", { className: "screen-reader-text", children: (0, s.__)("Select Easter", "popup-builder-block") }),
                                                                                        }),
                                                                                    ],
                                                                                }),
                                                                                (0, c.jsx)("td", {
                                                                                    children: (0, c.jsx)("a", { href: `${window.popupBuilderBlock?.adminUrl}post.php?post=${e}&action=edit`, children: (0, g.A)(t.title) || "(no title)" }),
                                                                                }),
                                                                                (0, c.jsxs)("td", {
                                                                                    "data-colname": "Status",
                                                                                    children: [
                                                                                        t.meta?.scheduleDateTime &&
                                                                                            (0, c.jsxs)(c.Fragment, {
                                                                                                children: [
                                                                                                    (t.meta?.scheduleDateTime || t.meta?.scheduleOffDateValue) &&
                                                                                                        (0, c.jsx)("span", {
                                                                                                            className: "schedule",
                                                                                                            "data-tooltip-id": `tooltip-${t.id}`,
                                                                                                            style: { marginRight: "8px" },
                                                                                                            children: (0, c.jsxs)("svg", {
                                                                                                                xmlns: "http://www.w3.org/2000/svg",
                                                                                                                viewBox: "0 0 24 24",
                                                                                                                width: 24,
                                                                                                                height: 24,
                                                                                                                color: "#000000",
                                                                                                                fill: "none",
                                                                                                                children: [
                                                                                                                    (0, c.jsx)("path", {
                                                                                                                        d:
                                                                                                                            "M20.5 12.5C20.5 17.1944 16.6944 21 12 21C7.30558 21 3.5 17.1944 3.5 12.5C3.5 7.80558 7.30558 4 12 4C16.6944 4 20.5 7.80558 20.5 12.5Z",
                                                                                                                        stroke: "#000000",
                                                                                                                        strokeWidth: "1.5",
                                                                                                                        strokeLinecap: "round",
                                                                                                                        strokeLinejoin: "round",
                                                                                                                    }),
                                                                                                                    (0, c.jsx)("path", {
                                                                                                                        d: "M5.88 18.7031L3.5 21.0031",
                                                                                                                        stroke: "#000000",
                                                                                                                        strokeWidth: "1.5",
                                                                                                                        strokeLinecap: "round",
                                                                                                                        strokeLinejoin: "round",
                                                                                                                    }),
                                                                                                                    (0, c.jsx)("path", {
                                                                                                                        d: "M18.14 18.668L20.5 20.998",
                                                                                                                        stroke: "#000000",
                                                                                                                        strokeWidth: "1.5",
                                                                                                                        strokeLinecap: "round",
                                                                                                                        strokeLinejoin: "round",
                                                                                                                    }),
                                                                                                                    (0, c.jsx)("path", {
                                                                                                                        d: "M5 3L2 6",
                                                                                                                        stroke: "#000000",
                                                                                                                        strokeWidth: "1.5",
                                                                                                                        strokeLinecap: "round",
                                                                                                                        strokeLinejoin: "round",
                                                                                                                    }),
                                                                                                                    (0, c.jsx)("path", {
                                                                                                                        d: "M22 6L19 3",
                                                                                                                        stroke: "#000000",
                                                                                                                        strokeWidth: "1.5",
                                                                                                                        strokeLinecap: "round",
                                                                                                                        strokeLinejoin: "round",
                                                                                                                    }),
                                                                                                                    (0, c.jsx)("path", {
                                                                                                                        d: "M12 8V12.5L14 14.5",
                                                                                                                        stroke: "#000000",
                                                                                                                        strokeWidth: "1.5",
                                                                                                                        strokeLinecap: "round",
                                                                                                                        strokeLinejoin: "round",
                                                                                                                    }),
                                                                                                                ],
                                                                                                            }),
                                                                                                        }),
                                                                                                    (0, c.jsxs)(p.m_, {
                                                                                                        id: `tooltip-${t.id}`,
                                                                                                        place: "top-end",
                                                                                                        children: [
                                                                                                            t.meta?.scheduleOnDateValue ? new Date(t.meta.scheduleOnDateValue).toLocaleString() : "",
                                                                                                            (0, c.jsx)("br", {}),
                                                                                                            t.meta?.scheduleOffDateValue ? new Date(t.meta.scheduleOffDateValue).toLocaleString() : "",
                                                                                                        ],
                                                                                                    }),
                                                                                                ],
                                                                                            }),
                                                                                        (0, c.jsxs)("label", {
                                                                                            className: "pbb-toggle-switch",
                                                                                            children: [
                                                                                                (0, c.jsx)("input", {
                                                                                                    type: "checkbox",
                                                                                                    className: "pbb-toggle-checkbox",
                                                                                                    "data-popup-id": t.id,
                                                                                                    checked: "publish" === t.status && !0 === t.meta?.status,
                                                                                                    onChange: (e) => {
                                                                                                        e.preventDefault(), J(t.id, e.target.checked);
                                                                                                    },
                                                                                                }),
                                                                                                (0, c.jsxs)("span", {
                                                                                                    className: "pbb-slider",
                                                                                                    children: [
                                                                                                        (0, c.jsx)("span", { className: "pbb-label on", children: "ON" }),
                                                                                                        (0, c.jsx)("span", { className: "pbb-label off", children: "OFF" }),
                                                                                                    ],
                                                                                                }),
                                                                                            ],
                                                                                        }),
                                                                                        "trash" === t.status &&
                                                                                            (0, c.jsx)("span", {
                                                                                                style: { marginLeft: "8px" },
                                                                                                children: (0, c.jsxs)("svg", {
                                                                                                    xmlns: "http://www.w3.org/2000/svg",
                                                                                                    viewBox: "0 0 24 24",
                                                                                                    width: 24,
                                                                                                    height: 24,
                                                                                                    color: "#000000",
                                                                                                    fill: "none",
                                                                                                    children: [
                                                                                                        (0, c.jsx)("path", {
                                                                                                            d:
                                                                                                                "M4.47461 6.10018L5.31543 18.1768C5.40886 19.3365 6.28178 21.5536 8.51889 21.8022C10.756 22.0507 15.2503 21.9951 16.0699 21.9951C16.8895 21.9951 19.0128 21.4136 19.0128 19.0059C19.0128 16.5756 16.9833 15.9419 15.7077 15.9635H12.0554M12.0554 15.9635C12.0607 15.7494 12.1515 15.5372 12.3278 15.3828L14.487 13.4924M12.0554 15.9635C12.0497 16.1919 12.1412 16.4224 12.33 16.5864L14.487 18.4609M19.4701 5.82422L19.0023 13.4792",
                                                                                                            stroke: "#000000",
                                                                                                            strokeWidth: "1.5",
                                                                                                            strokeLinecap: "round",
                                                                                                            strokeLinejoin: "round",
                                                                                                        }),
                                                                                                        (0, c.jsx)("path", {
                                                                                                            d:
                                                                                                                "M3 5.49561H21M16.0555 5.49561L15.3729 4.08911C14.9194 3.15481 14.6926 2.68766 14.3015 2.39631C14.2148 2.33168 14.1229 2.2742 14.0268 2.22442C13.5937 2 13.0739 2 12.0343 2C10.9686 2 10.4358 2 9.99549 2.23383C9.89791 2.28565 9.80479 2.34547 9.7171 2.41265C9.32145 2.7158 9.10044 3.20004 8.65842 4.16854L8.05273 5.49561",
                                                                                                            stroke: "#000000",
                                                                                                            strokeWidth: "1.5",
                                                                                                            strokeLinecap: "round",
                                                                                                            strokeLinejoin: "round",
                                                                                                        }),
                                                                                                    ],
                                                                                                }),
                                                                                            }),
                                                                                    ],
                                                                                }),
                                                                                (0, c.jsx)("td", { "data-colname": "Type", children: t.meta.type }),
                                                                                (0, c.jsx)("td", { "data-colname": "Views", children: t.views }),
                                                                                (0, c.jsx)("td", { "data-colname": "Conversion", children: t.converted }),
                                                                                (0, c.jsxs)("td", { "data-colname": "Conversion Rate", children: [i, "%"] }),
                                                                                (0, c.jsx)("td", { "data-colname": "Author", children: t?.author }),
                                                                                (0, c.jsx)("td", { "data-colname": "Date", children: moment(t.date).format("YYYY-MM-DD [at] h:mm a") || "Unknown" }),
                                                                                (0, c.jsx)("td", {
                                                                                    "data-colname": "Actions",
                                                                                    children: (0, c.jsxs)("div", {
                                                                                        className: "actions-container",
                                                                                        children: [
                                                                                            (0, c.jsx)("span", {
                                                                                                className: "actions-toggle",
                                                                                                onClick: () =>
                                                                                                    ((t) => {
                                                                                                        F((e) => (e === t ? null : t));
                                                                                                    })(e),
                                                                                                style: { cursor: "pointer" },
                                                                                                children: (0, c.jsx)("svg", {
                                                                                                    className: "w-6 h-6 text-gray-800 dark:text-white",
                                                                                                    "aria-hidden": "true",
                                                                                                    xmlns: "http://www.w3.org/2000/svg",
                                                                                                    width: "24",
                                                                                                    height: "24",
                                                                                                    fill: "none",
                                                                                                    children: (0, c.jsx)("path", { stroke: "currentColor", strokeLinecap: "round", strokeWidth: "2", d: "M12 6h.01M12 12h.01M12 18h.01" }),
                                                                                                }),
                                                                                            }),
                                                                                            V === e &&
                                                                                                (0, c.jsxs)("ul", {
                                                                                                    className: "actions-dropdown",
                                                                                                    children: [
                                                                                                        (0, c.jsx)("li", {
                                                                                                            onClick: () =>
                                                                                                                ((t) => {
                                                                                                                    const e = window.popupBuilderBlock?.adminUrl;
                                                                                                                    window.location.href = `${e}post.php?post=${t}&action=edit`;
                                                                                                                })(e),
                                                                                                            style: { cursor: "pointer" },
                                                                                                            children: "Edit",
                                                                                                        }),
                                                                                                        "trash" !== t.status
                                                                                                            ? (0, c.jsx)("li", {
                                                                                                                  onClick: () =>
                                                                                                                      ((t) => {
                                                                                                                          o()({ path: `/pbb/v1/${W}/${t}?force=false`, method: "DELETE" })
                                                                                                                              .then((e) => {
                                                                                                                                  u.oR.success("Campaign trashed successfully!", { autoClose: 2e3, pauseOnHover: !1 }),
                                                                                                                                      n((e) => e.map((e) => (e.id === t ? { ...e, status: "trash" } : e)));
                                                                                                                              })
                                                                                                                              .catch((t) => {
                                                                                                                                  console.error("Failed to trash post or update campaigns:", t),
                                                                                                                                      u.oR.error("Failed to trash the campaign.", { autoClose: 2e3, pauseOnHover: !1 });
                                                                                                                              });
                                                                                                                      })(e),
                                                                                                                  style: { cursor: "pointer" },
                                                                                                                  children: "Trash",
                                                                                                              })
                                                                                                            : (0, c.jsx)("li", { onClick: () => J(e, !0), style: { cursor: "pointer" }, children: "Restore" }),
                                                                                                        (0, c.jsx)("li", {
                                                                                                            onClick: () =>
                                                                                                                ((t) => {
                                                                                                                    o()({ path: `/pbb/v1/${W}/${t}` })
                                                                                                                        .then((t) => {
                                                                                                                            t?.link && window.open(t.link, "_blank");
                                                                                                                        })
                                                                                                                        .catch((t) => {
                                                                                                                            console.error("Failed to fetch post link:", t);
                                                                                                                        });
                                                                                                                })(e),
                                                                                                            style: { cursor: "pointer" },
                                                                                                            children: "View",
                                                                                                        }),
                                                                                                        (0, c.jsx)("li", {
                                                                                                            onClick: () => {
                                                                                                                X("single"), y(e);
                                                                                                            },
                                                                                                            style: { cursor: "pointer", color: "red" },
                                                                                                            children: "Delete Permanently",
                                                                                                        }),
                                                                                                    ],
                                                                                                }),
                                                                                        ],
                                                                                    }),
                                                                                }),
                                                                            ],
                                                                        },
                                                                        e
                                                                    )
                                                                );
                                                            }),
                                                        t && (0, c.jsx)("tr", { children: (0, c.jsx)("td", { style: { textAlign: "center" }, colSpan: Object.keys($).length + 2, children: (0, c.jsx)(l.Spinner, {}) }) }),
                                                        0 === K.length && !t && (0, c.jsx)("tr", { children: (0, c.jsx)("td", { style: { textAlign: "center" }, colSpan: Object.keys($).length + 1.5, children: "No data found" }) }),
                                                    ],
                                                }),
                                            ],
                                        }),
                                    }),
                                    (0, c.jsxs)("div", {
                                        className: "pbb-campaigns-pagination",
                                        children: [
                                            (0, c.jsxs)("div", {
                                                className: "pbb-campaigns-bulk-actions",
                                                children: [
                                                    (0, c.jsxs)("span", { children: [(0, s.__)("Bulk Action:", "popup-builder-block"), " "] }),
                                                    (0, c.jsxs)("button", { onClick: () => X("multiple"), disabled: 0 === b.length, children: [" ", d, " ", (0, s.__)("Delete", "popup-builder-block")] }),
                                                ],
                                            }),
                                            (0, c.jsxs)("div", {
                                                className: "pbb-campaigns-pagination-buttons",
                                                children: [
                                                    (0, c.jsxs)("b", { children: [(0, s.__)("Page:", "popup-builder-block"), " "] }),
                                                    q > 1 &&
                                                        (0, c.jsx)("button", {
                                                            className: "arrow-btn",
                                                            disabled: 1 === P,
                                                            onClick: () => I((t) => Math.max(t - 1, 1)),
                                                            children: (0, c.jsx)("svg", {
                                                                xmlns: "http://www.w3.org/2000/svg",
                                                                width: "8",
                                                                height: "12",
                                                                viewBox: "0 0 8 12",
                                                                fill: "none",
                                                                children: (0, c.jsx)("path", { d: "M6.5 11L1.5 6L6.5 1", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                            }),
                                                        }),
                                                    (() => {
                                                        const t = [],
                                                            e = Math.max(1, P - 3),
                                                            i = Math.min(q, P + 3);
                                                        e > 1 &&
                                                            (t.push((0, c.jsx)("button", { onClick: () => I(1), className: 1 === P ? "active" : "", children: "1" }, 1)),
                                                            e > 2 && t.push((0, c.jsx)("span", { children: "..." }, "start-ellipsis")));
                                                        for (let s = e; s <= i; s++) t.push((0, c.jsx)("button", { onClick: () => I(s), className: P === s ? "active" : "", children: s }, s));
                                                        return (
                                                            i < q &&
                                                                (i < q - 1 && t.push((0, c.jsx)("span", { children: "..." }, "end-ellipsis")),
                                                                t.push((0, c.jsx)("button", { onClick: () => I(q), className: P === q ? "active" : "", children: q }, q))),
                                                            t
                                                        );
                                                    })(),
                                                    q > 1 &&
                                                        (0, c.jsx)("button", {
                                                            className: "arrow-btn",
                                                            disabled: P === q,
                                                            onClick: () => I((t) => Math.min(t + 1, q)),
                                                            children: (0, c.jsx)("svg", {
                                                                xmlns: "http://www.w3.org/2000/svg",
                                                                width: "8",
                                                                height: "12",
                                                                viewBox: "0 0 8 12",
                                                                fill: "none",
                                                                children: (0, c.jsx)("path", { d: "M1.5 11L6.5 6L1.5 1", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                            }),
                                                        }),
                                                ],
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                            w &&
                                (0, c.jsx)(m.A, {
                                    closeModal: Y,
                                    className: "pbb-subscribers-details",
                                    children:
                                        "delete" === _ &&
                                        (0, c.jsxs)("div", {
                                            className: "pbb-subscribers-details-content delete-confirmation",
                                            children: [
                                                (0, c.jsx)("span", {
                                                    className: "alert-icon",
                                                    children: (0, c.jsxs)("svg", {
                                                        xmlns: "http://www.w3.org/2000/svg",
                                                        width: "38",
                                                        height: "37",
                                                        viewBox: "0 0 38 37",
                                                        fill: "none",
                                                        children: [
                                                            (0, c.jsx)("path", {
                                                                d:
                                                                    "M6.97908 13.9293C11.3237 6.24157 13.496 2.39771 16.4769 1.40825C18.1167 0.863916 19.8832 0.863916 21.523 1.40825C24.504 2.39771 26.6763 6.24157 31.0209 13.9293C35.3656 21.6169 37.5378 25.4608 36.8862 28.5928C36.5277 30.3159 35.6444 31.8787 34.363 33.0575C32.0338 35.2 27.6893 35.2 19 35.2C10.3108 35.2 5.96615 35.2 3.63693 33.0575C2.35555 31.8787 1.47231 30.3159 1.1138 28.5928C0.462149 25.4608 2.63446 21.6169 6.97908 13.9293Z",
                                                                stroke: "#FEAD0C",
                                                                strokeWidth: "2",
                                                            }),
                                                            (0, c.jsx)("path", { d: "M18.9844 25.2998H19.0024", stroke: "#FEAD0C", strokeWidth: "2.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                            (0, c.jsx)("path", { d: "M19 19.9002V12.7002", stroke: "#FEAD0C", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                        ],
                                                    }),
                                                }),
                                                (0, c.jsx)("h2", { className: "confirmation-title", children: (0, s.__)("Are you sure to delete this Campaign?", "popup-builder-block") }),
                                                (0, c.jsx)("p", { className: "confirmation-description", children: (0, s.__)("Deleting this Campaign will remove all associated data.", "popup-builder-block") }),
                                                (0, c.jsxs)("div", {
                                                    className: "confirmation-actions",
                                                    children: [
                                                        (0, c.jsxs)(l.Button, {
                                                            className: "confirm-btn",
                                                            onClick: async () => {
                                                                const t = "single" === B ? [v] : b;
                                                                try {
                                                                    R(!0);
                                                                    for (const e of t) await o()({ path: `/pbb/v1/${W}/${e}?force=true`, method: "DELETE" });
                                                                    R(!1), u.oR.success("Campaigns removed successfully!", { autoClose: 2e3, pauseOnHover: !1 }), x([]), y(null), Y(), n((e) => e.filter((e) => !t.includes(e.id)));
                                                                } catch (t) {
                                                                    console.error("Failed to delete posts:", t), R(!1), u.oR.error("Failed to delete selected campaigns.", { autoClose: 2e3, pauseOnHover: !1 });
                                                                }
                                                            },
                                                            children: [(0, s.__)("Yes, I'm Sure", "popup-builder-block"), N && (0, c.jsx)(l.Spinner, { style: { width: "12px", height: "12px", margin: "0px 0 0 6px" } })],
                                                        }),
                                                        (0, c.jsx)(l.Button, { className: "cancel-btn", onClick: Y, children: (0, s.__)("Cancel", "popup-builder-block") }),
                                                    ],
                                                }),
                                            ],
                                        }),
                                }),
                        ],
                    });
                };
            },
            790: (t) => {
                "use strict";
                t.exports = window.ReactJSXRuntime;
            },
            1287: (t, e, i) => {
                "use strict";
                i.d(e, { s: () => o });
                var s = i(1609),
                    n = !!s.useInsertionEffect && s.useInsertionEffect,
                    o =
                        n ||
                        function (t) {
                            return t();
                        };
                n || s.useLayoutEffect;
            },
            1409: (t, e, i) => {
                "use strict";
                i.d(e, { N9: () => R, br: () => I, oR: () => L });
                var s = i(1609),
                    n = i(4164);
                !(function (t) {
                    if ("undefined" == typeof document) return;
                    let e = document.head || document.getElementsByTagName("head")[0],
                        i = document.createElement("style");
                    (i.type = "text/css"), e.firstChild ? e.insertBefore(i, e.firstChild) : e.appendChild(i), i.styleSheet ? (i.styleSheet.cssText = t) : i.appendChild(document.createTextNode(t));
                })(
                    ':root{--toastify-color-light: #fff;--toastify-color-dark: #121212;--toastify-color-info: #3498db;--toastify-color-success: #07bc0c;--toastify-color-warning: #f1c40f;--toastify-color-error: hsl(6, 78%, 57%);--toastify-color-transparent: rgba(255, 255, 255, .7);--toastify-icon-color-info: var(--toastify-color-info);--toastify-icon-color-success: var(--toastify-color-success);--toastify-icon-color-warning: var(--toastify-color-warning);--toastify-icon-color-error: var(--toastify-color-error);--toastify-container-width: fit-content;--toastify-toast-width: 320px;--toastify-toast-offset: 16px;--toastify-toast-top: max(var(--toastify-toast-offset), env(safe-area-inset-top));--toastify-toast-right: max(var(--toastify-toast-offset), env(safe-area-inset-right));--toastify-toast-left: max(var(--toastify-toast-offset), env(safe-area-inset-left));--toastify-toast-bottom: max(var(--toastify-toast-offset), env(safe-area-inset-bottom));--toastify-toast-background: #fff;--toastify-toast-padding: 14px;--toastify-toast-min-height: 64px;--toastify-toast-max-height: 800px;--toastify-toast-bd-radius: 6px;--toastify-toast-shadow: 0px 4px 12px rgba(0, 0, 0, .1);--toastify-font-family: sans-serif;--toastify-z-index: 9999;--toastify-text-color-light: #757575;--toastify-text-color-dark: #fff;--toastify-text-color-info: #fff;--toastify-text-color-success: #fff;--toastify-text-color-warning: #fff;--toastify-text-color-error: #fff;--toastify-spinner-color: #616161;--toastify-spinner-color-empty-area: #e0e0e0;--toastify-color-progress-light: linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55);--toastify-color-progress-dark: #bb86fc;--toastify-color-progress-info: var(--toastify-color-info);--toastify-color-progress-success: var(--toastify-color-success);--toastify-color-progress-warning: var(--toastify-color-warning);--toastify-color-progress-error: var(--toastify-color-error);--toastify-color-progress-bgo: .2}.Toastify__toast-container{z-index:var(--toastify-z-index);-webkit-transform:translate3d(0,0,var(--toastify-z-index));position:fixed;width:var(--toastify-container-width);box-sizing:border-box;color:#fff;display:flex;flex-direction:column}.Toastify__toast-container--top-left{top:var(--toastify-toast-top);left:var(--toastify-toast-left)}.Toastify__toast-container--top-center{top:var(--toastify-toast-top);left:50%;transform:translate(-50%);align-items:center}.Toastify__toast-container--top-right{top:var(--toastify-toast-top);right:var(--toastify-toast-right);align-items:end}.Toastify__toast-container--bottom-left{bottom:var(--toastify-toast-bottom);left:var(--toastify-toast-left)}.Toastify__toast-container--bottom-center{bottom:var(--toastify-toast-bottom);left:50%;transform:translate(-50%);align-items:center}.Toastify__toast-container--bottom-right{bottom:var(--toastify-toast-bottom);right:var(--toastify-toast-right);align-items:end}.Toastify__toast{--y: 0;position:relative;touch-action:none;width:var(--toastify-toast-width);min-height:var(--toastify-toast-min-height);box-sizing:border-box;margin-bottom:1rem;padding:var(--toastify-toast-padding);border-radius:var(--toastify-toast-bd-radius);box-shadow:var(--toastify-toast-shadow);max-height:var(--toastify-toast-max-height);font-family:var(--toastify-font-family);z-index:0;display:flex;flex:1 auto;align-items:center;word-break:break-word}@media only screen and (max-width: 480px){.Toastify__toast-container{width:100vw;left:env(safe-area-inset-left);margin:0}.Toastify__toast-container--top-left,.Toastify__toast-container--top-center,.Toastify__toast-container--top-right{top:env(safe-area-inset-top);transform:translate(0)}.Toastify__toast-container--bottom-left,.Toastify__toast-container--bottom-center,.Toastify__toast-container--bottom-right{bottom:env(safe-area-inset-bottom);transform:translate(0)}.Toastify__toast-container--rtl{right:env(safe-area-inset-right);left:initial}.Toastify__toast{--toastify-toast-width: 100%;margin-bottom:0;border-radius:0}}.Toastify__toast-container[data-stacked=true]{width:var(--toastify-toast-width)}.Toastify__toast--stacked{position:absolute;width:100%;transform:translate3d(0,var(--y),0) scale(var(--s));transition:transform .3s}.Toastify__toast--stacked[data-collapsed] .Toastify__toast-body,.Toastify__toast--stacked[data-collapsed] .Toastify__close-button{transition:opacity .1s}.Toastify__toast--stacked[data-collapsed=false]{overflow:visible}.Toastify__toast--stacked[data-collapsed=true]:not(:last-child)>*{opacity:0}.Toastify__toast--stacked:after{content:"";position:absolute;left:0;right:0;height:calc(var(--g) * 1px);bottom:100%}.Toastify__toast--stacked[data-pos=top]{top:0}.Toastify__toast--stacked[data-pos=bot]{bottom:0}.Toastify__toast--stacked[data-pos=bot].Toastify__toast--stacked:before{transform-origin:top}.Toastify__toast--stacked[data-pos=top].Toastify__toast--stacked:before{transform-origin:bottom}.Toastify__toast--stacked:before{content:"";position:absolute;left:0;right:0;bottom:0;height:100%;transform:scaleY(3);z-index:-1}.Toastify__toast--rtl{direction:rtl}.Toastify__toast--close-on-click{cursor:pointer}.Toastify__toast-icon{margin-inline-end:10px;width:22px;flex-shrink:0;display:flex}.Toastify--animate{animation-fill-mode:both;animation-duration:.5s}.Toastify--animate-icon{animation-fill-mode:both;animation-duration:.3s}.Toastify__toast-theme--dark{background:var(--toastify-color-dark);color:var(--toastify-text-color-dark)}.Toastify__toast-theme--light,.Toastify__toast-theme--colored.Toastify__toast--default{background:var(--toastify-color-light);color:var(--toastify-text-color-light)}.Toastify__toast-theme--colored.Toastify__toast--info{color:var(--toastify-text-color-info);background:var(--toastify-color-info)}.Toastify__toast-theme--colored.Toastify__toast--success{color:var(--toastify-text-color-success);background:var(--toastify-color-success)}.Toastify__toast-theme--colored.Toastify__toast--warning{color:var(--toastify-text-color-warning);background:var(--toastify-color-warning)}.Toastify__toast-theme--colored.Toastify__toast--error{color:var(--toastify-text-color-error);background:var(--toastify-color-error)}.Toastify__progress-bar-theme--light{background:var(--toastify-color-progress-light)}.Toastify__progress-bar-theme--dark{background:var(--toastify-color-progress-dark)}.Toastify__progress-bar--info{background:var(--toastify-color-progress-info)}.Toastify__progress-bar--success{background:var(--toastify-color-progress-success)}.Toastify__progress-bar--warning{background:var(--toastify-color-progress-warning)}.Toastify__progress-bar--error{background:var(--toastify-color-progress-error)}.Toastify__progress-bar-theme--colored.Toastify__progress-bar--info,.Toastify__progress-bar-theme--colored.Toastify__progress-bar--success,.Toastify__progress-bar-theme--colored.Toastify__progress-bar--warning,.Toastify__progress-bar-theme--colored.Toastify__progress-bar--error{background:var(--toastify-color-transparent)}.Toastify__close-button{color:#fff;position:absolute;top:6px;right:6px;background:transparent;outline:none;border:none;padding:0;cursor:pointer;opacity:.7;transition:.3s ease;z-index:1}.Toastify__toast--rtl .Toastify__close-button{left:6px;right:unset}.Toastify__close-button--light{color:#000;opacity:.3}.Toastify__close-button>svg{fill:currentColor;height:16px;width:14px}.Toastify__close-button:hover,.Toastify__close-button:focus{opacity:1}@keyframes Toastify__trackProgress{0%{transform:scaleX(1)}to{transform:scaleX(0)}}.Toastify__progress-bar{position:absolute;bottom:0;left:0;width:100%;height:100%;z-index:1;opacity:.7;transform-origin:left}.Toastify__progress-bar--animated{animation:Toastify__trackProgress linear 1 forwards}.Toastify__progress-bar--controlled{transition:transform .2s}.Toastify__progress-bar--rtl{right:0;left:initial;transform-origin:right;border-bottom-left-radius:initial}.Toastify__progress-bar--wrp{position:absolute;overflow:hidden;bottom:0;left:0;width:100%;height:5px;border-bottom-left-radius:var(--toastify-toast-bd-radius);border-bottom-right-radius:var(--toastify-toast-bd-radius)}.Toastify__progress-bar--wrp[data-hidden=true]{opacity:0}.Toastify__progress-bar--bg{opacity:var(--toastify-color-progress-bgo);width:100%;height:100%}.Toastify__spinner{width:20px;height:20px;box-sizing:border-box;border:2px solid;border-radius:100%;border-color:var(--toastify-spinner-color-empty-area);border-right-color:var(--toastify-spinner-color);animation:Toastify__spin .65s linear infinite}@keyframes Toastify__bounceInRight{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(3000px,0,0)}60%{opacity:1;transform:translate3d(-25px,0,0)}75%{transform:translate3d(10px,0,0)}90%{transform:translate3d(-5px,0,0)}to{transform:none}}@keyframes Toastify__bounceOutRight{20%{opacity:1;transform:translate3d(-20px,var(--y),0)}to{opacity:0;transform:translate3d(2000px,var(--y),0)}}@keyframes Toastify__bounceInLeft{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(-3000px,0,0)}60%{opacity:1;transform:translate3d(25px,0,0)}75%{transform:translate3d(-10px,0,0)}90%{transform:translate3d(5px,0,0)}to{transform:none}}@keyframes Toastify__bounceOutLeft{20%{opacity:1;transform:translate3d(20px,var(--y),0)}to{opacity:0;transform:translate3d(-2000px,var(--y),0)}}@keyframes Toastify__bounceInUp{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(0,3000px,0)}60%{opacity:1;transform:translate3d(0,-20px,0)}75%{transform:translate3d(0,10px,0)}90%{transform:translate3d(0,-5px,0)}to{transform:translateZ(0)}}@keyframes Toastify__bounceOutUp{20%{transform:translate3d(0,calc(var(--y) - 10px),0)}40%,45%{opacity:1;transform:translate3d(0,calc(var(--y) + 20px),0)}to{opacity:0;transform:translate3d(0,-2000px,0)}}@keyframes Toastify__bounceInDown{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(0,-3000px,0)}60%{opacity:1;transform:translate3d(0,25px,0)}75%{transform:translate3d(0,-10px,0)}90%{transform:translate3d(0,5px,0)}to{transform:none}}@keyframes Toastify__bounceOutDown{20%{transform:translate3d(0,calc(var(--y) - 10px),0)}40%,45%{opacity:1;transform:translate3d(0,calc(var(--y) + 20px),0)}to{opacity:0;transform:translate3d(0,2000px,0)}}.Toastify__bounce-enter--top-left,.Toastify__bounce-enter--bottom-left{animation-name:Toastify__bounceInLeft}.Toastify__bounce-enter--top-right,.Toastify__bounce-enter--bottom-right{animation-name:Toastify__bounceInRight}.Toastify__bounce-enter--top-center{animation-name:Toastify__bounceInDown}.Toastify__bounce-enter--bottom-center{animation-name:Toastify__bounceInUp}.Toastify__bounce-exit--top-left,.Toastify__bounce-exit--bottom-left{animation-name:Toastify__bounceOutLeft}.Toastify__bounce-exit--top-right,.Toastify__bounce-exit--bottom-right{animation-name:Toastify__bounceOutRight}.Toastify__bounce-exit--top-center{animation-name:Toastify__bounceOutUp}.Toastify__bounce-exit--bottom-center{animation-name:Toastify__bounceOutDown}@keyframes Toastify__zoomIn{0%{opacity:0;transform:scale3d(.3,.3,.3)}50%{opacity:1}}@keyframes Toastify__zoomOut{0%{opacity:1}50%{opacity:0;transform:translate3d(0,var(--y),0) scale3d(.3,.3,.3)}to{opacity:0}}.Toastify__zoom-enter{animation-name:Toastify__zoomIn}.Toastify__zoom-exit{animation-name:Toastify__zoomOut}@keyframes Toastify__flipIn{0%{transform:perspective(400px) rotateX(90deg);animation-timing-function:ease-in;opacity:0}40%{transform:perspective(400px) rotateX(-20deg);animation-timing-function:ease-in}60%{transform:perspective(400px) rotateX(10deg);opacity:1}80%{transform:perspective(400px) rotateX(-5deg)}to{transform:perspective(400px)}}@keyframes Toastify__flipOut{0%{transform:translate3d(0,var(--y),0) perspective(400px)}30%{transform:translate3d(0,var(--y),0) perspective(400px) rotateX(-20deg);opacity:1}to{transform:translate3d(0,var(--y),0) perspective(400px) rotateX(90deg);opacity:0}}.Toastify__flip-enter{animation-name:Toastify__flipIn}.Toastify__flip-exit{animation-name:Toastify__flipOut}@keyframes Toastify__slideInRight{0%{transform:translate3d(110%,0,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideInLeft{0%{transform:translate3d(-110%,0,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideInUp{0%{transform:translate3d(0,110%,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideInDown{0%{transform:translate3d(0,-110%,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideOutRight{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(110%,var(--y),0)}}@keyframes Toastify__slideOutLeft{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(-110%,var(--y),0)}}@keyframes Toastify__slideOutDown{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(0,500px,0)}}@keyframes Toastify__slideOutUp{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(0,-500px,0)}}.Toastify__slide-enter--top-left,.Toastify__slide-enter--bottom-left{animation-name:Toastify__slideInLeft}.Toastify__slide-enter--top-right,.Toastify__slide-enter--bottom-right{animation-name:Toastify__slideInRight}.Toastify__slide-enter--top-center{animation-name:Toastify__slideInDown}.Toastify__slide-enter--bottom-center{animation-name:Toastify__slideInUp}.Toastify__slide-exit--top-left,.Toastify__slide-exit--bottom-left{animation-name:Toastify__slideOutLeft;animation-timing-function:ease-in;animation-duration:.3s}.Toastify__slide-exit--top-right,.Toastify__slide-exit--bottom-right{animation-name:Toastify__slideOutRight;animation-timing-function:ease-in;animation-duration:.3s}.Toastify__slide-exit--top-center{animation-name:Toastify__slideOutUp;animation-timing-function:ease-in;animation-duration:.3s}.Toastify__slide-exit--bottom-center{animation-name:Toastify__slideOutDown;animation-timing-function:ease-in;animation-duration:.3s}@keyframes Toastify__spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n'
                );
                var o = (t) => "number" == typeof t && !isNaN(t),
                    a = (t) => "string" == typeof t,
                    r = (t) => "function" == typeof t,
                    l = (t) => (a(t) || r(t) ? t : null),
                    c = (t, e) => (!1 === t || (o(t) && t > 0) ? t : e),
                    d = (t) => (0, s.isValidElement)(t) || a(t) || r(t) || o(t);
                function h({ enter: t, exit: e, appendPosition: i = !1, collapse: n = !0, collapseDuration: o = 300 }) {
                    return function ({ children: a, position: r, preventExitTransition: l, done: c, nodeRef: d, isIn: h, playToast: u }) {
                        let p = i ? `${t}--${r}` : t,
                            m = i ? `${e}--${r}` : e,
                            f = (0, s.useRef)(0);
                        return (
                            (0, s.useLayoutEffect)(() => {
                                let t = d.current,
                                    e = p.split(" "),
                                    i = (s) => {
                                        s.target === d.current && (u(), t.removeEventListener("animationend", i), t.removeEventListener("animationcancel", i), 0 === f.current && "animationcancel" !== s.type && t.classList.remove(...e));
                                    };
                                t.classList.add(...e), t.addEventListener("animationend", i), t.addEventListener("animationcancel", i);
                            }, []),
                            (0, s.useEffect)(() => {
                                let t = d.current,
                                    e = () => {
                                        t.removeEventListener("animationend", e),
                                            n
                                                ? (function (t, e, i = 300) {
                                                      let { scrollHeight: s, style: n } = t;
                                                      requestAnimationFrame(() => {
                                                          (n.minHeight = "initial"),
                                                              (n.height = s + "px"),
                                                              (n.transition = `all ${i}ms`),
                                                              requestAnimationFrame(() => {
                                                                  (n.height = "0"), (n.padding = "0"), (n.margin = "0"), setTimeout(e, i);
                                                              });
                                                      });
                                                  })(t, c, o)
                                                : c();
                                    };
                                h || (l ? e() : ((f.current = 1), (t.className += ` ${m}`), t.addEventListener("animationend", e)));
                            }, [h]),
                            s.createElement(s.Fragment, null, a)
                        );
                    };
                }
                function u(t, e) {
                    return {
                        content: p(t.content, t.props),
                        containerId: t.props.containerId,
                        id: t.props.toastId,
                        theme: t.props.theme,
                        type: t.props.type,
                        data: t.props.data || {},
                        isLoading: t.props.isLoading,
                        icon: t.props.icon,
                        reason: t.removalReason,
                        status: e,
                    };
                }
                function p(t, e, i = !1) {
                    return (0, s.isValidElement)(t) && !a(t.type)
                        ? (0, s.cloneElement)(t, { closeToast: e.closeToast, toastProps: e, data: e.data, isPaused: i })
                        : r(t)
                        ? t({ closeToast: e.closeToast, toastProps: e, data: e.data, isPaused: i })
                        : t;
                }
                function m({ delay: t, isRunning: e, closeToast: i, type: o = "default", hide: a, className: l, controlledProgress: c, progress: d, rtl: h, isIn: u, theme: p }) {
                    let m = a || (c && 0 === d),
                        f = { animationDuration: `${t}ms`, animationPlayState: e ? "running" : "paused" };
                    c && (f.transform = `scaleX(${d})`);
                    let g = (0, n.A)("Toastify__progress-bar", c ? "Toastify__progress-bar--controlled" : "Toastify__progress-bar--animated", `Toastify__progress-bar-theme--${p}`, `Toastify__progress-bar--${o}`, {
                            "Toastify__progress-bar--rtl": h,
                        }),
                        b = r(l) ? l({ rtl: h, type: o, defaultClassName: g }) : (0, n.A)(g, l),
                        x = {
                            [c && d >= 1 ? "onTransitionEnd" : "onAnimationEnd"]:
                                c && d < 1
                                    ? null
                                    : () => {
                                          u && i();
                                      },
                        };
                    return s.createElement(
                        "div",
                        { className: "Toastify__progress-bar--wrp", "data-hidden": m },
                        s.createElement("div", { className: `Toastify__progress-bar--bg Toastify__progress-bar-theme--${p} Toastify__progress-bar--${o}` }),
                        s.createElement("div", { role: "progressbar", "aria-hidden": m ? "true" : "false", "aria-label": "notification timer", className: b, style: f, ...x })
                    );
                }
                var f = 1,
                    g = () => "" + f++;
                var b = new Map(),
                    x = [],
                    v = new Set(),
                    y = (t) => v.forEach((e) => e(t)),
                    _ = () => b.size > 0;
                function C(t, e) {
                    var i;
                    if (e) return !(null == (i = b.get(e)) || !i.isToastActive(t));
                    let s = !1;
                    return (
                        b.forEach((e) => {
                            e.isToastActive(t) && (s = !0);
                        }),
                        s
                    );
                }
                function w(t, e) {
                    d(t) &&
                        (_() || x.push({ content: t, options: e }),
                        b.forEach((i) => {
                            i.buildToast(t, e);
                        }));
                }
                function z(t, e) {
                    b.forEach((i) => {
                        (null == e || null == e || !e.containerId || (null == e ? void 0 : e.containerId) === i.id) && i.toggle(t, null == e ? void 0 : e.id);
                    });
                }
                function k(t) {
                    let e = t.containerId || 1;
                    return {
                        subscribe(i) {
                            let s = (function (t, e, i) {
                                let s = 1,
                                    n = 0,
                                    a = [],
                                    r = [],
                                    h = e,
                                    p = new Map(),
                                    m = new Set(),
                                    f = () => {
                                        (r = Array.from(p.values())), m.forEach((t) => t());
                                    },
                                    g = (t) => {
                                        var e, i;
                                        null == (i = null == (e = t.props) ? void 0 : e.onClose) || i.call(e, t.removalReason), (t.isActive = !1);
                                    },
                                    b = (t) => {
                                        if (null == t) p.forEach(g);
                                        else {
                                            let e = p.get(t);
                                            e && g(e);
                                        }
                                        f();
                                    },
                                    x = (t) => {
                                        var e, s;
                                        let { toastId: n, updateId: o } = t.props,
                                            a = null == o;
                                        t.staleId && p.delete(t.staleId), (t.isActive = !0), p.set(n, t), f(), i(u(t, a ? "added" : "updated")), a && (null == (s = (e = t.props).onOpen) || s.call(e));
                                    };
                                return {
                                    id: t,
                                    props: h,
                                    observe: (t) => (m.add(t), () => m.delete(t)),
                                    toggle: (t, e) => {
                                        p.forEach((i) => {
                                            var s;
                                            (null == e || e === i.props.toastId) && (null == (s = i.toggle) || s.call(i, t));
                                        });
                                    },
                                    removeToast: b,
                                    toasts: p,
                                    clearQueue: () => {
                                        (n -= a.length), (a = []);
                                    },
                                    buildToast: (e, r) => {
                                        if (
                                            (({ containerId: e, toastId: i, updateId: s }) => {
                                                let n = e ? e !== t : 1 !== t,
                                                    o = p.has(i) && null == s;
                                                return n || o;
                                            })(r)
                                        )
                                            return;
                                        let { toastId: m, updateId: g, data: v, staleId: y, delay: _ } = r,
                                            C = null == g;
                                        C && n++;
                                        let w = {
                                            ...h,
                                            style: h.toastStyle,
                                            key: s++,
                                            ...Object.fromEntries(Object.entries(r).filter(([t, e]) => null != e)),
                                            toastId: m,
                                            updateId: g,
                                            data: v,
                                            isIn: !1,
                                            className: l(r.className || h.toastClassName),
                                            progressClassName: l(r.progressClassName || h.progressClassName),
                                            autoClose: !r.isLoading && c(r.autoClose, h.autoClose),
                                            closeToast(t) {
                                                (p.get(m).removalReason = t), b(m);
                                            },
                                            deleteToast() {
                                                let t = p.get(m);
                                                if (null != t) {
                                                    if ((i(u(t, "removed")), p.delete(m), n--, n < 0 && (n = 0), a.length > 0)) return void x(a.shift());
                                                    f();
                                                }
                                            },
                                        };
                                        (w.closeButton = h.closeButton), !1 === r.closeButton || d(r.closeButton) ? (w.closeButton = r.closeButton) : !0 === r.closeButton && (w.closeButton = !d(h.closeButton) || h.closeButton);
                                        let z = { content: e, props: w, staleId: y };
                                        h.limit && h.limit > 0 && n > h.limit && C
                                            ? a.push(z)
                                            : o(_)
                                            ? setTimeout(() => {
                                                  x(z);
                                              }, _)
                                            : x(z);
                                    },
                                    setProps(t) {
                                        h = t;
                                    },
                                    setToggle: (t, e) => {
                                        let i = p.get(t);
                                        i && (i.toggle = e);
                                    },
                                    isToastActive: (t) => {
                                        var e;
                                        return null == (e = p.get(t)) ? void 0 : e.isActive;
                                    },
                                    getSnapshot: () => r,
                                };
                            })(e, t, y);
                            b.set(e, s);
                            let n = s.observe(i);
                            return (
                                x.forEach((t) => w(t.content, t.options)),
                                (x = []),
                                () => {
                                    n(), b.delete(e);
                                }
                            );
                        },
                        setProps(t) {
                            var i;
                            null == (i = b.get(e)) || i.setProps(t);
                        },
                        getSnapshot() {
                            var t;
                            return null == (t = b.get(e)) ? void 0 : t.getSnapshot();
                        },
                    };
                }
                function M(t) {
                    return t && (a(t.toastId) || o(t.toastId)) ? t.toastId : g();
                }
                function j(t, e) {
                    return w(t, e), e.toastId;
                }
                function S(t, e) {
                    return { ...e, type: (e && e.type) || t, toastId: M(e) };
                }
                function A(t) {
                    return (e, i) => j(e, S(t, i));
                }
                function L(t, e) {
                    return j(t, S("default", e));
                }
                (L.loading = (t, e) => j(t, S("default", { isLoading: !0, autoClose: !1, closeOnClick: !1, closeButton: !1, draggable: !1, ...e }))),
                    (L.promise = function (t, { pending: e, error: i, success: s }, n) {
                        let o;
                        e && (o = a(e) ? L.loading(e, n) : L.loading(e.render, { ...n, ...e }));
                        let l = { isLoading: null, autoClose: null, closeOnClick: null, closeButton: null, draggable: null },
                            c = (t, e, i) => {
                                if (null == e) return void L.dismiss(o);
                                let s = { type: t, ...l, ...n, data: i },
                                    r = a(e) ? { render: e } : e;
                                return o ? L.update(o, { ...s, ...r }) : L(r.render, { ...s, ...r }), i;
                            },
                            d = r(t) ? t() : t;
                        return d.then((t) => c("success", s, t)).catch((t) => c("error", i, t)), d;
                    }),
                    (L.success = A("success")),
                    (L.info = A("info")),
                    (L.error = A("error")),
                    (L.warning = A("warning")),
                    (L.warn = L.warning),
                    (L.dark = (t, e) => j(t, S("default", { theme: "dark", ...e }))),
                    (L.dismiss = function (t) {
                        !(function (t) {
                            if (_()) {
                                if (null == t || ((t) => a(t) || o(t))(t))
                                    b.forEach((e) => {
                                        e.removeToast(t);
                                    });
                                else if (t && ("containerId" in t || "id" in t)) {
                                    let e = b.get(t.containerId);
                                    e
                                        ? e.removeToast(t.id)
                                        : b.forEach((e) => {
                                              e.removeToast(t.id);
                                          });
                                }
                            } else x = x.filter((e) => null != t && e.options.toastId !== t);
                        })(t);
                    }),
                    (L.clearWaitingQueue = (t = {}) => {
                        b.forEach((e) => {
                            e.props.limit && (!t.containerId || e.id === t.containerId) && e.clearQueue();
                        });
                    }),
                    (L.isActive = C),
                    (L.update = (t, e = {}) => {
                        let i = ((t, { containerId: e }) => {
                            var i;
                            return null == (i = b.get(e || 1)) ? void 0 : i.toasts.get(t);
                        })(t, e);
                        if (i) {
                            let { props: s, content: n } = i,
                                o = { delay: 100, ...s, ...e, toastId: e.toastId || t, updateId: g() };
                            o.toastId !== t && (o.staleId = t);
                            let a = o.render || n;
                            delete o.render, j(a, o);
                        }
                    }),
                    (L.done = (t) => {
                        L.update(t, { progress: 1 });
                    }),
                    (L.onChange = function (t) {
                        return (
                            v.add(t),
                            () => {
                                v.delete(t);
                            }
                        );
                    }),
                    (L.play = (t) => z(!0, t)),
                    (L.pause = (t) => z(!1, t));
                var D = "undefined" != typeof window ? s.useLayoutEffect : s.useEffect,
                    T = ({ theme: t, type: e, isLoading: i, ...n }) => s.createElement("svg", { viewBox: "0 0 24 24", width: "100%", height: "100%", fill: "colored" === t ? "currentColor" : `var(--toastify-icon-color-${e})`, ...n }),
                    E = {
                        info: function (t) {
                            return s.createElement(
                                T,
                                { ...t },
                                s.createElement("path", {
                                    d:
                                        "M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z",
                                })
                            );
                        },
                        warning: function (t) {
                            return s.createElement(
                                T,
                                { ...t },
                                s.createElement("path", {
                                    d:
                                        "M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z",
                                })
                            );
                        },
                        success: function (t) {
                            return s.createElement(
                                T,
                                { ...t },
                                s.createElement("path", { d: "M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z" })
                            );
                        },
                        error: function (t) {
                            return s.createElement(
                                T,
                                { ...t },
                                s.createElement("path", {
                                    d:
                                        "M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z",
                                })
                            );
                        },
                        spinner: function () {
                            return s.createElement("div", { className: "Toastify__spinner" });
                        },
                    };
                var O = (t) => {
                        let { isRunning: e, preventExitTransition: i, toastRef: o, eventHandlers: a, playToast: l } = (function (t) {
                                let [e, i] = (0, s.useState)(!1),
                                    [n, o] = (0, s.useState)(!1),
                                    a = (0, s.useRef)(null),
                                    r = (0, s.useRef)({ start: 0, delta: 0, removalDistance: 0, canCloseOnClick: !0, canDrag: !1, didMove: !1 }).current,
                                    { autoClose: l, pauseOnHover: c, closeToast: d, onClick: h, closeOnClick: u } = t;
                                function p() {
                                    i(!0);
                                }
                                function m() {
                                    i(!1);
                                }
                                function f(i) {
                                    let s = a.current;
                                    if (r.canDrag && s) {
                                        (r.didMove = !0), e && m(), "x" === t.draggableDirection ? (r.delta = i.clientX - r.start) : (r.delta = i.clientY - r.start), r.start !== i.clientX && (r.canCloseOnClick = !1);
                                        let n = "x" === t.draggableDirection ? `${r.delta}px, var(--y)` : `0, calc(${r.delta}px + var(--y))`;
                                        (s.style.transform = `translate3d(${n},0)`), (s.style.opacity = "" + (1 - Math.abs(r.delta / r.removalDistance)));
                                    }
                                }
                                function g() {
                                    document.removeEventListener("pointermove", f), document.removeEventListener("pointerup", g);
                                    let e = a.current;
                                    if (r.canDrag && r.didMove && e) {
                                        if (((r.canDrag = !1), Math.abs(r.delta) > r.removalDistance)) return o(!0), t.closeToast(!0), void t.collapseAll();
                                        (e.style.transition = "transform 0.2s, opacity 0.2s"), e.style.removeProperty("transform"), e.style.removeProperty("opacity");
                                    }
                                }
                                (function (t) {
                                    var e;
                                    null == (e = b.get(t.containerId || 1)) || e.setToggle(t.id, t.fn);
                                })({ id: t.toastId, containerId: t.containerId, fn: i }),
                                    (0, s.useEffect)(() => {
                                        if (t.pauseOnFocusLoss)
                                            return (
                                                document.hasFocus() || m(),
                                                window.addEventListener("focus", p),
                                                window.addEventListener("blur", m),
                                                () => {
                                                    window.removeEventListener("focus", p), window.removeEventListener("blur", m);
                                                }
                                            );
                                    }, [t.pauseOnFocusLoss]);
                                let x = {
                                    onPointerDown: function (e) {
                                        if (!0 === t.draggable || t.draggable === e.pointerType) {
                                            (r.didMove = !1), document.addEventListener("pointermove", f), document.addEventListener("pointerup", g);
                                            let i = a.current;
                                            (r.canCloseOnClick = !0),
                                                (r.canDrag = !0),
                                                (i.style.transition = "none"),
                                                "x" === t.draggableDirection
                                                    ? ((r.start = e.clientX), (r.removalDistance = i.offsetWidth * (t.draggablePercent / 100)))
                                                    : ((r.start = e.clientY), (r.removalDistance = (i.offsetHeight * (80 === t.draggablePercent ? 1.5 * t.draggablePercent : t.draggablePercent)) / 100));
                                        }
                                    },
                                    onPointerUp: function (e) {
                                        let { top: i, bottom: s, left: n, right: o } = a.current.getBoundingClientRect();
                                        "touchend" !== e.nativeEvent.type && t.pauseOnHover && e.clientX >= n && e.clientX <= o && e.clientY >= i && e.clientY <= s ? m() : p();
                                    },
                                };
                                return (
                                    l && c && ((x.onMouseEnter = m), t.stacked || (x.onMouseLeave = p)),
                                    u &&
                                        (x.onClick = (t) => {
                                            h && h(t), r.canCloseOnClick && d(!0);
                                        }),
                                    { playToast: p, pauseToast: m, isRunning: e, preventExitTransition: n, toastRef: a, eventHandlers: x }
                                );
                            })(t),
                            {
                                closeButton: c,
                                children: d,
                                autoClose: h,
                                onClick: u,
                                type: f,
                                hideProgressBar: g,
                                closeToast: x,
                                transition: v,
                                position: y,
                                className: _,
                                style: C,
                                progressClassName: w,
                                updateId: z,
                                role: k,
                                progress: M,
                                rtl: j,
                                toastId: S,
                                deleteToast: A,
                                isIn: L,
                                isLoading: D,
                                closeOnClick: T,
                                theme: O,
                                ariaLabel: P,
                            } = t,
                            I = (0, n.A)("Toastify__toast", `Toastify__toast-theme--${O}`, `Toastify__toast--${f}`, { "Toastify__toast--rtl": j }, { "Toastify__toast--close-on-click": T }),
                            N = r(_) ? _({ rtl: j, position: y, type: f, defaultClassName: I }) : (0, n.A)(I, _),
                            R = (function ({ theme: t, type: e, isLoading: i, icon: n }) {
                                let o = null,
                                    a = { theme: t, type: e };
                                return !1 === n || (r(n) ? (o = n({ ...a, isLoading: i })) : (0, s.isValidElement)(n) ? (o = (0, s.cloneElement)(n, a)) : i ? (o = E.spinner()) : ((t) => t in E)(e) && (o = E[e](a))), o;
                            })(t),
                            V = !!M || !h,
                            F = { closeToast: x, type: f, theme: O },
                            B = null;
                        return (
                            !1 === c ||
                                (B = r(c)
                                    ? c(F)
                                    : (0, s.isValidElement)(c)
                                    ? (0, s.cloneElement)(c, F)
                                    : (function ({ closeToast: t, theme: e, ariaLabel: i = "close" }) {
                                          return s.createElement(
                                              "button",
                                              {
                                                  className: `Toastify__close-button Toastify__close-button--${e}`,
                                                  type: "button",
                                                  onClick: (e) => {
                                                      e.stopPropagation(), t(!0);
                                                  },
                                                  "aria-label": i,
                                              },
                                              s.createElement(
                                                  "svg",
                                                  { "aria-hidden": "true", viewBox: "0 0 14 16" },
                                                  s.createElement("path", { fillRule: "evenodd", d: "M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z" })
                                              )
                                          );
                                      })(F)),
                            s.createElement(
                                v,
                                { isIn: L, done: A, position: y, preventExitTransition: i, nodeRef: o, playToast: l },
                                s.createElement(
                                    "div",
                                    { id: S, tabIndex: 0, onClick: u, "data-in": L, className: N, ...a, style: C, ref: o, ...(L && { role: k, "aria-label": P }) },
                                    null != R && s.createElement("div", { className: (0, n.A)("Toastify__toast-icon", { "Toastify--animate-icon Toastify__zoom-enter": !D }) }, R),
                                    p(d, t, !e),
                                    B,
                                    !t.customProgressBar &&
                                        s.createElement(m, { ...(z && !V ? { key: `p-${z}` } : {}), rtl: j, theme: O, delay: h, isRunning: e, isIn: L, closeToast: x, hide: g, type: f, className: w, controlledProgress: V, progress: M || 0 })
                                )
                            )
                        );
                    },
                    P = (t, e = !1) => ({ enter: `Toastify--animate Toastify__${t}-enter`, exit: `Toastify--animate Toastify__${t}-exit`, appendPosition: e }),
                    I = h(P("bounce", !0)),
                    N =
                        (h(P("slide", !0)),
                        h(P("zoom")),
                        h(P("flip")),
                        {
                            position: "top-right",
                            transition: I,
                            autoClose: 5e3,
                            closeButton: !0,
                            pauseOnHover: !0,
                            pauseOnFocusLoss: !0,
                            draggable: "touch",
                            draggablePercent: 80,
                            draggableDirection: "x",
                            role: "alert",
                            theme: "light",
                            "aria-label": "Notifications Alt+T",
                            hotKeys: (t) => t.altKey && "KeyT" === t.code,
                        });
                function R(t) {
                    let e = { ...N, ...t },
                        i = t.stacked,
                        [o, a] = (0, s.useState)(!0),
                        c = (0, s.useRef)(null),
                        { getToastToRender: d, isToastActive: h, count: u } = (function (t) {
                            var e;
                            let { subscribe: i, getSnapshot: n, setProps: o } = (0, s.useRef)(k(t)).current;
                            o(t);
                            let a = null == (e = (0, s.useSyncExternalStore)(i, n, n)) ? void 0 : e.slice();
                            return {
                                getToastToRender: function (e) {
                                    if (!a) return [];
                                    let i = new Map();
                                    return (
                                        t.newestOnTop && a.reverse(),
                                        a.forEach((t) => {
                                            let { position: e } = t.props;
                                            i.has(e) || i.set(e, []), i.get(e).push(t);
                                        }),
                                        Array.from(i, (t) => e(t[0], t[1]))
                                    );
                                },
                                isToastActive: C,
                                count: null == a ? void 0 : a.length,
                            };
                        })(e),
                        { className: p, style: m, rtl: f, containerId: g, hotKeys: b } = e;
                    function x(t) {
                        let e = (0, n.A)("Toastify__toast-container", `Toastify__toast-container--${t}`, { "Toastify__toast-container--rtl": f });
                        return r(p) ? p({ position: t, rtl: f, defaultClassName: e }) : (0, n.A)(e, l(p));
                    }
                    function v() {
                        i && (a(!0), L.play());
                    }
                    return (
                        D(() => {
                            var t;
                            if (i) {
                                let i = c.current.querySelectorAll('[data-in="true"]'),
                                    s = 12,
                                    n = null == (t = e.position) ? void 0 : t.includes("top"),
                                    a = 0,
                                    r = 0;
                                Array.from(i)
                                    .reverse()
                                    .forEach((t, e) => {
                                        let i = t;
                                        i.classList.add("Toastify__toast--stacked"), e > 0 && (i.dataset.collapsed = `${o}`), i.dataset.pos || (i.dataset.pos = n ? "top" : "bot");
                                        let l = a * (o ? 0.2 : 1) + (o ? 0 : s * e);
                                        i.style.setProperty("--y", `${n ? l : -1 * l}px`), i.style.setProperty("--g", `${s}`), i.style.setProperty("--s", "" + (1 - (o ? r : 0))), (a += i.offsetHeight), (r += 0.025);
                                    });
                            }
                        }, [o, u, i]),
                        (0, s.useEffect)(() => {
                            function t(t) {
                                var e;
                                let i = c.current;
                                b(t) && (null == (e = i.querySelector('[tabIndex="0"]')) || e.focus(), a(!1), L.pause()),
                                    "Escape" === t.key && (document.activeElement === i || (null != i && i.contains(document.activeElement))) && (a(!0), L.play());
                            }
                            return (
                                document.addEventListener("keydown", t),
                                () => {
                                    document.removeEventListener("keydown", t);
                                }
                            );
                        }, [b]),
                        s.createElement(
                            "section",
                            {
                                ref: c,
                                className: "Toastify",
                                id: g,
                                onMouseEnter: () => {
                                    i && (a(!1), L.pause());
                                },
                                onMouseLeave: v,
                                "aria-live": "polite",
                                "aria-atomic": "false",
                                "aria-relevant": "additions text",
                                "aria-label": e["aria-label"],
                            },
                            d((t, e) => {
                                let n = e.length ? { ...m } : { ...m, pointerEvents: "none" };
                                return s.createElement(
                                    "div",
                                    { tabIndex: -1, className: x(t), "data-stacked": i, style: n, key: `c-${t}` },
                                    e.map(({ content: t, props: e }) => s.createElement(O, { ...e, stacked: i, collapseAll: v, isIn: h(e.toastId, e.containerId), key: `t-${e.key}` }, t))
                                );
                            })
                        )
                    );
                }
            },
            1416: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => l });
                var s = i(6005),
                    n = i(8539),
                    o = i(2661),
                    a = i(6087),
                    r = i(790);
                (0, a.memo)((t) =>
                    (0, r.jsx)(o.A, {
                        type: "select-async",
                        label: t.label,
                        labelBlock: "block",
                        children: (0, r.jsx)(n.A, {
                            className: t.className || "gkit-complex-select",
                            classNamePrefix: t.classNamePrefix || "gkit-complex-select",
                            value: t.value,
                            loadOptions: t.options,
                            theme: (t) => ({ ...t, colors: { ...t.colors, primary25: "#F2F4F7", primary: "#3BAAFE10" } }),
                            ...t,
                        }),
                    })
                );
                const l = (0, a.memo)((t) =>
                    (0, r.jsx)(o.A, {
                        type: "select",
                        label: t.label,
                        labelBlock: "block",
                        children: (0, r.jsx)(s.Ay, {
                            className: "gkit-complex-select",
                            classNamePrefix: "gkit-complex-select",
                            value: t.value,
                            onChange: t.onChange,
                            options: t.options,
                            theme: (t) => ({ ...t, colors: { ...t.colors, primary25: "#F2F4F7", primary: "#3BAAFE10" } }),
                            ...t,
                        }),
                    })
                );
            },
            1455: (t) => {
                "use strict";
                t.exports = window.wp.apiFetch;
            },
            1609: (t) => {
                "use strict";
                t.exports = window.React;
            },
            1811: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => a });
                var s =
                    Number.isNaN ||
                    function (t) {
                        return "number" == typeof t && t != t;
                    };
                function n(t, e) {
                    return t === e || !(!s(t) || !s(e));
                }
                function o(t, e) {
                    if (t.length !== e.length) return !1;
                    for (var i = 0; i < t.length; i++) if (!n(t[i], e[i])) return !1;
                    return !0;
                }
                function a(t, e) {
                    void 0 === e && (e = o);
                    var i = null;
                    function s() {
                        for (var s = [], n = 0; n < arguments.length; n++) s[n] = arguments[n];
                        if (i && i.lastThis === this && e(s, i.lastArgs)) return i.lastResult;
                        var o = t.apply(this, s);
                        return (i = { lastResult: o, lastArgs: s, lastThis: this }), o;
                    }
                    return (
                        (s.clear = function () {
                            i = null;
                        }),
                        s
                    );
                }
            },
            2176: (t, e, i) => {
                "use strict";
                function s() {
                    try {
                        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                    } catch (t) {}
                    return (s = function () {
                        return !!t;
                    })();
                }
                i.d(e, { A: () => s });
            },
            2284: (t, e, i) => {
                "use strict";
                function s(t) {
                    return (
                        (s =
                            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                                ? function (t) {
                                      return typeof t;
                                  }
                                : function (t) {
                                      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                                  }),
                        s(t)
                    );
                }
                i.d(e, { A: () => s });
            },
            2327: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => n });
                var s = i(2284);
                function n(t, e) {
                    if ("object" != (0, s.A)(t) || !t) return t;
                    var i = t[Symbol.toPrimitive];
                    if (void 0 !== i) {
                        var n = i.call(t, e || "default");
                        if ("object" != (0, s.A)(n)) return n;
                        throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === e ? String : Number)(t);
                }
            },
            2661: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => n });
                var s = i(790);
                const n = ({ label: t, type: e = "", labelBlock: i = "inline", children: n, dynamicContentClass: o }) =>
                    (0, s.jsx)(s.Fragment, {
                        children: (0, s.jsx)("div", {
                            className: `gkit-control gkit-control-wrap gkit-control-type-${e} gkit-control-label-${i} ${o}`,
                            children: (0, s.jsx)("div", {
                                className: "gkit-control-wrapper",
                                children: (0, s.jsx)("div", {
                                    className: "components-base-control",
                                    children: t ? (0, s.jsxs)("div", { className: "components-base-control__field", children: [(0, s.jsx)("span", { className: "components-base-control__label", children: t }), n] }) : n,
                                }),
                            }),
                        }),
                    });
            },
            2836: (t, e, i) => {
                "use strict";
                i.d(e, { u: () => l });
                var s = i(9379),
                    n = i(3453),
                    o = i(45),
                    a = i(1609),
                    r = ["defaultInputValue", "defaultMenuIsOpen", "defaultValue", "inputValue", "menuIsOpen", "onChange", "onInputChange", "onMenuClose", "onMenuOpen", "value"];
                function l(t) {
                    var e = t.defaultInputValue,
                        i = void 0 === e ? "" : e,
                        l = t.defaultMenuIsOpen,
                        c = void 0 !== l && l,
                        d = t.defaultValue,
                        h = void 0 === d ? null : d,
                        u = t.inputValue,
                        p = t.menuIsOpen,
                        m = t.onChange,
                        f = t.onInputChange,
                        g = t.onMenuClose,
                        b = t.onMenuOpen,
                        x = t.value,
                        v = (0, o.A)(t, r),
                        y = (0, a.useState)(void 0 !== u ? u : i),
                        _ = (0, n.A)(y, 2),
                        C = _[0],
                        w = _[1],
                        z = (0, a.useState)(void 0 !== p ? p : c),
                        k = (0, n.A)(z, 2),
                        M = k[0],
                        j = k[1],
                        S = (0, a.useState)(void 0 !== x ? x : h),
                        A = (0, n.A)(S, 2),
                        L = A[0],
                        D = A[1],
                        T = (0, a.useCallback)(
                            function (t, e) {
                                "function" == typeof m && m(t, e), D(t);
                            },
                            [m]
                        ),
                        E = (0, a.useCallback)(
                            function (t, e) {
                                var i;
                                "function" == typeof f && (i = f(t, e)), w(void 0 !== i ? i : t);
                            },
                            [f]
                        ),
                        O = (0, a.useCallback)(
                            function () {
                                "function" == typeof b && b(), j(!0);
                            },
                            [b]
                        ),
                        P = (0, a.useCallback)(
                            function () {
                                "function" == typeof g && g(), j(!1);
                            },
                            [g]
                        ),
                        I = void 0 !== u ? u : C,
                        N = void 0 !== p ? p : M,
                        R = void 0 !== x ? x : L;
                    return (0, s.A)((0, s.A)({}, v), {}, { inputValue: I, menuIsOpen: N, onChange: T, onInputChange: E, onMenuClose: P, onMenuOpen: O, value: R });
                }
            },
            2901: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => o });
                var s = i(9922);
                function n(t, e) {
                    for (var i = 0; i < e.length; i++) {
                        var n = e[i];
                        (n.enumerable = n.enumerable || !1), (n.configurable = !0), "value" in n && (n.writable = !0), Object.defineProperty(t, (0, s.A)(n.key), n);
                    }
                }
                function o(t, e, i) {
                    return e && n(t.prototype, e), i && n(t, i), Object.defineProperty(t, "prototype", { writable: !1 }), t;
                }
            },
            3029: (t, e, i) => {
                "use strict";
                function s(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                i.d(e, { A: () => s });
            },
            3072: (t, e) => {
                "use strict";
                var i = "function" == typeof Symbol && Symbol.for,
                    s = i ? Symbol.for("react.element") : 60103,
                    n = i ? Symbol.for("react.portal") : 60106,
                    o = i ? Symbol.for("react.fragment") : 60107,
                    a = i ? Symbol.for("react.strict_mode") : 60108,
                    r = i ? Symbol.for("react.profiler") : 60114,
                    l = i ? Symbol.for("react.provider") : 60109,
                    c = i ? Symbol.for("react.context") : 60110,
                    d = i ? Symbol.for("react.async_mode") : 60111,
                    h = i ? Symbol.for("react.concurrent_mode") : 60111,
                    u = i ? Symbol.for("react.forward_ref") : 60112,
                    p = i ? Symbol.for("react.suspense") : 60113,
                    m = i ? Symbol.for("react.suspense_list") : 60120,
                    f = i ? Symbol.for("react.memo") : 60115,
                    g = i ? Symbol.for("react.lazy") : 60116,
                    b = i ? Symbol.for("react.block") : 60121,
                    x = i ? Symbol.for("react.fundamental") : 60117,
                    v = i ? Symbol.for("react.responder") : 60118,
                    y = i ? Symbol.for("react.scope") : 60119;
                function _(t) {
                    if ("object" == typeof t && null !== t) {
                        var e = t.$$typeof;
                        switch (e) {
                            case s:
                                switch ((t = t.type)) {
                                    case d:
                                    case h:
                                    case o:
                                    case r:
                                    case a:
                                    case p:
                                        return t;
                                    default:
                                        switch ((t = t && t.$$typeof)) {
                                            case c:
                                            case u:
                                            case g:
                                            case f:
                                            case l:
                                                return t;
                                            default:
                                                return e;
                                        }
                                }
                            case n:
                                return e;
                        }
                    }
                }
                function C(t) {
                    return _(t) === h;
                }
                (e.AsyncMode = d),
                    (e.ConcurrentMode = h),
                    (e.ContextConsumer = c),
                    (e.ContextProvider = l),
                    (e.Element = s),
                    (e.ForwardRef = u),
                    (e.Fragment = o),
                    (e.Lazy = g),
                    (e.Memo = f),
                    (e.Portal = n),
                    (e.Profiler = r),
                    (e.StrictMode = a),
                    (e.Suspense = p),
                    (e.isAsyncMode = function (t) {
                        return C(t) || _(t) === d;
                    }),
                    (e.isConcurrentMode = C),
                    (e.isContextConsumer = function (t) {
                        return _(t) === c;
                    }),
                    (e.isContextProvider = function (t) {
                        return _(t) === l;
                    }),
                    (e.isElement = function (t) {
                        return "object" == typeof t && null !== t && t.$$typeof === s;
                    }),
                    (e.isForwardRef = function (t) {
                        return _(t) === u;
                    }),
                    (e.isFragment = function (t) {
                        return _(t) === o;
                    }),
                    (e.isLazy = function (t) {
                        return _(t) === g;
                    }),
                    (e.isMemo = function (t) {
                        return _(t) === f;
                    }),
                    (e.isPortal = function (t) {
                        return _(t) === n;
                    }),
                    (e.isProfiler = function (t) {
                        return _(t) === r;
                    }),
                    (e.isStrictMode = function (t) {
                        return _(t) === a;
                    }),
                    (e.isSuspense = function (t) {
                        return _(t) === p;
                    }),
                    (e.isValidElementType = function (t) {
                        return (
                            "string" == typeof t ||
                            "function" == typeof t ||
                            t === o ||
                            t === h ||
                            t === r ||
                            t === a ||
                            t === p ||
                            t === m ||
                            ("object" == typeof t &&
                                null !== t &&
                                (t.$$typeof === g || t.$$typeof === f || t.$$typeof === l || t.$$typeof === c || t.$$typeof === u || t.$$typeof === x || t.$$typeof === v || t.$$typeof === y || t.$$typeof === b))
                        );
                    }),
                    (e.typeOf = _);
            },
            3145: (t, e, i) => {
                "use strict";
                function s(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var i = 0, s = Array(e); i < e; i++) s[i] = t[i];
                    return s;
                }
                i.d(e, { A: () => s });
            },
            3404: (t, e, i) => {
                "use strict";
                t.exports = i(3072);
            },
            3453: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => r });
                var s = i(6369),
                    n = i(6986),
                    o = i(7800),
                    a = i(6562);
                function r(t, e) {
                    return (0, s.A)(t) || (0, n.A)(t, e) || (0, o.A)(t, e) || (0, a.A)();
                }
            },
            3662: (t, e, i) => {
                "use strict";
                function s(t, e) {
                    return (
                        (s = Object.setPrototypeOf
                            ? Object.setPrototypeOf.bind()
                            : function (t, e) {
                                  return (t.__proto__ = e), t;
                              }),
                        s(t, e)
                    );
                }
                i.d(e, { A: () => s });
            },
            3716: (t, e, i) => {
                "use strict";
                i.d(e, { wE: () => a });
                var s = i(4534),
                    n = i(9735),
                    o = i(390);
                function a(t) {
                    return (0, o.VF)(r("", null, null, null, [""], (t = (0, o.c4)(t)), 0, [0], t));
                }
                function r(t, e, i, s, a, h, u, p, m) {
                    for (var f = 0, g = 0, b = u, x = 0, v = 0, y = 0, _ = 1, C = 1, w = 1, z = 0, k = "", M = a, j = h, S = s, A = k; C; )
                        switch (((y = z), (z = (0, o.K2)()))) {
                            case 40:
                                if (108 != y && 58 == (0, n.wN)(A, b - 1)) {
                                    -1 != (0, n.K5)((A += (0, n.HC)((0, o.Tb)(z), "&", "&\f")), "&\f") && (w = -1);
                                    break;
                                }
                            case 34:
                            case 39:
                            case 91:
                                A += (0, o.Tb)(z);
                                break;
                            case 9:
                            case 10:
                            case 13:
                            case 32:
                                A += (0, o.mw)(y);
                                break;
                            case 92:
                                A += (0, o.Nc)((0, o.OW)() - 1, 7);
                                continue;
                            case 47:
                                switch ((0, o.se)()) {
                                    case 42:
                                    case 47:
                                        (0, n.BC)(c((0, o.nf)((0, o.K2)(), (0, o.OW)()), e, i), m);
                                        break;
                                    default:
                                        A += "/";
                                }
                                break;
                            case 123 * _:
                                p[f++] = (0, n.b2)(A) * w;
                            case 125 * _:
                            case 59:
                            case 0:
                                switch (z) {
                                    case 0:
                                    case 125:
                                        C = 0;
                                    case 59 + g:
                                        -1 == w && (A = (0, n.HC)(A, /\f/g, "")), v > 0 && (0, n.b2)(A) - b && (0, n.BC)(v > 32 ? d(A + ";", s, i, b - 1) : d((0, n.HC)(A, " ", "") + ";", s, i, b - 2), m);
                                        break;
                                    case 59:
                                        A += ";";
                                    default:
                                        if (((0, n.BC)((S = l(A, e, i, f, g, a, p, k, (M = []), (j = []), b)), h), 123 === z))
                                            if (0 === g) r(A, e, S, S, M, h, b, p, j);
                                            else
                                                switch (99 === x && 110 === (0, n.wN)(A, 3) ? 100 : x) {
                                                    case 100:
                                                    case 108:
                                                    case 109:
                                                    case 115:
                                                        r(t, S, S, s && (0, n.BC)(l(t, S, S, 0, 0, a, p, k, a, (M = []), b), j), a, j, b, p, s ? M : j);
                                                        break;
                                                    default:
                                                        r(A, S, S, S, [""], j, 0, p, j);
                                                }
                                }
                                (f = g = v = 0), (_ = w = 1), (k = A = ""), (b = u);
                                break;
                            case 58:
                                (b = 1 + (0, n.b2)(A)), (v = y);
                            default:
                                if (_ < 1)
                                    if (123 == z) --_;
                                    else if (125 == z && 0 == _++ && 125 == (0, o.YL)()) continue;
                                switch (((A += (0, n.HT)(z)), z * _)) {
                                    case 38:
                                        w = g > 0 ? 1 : ((A += "\f"), -1);
                                        break;
                                    case 44:
                                        (p[f++] = ((0, n.b2)(A) - 1) * w), (w = 1);
                                        break;
                                    case 64:
                                        45 === (0, o.se)() && (A += (0, o.Tb)((0, o.K2)())), (x = (0, o.se)()), (g = b = (0, n.b2)((k = A += (0, o.Cv)((0, o.OW)())))), z++;
                                        break;
                                    case 45:
                                        45 === y && 2 == (0, n.b2)(A) && (_ = 0);
                                }
                        }
                    return h;
                }
                function l(t, e, i, a, r, l, c, d, h, u, p) {
                    for (var m = r - 1, f = 0 === r ? l : [""], g = (0, n.FK)(f), b = 0, x = 0, v = 0; b < a; ++b)
                        for (var y = 0, _ = (0, n.c1)(t, m + 1, (m = (0, n.tn)((x = c[b])))), C = t; y < g; ++y) (C = (0, n.Bq)(x > 0 ? f[y] + " " + _ : (0, n.HC)(_, /&\f/g, f[y]))) && (h[v++] = C);
                    return (0, o.rH)(t, e, i, 0 === r ? s.XZ : d, h, u, p);
                }
                function c(t, e, i) {
                    return (0, o.rH)(t, e, i, s.YK, (0, n.HT)((0, o.Tp)()), (0, n.c1)(t, 2, -2), 0);
                }
                function d(t, e, i, a) {
                    return (0, o.rH)(t, e, i, s.LU, (0, n.c1)(t, 0, a), (0, n.c1)(t, a + 1, -1), a);
                }
            },
            3893: (t, e, i) => {
                "use strict";
                function s(t) {
                    if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
                }
                i.d(e, { A: () => s });
            },
            3899: (t, e, i) => {
                "use strict";
                i.d(e, { S: () => ct });
                for (
                    var s = i(8168),
                        n = i(9379),
                        o = i(3029),
                        a = i(2901),
                        r = i(5501),
                        l = i(9426),
                        c = i(9394),
                        d = i(1609),
                        h = i(9800),
                        u = i(7437),
                        p = i(1811),
                        m = i(45),
                        f = { name: "7pg0cj-a11yText", styles: "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap" },
                        g = function (t) {
                            return (0, u.Y)("span", (0, s.A)({ css: f }, t));
                        },
                        b = {
                            guidance: function (t) {
                                var e = t.isSearchable,
                                    i = t.isMulti,
                                    s = t.tabSelectsValue,
                                    n = t.context,
                                    o = t.isInitialFocus;
                                switch (n) {
                                    case "menu":
                                        return "Use Up and Down to choose options, press Enter to select the currently focused option, press Escape to exit the menu".concat(
                                            s ? ", press Tab to select the option and exit the menu" : "",
                                            "."
                                        );
                                    case "input":
                                        return o
                                            ? ""
                                                  .concat(t["aria-label"] || "Select", " is focused ")
                                                  .concat(e ? ",type to refine list" : "", ", press Down to open the menu, ")
                                                  .concat(i ? " press left to focus selected values" : "")
                                            : "";
                                    case "value":
                                        return "Use left and right to toggle between focused values, press Backspace to remove the currently focused value";
                                    default:
                                        return "";
                                }
                            },
                            onChange: function (t) {
                                var e = t.action,
                                    i = t.label,
                                    s = void 0 === i ? "" : i,
                                    n = t.labels,
                                    o = t.isDisabled;
                                switch (e) {
                                    case "deselect-option":
                                    case "pop-value":
                                    case "remove-value":
                                        return "option ".concat(s, ", deselected.");
                                    case "clear":
                                        return "All selected options have been cleared.";
                                    case "initial-input-focus":
                                        return "option".concat(n.length > 1 ? "s" : "", " ").concat(n.join(","), ", selected.");
                                    case "select-option":
                                        return "option ".concat(s, o ? " is disabled. Select another option." : ", selected.");
                                    default:
                                        return "";
                                }
                            },
                            onFocus: function (t) {
                                var e = t.context,
                                    i = t.focused,
                                    s = t.options,
                                    n = t.label,
                                    o = void 0 === n ? "" : n,
                                    a = t.selectValue,
                                    r = t.isDisabled,
                                    l = t.isSelected,
                                    c = t.isAppleDevice,
                                    d = function (t, e) {
                                        return t && t.length ? "".concat(t.indexOf(e) + 1, " of ").concat(t.length) : "";
                                    };
                                if ("value" === e && a) return "value ".concat(o, " focused, ").concat(d(a, i), ".");
                                if ("menu" === e && c) {
                                    var h = r ? " disabled" : "",
                                        u = "".concat(l ? " selected" : "").concat(h);
                                    return "".concat(o).concat(u, ", ").concat(d(s, i), ".");
                                }
                                return "";
                            },
                            onFilter: function (t) {
                                var e = t.inputValue,
                                    i = t.resultsMessage;
                                return "".concat(i).concat(e ? " for search term " + e : "", ".");
                            },
                        },
                        x = function (t) {
                            var e = t.ariaSelection,
                                i = t.focusedOption,
                                s = t.focusedValue,
                                o = t.focusableOptions,
                                a = t.isFocused,
                                r = t.selectValue,
                                l = t.selectProps,
                                c = t.id,
                                h = t.isAppleDevice,
                                p = l.ariaLiveMessages,
                                m = l.getOptionLabel,
                                f = l.inputValue,
                                x = l.isMulti,
                                v = l.isOptionDisabled,
                                y = l.isSearchable,
                                _ = l.menuIsOpen,
                                C = l.options,
                                w = l.screenReaderStatus,
                                z = l.tabSelectsValue,
                                k = l.isLoading,
                                M = l["aria-label"],
                                j = l["aria-live"],
                                S = (0, d.useMemo)(
                                    function () {
                                        return (0, n.A)((0, n.A)({}, b), p || {});
                                    },
                                    [p]
                                ),
                                A = (0, d.useMemo)(
                                    function () {
                                        var t,
                                            i = "";
                                        if (e && S.onChange) {
                                            var s = e.option,
                                                o = e.options,
                                                a = e.removedValue,
                                                l = e.removedValues,
                                                c = e.value,
                                                d = a || s || ((t = c), Array.isArray(t) ? null : t),
                                                h = d ? m(d) : "",
                                                u = o || l || void 0,
                                                p = u ? u.map(m) : [],
                                                f = (0, n.A)({ isDisabled: d && v(d, r), label: h, labels: p }, e);
                                            i = S.onChange(f);
                                        }
                                        return i;
                                    },
                                    [e, S, v, r, m]
                                ),
                                L = (0, d.useMemo)(
                                    function () {
                                        var t = "",
                                            e = i || s,
                                            n = !!(i && r && r.includes(i));
                                        if (e && S.onFocus) {
                                            var a = { focused: e, label: m(e), isDisabled: v(e, r), isSelected: n, options: o, context: e === i ? "menu" : "value", selectValue: r, isAppleDevice: h };
                                            t = S.onFocus(a);
                                        }
                                        return t;
                                    },
                                    [i, s, m, v, S, o, r, h]
                                ),
                                D = (0, d.useMemo)(
                                    function () {
                                        var t = "";
                                        if (_ && C.length && !k && S.onFilter) {
                                            var e = w({ count: o.length });
                                            t = S.onFilter({ inputValue: f, resultsMessage: e });
                                        }
                                        return t;
                                    },
                                    [o, f, _, S, C, w, k]
                                ),
                                T = "initial-input-focus" === (null == e ? void 0 : e.action),
                                E = (0, d.useMemo)(
                                    function () {
                                        var t = "";
                                        if (S.guidance) {
                                            var e = s ? "value" : _ ? "menu" : "input";
                                            t = S.guidance({ "aria-label": M, context: e, isDisabled: i && v(i, r), isMulti: x, isSearchable: y, tabSelectsValue: z, isInitialFocus: T });
                                        }
                                        return t;
                                    },
                                    [M, i, s, x, v, y, _, S, r, z, T]
                                ),
                                O = (0, u.Y)(
                                    d.Fragment,
                                    null,
                                    (0, u.Y)("span", { id: "aria-selection" }, A),
                                    (0, u.Y)("span", { id: "aria-focused" }, L),
                                    (0, u.Y)("span", { id: "aria-results" }, D),
                                    (0, u.Y)("span", { id: "aria-guidance" }, E)
                                );
                            return (0, u.Y)(d.Fragment, null, (0, u.Y)(g, { id: c }, T && O), (0, u.Y)(g, { "aria-live": j, "aria-atomic": "false", "aria-relevant": "additions text", role: "log" }, a && !T && O));
                        },
                        v = [
                            { base: "A", letters: "AⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ" },
                            { base: "AA", letters: "Ꜳ" },
                            { base: "AE", letters: "ÆǼǢ" },
                            { base: "AO", letters: "Ꜵ" },
                            { base: "AU", letters: "Ꜷ" },
                            { base: "AV", letters: "ꜸꜺ" },
                            { base: "AY", letters: "Ꜽ" },
                            { base: "B", letters: "BⒷＢḂḄḆɃƂƁ" },
                            { base: "C", letters: "CⒸＣĆĈĊČÇḈƇȻꜾ" },
                            { base: "D", letters: "DⒹＤḊĎḌḐḒḎĐƋƊƉꝹ" },
                            { base: "DZ", letters: "ǱǄ" },
                            { base: "Dz", letters: "ǲǅ" },
                            { base: "E", letters: "EⒺＥÈÉÊỀẾỄỂẼĒḔḖĔĖËẺĚȄȆẸỆȨḜĘḘḚƐƎ" },
                            { base: "F", letters: "FⒻＦḞƑꝻ" },
                            { base: "G", letters: "GⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾ" },
                            { base: "H", letters: "HⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ" },
                            { base: "I", letters: "IⒾＩÌÍÎĨĪĬİÏḮỈǏȈȊỊĮḬƗ" },
                            { base: "J", letters: "JⒿＪĴɈ" },
                            { base: "K", letters: "KⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ" },
                            { base: "L", letters: "LⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ" },
                            { base: "LJ", letters: "Ǉ" },
                            { base: "Lj", letters: "ǈ" },
                            { base: "M", letters: "MⓂＭḾṀṂⱮƜ" },
                            { base: "N", letters: "NⓃＮǸŃÑṄŇṆŅṊṈȠƝꞐꞤ" },
                            { base: "NJ", letters: "Ǌ" },
                            { base: "Nj", letters: "ǋ" },
                            { base: "O", letters: "OⓄＯÒÓÔỒỐỖỔÕṌȬṎŌṐṒŎȮȰÖȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬØǾƆƟꝊꝌ" },
                            { base: "OI", letters: "Ƣ" },
                            { base: "OO", letters: "Ꝏ" },
                            { base: "OU", letters: "Ȣ" },
                            { base: "P", letters: "PⓅＰṔṖƤⱣꝐꝒꝔ" },
                            { base: "Q", letters: "QⓆＱꝖꝘɊ" },
                            { base: "R", letters: "RⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ" },
                            { base: "S", letters: "SⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ" },
                            { base: "T", letters: "TⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ" },
                            { base: "TZ", letters: "Ꜩ" },
                            { base: "U", letters: "UⓊＵÙÚÛŨṸŪṺŬÜǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ" },
                            { base: "V", letters: "VⓋＶṼṾƲꝞɅ" },
                            { base: "VY", letters: "Ꝡ" },
                            { base: "W", letters: "WⓌＷẀẂŴẆẄẈⱲ" },
                            { base: "X", letters: "XⓍＸẊẌ" },
                            { base: "Y", letters: "YⓎＹỲÝŶỸȲẎŸỶỴƳɎỾ" },
                            { base: "Z", letters: "ZⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ" },
                            { base: "a", letters: "aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ" },
                            { base: "aa", letters: "ꜳ" },
                            { base: "ae", letters: "æǽǣ" },
                            { base: "ao", letters: "ꜵ" },
                            { base: "au", letters: "ꜷ" },
                            { base: "av", letters: "ꜹꜻ" },
                            { base: "ay", letters: "ꜽ" },
                            { base: "b", letters: "bⓑｂḃḅḇƀƃɓ" },
                            { base: "c", letters: "cⓒｃćĉċčçḉƈȼꜿↄ" },
                            { base: "d", letters: "dⓓｄḋďḍḑḓḏđƌɖɗꝺ" },
                            { base: "dz", letters: "ǳǆ" },
                            { base: "e", letters: "eⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ" },
                            { base: "f", letters: "fⓕｆḟƒꝼ" },
                            { base: "g", letters: "gⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ" },
                            { base: "h", letters: "hⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ" },
                            { base: "hv", letters: "ƕ" },
                            { base: "i", letters: "iⓘｉìíîĩīĭïḯỉǐȉȋịįḭɨı" },
                            { base: "j", letters: "jⓙｊĵǰɉ" },
                            { base: "k", letters: "kⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ" },
                            { base: "l", letters: "lⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇ" },
                            { base: "lj", letters: "ǉ" },
                            { base: "m", letters: "mⓜｍḿṁṃɱɯ" },
                            { base: "n", letters: "nⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ" },
                            { base: "nj", letters: "ǌ" },
                            { base: "o", letters: "oⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔꝋꝍɵ" },
                            { base: "oi", letters: "ƣ" },
                            { base: "ou", letters: "ȣ" },
                            { base: "oo", letters: "ꝏ" },
                            { base: "p", letters: "pⓟｐṕṗƥᵽꝑꝓꝕ" },
                            { base: "q", letters: "qⓠｑɋꝗꝙ" },
                            { base: "r", letters: "rⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ" },
                            { base: "s", letters: "sⓢｓßśṥŝṡšṧṣṩșşȿꞩꞅẛ" },
                            { base: "t", letters: "tⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ" },
                            { base: "tz", letters: "ꜩ" },
                            { base: "u", letters: "uⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ" },
                            { base: "v", letters: "vⓥｖṽṿʋꝟʌ" },
                            { base: "vy", letters: "ꝡ" },
                            { base: "w", letters: "wⓦｗẁẃŵẇẅẘẉⱳ" },
                            { base: "x", letters: "xⓧｘẋẍ" },
                            { base: "y", letters: "yⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ" },
                            { base: "z", letters: "zⓩｚźẑżžẓẕƶȥɀⱬꝣ" },
                        ],
                        y = new RegExp(
                            "[" +
                                v
                                    .map(function (t) {
                                        return t.letters;
                                    })
                                    .join("") +
                                "]",
                            "g"
                        ),
                        _ = {},
                        C = 0;
                    C < v.length;
                    C++
                )
                    for (var w = v[C], z = 0; z < w.letters.length; z++) _[w.letters[z]] = w.base;
                var k = function (t) {
                        return t.replace(y, function (t) {
                            return _[t];
                        });
                    },
                    M = (0, p.A)(k),
                    j = function (t) {
                        return t.replace(/^\s+|\s+$/g, "");
                    },
                    S = function (t) {
                        return "".concat(t.label, " ").concat(t.value);
                    },
                    A = ["innerRef"];
                function L(t) {
                    var e = t.innerRef,
                        i = (0, m.A)(t, A),
                        n = (0, h.r)(i, "onExited", "in", "enter", "exit", "appear");
                    return (0, u.Y)(
                        "input",
                        (0, s.A)({ ref: e }, n, {
                            css: (0, u.AH)(
                                {
                                    label: "dummyInput",
                                    background: 0,
                                    border: 0,
                                    caretColor: "transparent",
                                    fontSize: "inherit",
                                    gridArea: "1 / 1 / 2 / 3",
                                    outline: 0,
                                    padding: 0,
                                    width: 1,
                                    color: "transparent",
                                    left: -100,
                                    opacity: 0,
                                    position: "relative",
                                    transform: "scale(.01)",
                                },
                                "",
                                ""
                            ),
                        })
                    );
                }
                var D = ["boxSizing", "height", "overflow", "paddingRight", "position"],
                    T = { boxSizing: "border-box", overflow: "hidden", position: "relative", height: "100%" };
                function E(t) {
                    t.cancelable && t.preventDefault();
                }
                function O(t) {
                    t.stopPropagation();
                }
                function P() {
                    var t = this.scrollTop,
                        e = this.scrollHeight,
                        i = t + this.offsetHeight;
                    0 === t ? (this.scrollTop = 1) : i === e && (this.scrollTop = t - 1);
                }
                function I() {
                    return "ontouchstart" in window || navigator.maxTouchPoints;
                }
                var N = !("undefined" == typeof window || !window.document || !window.document.createElement),
                    R = 0,
                    V = { capture: !1, passive: !1 },
                    F = function (t) {
                        var e = t.target;
                        return e.ownerDocument.activeElement && e.ownerDocument.activeElement.blur();
                    },
                    B = { name: "1kfdb0e", styles: "position:fixed;left:0;bottom:0;right:0;top:0" };
                function H(t) {
                    var e = t.children,
                        i = t.lockEnabled,
                        s = t.captureEnabled,
                        n = (function (t) {
                            var e = t.isEnabled,
                                i = t.onBottomArrive,
                                s = t.onBottomLeave,
                                n = t.onTopArrive,
                                o = t.onTopLeave,
                                a = (0, d.useRef)(!1),
                                r = (0, d.useRef)(!1),
                                l = (0, d.useRef)(0),
                                c = (0, d.useRef)(null),
                                u = (0, d.useCallback)(
                                    function (t, e) {
                                        if (null !== c.current) {
                                            var l = c.current,
                                                d = l.scrollTop,
                                                h = l.scrollHeight,
                                                u = l.clientHeight,
                                                p = c.current,
                                                m = e > 0,
                                                f = h - u - d,
                                                g = !1;
                                            f > e && a.current && (s && s(t), (a.current = !1)),
                                                m && r.current && (o && o(t), (r.current = !1)),
                                                m && e > f ? (i && !a.current && i(t), (p.scrollTop = h), (g = !0), (a.current = !0)) : !m && -e > d && (n && !r.current && n(t), (p.scrollTop = 0), (g = !0), (r.current = !0)),
                                                g &&
                                                    (function (t) {
                                                        t.cancelable && t.preventDefault(), t.stopPropagation();
                                                    })(t);
                                        }
                                    },
                                    [i, s, n, o]
                                ),
                                p = (0, d.useCallback)(
                                    function (t) {
                                        u(t, t.deltaY);
                                    },
                                    [u]
                                ),
                                m = (0, d.useCallback)(function (t) {
                                    l.current = t.changedTouches[0].clientY;
                                }, []),
                                f = (0, d.useCallback)(
                                    function (t) {
                                        var e = l.current - t.changedTouches[0].clientY;
                                        u(t, e);
                                    },
                                    [u]
                                ),
                                g = (0, d.useCallback)(
                                    function (t) {
                                        if (t) {
                                            var e = !!h.s && { passive: !1 };
                                            t.addEventListener("wheel", p, e), t.addEventListener("touchstart", m, e), t.addEventListener("touchmove", f, e);
                                        }
                                    },
                                    [f, m, p]
                                ),
                                b = (0, d.useCallback)(
                                    function (t) {
                                        t && (t.removeEventListener("wheel", p, !1), t.removeEventListener("touchstart", m, !1), t.removeEventListener("touchmove", f, !1));
                                    },
                                    [f, m, p]
                                );
                            return (
                                (0, d.useEffect)(
                                    function () {
                                        if (e) {
                                            var t = c.current;
                                            return (
                                                g(t),
                                                function () {
                                                    b(t);
                                                }
                                            );
                                        }
                                    },
                                    [e, g, b]
                                ),
                                function (t) {
                                    c.current = t;
                                }
                            );
                        })({ isEnabled: void 0 === s || s, onBottomArrive: t.onBottomArrive, onBottomLeave: t.onBottomLeave, onTopArrive: t.onTopArrive, onTopLeave: t.onTopLeave }),
                        o = (function (t) {
                            var e = t.isEnabled,
                                i = t.accountForScrollbars,
                                s = void 0 === i || i,
                                n = (0, d.useRef)({}),
                                o = (0, d.useRef)(null),
                                a = (0, d.useCallback)(
                                    function (t) {
                                        if (N) {
                                            var e = document.body,
                                                i = e && e.style;
                                            if (
                                                (s &&
                                                    D.forEach(function (t) {
                                                        var e = i && i[t];
                                                        n.current[t] = e;
                                                    }),
                                                s && R < 1)
                                            ) {
                                                var o = parseInt(n.current.paddingRight, 10) || 0,
                                                    a = document.body ? document.body.clientWidth : 0,
                                                    r = window.innerWidth - a + o || 0;
                                                Object.keys(T).forEach(function (t) {
                                                    var e = T[t];
                                                    i && (i[t] = e);
                                                }),
                                                    i && (i.paddingRight = "".concat(r, "px"));
                                            }
                                            e && I() && (e.addEventListener("touchmove", E, V), t && (t.addEventListener("touchstart", P, V), t.addEventListener("touchmove", O, V))), (R += 1);
                                        }
                                    },
                                    [s]
                                ),
                                r = (0, d.useCallback)(
                                    function (t) {
                                        if (N) {
                                            var e = document.body,
                                                i = e && e.style;
                                            (R = Math.max(R - 1, 0)),
                                                s &&
                                                    R < 1 &&
                                                    D.forEach(function (t) {
                                                        var e = n.current[t];
                                                        i && (i[t] = e);
                                                    }),
                                                e && I() && (e.removeEventListener("touchmove", E, V), t && (t.removeEventListener("touchstart", P, V), t.removeEventListener("touchmove", O, V)));
                                        }
                                    },
                                    [s]
                                );
                            return (
                                (0, d.useEffect)(
                                    function () {
                                        if (e) {
                                            var t = o.current;
                                            return (
                                                a(t),
                                                function () {
                                                    r(t);
                                                }
                                            );
                                        }
                                    },
                                    [e, a, r]
                                ),
                                function (t) {
                                    o.current = t;
                                }
                            );
                        })({ isEnabled: i });
                    return (0, u.Y)(
                        d.Fragment,
                        null,
                        i && (0, u.Y)("div", { onClick: F, css: B }),
                        e(function (t) {
                            n(t), o(t);
                        })
                    );
                }
                var W = { name: "1a0ro4n-requiredInput", styles: "label:requiredInput;opacity:0;pointer-events:none;position:absolute;bottom:0;left:0;right:0;width:100%" },
                    Y = function (t) {
                        var e = t.name,
                            i = t.onFocus;
                        return (0, u.Y)("input", { required: !0, name: e, tabIndex: -1, "aria-hidden": "true", onFocus: i, css: W, value: "", onChange: function () {} });
                    };
                function $(t) {
                    var e;
                    return "undefined" != typeof window && null != window.navigator && t.test((null === (e = window.navigator.userAgentData) || void 0 === e ? void 0 : e.platform) || window.navigator.platform);
                }
                function U() {
                    return $(/^Mac/i);
                }
                var Z = {
                        clearIndicator: h.a,
                        container: h.b,
                        control: h.d,
                        dropdownIndicator: h.e,
                        group: h.g,
                        groupHeading: h.f,
                        indicatorsContainer: h.i,
                        indicatorSeparator: h.h,
                        input: h.j,
                        loadingIndicator: h.l,
                        loadingMessage: h.k,
                        menu: h.m,
                        menuList: h.n,
                        menuPortal: h.o,
                        multiValue: h.p,
                        multiValueLabel: h.q,
                        multiValueRemove: h.t,
                        noOptionsMessage: h.u,
                        option: h.v,
                        placeholder: h.w,
                        singleValue: h.x,
                        valueContainer: h.y,
                    },
                    G = {
                        borderRadius: 4,
                        colors: {
                            primary: "#2684FF",
                            primary75: "#4C9AFF",
                            primary50: "#B2D4FF",
                            primary25: "#DEEBFF",
                            danger: "#DE350B",
                            dangerLight: "#FFBDAD",
                            neutral0: "hsl(0, 0%, 100%)",
                            neutral5: "hsl(0, 0%, 95%)",
                            neutral10: "hsl(0, 0%, 90%)",
                            neutral20: "hsl(0, 0%, 80%)",
                            neutral30: "hsl(0, 0%, 70%)",
                            neutral40: "hsl(0, 0%, 60%)",
                            neutral50: "hsl(0, 0%, 50%)",
                            neutral60: "hsl(0, 0%, 40%)",
                            neutral70: "hsl(0, 0%, 30%)",
                            neutral80: "hsl(0, 0%, 20%)",
                            neutral90: "hsl(0, 0%, 10%)",
                        },
                        spacing: { baseUnit: 4, controlHeight: 38, menuGutter: 8 },
                    },
                    K = {
                        "aria-live": "polite",
                        backspaceRemovesValue: !0,
                        blurInputOnSelect: (0, h.z)(),
                        captureMenuScroll: !(0, h.z)(),
                        classNames: {},
                        closeMenuOnSelect: !0,
                        closeMenuOnScroll: !1,
                        components: {},
                        controlShouldRenderValue: !0,
                        escapeClearsValue: !1,
                        filterOption: function (t, e) {
                            if (t.data.__isNew__) return !0;
                            var i = (0, n.A)({ ignoreCase: !0, ignoreAccents: !0, stringify: S, trim: !0, matchFrom: "any" }, undefined),
                                s = i.ignoreCase,
                                o = i.ignoreAccents,
                                a = i.stringify,
                                r = i.trim,
                                l = i.matchFrom,
                                c = r ? j(e) : e,
                                d = r ? j(a(t)) : a(t);
                            return s && ((c = c.toLowerCase()), (d = d.toLowerCase())), o && ((c = M(c)), (d = k(d))), "start" === l ? d.substr(0, c.length) === c : d.indexOf(c) > -1;
                        },
                        formatGroupLabel: function (t) {
                            return t.label;
                        },
                        getOptionLabel: function (t) {
                            return t.label;
                        },
                        getOptionValue: function (t) {
                            return t.value;
                        },
                        isDisabled: !1,
                        isLoading: !1,
                        isMulti: !1,
                        isRtl: !1,
                        isSearchable: !0,
                        isOptionDisabled: function (t) {
                            return !!t.isDisabled;
                        },
                        loadingMessage: function () {
                            return "Loading...";
                        },
                        maxMenuHeight: 300,
                        minMenuHeight: 140,
                        menuIsOpen: !1,
                        menuPlacement: "bottom",
                        menuPosition: "absolute",
                        menuShouldBlockScroll: !1,
                        menuShouldScrollIntoView: !(0, h.A)(),
                        noOptionsMessage: function () {
                            return "No options";
                        },
                        openMenuOnFocus: !1,
                        openMenuOnClick: !0,
                        options: [],
                        pageSize: 5,
                        placeholder: "Select...",
                        screenReaderStatus: function (t) {
                            var e = t.count;
                            return "".concat(e, " result").concat(1 !== e ? "s" : "", " available");
                        },
                        styles: {},
                        tabIndex: 0,
                        tabSelectsValue: !0,
                        unstyled: !1,
                    };
                function q(t, e, i, s) {
                    return { type: "option", data: e, isDisabled: nt(t, e, i), isSelected: ot(t, e, i), label: it(t, e), value: st(t, e), index: s };
                }
                function X(t, e) {
                    return t.options
                        .map(function (i, s) {
                            if ("options" in i) {
                                var n = i.options
                                    .map(function (i, s) {
                                        return q(t, i, e, s);
                                    })
                                    .filter(function (e) {
                                        return tt(t, e);
                                    });
                                return n.length > 0 ? { type: "group", data: i, options: n, index: s } : void 0;
                            }
                            var o = q(t, i, e, s);
                            return tt(t, o) ? o : void 0;
                        })
                        .filter(h.K);
                }
                function J(t) {
                    return t.reduce(function (t, e) {
                        return (
                            "group" === e.type
                                ? t.push.apply(
                                      t,
                                      (0, c.A)(
                                          e.options.map(function (t) {
                                              return t.data;
                                          })
                                      )
                                  )
                                : t.push(e.data),
                            t
                        );
                    }, []);
                }
                function Q(t, e) {
                    return t.reduce(function (t, i) {
                        return (
                            "group" === i.type
                                ? t.push.apply(
                                      t,
                                      (0, c.A)(
                                          i.options.map(function (t) {
                                              return { data: t.data, id: "".concat(e, "-").concat(i.index, "-").concat(t.index) };
                                          })
                                      )
                                  )
                                : t.push({ data: i.data, id: "".concat(e, "-").concat(i.index) }),
                            t
                        );
                    }, []);
                }
                function tt(t, e) {
                    var i = t.inputValue,
                        s = void 0 === i ? "" : i,
                        n = e.data,
                        o = e.isSelected,
                        a = e.label,
                        r = e.value;
                    return (!rt(t) || !o) && at(t, { label: a, value: r, data: n }, s);
                }
                var et = function (t, e) {
                        var i;
                        return (
                            (null ===
                                (i = t.find(function (t) {
                                    return t.data === e;
                                })) || void 0 === i
                                ? void 0
                                : i.id) || null
                        );
                    },
                    it = function (t, e) {
                        return t.getOptionLabel(e);
                    },
                    st = function (t, e) {
                        return t.getOptionValue(e);
                    };
                function nt(t, e, i) {
                    return "function" == typeof t.isOptionDisabled && t.isOptionDisabled(e, i);
                }
                function ot(t, e, i) {
                    if (i.indexOf(e) > -1) return !0;
                    if ("function" == typeof t.isOptionSelected) return t.isOptionSelected(e, i);
                    var s = st(t, e);
                    return i.some(function (e) {
                        return st(t, e) === s;
                    });
                }
                function at(t, e, i) {
                    return !t.filterOption || t.filterOption(e, i);
                }
                var rt = function (t) {
                        var e = t.hideSelectedOptions,
                            i = t.isMulti;
                        return void 0 === e ? i : e;
                    },
                    lt = 1,
                    ct = (function (t) {
                        (0, r.A)(i, t);
                        var e = (0, l.A)(i);
                        function i(t) {
                            var s;
                            if (
                                ((0, o.A)(this, i),
                                ((s = e.call(this, t)).state = {
                                    ariaSelection: null,
                                    focusedOption: null,
                                    focusedOptionId: null,
                                    focusableOptionsWithIds: [],
                                    focusedValue: null,
                                    inputIsHidden: !1,
                                    isFocused: !1,
                                    selectValue: [],
                                    clearFocusValueOnUpdate: !1,
                                    prevWasFocused: !1,
                                    inputIsHiddenAfterUpdate: void 0,
                                    prevProps: void 0,
                                    instancePrefix: "",
                                    isAppleDevice: !1,
                                }),
                                (s.blockOptionHover = !1),
                                (s.isComposing = !1),
                                (s.commonProps = void 0),
                                (s.initialTouchX = 0),
                                (s.initialTouchY = 0),
                                (s.openAfterFocus = !1),
                                (s.scrollToFocusedOptionOnUpdate = !1),
                                (s.userIsDragging = void 0),
                                (s.controlRef = null),
                                (s.getControlRef = function (t) {
                                    s.controlRef = t;
                                }),
                                (s.focusedOptionRef = null),
                                (s.getFocusedOptionRef = function (t) {
                                    s.focusedOptionRef = t;
                                }),
                                (s.menuListRef = null),
                                (s.getMenuListRef = function (t) {
                                    s.menuListRef = t;
                                }),
                                (s.inputRef = null),
                                (s.getInputRef = function (t) {
                                    s.inputRef = t;
                                }),
                                (s.focus = s.focusInput),
                                (s.blur = s.blurInput),
                                (s.onChange = function (t, e) {
                                    var i = s.props,
                                        n = i.onChange,
                                        o = i.name;
                                    (e.name = o), s.ariaOnChange(t, e), n(t, e);
                                }),
                                (s.setValue = function (t, e, i) {
                                    var n = s.props,
                                        o = n.closeMenuOnSelect,
                                        a = n.isMulti,
                                        r = n.inputValue;
                                    s.onInputChange("", { action: "set-value", prevInputValue: r }),
                                        o && (s.setState({ inputIsHiddenAfterUpdate: !a }), s.onMenuClose()),
                                        s.setState({ clearFocusValueOnUpdate: !0 }),
                                        s.onChange(t, { action: e, option: i });
                                }),
                                (s.selectOption = function (t) {
                                    var e = s.props,
                                        i = e.blurInputOnSelect,
                                        n = e.isMulti,
                                        o = e.name,
                                        a = s.state.selectValue,
                                        r = n && s.isOptionSelected(t, a),
                                        l = s.isOptionDisabled(t, a);
                                    if (r) {
                                        var d = s.getOptionValue(t);
                                        s.setValue(
                                            (0, h.B)(
                                                a.filter(function (t) {
                                                    return s.getOptionValue(t) !== d;
                                                })
                                            ),
                                            "deselect-option",
                                            t
                                        );
                                    } else {
                                        if (l) return void s.ariaOnChange((0, h.C)(t), { action: "select-option", option: t, name: o });
                                        n ? s.setValue((0, h.B)([].concat((0, c.A)(a), [t])), "select-option", t) : s.setValue((0, h.C)(t), "select-option");
                                    }
                                    i && s.blurInput();
                                }),
                                (s.removeValue = function (t) {
                                    var e = s.props.isMulti,
                                        i = s.state.selectValue,
                                        n = s.getOptionValue(t),
                                        o = i.filter(function (t) {
                                            return s.getOptionValue(t) !== n;
                                        }),
                                        a = (0, h.D)(e, o, o[0] || null);
                                    s.onChange(a, { action: "remove-value", removedValue: t }), s.focusInput();
                                }),
                                (s.clearValue = function () {
                                    var t = s.state.selectValue;
                                    s.onChange((0, h.D)(s.props.isMulti, [], null), { action: "clear", removedValues: t });
                                }),
                                (s.popValue = function () {
                                    var t = s.props.isMulti,
                                        e = s.state.selectValue,
                                        i = e[e.length - 1],
                                        n = e.slice(0, e.length - 1),
                                        o = (0, h.D)(t, n, n[0] || null);
                                    i && s.onChange(o, { action: "pop-value", removedValue: i });
                                }),
                                (s.getFocusedOptionId = function (t) {
                                    return et(s.state.focusableOptionsWithIds, t);
                                }),
                                (s.getFocusableOptionsWithIds = function () {
                                    return Q(X(s.props, s.state.selectValue), s.getElementId("option"));
                                }),
                                (s.getValue = function () {
                                    return s.state.selectValue;
                                }),
                                (s.cx = function () {
                                    for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++) e[i] = arguments[i];
                                    return h.E.apply(void 0, [s.props.classNamePrefix].concat(e));
                                }),
                                (s.getOptionLabel = function (t) {
                                    return it(s.props, t);
                                }),
                                (s.getOptionValue = function (t) {
                                    return st(s.props, t);
                                }),
                                (s.getStyles = function (t, e) {
                                    var i = s.props.unstyled,
                                        n = Z[t](e, i);
                                    n.boxSizing = "border-box";
                                    var o = s.props.styles[t];
                                    return o ? o(n, e) : n;
                                }),
                                (s.getClassNames = function (t, e) {
                                    var i, n;
                                    return null === (i = (n = s.props.classNames)[t]) || void 0 === i ? void 0 : i.call(n, e);
                                }),
                                (s.getElementId = function (t) {
                                    return "".concat(s.state.instancePrefix, "-").concat(t);
                                }),
                                (s.getComponents = function () {
                                    return (0, h.F)(s.props);
                                }),
                                (s.buildCategorizedOptions = function () {
                                    return X(s.props, s.state.selectValue);
                                }),
                                (s.getCategorizedOptions = function () {
                                    return s.props.menuIsOpen ? s.buildCategorizedOptions() : [];
                                }),
                                (s.buildFocusableOptions = function () {
                                    return J(s.buildCategorizedOptions());
                                }),
                                (s.getFocusableOptions = function () {
                                    return s.props.menuIsOpen ? s.buildFocusableOptions() : [];
                                }),
                                (s.ariaOnChange = function (t, e) {
                                    s.setState({ ariaSelection: (0, n.A)({ value: t }, e) });
                                }),
                                (s.onMenuMouseDown = function (t) {
                                    0 === t.button && (t.stopPropagation(), t.preventDefault(), s.focusInput());
                                }),
                                (s.onMenuMouseMove = function (t) {
                                    s.blockOptionHover = !1;
                                }),
                                (s.onControlMouseDown = function (t) {
                                    if (!t.defaultPrevented) {
                                        var e = s.props.openMenuOnClick;
                                        s.state.isFocused
                                            ? s.props.menuIsOpen
                                                ? "INPUT" !== t.target.tagName && "TEXTAREA" !== t.target.tagName && s.onMenuClose()
                                                : e && s.openMenu("first")
                                            : (e && (s.openAfterFocus = !0), s.focusInput()),
                                            "INPUT" !== t.target.tagName && "TEXTAREA" !== t.target.tagName && t.preventDefault();
                                    }
                                }),
                                (s.onDropdownIndicatorMouseDown = function (t) {
                                    if (!((t && "mousedown" === t.type && 0 !== t.button) || s.props.isDisabled)) {
                                        var e = s.props,
                                            i = e.isMulti,
                                            n = e.menuIsOpen;
                                        s.focusInput(), n ? (s.setState({ inputIsHiddenAfterUpdate: !i }), s.onMenuClose()) : s.openMenu("first"), t.preventDefault();
                                    }
                                }),
                                (s.onClearIndicatorMouseDown = function (t) {
                                    (t && "mousedown" === t.type && 0 !== t.button) ||
                                        (s.clearValue(),
                                        t.preventDefault(),
                                        (s.openAfterFocus = !1),
                                        "touchend" === t.type
                                            ? s.focusInput()
                                            : setTimeout(function () {
                                                  return s.focusInput();
                                              }));
                                }),
                                (s.onScroll = function (t) {
                                    "boolean" == typeof s.props.closeMenuOnScroll
                                        ? t.target instanceof HTMLElement && (0, h.G)(t.target) && s.props.onMenuClose()
                                        : "function" == typeof s.props.closeMenuOnScroll && s.props.closeMenuOnScroll(t) && s.props.onMenuClose();
                                }),
                                (s.onCompositionStart = function () {
                                    s.isComposing = !0;
                                }),
                                (s.onCompositionEnd = function () {
                                    s.isComposing = !1;
                                }),
                                (s.onTouchStart = function (t) {
                                    var e = t.touches,
                                        i = e && e.item(0);
                                    i && ((s.initialTouchX = i.clientX), (s.initialTouchY = i.clientY), (s.userIsDragging = !1));
                                }),
                                (s.onTouchMove = function (t) {
                                    var e = t.touches,
                                        i = e && e.item(0);
                                    if (i) {
                                        var n = Math.abs(i.clientX - s.initialTouchX),
                                            o = Math.abs(i.clientY - s.initialTouchY);
                                        s.userIsDragging = n > 5 || o > 5;
                                    }
                                }),
                                (s.onTouchEnd = function (t) {
                                    s.userIsDragging || (s.controlRef && !s.controlRef.contains(t.target) && s.menuListRef && !s.menuListRef.contains(t.target) && s.blurInput(), (s.initialTouchX = 0), (s.initialTouchY = 0));
                                }),
                                (s.onControlTouchEnd = function (t) {
                                    s.userIsDragging || s.onControlMouseDown(t);
                                }),
                                (s.onClearIndicatorTouchEnd = function (t) {
                                    s.userIsDragging || s.onClearIndicatorMouseDown(t);
                                }),
                                (s.onDropdownIndicatorTouchEnd = function (t) {
                                    s.userIsDragging || s.onDropdownIndicatorMouseDown(t);
                                }),
                                (s.handleInputChange = function (t) {
                                    var e = s.props.inputValue,
                                        i = t.currentTarget.value;
                                    s.setState({ inputIsHiddenAfterUpdate: !1 }), s.onInputChange(i, { action: "input-change", prevInputValue: e }), s.props.menuIsOpen || s.onMenuOpen();
                                }),
                                (s.onInputFocus = function (t) {
                                    s.props.onFocus && s.props.onFocus(t), s.setState({ inputIsHiddenAfterUpdate: !1, isFocused: !0 }), (s.openAfterFocus || s.props.openMenuOnFocus) && s.openMenu("first"), (s.openAfterFocus = !1);
                                }),
                                (s.onInputBlur = function (t) {
                                    var e = s.props.inputValue;
                                    s.menuListRef && s.menuListRef.contains(document.activeElement)
                                        ? s.inputRef.focus()
                                        : (s.props.onBlur && s.props.onBlur(t), s.onInputChange("", { action: "input-blur", prevInputValue: e }), s.onMenuClose(), s.setState({ focusedValue: null, isFocused: !1 }));
                                }),
                                (s.onOptionHover = function (t) {
                                    if (!s.blockOptionHover && s.state.focusedOption !== t) {
                                        var e = s.getFocusableOptions().indexOf(t);
                                        s.setState({ focusedOption: t, focusedOptionId: e > -1 ? s.getFocusedOptionId(t) : null });
                                    }
                                }),
                                (s.shouldHideSelectedOptions = function () {
                                    return rt(s.props);
                                }),
                                (s.onValueInputFocus = function (t) {
                                    t.preventDefault(), t.stopPropagation(), s.focus();
                                }),
                                (s.onKeyDown = function (t) {
                                    var e = s.props,
                                        i = e.isMulti,
                                        n = e.backspaceRemovesValue,
                                        o = e.escapeClearsValue,
                                        a = e.inputValue,
                                        r = e.isClearable,
                                        l = e.isDisabled,
                                        c = e.menuIsOpen,
                                        d = e.onKeyDown,
                                        h = e.tabSelectsValue,
                                        u = e.openMenuOnFocus,
                                        p = s.state,
                                        m = p.focusedOption,
                                        f = p.focusedValue,
                                        g = p.selectValue;
                                    if (!(l || ("function" == typeof d && (d(t), t.defaultPrevented)))) {
                                        switch (((s.blockOptionHover = !0), t.key)) {
                                            case "ArrowLeft":
                                                if (!i || a) return;
                                                s.focusValue("previous");
                                                break;
                                            case "ArrowRight":
                                                if (!i || a) return;
                                                s.focusValue("next");
                                                break;
                                            case "Delete":
                                            case "Backspace":
                                                if (a) return;
                                                if (f) s.removeValue(f);
                                                else {
                                                    if (!n) return;
                                                    i ? s.popValue() : r && s.clearValue();
                                                }
                                                break;
                                            case "Tab":
                                                if (s.isComposing) return;
                                                if (t.shiftKey || !c || !h || !m || (u && s.isOptionSelected(m, g))) return;
                                                s.selectOption(m);
                                                break;
                                            case "Enter":
                                                if (229 === t.keyCode) break;
                                                if (c) {
                                                    if (!m) return;
                                                    if (s.isComposing) return;
                                                    s.selectOption(m);
                                                    break;
                                                }
                                                return;
                                            case "Escape":
                                                c ? (s.setState({ inputIsHiddenAfterUpdate: !1 }), s.onInputChange("", { action: "menu-close", prevInputValue: a }), s.onMenuClose()) : r && o && s.clearValue();
                                                break;
                                            case " ":
                                                if (a) return;
                                                if (!c) {
                                                    s.openMenu("first");
                                                    break;
                                                }
                                                if (!m) return;
                                                s.selectOption(m);
                                                break;
                                            case "ArrowUp":
                                                c ? s.focusOption("up") : s.openMenu("last");
                                                break;
                                            case "ArrowDown":
                                                c ? s.focusOption("down") : s.openMenu("first");
                                                break;
                                            case "PageUp":
                                                if (!c) return;
                                                s.focusOption("pageup");
                                                break;
                                            case "PageDown":
                                                if (!c) return;
                                                s.focusOption("pagedown");
                                                break;
                                            case "Home":
                                                if (!c) return;
                                                s.focusOption("first");
                                                break;
                                            case "End":
                                                if (!c) return;
                                                s.focusOption("last");
                                                break;
                                            default:
                                                return;
                                        }
                                        t.preventDefault();
                                    }
                                }),
                                (s.state.instancePrefix = "react-select-" + (s.props.instanceId || ++lt)),
                                (s.state.selectValue = (0, h.H)(t.value)),
                                t.menuIsOpen && s.state.selectValue.length)
                            ) {
                                var a = s.getFocusableOptionsWithIds(),
                                    r = s.buildFocusableOptions(),
                                    l = r.indexOf(s.state.selectValue[0]);
                                (s.state.focusableOptionsWithIds = a), (s.state.focusedOption = r[l]), (s.state.focusedOptionId = et(a, r[l]));
                            }
                            return s;
                        }
                        return (
                            (0, a.A)(
                                i,
                                [
                                    {
                                        key: "componentDidMount",
                                        value: function () {
                                            this.startListeningComposition(),
                                                this.startListeningToTouch(),
                                                this.props.closeMenuOnScroll && document && document.addEventListener && document.addEventListener("scroll", this.onScroll, !0),
                                                this.props.autoFocus && this.focusInput(),
                                                this.props.menuIsOpen && this.state.focusedOption && this.menuListRef && this.focusedOptionRef && (0, h.I)(this.menuListRef, this.focusedOptionRef),
                                                (U() || $(/^iPhone/i) || $(/^iPad/i) || (U() && navigator.maxTouchPoints > 1)) && this.setState({ isAppleDevice: !0 });
                                        },
                                    },
                                    {
                                        key: "componentDidUpdate",
                                        value: function (t) {
                                            var e = this.props,
                                                i = e.isDisabled,
                                                s = e.menuIsOpen,
                                                n = this.state.isFocused;
                                            ((n && !i && t.isDisabled) || (n && s && !t.menuIsOpen)) && this.focusInput(),
                                                n && i && !t.isDisabled ? this.setState({ isFocused: !1 }, this.onMenuClose) : n || i || !t.isDisabled || this.inputRef !== document.activeElement || this.setState({ isFocused: !0 }),
                                                this.menuListRef && this.focusedOptionRef && this.scrollToFocusedOptionOnUpdate && ((0, h.I)(this.menuListRef, this.focusedOptionRef), (this.scrollToFocusedOptionOnUpdate = !1));
                                        },
                                    },
                                    {
                                        key: "componentWillUnmount",
                                        value: function () {
                                            this.stopListeningComposition(), this.stopListeningToTouch(), document.removeEventListener("scroll", this.onScroll, !0);
                                        },
                                    },
                                    {
                                        key: "onMenuOpen",
                                        value: function () {
                                            this.props.onMenuOpen();
                                        },
                                    },
                                    {
                                        key: "onMenuClose",
                                        value: function () {
                                            this.onInputChange("", { action: "menu-close", prevInputValue: this.props.inputValue }), this.props.onMenuClose();
                                        },
                                    },
                                    {
                                        key: "onInputChange",
                                        value: function (t, e) {
                                            this.props.onInputChange(t, e);
                                        },
                                    },
                                    {
                                        key: "focusInput",
                                        value: function () {
                                            this.inputRef && this.inputRef.focus();
                                        },
                                    },
                                    {
                                        key: "blurInput",
                                        value: function () {
                                            this.inputRef && this.inputRef.blur();
                                        },
                                    },
                                    {
                                        key: "openMenu",
                                        value: function (t) {
                                            var e = this,
                                                i = this.state,
                                                s = i.selectValue,
                                                n = i.isFocused,
                                                o = this.buildFocusableOptions(),
                                                a = "first" === t ? 0 : o.length - 1;
                                            if (!this.props.isMulti) {
                                                var r = o.indexOf(s[0]);
                                                r > -1 && (a = r);
                                            }
                                            (this.scrollToFocusedOptionOnUpdate = !(n && this.menuListRef)),
                                                this.setState({ inputIsHiddenAfterUpdate: !1, focusedValue: null, focusedOption: o[a], focusedOptionId: this.getFocusedOptionId(o[a]) }, function () {
                                                    return e.onMenuOpen();
                                                });
                                        },
                                    },
                                    {
                                        key: "focusValue",
                                        value: function (t) {
                                            var e = this.state,
                                                i = e.selectValue,
                                                s = e.focusedValue;
                                            if (this.props.isMulti) {
                                                this.setState({ focusedOption: null });
                                                var n = i.indexOf(s);
                                                s || (n = -1);
                                                var o = i.length - 1,
                                                    a = -1;
                                                if (i.length) {
                                                    switch (t) {
                                                        case "previous":
                                                            a = 0 === n ? 0 : -1 === n ? o : n - 1;
                                                            break;
                                                        case "next":
                                                            n > -1 && n < o && (a = n + 1);
                                                    }
                                                    this.setState({ inputIsHidden: -1 !== a, focusedValue: i[a] });
                                                }
                                            }
                                        },
                                    },
                                    {
                                        key: "focusOption",
                                        value: function () {
                                            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "first",
                                                e = this.props.pageSize,
                                                i = this.state.focusedOption,
                                                s = this.getFocusableOptions();
                                            if (s.length) {
                                                var n = 0,
                                                    o = s.indexOf(i);
                                                i || (o = -1),
                                                    "up" === t
                                                        ? (n = o > 0 ? o - 1 : s.length - 1)
                                                        : "down" === t
                                                        ? (n = (o + 1) % s.length)
                                                        : "pageup" === t
                                                        ? (n = o - e) < 0 && (n = 0)
                                                        : "pagedown" === t
                                                        ? (n = o + e) > s.length - 1 && (n = s.length - 1)
                                                        : "last" === t && (n = s.length - 1),
                                                    (this.scrollToFocusedOptionOnUpdate = !0),
                                                    this.setState({ focusedOption: s[n], focusedValue: null, focusedOptionId: this.getFocusedOptionId(s[n]) });
                                            }
                                        },
                                    },
                                    {
                                        key: "getTheme",
                                        value: function () {
                                            return this.props.theme ? ("function" == typeof this.props.theme ? this.props.theme(G) : (0, n.A)((0, n.A)({}, G), this.props.theme)) : G;
                                        },
                                    },
                                    {
                                        key: "getCommonProps",
                                        value: function () {
                                            var t = this.clearValue,
                                                e = this.cx,
                                                i = this.getStyles,
                                                s = this.getClassNames,
                                                n = this.getValue,
                                                o = this.selectOption,
                                                a = this.setValue,
                                                r = this.props,
                                                l = r.isMulti,
                                                c = r.isRtl,
                                                d = r.options;
                                            return {
                                                clearValue: t,
                                                cx: e,
                                                getStyles: i,
                                                getClassNames: s,
                                                getValue: n,
                                                hasValue: this.hasValue(),
                                                isMulti: l,
                                                isRtl: c,
                                                options: d,
                                                selectOption: o,
                                                selectProps: r,
                                                setValue: a,
                                                theme: this.getTheme(),
                                            };
                                        },
                                    },
                                    {
                                        key: "hasValue",
                                        value: function () {
                                            return this.state.selectValue.length > 0;
                                        },
                                    },
                                    {
                                        key: "hasOptions",
                                        value: function () {
                                            return !!this.getFocusableOptions().length;
                                        },
                                    },
                                    {
                                        key: "isClearable",
                                        value: function () {
                                            var t = this.props,
                                                e = t.isClearable,
                                                i = t.isMulti;
                                            return void 0 === e ? i : e;
                                        },
                                    },
                                    {
                                        key: "isOptionDisabled",
                                        value: function (t, e) {
                                            return nt(this.props, t, e);
                                        },
                                    },
                                    {
                                        key: "isOptionSelected",
                                        value: function (t, e) {
                                            return ot(this.props, t, e);
                                        },
                                    },
                                    {
                                        key: "filterOption",
                                        value: function (t, e) {
                                            return at(this.props, t, e);
                                        },
                                    },
                                    {
                                        key: "formatOptionLabel",
                                        value: function (t, e) {
                                            if ("function" == typeof this.props.formatOptionLabel) {
                                                var i = this.props.inputValue,
                                                    s = this.state.selectValue;
                                                return this.props.formatOptionLabel(t, { context: e, inputValue: i, selectValue: s });
                                            }
                                            return this.getOptionLabel(t);
                                        },
                                    },
                                    {
                                        key: "formatGroupLabel",
                                        value: function (t) {
                                            return this.props.formatGroupLabel(t);
                                        },
                                    },
                                    {
                                        key: "startListeningComposition",
                                        value: function () {
                                            document && document.addEventListener && (document.addEventListener("compositionstart", this.onCompositionStart, !1), document.addEventListener("compositionend", this.onCompositionEnd, !1));
                                        },
                                    },
                                    {
                                        key: "stopListeningComposition",
                                        value: function () {
                                            document && document.removeEventListener && (document.removeEventListener("compositionstart", this.onCompositionStart), document.removeEventListener("compositionend", this.onCompositionEnd));
                                        },
                                    },
                                    {
                                        key: "startListeningToTouch",
                                        value: function () {
                                            document &&
                                                document.addEventListener &&
                                                (document.addEventListener("touchstart", this.onTouchStart, !1), document.addEventListener("touchmove", this.onTouchMove, !1), document.addEventListener("touchend", this.onTouchEnd, !1));
                                        },
                                    },
                                    {
                                        key: "stopListeningToTouch",
                                        value: function () {
                                            document &&
                                                document.removeEventListener &&
                                                (document.removeEventListener("touchstart", this.onTouchStart), document.removeEventListener("touchmove", this.onTouchMove), document.removeEventListener("touchend", this.onTouchEnd));
                                        },
                                    },
                                    {
                                        key: "renderInput",
                                        value: function () {
                                            var t = this.props,
                                                e = t.isDisabled,
                                                i = t.isSearchable,
                                                o = t.inputId,
                                                a = t.inputValue,
                                                r = t.tabIndex,
                                                l = t.form,
                                                c = t.menuIsOpen,
                                                u = t.required,
                                                p = this.getComponents().Input,
                                                m = this.state,
                                                f = m.inputIsHidden,
                                                g = m.ariaSelection,
                                                b = this.commonProps,
                                                x = o || this.getElementId("input"),
                                                v = (0, n.A)(
                                                    (0, n.A)(
                                                        (0, n.A)(
                                                            {
                                                                "aria-autocomplete": "list",
                                                                "aria-expanded": c,
                                                                "aria-haspopup": !0,
                                                                "aria-errormessage": this.props["aria-errormessage"],
                                                                "aria-invalid": this.props["aria-invalid"],
                                                                "aria-label": this.props["aria-label"],
                                                                "aria-labelledby": this.props["aria-labelledby"],
                                                                "aria-required": u,
                                                                role: "combobox",
                                                                "aria-activedescendant": this.state.isAppleDevice ? void 0 : this.state.focusedOptionId || "",
                                                            },
                                                            c && { "aria-controls": this.getElementId("listbox") }
                                                        ),
                                                        !i && { "aria-readonly": !0 }
                                                    ),
                                                    this.hasValue()
                                                        ? "initial-input-focus" === (null == g ? void 0 : g.action) && { "aria-describedby": this.getElementId("live-region") }
                                                        : { "aria-describedby": this.getElementId("placeholder") }
                                                );
                                            return i
                                                ? d.createElement(
                                                      p,
                                                      (0, s.A)(
                                                          {},
                                                          b,
                                                          {
                                                              autoCapitalize: "none",
                                                              autoComplete: "off",
                                                              autoCorrect: "off",
                                                              id: x,
                                                              innerRef: this.getInputRef,
                                                              isDisabled: e,
                                                              isHidden: f,
                                                              onBlur: this.onInputBlur,
                                                              onChange: this.handleInputChange,
                                                              onFocus: this.onInputFocus,
                                                              spellCheck: "false",
                                                              tabIndex: r,
                                                              form: l,
                                                              type: "text",
                                                              value: a,
                                                          },
                                                          v
                                                      )
                                                  )
                                                : d.createElement(
                                                      L,
                                                      (0, s.A)({ id: x, innerRef: this.getInputRef, onBlur: this.onInputBlur, onChange: h.J, onFocus: this.onInputFocus, disabled: e, tabIndex: r, inputMode: "none", form: l, value: "" }, v)
                                                  );
                                        },
                                    },
                                    {
                                        key: "renderPlaceholderOrValue",
                                        value: function () {
                                            var t = this,
                                                e = this.getComponents(),
                                                i = e.MultiValue,
                                                n = e.MultiValueContainer,
                                                o = e.MultiValueLabel,
                                                a = e.MultiValueRemove,
                                                r = e.SingleValue,
                                                l = e.Placeholder,
                                                c = this.commonProps,
                                                h = this.props,
                                                u = h.controlShouldRenderValue,
                                                p = h.isDisabled,
                                                m = h.isMulti,
                                                f = h.inputValue,
                                                g = h.placeholder,
                                                b = this.state,
                                                x = b.selectValue,
                                                v = b.focusedValue,
                                                y = b.isFocused;
                                            if (!this.hasValue() || !u) return f ? null : d.createElement(l, (0, s.A)({}, c, { key: "placeholder", isDisabled: p, isFocused: y, innerProps: { id: this.getElementId("placeholder") } }), g);
                                            if (m)
                                                return x.map(function (e, r) {
                                                    var l = e === v,
                                                        h = "".concat(t.getOptionLabel(e), "-").concat(t.getOptionValue(e));
                                                    return d.createElement(
                                                        i,
                                                        (0, s.A)({}, c, {
                                                            components: { Container: n, Label: o, Remove: a },
                                                            isFocused: l,
                                                            isDisabled: p,
                                                            key: h,
                                                            index: r,
                                                            removeProps: {
                                                                onClick: function () {
                                                                    return t.removeValue(e);
                                                                },
                                                                onTouchEnd: function () {
                                                                    return t.removeValue(e);
                                                                },
                                                                onMouseDown: function (t) {
                                                                    t.preventDefault();
                                                                },
                                                            },
                                                            data: e,
                                                        }),
                                                        t.formatOptionLabel(e, "value")
                                                    );
                                                });
                                            if (f) return null;
                                            var _ = x[0];
                                            return d.createElement(r, (0, s.A)({}, c, { data: _, isDisabled: p }), this.formatOptionLabel(_, "value"));
                                        },
                                    },
                                    {
                                        key: "renderClearIndicator",
                                        value: function () {
                                            var t = this.getComponents().ClearIndicator,
                                                e = this.commonProps,
                                                i = this.props,
                                                n = i.isDisabled,
                                                o = i.isLoading,
                                                a = this.state.isFocused;
                                            if (!this.isClearable() || !t || n || !this.hasValue() || o) return null;
                                            var r = { onMouseDown: this.onClearIndicatorMouseDown, onTouchEnd: this.onClearIndicatorTouchEnd, "aria-hidden": "true" };
                                            return d.createElement(t, (0, s.A)({}, e, { innerProps: r, isFocused: a }));
                                        },
                                    },
                                    {
                                        key: "renderLoadingIndicator",
                                        value: function () {
                                            var t = this.getComponents().LoadingIndicator,
                                                e = this.commonProps,
                                                i = this.props,
                                                n = i.isDisabled,
                                                o = i.isLoading,
                                                a = this.state.isFocused;
                                            return t && o ? d.createElement(t, (0, s.A)({}, e, { innerProps: { "aria-hidden": "true" }, isDisabled: n, isFocused: a })) : null;
                                        },
                                    },
                                    {
                                        key: "renderIndicatorSeparator",
                                        value: function () {
                                            var t = this.getComponents(),
                                                e = t.DropdownIndicator,
                                                i = t.IndicatorSeparator;
                                            if (!e || !i) return null;
                                            var n = this.commonProps,
                                                o = this.props.isDisabled,
                                                a = this.state.isFocused;
                                            return d.createElement(i, (0, s.A)({}, n, { isDisabled: o, isFocused: a }));
                                        },
                                    },
                                    {
                                        key: "renderDropdownIndicator",
                                        value: function () {
                                            var t = this.getComponents().DropdownIndicator;
                                            if (!t) return null;
                                            var e = this.commonProps,
                                                i = this.props.isDisabled,
                                                n = this.state.isFocused,
                                                o = { onMouseDown: this.onDropdownIndicatorMouseDown, onTouchEnd: this.onDropdownIndicatorTouchEnd, "aria-hidden": "true" };
                                            return d.createElement(t, (0, s.A)({}, e, { innerProps: o, isDisabled: i, isFocused: n }));
                                        },
                                    },
                                    {
                                        key: "renderMenu",
                                        value: function () {
                                            var t = this,
                                                e = this.getComponents(),
                                                i = e.Group,
                                                n = e.GroupHeading,
                                                o = e.Menu,
                                                a = e.MenuList,
                                                r = e.MenuPortal,
                                                l = e.LoadingMessage,
                                                c = e.NoOptionsMessage,
                                                u = e.Option,
                                                p = this.commonProps,
                                                m = this.state.focusedOption,
                                                f = this.props,
                                                g = f.captureMenuScroll,
                                                b = f.inputValue,
                                                x = f.isLoading,
                                                v = f.loadingMessage,
                                                y = f.minMenuHeight,
                                                _ = f.maxMenuHeight,
                                                C = f.menuIsOpen,
                                                w = f.menuPlacement,
                                                z = f.menuPosition,
                                                k = f.menuPortalTarget,
                                                M = f.menuShouldBlockScroll,
                                                j = f.menuShouldScrollIntoView,
                                                S = f.noOptionsMessage,
                                                A = f.onMenuScrollToTop,
                                                L = f.onMenuScrollToBottom;
                                            if (!C) return null;
                                            var D,
                                                T = function (e, i) {
                                                    var n = e.type,
                                                        o = e.data,
                                                        a = e.isDisabled,
                                                        r = e.isSelected,
                                                        l = e.label,
                                                        c = e.value,
                                                        h = m === o,
                                                        f = a
                                                            ? void 0
                                                            : function () {
                                                                  return t.onOptionHover(o);
                                                              },
                                                        g = a
                                                            ? void 0
                                                            : function () {
                                                                  return t.selectOption(o);
                                                              },
                                                        b = "".concat(t.getElementId("option"), "-").concat(i),
                                                        x = { id: b, onClick: g, onMouseMove: f, onMouseOver: f, tabIndex: -1, role: "option", "aria-selected": t.state.isAppleDevice ? void 0 : r };
                                                    return d.createElement(
                                                        u,
                                                        (0, s.A)({}, p, { innerProps: x, data: o, isDisabled: a, isSelected: r, key: b, label: l, type: n, value: c, isFocused: h, innerRef: h ? t.getFocusedOptionRef : void 0 }),
                                                        t.formatOptionLabel(e.data, "menu")
                                                    );
                                                };
                                            if (this.hasOptions())
                                                D = this.getCategorizedOptions().map(function (e) {
                                                    if ("group" === e.type) {
                                                        var o = e.data,
                                                            a = e.options,
                                                            r = e.index,
                                                            l = "".concat(t.getElementId("group"), "-").concat(r),
                                                            c = "".concat(l, "-heading");
                                                        return d.createElement(
                                                            i,
                                                            (0, s.A)({}, p, { key: l, data: o, options: a, Heading: n, headingProps: { id: c, data: e.data }, label: t.formatGroupLabel(e.data) }),
                                                            e.options.map(function (t) {
                                                                return T(t, "".concat(r, "-").concat(t.index));
                                                            })
                                                        );
                                                    }
                                                    if ("option" === e.type) return T(e, "".concat(e.index));
                                                });
                                            else if (x) {
                                                var E = v({ inputValue: b });
                                                if (null === E) return null;
                                                D = d.createElement(l, p, E);
                                            } else {
                                                var O = S({ inputValue: b });
                                                if (null === O) return null;
                                                D = d.createElement(c, p, O);
                                            }
                                            var P = { minMenuHeight: y, maxMenuHeight: _, menuPlacement: w, menuPosition: z, menuShouldScrollIntoView: j },
                                                I = d.createElement(h.M, (0, s.A)({}, p, P), function (e) {
                                                    var i = e.ref,
                                                        n = e.placerProps,
                                                        r = n.placement,
                                                        l = n.maxHeight;
                                                    return d.createElement(
                                                        o,
                                                        (0, s.A)({}, p, P, { innerRef: i, innerProps: { onMouseDown: t.onMenuMouseDown, onMouseMove: t.onMenuMouseMove }, isLoading: x, placement: r }),
                                                        d.createElement(H, { captureEnabled: g, onTopArrive: A, onBottomArrive: L, lockEnabled: M }, function (e) {
                                                            return d.createElement(
                                                                a,
                                                                (0, s.A)({}, p, {
                                                                    innerRef: function (i) {
                                                                        t.getMenuListRef(i), e(i);
                                                                    },
                                                                    innerProps: { role: "listbox", "aria-multiselectable": p.isMulti, id: t.getElementId("listbox") },
                                                                    isLoading: x,
                                                                    maxHeight: l,
                                                                    focusedOption: m,
                                                                }),
                                                                D
                                                            );
                                                        })
                                                    );
                                                });
                                            return k || "fixed" === z ? d.createElement(r, (0, s.A)({}, p, { appendTo: k, controlElement: this.controlRef, menuPlacement: w, menuPosition: z }), I) : I;
                                        },
                                    },
                                    {
                                        key: "renderFormField",
                                        value: function () {
                                            var t = this,
                                                e = this.props,
                                                i = e.delimiter,
                                                s = e.isDisabled,
                                                n = e.isMulti,
                                                o = e.name,
                                                a = e.required,
                                                r = this.state.selectValue;
                                            if (a && !this.hasValue() && !s) return d.createElement(Y, { name: o, onFocus: this.onValueInputFocus });
                                            if (o && !s) {
                                                if (n) {
                                                    if (i) {
                                                        var l = r
                                                            .map(function (e) {
                                                                return t.getOptionValue(e);
                                                            })
                                                            .join(i);
                                                        return d.createElement("input", { name: o, type: "hidden", value: l });
                                                    }
                                                    var c =
                                                        r.length > 0
                                                            ? r.map(function (e, i) {
                                                                  return d.createElement("input", { key: "i-".concat(i), name: o, type: "hidden", value: t.getOptionValue(e) });
                                                              })
                                                            : d.createElement("input", { name: o, type: "hidden", value: "" });
                                                    return d.createElement("div", null, c);
                                                }
                                                var h = r[0] ? this.getOptionValue(r[0]) : "";
                                                return d.createElement("input", { name: o, type: "hidden", value: h });
                                            }
                                        },
                                    },
                                    {
                                        key: "renderLiveRegion",
                                        value: function () {
                                            var t = this.commonProps,
                                                e = this.state,
                                                i = e.ariaSelection,
                                                n = e.focusedOption,
                                                o = e.focusedValue,
                                                a = e.isFocused,
                                                r = e.selectValue,
                                                l = this.getFocusableOptions();
                                            return d.createElement(
                                                x,
                                                (0, s.A)({}, t, {
                                                    id: this.getElementId("live-region"),
                                                    ariaSelection: i,
                                                    focusedOption: n,
                                                    focusedValue: o,
                                                    isFocused: a,
                                                    selectValue: r,
                                                    focusableOptions: l,
                                                    isAppleDevice: this.state.isAppleDevice,
                                                })
                                            );
                                        },
                                    },
                                    {
                                        key: "render",
                                        value: function () {
                                            var t = this.getComponents(),
                                                e = t.Control,
                                                i = t.IndicatorsContainer,
                                                n = t.SelectContainer,
                                                o = t.ValueContainer,
                                                a = this.props,
                                                r = a.className,
                                                l = a.id,
                                                c = a.isDisabled,
                                                h = a.menuIsOpen,
                                                u = this.state.isFocused,
                                                p = (this.commonProps = this.getCommonProps());
                                            return d.createElement(
                                                n,
                                                (0, s.A)({}, p, { className: r, innerProps: { id: l, onKeyDown: this.onKeyDown }, isDisabled: c, isFocused: u }),
                                                this.renderLiveRegion(),
                                                d.createElement(
                                                    e,
                                                    (0, s.A)({}, p, { innerRef: this.getControlRef, innerProps: { onMouseDown: this.onControlMouseDown, onTouchEnd: this.onControlTouchEnd }, isDisabled: c, isFocused: u, menuIsOpen: h }),
                                                    d.createElement(o, (0, s.A)({}, p, { isDisabled: c }), this.renderPlaceholderOrValue(), this.renderInput()),
                                                    d.createElement(i, (0, s.A)({}, p, { isDisabled: c }), this.renderClearIndicator(), this.renderLoadingIndicator(), this.renderIndicatorSeparator(), this.renderDropdownIndicator())
                                                ),
                                                this.renderMenu(),
                                                this.renderFormField()
                                            );
                                        },
                                    },
                                ],
                                [
                                    {
                                        key: "getDerivedStateFromProps",
                                        value: function (t, e) {
                                            var i = e.prevProps,
                                                s = e.clearFocusValueOnUpdate,
                                                o = e.inputIsHiddenAfterUpdate,
                                                a = e.ariaSelection,
                                                r = e.isFocused,
                                                l = e.prevWasFocused,
                                                c = e.instancePrefix,
                                                d = t.options,
                                                u = t.value,
                                                p = t.menuIsOpen,
                                                m = t.inputValue,
                                                f = t.isMulti,
                                                g = (0, h.H)(u),
                                                b = {};
                                            if (i && (u !== i.value || d !== i.options || p !== i.menuIsOpen || m !== i.inputValue)) {
                                                var x = p
                                                        ? (function (t, e) {
                                                              return J(X(t, e));
                                                          })(t, g)
                                                        : [],
                                                    v = p ? Q(X(t, g), "".concat(c, "-option")) : [],
                                                    y = s
                                                        ? (function (t, e) {
                                                              var i = t.focusedValue,
                                                                  s = t.selectValue.indexOf(i);
                                                              if (s > -1) {
                                                                  if (e.indexOf(i) > -1) return i;
                                                                  if (s < e.length) return e[s];
                                                              }
                                                              return null;
                                                          })(e, g)
                                                        : null,
                                                    _ = (function (t, e) {
                                                        var i = t.focusedOption;
                                                        return i && e.indexOf(i) > -1 ? i : e[0];
                                                    })(e, x);
                                                b = { selectValue: g, focusedOption: _, focusedOptionId: et(v, _), focusableOptionsWithIds: v, focusedValue: y, clearFocusValueOnUpdate: !1 };
                                            }
                                            var C = null != o && t !== i ? { inputIsHidden: o, inputIsHiddenAfterUpdate: void 0 } : {},
                                                w = a,
                                                z = r && l;
                                            return (
                                                r && !z && ((w = { value: (0, h.D)(f, g, g[0] || null), options: g, action: "initial-input-focus" }), (z = !l)),
                                                "initial-input-focus" === (null == a ? void 0 : a.action) && (w = null),
                                                (0, n.A)((0, n.A)((0, n.A)({}, b), C), {}, { prevProps: t, ariaSelection: w, prevWasFocused: z })
                                            );
                                        },
                                    },
                                ]
                            ),
                            i
                        );
                    })(d.Component);
                ct.defaultProps = K;
            },
            3917: (t, e, i) => {
                "use strict";
                i.d(e, { J: () => b });
                var s = i(5137),
                    n = i(3969),
                    o = i(6289),
                    a = !1,
                    r = /[A-Z]|^ms/g,
                    l = /_EMO_([^_]+?)_([^]*?)_EMO_/g,
                    c = function (t) {
                        return 45 === t.charCodeAt(1);
                    },
                    d = function (t) {
                        return null != t && "boolean" != typeof t;
                    },
                    h = (0, o.A)(function (t) {
                        return c(t) ? t : t.replace(r, "-$&").toLowerCase();
                    }),
                    u = function (t, e) {
                        switch (t) {
                            case "animation":
                            case "animationName":
                                if ("string" == typeof e)
                                    return e.replace(l, function (t, e, i) {
                                        return (f = { name: e, styles: i, next: f }), e;
                                    });
                        }
                        return 1 === n.A[t] || c(t) || "number" != typeof e || 0 === e ? e : e + "px";
                    },
                    p = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
                function m(t, e, i) {
                    if (null == i) return "";
                    var s = i;
                    if (void 0 !== s.__emotion_styles) return s;
                    switch (typeof i) {
                        case "boolean":
                            return "";
                        case "object":
                            var n = i;
                            if (1 === n.anim) return (f = { name: n.name, styles: n.styles, next: f }), n.name;
                            var o = i;
                            if (void 0 !== o.styles) {
                                var r = o.next;
                                if (void 0 !== r) for (; void 0 !== r; ) (f = { name: r.name, styles: r.styles, next: f }), (r = r.next);
                                return o.styles + ";";
                            }
                            return (function (t, e, i) {
                                var s = "";
                                if (Array.isArray(i)) for (var n = 0; n < i.length; n++) s += m(t, e, i[n]) + ";";
                                else
                                    for (var o in i) {
                                        var r = i[o];
                                        if ("object" != typeof r) {
                                            var l = r;
                                            null != e && void 0 !== e[l] ? (s += o + "{" + e[l] + "}") : d(l) && (s += h(o) + ":" + u(o, l) + ";");
                                        } else {
                                            if ("NO_COMPONENT_SELECTOR" === o && a) throw new Error(p);
                                            if (!Array.isArray(r) || "string" != typeof r[0] || (null != e && void 0 !== e[r[0]])) {
                                                var c = m(t, e, r);
                                                switch (o) {
                                                    case "animation":
                                                    case "animationName":
                                                        s += h(o) + ":" + c + ";";
                                                        break;
                                                    default:
                                                        s += o + "{" + c + "}";
                                                }
                                            } else for (var f = 0; f < r.length; f++) d(r[f]) && (s += h(o) + ":" + u(o, r[f]) + ";");
                                        }
                                    }
                                return s;
                            })(t, e, i);
                        case "function":
                            if (void 0 !== t) {
                                var l = f,
                                    c = i(t);
                                return (f = l), m(t, e, c);
                            }
                    }
                    var g = i;
                    if (null == e) return g;
                    var b = e[g];
                    return void 0 !== b ? b : g;
                }
                var f,
                    g = /label:\s*([^\s;{]+)\s*(;|$)/g;
                function b(t, e, i) {
                    if (1 === t.length && "object" == typeof t[0] && null !== t[0] && void 0 !== t[0].styles) return t[0];
                    var n = !0,
                        o = "";
                    f = void 0;
                    var a = t[0];
                    null == a || void 0 === a.raw ? ((n = !1), (o += m(i, e, a))) : (o += a[0]);
                    for (var r = 1; r < t.length; r++) (o += m(i, e, t[r])), n && (o += a[r]);
                    g.lastIndex = 0;
                    for (var l, c = ""; null !== (l = g.exec(o)); ) c += "-" + l[1];
                    return { name: (0, s.A)(o) + c, styles: o, next: f };
                }
            },
            3954: (t, e, i) => {
                "use strict";
                function s(t) {
                    return (
                        (s = Object.setPrototypeOf
                            ? Object.getPrototypeOf.bind()
                            : function (t) {
                                  return t.__proto__ || Object.getPrototypeOf(t);
                              }),
                        s(t)
                    );
                }
                i.d(e, { A: () => s });
            },
            3969: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => s });
                var s = {
                    animationIterationCount: 1,
                    aspectRatio: 1,
                    borderImageOutset: 1,
                    borderImageSlice: 1,
                    borderImageWidth: 1,
                    boxFlex: 1,
                    boxFlexGroup: 1,
                    boxOrdinalGroup: 1,
                    columnCount: 1,
                    columns: 1,
                    flex: 1,
                    flexGrow: 1,
                    flexPositive: 1,
                    flexShrink: 1,
                    flexNegative: 1,
                    flexOrder: 1,
                    gridRow: 1,
                    gridRowEnd: 1,
                    gridRowSpan: 1,
                    gridRowStart: 1,
                    gridColumn: 1,
                    gridColumnEnd: 1,
                    gridColumnSpan: 1,
                    gridColumnStart: 1,
                    msGridRow: 1,
                    msGridRowSpan: 1,
                    msGridColumn: 1,
                    msGridColumnSpan: 1,
                    fontWeight: 1,
                    lineHeight: 1,
                    opacity: 1,
                    order: 1,
                    orphans: 1,
                    scale: 1,
                    tabSize: 1,
                    widows: 1,
                    zIndex: 1,
                    zoom: 1,
                    WebkitLineClamp: 1,
                    fillOpacity: 1,
                    floodOpacity: 1,
                    stopOpacity: 1,
                    strokeDasharray: 1,
                    strokeDashoffset: 1,
                    strokeMiterlimit: 1,
                    strokeOpacity: 1,
                    strokeWidth: 1,
                };
            },
            4146: (t, e, i) => {
                "use strict";
                var s = i(3404),
                    n = { childContextTypes: !0, contextType: !0, contextTypes: !0, defaultProps: !0, displayName: !0, getDefaultProps: !0, getDerivedStateFromError: !0, getDerivedStateFromProps: !0, mixins: !0, propTypes: !0, type: !0 },
                    o = { name: !0, length: !0, prototype: !0, caller: !0, callee: !0, arguments: !0, arity: !0 },
                    a = { $$typeof: !0, compare: !0, defaultProps: !0, displayName: !0, propTypes: !0, type: !0 },
                    r = {};
                function l(t) {
                    return s.isMemo(t) ? a : r[t.$$typeof] || n;
                }
                (r[s.ForwardRef] = { $$typeof: !0, render: !0, defaultProps: !0, displayName: !0, propTypes: !0 }), (r[s.Memo] = a);
                var c = Object.defineProperty,
                    d = Object.getOwnPropertyNames,
                    h = Object.getOwnPropertySymbols,
                    u = Object.getOwnPropertyDescriptor,
                    p = Object.getPrototypeOf,
                    m = Object.prototype;
                t.exports = function t(e, i, s) {
                    if ("string" != typeof i) {
                        if (m) {
                            var n = p(i);
                            n && n !== m && t(e, n, s);
                        }
                        var a = d(i);
                        h && (a = a.concat(h(i)));
                        for (var r = l(e), f = l(i), g = 0; g < a.length; ++g) {
                            var b = a[g];
                            if (!(o[b] || (s && s[b]) || (f && f[b]) || (r && r[b]))) {
                                var x = u(i, b);
                                try {
                                    c(e, b, x);
                                } catch (t) {}
                            }
                        }
                    }
                    return e;
                };
            },
            4164: (t, e, i) => {
                "use strict";
                function s(t) {
                    var e,
                        i,
                        n = "";
                    if ("string" == typeof t || "number" == typeof t) n += t;
                    else if ("object" == typeof t)
                        if (Array.isArray(t)) {
                            var o = t.length;
                            for (e = 0; e < o; e++) t[e] && (i = s(t[e])) && (n && (n += " "), (n += i));
                        } else for (i in t) t[i] && (n && (n += " "), (n += i));
                    return n;
                }
                i.d(e, { A: () => n });
                const n = function () {
                    for (var t, e, i = 0, n = "", o = arguments.length; i < o; i++) (t = arguments[i]) && (e = s(t)) && (n && (n += " "), (n += e));
                    return n;
                };
            },
            4243: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => n });
                var s = i(3145);
                function n(t) {
                    if (Array.isArray(t)) return (0, s.A)(t);
                }
            },
            4467: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => n });
                var s = i(9922);
                function n(t, e, i) {
                    return (e = (0, s.A)(e)) in t ? Object.defineProperty(t, e, { value: i, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = i), t;
                }
            },
            4519: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => a });
                var s = i(6427),
                    n = i(6087),
                    o = i(790);
                const a = function ({ children: t, closeModal: e, className: i }) {
                    const a = (0, n.useRef)();
                    return (
                        (0, n.useEffect)(() => {
                            a.current.closest(".components-modal__screen-overlay").classList.add("pbb-admin-dashboard__modal-wrapper");
                        }, []),
                        (0, o.jsx)(s.Modal, { className: "pbb-admin-dashboard__modal", isDismissible: !1, ref: a, onRequestClose: e, children: (0, o.jsx)("div", { className: `pbb-admin-dashboard__modal-content ${i}`, children: t }) })
                    );
                };
            },
            4534: (t, e, i) => {
                "use strict";
                i.d(e, { IO: () => h, LU: () => l, MS: () => s, Sv: () => d, XZ: () => r, YK: () => a, j: () => o, vd: () => n, yE: () => c });
                var s = "-ms-",
                    n = "-moz-",
                    o = "-webkit-",
                    a = "comm",
                    r = "rule",
                    l = "decl",
                    c = "@import",
                    d = "@keyframes",
                    h = "@layer";
            },
            4684: (t, e, i) => {
                "use strict";
                i.d(e, { E: () => f, c: () => p, h: () => h });
                var s = i(1609),
                    n = i(5815),
                    o = i(41),
                    a = i(3917),
                    r = i(1287),
                    l = s.createContext("undefined" != typeof HTMLElement ? (0, n.A)({ key: "css" }) : null),
                    c =
                        (l.Provider,
                        function (t) {
                            return (0, s.forwardRef)(function (e, i) {
                                var n = (0, s.useContext)(l);
                                return t(e, n, i);
                            });
                        }),
                    d = s.createContext({}),
                    h = {}.hasOwnProperty,
                    u = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__",
                    p = function (t, e) {
                        var i = {};
                        for (var s in e) h.call(e, s) && (i[s] = e[s]);
                        return (i[u] = t), i;
                    },
                    m = function (t) {
                        var e = t.cache,
                            i = t.serialized,
                            s = t.isStringTag;
                        return (
                            (0, o.SF)(e, i, s),
                            (0, r.s)(function () {
                                return (0, o.sk)(e, i, s);
                            }),
                            null
                        );
                    },
                    f = c(function (t, e, i) {
                        var n = t.css;
                        "string" == typeof n && void 0 !== e.registered[n] && (n = e.registered[n]);
                        var r = t[u],
                            l = [n],
                            c = "";
                        "string" == typeof t.className ? (c = (0, o.Rk)(e.registered, l, t.className)) : null != t.className && (c = t.className + " ");
                        var p = (0, a.J)(l, void 0, s.useContext(d));
                        c += e.key + "-" + p.name;
                        var f = {};
                        for (var g in t) h.call(t, g) && "css" !== g && g !== u && (f[g] = t[g]);
                        return (f.className = c), i && (f.ref = i), s.createElement(s.Fragment, null, s.createElement(m, { cache: e, serialized: p, isStringTag: "string" == typeof r }), s.createElement(r, f));
                    });
            },
            5047: (t, e, i) => {
                "use strict";
                i.d(e, { v: () => s });
                var s = (function () {
                    function t(t) {
                        var e = this;
                        (this._insertTag = function (t) {
                            var i;
                            (i = 0 === e.tags.length ? (e.insertionPoint ? e.insertionPoint.nextSibling : e.prepend ? e.container.firstChild : e.before) : e.tags[e.tags.length - 1].nextSibling),
                                e.container.insertBefore(t, i),
                                e.tags.push(t);
                        }),
                            (this.isSpeedy = void 0 === t.speedy || t.speedy),
                            (this.tags = []),
                            (this.ctr = 0),
                            (this.nonce = t.nonce),
                            (this.key = t.key),
                            (this.container = t.container),
                            (this.prepend = t.prepend),
                            (this.insertionPoint = t.insertionPoint),
                            (this.before = null);
                    }
                    var e = t.prototype;
                    return (
                        (e.hydrate = function (t) {
                            t.forEach(this._insertTag);
                        }),
                        (e.insert = function (t) {
                            this.ctr % (this.isSpeedy ? 65e3 : 1) == 0 &&
                                this._insertTag(
                                    (function (t) {
                                        var e = document.createElement("style");
                                        return e.setAttribute("data-emotion", t.key), void 0 !== t.nonce && e.setAttribute("nonce", t.nonce), e.appendChild(document.createTextNode("")), e.setAttribute("data-s", ""), e;
                                    })(this)
                                );
                            var e = this.tags[this.tags.length - 1];
                            if (this.isSpeedy) {
                                var i = (function (t) {
                                    if (t.sheet) return t.sheet;
                                    for (var e = 0; e < document.styleSheets.length; e++) if (document.styleSheets[e].ownerNode === t) return document.styleSheets[e];
                                })(e);
                                try {
                                    i.insertRule(t, i.cssRules.length);
                                } catch (t) {}
                            } else e.appendChild(document.createTextNode(t));
                            this.ctr++;
                        }),
                        (e.flush = function () {
                            this.tags.forEach(function (t) {
                                var e;
                                return null == (e = t.parentNode) ? void 0 : e.removeChild(t);
                            }),
                                (this.tags = []),
                                (this.ctr = 0);
                        }),
                        t
                    );
                })();
            },
            5137: (t, e, i) => {
                "use strict";
                function s(t) {
                    for (var e, i = 0, s = 0, n = t.length; n >= 4; ++s, n -= 4)
                        (e = 1540483477 * (65535 & (e = (255 & t.charCodeAt(s)) | ((255 & t.charCodeAt(++s)) << 8) | ((255 & t.charCodeAt(++s)) << 16) | ((255 & t.charCodeAt(++s)) << 24))) + ((59797 * (e >>> 16)) << 16)),
                            (i = (1540483477 * (65535 & (e ^= e >>> 24)) + ((59797 * (e >>> 16)) << 16)) ^ (1540483477 * (65535 & i) + ((59797 * (i >>> 16)) << 16)));
                    switch (n) {
                        case 3:
                            i ^= (255 & t.charCodeAt(s + 2)) << 16;
                        case 2:
                            i ^= (255 & t.charCodeAt(s + 1)) << 8;
                        case 1:
                            i = 1540483477 * (65535 & (i ^= 255 & t.charCodeAt(s))) + ((59797 * (i >>> 16)) << 16);
                    }
                    return (((i = 1540483477 * (65535 & (i ^= i >>> 13)) + ((59797 * (i >>> 16)) << 16)) ^ (i >>> 15)) >>> 0).toString(36);
                }
                i.d(e, { A: () => s });
            },
            5338: (t, e, i) => {
                "use strict";
                var s = i(5795);
                (e.H = s.createRoot), s.hydrateRoot;
            },
            5361: (t, e, i) => {
                "use strict";
                i.d(e, { BN: () => h, UE: () => r, UU: () => l, cY: () => d, rD: () => o });
                var s = i(7193);
                function n(t, e, i) {
                    let { reference: n, floating: o } = t;
                    const a = (0, s.TV)(e),
                        r = (0, s.Dz)(e),
                        l = (0, s.sq)(r),
                        c = (0, s.C0)(e),
                        d = "y" === a,
                        h = n.x + n.width / 2 - o.width / 2,
                        u = n.y + n.height / 2 - o.height / 2,
                        p = n[l] / 2 - o[l] / 2;
                    let m;
                    switch (c) {
                        case "top":
                            m = { x: h, y: n.y - o.height };
                            break;
                        case "bottom":
                            m = { x: h, y: n.y + n.height };
                            break;
                        case "right":
                            m = { x: n.x + n.width, y: u };
                            break;
                        case "left":
                            m = { x: n.x - o.width, y: u };
                            break;
                        default:
                            m = { x: n.x, y: n.y };
                    }
                    switch ((0, s.Sg)(e)) {
                        case "start":
                            m[r] -= p * (i && d ? -1 : 1);
                            break;
                        case "end":
                            m[r] += p * (i && d ? -1 : 1);
                    }
                    return m;
                }
                const o = async (t, e, i) => {
                    const { placement: s = "bottom", strategy: o = "absolute", middleware: a = [], platform: r } = i,
                        l = a.filter(Boolean),
                        c = await (null == r.isRTL ? void 0 : r.isRTL(e));
                    let d = await r.getElementRects({ reference: t, floating: e, strategy: o }),
                        { x: h, y: u } = n(d, s, c),
                        p = s,
                        m = {},
                        f = 0;
                    for (let i = 0; i < l.length; i++) {
                        const { name: a, fn: g } = l[i],
                            { x: b, y: x, data: v, reset: y } = await g({ x: h, y: u, initialPlacement: s, placement: p, strategy: o, middlewareData: m, rects: d, platform: r, elements: { reference: t, floating: e } });
                        (h = null != b ? b : h),
                            (u = null != x ? x : u),
                            (m = { ...m, [a]: { ...m[a], ...v } }),
                            y &&
                                f <= 50 &&
                                (f++,
                                "object" == typeof y && (y.placement && (p = y.placement), y.rects && (d = !0 === y.rects ? await r.getElementRects({ reference: t, floating: e, strategy: o }) : y.rects), ({ x: h, y: u } = n(d, p, c))),
                                (i = -1));
                    }
                    return { x: h, y: u, placement: p, strategy: o, middlewareData: m };
                };
                async function a(t, e) {
                    var i;
                    void 0 === e && (e = {});
                    const { x: n, y: o, platform: a, rects: r, elements: l, strategy: c } = t,
                        { boundary: d = "clippingAncestors", rootBoundary: h = "viewport", elementContext: u = "floating", altBoundary: p = !1, padding: m = 0 } = (0, s._3)(e, t),
                        f = (0, s.nI)(m),
                        g = l[p ? ("floating" === u ? "reference" : "floating") : u],
                        b = (0, s.B1)(
                            await a.getClippingRect({
                                element: null == (i = await (null == a.isElement ? void 0 : a.isElement(g))) || i ? g : g.contextElement || (await (null == a.getDocumentElement ? void 0 : a.getDocumentElement(l.floating))),
                                boundary: d,
                                rootBoundary: h,
                                strategy: c,
                            })
                        ),
                        x = "floating" === u ? { x: n, y: o, width: r.floating.width, height: r.floating.height } : r.reference,
                        v = await (null == a.getOffsetParent ? void 0 : a.getOffsetParent(l.floating)),
                        y = ((await (null == a.isElement ? void 0 : a.isElement(v))) && (await (null == a.getScale ? void 0 : a.getScale(v)))) || { x: 1, y: 1 },
                        _ = (0, s.B1)(a.convertOffsetParentRelativeRectToViewportRelativeRect ? await a.convertOffsetParentRelativeRectToViewportRelativeRect({ elements: l, rect: x, offsetParent: v, strategy: c }) : x);
                    return { top: (b.top - _.top + f.top) / y.y, bottom: (_.bottom - b.bottom + f.bottom) / y.y, left: (b.left - _.left + f.left) / y.x, right: (_.right - b.right + f.right) / y.x };
                }
                const r = (t) => ({
                        name: "arrow",
                        options: t,
                        async fn(e) {
                            const { x: i, y: n, placement: o, rects: a, platform: r, elements: l, middlewareData: c } = e,
                                { element: d, padding: h = 0 } = (0, s._3)(t, e) || {};
                            if (null == d) return {};
                            const u = (0, s.nI)(h),
                                p = { x: i, y: n },
                                m = (0, s.Dz)(o),
                                f = (0, s.sq)(m),
                                g = await r.getDimensions(d),
                                b = "y" === m,
                                x = b ? "top" : "left",
                                v = b ? "bottom" : "right",
                                y = b ? "clientHeight" : "clientWidth",
                                _ = a.reference[f] + a.reference[m] - p[m] - a.floating[f],
                                C = p[m] - a.reference[m],
                                w = await (null == r.getOffsetParent ? void 0 : r.getOffsetParent(d));
                            let z = w ? w[y] : 0;
                            (z && (await (null == r.isElement ? void 0 : r.isElement(w)))) || (z = l.floating[y] || a.floating[f]);
                            const k = _ / 2 - C / 2,
                                M = z / 2 - g[f] / 2 - 1,
                                j = (0, s.jk)(u[x], M),
                                S = (0, s.jk)(u[v], M),
                                A = j,
                                L = z - g[f] - S,
                                D = z / 2 - g[f] / 2 + k,
                                T = (0, s.qE)(A, D, L),
                                E = !c.arrow && null != (0, s.Sg)(o) && D !== T && a.reference[f] / 2 - (D < A ? j : S) - g[f] / 2 < 0,
                                O = E ? (D < A ? D - A : D - L) : 0;
                            return { [m]: p[m] + O, data: { [m]: T, centerOffset: D - T - O, ...(E && { alignmentOffset: O }) }, reset: E };
                        },
                    }),
                    l = function (t) {
                        return (
                            void 0 === t && (t = {}),
                            {
                                name: "flip",
                                options: t,
                                async fn(e) {
                                    var i, n;
                                    const { placement: o, middlewareData: r, rects: l, initialPlacement: c, platform: d, elements: h } = e,
                                        { mainAxis: u = !0, crossAxis: p = !0, fallbackPlacements: m, fallbackStrategy: f = "bestFit", fallbackAxisSideDirection: g = "none", flipAlignment: b = !0, ...x } = (0, s._3)(t, e);
                                    if (null != (i = r.arrow) && i.alignmentOffset) return {};
                                    const v = (0, s.C0)(o),
                                        y = (0, s.TV)(c),
                                        _ = (0, s.C0)(c) === c,
                                        C = await (null == d.isRTL ? void 0 : d.isRTL(h.floating)),
                                        w = m || (_ || !b ? [(0, s.bV)(c)] : (0, s.WJ)(c)),
                                        z = "none" !== g;
                                    !m && z && w.push(...(0, s.lP)(c, b, g, C));
                                    const k = [c, ...w],
                                        M = await a(e, x),
                                        j = [];
                                    let S = (null == (n = r.flip) ? void 0 : n.overflows) || [];
                                    if ((u && j.push(M[v]), p)) {
                                        const t = (0, s.w7)(o, l, C);
                                        j.push(M[t[0]], M[t[1]]);
                                    }
                                    if (((S = [...S, { placement: o, overflows: j }]), !j.every((t) => t <= 0))) {
                                        var A, L;
                                        const t = ((null == (A = r.flip) ? void 0 : A.index) || 0) + 1,
                                            e = k[t];
                                        if (e && ("alignment" !== p || y === (0, s.TV)(e) || S.every((t) => t.overflows[0] > 0 && (0, s.TV)(t.placement) === y))) return { data: { index: t, overflows: S }, reset: { placement: e } };
                                        let i = null == (L = S.filter((t) => t.overflows[0] <= 0).sort((t, e) => t.overflows[1] - e.overflows[1])[0]) ? void 0 : L.placement;
                                        if (!i)
                                            switch (f) {
                                                case "bestFit": {
                                                    var D;
                                                    const t =
                                                        null ==
                                                        (D = S.filter((t) => {
                                                            if (z) {
                                                                const e = (0, s.TV)(t.placement);
                                                                return e === y || "y" === e;
                                                            }
                                                            return !0;
                                                        })
                                                            .map((t) => [t.placement, t.overflows.filter((t) => t > 0).reduce((t, e) => t + e, 0)])
                                                            .sort((t, e) => t[1] - e[1])[0])
                                                            ? void 0
                                                            : D[0];
                                                    t && (i = t);
                                                    break;
                                                }
                                                case "initialPlacement":
                                                    i = c;
                                            }
                                        if (o !== i) return { reset: { placement: i } };
                                    }
                                    return {};
                                },
                            }
                        );
                    },
                    c = new Set(["left", "top"]),
                    d = function (t) {
                        return (
                            void 0 === t && (t = 0),
                            {
                                name: "offset",
                                options: t,
                                async fn(e) {
                                    var i, n;
                                    const { x: o, y: a, placement: r, middlewareData: l } = e,
                                        d = await (async function (t, e) {
                                            const { placement: i, platform: n, elements: o } = t,
                                                a = await (null == n.isRTL ? void 0 : n.isRTL(o.floating)),
                                                r = (0, s.C0)(i),
                                                l = (0, s.Sg)(i),
                                                d = "y" === (0, s.TV)(i),
                                                h = c.has(r) ? -1 : 1,
                                                u = a && d ? -1 : 1,
                                                p = (0, s._3)(e, t);
                                            let { mainAxis: m, crossAxis: f, alignmentAxis: g } =
                                                "number" == typeof p ? { mainAxis: p, crossAxis: 0, alignmentAxis: null } : { mainAxis: p.mainAxis || 0, crossAxis: p.crossAxis || 0, alignmentAxis: p.alignmentAxis };
                                            return l && "number" == typeof g && (f = "end" === l ? -1 * g : g), d ? { x: f * u, y: m * h } : { x: m * h, y: f * u };
                                        })(e, t);
                                    return r === (null == (i = l.offset) ? void 0 : i.placement) && null != (n = l.arrow) && n.alignmentOffset ? {} : { x: o + d.x, y: a + d.y, data: { ...d, placement: r } };
                                },
                            }
                        );
                    },
                    h = function (t) {
                        return (
                            void 0 === t && (t = {}),
                            {
                                name: "shift",
                                options: t,
                                async fn(e) {
                                    const { x: i, y: n, placement: o } = e,
                                        {
                                            mainAxis: r = !0,
                                            crossAxis: l = !1,
                                            limiter: c = {
                                                fn: (t) => {
                                                    let { x: e, y: i } = t;
                                                    return { x: e, y: i };
                                                },
                                            },
                                            ...d
                                        } = (0, s._3)(t, e),
                                        h = { x: i, y: n },
                                        u = await a(e, d),
                                        p = (0, s.TV)((0, s.C0)(o)),
                                        m = (0, s.PG)(p);
                                    let f = h[m],
                                        g = h[p];
                                    if (r) {
                                        const t = "y" === m ? "bottom" : "right",
                                            e = f + u["y" === m ? "top" : "left"],
                                            i = f - u[t];
                                        f = (0, s.qE)(e, f, i);
                                    }
                                    if (l) {
                                        const t = "y" === p ? "bottom" : "right",
                                            e = g + u["y" === p ? "top" : "left"],
                                            i = g - u[t];
                                        g = (0, s.qE)(e, g, i);
                                    }
                                    const b = c.fn({ ...e, [m]: f, [p]: g });
                                    return { ...b, data: { x: b.x - i, y: b.y - n, enabled: { [m]: r, [p]: l } } };
                                },
                            }
                        );
                    };
            },
            5501: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => n });
                var s = i(3662);
                function n(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                    (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), Object.defineProperty(t, "prototype", { writable: !1 }), e && (0, s.A)(t, e);
                }
            },
            5795: (t) => {
                "use strict";
                t.exports = window.ReactDOM;
            },
            5815: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => g });
                var s = i(5047),
                    n = i(4534),
                    o = i(9735),
                    a = i(3716),
                    r = i(390),
                    l = i(483),
                    c = i(9503),
                    d = function (t, e, i) {
                        for (var s = 0, n = 0; (s = n), (n = (0, r.se)()), 38 === s && 12 === n && (e[i] = 1), !(0, r.Sh)(n); ) (0, r.K2)();
                        return (0, r.di)(t, r.G1);
                    },
                    h = new WeakMap(),
                    u = function (t) {
                        if ("rule" === t.type && t.parent && !(t.length < 1)) {
                            for (var e = t.value, i = t.parent, s = t.column === i.column && t.line === i.line; "rule" !== i.type; ) if (!(i = i.parent)) return;
                            if ((1 !== t.props.length || 58 === e.charCodeAt(0) || h.get(i)) && !s) {
                                h.set(t, !0);
                                for (
                                    var n = [],
                                        a = (function (t, e) {
                                            return (0, r.VF)(
                                                (function (t, e) {
                                                    var i = -1,
                                                        s = 44;
                                                    do {
                                                        switch ((0, r.Sh)(s)) {
                                                            case 0:
                                                                38 === s && 12 === (0, r.se)() && (e[i] = 1), (t[i] += d(r.G1 - 1, e, i));
                                                                break;
                                                            case 2:
                                                                t[i] += (0, r.Tb)(s);
                                                                break;
                                                            case 4:
                                                                if (44 === s) {
                                                                    (t[++i] = 58 === (0, r.se)() ? "&\f" : ""), (e[i] = t[i].length);
                                                                    break;
                                                                }
                                                            default:
                                                                t[i] += (0, o.HT)(s);
                                                        }
                                                    } while ((s = (0, r.K2)()));
                                                    return t;
                                                })((0, r.c4)(t), e)
                                            );
                                        })(e, n),
                                        l = i.props,
                                        c = 0,
                                        u = 0;
                                    c < a.length;
                                    c++
                                )
                                    for (var p = 0; p < l.length; p++, u++) t.props[u] = n[c] ? a[c].replace(/&\f/g, l[p]) : l[p] + " " + a[c];
                            }
                        }
                    },
                    p = function (t) {
                        if ("decl" === t.type) {
                            var e = t.value;
                            108 === e.charCodeAt(0) && 98 === e.charCodeAt(2) && ((t.return = ""), (t.value = ""));
                        }
                    };
                function m(t, e) {
                    switch ((0, o.tW)(t, e)) {
                        case 5103:
                            return n.j + "print-" + t + t;
                        case 5737:
                        case 4201:
                        case 3177:
                        case 3433:
                        case 1641:
                        case 4457:
                        case 2921:
                        case 5572:
                        case 6356:
                        case 5844:
                        case 3191:
                        case 6645:
                        case 3005:
                        case 6391:
                        case 5879:
                        case 5623:
                        case 6135:
                        case 4599:
                        case 4855:
                        case 4215:
                        case 6389:
                        case 5109:
                        case 5365:
                        case 5621:
                        case 3829:
                            return n.j + t + t;
                        case 5349:
                        case 4246:
                        case 4810:
                        case 6968:
                        case 2756:
                            return n.j + t + n.vd + t + n.MS + t + t;
                        case 6828:
                        case 4268:
                            return n.j + t + n.MS + t + t;
                        case 6165:
                            return n.j + t + n.MS + "flex-" + t + t;
                        case 5187:
                            return n.j + t + (0, o.HC)(t, /(\w+).+(:[^]+)/, n.j + "box-$1$2" + n.MS + "flex-$1$2") + t;
                        case 5443:
                            return n.j + t + n.MS + "flex-item-" + (0, o.HC)(t, /flex-|-self/, "") + t;
                        case 4675:
                            return n.j + t + n.MS + "flex-line-pack" + (0, o.HC)(t, /align-content|flex-|-self/, "") + t;
                        case 5548:
                            return n.j + t + n.MS + (0, o.HC)(t, "shrink", "negative") + t;
                        case 5292:
                            return n.j + t + n.MS + (0, o.HC)(t, "basis", "preferred-size") + t;
                        case 6060:
                            return n.j + "box-" + (0, o.HC)(t, "-grow", "") + n.j + t + n.MS + (0, o.HC)(t, "grow", "positive") + t;
                        case 4554:
                            return n.j + (0, o.HC)(t, /([^-])(transform)/g, "$1" + n.j + "$2") + t;
                        case 6187:
                            return (0, o.HC)((0, o.HC)((0, o.HC)(t, /(zoom-|grab)/, n.j + "$1"), /(image-set)/, n.j + "$1"), t, "") + t;
                        case 5495:
                        case 3959:
                            return (0, o.HC)(t, /(image-set\([^]*)/, n.j + "$1$`$1");
                        case 4968:
                            return (0, o.HC)((0, o.HC)(t, /(.+:)(flex-)?(.*)/, n.j + "box-pack:$3" + n.MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + n.j + t + t;
                        case 4095:
                        case 3583:
                        case 4068:
                        case 2532:
                            return (0, o.HC)(t, /(.+)-inline(.+)/, n.j + "$1$2") + t;
                        case 8116:
                        case 7059:
                        case 5753:
                        case 5535:
                        case 5445:
                        case 5701:
                        case 4933:
                        case 4677:
                        case 5533:
                        case 5789:
                        case 5021:
                        case 4765:
                            if ((0, o.b2)(t) - 1 - e > 6)
                                switch ((0, o.wN)(t, e + 1)) {
                                    case 109:
                                        if (45 !== (0, o.wN)(t, e + 4)) break;
                                    case 102:
                                        return (0, o.HC)(t, /(.+:)(.+)-([^]+)/, "$1" + n.j + "$2-$3$1" + n.vd + (108 == (0, o.wN)(t, e + 3) ? "$3" : "$2-$3")) + t;
                                    case 115:
                                        return ~(0, o.K5)(t, "stretch") ? m((0, o.HC)(t, "stretch", "fill-available"), e) + t : t;
                                }
                            break;
                        case 4949:
                            if (115 !== (0, o.wN)(t, e + 1)) break;
                        case 6444:
                            switch ((0, o.wN)(t, (0, o.b2)(t) - 3 - (~(0, o.K5)(t, "!important") && 10))) {
                                case 107:
                                    return (0, o.HC)(t, ":", ":" + n.j) + t;
                                case 101:
                                    return (0, o.HC)(t, /(.+:)([^;!]+)(;|!.+)?/, "$1" + n.j + (45 === (0, o.wN)(t, 14) ? "inline-" : "") + "box$3$1" + n.j + "$2$3$1" + n.MS + "$2box$3") + t;
                            }
                            break;
                        case 5936:
                            switch ((0, o.wN)(t, e + 11)) {
                                case 114:
                                    return n.j + t + n.MS + (0, o.HC)(t, /[svh]\w+-[tblr]{2}/, "tb") + t;
                                case 108:
                                    return n.j + t + n.MS + (0, o.HC)(t, /[svh]\w+-[tblr]{2}/, "tb-rl") + t;
                                case 45:
                                    return n.j + t + n.MS + (0, o.HC)(t, /[svh]\w+-[tblr]{2}/, "lr") + t;
                            }
                            return n.j + t + n.MS + t + t;
                    }
                    return t;
                }
                var f = [
                        function (t, e, i, s) {
                            if (t.length > -1 && !t.return)
                                switch (t.type) {
                                    case n.LU:
                                        t.return = m(t.value, t.length);
                                        break;
                                    case n.Sv:
                                        return (0, l.l)([(0, r.C)(t, { value: (0, o.HC)(t.value, "@", "@" + n.j) })], s);
                                    case n.XZ:
                                        if (t.length)
                                            return (0, o.kg)(t.props, function (e) {
                                                switch ((0, o.YW)(e, /(::plac\w+|:read-\w+)/)) {
                                                    case ":read-only":
                                                    case ":read-write":
                                                        return (0, l.l)([(0, r.C)(t, { props: [(0, o.HC)(e, /:(read-\w+)/, ":" + n.vd + "$1")] })], s);
                                                    case "::placeholder":
                                                        return (0,
                                                        l.l)([(0, r.C)(t, { props: [(0, o.HC)(e, /:(plac\w+)/, ":" + n.j + "input-$1")] }), (0, r.C)(t, { props: [(0, o.HC)(e, /:(plac\w+)/, ":" + n.vd + "$1")] }), (0, r.C)(t, { props: [(0, o.HC)(e, /:(plac\w+)/, n.MS + "input-$1")] })], s);
                                                }
                                                return "";
                                            });
                                }
                        },
                    ],
                    g = function (t) {
                        var e = t.key;
                        if ("css" === e) {
                            var i = document.querySelectorAll("style[data-emotion]:not([data-s])");
                            Array.prototype.forEach.call(i, function (t) {
                                -1 !== t.getAttribute("data-emotion").indexOf(" ") && (document.head.appendChild(t), t.setAttribute("data-s", ""));
                            });
                        }
                        var n,
                            o,
                            r = t.stylisPlugins || f,
                            d = {},
                            h = [];
                        (n = t.container || document.head),
                            Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + e + ' "]'), function (t) {
                                for (var e = t.getAttribute("data-emotion").split(" "), i = 1; i < e.length; i++) d[e[i]] = !0;
                                h.push(t);
                            });
                        var m,
                            g = [u, p],
                            b = [
                                l.A,
                                (0, c.MY)(function (t) {
                                    m.insert(t);
                                }),
                            ],
                            x = (0, c.r1)(g.concat(r, b));
                        o = function (t, e, i, s) {
                            var n;
                            (m = i), (n = t ? t + "{" + e.styles + "}" : e.styles), (0, l.l)((0, a.wE)(n), x), s && (v.inserted[e.name] = !0);
                        };
                        var v = { key: e, sheet: new s.v({ key: e, container: n, nonce: t.nonce, speedy: t.speedy, prepend: t.prepend, insertionPoint: t.insertionPoint }), nonce: t.nonce, inserted: d, registered: {}, insert: o };
                        return v.sheet.hydrate(h), v;
                    };
            },
            6005: (t, e, i) => {
                "use strict";
                i.d(e, { Ay: () => r });
                var s = i(2836),
                    n = i(8168),
                    o = i(1609),
                    a = i(3899),
                    r =
                        (i(5815),
                        i(5795),
                        i(7003),
                        (0, o.forwardRef)(function (t, e) {
                            var i = (0, s.u)(t);
                            return o.createElement(a.S, (0, n.A)({ ref: e }, i));
                        }));
            },
            6087: (t) => {
                "use strict";
                t.exports = window.wp.element;
            },
            6154: (t) => {
                "use strict";
                t.exports = window.moment;
            },
            6289: (t, e, i) => {
                "use strict";
                function s(t) {
                    var e = Object.create(null);
                    return function (i) {
                        return void 0 === e[i] && (e[i] = t(i)), e[i];
                    };
                }
                i.d(e, { A: () => s });
            },
            6369: (t, e, i) => {
                "use strict";
                function s(t) {
                    if (Array.isArray(t)) return t;
                }
                i.d(e, { A: () => s });
            },
            6427: (t) => {
                "use strict";
                t.exports = window.wp.components;
            },
            6562: (t, e, i) => {
                "use strict";
                function s() {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                i.d(e, { A: () => s });
            },
            6635: (t, e, i) => {
                "use strict";
                function s() {
                    return "undefined" != typeof window;
                }
                function n(t) {
                    return r(t) ? (t.nodeName || "").toLowerCase() : "#document";
                }
                function o(t) {
                    var e;
                    return (null == t || null == (e = t.ownerDocument) ? void 0 : e.defaultView) || window;
                }
                function a(t) {
                    var e;
                    return null == (e = (r(t) ? t.ownerDocument : t.document) || window.document) ? void 0 : e.documentElement;
                }
                function r(t) {
                    return !!s() && (t instanceof Node || t instanceof o(t).Node);
                }
                function l(t) {
                    return !!s() && (t instanceof Element || t instanceof o(t).Element);
                }
                function c(t) {
                    return !!s() && (t instanceof HTMLElement || t instanceof o(t).HTMLElement);
                }
                function d(t) {
                    return !(!s() || "undefined" == typeof ShadowRoot) && (t instanceof ShadowRoot || t instanceof o(t).ShadowRoot);
                }
                i.d(e, {
                    $4: () => j,
                    CP: () => M,
                    L9: () => k,
                    Lv: () => m,
                    Tc: () => C,
                    Tf: () => g,
                    ZU: () => u,
                    _m: () => L,
                    ep: () => a,
                    eu: () => z,
                    gJ: () => _,
                    mq: () => n,
                    sQ: () => y,
                    sb: () => c,
                    v9: () => A,
                    vq: () => l,
                    zk: () => o,
                });
                const h = new Set(["inline", "contents"]);
                function u(t) {
                    const { overflow: e, overflowX: i, overflowY: s, display: n } = k(t);
                    return /auto|scroll|overlay|hidden|clip/.test(e + s + i) && !h.has(n);
                }
                const p = new Set(["table", "td", "th"]);
                function m(t) {
                    return p.has(n(t));
                }
                const f = [":popover-open", ":modal"];
                function g(t) {
                    return f.some((e) => {
                        try {
                            return t.matches(e);
                        } catch (t) {
                            return !1;
                        }
                    });
                }
                const b = ["transform", "translate", "scale", "rotate", "perspective"],
                    x = ["transform", "translate", "scale", "rotate", "perspective", "filter"],
                    v = ["paint", "layout", "strict", "content"];
                function y(t) {
                    const e = C(),
                        i = l(t) ? k(t) : t;
                    return (
                        b.some((t) => !!i[t] && "none" !== i[t]) ||
                        (!!i.containerType && "normal" !== i.containerType) ||
                        (!e && !!i.backdropFilter && "none" !== i.backdropFilter) ||
                        (!e && !!i.filter && "none" !== i.filter) ||
                        x.some((t) => (i.willChange || "").includes(t)) ||
                        v.some((t) => (i.contain || "").includes(t))
                    );
                }
                function _(t) {
                    let e = j(t);
                    for (; c(e) && !z(e); ) {
                        if (y(e)) return e;
                        if (g(e)) return null;
                        e = j(e);
                    }
                    return null;
                }
                function C() {
                    return !("undefined" == typeof CSS || !CSS.supports) && CSS.supports("-webkit-backdrop-filter", "none");
                }
                const w = new Set(["html", "body", "#document"]);
                function z(t) {
                    return w.has(n(t));
                }
                function k(t) {
                    return o(t).getComputedStyle(t);
                }
                function M(t) {
                    return l(t) ? { scrollLeft: t.scrollLeft, scrollTop: t.scrollTop } : { scrollLeft: t.scrollX, scrollTop: t.scrollY };
                }
                function j(t) {
                    if ("html" === n(t)) return t;
                    const e = t.assignedSlot || t.parentNode || (d(t) && t.host) || a(t);
                    return d(e) ? e.host : e;
                }
                function S(t) {
                    const e = j(t);
                    return z(e) ? (t.ownerDocument ? t.ownerDocument.body : t.body) : c(e) && u(e) ? e : S(e);
                }
                function A(t, e, i) {
                    var s;
                    void 0 === e && (e = []), void 0 === i && (i = !0);
                    const n = S(t),
                        a = n === (null == (s = t.ownerDocument) ? void 0 : s.body),
                        r = o(n);
                    if (a) {
                        const t = L(r);
                        return e.concat(r, r.visualViewport || [], u(n) ? n : [], t && i ? A(t) : []);
                    }
                    return e.concat(n, A(n, [], i));
                }
                function L(t) {
                    return t.parent && Object.getPrototypeOf(t.parent) ? t.frameElement : null;
                }
            },
            6822: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => o });
                var s = i(2284),
                    n = i(9417);
                function o(t, e) {
                    if (e && ("object" == (0, s.A)(e) || "function" == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                    return (0, n.A)(t);
                }
            },
            6918: function (t, e, i) {
                var s, n;
                (s = [i(6154), i(428)]),
                    void 0 ===
                        (n = function (t, e) {
                            return (
                                e.fn || (e.fn = {}),
                                "function" != typeof t && t.hasOwnProperty("default") && (t = t.default),
                                (function (t, e) {
                                    var i = function (i, s, n) {
                                        if (
                                            ((this.parentEl = "body"),
                                            (this.element = e(i)),
                                            (this.startDate = t().startOf("day")),
                                            (this.endDate = t().endOf("day")),
                                            (this.minDate = !1),
                                            (this.maxDate = !1),
                                            (this.maxSpan = !1),
                                            (this.autoApply = !1),
                                            (this.singleDatePicker = !1),
                                            (this.showDropdowns = !1),
                                            (this.minYear = t().subtract(100, "year").format("YYYY")),
                                            (this.maxYear = t().add(100, "year").format("YYYY")),
                                            (this.showWeekNumbers = !1),
                                            (this.showISOWeekNumbers = !1),
                                            (this.showCustomRangeLabel = !0),
                                            (this.timePicker = !1),
                                            (this.timePicker24Hour = !1),
                                            (this.timePickerIncrement = 1),
                                            (this.timePickerSeconds = !1),
                                            (this.linkedCalendars = !0),
                                            (this.autoUpdateInput = !0),
                                            (this.alwaysShowCalendars = !1),
                                            (this.ranges = {}),
                                            (this.opens = "right"),
                                            this.element.hasClass("pull-right") && (this.opens = "left"),
                                            (this.drops = "down"),
                                            this.element.hasClass("dropup") && (this.drops = "up"),
                                            (this.buttonClasses = "btn btn-sm"),
                                            (this.applyButtonClasses = "btn-primary"),
                                            (this.cancelButtonClasses = "btn-default"),
                                            (this.locale = {
                                                direction: "ltr",
                                                format: t.localeData().longDateFormat("L"),
                                                separator: " - ",
                                                applyLabel: "Apply",
                                                cancelLabel: "Cancel",
                                                weekLabel: "W",
                                                customRangeLabel: "Custom Range",
                                                daysOfWeek: t.weekdaysMin(),
                                                monthNames: t.monthsShort(),
                                                firstDay: t.localeData().firstDayOfWeek(),
                                            }),
                                            (this.callback = function () {}),
                                            (this.isShowing = !1),
                                            (this.leftCalendar = {}),
                                            (this.rightCalendar = {}),
                                            ("object" == typeof s && null !== s) || (s = {}),
                                            "string" == typeof (s = e.extend(this.element.data(), s)).template ||
                                                s.template instanceof e ||
                                                (s.template =
                                                    '<div class="daterangepicker"><div class="ranges"></div><div class="drp-calendar left"><div class="calendar-table"></div><div class="calendar-time"></div></div><div class="drp-calendar right"><div class="calendar-table"></div><div class="calendar-time"></div></div><div class="drp-buttons"><span class="drp-selected"></span><button class="cancelBtn" type="button"></button><button class="applyBtn" disabled="disabled" type="button"></button> </div></div>'),
                                            (this.parentEl = s.parentEl && e(s.parentEl).length ? e(s.parentEl) : e(this.parentEl)),
                                            (this.container = e(s.template).appendTo(this.parentEl)),
                                            "object" == typeof s.locale &&
                                                ("string" == typeof s.locale.direction && (this.locale.direction = s.locale.direction),
                                                "string" == typeof s.locale.format && (this.locale.format = s.locale.format),
                                                "string" == typeof s.locale.separator && (this.locale.separator = s.locale.separator),
                                                "object" == typeof s.locale.daysOfWeek && (this.locale.daysOfWeek = s.locale.daysOfWeek.slice()),
                                                "object" == typeof s.locale.monthNames && (this.locale.monthNames = s.locale.monthNames.slice()),
                                                "number" == typeof s.locale.firstDay && (this.locale.firstDay = s.locale.firstDay),
                                                "string" == typeof s.locale.applyLabel && (this.locale.applyLabel = s.locale.applyLabel),
                                                "string" == typeof s.locale.cancelLabel && (this.locale.cancelLabel = s.locale.cancelLabel),
                                                "string" == typeof s.locale.weekLabel && (this.locale.weekLabel = s.locale.weekLabel),
                                                "string" == typeof s.locale.customRangeLabel))
                                        ) {
                                            (u = document.createElement("textarea")).innerHTML = s.locale.customRangeLabel;
                                            var o = u.value;
                                            this.locale.customRangeLabel = o;
                                        }
                                        if (
                                            (this.container.addClass(this.locale.direction),
                                            "string" == typeof s.startDate && (this.startDate = t(s.startDate, this.locale.format)),
                                            "string" == typeof s.endDate && (this.endDate = t(s.endDate, this.locale.format)),
                                            "string" == typeof s.minDate && (this.minDate = t(s.minDate, this.locale.format)),
                                            "string" == typeof s.maxDate && (this.maxDate = t(s.maxDate, this.locale.format)),
                                            "object" == typeof s.startDate && (this.startDate = t(s.startDate)),
                                            "object" == typeof s.endDate && (this.endDate = t(s.endDate)),
                                            "object" == typeof s.minDate && (this.minDate = t(s.minDate)),
                                            "object" == typeof s.maxDate && (this.maxDate = t(s.maxDate)),
                                            this.minDate && this.startDate.isBefore(this.minDate) && (this.startDate = this.minDate.clone()),
                                            this.maxDate && this.endDate.isAfter(this.maxDate) && (this.endDate = this.maxDate.clone()),
                                            "string" == typeof s.applyButtonClasses && (this.applyButtonClasses = s.applyButtonClasses),
                                            "string" == typeof s.applyClass && (this.applyButtonClasses = s.applyClass),
                                            "string" == typeof s.cancelButtonClasses && (this.cancelButtonClasses = s.cancelButtonClasses),
                                            "string" == typeof s.cancelClass && (this.cancelButtonClasses = s.cancelClass),
                                            "object" == typeof s.maxSpan && (this.maxSpan = s.maxSpan),
                                            "object" == typeof s.dateLimit && (this.maxSpan = s.dateLimit),
                                            "string" == typeof s.opens && (this.opens = s.opens),
                                            "string" == typeof s.drops && (this.drops = s.drops),
                                            "boolean" == typeof s.showWeekNumbers && (this.showWeekNumbers = s.showWeekNumbers),
                                            "boolean" == typeof s.showISOWeekNumbers && (this.showISOWeekNumbers = s.showISOWeekNumbers),
                                            "string" == typeof s.buttonClasses && (this.buttonClasses = s.buttonClasses),
                                            "object" == typeof s.buttonClasses && (this.buttonClasses = s.buttonClasses.join(" ")),
                                            "boolean" == typeof s.showDropdowns && (this.showDropdowns = s.showDropdowns),
                                            "number" == typeof s.minYear && (this.minYear = s.minYear),
                                            "number" == typeof s.maxYear && (this.maxYear = s.maxYear),
                                            "boolean" == typeof s.showCustomRangeLabel && (this.showCustomRangeLabel = s.showCustomRangeLabel),
                                            "boolean" == typeof s.singleDatePicker && ((this.singleDatePicker = s.singleDatePicker), this.singleDatePicker && (this.endDate = this.startDate.clone())),
                                            "boolean" == typeof s.timePicker && (this.timePicker = s.timePicker),
                                            "boolean" == typeof s.timePickerSeconds && (this.timePickerSeconds = s.timePickerSeconds),
                                            "number" == typeof s.timePickerIncrement && (this.timePickerIncrement = s.timePickerIncrement),
                                            "boolean" == typeof s.timePicker24Hour && (this.timePicker24Hour = s.timePicker24Hour),
                                            "boolean" == typeof s.autoApply && (this.autoApply = s.autoApply),
                                            "boolean" == typeof s.autoUpdateInput && (this.autoUpdateInput = s.autoUpdateInput),
                                            "boolean" == typeof s.linkedCalendars && (this.linkedCalendars = s.linkedCalendars),
                                            "function" == typeof s.isInvalidDate && (this.isInvalidDate = s.isInvalidDate),
                                            "function" == typeof s.isCustomDate && (this.isCustomDate = s.isCustomDate),
                                            "boolean" == typeof s.alwaysShowCalendars && (this.alwaysShowCalendars = s.alwaysShowCalendars),
                                            0 != this.locale.firstDay)
                                        )
                                            for (var a = this.locale.firstDay; a > 0; ) this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift()), a--;
                                        var r, l, c;
                                        if (void 0 === s.startDate && void 0 === s.endDate && e(this.element).is(":text")) {
                                            var d = e(this.element).val(),
                                                h = d.split(this.locale.separator);
                                            (r = l = null),
                                                2 == h.length ? ((r = t(h[0], this.locale.format)), (l = t(h[1], this.locale.format))) : this.singleDatePicker && "" !== d && ((r = t(d, this.locale.format)), (l = t(d, this.locale.format))),
                                                null !== r && null !== l && (this.setStartDate(r), this.setEndDate(l));
                                        }
                                        if ("object" == typeof s.ranges) {
                                            for (c in s.ranges) {
                                                (r = "string" == typeof s.ranges[c][0] ? t(s.ranges[c][0], this.locale.format) : t(s.ranges[c][0])),
                                                    (l = "string" == typeof s.ranges[c][1] ? t(s.ranges[c][1], this.locale.format) : t(s.ranges[c][1])),
                                                    this.minDate && r.isBefore(this.minDate) && (r = this.minDate.clone());
                                                var u,
                                                    p = this.maxDate;
                                                this.maxSpan && p && r.clone().add(this.maxSpan).isAfter(p) && (p = r.clone().add(this.maxSpan)),
                                                    p && l.isAfter(p) && (l = p.clone()),
                                                    (this.minDate && l.isBefore(this.minDate, this.timepicker ? "minute" : "day")) ||
                                                        (p && r.isAfter(p, this.timepicker ? "minute" : "day")) ||
                                                        (((u = document.createElement("textarea")).innerHTML = c), (o = u.value), (this.ranges[o] = [r, l]));
                                            }
                                            var m = "<ul>";
                                            for (c in this.ranges) m += '<li data-range-key="' + c + '">' + c + "</li>";
                                            this.showCustomRangeLabel && (m += '<li data-range-key="' + this.locale.customRangeLabel + '">' + this.locale.customRangeLabel + "</li>"),
                                                (m += "</ul>"),
                                                this.container.find(".ranges").prepend(m);
                                        }
                                        "function" == typeof n && (this.callback = n),
                                            this.timePicker || ((this.startDate = this.startDate.startOf("day")), (this.endDate = this.endDate.endOf("day")), this.container.find(".calendar-time").hide()),
                                            this.timePicker && this.autoApply && (this.autoApply = !1),
                                            this.autoApply && this.container.addClass("auto-apply"),
                                            "object" == typeof s.ranges && this.container.addClass("show-ranges"),
                                            this.singleDatePicker &&
                                                (this.container.addClass("single"),
                                                this.container.find(".drp-calendar.left").addClass("single"),
                                                this.container.find(".drp-calendar.left").show(),
                                                this.container.find(".drp-calendar.right").hide(),
                                                !this.timePicker && this.autoApply && this.container.addClass("auto-apply")),
                                            ((void 0 === s.ranges && !this.singleDatePicker) || this.alwaysShowCalendars) && this.container.addClass("show-calendar"),
                                            this.container.addClass("opens" + this.opens),
                                            this.container.find(".applyBtn, .cancelBtn").addClass(this.buttonClasses),
                                            this.applyButtonClasses.length && this.container.find(".applyBtn").addClass(this.applyButtonClasses),
                                            this.cancelButtonClasses.length && this.container.find(".cancelBtn").addClass(this.cancelButtonClasses),
                                            this.container.find(".applyBtn").html(this.locale.applyLabel),
                                            this.container.find(".cancelBtn").html(this.locale.cancelLabel),
                                            this.container
                                                .find(".drp-calendar")
                                                .on("click.daterangepicker", ".prev", e.proxy(this.clickPrev, this))
                                                .on("click.daterangepicker", ".next", e.proxy(this.clickNext, this))
                                                .on("mousedown.daterangepicker", "td.available", e.proxy(this.clickDate, this))
                                                .on("mouseenter.daterangepicker", "td.available", e.proxy(this.hoverDate, this))
                                                .on("change.daterangepicker", "select.yearselect", e.proxy(this.monthOrYearChanged, this))
                                                .on("change.daterangepicker", "select.monthselect", e.proxy(this.monthOrYearChanged, this))
                                                .on("change.daterangepicker", "select.hourselect,select.minuteselect,select.secondselect,select.ampmselect", e.proxy(this.timeChanged, this)),
                                            this.container.find(".ranges").on("click.daterangepicker", "li", e.proxy(this.clickRange, this)),
                                            this.container.find(".drp-buttons").on("click.daterangepicker", "button.applyBtn", e.proxy(this.clickApply, this)).on("click.daterangepicker", "button.cancelBtn", e.proxy(this.clickCancel, this)),
                                            this.element.is("input") || this.element.is("button")
                                                ? this.element.on({
                                                      "click.daterangepicker": e.proxy(this.show, this),
                                                      "focus.daterangepicker": e.proxy(this.show, this),
                                                      "keyup.daterangepicker": e.proxy(this.elementChanged, this),
                                                      "keydown.daterangepicker": e.proxy(this.keydown, this),
                                                  })
                                                : (this.element.on("click.daterangepicker", e.proxy(this.toggle, this)), this.element.on("keydown.daterangepicker", e.proxy(this.toggle, this))),
                                            this.updateElement();
                                    };
                                    return (
                                        (i.prototype = {
                                            constructor: i,
                                            setStartDate: function (e) {
                                                "string" == typeof e && (this.startDate = t(e, this.locale.format)),
                                                    "object" == typeof e && (this.startDate = t(e)),
                                                    this.timePicker || (this.startDate = this.startDate.startOf("day")),
                                                    this.timePicker && this.timePickerIncrement && this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement),
                                                    this.minDate &&
                                                        this.startDate.isBefore(this.minDate) &&
                                                        ((this.startDate = this.minDate.clone()),
                                                        this.timePicker && this.timePickerIncrement && this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement)),
                                                    this.maxDate &&
                                                        this.startDate.isAfter(this.maxDate) &&
                                                        ((this.startDate = this.maxDate.clone()),
                                                        this.timePicker && this.timePickerIncrement && this.startDate.minute(Math.floor(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement)),
                                                    this.isShowing || this.updateElement(),
                                                    this.updateMonthsInView();
                                            },
                                            setEndDate: function (e) {
                                                "string" == typeof e && (this.endDate = t(e, this.locale.format)),
                                                    "object" == typeof e && (this.endDate = t(e)),
                                                    this.timePicker || (this.endDate = this.endDate.endOf("day")),
                                                    this.timePicker && this.timePickerIncrement && this.endDate.minute(Math.round(this.endDate.minute() / this.timePickerIncrement) * this.timePickerIncrement),
                                                    this.endDate.isBefore(this.startDate) && (this.endDate = this.startDate.clone()),
                                                    this.maxDate && this.endDate.isAfter(this.maxDate) && (this.endDate = this.maxDate.clone()),
                                                    this.maxSpan && this.startDate.clone().add(this.maxSpan).isBefore(this.endDate) && (this.endDate = this.startDate.clone().add(this.maxSpan)),
                                                    (this.previousRightTime = this.endDate.clone()),
                                                    this.container.find(".drp-selected").html(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format)),
                                                    this.isShowing || this.updateElement(),
                                                    this.updateMonthsInView();
                                            },
                                            isInvalidDate: function () {
                                                return !1;
                                            },
                                            isCustomDate: function () {
                                                return !1;
                                            },
                                            updateView: function () {
                                                this.timePicker &&
                                                    (this.renderTimePicker("left"),
                                                    this.renderTimePicker("right"),
                                                    this.endDate
                                                        ? this.container.find(".right .calendar-time select").prop("disabled", !1).removeClass("disabled")
                                                        : this.container.find(".right .calendar-time select").prop("disabled", !0).addClass("disabled")),
                                                    this.endDate && this.container.find(".drp-selected").html(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format)),
                                                    this.updateMonthsInView(),
                                                    this.updateCalendars(),
                                                    this.updateFormInputs();
                                            },
                                            updateMonthsInView: function () {
                                                if (this.endDate) {
                                                    if (
                                                        !this.singleDatePicker &&
                                                        this.leftCalendar.month &&
                                                        this.rightCalendar.month &&
                                                        (this.startDate.format("YYYY-MM") == this.leftCalendar.month.format("YYYY-MM") || this.startDate.format("YYYY-MM") == this.rightCalendar.month.format("YYYY-MM")) &&
                                                        (this.endDate.format("YYYY-MM") == this.leftCalendar.month.format("YYYY-MM") || this.endDate.format("YYYY-MM") == this.rightCalendar.month.format("YYYY-MM"))
                                                    )
                                                        return;
                                                    (this.leftCalendar.month = this.startDate.clone().date(2)),
                                                        this.linkedCalendars || (this.endDate.month() == this.startDate.month() && this.endDate.year() == this.startDate.year())
                                                            ? (this.rightCalendar.month = this.startDate.clone().date(2).add(1, "month"))
                                                            : (this.rightCalendar.month = this.endDate.clone().date(2));
                                                } else
                                                    this.leftCalendar.month.format("YYYY-MM") != this.startDate.format("YYYY-MM") &&
                                                        this.rightCalendar.month.format("YYYY-MM") != this.startDate.format("YYYY-MM") &&
                                                        ((this.leftCalendar.month = this.startDate.clone().date(2)), (this.rightCalendar.month = this.startDate.clone().date(2).add(1, "month")));
                                                this.maxDate &&
                                                    this.linkedCalendars &&
                                                    !this.singleDatePicker &&
                                                    this.rightCalendar.month > this.maxDate &&
                                                    ((this.rightCalendar.month = this.maxDate.clone().date(2)), (this.leftCalendar.month = this.maxDate.clone().date(2).subtract(1, "month")));
                                            },
                                            updateCalendars: function () {
                                                var t, e, i, s;
                                                this.timePicker &&
                                                    (this.endDate
                                                        ? ((t = parseInt(this.container.find(".left .hourselect").val(), 10)),
                                                          (e = parseInt(this.container.find(".left .minuteselect").val(), 10)),
                                                          isNaN(e) && (e = parseInt(this.container.find(".left .minuteselect option:last").val(), 10)),
                                                          (i = this.timePickerSeconds ? parseInt(this.container.find(".left .secondselect").val(), 10) : 0),
                                                          this.timePicker24Hour || ("PM" === (s = this.container.find(".left .ampmselect").val()) && t < 12 && (t += 12), "AM" === s && 12 === t && (t = 0)))
                                                        : ((t = parseInt(this.container.find(".right .hourselect").val(), 10)),
                                                          (e = parseInt(this.container.find(".right .minuteselect").val(), 10)),
                                                          isNaN(e) && (e = parseInt(this.container.find(".right .minuteselect option:last").val(), 10)),
                                                          (i = this.timePickerSeconds ? parseInt(this.container.find(".right .secondselect").val(), 10) : 0),
                                                          this.timePicker24Hour || ("PM" === (s = this.container.find(".right .ampmselect").val()) && t < 12 && (t += 12), "AM" === s && 12 === t && (t = 0))),
                                                    this.leftCalendar.month.hour(t).minute(e).second(i),
                                                    this.rightCalendar.month.hour(t).minute(e).second(i)),
                                                    this.renderCalendar("left"),
                                                    this.renderCalendar("right"),
                                                    this.container.find(".ranges li").removeClass("active"),
                                                    null != this.endDate && this.calculateChosenLabel();
                                            },
                                            renderCalendar: function (i) {
                                                var s,
                                                    n = (s = "left" == i ? this.leftCalendar : this.rightCalendar).month.month(),
                                                    o = s.month.year(),
                                                    a = s.month.hour(),
                                                    r = s.month.minute(),
                                                    l = s.month.second(),
                                                    c = t([o, n]).daysInMonth(),
                                                    d = t([o, n, 1]),
                                                    h = t([o, n, c]),
                                                    u = t(d).subtract(1, "month").month(),
                                                    p = t(d).subtract(1, "month").year(),
                                                    m = t([p, u]).daysInMonth(),
                                                    f = d.day();
                                                ((s = []).firstDay = d), (s.lastDay = h);
                                                for (var g = 0; g < 6; g++) s[g] = [];
                                                var b = m - f + this.locale.firstDay + 1;
                                                b > m && (b -= 7), f == this.locale.firstDay && (b = m - 6);
                                                for (var x = t([p, u, b, 12, r, l]), v = ((g = 0), 0), y = 0; g < 42; g++, v++, x = t(x).add(24, "hour"))
                                                    g > 0 && v % 7 == 0 && ((v = 0), y++),
                                                        (s[y][v] = x.clone().hour(a).minute(r).second(l)),
                                                        x.hour(12),
                                                        this.minDate && s[y][v].format("YYYY-MM-DD") == this.minDate.format("YYYY-MM-DD") && s[y][v].isBefore(this.minDate) && "left" == i && (s[y][v] = this.minDate.clone()),
                                                        this.maxDate && s[y][v].format("YYYY-MM-DD") == this.maxDate.format("YYYY-MM-DD") && s[y][v].isAfter(this.maxDate) && "right" == i && (s[y][v] = this.maxDate.clone());
                                                "left" == i ? (this.leftCalendar.calendar = s) : (this.rightCalendar.calendar = s);
                                                var _ = "left" == i ? this.minDate : this.startDate,
                                                    C = this.maxDate,
                                                    w = ("left" == i ? this.startDate : this.endDate, this.locale.direction, '<table class="table-condensed">');
                                                (w += "<thead>"),
                                                    (w += "<tr>"),
                                                    (this.showWeekNumbers || this.showISOWeekNumbers) && (w += "<th></th>"),
                                                    (_ && !_.isBefore(s.firstDay)) || (this.linkedCalendars && "left" != i) ? (w += "<th></th>") : (w += '<th class="prev available"><span></span></th>');
                                                var z = this.locale.monthNames[s[1][1].month()] + s[1][1].format(" YYYY");
                                                if (this.showDropdowns) {
                                                    for (
                                                        var k = s[1][1].month(),
                                                            M = s[1][1].year(),
                                                            j = (C && C.year()) || this.maxYear,
                                                            S = (_ && _.year()) || this.minYear,
                                                            A = M == S,
                                                            L = M == j,
                                                            D = '<select class="monthselect">',
                                                            T = 0;
                                                        T < 12;
                                                        T++
                                                    )
                                                        (!A || (_ && T >= _.month())) && (!L || (C && T <= C.month()))
                                                            ? (D += "<option value='" + T + "'" + (T === k ? " selected='selected'" : "") + ">" + this.locale.monthNames[T] + "</option>")
                                                            : (D += "<option value='" + T + "'" + (T === k ? " selected='selected'" : "") + " disabled='disabled'>" + this.locale.monthNames[T] + "</option>");
                                                    D += "</select>";
                                                    for (var E = '<select class="yearselect">', O = S; O <= j; O++) E += '<option value="' + O + '"' + (O === M ? ' selected="selected"' : "") + ">" + O + "</option>";
                                                    z = D + (E += "</select>");
                                                }
                                                if (
                                                    ((w += '<th colspan="5" class="month">' + z + "</th>"),
                                                    (C && !C.isAfter(s.lastDay)) || (this.linkedCalendars && "right" != i && !this.singleDatePicker) ? (w += "<th></th>") : (w += '<th class="next available"><span></span></th>'),
                                                    (w += "</tr>"),
                                                    (w += "<tr>"),
                                                    (this.showWeekNumbers || this.showISOWeekNumbers) && (w += '<th class="week">' + this.locale.weekLabel + "</th>"),
                                                    e.each(this.locale.daysOfWeek, function (t, e) {
                                                        w += "<th>" + e + "</th>";
                                                    }),
                                                    (w += "</tr>"),
                                                    (w += "</thead>"),
                                                    (w += "<tbody>"),
                                                    null == this.endDate && this.maxSpan)
                                                ) {
                                                    var P = this.startDate.clone().add(this.maxSpan).endOf("day");
                                                    (C && !P.isBefore(C)) || (C = P);
                                                }
                                                for (y = 0; y < 6; y++) {
                                                    for (
                                                        w += "<tr>", this.showWeekNumbers ? (w += '<td class="week">' + s[y][0].week() + "</td>") : this.showISOWeekNumbers && (w += '<td class="week">' + s[y][0].isoWeek() + "</td>"), v = 0;
                                                        v < 7;
                                                        v++
                                                    ) {
                                                        var I = [];
                                                        s[y][v].isSame(new Date(), "day") && I.push("today"),
                                                            s[y][v].isoWeekday() > 5 && I.push("weekend"),
                                                            s[y][v].month() != s[1][1].month() && I.push("off", "ends"),
                                                            this.minDate && s[y][v].isBefore(this.minDate, "day") && I.push("off", "disabled"),
                                                            C && s[y][v].isAfter(C, "day") && I.push("off", "disabled"),
                                                            this.isInvalidDate(s[y][v]) && I.push("off", "disabled"),
                                                            s[y][v].format("YYYY-MM-DD") == this.startDate.format("YYYY-MM-DD") && I.push("active", "start-date"),
                                                            null != this.endDate && s[y][v].format("YYYY-MM-DD") == this.endDate.format("YYYY-MM-DD") && I.push("active", "end-date"),
                                                            null != this.endDate && s[y][v] > this.startDate && s[y][v] < this.endDate && I.push("in-range");
                                                        var N = this.isCustomDate(s[y][v]);
                                                        !1 !== N && ("string" == typeof N ? I.push(N) : Array.prototype.push.apply(I, N));
                                                        var R = "",
                                                            V = !1;
                                                        for (g = 0; g < I.length; g++) (R += I[g] + " "), "disabled" == I[g] && (V = !0);
                                                        V || (R += "available"), (w += '<td class="' + R.replace(/^\s+|\s+$/g, "") + '" data-title="r' + y + "c" + v + '">' + s[y][v].date() + "</td>");
                                                    }
                                                    w += "</tr>";
                                                }
                                                (w += "</tbody>"), (w += "</table>"), this.container.find(".drp-calendar." + i + " .calendar-table").html(w);
                                            },
                                            renderTimePicker: function (t) {
                                                if ("right" != t || this.endDate) {
                                                    var e,
                                                        i,
                                                        s,
                                                        n = this.maxDate;
                                                    if ((!this.maxSpan || (this.maxDate && !this.startDate.clone().add(this.maxSpan).isBefore(this.maxDate)) || (n = this.startDate.clone().add(this.maxSpan)), "left" == t))
                                                        (i = this.startDate.clone()), (s = this.minDate);
                                                    else if ("right" == t) {
                                                        (i = this.endDate.clone()), (s = this.startDate);
                                                        var o = this.container.find(".drp-calendar.right .calendar-time");
                                                        if (
                                                            "" != o.html() &&
                                                            (i.hour(isNaN(i.hour()) ? o.find(".hourselect option:selected").val() : i.hour()),
                                                            i.minute(isNaN(i.minute()) ? o.find(".minuteselect option:selected").val() : i.minute()),
                                                            i.second(isNaN(i.second()) ? o.find(".secondselect option:selected").val() : i.second()),
                                                            !this.timePicker24Hour)
                                                        ) {
                                                            var a = o.find(".ampmselect option:selected").val();
                                                            "PM" === a && i.hour() < 12 && i.hour(i.hour() + 12), "AM" === a && 12 === i.hour() && i.hour(0);
                                                        }
                                                        i.isBefore(this.startDate) && (i = this.startDate.clone()), n && i.isAfter(n) && (i = n.clone());
                                                    }
                                                    e = '<select class="hourselect">';
                                                    for (var r = this.timePicker24Hour ? 0 : 1, l = this.timePicker24Hour ? 23 : 12, c = r; c <= l; c++) {
                                                        var d = c;
                                                        this.timePicker24Hour || (d = i.hour() >= 12 ? (12 == c ? 12 : c + 12) : 12 == c ? 0 : c);
                                                        var h = i.clone().hour(d),
                                                            u = !1;
                                                        s && h.minute(59).isBefore(s) && (u = !0),
                                                            n && h.minute(0).isAfter(n) && (u = !0),
                                                            d != i.hour() || u
                                                                ? (e += u ? '<option value="' + c + '" disabled="disabled" class="disabled">' + c + "</option>" : '<option value="' + c + '">' + c + "</option>")
                                                                : (e += '<option value="' + c + '" selected="selected">' + c + "</option>");
                                                    }
                                                    for (e += "</select> ", e += ': <select class="minuteselect">', c = 0; c < 60; c += this.timePickerIncrement) {
                                                        var p = c < 10 ? "0" + c : c;
                                                        (h = i.clone().minute(c)),
                                                            (u = !1),
                                                            s && h.second(59).isBefore(s) && (u = !0),
                                                            n && h.second(0).isAfter(n) && (u = !0),
                                                            i.minute() != c || u
                                                                ? (e += u ? '<option value="' + c + '" disabled="disabled" class="disabled">' + p + "</option>" : '<option value="' + c + '">' + p + "</option>")
                                                                : (e += '<option value="' + c + '" selected="selected">' + p + "</option>");
                                                    }
                                                    if (((e += "</select> "), this.timePickerSeconds)) {
                                                        for (e += ': <select class="secondselect">', c = 0; c < 60; c++)
                                                            (p = c < 10 ? "0" + c : c),
                                                                (h = i.clone().second(c)),
                                                                (u = !1),
                                                                s && h.isBefore(s) && (u = !0),
                                                                n && h.isAfter(n) && (u = !0),
                                                                i.second() != c || u
                                                                    ? (e += u ? '<option value="' + c + '" disabled="disabled" class="disabled">' + p + "</option>" : '<option value="' + c + '">' + p + "</option>")
                                                                    : (e += '<option value="' + c + '" selected="selected">' + p + "</option>");
                                                        e += "</select> ";
                                                    }
                                                    if (!this.timePicker24Hour) {
                                                        e += '<select class="ampmselect">';
                                                        var m = "",
                                                            f = "";
                                                        s && i.clone().hour(12).minute(0).second(0).isBefore(s) && (m = ' disabled="disabled" class="disabled"'),
                                                            n && i.clone().hour(0).minute(0).second(0).isAfter(n) && (f = ' disabled="disabled" class="disabled"'),
                                                            i.hour() >= 12
                                                                ? (e += '<option value="AM"' + m + '>AM</option><option value="PM" selected="selected"' + f + ">PM</option>")
                                                                : (e += '<option value="AM" selected="selected"' + m + '>AM</option><option value="PM"' + f + ">PM</option>"),
                                                            (e += "</select>");
                                                    }
                                                    this.container.find(".drp-calendar." + t + " .calendar-time").html(e);
                                                }
                                            },
                                            updateFormInputs: function () {
                                                this.singleDatePicker || (this.endDate && (this.startDate.isBefore(this.endDate) || this.startDate.isSame(this.endDate)))
                                                    ? this.container.find("button.applyBtn").prop("disabled", !1)
                                                    : this.container.find("button.applyBtn").prop("disabled", !0);
                                            },
                                            move: function () {
                                                var t,
                                                    i = { top: 0, left: 0 },
                                                    s = this.drops,
                                                    n = e(window).width();
                                                switch (
                                                    (this.parentEl.is("body") ||
                                                        ((i = { top: this.parentEl.offset().top - this.parentEl.scrollTop(), left: this.parentEl.offset().left - this.parentEl.scrollLeft() }),
                                                        (n = this.parentEl[0].clientWidth + this.parentEl.offset().left)),
                                                    s)
                                                ) {
                                                    case "auto":
                                                        (t = this.element.offset().top + this.element.outerHeight() - i.top) + this.container.outerHeight() >= this.parentEl[0].scrollHeight &&
                                                            ((t = this.element.offset().top - this.container.outerHeight() - i.top), (s = "up"));
                                                        break;
                                                    case "up":
                                                        t = this.element.offset().top - this.container.outerHeight() - i.top;
                                                        break;
                                                    default:
                                                        t = this.element.offset().top + this.element.outerHeight() - i.top;
                                                }
                                                this.container.css({ top: 0, left: 0, right: "auto" });
                                                var o = this.container.outerWidth();
                                                if ((this.container.toggleClass("drop-up", "up" == s), "left" == this.opens)) {
                                                    var a = n - this.element.offset().left - this.element.outerWidth();
                                                    o + a > e(window).width() ? this.container.css({ top: t, right: "auto", left: 9 }) : this.container.css({ top: t, right: a, left: "auto" });
                                                } else if ("center" == this.opens)
                                                    (r = this.element.offset().left - i.left + this.element.outerWidth() / 2 - o / 2) < 0
                                                        ? this.container.css({ top: t, right: "auto", left: 9 })
                                                        : r + o > e(window).width()
                                                        ? this.container.css({ top: t, left: "auto", right: 0 })
                                                        : this.container.css({ top: t, left: r, right: "auto" });
                                                else {
                                                    var r;
                                                    (r = this.element.offset().left - i.left) + o > e(window).width() ? this.container.css({ top: t, left: "auto", right: 0 }) : this.container.css({ top: t, left: r, right: "auto" });
                                                }
                                            },
                                            show: function (t) {
                                                this.isShowing ||
                                                    ((this._outsideClickProxy = e.proxy(function (t) {
                                                        this.outsideClick(t);
                                                    }, this)),
                                                    e(document)
                                                        .on("mousedown.daterangepicker", this._outsideClickProxy)
                                                        .on("touchend.daterangepicker", this._outsideClickProxy)
                                                        .on("click.daterangepicker", "[data-toggle=dropdown]", this._outsideClickProxy)
                                                        .on("focusin.daterangepicker", this._outsideClickProxy),
                                                    e(window).on(
                                                        "resize.daterangepicker",
                                                        e.proxy(function (t) {
                                                            this.move(t);
                                                        }, this)
                                                    ),
                                                    (this.oldStartDate = this.startDate.clone()),
                                                    (this.oldEndDate = this.endDate.clone()),
                                                    (this.previousRightTime = this.endDate.clone()),
                                                    this.updateView(),
                                                    this.container.show(),
                                                    this.move(),
                                                    this.element.trigger("show.daterangepicker", this),
                                                    (this.isShowing = !0));
                                            },
                                            hide: function (t) {
                                                this.isShowing &&
                                                    (this.endDate || ((this.startDate = this.oldStartDate.clone()), (this.endDate = this.oldEndDate.clone())),
                                                    (this.startDate.isSame(this.oldStartDate) && this.endDate.isSame(this.oldEndDate)) || this.callback(this.startDate.clone(), this.endDate.clone(), this.chosenLabel),
                                                    this.updateElement(),
                                                    e(document).off(".daterangepicker"),
                                                    e(window).off(".daterangepicker"),
                                                    this.container.hide(),
                                                    this.element.trigger("hide.daterangepicker", this),
                                                    (this.isShowing = !1));
                                            },
                                            toggle: function (t) {
                                                this.isShowing ? this.hide() : this.show();
                                            },
                                            outsideClick: function (t) {
                                                var i = e(t.target);
                                                "focusin" == t.type ||
                                                    i.closest(this.element).length ||
                                                    i.closest(this.container).length ||
                                                    i.closest(".calendar-table").length ||
                                                    (this.hide(), this.element.trigger("outsideClick.daterangepicker", this));
                                            },
                                            showCalendars: function () {
                                                this.container.addClass("show-calendar"), this.move(), this.element.trigger("showCalendar.daterangepicker", this);
                                            },
                                            hideCalendars: function () {
                                                this.container.removeClass("show-calendar"), this.element.trigger("hideCalendar.daterangepicker", this);
                                            },
                                            clickRange: function (t) {
                                                var e = t.target.getAttribute("data-range-key");
                                                if (((this.chosenLabel = e), e == this.locale.customRangeLabel)) this.showCalendars();
                                                else {
                                                    var i = this.ranges[e];
                                                    (this.startDate = i[0]),
                                                        (this.endDate = i[1]),
                                                        this.timePicker || (this.startDate.startOf("day"), this.endDate.endOf("day")),
                                                        this.alwaysShowCalendars || this.hideCalendars(),
                                                        this.clickApply();
                                                }
                                            },
                                            clickPrev: function (t) {
                                                e(t.target).parents(".drp-calendar").hasClass("left")
                                                    ? (this.leftCalendar.month.subtract(1, "month"), this.linkedCalendars && this.rightCalendar.month.subtract(1, "month"))
                                                    : this.rightCalendar.month.subtract(1, "month"),
                                                    this.updateCalendars();
                                            },
                                            clickNext: function (t) {
                                                e(t.target).parents(".drp-calendar").hasClass("left")
                                                    ? this.leftCalendar.month.add(1, "month")
                                                    : (this.rightCalendar.month.add(1, "month"), this.linkedCalendars && this.leftCalendar.month.add(1, "month")),
                                                    this.updateCalendars();
                                            },
                                            hoverDate: function (t) {
                                                if (e(t.target).hasClass("available")) {
                                                    var i = e(t.target).attr("data-title"),
                                                        s = i.substr(1, 1),
                                                        n = i.substr(3, 1),
                                                        o = e(t.target).parents(".drp-calendar").hasClass("left") ? this.leftCalendar.calendar[s][n] : this.rightCalendar.calendar[s][n],
                                                        a = this.leftCalendar,
                                                        r = this.rightCalendar,
                                                        l = this.startDate;
                                                    this.endDate ||
                                                        this.container.find(".drp-calendar tbody td").each(function (t, i) {
                                                            if (!e(i).hasClass("week")) {
                                                                var s = e(i).attr("data-title"),
                                                                    n = s.substr(1, 1),
                                                                    c = s.substr(3, 1),
                                                                    d = e(i).parents(".drp-calendar").hasClass("left") ? a.calendar[n][c] : r.calendar[n][c];
                                                                (d.isAfter(l) && d.isBefore(o)) || d.isSame(o, "day") ? e(i).addClass("in-range") : e(i).removeClass("in-range");
                                                            }
                                                        });
                                                }
                                            },
                                            clickDate: function (t) {
                                                if (e(t.target).hasClass("available")) {
                                                    var i = e(t.target).attr("data-title"),
                                                        s = i.substr(1, 1),
                                                        n = i.substr(3, 1),
                                                        o = e(t.target).parents(".drp-calendar").hasClass("left") ? this.leftCalendar.calendar[s][n] : this.rightCalendar.calendar[s][n];
                                                    if (this.endDate || o.isBefore(this.startDate, "day")) {
                                                        if (this.timePicker) {
                                                            var a = parseInt(this.container.find(".left .hourselect").val(), 10);
                                                            this.timePicker24Hour || ("PM" === (c = this.container.find(".left .ampmselect").val()) && a < 12 && (a += 12), "AM" === c && 12 === a && (a = 0));
                                                            var r = parseInt(this.container.find(".left .minuteselect").val(), 10);
                                                            isNaN(r) && (r = parseInt(this.container.find(".left .minuteselect option:last").val(), 10));
                                                            var l = this.timePickerSeconds ? parseInt(this.container.find(".left .secondselect").val(), 10) : 0;
                                                            o = o.clone().hour(a).minute(r).second(l);
                                                        }
                                                        (this.endDate = null), this.setStartDate(o.clone());
                                                    } else if (!this.endDate && o.isBefore(this.startDate)) this.setEndDate(this.startDate.clone());
                                                    else {
                                                        var c;
                                                        this.timePicker &&
                                                            ((a = parseInt(this.container.find(".right .hourselect").val(), 10)),
                                                            this.timePicker24Hour || ("PM" === (c = this.container.find(".right .ampmselect").val()) && a < 12 && (a += 12), "AM" === c && 12 === a && (a = 0)),
                                                            (r = parseInt(this.container.find(".right .minuteselect").val(), 10)),
                                                            isNaN(r) && (r = parseInt(this.container.find(".right .minuteselect option:last").val(), 10)),
                                                            (l = this.timePickerSeconds ? parseInt(this.container.find(".right .secondselect").val(), 10) : 0),
                                                            (o = o.clone().hour(a).minute(r).second(l))),
                                                            this.setEndDate(o.clone()),
                                                            this.autoApply && (this.calculateChosenLabel(), this.clickApply());
                                                    }
                                                    this.singleDatePicker && (this.setEndDate(this.startDate), !this.timePicker && this.autoApply && this.clickApply()), this.updateView(), t.stopPropagation();
                                                }
                                            },
                                            calculateChosenLabel: function () {
                                                var t = !0,
                                                    e = 0;
                                                for (var i in this.ranges) {
                                                    if (this.timePicker) {
                                                        var s = this.timePickerSeconds ? "YYYY-MM-DD HH:mm:ss" : "YYYY-MM-DD HH:mm";
                                                        if (this.startDate.format(s) == this.ranges[i][0].format(s) && this.endDate.format(s) == this.ranges[i][1].format(s)) {
                                                            (t = !1),
                                                                (this.chosenLabel = this.container
                                                                    .find(".ranges li:eq(" + e + ")")
                                                                    .addClass("active")
                                                                    .attr("data-range-key"));
                                                            break;
                                                        }
                                                    } else if (this.startDate.format("YYYY-MM-DD") == this.ranges[i][0].format("YYYY-MM-DD") && this.endDate.format("YYYY-MM-DD") == this.ranges[i][1].format("YYYY-MM-DD")) {
                                                        (t = !1),
                                                            (this.chosenLabel = this.container
                                                                .find(".ranges li:eq(" + e + ")")
                                                                .addClass("active")
                                                                .attr("data-range-key"));
                                                        break;
                                                    }
                                                    e++;
                                                }
                                                t && (this.showCustomRangeLabel ? (this.chosenLabel = this.container.find(".ranges li:last").addClass("active").attr("data-range-key")) : (this.chosenLabel = null), this.showCalendars());
                                            },
                                            clickApply: function (t) {
                                                this.hide(), this.element.trigger("apply.daterangepicker", this);
                                            },
                                            clickCancel: function (t) {
                                                (this.startDate = this.oldStartDate), (this.endDate = this.oldEndDate), this.hide(), this.element.trigger("cancel.daterangepicker", this);
                                            },
                                            monthOrYearChanged: function (t) {
                                                var i = e(t.target).closest(".drp-calendar").hasClass("left"),
                                                    s = i ? "left" : "right",
                                                    n = this.container.find(".drp-calendar." + s),
                                                    o = parseInt(n.find(".monthselect").val(), 10),
                                                    a = n.find(".yearselect").val();
                                                i || ((a < this.startDate.year() || (a == this.startDate.year() && o < this.startDate.month())) && ((o = this.startDate.month()), (a = this.startDate.year()))),
                                                    this.minDate && (a < this.minDate.year() || (a == this.minDate.year() && o < this.minDate.month())) && ((o = this.minDate.month()), (a = this.minDate.year())),
                                                    this.maxDate && (a > this.maxDate.year() || (a == this.maxDate.year() && o > this.maxDate.month())) && ((o = this.maxDate.month()), (a = this.maxDate.year())),
                                                    i
                                                        ? (this.leftCalendar.month.month(o).year(a), this.linkedCalendars && (this.rightCalendar.month = this.leftCalendar.month.clone().add(1, "month")))
                                                        : (this.rightCalendar.month.month(o).year(a), this.linkedCalendars && (this.leftCalendar.month = this.rightCalendar.month.clone().subtract(1, "month"))),
                                                    this.updateCalendars();
                                            },
                                            timeChanged: function (t) {
                                                var i = e(t.target).closest(".drp-calendar"),
                                                    s = i.hasClass("left"),
                                                    n = parseInt(i.find(".hourselect").val(), 10),
                                                    o = parseInt(i.find(".minuteselect").val(), 10);
                                                isNaN(o) && (o = parseInt(i.find(".minuteselect option:last").val(), 10));
                                                var a = this.timePickerSeconds ? parseInt(i.find(".secondselect").val(), 10) : 0;
                                                if (!this.timePicker24Hour) {
                                                    var r = i.find(".ampmselect").val();
                                                    "PM" === r && n < 12 && (n += 12), "AM" === r && 12 === n && (n = 0);
                                                }
                                                if (s) {
                                                    var l = this.startDate.clone();
                                                    l.hour(n),
                                                        l.minute(o),
                                                        l.second(a),
                                                        this.setStartDate(l),
                                                        this.singleDatePicker
                                                            ? (this.endDate = this.startDate.clone())
                                                            : this.endDate && this.endDate.format("YYYY-MM-DD") == l.format("YYYY-MM-DD") && this.endDate.isBefore(l) && this.setEndDate(l.clone());
                                                } else if (this.endDate) {
                                                    var c = this.endDate.clone();
                                                    c.hour(n), c.minute(o), c.second(a), this.setEndDate(c);
                                                }
                                                this.updateCalendars(), this.updateFormInputs(), this.renderTimePicker("left"), this.renderTimePicker("right");
                                            },
                                            elementChanged: function () {
                                                if (this.element.is("input") && this.element.val().length) {
                                                    var e = this.element.val().split(this.locale.separator),
                                                        i = null,
                                                        s = null;
                                                    2 === e.length && ((i = t(e[0], this.locale.format)), (s = t(e[1], this.locale.format))),
                                                        (this.singleDatePicker || null === i || null === s) && (s = i = t(this.element.val(), this.locale.format)),
                                                        i.isValid() && s.isValid() && (this.setStartDate(i), this.setEndDate(s), this.updateView());
                                                }
                                            },
                                            keydown: function (t) {
                                                (9 !== t.keyCode && 13 !== t.keyCode) || this.hide(), 27 === t.keyCode && (t.preventDefault(), t.stopPropagation(), this.hide());
                                            },
                                            updateElement: function () {
                                                if (this.element.is("input") && this.autoUpdateInput) {
                                                    var t = this.startDate.format(this.locale.format);
                                                    this.singleDatePicker || (t += this.locale.separator + this.endDate.format(this.locale.format)), t !== this.element.val() && this.element.val(t).trigger("change");
                                                }
                                            },
                                            remove: function () {
                                                this.container.remove(), this.element.off(".daterangepicker"), this.element.removeData();
                                            },
                                        }),
                                        (e.fn.daterangepicker = function (t, s) {
                                            var n = e.extend(!0, {}, e.fn.daterangepicker.defaultOptions, t);
                                            return (
                                                this.each(function () {
                                                    var t = e(this);
                                                    t.data("daterangepicker") && t.data("daterangepicker").remove(), t.data("daterangepicker", new i(t, n, s));
                                                }),
                                                this
                                            );
                                        }),
                                        i
                                    );
                                })(t, e)
                            );
                        }.apply(e, s)) || (t.exports = n);
            },
            6942: (t, e) => {
                var i;
                !(function () {
                    "use strict";
                    var s = {}.hasOwnProperty;
                    function n() {
                        for (var t = "", e = 0; e < arguments.length; e++) {
                            var i = arguments[e];
                            i && (t = a(t, o(i)));
                        }
                        return t;
                    }
                    function o(t) {
                        if ("string" == typeof t || "number" == typeof t) return t;
                        if ("object" != typeof t) return "";
                        if (Array.isArray(t)) return n.apply(null, t);
                        if (t.toString !== Object.prototype.toString && !t.toString.toString().includes("[native code]")) return t.toString();
                        var e = "";
                        for (var i in t) s.call(t, i) && t[i] && (e = a(e, i));
                        return e;
                    }
                    function a(t, e) {
                        return e ? (t ? t + " " + e : t + e) : t;
                    }
                    t.exports
                        ? ((n.default = n), (t.exports = n))
                        : void 0 ===
                              (i = function () {
                                  return n;
                              }.apply(e, [])) || (t.exports = i);
                })();
            },
            6986: (t, e, i) => {
                "use strict";
                function s(t, e) {
                    var i = null == t ? null : ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
                    if (null != i) {
                        var s,
                            n,
                            o,
                            a,
                            r = [],
                            l = !0,
                            c = !1;
                        try {
                            if (((o = (i = i.call(t)).next), 0 === e)) {
                                if (Object(i) !== i) return;
                                l = !1;
                            } else for (; !(l = (s = o.call(i)).done) && (r.push(s.value), r.length !== e); l = !0);
                        } catch (t) {
                            (c = !0), (n = t);
                        } finally {
                            try {
                                if (!l && null != i.return && ((a = i.return()), Object(a) !== a)) return;
                            } finally {
                                if (c) throw n;
                            }
                        }
                        return r;
                    }
                }
                i.d(e, { A: () => s });
            },
            7003: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => s });
                var s = i(1609).useLayoutEffect;
            },
            7008: (t, e, i) => {
                "use strict";
                i.d(e, { m_: () => z });
                var s = i(1609),
                    n = i(8491),
                    o = i(6942);
                const a = { core: !1, base: !1 };
                function r({ css: t, id: e = "react-tooltip-base-styles", type: i = "base", ref: s }) {
                    var n, o;
                    if (!t || "undefined" == typeof document || a[i]) return;
                    if ("core" === i && "undefined" != typeof process && (null === (n = null === process || void 0 === process ? void 0 : process.env) || void 0 === n ? void 0 : n.REACT_TOOLTIP_DISABLE_CORE_STYLES)) return;
                    if ("base" !== i && "undefined" != typeof process && (null === (o = null === process || void 0 === process ? void 0 : process.env) || void 0 === o ? void 0 : o.REACT_TOOLTIP_DISABLE_BASE_STYLES)) return;
                    "core" === i && (e = "react-tooltip-core-styles"), s || (s = {});
                    const { insertAt: r } = s;
                    if (document.getElementById(e)) return;
                    const l = document.head || document.getElementsByTagName("head")[0],
                        c = document.createElement("style");
                    (c.id = e), (c.type = "text/css"), "top" === r && l.firstChild ? l.insertBefore(c, l.firstChild) : l.appendChild(c), c.styleSheet ? (c.styleSheet.cssText = t) : c.appendChild(document.createTextNode(t)), (a[i] = !0);
                }
                const l = async ({
                        elementReference: t = null,
                        tooltipReference: e = null,
                        tooltipArrowReference: i = null,
                        place: s = "top",
                        offset: o = 10,
                        strategy: a = "absolute",
                        middlewares: r = [(0, n.cY)(Number(o)), (0, n.UU)({ fallbackAxisSideDirection: "start" }), (0, n.BN)({ padding: 5 })],
                        border: l,
                        arrowSize: c = 8,
                    }) => {
                        if (!t) return { tooltipStyles: {}, tooltipArrowStyles: {}, place: s };
                        if (null === e) return { tooltipStyles: {}, tooltipArrowStyles: {}, place: s };
                        const d = r;
                        return i
                            ? (d.push((0, n.UE)({ element: i, padding: 5 })),
                              (0, n.rD)(t, e, { placement: s, strategy: a, middleware: d }).then(({ x: t, y: e, placement: i, middlewareData: s }) => {
                                  var n, o;
                                  const a = { left: `${t}px`, top: `${e}px`, border: l },
                                      { x: r, y: d } = null !== (n = s.arrow) && void 0 !== n ? n : { x: 0, y: 0 },
                                      h = null !== (o = { top: "bottom", right: "left", bottom: "top", left: "right" }[i.split("-")[0]]) && void 0 !== o ? o : "bottom",
                                      u = l && { borderBottom: l, borderRight: l };
                                  let p = 0;
                                  if (l) {
                                      const t = `${l}`.match(/(\d+)px/);
                                      p = (null == t ? void 0 : t[1]) ? Number(t[1]) : 1;
                                  }
                                  return { tooltipStyles: a, tooltipArrowStyles: { left: null != r ? `${r}px` : "", top: null != d ? `${d}px` : "", right: "", bottom: "", ...u, [h]: `-${c / 2 + p}px` }, place: i };
                              }))
                            : (0, n.rD)(t, e, { placement: "bottom", strategy: a, middleware: d }).then(({ x: t, y: e, placement: i }) => ({ tooltipStyles: { left: `${t}px`, top: `${e}px` }, tooltipArrowStyles: {}, place: i }));
                    },
                    c = (t, e) => !("CSS" in window && "supports" in window.CSS) || window.CSS.supports(t, e),
                    d = (t, e, i) => {
                        let s = null;
                        const n = function (...n) {
                            const o = () => {
                                (s = null), i || t.apply(this, n);
                            };
                            i && !s && (t.apply(this, n), (s = setTimeout(o, e))), i || (s && clearTimeout(s), (s = setTimeout(o, e)));
                        };
                        return (
                            (n.cancel = () => {
                                s && (clearTimeout(s), (s = null));
                            }),
                            n
                        );
                    },
                    h = (t) => null !== t && !Array.isArray(t) && "object" == typeof t,
                    u = (t, e) => {
                        if (t === e) return !0;
                        if (Array.isArray(t) && Array.isArray(e)) return t.length === e.length && t.every((t, i) => u(t, e[i]));
                        if (Array.isArray(t) !== Array.isArray(e)) return !1;
                        if (!h(t) || !h(e)) return t === e;
                        const i = Object.keys(t),
                            s = Object.keys(e);
                        return i.length === s.length && i.every((i) => u(t[i], e[i]));
                    },
                    p = (t) => {
                        if (!(t instanceof HTMLElement || t instanceof SVGElement)) return !1;
                        const e = getComputedStyle(t);
                        return ["overflow", "overflow-x", "overflow-y"].some((t) => {
                            const i = e.getPropertyValue(t);
                            return "auto" === i || "scroll" === i;
                        });
                    },
                    m = (t) => {
                        if (!t) return null;
                        let e = t.parentElement;
                        for (; e; ) {
                            if (p(e)) return e;
                            e = e.parentElement;
                        }
                        return document.scrollingElement || document.documentElement;
                    },
                    f = "undefined" != typeof window ? s.useLayoutEffect : s.useEffect,
                    g = (t) => {
                        t.current && (clearTimeout(t.current), (t.current = null));
                    },
                    b = { anchorRefs: new Set(), activeAnchor: { current: null }, attach: () => {}, detach: () => {}, setActiveAnchor: () => {} },
                    x = (0, s.createContext)({ getTooltipData: () => b });
                function v(t = "DEFAULT_TOOLTIP_ID") {
                    return (0, s.useContext)(x).getTooltipData(t);
                }
                var y = {
                        tooltip: "core-styles-module_tooltip__3vRRp",
                        fixed: "core-styles-module_fixed__pcSol",
                        arrow: "core-styles-module_arrow__cvMwQ",
                        noArrow: "core-styles-module_noArrow__xock6",
                        clickable: "core-styles-module_clickable__ZuTTB",
                        show: "core-styles-module_show__Nt9eE",
                        closing: "core-styles-module_closing__sGnxF",
                    },
                    _ = {
                        tooltip: "styles-module_tooltip__mnnfp",
                        arrow: "styles-module_arrow__K0L3T",
                        dark: "styles-module_dark__xNqje",
                        light: "styles-module_light__Z6W-X",
                        success: "styles-module_success__A2AKt",
                        warning: "styles-module_warning__SCK0X",
                        error: "styles-module_error__JvumD",
                        info: "styles-module_info__BWdHW",
                    };
                const C = ({
                        forwardRef: t,
                        id: e,
                        className: i,
                        classNameArrow: a,
                        variant: r = "dark",
                        anchorId: c,
                        anchorSelect: h,
                        place: p = "top",
                        offset: b = 10,
                        events: x = ["hover"],
                        openOnClick: C = !1,
                        positionStrategy: w = "absolute",
                        middlewares: z,
                        wrapper: k,
                        delayShow: M = 0,
                        delayHide: j = 0,
                        float: S = !1,
                        hidden: A = !1,
                        noArrow: L = !1,
                        clickable: D = !1,
                        closeOnEsc: T = !1,
                        closeOnScroll: E = !1,
                        closeOnResize: O = !1,
                        openEvents: P,
                        closeEvents: I,
                        globalCloseEvents: N,
                        imperativeModeOnly: R,
                        style: V,
                        position: F,
                        afterShow: B,
                        afterHide: H,
                        disableTooltip: W,
                        content: Y,
                        contentWrapperRef: $,
                        isOpen: U,
                        defaultIsOpen: Z = !1,
                        setIsOpen: G,
                        activeAnchor: K,
                        setActiveAnchor: q,
                        border: X,
                        opacity: J,
                        arrowColor: Q,
                        arrowSize: tt = 8,
                        role: et = "tooltip",
                    }) => {
                        var it;
                        const st = (0, s.useRef)(null),
                            nt = (0, s.useRef)(null),
                            ot = (0, s.useRef)(null),
                            at = (0, s.useRef)(null),
                            rt = (0, s.useRef)(null),
                            [lt, ct] = (0, s.useState)({ tooltipStyles: {}, tooltipArrowStyles: {}, place: p }),
                            [dt, ht] = (0, s.useState)(!1),
                            [ut, pt] = (0, s.useState)(!1),
                            [mt, ft] = (0, s.useState)(null),
                            gt = (0, s.useRef)(!1),
                            bt = (0, s.useRef)(null),
                            { anchorRefs: xt, setActiveAnchor: vt } = v(e),
                            yt = (0, s.useRef)(!1),
                            [_t, Ct] = (0, s.useState)([]),
                            wt = (0, s.useRef)(!1),
                            zt = C || x.includes("click"),
                            kt = zt || (null == P ? void 0 : P.click) || (null == P ? void 0 : P.dblclick) || (null == P ? void 0 : P.mousedown),
                            Mt = P ? { ...P } : { mouseover: !0, focus: !0, mouseenter: !1, click: !1, dblclick: !1, mousedown: !1 };
                        !P && zt && Object.assign(Mt, { mouseenter: !1, focus: !1, mouseover: !1, click: !0 });
                        const jt = I ? { ...I } : { mouseout: !0, blur: !0, mouseleave: !1, click: !1, dblclick: !1, mouseup: !1 };
                        !I && zt && Object.assign(jt, { mouseleave: !1, blur: !1, mouseout: !1 });
                        const St = N ? { ...N } : { escape: T || !1, scroll: E || !1, resize: O || !1, clickOutsideAnchor: kt || !1 };
                        R &&
                            (Object.assign(Mt, { mouseover: !1, focus: !1, mouseenter: !1, click: !1, dblclick: !1, mousedown: !1 }),
                            Object.assign(jt, { mouseout: !1, blur: !1, mouseleave: !1, click: !1, dblclick: !1, mouseup: !1 }),
                            Object.assign(St, { escape: !1, scroll: !1, resize: !1, clickOutsideAnchor: !1 })),
                            f(
                                () => (
                                    (wt.current = !0),
                                    () => {
                                        wt.current = !1;
                                    }
                                ),
                                []
                            );
                        const At = (t) => {
                            wt.current &&
                                (t && pt(!0),
                                setTimeout(() => {
                                    wt.current && (null == G || G(t), void 0 === U && ht(t));
                                }, 10));
                        };
                        (0, s.useEffect)(() => {
                            if (void 0 === U) return () => null;
                            U && pt(!0);
                            const t = setTimeout(() => {
                                ht(U);
                            }, 10);
                            return () => {
                                clearTimeout(t);
                            };
                        }, [U]),
                            (0, s.useEffect)(() => {
                                if (dt !== gt.current)
                                    if ((g(rt), (gt.current = dt), dt)) null == B || B();
                                    else {
                                        const t = (() => {
                                            const t = getComputedStyle(document.body)
                                                .getPropertyValue("--rt-transition-show-delay")
                                                .match(/^([\d.]+)(ms|s)$/);
                                            if (!t) return 0;
                                            const [, e, i] = t;
                                            return Number(e) * ("ms" === i ? 1 : 1e3);
                                        })();
                                        rt.current = setTimeout(() => {
                                            pt(!1), ft(null), null == H || H();
                                        }, t + 25);
                                    }
                            }, [dt]);
                        const Lt = (t) => {
                                ct((e) => (u(e, t) ? e : t));
                            },
                            Dt = (t = M) => {
                                g(ot),
                                    ut
                                        ? At(!0)
                                        : (ot.current = setTimeout(() => {
                                              At(!0);
                                          }, t));
                            },
                            Tt = (t = j) => {
                                g(at),
                                    (at.current = setTimeout(() => {
                                        yt.current || At(!1);
                                    }, t));
                            },
                            Et = (t) => {
                                var e;
                                if (!t) return;
                                const i = null !== (e = t.currentTarget) && void 0 !== e ? e : t.target;
                                if (!(null == i ? void 0 : i.isConnected)) return q(null), void vt({ current: null });
                                M ? Dt() : At(!0), q(i), vt({ current: i }), g(at);
                            },
                            Ot = () => {
                                D ? Tt(j || 100) : j ? Tt() : At(!1), g(ot);
                            },
                            Pt = ({ x: t, y: e }) => {
                                var i;
                                const s = { getBoundingClientRect: () => ({ x: t, y: e, width: 0, height: 0, top: e, left: t, right: t, bottom: e }) };
                                l({
                                    place: null !== (i = null == mt ? void 0 : mt.place) && void 0 !== i ? i : p,
                                    offset: b,
                                    elementReference: s,
                                    tooltipReference: st.current,
                                    tooltipArrowReference: nt.current,
                                    strategy: w,
                                    middlewares: z,
                                    border: X,
                                    arrowSize: tt,
                                }).then((t) => {
                                    Lt(t);
                                });
                            },
                            It = (t) => {
                                if (!t) return;
                                const e = t,
                                    i = { x: e.clientX, y: e.clientY };
                                Pt(i), (bt.current = i);
                            },
                            Nt = (t) => {
                                var e;
                                if (!dt) return;
                                const i = t.target;
                                i.isConnected && ((null === (e = st.current) || void 0 === e ? void 0 : e.contains(i)) || [document.querySelector(`[id='${c}']`), ..._t].some((t) => (null == t ? void 0 : t.contains(i))) || (At(!1), g(ot)));
                            },
                            Rt = d(Et, 50, !0),
                            Vt = d(Ot, 50, !0),
                            Ft = (t) => {
                                Vt.cancel(), Rt(t);
                            },
                            Bt = () => {
                                Rt.cancel(), Vt();
                            },
                            Ht = (0, s.useCallback)(() => {
                                var t, e;
                                const i = null !== (t = null == mt ? void 0 : mt.position) && void 0 !== t ? t : F;
                                i
                                    ? Pt(i)
                                    : S
                                    ? bt.current && Pt(bt.current)
                                    : (null == K ? void 0 : K.isConnected) &&
                                      l({
                                          place: null !== (e = null == mt ? void 0 : mt.place) && void 0 !== e ? e : p,
                                          offset: b,
                                          elementReference: K,
                                          tooltipReference: st.current,
                                          tooltipArrowReference: nt.current,
                                          strategy: w,
                                          middlewares: z,
                                          border: X,
                                          arrowSize: tt,
                                      }).then((t) => {
                                          wt.current && Lt(t);
                                      });
                            }, [dt, K, Y, V, p, null == mt ? void 0 : mt.place, b, w, F, null == mt ? void 0 : mt.position, S, tt]);
                        (0, s.useEffect)(() => {
                            var t, e;
                            const i = new Set(xt);
                            _t.forEach((t) => {
                                (null == W ? void 0 : W(t)) || i.add({ current: t });
                            });
                            const s = document.querySelector(`[id='${c}']`);
                            s && !(null == W ? void 0 : W(s)) && i.add({ current: s });
                            const o = () => {
                                    At(!1);
                                },
                                a = m(K),
                                r = m(st.current);
                            St.scroll && (window.addEventListener("scroll", o), null == a || a.addEventListener("scroll", o), null == r || r.addEventListener("scroll", o));
                            let l = null;
                            St.resize ? window.addEventListener("resize", o) : K && st.current && (l = (0, n.ll)(K, st.current, Ht, { ancestorResize: !0, elementResize: !0, layoutShift: !0 }));
                            const d = (t) => {
                                "Escape" === t.key && At(!1);
                            };
                            St.escape && window.addEventListener("keydown", d), St.clickOutsideAnchor && window.addEventListener("click", Nt);
                            const h = [],
                                u = (t) => Boolean((null == t ? void 0 : t.target) && (null == K ? void 0 : K.contains(t.target))),
                                p = (t) => {
                                    (dt && u(t)) || Et(t);
                                },
                                f = (t) => {
                                    dt && u(t) && Ot();
                                },
                                g = ["mouseover", "mouseout", "mouseenter", "mouseleave", "focus", "blur"],
                                b = ["click", "dblclick", "mousedown", "mouseup"];
                            Object.entries(Mt).forEach(([t, e]) => {
                                e && (g.includes(t) ? h.push({ event: t, listener: Ft }) : b.includes(t) && h.push({ event: t, listener: p }));
                            }),
                                Object.entries(jt).forEach(([t, e]) => {
                                    e && (g.includes(t) ? h.push({ event: t, listener: Bt }) : b.includes(t) && h.push({ event: t, listener: f }));
                                }),
                                S && h.push({ event: "pointermove", listener: It });
                            const x = () => {
                                    yt.current = !0;
                                },
                                v = () => {
                                    (yt.current = !1), Ot();
                                },
                                y = D && (jt.mouseout || jt.mouseleave);
                            return (
                                y && (null === (t = st.current) || void 0 === t || t.addEventListener("mouseover", x), null === (e = st.current) || void 0 === e || e.addEventListener("mouseout", v)),
                                h.forEach(({ event: t, listener: e }) => {
                                    i.forEach((i) => {
                                        var s;
                                        null === (s = i.current) || void 0 === s || s.addEventListener(t, e);
                                    });
                                }),
                                () => {
                                    var t, e;
                                    St.scroll && (window.removeEventListener("scroll", o), null == a || a.removeEventListener("scroll", o), null == r || r.removeEventListener("scroll", o)),
                                        St.resize ? window.removeEventListener("resize", o) : null == l || l(),
                                        St.clickOutsideAnchor && window.removeEventListener("click", Nt),
                                        St.escape && window.removeEventListener("keydown", d),
                                        y && (null === (t = st.current) || void 0 === t || t.removeEventListener("mouseover", x), null === (e = st.current) || void 0 === e || e.removeEventListener("mouseout", v)),
                                        h.forEach(({ event: t, listener: e }) => {
                                            i.forEach((i) => {
                                                var s;
                                                null === (s = i.current) || void 0 === s || s.removeEventListener(t, e);
                                            });
                                        });
                                }
                            );
                        }, [K, Ht, ut, xt, _t, P, I, N, zt, M, j]),
                            (0, s.useEffect)(() => {
                                var t, i;
                                let s = null !== (i = null !== (t = null == mt ? void 0 : mt.anchorSelect) && void 0 !== t ? t : h) && void 0 !== i ? i : "";
                                !s && e && (s = `[data-tooltip-id='${e.replace(/'/g, "\\'")}']`);
                                const n = new MutationObserver((t) => {
                                    const i = [],
                                        n = [];
                                    t.forEach((t) => {
                                        if (
                                            ("attributes" === t.type && "data-tooltip-id" === t.attributeName && (t.target.getAttribute("data-tooltip-id") === e ? i.push(t.target) : t.oldValue === e && n.push(t.target)),
                                            "childList" === t.type)
                                        ) {
                                            if (K) {
                                                const e = [...t.removedNodes].filter((t) => 1 === t.nodeType);
                                                if (s)
                                                    try {
                                                        n.push(...e.filter((t) => t.matches(s))), n.push(...e.flatMap((t) => [...t.querySelectorAll(s)]));
                                                    } catch (t) {}
                                                e.some((t) => {
                                                    var e;
                                                    return !!(null === (e = null == t ? void 0 : t.contains) || void 0 === e ? void 0 : e.call(t, K)) && (pt(!1), At(!1), q(null), g(ot), g(at), !0);
                                                });
                                            }
                                            if (s)
                                                try {
                                                    const e = [...t.addedNodes].filter((t) => 1 === t.nodeType);
                                                    i.push(...e.filter((t) => t.matches(s))), i.push(...e.flatMap((t) => [...t.querySelectorAll(s)]));
                                                } catch (t) {}
                                        }
                                    }),
                                        (i.length || n.length) && Ct((t) => [...t.filter((t) => !n.includes(t)), ...i]);
                                });
                                return (
                                    n.observe(document.body, { childList: !0, subtree: !0, attributes: !0, attributeFilter: ["data-tooltip-id"], attributeOldValue: !0 }),
                                    () => {
                                        n.disconnect();
                                    }
                                );
                            }, [e, h, null == mt ? void 0 : mt.anchorSelect, K]),
                            (0, s.useEffect)(() => {
                                Ht();
                            }, [Ht]),
                            (0, s.useEffect)(() => {
                                if (!(null == $ ? void 0 : $.current)) return () => null;
                                const t = new ResizeObserver(() => {
                                    setTimeout(() => Ht());
                                });
                                return (
                                    t.observe($.current),
                                    () => {
                                        t.disconnect();
                                    }
                                );
                            }, [Y, null == $ ? void 0 : $.current]),
                            (0, s.useEffect)(() => {
                                var t;
                                const e = document.querySelector(`[id='${c}']`),
                                    i = [..._t, e];
                                (K && i.includes(K)) || q(null !== (t = _t[0]) && void 0 !== t ? t : e);
                            }, [c, _t, K]),
                            (0, s.useEffect)(
                                () => (
                                    Z && At(!0),
                                    () => {
                                        g(ot), g(at);
                                    }
                                ),
                                []
                            ),
                            (0, s.useEffect)(() => {
                                var t;
                                let i = null !== (t = null == mt ? void 0 : mt.anchorSelect) && void 0 !== t ? t : h;
                                if ((!i && e && (i = `[data-tooltip-id='${e.replace(/'/g, "\\'")}']`), i))
                                    try {
                                        const t = Array.from(document.querySelectorAll(i));
                                        Ct(t);
                                    } catch (t) {
                                        Ct([]);
                                    }
                            }, [e, h, null == mt ? void 0 : mt.anchorSelect]),
                            (0, s.useEffect)(() => {
                                ot.current && (g(ot), Dt(M));
                            }, [M]);
                        const Wt = null !== (it = null == mt ? void 0 : mt.content) && void 0 !== it ? it : Y,
                            Yt = dt && Object.keys(lt.tooltipStyles).length > 0;
                        return (
                            (0, s.useImperativeHandle)(t, () => ({
                                open: (t) => {
                                    if (null == t ? void 0 : t.anchorSelect)
                                        try {
                                            document.querySelector(t.anchorSelect);
                                        } catch (e) {
                                            return void console.warn(`[react-tooltip] "${t.anchorSelect}" is not a valid CSS selector`);
                                        }
                                    ft(null != t ? t : null), (null == t ? void 0 : t.delay) ? Dt(t.delay) : At(!0);
                                },
                                close: (t) => {
                                    (null == t ? void 0 : t.delay) ? Tt(t.delay) : At(!1);
                                },
                                activeAnchor: K,
                                place: lt.place,
                                isOpen: Boolean(ut && !A && Wt && Yt),
                            })),
                            ut && !A && Wt
                                ? s.createElement(
                                      k,
                                      {
                                          id: e,
                                          role: et,
                                          className: o(
                                              "react-tooltip",
                                              y.tooltip,
                                              _.tooltip,
                                              _[r],
                                              i,
                                              `react-tooltip__place-${lt.place}`,
                                              y[Yt ? "show" : "closing"],
                                              Yt ? "react-tooltip__show" : "react-tooltip__closing",
                                              "fixed" === w && y.fixed,
                                              D && y.clickable
                                          ),
                                          onTransitionEnd: (t) => {
                                              g(rt), dt || "opacity" !== t.propertyName || (pt(!1), ft(null), null == H || H());
                                          },
                                          style: { ...V, ...lt.tooltipStyles, opacity: void 0 !== J && Yt ? J : void 0 },
                                          ref: st,
                                      },
                                      Wt,
                                      s.createElement(k, {
                                          className: o("react-tooltip-arrow", y.arrow, _.arrow, a, L && y.noArrow),
                                          style: { ...lt.tooltipArrowStyles, background: Q ? `linear-gradient(to right bottom, transparent 50%, ${Q} 50%)` : void 0, "--rt-arrow-size": `${tt}px` },
                                          ref: nt,
                                      })
                                  )
                                : null
                        );
                    },
                    w = ({ content: t }) => s.createElement("span", { dangerouslySetInnerHTML: { __html: t } }),
                    z = s.forwardRef(
                        (
                            {
                                id: t,
                                anchorId: e,
                                anchorSelect: i,
                                content: n,
                                html: a,
                                render: r,
                                className: l,
                                classNameArrow: d,
                                variant: h = "dark",
                                place: u = "top",
                                offset: p = 10,
                                wrapper: m = "div",
                                children: f = null,
                                events: g = ["hover"],
                                openOnClick: b = !1,
                                positionStrategy: x = "absolute",
                                middlewares: y,
                                delayShow: _ = 0,
                                delayHide: z = 0,
                                float: k = !1,
                                hidden: M = !1,
                                noArrow: j = !1,
                                clickable: S = !1,
                                closeOnEsc: A = !1,
                                closeOnScroll: L = !1,
                                closeOnResize: D = !1,
                                openEvents: T,
                                closeEvents: E,
                                globalCloseEvents: O,
                                imperativeModeOnly: P = !1,
                                style: I,
                                position: N,
                                isOpen: R,
                                defaultIsOpen: V = !1,
                                disableStyleInjection: F = !1,
                                border: B,
                                opacity: H,
                                arrowColor: W,
                                arrowSize: Y,
                                setIsOpen: $,
                                afterShow: U,
                                afterHide: Z,
                                disableTooltip: G,
                                role: K = "tooltip",
                            },
                            q
                        ) => {
                            const [X, J] = (0, s.useState)(n),
                                [Q, tt] = (0, s.useState)(a),
                                [et, it] = (0, s.useState)(u),
                                [st, nt] = (0, s.useState)(h),
                                [ot, at] = (0, s.useState)(p),
                                [rt, lt] = (0, s.useState)(_),
                                [ct, dt] = (0, s.useState)(z),
                                [ht, ut] = (0, s.useState)(k),
                                [pt, mt] = (0, s.useState)(M),
                                [ft, gt] = (0, s.useState)(m),
                                [bt, xt] = (0, s.useState)(g),
                                [vt, yt] = (0, s.useState)(x),
                                [_t, Ct] = (0, s.useState)(null),
                                [wt, zt] = (0, s.useState)(null),
                                kt = (0, s.useRef)(F),
                                { anchorRefs: Mt, activeAnchor: jt } = v(t),
                                St = (t) =>
                                    null == t
                                        ? void 0
                                        : t.getAttributeNames().reduce((e, i) => {
                                              var s;
                                              return i.startsWith("data-tooltip-") && (e[i.replace(/^data-tooltip-/, "")] = null !== (s = null == t ? void 0 : t.getAttribute(i)) && void 0 !== s ? s : null), e;
                                          }, {}),
                                At = (t) => {
                                    const e = {
                                        place: (t) => {
                                            var e;
                                            it(null !== (e = t) && void 0 !== e ? e : u);
                                        },
                                        content: (t) => {
                                            J(null != t ? t : n);
                                        },
                                        html: (t) => {
                                            tt(null != t ? t : a);
                                        },
                                        variant: (t) => {
                                            var e;
                                            nt(null !== (e = t) && void 0 !== e ? e : h);
                                        },
                                        offset: (t) => {
                                            at(null === t ? p : Number(t));
                                        },
                                        wrapper: (t) => {
                                            var e;
                                            gt(null !== (e = t) && void 0 !== e ? e : m);
                                        },
                                        events: (t) => {
                                            const e = null == t ? void 0 : t.split(" ");
                                            xt(null != e ? e : g);
                                        },
                                        "position-strategy": (t) => {
                                            var e;
                                            yt(null !== (e = t) && void 0 !== e ? e : x);
                                        },
                                        "delay-show": (t) => {
                                            lt(null === t ? _ : Number(t));
                                        },
                                        "delay-hide": (t) => {
                                            dt(null === t ? z : Number(t));
                                        },
                                        float: (t) => {
                                            ut(null === t ? k : "true" === t);
                                        },
                                        hidden: (t) => {
                                            mt(null === t ? M : "true" === t);
                                        },
                                        "class-name": (t) => {
                                            Ct(t);
                                        },
                                    };
                                    Object.values(e).forEach((t) => t(null)),
                                        Object.entries(t).forEach(([t, i]) => {
                                            var s;
                                            null === (s = e[t]) || void 0 === s || s.call(e, i);
                                        });
                                };
                            (0, s.useEffect)(() => {
                                J(n);
                            }, [n]),
                                (0, s.useEffect)(() => {
                                    tt(a);
                                }, [a]),
                                (0, s.useEffect)(() => {
                                    it(u);
                                }, [u]),
                                (0, s.useEffect)(() => {
                                    nt(h);
                                }, [h]),
                                (0, s.useEffect)(() => {
                                    at(p);
                                }, [p]),
                                (0, s.useEffect)(() => {
                                    lt(_);
                                }, [_]),
                                (0, s.useEffect)(() => {
                                    dt(z);
                                }, [z]),
                                (0, s.useEffect)(() => {
                                    ut(k);
                                }, [k]),
                                (0, s.useEffect)(() => {
                                    mt(M);
                                }, [M]),
                                (0, s.useEffect)(() => {
                                    yt(x);
                                }, [x]),
                                (0, s.useEffect)(() => {
                                    kt.current !== F && console.warn("[react-tooltip] Do not change `disableStyleInjection` dynamically.");
                                }, [F]),
                                (0, s.useEffect)(() => {
                                    "undefined" != typeof window && window.dispatchEvent(new CustomEvent("react-tooltip-inject-styles", { detail: { disableCore: "core" === F, disableBase: F } }));
                                }, []),
                                (0, s.useEffect)(() => {
                                    var s;
                                    const n = new Set(Mt);
                                    let o = i;
                                    if ((!o && t && (o = `[data-tooltip-id='${t.replace(/'/g, "\\'")}']`), o))
                                        try {
                                            document.querySelectorAll(o).forEach((t) => {
                                                n.add({ current: t });
                                            });
                                        } catch (s) {
                                            console.warn(`[react-tooltip] "${o}" is not a valid CSS selector`);
                                        }
                                    const a = document.querySelector(`[id='${e}']`);
                                    if ((a && n.add({ current: a }), !n.size)) return () => null;
                                    const r = null !== (s = null != wt ? wt : a) && void 0 !== s ? s : jt.current,
                                        l = new MutationObserver((t) => {
                                            t.forEach((t) => {
                                                var e;
                                                if (!r || "attributes" !== t.type || !(null === (e = t.attributeName) || void 0 === e ? void 0 : e.startsWith("data-tooltip-"))) return;
                                                const i = St(r);
                                                At(i);
                                            });
                                        }),
                                        c = { attributes: !0, childList: !1, subtree: !1 };
                                    if (r) {
                                        const t = St(r);
                                        At(t), l.observe(r, c);
                                    }
                                    return () => {
                                        l.disconnect();
                                    };
                                }, [Mt, jt, wt, e, i]),
                                (0, s.useEffect)(() => {
                                    (null == I ? void 0 : I.border) && console.warn("[react-tooltip] Do not set `style.border`. Use `border` prop instead."),
                                        B && !c("border", `${B}`) && console.warn(`[react-tooltip] "${B}" is not a valid \`border\`.`),
                                        (null == I ? void 0 : I.opacity) && console.warn("[react-tooltip] Do not set `style.opacity`. Use `opacity` prop instead."),
                                        H && !c("opacity", `${H}`) && console.warn(`[react-tooltip] "${H}" is not a valid \`opacity\`.`);
                                }, []);
                            let Lt = f;
                            const Dt = (0, s.useRef)(null);
                            if (r) {
                                const t = r({ content: (null == wt ? void 0 : wt.getAttribute("data-tooltip-content")) || X || null, activeAnchor: wt });
                                Lt = t ? s.createElement("div", { ref: Dt, className: "react-tooltip-content-wrapper" }, t) : null;
                            } else X && (Lt = X);
                            Q && (Lt = s.createElement(w, { content: Q }));
                            const Tt = {
                                forwardRef: q,
                                id: t,
                                anchorId: e,
                                anchorSelect: i,
                                className: o(l, _t),
                                classNameArrow: d,
                                content: Lt,
                                contentWrapperRef: Dt,
                                place: et,
                                variant: st,
                                offset: ot,
                                wrapper: ft,
                                events: bt,
                                openOnClick: b,
                                positionStrategy: vt,
                                middlewares: y,
                                delayShow: rt,
                                delayHide: ct,
                                float: ht,
                                hidden: pt,
                                noArrow: j,
                                clickable: S,
                                closeOnEsc: A,
                                closeOnScroll: L,
                                closeOnResize: D,
                                openEvents: T,
                                closeEvents: E,
                                globalCloseEvents: O,
                                imperativeModeOnly: P,
                                style: I,
                                position: N,
                                isOpen: R,
                                defaultIsOpen: V,
                                border: B,
                                opacity: H,
                                arrowColor: W,
                                arrowSize: Y,
                                setIsOpen: $,
                                afterShow: U,
                                afterHide: Z,
                                disableTooltip: G,
                                activeAnchor: wt,
                                setActiveAnchor: (t) => zt(t),
                                role: K,
                            };
                            return s.createElement(C, { ...Tt });
                        }
                    );
                "undefined" != typeof window &&
                    window.addEventListener("react-tooltip-inject-styles", (t) => {
                        t.detail.disableCore ||
                            r({
                                css:
                                    ":root{--rt-color-white:#fff;--rt-color-dark:#222;--rt-color-success:#8dc572;--rt-color-error:#be6464;--rt-color-warning:#f0ad4e;--rt-color-info:#337ab7;--rt-opacity:0.9;--rt-transition-show-delay:0.15s;--rt-transition-closing-delay:0.15s;--rt-arrow-size:8px}.core-styles-module_tooltip__3vRRp{position:absolute;top:0;left:0;pointer-events:none;opacity:0;will-change:opacity}.core-styles-module_fixed__pcSol{position:fixed}.core-styles-module_arrow__cvMwQ{position:absolute;background:inherit;z-index:-1}.core-styles-module_noArrow__xock6{display:none}.core-styles-module_clickable__ZuTTB{pointer-events:auto}.core-styles-module_show__Nt9eE{opacity:var(--rt-opacity);transition:opacity var(--rt-transition-show-delay)ease-out}.core-styles-module_closing__sGnxF{opacity:0;transition:opacity var(--rt-transition-closing-delay)ease-in}",
                                type: "core",
                            }),
                            t.detail.disableBase ||
                                r({
                                    css:
                                        "\n.styles-module_tooltip__mnnfp{padding:8px 16px;border-radius:3px;font-size:90%;width:max-content}.styles-module_arrow__K0L3T{width:var(--rt-arrow-size);height:var(--rt-arrow-size)}[class*='react-tooltip__place-top']>.styles-module_arrow__K0L3T{transform:rotate(45deg)}[class*='react-tooltip__place-right']>.styles-module_arrow__K0L3T{transform:rotate(135deg)}[class*='react-tooltip__place-bottom']>.styles-module_arrow__K0L3T{transform:rotate(225deg)}[class*='react-tooltip__place-left']>.styles-module_arrow__K0L3T{transform:rotate(315deg)}.styles-module_dark__xNqje{background:var(--rt-color-dark);color:var(--rt-color-white)}.styles-module_light__Z6W-X{background-color:var(--rt-color-white);color:var(--rt-color-dark)}.styles-module_success__A2AKt{background-color:var(--rt-color-success);color:var(--rt-color-white)}.styles-module_warning__SCK0X{background-color:var(--rt-color-warning);color:var(--rt-color-white)}.styles-module_error__JvumD{background-color:var(--rt-color-error);color:var(--rt-color-white)}.styles-module_info__BWdHW{background-color:var(--rt-color-info);color:var(--rt-color-white)}",
                                    type: "base",
                                });
                    });
            },
            7193: (t, e, i) => {
                "use strict";
                i.d(e, {
                    B1: () => A,
                    C0: () => u,
                    Dz: () => x,
                    Jx: () => r,
                    LI: () => o,
                    PG: () => m,
                    RI: () => a,
                    Sg: () => p,
                    T9: () => n,
                    TV: () => b,
                    WJ: () => y,
                    _3: () => h,
                    bV: () => j,
                    jk: () => s,
                    lP: () => M,
                    nI: () => S,
                    qE: () => d,
                    sq: () => f,
                    w7: () => v,
                });
                const s = Math.min,
                    n = Math.max,
                    o = Math.round,
                    a = Math.floor,
                    r = (t) => ({ x: t, y: t }),
                    l = { left: "right", right: "left", bottom: "top", top: "bottom" },
                    c = { start: "end", end: "start" };
                function d(t, e, i) {
                    return n(t, s(e, i));
                }
                function h(t, e) {
                    return "function" == typeof t ? t(e) : t;
                }
                function u(t) {
                    return t.split("-")[0];
                }
                function p(t) {
                    return t.split("-")[1];
                }
                function m(t) {
                    return "x" === t ? "y" : "x";
                }
                function f(t) {
                    return "y" === t ? "height" : "width";
                }
                const g = new Set(["top", "bottom"]);
                function b(t) {
                    return g.has(u(t)) ? "y" : "x";
                }
                function x(t) {
                    return m(b(t));
                }
                function v(t, e, i) {
                    void 0 === i && (i = !1);
                    const s = p(t),
                        n = x(t),
                        o = f(n);
                    let a = "x" === n ? (s === (i ? "end" : "start") ? "right" : "left") : "start" === s ? "bottom" : "top";
                    return e.reference[o] > e.floating[o] && (a = j(a)), [a, j(a)];
                }
                function y(t) {
                    const e = j(t);
                    return [_(t), e, _(e)];
                }
                function _(t) {
                    return t.replace(/start|end/g, (t) => c[t]);
                }
                const C = ["left", "right"],
                    w = ["right", "left"],
                    z = ["top", "bottom"],
                    k = ["bottom", "top"];
                function M(t, e, i, s) {
                    const n = p(t);
                    let o = (function (t, e, i) {
                        switch (t) {
                            case "top":
                            case "bottom":
                                return i ? (e ? w : C) : e ? C : w;
                            case "left":
                            case "right":
                                return e ? z : k;
                            default:
                                return [];
                        }
                    })(u(t), "start" === i, s);
                    return n && ((o = o.map((t) => t + "-" + n)), e && (o = o.concat(o.map(_)))), o;
                }
                function j(t) {
                    return t.replace(/left|right|bottom|top/g, (t) => l[t]);
                }
                function S(t) {
                    return "number" != typeof t
                        ? (function (t) {
                              return { top: 0, right: 0, bottom: 0, left: 0, ...t };
                          })(t)
                        : { top: t, right: t, bottom: t, left: t };
                }
                function A(t) {
                    const { x: e, y: i, width: s, height: n } = t;
                    return { width: s, height: n, top: i, left: e, right: e + s, bottom: i + n, x: e, y: i };
                }
            },
            7437: (t, e, i) => {
                "use strict";
                i.d(e, { AH: () => c, Y: () => l, i7: () => d });
                var s,
                    n,
                    o = i(4684),
                    a = i(1609),
                    r = (i(1287), i(3917)),
                    l =
                        (i(5815),
                        i(4146),
                        function (t, e) {
                            var i = arguments;
                            if (null == e || !o.h.call(e, "css")) return a.createElement.apply(void 0, i);
                            var s = i.length,
                                n = new Array(s);
                            (n[0] = o.E), (n[1] = (0, o.c)(t, e));
                            for (var r = 2; r < s; r++) n[r] = i[r];
                            return a.createElement.apply(null, n);
                        });
                function c() {
                    for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++) e[i] = arguments[i];
                    return (0, r.J)(e);
                }
                function d() {
                    var t = c.apply(void 0, arguments),
                        e = "animation-" + t.name;
                    return {
                        name: e,
                        styles: "@keyframes " + e + "{" + t.styles + "}",
                        anim: 1,
                        toString: function () {
                            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
                        },
                    };
                }
                (s = l || (l = {})), n || (n = s.JSX || (s.JSX = {}));
            },
            7528: (t, e, i) => {
                "use strict";
                function s(t, e) {
                    return e || (e = t.slice(0)), Object.freeze(Object.defineProperties(t, { raw: { value: Object.freeze(e) } }));
                }
                i.d(e, { A: () => s });
            },
            7723: (t) => {
                "use strict";
                t.exports = window.wp.i18n;
            },
            7800: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => n });
                var s = i(3145);
                function n(t, e) {
                    if (t) {
                        if ("string" == typeof t) return (0, s.A)(t, e);
                        var i = {}.toString.call(t).slice(8, -1);
                        return "Object" === i && t.constructor && (i = t.constructor.name), "Map" === i || "Set" === i ? Array.from(t) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? (0, s.A)(t, e) : void 0;
                    }
                }
            },
            8168: (t, e, i) => {
                "use strict";
                function s() {
                    return (
                        (s = Object.assign
                            ? Object.assign.bind()
                            : function (t) {
                                  for (var e = 1; e < arguments.length; e++) {
                                      var i = arguments[e];
                                      for (var s in i) ({}.hasOwnProperty.call(i, s) && (t[s] = i[s]));
                                  }
                                  return t;
                              }),
                        s.apply(null, arguments)
                    );
                }
                i.d(e, { A: () => s });
            },
            8491: (t, e, i) => {
                "use strict";
                i.d(e, { BN: () => k, UE: () => j, UU: () => M, cY: () => z, ll: () => w, rD: () => S });
                var s = i(7193),
                    n = i(5361),
                    o = i(6635);
                function a(t) {
                    const e = (0, o.L9)(t);
                    let i = parseFloat(e.width) || 0,
                        n = parseFloat(e.height) || 0;
                    const a = (0, o.sb)(t),
                        r = a ? t.offsetWidth : i,
                        l = a ? t.offsetHeight : n,
                        c = (0, s.LI)(i) !== r || (0, s.LI)(n) !== l;
                    return c && ((i = r), (n = l)), { width: i, height: n, $: c };
                }
                function r(t) {
                    return (0, o.vq)(t) ? t : t.contextElement;
                }
                function l(t) {
                    const e = r(t);
                    if (!(0, o.sb)(e)) return (0, s.Jx)(1);
                    const i = e.getBoundingClientRect(),
                        { width: n, height: l, $: c } = a(e);
                    let d = (c ? (0, s.LI)(i.width) : i.width) / n,
                        h = (c ? (0, s.LI)(i.height) : i.height) / l;
                    return (d && Number.isFinite(d)) || (d = 1), (h && Number.isFinite(h)) || (h = 1), { x: d, y: h };
                }
                const c = (0, s.Jx)(0);
                function d(t) {
                    const e = (0, o.zk)(t);
                    return (0, o.Tc)() && e.visualViewport ? { x: e.visualViewport.offsetLeft, y: e.visualViewport.offsetTop } : c;
                }
                function h(t, e, i, n) {
                    void 0 === e && (e = !1), void 0 === i && (i = !1);
                    const a = t.getBoundingClientRect(),
                        c = r(t);
                    let h = (0, s.Jx)(1);
                    e && (n ? (0, o.vq)(n) && (h = l(n)) : (h = l(t)));
                    const u = (function (t, e, i) {
                        return void 0 === e && (e = !1), !(!i || (e && i !== (0, o.zk)(t))) && e;
                    })(c, i, n)
                        ? d(c)
                        : (0, s.Jx)(0);
                    let p = (a.left + u.x) / h.x,
                        m = (a.top + u.y) / h.y,
                        f = a.width / h.x,
                        g = a.height / h.y;
                    if (c) {
                        const t = (0, o.zk)(c),
                            e = n && (0, o.vq)(n) ? (0, o.zk)(n) : n;
                        let i = t,
                            s = (0, o._m)(i);
                        for (; s && n && e !== i; ) {
                            const t = l(s),
                                e = s.getBoundingClientRect(),
                                n = (0, o.L9)(s),
                                a = e.left + (s.clientLeft + parseFloat(n.paddingLeft)) * t.x,
                                r = e.top + (s.clientTop + parseFloat(n.paddingTop)) * t.y;
                            (p *= t.x), (m *= t.y), (f *= t.x), (g *= t.y), (p += a), (m += r), (i = (0, o.zk)(s)), (s = (0, o._m)(i));
                        }
                    }
                    return (0, s.B1)({ width: f, height: g, x: p, y: m });
                }
                function u(t, e) {
                    const i = (0, o.CP)(t).scrollLeft;
                    return e ? e.left + i : h((0, o.ep)(t)).left + i;
                }
                function p(t, e, i) {
                    void 0 === i && (i = !1);
                    const s = t.getBoundingClientRect();
                    return { x: s.left + e.scrollLeft - (i ? 0 : u(t, s)), y: s.top + e.scrollTop };
                }
                const m = new Set(["absolute", "fixed"]);
                function f(t, e, i) {
                    let n;
                    if ("viewport" === e)
                        n = (function (t, e) {
                            const i = (0, o.zk)(t),
                                s = (0, o.ep)(t),
                                n = i.visualViewport;
                            let a = s.clientWidth,
                                r = s.clientHeight,
                                l = 0,
                                c = 0;
                            if (n) {
                                (a = n.width), (r = n.height);
                                const t = (0, o.Tc)();
                                (!t || (t && "fixed" === e)) && ((l = n.offsetLeft), (c = n.offsetTop));
                            }
                            return { width: a, height: r, x: l, y: c };
                        })(t, i);
                    else if ("document" === e)
                        n = (function (t) {
                            const e = (0, o.ep)(t),
                                i = (0, o.CP)(t),
                                n = t.ownerDocument.body,
                                a = (0, s.T9)(e.scrollWidth, e.clientWidth, n.scrollWidth, n.clientWidth),
                                r = (0, s.T9)(e.scrollHeight, e.clientHeight, n.scrollHeight, n.clientHeight);
                            let l = -i.scrollLeft + u(t);
                            const c = -i.scrollTop;
                            return "rtl" === (0, o.L9)(n).direction && (l += (0, s.T9)(e.clientWidth, n.clientWidth) - a), { width: a, height: r, x: l, y: c };
                        })((0, o.ep)(t));
                    else if ((0, o.vq)(e))
                        n = (function (t, e) {
                            const i = h(t, !0, "fixed" === e),
                                n = i.top + t.clientTop,
                                a = i.left + t.clientLeft,
                                r = (0, o.sb)(t) ? l(t) : (0, s.Jx)(1);
                            return { width: t.clientWidth * r.x, height: t.clientHeight * r.y, x: a * r.x, y: n * r.y };
                        })(e, i);
                    else {
                        const i = d(t);
                        n = { x: e.x - i.x, y: e.y - i.y, width: e.width, height: e.height };
                    }
                    return (0, s.B1)(n);
                }
                function g(t, e) {
                    const i = (0, o.$4)(t);
                    return !(i === e || !(0, o.vq)(i) || (0, o.eu)(i)) && ("fixed" === (0, o.L9)(i).position || g(i, e));
                }
                function b(t, e, i) {
                    const n = (0, o.sb)(e),
                        a = (0, o.ep)(e),
                        r = "fixed" === i,
                        l = h(t, !0, r, e);
                    let c = { scrollLeft: 0, scrollTop: 0 };
                    const d = (0, s.Jx)(0);
                    function m() {
                        d.x = u(a);
                    }
                    if (n || (!n && !r))
                        if ((("body" !== (0, o.mq)(e) || (0, o.ZU)(a)) && (c = (0, o.CP)(e)), n)) {
                            const t = h(e, !0, r, e);
                            (d.x = t.x + e.clientLeft), (d.y = t.y + e.clientTop);
                        } else a && m();
                    r && !n && a && m();
                    const f = !a || n || r ? (0, s.Jx)(0) : p(a, c);
                    return { x: l.left + c.scrollLeft - d.x - f.x, y: l.top + c.scrollTop - d.y - f.y, width: l.width, height: l.height };
                }
                function x(t) {
                    return "static" === (0, o.L9)(t).position;
                }
                function v(t, e) {
                    if (!(0, o.sb)(t) || "fixed" === (0, o.L9)(t).position) return null;
                    if (e) return e(t);
                    let i = t.offsetParent;
                    return (0, o.ep)(t) === i && (i = i.ownerDocument.body), i;
                }
                function y(t, e) {
                    const i = (0, o.zk)(t);
                    if ((0, o.Tf)(t)) return i;
                    if (!(0, o.sb)(t)) {
                        let e = (0, o.$4)(t);
                        for (; e && !(0, o.eu)(e); ) {
                            if ((0, o.vq)(e) && !x(e)) return e;
                            e = (0, o.$4)(e);
                        }
                        return i;
                    }
                    let s = v(t, e);
                    for (; s && (0, o.Lv)(s) && x(s); ) s = v(s, e);
                    return s && (0, o.eu)(s) && x(s) && !(0, o.sQ)(s) ? i : s || (0, o.gJ)(t) || i;
                }
                const _ = {
                    convertOffsetParentRelativeRectToViewportRelativeRect: function (t) {
                        let { elements: e, rect: i, offsetParent: n, strategy: a } = t;
                        const r = "fixed" === a,
                            c = (0, o.ep)(n),
                            d = !!e && (0, o.Tf)(e.floating);
                        if (n === c || (d && r)) return i;
                        let u = { scrollLeft: 0, scrollTop: 0 },
                            m = (0, s.Jx)(1);
                        const f = (0, s.Jx)(0),
                            g = (0, o.sb)(n);
                        if ((g || (!g && !r)) && (("body" !== (0, o.mq)(n) || (0, o.ZU)(c)) && (u = (0, o.CP)(n)), (0, o.sb)(n))) {
                            const t = h(n);
                            (m = l(n)), (f.x = t.x + n.clientLeft), (f.y = t.y + n.clientTop);
                        }
                        const b = !c || g || r ? (0, s.Jx)(0) : p(c, u, !0);
                        return { width: i.width * m.x, height: i.height * m.y, x: i.x * m.x - u.scrollLeft * m.x + f.x + b.x, y: i.y * m.y - u.scrollTop * m.y + f.y + b.y };
                    },
                    getDocumentElement: o.ep,
                    getClippingRect: function (t) {
                        let { element: e, boundary: i, rootBoundary: n, strategy: a } = t;
                        const r = [
                                ...("clippingAncestors" === i
                                    ? (0, o.Tf)(e)
                                        ? []
                                        : (function (t, e) {
                                              const i = e.get(t);
                                              if (i) return i;
                                              let s = (0, o.v9)(t, [], !1).filter((t) => (0, o.vq)(t) && "body" !== (0, o.mq)(t)),
                                                  n = null;
                                              const a = "fixed" === (0, o.L9)(t).position;
                                              let r = a ? (0, o.$4)(t) : t;
                                              for (; (0, o.vq)(r) && !(0, o.eu)(r); ) {
                                                  const e = (0, o.L9)(r),
                                                      i = (0, o.sQ)(r);
                                                  i || "fixed" !== e.position || (n = null),
                                                      (a ? !i && !n : (!i && "static" === e.position && n && m.has(n.position)) || ((0, o.ZU)(r) && !i && g(t, r))) ? (s = s.filter((t) => t !== r)) : (n = e),
                                                      (r = (0, o.$4)(r));
                                              }
                                              return e.set(t, s), s;
                                          })(e, this._c)
                                    : [].concat(i)),
                                n,
                            ],
                            l = r[0],
                            c = r.reduce((t, i) => {
                                const n = f(e, i, a);
                                return (t.top = (0, s.T9)(n.top, t.top)), (t.right = (0, s.jk)(n.right, t.right)), (t.bottom = (0, s.jk)(n.bottom, t.bottom)), (t.left = (0, s.T9)(n.left, t.left)), t;
                            }, f(e, l, a));
                        return { width: c.right - c.left, height: c.bottom - c.top, x: c.left, y: c.top };
                    },
                    getOffsetParent: y,
                    getElementRects: async function (t) {
                        const e = this.getOffsetParent || y,
                            i = this.getDimensions,
                            s = await i(t.floating);
                        return { reference: b(t.reference, await e(t.floating), t.strategy), floating: { x: 0, y: 0, width: s.width, height: s.height } };
                    },
                    getClientRects: function (t) {
                        return Array.from(t.getClientRects());
                    },
                    getDimensions: function (t) {
                        const { width: e, height: i } = a(t);
                        return { width: e, height: i };
                    },
                    getScale: l,
                    isElement: o.vq,
                    isRTL: function (t) {
                        return "rtl" === (0, o.L9)(t).direction;
                    },
                };
                function C(t, e) {
                    return t.x === e.x && t.y === e.y && t.width === e.width && t.height === e.height;
                }
                function w(t, e, i, n) {
                    void 0 === n && (n = {});
                    const { ancestorScroll: a = !0, ancestorResize: l = !0, elementResize: c = "function" == typeof ResizeObserver, layoutShift: d = "function" == typeof IntersectionObserver, animationFrame: u = !1 } = n,
                        p = r(t),
                        m = a || l ? [...(p ? (0, o.v9)(p) : []), ...(0, o.v9)(e)] : [];
                    m.forEach((t) => {
                        a && t.addEventListener("scroll", i, { passive: !0 }), l && t.addEventListener("resize", i);
                    });
                    const f =
                        p && d
                            ? (function (t, e) {
                                  let i,
                                      n = null;
                                  const a = (0, o.ep)(t);
                                  function r() {
                                      var t;
                                      clearTimeout(i), null == (t = n) || t.disconnect(), (n = null);
                                  }
                                  return (
                                      (function o(l, c) {
                                          void 0 === l && (l = !1), void 0 === c && (c = 1), r();
                                          const d = t.getBoundingClientRect(),
                                              { left: h, top: u, width: p, height: m } = d;
                                          if ((l || e(), !p || !m)) return;
                                          const f = {
                                              rootMargin: -(0, s.RI)(u) + "px " + -(0, s.RI)(a.clientWidth - (h + p)) + "px " + -(0, s.RI)(a.clientHeight - (u + m)) + "px " + -(0, s.RI)(h) + "px",
                                              threshold: (0, s.T9)(0, (0, s.jk)(1, c)) || 1,
                                          };
                                          let g = !0;
                                          function b(e) {
                                              const s = e[0].intersectionRatio;
                                              if (s !== c) {
                                                  if (!g) return o();
                                                  s
                                                      ? o(!1, s)
                                                      : (i = setTimeout(() => {
                                                            o(!1, 1e-7);
                                                        }, 1e3));
                                              }
                                              1 !== s || C(d, t.getBoundingClientRect()) || o(), (g = !1);
                                          }
                                          try {
                                              n = new IntersectionObserver(b, { ...f, root: a.ownerDocument });
                                          } catch (t) {
                                              n = new IntersectionObserver(b, f);
                                          }
                                          n.observe(t);
                                      })(!0),
                                      r
                                  );
                              })(p, i)
                            : null;
                    let g,
                        b = -1,
                        x = null;
                    c &&
                        ((x = new ResizeObserver((t) => {
                            let [s] = t;
                            s &&
                                s.target === p &&
                                x &&
                                (x.unobserve(e),
                                cancelAnimationFrame(b),
                                (b = requestAnimationFrame(() => {
                                    var t;
                                    null == (t = x) || t.observe(e);
                                }))),
                                i();
                        })),
                        p && !u && x.observe(p),
                        x.observe(e));
                    let v = u ? h(t) : null;
                    return (
                        u &&
                            (function e() {
                                const s = h(t);
                                v && !C(v, s) && i(), (v = s), (g = requestAnimationFrame(e));
                            })(),
                        i(),
                        () => {
                            var t;
                            m.forEach((t) => {
                                a && t.removeEventListener("scroll", i), l && t.removeEventListener("resize", i);
                            }),
                                null == f || f(),
                                null == (t = x) || t.disconnect(),
                                (x = null),
                                u && cancelAnimationFrame(g);
                        }
                    );
                }
                const z = n.cY,
                    k = n.BN,
                    M = n.UU,
                    j = n.UE,
                    S = (t, e, i) => {
                        const s = new Map(),
                            o = { platform: _, ...i },
                            a = { ...o.platform, _c: s };
                        return (0, n.rD)(t, e, { ...o, platform: a });
                    };
            },
            8527: function (t) {
                t.exports = (function () {
                    "use strict";
                    function t() {}
                    const e = (() => {
                        let t = 0;
                        return () => t++;
                    })();
                    function i(t) {
                        return null == t;
                    }
                    function s(t) {
                        if (Array.isArray && Array.isArray(t)) return !0;
                        const e = Object.prototype.toString.call(t);
                        return "[object" === e.slice(0, 7) && "Array]" === e.slice(-6);
                    }
                    function n(t) {
                        return null !== t && "[object Object]" === Object.prototype.toString.call(t);
                    }
                    function o(t) {
                        return ("number" == typeof t || t instanceof Number) && isFinite(+t);
                    }
                    function a(t, e) {
                        return o(t) ? t : e;
                    }
                    function r(t, e) {
                        return void 0 === t ? e : t;
                    }
                    const l = (t, e) => ("string" == typeof t && t.endsWith("%") ? parseFloat(t) / 100 : +t / e),
                        c = (t, e) => ("string" == typeof t && t.endsWith("%") ? (parseFloat(t) / 100) * e : +t);
                    function d(t, e, i) {
                        if (t && "function" == typeof t.call) return t.apply(i, e);
                    }
                    function h(t, e, i, o) {
                        let a, r, l;
                        if (s(t))
                            if (((r = t.length), o)) for (a = r - 1; a >= 0; a--) e.call(i, t[a], a);
                            else for (a = 0; a < r; a++) e.call(i, t[a], a);
                        else if (n(t)) for (l = Object.keys(t), r = l.length, a = 0; a < r; a++) e.call(i, t[l[a]], l[a]);
                    }
                    function u(t, e) {
                        let i, s, n, o;
                        if (!t || !e || t.length !== e.length) return !1;
                        for (i = 0, s = t.length; i < s; ++i) if (((n = t[i]), (o = e[i]), n.datasetIndex !== o.datasetIndex || n.index !== o.index)) return !1;
                        return !0;
                    }
                    function p(t) {
                        if (s(t)) return t.map(p);
                        if (n(t)) {
                            const e = Object.create(null),
                                i = Object.keys(t),
                                s = i.length;
                            let n = 0;
                            for (; n < s; ++n) e[i[n]] = p(t[i[n]]);
                            return e;
                        }
                        return t;
                    }
                    function m(t) {
                        return -1 === ["__proto__", "prototype", "constructor"].indexOf(t);
                    }
                    function f(t, e, i, s) {
                        if (!m(t)) return;
                        const o = e[t],
                            a = i[t];
                        n(o) && n(a) ? g(o, a, s) : (e[t] = p(a));
                    }
                    function g(t, e, i) {
                        const o = s(e) ? e : [e],
                            a = o.length;
                        if (!n(t)) return t;
                        const r = (i = i || {}).merger || f;
                        let l;
                        for (let e = 0; e < a; ++e) {
                            if (((l = o[e]), !n(l))) continue;
                            const s = Object.keys(l);
                            for (let e = 0, n = s.length; e < n; ++e) r(s[e], t, l, i);
                        }
                        return t;
                    }
                    function b(t, e) {
                        return g(t, e, { merger: x });
                    }
                    function x(t, e, i) {
                        if (!m(t)) return;
                        const s = e[t],
                            o = i[t];
                        n(s) && n(o) ? b(s, o) : Object.prototype.hasOwnProperty.call(e, t) || (e[t] = p(o));
                    }
                    const v = { "": (t) => t, x: (t) => t.x, y: (t) => t.y };
                    function y(t) {
                        const e = t.split("."),
                            i = [];
                        let s = "";
                        for (const t of e) (s += t), s.endsWith("\\") ? (s = s.slice(0, -1) + ".") : (i.push(s), (s = ""));
                        return i;
                    }
                    function _(t, e) {
                        const i =
                            v[e] ||
                            (v[e] = (function (t) {
                                const e = y(t);
                                return (t) => {
                                    for (const i of e) {
                                        if ("" === i) break;
                                        t = t && t[i];
                                    }
                                    return t;
                                };
                            })(e));
                        return i(t);
                    }
                    function C(t) {
                        return t.charAt(0).toUpperCase() + t.slice(1);
                    }
                    const w = (t) => void 0 !== t,
                        z = (t) => "function" == typeof t,
                        k = (t, e) => {
                            if (t.size !== e.size) return !1;
                            for (const i of t) if (!e.has(i)) return !1;
                            return !0;
                        };
                    function M(t) {
                        return "mouseup" === t.type || "click" === t.type || "contextmenu" === t.type;
                    }
                    const j = Math.PI,
                        S = 2 * j,
                        A = S + j,
                        L = Number.POSITIVE_INFINITY,
                        D = j / 180,
                        T = j / 2,
                        E = j / 4,
                        O = (2 * j) / 3,
                        P = Math.log10,
                        I = Math.sign;
                    function N(t, e, i) {
                        return Math.abs(t - e) < i;
                    }
                    function R(t) {
                        const e = Math.round(t);
                        t = N(t, e, t / 1e3) ? e : t;
                        const i = Math.pow(10, Math.floor(P(t))),
                            s = t / i;
                        return (s <= 1 ? 1 : s <= 2 ? 2 : s <= 5 ? 5 : 10) * i;
                    }
                    function V(t) {
                        const e = [],
                            i = Math.sqrt(t);
                        let s;
                        for (s = 1; s < i; s++) t % s == 0 && (e.push(s), e.push(t / s));
                        return i === (0 | i) && e.push(i), e.sort((t, e) => t - e).pop(), e;
                    }
                    function F(t) {
                        return !isNaN(parseFloat(t)) && isFinite(t);
                    }
                    function B(t, e) {
                        const i = Math.round(t);
                        return i - e <= t && i + e >= t;
                    }
                    function H(t, e, i) {
                        let s, n, o;
                        for (s = 0, n = t.length; s < n; s++) (o = t[s][i]), isNaN(o) || ((e.min = Math.min(e.min, o)), (e.max = Math.max(e.max, o)));
                    }
                    function W(t) {
                        return t * (j / 180);
                    }
                    function Y(t) {
                        return t * (180 / j);
                    }
                    function $(t) {
                        if (!o(t)) return;
                        let e = 1,
                            i = 0;
                        for (; Math.round(t * e) / e !== t; ) (e *= 10), i++;
                        return i;
                    }
                    function U(t, e) {
                        const i = e.x - t.x,
                            s = e.y - t.y,
                            n = Math.sqrt(i * i + s * s);
                        let o = Math.atan2(s, i);
                        return o < -0.5 * j && (o += S), { angle: o, distance: n };
                    }
                    function Z(t, e) {
                        return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));
                    }
                    function G(t, e) {
                        return ((t - e + A) % S) - j;
                    }
                    function K(t) {
                        return ((t % S) + S) % S;
                    }
                    function q(t, e, i, s) {
                        const n = K(t),
                            o = K(e),
                            a = K(i),
                            r = K(o - n),
                            l = K(a - n),
                            c = K(n - o),
                            d = K(n - a);
                        return n === o || n === a || (s && o === a) || (r > l && c < d);
                    }
                    function X(t, e, i) {
                        return Math.max(e, Math.min(i, t));
                    }
                    function J(t) {
                        return X(t, -32768, 32767);
                    }
                    function Q(t, e, i, s = 1e-6) {
                        return t >= Math.min(e, i) - s && t <= Math.max(e, i) + s;
                    }
                    function tt(t, e, i) {
                        i = i || ((i) => t[i] < e);
                        let s,
                            n = t.length - 1,
                            o = 0;
                        for (; n - o > 1; ) (s = (o + n) >> 1), i(s) ? (o = s) : (n = s);
                        return { lo: o, hi: n };
                    }
                    const et = (t, e, i, s) =>
                            tt(
                                t,
                                i,
                                s
                                    ? (s) => {
                                          const n = t[s][e];
                                          return n < i || (n === i && t[s + 1][e] === i);
                                      }
                                    : (s) => t[s][e] < i
                            ),
                        it = (t, e, i) => tt(t, i, (s) => t[s][e] >= i);
                    function st(t, e, i) {
                        let s = 0,
                            n = t.length;
                        for (; s < n && t[s] < e; ) s++;
                        for (; n > s && t[n - 1] > i; ) n--;
                        return s > 0 || n < t.length ? t.slice(s, n) : t;
                    }
                    const nt = ["push", "pop", "shift", "splice", "unshift"];
                    function ot(t, e) {
                        t._chartjs
                            ? t._chartjs.listeners.push(e)
                            : (Object.defineProperty(t, "_chartjs", { configurable: !0, enumerable: !1, value: { listeners: [e] } }),
                              nt.forEach((e) => {
                                  const i = "_onData" + C(e),
                                      s = t[e];
                                  Object.defineProperty(t, e, {
                                      configurable: !0,
                                      enumerable: !1,
                                      value(...e) {
                                          const n = s.apply(this, e);
                                          return (
                                              t._chartjs.listeners.forEach((t) => {
                                                  "function" == typeof t[i] && t[i](...e);
                                              }),
                                              n
                                          );
                                      },
                                  });
                              }));
                    }
                    function at(t, e) {
                        const i = t._chartjs;
                        if (!i) return;
                        const s = i.listeners,
                            n = s.indexOf(e);
                        -1 !== n && s.splice(n, 1),
                            s.length > 0 ||
                                (nt.forEach((e) => {
                                    delete t[e];
                                }),
                                delete t._chartjs);
                    }
                    function rt(t) {
                        const e = new Set();
                        let i, s;
                        for (i = 0, s = t.length; i < s; ++i) e.add(t[i]);
                        return e.size === s ? t : Array.from(e);
                    }
                    const lt =
                        "undefined" == typeof window
                            ? function (t) {
                                  return t();
                              }
                            : window.requestAnimationFrame;
                    function ct(t, e) {
                        let i = !1;
                        return function (...s) {
                            i ||
                                ((i = !0),
                                lt.call(window, () => {
                                    (i = !1), t.apply(e, s);
                                }));
                        };
                    }
                    function dt(t, e) {
                        let i;
                        return function (...s) {
                            return e ? (clearTimeout(i), (i = setTimeout(t, e, s))) : t.apply(this, s), e;
                        };
                    }
                    const ht = (t) => ("start" === t ? "left" : "end" === t ? "right" : "center"),
                        ut = (t, e, i) => ("start" === t ? e : "end" === t ? i : (e + i) / 2),
                        pt = (t, e, i, s) => (t === (s ? "left" : "right") ? i : "center" === t ? (e + i) / 2 : e);
                    function mt(t, e, i) {
                        const s = e.length;
                        let n = 0,
                            o = s;
                        if (t._sorted) {
                            const { iScale: a, _parsed: r } = t,
                                l = a.axis,
                                { min: c, max: d, minDefined: h, maxDefined: u } = a.getUserBounds();
                            h && (n = X(Math.min(et(r, a.axis, c).lo, i ? s : et(e, l, a.getPixelForValue(c)).lo), 0, s - 1)),
                                (o = u ? X(Math.max(et(r, a.axis, d, !0).hi + 1, i ? 0 : et(e, l, a.getPixelForValue(d), !0).hi + 1), n, s) - n : s - n);
                        }
                        return { start: n, count: o };
                    }
                    function ft(t) {
                        const { xScale: e, yScale: i, _scaleRanges: s } = t,
                            n = { xmin: e.min, xmax: e.max, ymin: i.min, ymax: i.max };
                        if (!s) return (t._scaleRanges = n), !0;
                        const o = s.xmin !== e.min || s.xmax !== e.max || s.ymin !== i.min || s.ymax !== i.max;
                        return Object.assign(s, n), o;
                    }
                    var gt = new (class {
                        constructor() {
                            (this._request = null), (this._charts = new Map()), (this._running = !1), (this._lastDate = void 0);
                        }
                        _notify(t, e, i, s) {
                            const n = e.listeners[s],
                                o = e.duration;
                            n.forEach((s) => s({ chart: t, initial: e.initial, numSteps: o, currentStep: Math.min(i - e.start, o) }));
                        }
                        _refresh() {
                            this._request ||
                                ((this._running = !0),
                                (this._request = lt.call(window, () => {
                                    this._update(), (this._request = null), this._running && this._refresh();
                                })));
                        }
                        _update(t = Date.now()) {
                            let e = 0;
                            this._charts.forEach((i, s) => {
                                if (!i.running || !i.items.length) return;
                                const n = i.items;
                                let o,
                                    a = n.length - 1,
                                    r = !1;
                                for (; a >= 0; --a) (o = n[a]), o._active ? (o._total > i.duration && (i.duration = o._total), o.tick(t), (r = !0)) : ((n[a] = n[n.length - 1]), n.pop());
                                r && (s.draw(), this._notify(s, i, t, "progress")), n.length || ((i.running = !1), this._notify(s, i, t, "complete"), (i.initial = !1)), (e += n.length);
                            }),
                                (this._lastDate = t),
                                0 === e && (this._running = !1);
                        }
                        _getAnims(t) {
                            const e = this._charts;
                            let i = e.get(t);
                            return i || ((i = { running: !1, initial: !0, items: [], listeners: { complete: [], progress: [] } }), e.set(t, i)), i;
                        }
                        listen(t, e, i) {
                            this._getAnims(t).listeners[e].push(i);
                        }
                        add(t, e) {
                            e && e.length && this._getAnims(t).items.push(...e);
                        }
                        has(t) {
                            return this._getAnims(t).items.length > 0;
                        }
                        start(t) {
                            const e = this._charts.get(t);
                            e && ((e.running = !0), (e.start = Date.now()), (e.duration = e.items.reduce((t, e) => Math.max(t, e._duration), 0)), this._refresh());
                        }
                        running(t) {
                            if (!this._running) return !1;
                            const e = this._charts.get(t);
                            return !!(e && e.running && e.items.length);
                        }
                        stop(t) {
                            const e = this._charts.get(t);
                            if (!e || !e.items.length) return;
                            const i = e.items;
                            let s = i.length - 1;
                            for (; s >= 0; --s) i[s].cancel();
                            (e.items = []), this._notify(t, e, Date.now(), "complete");
                        }
                        remove(t) {
                            return this._charts.delete(t);
                        }
                    })();
                    function bt(t) {
                        return (t + 0.5) | 0;
                    }
                    const xt = (t, e, i) => Math.max(Math.min(t, i), e);
                    function vt(t) {
                        return xt(bt(2.55 * t), 0, 255);
                    }
                    function yt(t) {
                        return xt(bt(255 * t), 0, 255);
                    }
                    function _t(t) {
                        return xt(bt(t / 2.55) / 100, 0, 1);
                    }
                    function Ct(t) {
                        return xt(bt(100 * t), 0, 100);
                    }
                    const wt = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 },
                        zt = [..."0123456789ABCDEF"],
                        kt = (t) => zt[15 & t],
                        Mt = (t) => zt[(240 & t) >> 4] + zt[15 & t],
                        jt = (t) => (240 & t) >> 4 == (15 & t);
                    const St = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
                    function At(t, e, i) {
                        const s = e * Math.min(i, 1 - i),
                            n = (e, n = (e + t / 30) % 12) => i - s * Math.max(Math.min(n - 3, 9 - n, 1), -1);
                        return [n(0), n(8), n(4)];
                    }
                    function Lt(t, e, i) {
                        const s = (s, n = (s + t / 60) % 6) => i - i * e * Math.max(Math.min(n, 4 - n, 1), 0);
                        return [s(5), s(3), s(1)];
                    }
                    function Dt(t, e, i) {
                        const s = At(t, 1, 0.5);
                        let n;
                        for (e + i > 1 && ((n = 1 / (e + i)), (e *= n), (i *= n)), n = 0; n < 3; n++) (s[n] *= 1 - e - i), (s[n] += e);
                        return s;
                    }
                    function Tt(t) {
                        const e = t.r / 255,
                            i = t.g / 255,
                            s = t.b / 255,
                            n = Math.max(e, i, s),
                            o = Math.min(e, i, s),
                            a = (n + o) / 2;
                        let r, l, c;
                        return (
                            n !== o &&
                                ((c = n - o),
                                (l = a > 0.5 ? c / (2 - n - o) : c / (n + o)),
                                (r = (function (t, e, i, s, n) {
                                    return t === n ? (e - i) / s + (e < i ? 6 : 0) : e === n ? (i - t) / s + 2 : (t - e) / s + 4;
                                })(e, i, s, c, n)),
                                (r = 60 * r + 0.5)),
                            [0 | r, l || 0, a]
                        );
                    }
                    function Et(t, e, i, s) {
                        return (Array.isArray(e) ? t(e[0], e[1], e[2]) : t(e, i, s)).map(yt);
                    }
                    function Ot(t, e, i) {
                        return Et(At, t, e, i);
                    }
                    function Pt(t) {
                        return ((t % 360) + 360) % 360;
                    }
                    const It = {
                            x: "dark",
                            Z: "light",
                            Y: "re",
                            X: "blu",
                            W: "gr",
                            V: "medium",
                            U: "slate",
                            A: "ee",
                            T: "ol",
                            S: "or",
                            B: "ra",
                            C: "lateg",
                            D: "ights",
                            R: "in",
                            Q: "turquois",
                            E: "hi",
                            P: "ro",
                            O: "al",
                            N: "le",
                            M: "de",
                            L: "yello",
                            F: "en",
                            K: "ch",
                            G: "arks",
                            H: "ea",
                            I: "ightg",
                            J: "wh",
                        },
                        Nt = {
                            OiceXe: "f0f8ff",
                            antiquewEte: "faebd7",
                            aqua: "ffff",
                            aquamarRe: "7fffd4",
                            azuY: "f0ffff",
                            beige: "f5f5dc",
                            bisque: "ffe4c4",
                            black: "0",
                            blanKedOmond: "ffebcd",
                            Xe: "ff",
                            XeviTet: "8a2be2",
                            bPwn: "a52a2a",
                            burlywood: "deb887",
                            caMtXe: "5f9ea0",
                            KartYuse: "7fff00",
                            KocTate: "d2691e",
                            cSO: "ff7f50",
                            cSnflowerXe: "6495ed",
                            cSnsilk: "fff8dc",
                            crimson: "dc143c",
                            cyan: "ffff",
                            xXe: "8b",
                            xcyan: "8b8b",
                            xgTMnPd: "b8860b",
                            xWay: "a9a9a9",
                            xgYF: "6400",
                            xgYy: "a9a9a9",
                            xkhaki: "bdb76b",
                            xmagFta: "8b008b",
                            xTivegYF: "556b2f",
                            xSange: "ff8c00",
                            xScEd: "9932cc",
                            xYd: "8b0000",
                            xsOmon: "e9967a",
                            xsHgYF: "8fbc8f",
                            xUXe: "483d8b",
                            xUWay: "2f4f4f",
                            xUgYy: "2f4f4f",
                            xQe: "ced1",
                            xviTet: "9400d3",
                            dAppRk: "ff1493",
                            dApskyXe: "bfff",
                            dimWay: "696969",
                            dimgYy: "696969",
                            dodgerXe: "1e90ff",
                            fiYbrick: "b22222",
                            flSOwEte: "fffaf0",
                            foYstWAn: "228b22",
                            fuKsia: "ff00ff",
                            gaRsbSo: "dcdcdc",
                            ghostwEte: "f8f8ff",
                            gTd: "ffd700",
                            gTMnPd: "daa520",
                            Way: "808080",
                            gYF: "8000",
                            gYFLw: "adff2f",
                            gYy: "808080",
                            honeyMw: "f0fff0",
                            hotpRk: "ff69b4",
                            RdianYd: "cd5c5c",
                            Rdigo: "4b0082",
                            ivSy: "fffff0",
                            khaki: "f0e68c",
                            lavFMr: "e6e6fa",
                            lavFMrXsh: "fff0f5",
                            lawngYF: "7cfc00",
                            NmoncEffon: "fffacd",
                            ZXe: "add8e6",
                            ZcSO: "f08080",
                            Zcyan: "e0ffff",
                            ZgTMnPdLw: "fafad2",
                            ZWay: "d3d3d3",
                            ZgYF: "90ee90",
                            ZgYy: "d3d3d3",
                            ZpRk: "ffb6c1",
                            ZsOmon: "ffa07a",
                            ZsHgYF: "20b2aa",
                            ZskyXe: "87cefa",
                            ZUWay: "778899",
                            ZUgYy: "778899",
                            ZstAlXe: "b0c4de",
                            ZLw: "ffffe0",
                            lime: "ff00",
                            limegYF: "32cd32",
                            lRF: "faf0e6",
                            magFta: "ff00ff",
                            maPon: "800000",
                            VaquamarRe: "66cdaa",
                            VXe: "cd",
                            VScEd: "ba55d3",
                            VpurpN: "9370db",
                            VsHgYF: "3cb371",
                            VUXe: "7b68ee",
                            VsprRggYF: "fa9a",
                            VQe: "48d1cc",
                            VviTetYd: "c71585",
                            midnightXe: "191970",
                            mRtcYam: "f5fffa",
                            mistyPse: "ffe4e1",
                            moccasR: "ffe4b5",
                            navajowEte: "ffdead",
                            navy: "80",
                            Tdlace: "fdf5e6",
                            Tive: "808000",
                            TivedBb: "6b8e23",
                            Sange: "ffa500",
                            SangeYd: "ff4500",
                            ScEd: "da70d6",
                            pOegTMnPd: "eee8aa",
                            pOegYF: "98fb98",
                            pOeQe: "afeeee",
                            pOeviTetYd: "db7093",
                            papayawEp: "ffefd5",
                            pHKpuff: "ffdab9",
                            peru: "cd853f",
                            pRk: "ffc0cb",
                            plum: "dda0dd",
                            powMrXe: "b0e0e6",
                            purpN: "800080",
                            YbeccapurpN: "663399",
                            Yd: "ff0000",
                            Psybrown: "bc8f8f",
                            PyOXe: "4169e1",
                            saddNbPwn: "8b4513",
                            sOmon: "fa8072",
                            sandybPwn: "f4a460",
                            sHgYF: "2e8b57",
                            sHshell: "fff5ee",
                            siFna: "a0522d",
                            silver: "c0c0c0",
                            skyXe: "87ceeb",
                            UXe: "6a5acd",
                            UWay: "708090",
                            UgYy: "708090",
                            snow: "fffafa",
                            sprRggYF: "ff7f",
                            stAlXe: "4682b4",
                            tan: "d2b48c",
                            teO: "8080",
                            tEstN: "d8bfd8",
                            tomato: "ff6347",
                            Qe: "40e0d0",
                            viTet: "ee82ee",
                            JHt: "f5deb3",
                            wEte: "ffffff",
                            wEtesmoke: "f5f5f5",
                            Lw: "ffff00",
                            LwgYF: "9acd32",
                        };
                    let Rt;
                    const Vt = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,
                        Ft = (t) => (t <= 0.0031308 ? 12.92 * t : 1.055 * Math.pow(t, 1 / 2.4) - 0.055),
                        Bt = (t) => (t <= 0.04045 ? t / 12.92 : Math.pow((t + 0.055) / 1.055, 2.4));
                    function Ht(t, e, i) {
                        if (t) {
                            let s = Tt(t);
                            (s[e] = Math.max(0, Math.min(s[e] + s[e] * i, 0 === e ? 360 : 1))), (s = Ot(s)), (t.r = s[0]), (t.g = s[1]), (t.b = s[2]);
                        }
                    }
                    function Wt(t, e) {
                        return t ? Object.assign(e || {}, t) : t;
                    }
                    function Yt(t) {
                        var e = { r: 0, g: 0, b: 0, a: 255 };
                        return Array.isArray(t) ? t.length >= 3 && ((e = { r: t[0], g: t[1], b: t[2], a: 255 }), t.length > 3 && (e.a = yt(t[3]))) : ((e = Wt(t, { r: 0, g: 0, b: 0, a: 1 })).a = yt(e.a)), e;
                    }
                    function $t(t) {
                        return "r" === t.charAt(0)
                            ? (function (t) {
                                  const e = Vt.exec(t);
                                  let i,
                                      s,
                                      n,
                                      o = 255;
                                  if (e) {
                                      if (e[7] !== i) {
                                          const t = +e[7];
                                          o = e[8] ? vt(t) : xt(255 * t, 0, 255);
                                      }
                                      return (
                                          (i = +e[1]), (s = +e[3]), (n = +e[5]), (i = 255 & (e[2] ? vt(i) : xt(i, 0, 255))), (s = 255 & (e[4] ? vt(s) : xt(s, 0, 255))), (n = 255 & (e[6] ? vt(n) : xt(n, 0, 255))), { r: i, g: s, b: n, a: o }
                                      );
                                  }
                              })(t)
                            : (function (t) {
                                  const e = St.exec(t);
                                  let i,
                                      s = 255;
                                  if (!e) return;
                                  e[5] !== i && (s = e[6] ? vt(+e[5]) : yt(+e[5]));
                                  const n = Pt(+e[2]),
                                      o = +e[3] / 100,
                                      a = +e[4] / 100;
                                  return (
                                      (i =
                                          "hwb" === e[1]
                                              ? (function (t, e, i) {
                                                    return Et(Dt, t, e, i);
                                                })(n, o, a)
                                              : "hsv" === e[1]
                                              ? (function (t, e, i) {
                                                    return Et(Lt, t, e, i);
                                                })(n, o, a)
                                              : Ot(n, o, a)),
                                      { r: i[0], g: i[1], b: i[2], a: s }
                                  );
                              })(t);
                    }
                    class Ut {
                        constructor(t) {
                            if (t instanceof Ut) return t;
                            const e = typeof t;
                            let i;
                            var s, n, o;
                            "object" === e
                                ? (i = Yt(t))
                                : "string" === e &&
                                  ((o = (s = t).length),
                                  "#" === s[0] &&
                                      (4 === o || 5 === o
                                          ? (n = { r: 255 & (17 * wt[s[1]]), g: 255 & (17 * wt[s[2]]), b: 255 & (17 * wt[s[3]]), a: 5 === o ? 17 * wt[s[4]] : 255 })
                                          : (7 !== o && 9 !== o) || (n = { r: (wt[s[1]] << 4) | wt[s[2]], g: (wt[s[3]] << 4) | wt[s[4]], b: (wt[s[5]] << 4) | wt[s[6]], a: 9 === o ? (wt[s[7]] << 4) | wt[s[8]] : 255 })),
                                  (i =
                                      n ||
                                      (function (t) {
                                          Rt ||
                                              ((Rt = (function () {
                                                  const t = {},
                                                      e = Object.keys(Nt),
                                                      i = Object.keys(It);
                                                  let s, n, o, a, r;
                                                  for (s = 0; s < e.length; s++) {
                                                      for (a = r = e[s], n = 0; n < i.length; n++) (o = i[n]), (r = r.replace(o, It[o]));
                                                      (o = parseInt(Nt[a], 16)), (t[r] = [(o >> 16) & 255, (o >> 8) & 255, 255 & o]);
                                                  }
                                                  return t;
                                              })()),
                                              (Rt.transparent = [0, 0, 0, 0]));
                                          const e = Rt[t.toLowerCase()];
                                          return e && { r: e[0], g: e[1], b: e[2], a: 4 === e.length ? e[3] : 255 };
                                      })(t) ||
                                      $t(t))),
                                (this._rgb = i),
                                (this._valid = !!i);
                        }
                        get valid() {
                            return this._valid;
                        }
                        get rgb() {
                            var t = Wt(this._rgb);
                            return t && (t.a = _t(t.a)), t;
                        }
                        set rgb(t) {
                            this._rgb = Yt(t);
                        }
                        rgbString() {
                            return this._valid ? (t = this._rgb) && (t.a < 255 ? `rgba(${t.r}, ${t.g}, ${t.b}, ${_t(t.a)})` : `rgb(${t.r}, ${t.g}, ${t.b})`) : void 0;
                            var t;
                        }
                        hexString() {
                            return this._valid
                                ? (function (t) {
                                      var e = ((t) => jt(t.r) && jt(t.g) && jt(t.b) && jt(t.a))(t) ? kt : Mt;
                                      return t ? "#" + e(t.r) + e(t.g) + e(t.b) + ((t, e) => (t < 255 ? e(t) : ""))(t.a, e) : void 0;
                                  })(this._rgb)
                                : void 0;
                        }
                        hslString() {
                            return this._valid
                                ? (function (t) {
                                      if (!t) return;
                                      const e = Tt(t),
                                          i = e[0],
                                          s = Ct(e[1]),
                                          n = Ct(e[2]);
                                      return t.a < 255 ? `hsla(${i}, ${s}%, ${n}%, ${_t(t.a)})` : `hsl(${i}, ${s}%, ${n}%)`;
                                  })(this._rgb)
                                : void 0;
                        }
                        mix(t, e) {
                            if (t) {
                                const i = this.rgb,
                                    s = t.rgb;
                                let n;
                                const o = e === n ? 0.5 : e,
                                    a = 2 * o - 1,
                                    r = i.a - s.a,
                                    l = ((a * r == -1 ? a : (a + r) / (1 + a * r)) + 1) / 2;
                                (n = 1 - l), (i.r = 255 & (l * i.r + n * s.r + 0.5)), (i.g = 255 & (l * i.g + n * s.g + 0.5)), (i.b = 255 & (l * i.b + n * s.b + 0.5)), (i.a = o * i.a + (1 - o) * s.a), (this.rgb = i);
                            }
                            return this;
                        }
                        interpolate(t, e) {
                            return (
                                t &&
                                    (this._rgb = (function (t, e, i) {
                                        const s = Bt(_t(t.r)),
                                            n = Bt(_t(t.g)),
                                            o = Bt(_t(t.b));
                                        return { r: yt(Ft(s + i * (Bt(_t(e.r)) - s))), g: yt(Ft(n + i * (Bt(_t(e.g)) - n))), b: yt(Ft(o + i * (Bt(_t(e.b)) - o))), a: t.a + i * (e.a - t.a) };
                                    })(this._rgb, t._rgb, e)),
                                this
                            );
                        }
                        clone() {
                            return new Ut(this.rgb);
                        }
                        alpha(t) {
                            return (this._rgb.a = yt(t)), this;
                        }
                        clearer(t) {
                            return (this._rgb.a *= 1 - t), this;
                        }
                        greyscale() {
                            const t = this._rgb,
                                e = bt(0.3 * t.r + 0.59 * t.g + 0.11 * t.b);
                            return (t.r = t.g = t.b = e), this;
                        }
                        opaquer(t) {
                            return (this._rgb.a *= 1 + t), this;
                        }
                        negate() {
                            const t = this._rgb;
                            return (t.r = 255 - t.r), (t.g = 255 - t.g), (t.b = 255 - t.b), this;
                        }
                        lighten(t) {
                            return Ht(this._rgb, 2, t), this;
                        }
                        darken(t) {
                            return Ht(this._rgb, 2, -t), this;
                        }
                        saturate(t) {
                            return Ht(this._rgb, 1, t), this;
                        }
                        desaturate(t) {
                            return Ht(this._rgb, 1, -t), this;
                        }
                        rotate(t) {
                            return (
                                (function (t, e) {
                                    var i = Tt(t);
                                    (i[0] = Pt(i[0] + e)), (i = Ot(i)), (t.r = i[0]), (t.g = i[1]), (t.b = i[2]);
                                })(this._rgb, t),
                                this
                            );
                        }
                    }
                    function Zt(t) {
                        return new Ut(t);
                    }
                    function Gt(t) {
                        if (t && "object" == typeof t) {
                            const e = t.toString();
                            return "[object CanvasPattern]" === e || "[object CanvasGradient]" === e;
                        }
                        return !1;
                    }
                    function Kt(t) {
                        return Gt(t) ? t : Zt(t);
                    }
                    function qt(t) {
                        return Gt(t) ? t : Zt(t).saturate(0.5).darken(0.1).hexString();
                    }
                    const Xt = ["x", "y", "borderWidth", "radius", "tension"],
                        Jt = ["color", "borderColor", "backgroundColor"],
                        Qt = new Map();
                    function te(t, e, i) {
                        return (function (t, e) {
                            e = e || {};
                            const i = t + JSON.stringify(e);
                            let s = Qt.get(i);
                            return s || ((s = new Intl.NumberFormat(t, e)), Qt.set(i, s)), s;
                        })(e, i).format(t);
                    }
                    const ee = {
                        values: (t) => (s(t) ? t : "" + t),
                        numeric(t, e, i) {
                            if (0 === t) return "0";
                            const s = this.chart.options.locale;
                            let n,
                                o = t;
                            if (i.length > 1) {
                                const e = Math.max(Math.abs(i[0].value), Math.abs(i[i.length - 1].value));
                                (e < 1e-4 || e > 1e15) && (n = "scientific"),
                                    (o = (function (t, e) {
                                        let i = e.length > 3 ? e[2].value - e[1].value : e[1].value - e[0].value;
                                        return Math.abs(i) >= 1 && t !== Math.floor(t) && (i = t - Math.floor(t)), i;
                                    })(t, i));
                            }
                            const a = P(Math.abs(o)),
                                r = Math.max(Math.min(-1 * Math.floor(a), 20), 0),
                                l = { notation: n, minimumFractionDigits: r, maximumFractionDigits: r };
                            return Object.assign(l, this.options.ticks.format), te(t, s, l);
                        },
                        logarithmic(t, e, i) {
                            if (0 === t) return "0";
                            const s = i[e].significand || t / Math.pow(10, Math.floor(P(t)));
                            return [1, 2, 3, 5, 10, 15].includes(s) || e > 0.8 * i.length ? ee.numeric.call(this, t, e, i) : "";
                        },
                    };
                    var ie = { formatters: ee };
                    const se = Object.create(null),
                        ne = Object.create(null);
                    function oe(t, e) {
                        if (!e) return t;
                        const i = e.split(".");
                        for (let e = 0, s = i.length; e < s; ++e) {
                            const s = i[e];
                            t = t[s] || (t[s] = Object.create(null));
                        }
                        return t;
                    }
                    function ae(t, e, i) {
                        return "string" == typeof e ? g(oe(t, e), i) : g(oe(t, ""), e);
                    }
                    var re = new (class {
                        constructor(t, e) {
                            (this.animation = void 0),
                                (this.backgroundColor = "rgba(0,0,0,0.1)"),
                                (this.borderColor = "rgba(0,0,0,0.1)"),
                                (this.color = "#666"),
                                (this.datasets = {}),
                                (this.devicePixelRatio = (t) => t.chart.platform.getDevicePixelRatio()),
                                (this.elements = {}),
                                (this.events = ["mousemove", "mouseout", "click", "touchstart", "touchmove"]),
                                (this.font = { family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif", size: 12, style: "normal", lineHeight: 1.2, weight: null }),
                                (this.hover = {}),
                                (this.hoverBackgroundColor = (t, e) => qt(e.backgroundColor)),
                                (this.hoverBorderColor = (t, e) => qt(e.borderColor)),
                                (this.hoverColor = (t, e) => qt(e.color)),
                                (this.indexAxis = "x"),
                                (this.interaction = { mode: "nearest", intersect: !0, includeInvisible: !1 }),
                                (this.maintainAspectRatio = !0),
                                (this.onHover = null),
                                (this.onClick = null),
                                (this.parsing = !0),
                                (this.plugins = {}),
                                (this.responsive = !0),
                                (this.scale = void 0),
                                (this.scales = {}),
                                (this.showLine = !0),
                                (this.drawActiveElementsOnTop = !0),
                                this.describe(t),
                                this.apply(e);
                        }
                        set(t, e) {
                            return ae(this, t, e);
                        }
                        get(t) {
                            return oe(this, t);
                        }
                        describe(t, e) {
                            return ae(ne, t, e);
                        }
                        override(t, e) {
                            return ae(se, t, e);
                        }
                        route(t, e, i, s) {
                            const o = oe(this, t),
                                a = oe(this, i),
                                l = "_" + e;
                            Object.defineProperties(o, {
                                [l]: { value: o[e], writable: !0 },
                                [e]: {
                                    enumerable: !0,
                                    get() {
                                        const t = this[l],
                                            e = a[s];
                                        return n(t) ? Object.assign({}, e, t) : r(t, e);
                                    },
                                    set(t) {
                                        this[l] = t;
                                    },
                                },
                            });
                        }
                        apply(t) {
                            t.forEach((t) => t(this));
                        }
                    })({ _scriptable: (t) => !t.startsWith("on"), _indexable: (t) => "events" !== t, hover: { _fallback: "interaction" }, interaction: { _scriptable: !1, _indexable: !1 } }, [
                        function (t) {
                            t.set("animation", { delay: void 0, duration: 1e3, easing: "easeOutQuart", fn: void 0, from: void 0, loop: void 0, to: void 0, type: void 0 }),
                                t.describe("animation", { _fallback: !1, _indexable: !1, _scriptable: (t) => "onProgress" !== t && "onComplete" !== t && "fn" !== t }),
                                t.set("animations", { colors: { type: "color", properties: Jt }, numbers: { type: "number", properties: Xt } }),
                                t.describe("animations", { _fallback: "animation" }),
                                t.set("transitions", {
                                    active: { animation: { duration: 400 } },
                                    resize: { animation: { duration: 0 } },
                                    show: { animations: { colors: { from: "transparent" }, visible: { type: "boolean", duration: 0 } } },
                                    hide: { animations: { colors: { to: "transparent" }, visible: { type: "boolean", easing: "linear", fn: (t) => 0 | t } } },
                                });
                        },
                        function (t) {
                            t.set("layout", { autoPadding: !0, padding: { top: 0, right: 0, bottom: 0, left: 0 } });
                        },
                        function (t) {
                            t.set("scale", {
                                display: !0,
                                offset: !1,
                                reverse: !1,
                                beginAtZero: !1,
                                bounds: "ticks",
                                grace: 0,
                                grid: { display: !0, lineWidth: 1, drawOnChartArea: !0, drawTicks: !0, tickLength: 8, tickWidth: (t, e) => e.lineWidth, tickColor: (t, e) => e.color, offset: !1 },
                                border: { display: !0, dash: [], dashOffset: 0, width: 1 },
                                title: { display: !1, text: "", padding: { top: 4, bottom: 4 } },
                                ticks: {
                                    minRotation: 0,
                                    maxRotation: 50,
                                    mirror: !1,
                                    textStrokeWidth: 0,
                                    textStrokeColor: "",
                                    padding: 3,
                                    display: !0,
                                    autoSkip: !0,
                                    autoSkipPadding: 3,
                                    labelOffset: 0,
                                    callback: ie.formatters.values,
                                    minor: {},
                                    major: {},
                                    align: "center",
                                    crossAlign: "near",
                                    showLabelBackdrop: !1,
                                    backdropColor: "rgba(255, 255, 255, 0.75)",
                                    backdropPadding: 2,
                                },
                            }),
                                t.route("scale.ticks", "color", "", "color"),
                                t.route("scale.grid", "color", "", "borderColor"),
                                t.route("scale.border", "color", "", "borderColor"),
                                t.route("scale.title", "color", "", "color"),
                                t.describe("scale", {
                                    _fallback: !1,
                                    _scriptable: (t) => !t.startsWith("before") && !t.startsWith("after") && "callback" !== t && "parser" !== t,
                                    _indexable: (t) => "borderDash" !== t && "tickBorderDash" !== t && "dash" !== t,
                                }),
                                t.describe("scales", { _fallback: "scale" }),
                                t.describe("scale.ticks", { _scriptable: (t) => "backdropPadding" !== t && "callback" !== t, _indexable: (t) => "backdropPadding" !== t });
                        },
                    ]);
                    function le() {
                        return "undefined" != typeof window && "undefined" != typeof document;
                    }
                    function ce(t) {
                        let e = t.parentNode;
                        return e && "[object ShadowRoot]" === e.toString() && (e = e.host), e;
                    }
                    function de(t, e, i) {
                        let s;
                        return "string" == typeof t ? ((s = parseInt(t, 10)), -1 !== t.indexOf("%") && (s = (s / 100) * e.parentNode[i])) : (s = t), s;
                    }
                    const he = (t) => t.ownerDocument.defaultView.getComputedStyle(t, null);
                    function ue(t, e) {
                        return he(t).getPropertyValue(e);
                    }
                    const pe = ["top", "right", "bottom", "left"];
                    function me(t, e, i) {
                        const s = {};
                        i = i ? "-" + i : "";
                        for (let n = 0; n < 4; n++) {
                            const o = pe[n];
                            s[o] = parseFloat(t[e + "-" + o + i]) || 0;
                        }
                        return (s.width = s.left + s.right), (s.height = s.top + s.bottom), s;
                    }
                    function fe(t, e) {
                        if ("native" in t) return t;
                        const { canvas: i, currentDevicePixelRatio: s } = e,
                            n = he(i),
                            o = "border-box" === n.boxSizing,
                            a = me(n, "padding"),
                            r = me(n, "border", "width"),
                            { x: l, y: c, box: d } = (function (t, e) {
                                const i = t.touches,
                                    s = i && i.length ? i[0] : t,
                                    { offsetX: n, offsetY: o } = s;
                                let a,
                                    r,
                                    l = !1;
                                if (((t, e, i) => (t > 0 || e > 0) && (!i || !i.shadowRoot))(n, o, t.target)) (a = n), (r = o);
                                else {
                                    const t = e.getBoundingClientRect();
                                    (a = s.clientX - t.left), (r = s.clientY - t.top), (l = !0);
                                }
                                return { x: a, y: r, box: l };
                            })(t, i),
                            h = a.left + (d && r.left),
                            u = a.top + (d && r.top);
                        let { width: p, height: m } = e;
                        return o && ((p -= a.width + r.width), (m -= a.height + r.height)), { x: Math.round((((l - h) / p) * i.width) / s), y: Math.round((((c - u) / m) * i.height) / s) };
                    }
                    const ge = (t) => Math.round(10 * t) / 10;
                    function be(t, e, i, s) {
                        const n = he(t),
                            o = me(n, "margin"),
                            a = de(n.maxWidth, t, "clientWidth") || L,
                            r = de(n.maxHeight, t, "clientHeight") || L,
                            l = (function (t, e, i) {
                                let s, n;
                                if (void 0 === e || void 0 === i) {
                                    const o = ce(t);
                                    if (o) {
                                        const t = o.getBoundingClientRect(),
                                            a = he(o),
                                            r = me(a, "border", "width"),
                                            l = me(a, "padding");
                                        (e = t.width - l.width - r.width), (i = t.height - l.height - r.height), (s = de(a.maxWidth, o, "clientWidth")), (n = de(a.maxHeight, o, "clientHeight"));
                                    } else (e = t.clientWidth), (i = t.clientHeight);
                                }
                                return { width: e, height: i, maxWidth: s || L, maxHeight: n || L };
                            })(t, e, i);
                        let { width: c, height: d } = l;
                        if ("content-box" === n.boxSizing) {
                            const t = me(n, "border", "width"),
                                e = me(n, "padding");
                            (c -= e.width + t.width), (d -= e.height + t.height);
                        }
                        return (
                            (c = Math.max(0, c - o.width)),
                            (d = Math.max(0, s ? Math.floor(c / s) : d - o.height)),
                            (c = ge(Math.min(c, a, l.maxWidth))),
                            (d = ge(Math.min(d, r, l.maxHeight))),
                            c && !d && (d = ge(c / 2)),
                            (void 0 !== e || void 0 !== i) && s && l.height && d > l.height && ((d = l.height), (c = ge(Math.floor(d * s)))),
                            { width: c, height: d }
                        );
                    }
                    function xe(t, e, i) {
                        const s = e || 1,
                            n = Math.floor(t.height * s),
                            o = Math.floor(t.width * s);
                        (t.height = n / s), (t.width = o / s);
                        const a = t.canvas;
                        return (
                            a.style && (i || (!a.style.height && !a.style.width)) && ((a.style.height = `${t.height}px`), (a.style.width = `${t.width}px`)),
                            (t.currentDevicePixelRatio !== s || a.height !== n || a.width !== o) && ((t.currentDevicePixelRatio = s), (a.height = n), (a.width = o), t.ctx.setTransform(s, 0, 0, s, 0, 0), !0)
                        );
                    }
                    const ve = (function () {
                        let t = !1;
                        try {
                            const e = {
                                get passive() {
                                    return (t = !0), !1;
                                },
                            };
                            window.addEventListener("test", null, e), window.removeEventListener("test", null, e);
                        } catch (t) {}
                        return t;
                    })();
                    function ye(t, e) {
                        const i = ue(t, e),
                            s = i && i.match(/^(\d+)(\.\d+)?px$/);
                        return s ? +s[1] : void 0;
                    }
                    function _e(t) {
                        return !t || i(t.size) || i(t.family) ? null : (t.style ? t.style + " " : "") + (t.weight ? t.weight + " " : "") + t.size + "px " + t.family;
                    }
                    function Ce(t, e, i, s, n) {
                        let o = e[n];
                        return o || ((o = e[n] = t.measureText(n).width), i.push(n)), o > s && (s = o), s;
                    }
                    function we(t, e, i, n) {
                        let o = ((n = n || {}).data = n.data || {}),
                            a = (n.garbageCollect = n.garbageCollect || []);
                        n.font !== e && ((o = n.data = {}), (a = n.garbageCollect = []), (n.font = e)), t.save(), (t.font = e);
                        let r = 0;
                        const l = i.length;
                        let c, d, h, u, p;
                        for (c = 0; c < l; c++)
                            if (((u = i[c]), null != u && !0 !== s(u))) r = Ce(t, o, a, r, u);
                            else if (s(u)) for (d = 0, h = u.length; d < h; d++) (p = u[d]), null == p || s(p) || (r = Ce(t, o, a, r, p));
                        t.restore();
                        const m = a.length / 2;
                        if (m > i.length) {
                            for (c = 0; c < m; c++) delete o[a[c]];
                            a.splice(0, m);
                        }
                        return r;
                    }
                    function ze(t, e, i) {
                        const s = t.currentDevicePixelRatio,
                            n = 0 !== i ? Math.max(i / 2, 0.5) : 0;
                        return Math.round((e - n) * s) / s + n;
                    }
                    function ke(t, e) {
                        (e = e || t.getContext("2d")).save(), e.resetTransform(), e.clearRect(0, 0, t.width, t.height), e.restore();
                    }
                    function Me(t, e, i, s) {
                        je(t, e, i, s, null);
                    }
                    function je(t, e, i, s, n) {
                        let o, a, r, l, c, d, h, u;
                        const p = e.pointStyle,
                            m = e.rotation,
                            f = e.radius;
                        let g = (m || 0) * D;
                        if (p && "object" == typeof p && ((o = p.toString()), "[object HTMLImageElement]" === o || "[object HTMLCanvasElement]" === o))
                            return t.save(), t.translate(i, s), t.rotate(g), t.drawImage(p, -p.width / 2, -p.height / 2, p.width, p.height), void t.restore();
                        if (!(isNaN(f) || f <= 0)) {
                            switch ((t.beginPath(), p)) {
                                default:
                                    n ? t.ellipse(i, s, n / 2, f, 0, 0, S) : t.arc(i, s, f, 0, S), t.closePath();
                                    break;
                                case "triangle":
                                    (d = n ? n / 2 : f),
                                        t.moveTo(i + Math.sin(g) * d, s - Math.cos(g) * f),
                                        (g += O),
                                        t.lineTo(i + Math.sin(g) * d, s - Math.cos(g) * f),
                                        (g += O),
                                        t.lineTo(i + Math.sin(g) * d, s - Math.cos(g) * f),
                                        t.closePath();
                                    break;
                                case "rectRounded":
                                    (c = 0.516 * f),
                                        (l = f - c),
                                        (a = Math.cos(g + E) * l),
                                        (h = Math.cos(g + E) * (n ? n / 2 - c : l)),
                                        (r = Math.sin(g + E) * l),
                                        (u = Math.sin(g + E) * (n ? n / 2 - c : l)),
                                        t.arc(i - h, s - r, c, g - j, g - T),
                                        t.arc(i + u, s - a, c, g - T, g),
                                        t.arc(i + h, s + r, c, g, g + T),
                                        t.arc(i - u, s + a, c, g + T, g + j),
                                        t.closePath();
                                    break;
                                case "rect":
                                    if (!m) {
                                        (l = Math.SQRT1_2 * f), (d = n ? n / 2 : l), t.rect(i - d, s - l, 2 * d, 2 * l);
                                        break;
                                    }
                                    g += E;
                                case "rectRot":
                                    (h = Math.cos(g) * (n ? n / 2 : f)),
                                        (a = Math.cos(g) * f),
                                        (r = Math.sin(g) * f),
                                        (u = Math.sin(g) * (n ? n / 2 : f)),
                                        t.moveTo(i - h, s - r),
                                        t.lineTo(i + u, s - a),
                                        t.lineTo(i + h, s + r),
                                        t.lineTo(i - u, s + a),
                                        t.closePath();
                                    break;
                                case "crossRot":
                                    g += E;
                                case "cross":
                                    (h = Math.cos(g) * (n ? n / 2 : f)),
                                        (a = Math.cos(g) * f),
                                        (r = Math.sin(g) * f),
                                        (u = Math.sin(g) * (n ? n / 2 : f)),
                                        t.moveTo(i - h, s - r),
                                        t.lineTo(i + h, s + r),
                                        t.moveTo(i + u, s - a),
                                        t.lineTo(i - u, s + a);
                                    break;
                                case "star":
                                    (h = Math.cos(g) * (n ? n / 2 : f)),
                                        (a = Math.cos(g) * f),
                                        (r = Math.sin(g) * f),
                                        (u = Math.sin(g) * (n ? n / 2 : f)),
                                        t.moveTo(i - h, s - r),
                                        t.lineTo(i + h, s + r),
                                        t.moveTo(i + u, s - a),
                                        t.lineTo(i - u, s + a),
                                        (g += E),
                                        (h = Math.cos(g) * (n ? n / 2 : f)),
                                        (a = Math.cos(g) * f),
                                        (r = Math.sin(g) * f),
                                        (u = Math.sin(g) * (n ? n / 2 : f)),
                                        t.moveTo(i - h, s - r),
                                        t.lineTo(i + h, s + r),
                                        t.moveTo(i + u, s - a),
                                        t.lineTo(i - u, s + a);
                                    break;
                                case "line":
                                    (a = n ? n / 2 : Math.cos(g) * f), (r = Math.sin(g) * f), t.moveTo(i - a, s - r), t.lineTo(i + a, s + r);
                                    break;
                                case "dash":
                                    t.moveTo(i, s), t.lineTo(i + Math.cos(g) * (n ? n / 2 : f), s + Math.sin(g) * f);
                            }
                            t.fill(), e.borderWidth > 0 && t.stroke();
                        }
                    }
                    function Se(t, e, i) {
                        return (i = i || 0.5), !e || (t && t.x > e.left - i && t.x < e.right + i && t.y > e.top - i && t.y < e.bottom + i);
                    }
                    function Ae(t, e) {
                        t.save(), t.beginPath(), t.rect(e.left, e.top, e.right - e.left, e.bottom - e.top), t.clip();
                    }
                    function Le(t) {
                        t.restore();
                    }
                    function De(t, e, i, s, n) {
                        if (!e) return t.lineTo(i.x, i.y);
                        if ("middle" === n) {
                            const s = (e.x + i.x) / 2;
                            t.lineTo(s, e.y), t.lineTo(s, i.y);
                        } else ("after" === n) != !!s ? t.lineTo(e.x, i.y) : t.lineTo(i.x, e.y);
                        t.lineTo(i.x, i.y);
                    }
                    function Te(t, e, i, s) {
                        if (!e) return t.lineTo(i.x, i.y);
                        t.bezierCurveTo(s ? e.cp1x : e.cp2x, s ? e.cp1y : e.cp2y, s ? i.cp2x : i.cp1x, s ? i.cp2y : i.cp1y, i.x, i.y);
                    }
                    function Ee(t, e, n, o, a, r = {}) {
                        const l = s(e) ? e : [e],
                            c = r.strokeWidth > 0 && "" !== r.strokeColor;
                        let d, h;
                        for (
                            t.save(),
                                t.font = a.string,
                                (function (t, e) {
                                    e.translation && t.translate(e.translation[0], e.translation[1]),
                                        i(e.rotation) || t.rotate(e.rotation),
                                        e.color && (t.fillStyle = e.color),
                                        e.textAlign && (t.textAlign = e.textAlign),
                                        e.textBaseline && (t.textBaseline = e.textBaseline);
                                })(t, r),
                                d = 0;
                            d < l.length;
                            ++d
                        )
                            (h = l[d]),
                                r.backdrop && Pe(t, r.backdrop),
                                c && (r.strokeColor && (t.strokeStyle = r.strokeColor), i(r.strokeWidth) || (t.lineWidth = r.strokeWidth), t.strokeText(h, n, o, r.maxWidth)),
                                t.fillText(h, n, o, r.maxWidth),
                                Oe(t, n, o, h, r),
                                (o += a.lineHeight);
                        t.restore();
                    }
                    function Oe(t, e, i, s, n) {
                        if (n.strikethrough || n.underline) {
                            const o = t.measureText(s),
                                a = e - o.actualBoundingBoxLeft,
                                r = e + o.actualBoundingBoxRight,
                                l = i - o.actualBoundingBoxAscent,
                                c = i + o.actualBoundingBoxDescent,
                                d = n.strikethrough ? (l + c) / 2 : c;
                            (t.strokeStyle = t.fillStyle), t.beginPath(), (t.lineWidth = n.decorationWidth || 2), t.moveTo(a, d), t.lineTo(r, d), t.stroke();
                        }
                    }
                    function Pe(t, e) {
                        const i = t.fillStyle;
                        (t.fillStyle = e.color), t.fillRect(e.left, e.top, e.width, e.height), (t.fillStyle = i);
                    }
                    function Ie(t, e) {
                        const { x: i, y: s, w: n, h: o, radius: a } = e;
                        t.arc(i + a.topLeft, s + a.topLeft, a.topLeft, -T, j, !0),
                            t.lineTo(i, s + o - a.bottomLeft),
                            t.arc(i + a.bottomLeft, s + o - a.bottomLeft, a.bottomLeft, j, T, !0),
                            t.lineTo(i + n - a.bottomRight, s + o),
                            t.arc(i + n - a.bottomRight, s + o - a.bottomRight, a.bottomRight, T, 0, !0),
                            t.lineTo(i + n, s + a.topRight),
                            t.arc(i + n - a.topRight, s + a.topRight, a.topRight, 0, -T, !0),
                            t.lineTo(i + a.topLeft, s);
                    }
                    function Ne(t, e = [""], i = t, s, n = () => t[0]) {
                        w(s) || (s = Ge("_fallback", t));
                        const o = { [Symbol.toStringTag]: "Object", _cacheable: !0, _scopes: t, _rootScopes: i, _fallback: s, _getTarget: n, override: (n) => Ne([n, ...t], e, i, s) };
                        return new Proxy(o, {
                            deleteProperty: (e, i) => (delete e[i], delete e._keys, delete t[0][i], !0),
                            get: (i, s) =>
                                He(i, s, () =>
                                    (function (t, e, i, s) {
                                        let n;
                                        for (const o of e) if (((n = Ge(Fe(o, t), i)), w(n))) return Be(t, n) ? Ue(i, s, t, n) : n;
                                    })(s, e, t, i)
                                ),
                            getOwnPropertyDescriptor: (t, e) => Reflect.getOwnPropertyDescriptor(t._scopes[0], e),
                            getPrototypeOf: () => Reflect.getPrototypeOf(t[0]),
                            has: (t, e) => Ke(t).includes(e),
                            ownKeys: (t) => Ke(t),
                            set(t, e, i) {
                                const s = t._storage || (t._storage = n());
                                return (t[e] = s[e] = i), delete t._keys, !0;
                            },
                        });
                    }
                    function Re(t, e, i, o) {
                        const a = { _cacheable: !1, _proxy: t, _context: e, _subProxy: i, _stack: new Set(), _descriptors: Ve(t, o), setContext: (e) => Re(t, e, i, o), override: (s) => Re(t.override(s), e, i, o) };
                        return new Proxy(a, {
                            deleteProperty: (e, i) => (delete e[i], delete t[i], !0),
                            get: (t, e, i) =>
                                He(t, e, () =>
                                    (function (t, e, i) {
                                        const { _proxy: o, _context: a, _subProxy: r, _descriptors: l } = t;
                                        let c = o[e];
                                        return (
                                            z(c) &&
                                                l.isScriptable(e) &&
                                                (c = (function (t, e, i, s) {
                                                    const { _proxy: n, _context: o, _subProxy: a, _stack: r } = i;
                                                    if (r.has(t)) throw new Error("Recursion detected: " + Array.from(r).join("->") + "->" + t);
                                                    return r.add(t), (e = e(o, a || s)), r.delete(t), Be(t, e) && (e = Ue(n._scopes, n, t, e)), e;
                                                })(e, c, t, i)),
                                            s(c) &&
                                                c.length &&
                                                (c = (function (t, e, i, s) {
                                                    const { _proxy: o, _context: a, _subProxy: r, _descriptors: l } = i;
                                                    if (w(a.index) && s(t)) e = e[a.index % e.length];
                                                    else if (n(e[0])) {
                                                        const i = e,
                                                            s = o._scopes.filter((t) => t !== i);
                                                        e = [];
                                                        for (const n of i) {
                                                            const i = Ue(s, o, t, n);
                                                            e.push(Re(i, a, r && r[t], l));
                                                        }
                                                    }
                                                    return e;
                                                })(e, c, t, l.isIndexable)),
                                            Be(e, c) && (c = Re(c, a, r && r[e], l)),
                                            c
                                        );
                                    })(t, e, i)
                                ),
                            getOwnPropertyDescriptor: (e, i) => (e._descriptors.allKeys ? (Reflect.has(t, i) ? { enumerable: !0, configurable: !0 } : void 0) : Reflect.getOwnPropertyDescriptor(t, i)),
                            getPrototypeOf: () => Reflect.getPrototypeOf(t),
                            has: (e, i) => Reflect.has(t, i),
                            ownKeys: () => Reflect.ownKeys(t),
                            set: (e, i, s) => ((t[i] = s), delete e[i], !0),
                        });
                    }
                    function Ve(t, e = { scriptable: !0, indexable: !0 }) {
                        const { _scriptable: i = e.scriptable, _indexable: s = e.indexable, _allKeys: n = e.allKeys } = t;
                        return { allKeys: n, scriptable: i, indexable: s, isScriptable: z(i) ? i : () => i, isIndexable: z(s) ? s : () => s };
                    }
                    const Fe = (t, e) => (t ? t + C(e) : e),
                        Be = (t, e) => n(e) && "adapters" !== t && (null === Object.getPrototypeOf(e) || e.constructor === Object);
                    function He(t, e, i) {
                        if (Object.prototype.hasOwnProperty.call(t, e)) return t[e];
                        const s = i();
                        return (t[e] = s), s;
                    }
                    function We(t, e, i) {
                        return z(t) ? t(e, i) : t;
                    }
                    const Ye = (t, e) => (!0 === t ? e : "string" == typeof t ? _(e, t) : void 0);
                    function $e(t, e, i, s, n) {
                        for (const o of e) {
                            const e = Ye(i, o);
                            if (e) {
                                t.add(e);
                                const o = We(e._fallback, i, n);
                                if (w(o) && o !== i && o !== s) return o;
                            } else if (!1 === e && w(s) && i !== s) return null;
                        }
                        return !1;
                    }
                    function Ue(t, e, i, o) {
                        const a = e._rootScopes,
                            r = We(e._fallback, i, o),
                            l = [...t, ...a],
                            c = new Set();
                        c.add(o);
                        let d = Ze(c, l, i, r || i, o);
                        return (
                            null !== d &&
                            (!w(r) || r === i || ((d = Ze(c, l, r, d, o)), null !== d)) &&
                            Ne(Array.from(c), [""], a, r, () =>
                                (function (t, e, i) {
                                    const o = t._getTarget();
                                    e in o || (o[e] = {});
                                    const a = o[e];
                                    return s(a) && n(i) ? i : a || {};
                                })(e, i, o)
                            )
                        );
                    }
                    function Ze(t, e, i, s, n) {
                        for (; i; ) i = $e(t, e, i, s, n);
                        return i;
                    }
                    function Ge(t, e) {
                        for (const i of e) {
                            if (!i) continue;
                            const e = i[t];
                            if (w(e)) return e;
                        }
                    }
                    function Ke(t) {
                        let e = t._keys;
                        return (
                            e ||
                                (e = t._keys = (function (t) {
                                    const e = new Set();
                                    for (const i of t) for (const t of Object.keys(i).filter((t) => !t.startsWith("_"))) e.add(t);
                                    return Array.from(e);
                                })(t._scopes)),
                            e
                        );
                    }
                    function qe(t, e, i, s) {
                        const { iScale: n } = t,
                            { key: o = "r" } = this._parsing,
                            a = new Array(s);
                        let r, l, c, d;
                        for (r = 0, l = s; r < l; ++r) (c = r + i), (d = e[c]), (a[r] = { r: n.parse(_(d, o), c) });
                        return a;
                    }
                    const Xe = Number.EPSILON || 1e-14,
                        Je = (t, e) => e < t.length && !t[e].skip && t[e],
                        Qe = (t) => ("x" === t ? "y" : "x");
                    function ti(t, e, i, s) {
                        const n = t.skip ? e : t,
                            o = e,
                            a = i.skip ? e : i,
                            r = Z(o, n),
                            l = Z(a, o);
                        let c = r / (r + l),
                            d = l / (r + l);
                        (c = isNaN(c) ? 0 : c), (d = isNaN(d) ? 0 : d);
                        const h = s * c,
                            u = s * d;
                        return { previous: { x: o.x - h * (a.x - n.x), y: o.y - h * (a.y - n.y) }, next: { x: o.x + u * (a.x - n.x), y: o.y + u * (a.y - n.y) } };
                    }
                    function ei(t, e = "x") {
                        const i = Qe(e),
                            s = t.length,
                            n = Array(s).fill(0),
                            o = Array(s);
                        let a,
                            r,
                            l,
                            c = Je(t, 0);
                        for (a = 0; a < s; ++a)
                            if (((r = l), (l = c), (c = Je(t, a + 1)), l)) {
                                if (c) {
                                    const t = c[e] - l[e];
                                    n[a] = 0 !== t ? (c[i] - l[i]) / t : 0;
                                }
                                o[a] = r ? (c ? (I(n[a - 1]) !== I(n[a]) ? 0 : (n[a - 1] + n[a]) / 2) : n[a - 1]) : n[a];
                            }
                        !(function (t, e, i) {
                            const s = t.length;
                            let n,
                                o,
                                a,
                                r,
                                l,
                                c = Je(t, 0);
                            for (let d = 0; d < s - 1; ++d)
                                (l = c),
                                    (c = Je(t, d + 1)),
                                    l &&
                                        c &&
                                        (N(e[d], 0, Xe)
                                            ? (i[d] = i[d + 1] = 0)
                                            : ((n = i[d] / e[d]), (o = i[d + 1] / e[d]), (r = Math.pow(n, 2) + Math.pow(o, 2)), r <= 9 || ((a = 3 / Math.sqrt(r)), (i[d] = n * a * e[d]), (i[d + 1] = o * a * e[d]))));
                        })(t, n, o),
                            (function (t, e, i = "x") {
                                const s = Qe(i),
                                    n = t.length;
                                let o,
                                    a,
                                    r,
                                    l = Je(t, 0);
                                for (let c = 0; c < n; ++c) {
                                    if (((a = r), (r = l), (l = Je(t, c + 1)), !r)) continue;
                                    const n = r[i],
                                        d = r[s];
                                    a && ((o = (n - a[i]) / 3), (r[`cp1${i}`] = n - o), (r[`cp1${s}`] = d - o * e[c])), l && ((o = (l[i] - n) / 3), (r[`cp2${i}`] = n + o), (r[`cp2${s}`] = d + o * e[c]));
                                }
                            })(t, o, e);
                    }
                    function ii(t, e, i) {
                        return Math.max(Math.min(t, i), e);
                    }
                    function si(t, e, i, s, n) {
                        let o, a, r, l;
                        if ((e.spanGaps && (t = t.filter((t) => !t.skip)), "monotone" === e.cubicInterpolationMode)) ei(t, n);
                        else {
                            let i = s ? t[t.length - 1] : t[0];
                            for (o = 0, a = t.length; o < a; ++o)
                                (r = t[o]), (l = ti(i, r, t[Math.min(o + 1, a - (s ? 0 : 1)) % a], e.tension)), (r.cp1x = l.previous.x), (r.cp1y = l.previous.y), (r.cp2x = l.next.x), (r.cp2y = l.next.y), (i = r);
                        }
                        e.capBezierPoints &&
                            (function (t, e) {
                                let i,
                                    s,
                                    n,
                                    o,
                                    a,
                                    r = Se(t[0], e);
                                for (i = 0, s = t.length; i < s; ++i)
                                    (a = o),
                                        (o = r),
                                        (r = i < s - 1 && Se(t[i + 1], e)),
                                        o && ((n = t[i]), a && ((n.cp1x = ii(n.cp1x, e.left, e.right)), (n.cp1y = ii(n.cp1y, e.top, e.bottom))), r && ((n.cp2x = ii(n.cp2x, e.left, e.right)), (n.cp2y = ii(n.cp2y, e.top, e.bottom))));
                            })(t, i);
                    }
                    const ni = (t) => 0 === t || 1 === t,
                        oi = (t, e, i) => -Math.pow(2, 10 * (t -= 1)) * Math.sin(((t - e) * S) / i),
                        ai = (t, e, i) => Math.pow(2, -10 * t) * Math.sin(((t - e) * S) / i) + 1,
                        ri = {
                            linear: (t) => t,
                            easeInQuad: (t) => t * t,
                            easeOutQuad: (t) => -t * (t - 2),
                            easeInOutQuad: (t) => ((t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1)),
                            easeInCubic: (t) => t * t * t,
                            easeOutCubic: (t) => (t -= 1) * t * t + 1,
                            easeInOutCubic: (t) => ((t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2)),
                            easeInQuart: (t) => t * t * t * t,
                            easeOutQuart: (t) => -((t -= 1) * t * t * t - 1),
                            easeInOutQuart: (t) => ((t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2)),
                            easeInQuint: (t) => t * t * t * t * t,
                            easeOutQuint: (t) => (t -= 1) * t * t * t * t + 1,
                            easeInOutQuint: (t) => ((t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2)),
                            easeInSine: (t) => 1 - Math.cos(t * T),
                            easeOutSine: (t) => Math.sin(t * T),
                            easeInOutSine: (t) => -0.5 * (Math.cos(j * t) - 1),
                            easeInExpo: (t) => (0 === t ? 0 : Math.pow(2, 10 * (t - 1))),
                            easeOutExpo: (t) => (1 === t ? 1 : 1 - Math.pow(2, -10 * t)),
                            easeInOutExpo: (t) => (ni(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (2 * t - 1)) : 0.5 * (2 - Math.pow(2, -10 * (2 * t - 1)))),
                            easeInCirc: (t) => (t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1)),
                            easeOutCirc: (t) => Math.sqrt(1 - (t -= 1) * t),
                            easeInOutCirc: (t) => ((t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1)),
                            easeInElastic: (t) => (ni(t) ? t : oi(t, 0.075, 0.3)),
                            easeOutElastic: (t) => (ni(t) ? t : ai(t, 0.075, 0.3)),
                            easeInOutElastic(t) {
                                const e = 0.1125;
                                return ni(t) ? t : t < 0.5 ? 0.5 * oi(2 * t, e, 0.45) : 0.5 + 0.5 * ai(2 * t - 1, e, 0.45);
                            },
                            easeInBack(t) {
                                const e = 1.70158;
                                return t * t * ((e + 1) * t - e);
                            },
                            easeOutBack(t) {
                                const e = 1.70158;
                                return (t -= 1) * t * ((e + 1) * t + e) + 1;
                            },
                            easeInOutBack(t) {
                                let e = 1.70158;
                                return (t /= 0.5) < 1 ? t * t * ((1 + (e *= 1.525)) * t - e) * 0.5 : 0.5 * ((t -= 2) * t * ((1 + (e *= 1.525)) * t + e) + 2);
                            },
                            easeInBounce: (t) => 1 - ri.easeOutBounce(1 - t),
                            easeOutBounce(t) {
                                const e = 7.5625,
                                    i = 2.75;
                                return t < 1 / i ? e * t * t : t < 2 / i ? e * (t -= 1.5 / i) * t + 0.75 : t < 2.5 / i ? e * (t -= 2.25 / i) * t + 0.9375 : e * (t -= 2.625 / i) * t + 0.984375;
                            },
                            easeInOutBounce: (t) => (t < 0.5 ? 0.5 * ri.easeInBounce(2 * t) : 0.5 * ri.easeOutBounce(2 * t - 1) + 0.5),
                        };
                    var li = ri;
                    function ci(t, e, i, s) {
                        return { x: t.x + i * (e.x - t.x), y: t.y + i * (e.y - t.y) };
                    }
                    function di(t, e, i, s) {
                        return { x: t.x + i * (e.x - t.x), y: "middle" === s ? (i < 0.5 ? t.y : e.y) : "after" === s ? (i < 1 ? t.y : e.y) : i > 0 ? e.y : t.y };
                    }
                    function hi(t, e, i, s) {
                        const n = { x: t.cp2x, y: t.cp2y },
                            o = { x: e.cp1x, y: e.cp1y },
                            a = ci(t, n, i),
                            r = ci(n, o, i),
                            l = ci(o, e, i),
                            c = ci(a, r, i),
                            d = ci(r, l, i);
                        return ci(c, d, i);
                    }
                    const ui = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,
                        pi = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
                    function mi(t, e) {
                        const i = ("" + t).match(ui);
                        if (!i || "normal" === i[1]) return 1.2 * e;
                        switch (((t = +i[2]), i[3])) {
                            case "px":
                                return t;
                            case "%":
                                t /= 100;
                        }
                        return e * t;
                    }
                    function fi(t, e) {
                        const i = {},
                            s = n(e),
                            o = s ? Object.keys(e) : e,
                            a = n(t) ? (s ? (i) => r(t[i], t[e[i]]) : (e) => t[e]) : () => t;
                        for (const t of o) i[t] = +a(t) || 0;
                        return i;
                    }
                    function gi(t) {
                        return fi(t, { top: "y", right: "x", bottom: "y", left: "x" });
                    }
                    function bi(t) {
                        return fi(t, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
                    }
                    function xi(t) {
                        const e = gi(t);
                        return (e.width = e.left + e.right), (e.height = e.top + e.bottom), e;
                    }
                    function vi(t, e) {
                        (t = t || {}), (e = e || re.font);
                        let i = r(t.size, e.size);
                        "string" == typeof i && (i = parseInt(i, 10));
                        let s = r(t.style, e.style);
                        s && !("" + s).match(pi) && (console.warn('Invalid font style specified: "' + s + '"'), (s = void 0));
                        const n = { family: r(t.family, e.family), lineHeight: mi(r(t.lineHeight, e.lineHeight), i), size: i, style: s, weight: r(t.weight, e.weight), string: "" };
                        return (n.string = _e(n)), n;
                    }
                    function yi(t, e, i, n) {
                        let o,
                            a,
                            r,
                            l = !0;
                        for (o = 0, a = t.length; o < a; ++o)
                            if (((r = t[o]), void 0 !== r && (void 0 !== e && "function" == typeof r && ((r = r(e)), (l = !1)), void 0 !== i && s(r) && ((r = r[i % r.length]), (l = !1)), void 0 !== r)))
                                return n && !l && (n.cacheable = !1), r;
                    }
                    function _i(t, e, i) {
                        const { min: s, max: n } = t,
                            o = c(e, (n - s) / 2),
                            a = (t, e) => (i && 0 === t ? 0 : t + e);
                        return { min: a(s, -Math.abs(o)), max: a(n, o) };
                    }
                    function Ci(t, e) {
                        return Object.assign(Object.create(t), e);
                    }
                    function wi(t, e, i) {
                        return t
                            ? (function (t, e) {
                                  return {
                                      x: (i) => t + t + e - i,
                                      setWidth(t) {
                                          e = t;
                                      },
                                      textAlign: (t) => ("center" === t ? t : "right" === t ? "left" : "right"),
                                      xPlus: (t, e) => t - e,
                                      leftForLtr: (t, e) => t - e,
                                  };
                              })(e, i)
                            : { x: (t) => t, setWidth(t) {}, textAlign: (t) => t, xPlus: (t, e) => t + e, leftForLtr: (t, e) => t };
                    }
                    function zi(t, e) {
                        let i, s;
                        ("ltr" !== e && "rtl" !== e) || ((i = t.canvas.style), (s = [i.getPropertyValue("direction"), i.getPropertyPriority("direction")]), i.setProperty("direction", e, "important"), (t.prevTextDirection = s));
                    }
                    function ki(t, e) {
                        void 0 !== e && (delete t.prevTextDirection, t.canvas.style.setProperty("direction", e[0], e[1]));
                    }
                    function Mi(t) {
                        return "angle" === t ? { between: q, compare: G, normalize: K } : { between: Q, compare: (t, e) => t - e, normalize: (t) => t };
                    }
                    function ji({ start: t, end: e, count: i, loop: s, style: n }) {
                        return { start: t % i, end: e % i, loop: s && (e - t + 1) % i == 0, style: n };
                    }
                    function Si(t, e, i) {
                        if (!i) return [t];
                        const { property: s, start: n, end: o } = i,
                            a = e.length,
                            { compare: r, between: l, normalize: c } = Mi(s),
                            { start: d, end: h, loop: u, style: p } = (function (t, e, i) {
                                const { property: s, start: n, end: o } = i,
                                    { between: a, normalize: r } = Mi(s),
                                    l = e.length;
                                let c,
                                    d,
                                    { start: h, end: u, loop: p } = t;
                                if (p) {
                                    for (h += l, u += l, c = 0, d = l; c < d && a(r(e[h % l][s]), n, o); ++c) h--, u--;
                                    (h %= l), (u %= l);
                                }
                                return u < h && (u += l), { start: h, end: u, loop: p, style: t.style };
                            })(t, e, i),
                            m = [];
                        let f,
                            g,
                            b,
                            x = !1,
                            v = null;
                        const y = () => x || (l(n, b, f) && 0 !== r(n, b)),
                            _ = () => !x || 0 === r(o, f) || l(o, b, f);
                        for (let t = d, i = d; t <= h; ++t)
                            (g = e[t % a]),
                                g.skip ||
                                    ((f = c(g[s])),
                                    f !== b && ((x = l(f, n, o)), null === v && y() && (v = 0 === r(f, n) ? t : i), null !== v && _() && (m.push(ji({ start: v, end: t, loop: u, count: a, style: p })), (v = null)), (i = t), (b = f)));
                        return null !== v && m.push(ji({ start: v, end: h, loop: u, count: a, style: p })), m;
                    }
                    function Ai(t, e) {
                        const i = [],
                            s = t.segments;
                        for (let n = 0; n < s.length; n++) {
                            const o = Si(s[n], t.points, e);
                            o.length && i.push(...o);
                        }
                        return i;
                    }
                    function Li(t, e) {
                        const i = t.points,
                            s = t.options.spanGaps,
                            n = i.length;
                        if (!n) return [];
                        const o = !!t._loop,
                            { start: a, end: r } = (function (t, e, i, s) {
                                let n = 0,
                                    o = e - 1;
                                if (i && !s) for (; n < e && !t[n].skip; ) n++;
                                for (; n < e && t[n].skip; ) n++;
                                for (n %= e, i && (o += n); o > n && t[o % e].skip; ) o--;
                                return (o %= e), { start: n, end: o };
                            })(i, n, o, s);
                        return (function (t, e, i, s) {
                            return s && s.setContext && i
                                ? (function (t, e, i, s) {
                                      const n = t._chart.getContext(),
                                          o = Di(t.options),
                                          {
                                              _datasetIndex: a,
                                              options: { spanGaps: r },
                                          } = t,
                                          l = i.length,
                                          c = [];
                                      let d = o,
                                          h = e[0].start,
                                          u = h;
                                      function p(t, e, s, n) {
                                          const o = r ? -1 : 1;
                                          if (t !== e) {
                                              for (t += l; i[t % l].skip; ) t -= o;
                                              for (; i[e % l].skip; ) e += o;
                                              t % l != e % l && (c.push({ start: t % l, end: e % l, loop: s, style: n }), (d = n), (h = e % l));
                                          }
                                      }
                                      for (const t of e) {
                                          h = r ? h : t.start;
                                          let e,
                                              o = i[h % l];
                                          for (u = h + 1; u <= t.end; u++) {
                                              const r = i[u % l];
                                              (e = Di(s.setContext(Ci(n, { type: "segment", p0: o, p1: r, p0DataIndex: (u - 1) % l, p1DataIndex: u % l, datasetIndex: a })))), Ti(e, d) && p(h, u - 1, t.loop, d), (o = r), (d = e);
                                          }
                                          h < u - 1 && p(h, u - 1, t.loop, d);
                                      }
                                      return c;
                                  })(t, e, i, s)
                                : e;
                        })(
                            t,
                            !0 === s
                                ? [{ start: a, end: r, loop: o }]
                                : (function (t, e, i, s) {
                                      const n = t.length,
                                          o = [];
                                      let a,
                                          r = e,
                                          l = t[e];
                                      for (a = e + 1; a <= i; ++a) {
                                          const i = t[a % n];
                                          i.skip || i.stop ? l.skip || ((s = !1), o.push({ start: e % n, end: (a - 1) % n, loop: s }), (e = r = i.stop ? a : null)) : ((r = a), l.skip && (e = a)), (l = i);
                                      }
                                      return null !== r && o.push({ start: e % n, end: r % n, loop: s }), o;
                                  })(i, a, r < a ? r + n : r, !!t._fullLoop && 0 === a && r === n - 1),
                            i,
                            e
                        );
                    }
                    function Di(t) {
                        return {
                            backgroundColor: t.backgroundColor,
                            borderCapStyle: t.borderCapStyle,
                            borderDash: t.borderDash,
                            borderDashOffset: t.borderDashOffset,
                            borderJoinStyle: t.borderJoinStyle,
                            borderWidth: t.borderWidth,
                            borderColor: t.borderColor,
                        };
                    }
                    function Ti(t, e) {
                        return e && JSON.stringify(t) !== JSON.stringify(e);
                    }
                    var Ei = Object.freeze({
                        __proto__: null,
                        easingEffects: li,
                        isPatternOrGradient: Gt,
                        color: Kt,
                        getHoverColor: qt,
                        noop: t,
                        uid: e,
                        isNullOrUndef: i,
                        isArray: s,
                        isObject: n,
                        isFinite: o,
                        finiteOrDefault: a,
                        valueOrDefault: r,
                        toPercentage: l,
                        toDimension: c,
                        callback: d,
                        each: h,
                        _elementsEqual: u,
                        clone: p,
                        _merger: f,
                        merge: g,
                        mergeIf: b,
                        _mergerIf: x,
                        _deprecated: function (t, e, i, s) {
                            void 0 !== e && console.warn(t + ': "' + i + '" is deprecated. Please use "' + s + '" instead');
                        },
                        _splitKey: y,
                        resolveObjectKey: _,
                        _capitalize: C,
                        defined: w,
                        isFunction: z,
                        setsEqual: k,
                        _isClickEvent: M,
                        toFontString: _e,
                        _measureText: Ce,
                        _longestText: we,
                        _alignPixel: ze,
                        clearCanvas: ke,
                        drawPoint: Me,
                        drawPointLegend: je,
                        _isPointInArea: Se,
                        clipArea: Ae,
                        unclipArea: Le,
                        _steppedLineTo: De,
                        _bezierCurveTo: Te,
                        renderText: Ee,
                        addRoundedRectPath: Ie,
                        _lookup: tt,
                        _lookupByKey: et,
                        _rlookupByKey: it,
                        _filterBetween: st,
                        listenArrayEvents: ot,
                        unlistenArrayEvents: at,
                        _arrayUnique: rt,
                        _createResolver: Ne,
                        _attachContext: Re,
                        _descriptors: Ve,
                        _parseObjectDataRadialScale: qe,
                        splineCurve: ti,
                        splineCurveMonotone: ei,
                        _updateBezierControlPoints: si,
                        _isDomSupported: le,
                        _getParentNode: ce,
                        getStyle: ue,
                        getRelativePosition: fe,
                        getMaximumSize: be,
                        retinaScale: xe,
                        supportsEventListenerOptions: ve,
                        readUsedSize: ye,
                        fontString: function (t, e, i) {
                            return e + " " + t + "px " + i;
                        },
                        requestAnimFrame: lt,
                        throttled: ct,
                        debounce: dt,
                        _toLeftRightCenter: ht,
                        _alignStartEnd: ut,
                        _textX: pt,
                        _getStartAndCountOfVisiblePoints: mt,
                        _scaleRangesChanged: ft,
                        _pointInLine: ci,
                        _steppedInterpolation: di,
                        _bezierInterpolation: hi,
                        formatNumber: te,
                        toLineHeight: mi,
                        _readValueToProps: fi,
                        toTRBL: gi,
                        toTRBLCorners: bi,
                        toPadding: xi,
                        toFont: vi,
                        resolve: yi,
                        _addGrace: _i,
                        createContext: Ci,
                        PI: j,
                        TAU: S,
                        PITAU: A,
                        INFINITY: L,
                        RAD_PER_DEG: D,
                        HALF_PI: T,
                        QUARTER_PI: E,
                        TWO_THIRDS_PI: O,
                        log10: P,
                        sign: I,
                        almostEquals: N,
                        niceNum: R,
                        _factorize: V,
                        isNumber: F,
                        almostWhole: B,
                        _setMinAndMaxByKey: H,
                        toRadians: W,
                        toDegrees: Y,
                        _decimalPlaces: $,
                        getAngleFromPoint: U,
                        distanceBetweenPoints: Z,
                        _angleDiff: G,
                        _normalizeAngle: K,
                        _angleBetween: q,
                        _limitValue: X,
                        _int16Range: J,
                        _isBetween: Q,
                        getRtlAdapter: wi,
                        overrideTextDirection: zi,
                        restoreTextDirection: ki,
                        _boundSegment: Si,
                        _boundSegments: Ai,
                        _computeSegments: Li,
                    });
                    function Oi(t, e, i, s) {
                        const { controller: n, data: o, _sorted: a } = t,
                            r = n._cachedMeta.iScale;
                        if (r && e === r.axis && "r" !== e && a && o.length) {
                            const t = r._reversePixels ? it : et;
                            if (!s) return t(o, e, i);
                            if (n._sharedOptions) {
                                const s = o[0],
                                    n = "function" == typeof s.getRange && s.getRange(e);
                                if (n) {
                                    const s = t(o, e, i - n),
                                        a = t(o, e, i + n);
                                    return { lo: s.lo, hi: a.hi };
                                }
                            }
                        }
                        return { lo: 0, hi: o.length - 1 };
                    }
                    function Pi(t, e, i, s, n) {
                        const o = t.getSortedVisibleDatasetMetas(),
                            a = i[e];
                        for (let t = 0, i = o.length; t < i; ++t) {
                            const { index: i, data: r } = o[t],
                                { lo: l, hi: c } = Oi(o[t], e, a, n);
                            for (let t = l; t <= c; ++t) {
                                const e = r[t];
                                e.skip || s(e, i, t);
                            }
                        }
                    }
                    function Ii(t, e, i, s, n) {
                        const o = [];
                        return n || t.isPointInArea(e)
                            ? (Pi(
                                  t,
                                  i,
                                  e,
                                  function (i, a, r) {
                                      (n || Se(i, t.chartArea, 0)) && i.inRange(e.x, e.y, s) && o.push({ element: i, datasetIndex: a, index: r });
                                  },
                                  !0
                              ),
                              o)
                            : o;
                    }
                    function Ni(t, e, i, s, n, o) {
                        return o || t.isPointInArea(e)
                            ? "r" !== i || s
                                ? (function (t, e, i, s, n, o) {
                                      let a = [];
                                      const r = (function (t) {
                                          const e = -1 !== t.indexOf("x"),
                                              i = -1 !== t.indexOf("y");
                                          return function (t, s) {
                                              const n = e ? Math.abs(t.x - s.x) : 0,
                                                  o = i ? Math.abs(t.y - s.y) : 0;
                                              return Math.sqrt(Math.pow(n, 2) + Math.pow(o, 2));
                                          };
                                      })(i);
                                      let l = Number.POSITIVE_INFINITY;
                                      return (
                                          Pi(t, i, e, function (i, c, d) {
                                              const h = i.inRange(e.x, e.y, n);
                                              if (s && !h) return;
                                              const u = i.getCenterPoint(n);
                                              if (!o && !t.isPointInArea(u) && !h) return;
                                              const p = r(e, u);
                                              p < l ? ((a = [{ element: i, datasetIndex: c, index: d }]), (l = p)) : p === l && a.push({ element: i, datasetIndex: c, index: d });
                                          }),
                                          a
                                      );
                                  })(t, e, i, s, n, o)
                                : (function (t, e, i, s) {
                                      let n = [];
                                      return (
                                          Pi(t, i, e, function (t, i, o) {
                                              const { startAngle: a, endAngle: r } = t.getProps(["startAngle", "endAngle"], s),
                                                  { angle: l } = U(t, { x: e.x, y: e.y });
                                              q(l, a, r) && n.push({ element: t, datasetIndex: i, index: o });
                                          }),
                                          n
                                      );
                                  })(t, e, i, n)
                            : [];
                    }
                    function Ri(t, e, i, s, n) {
                        const o = [],
                            a = "x" === i ? "inXRange" : "inYRange";
                        let r = !1;
                        return (
                            Pi(t, i, e, (t, s, l) => {
                                t[a](e[i], n) && (o.push({ element: t, datasetIndex: s, index: l }), (r = r || t.inRange(e.x, e.y, n)));
                            }),
                            s && !r ? [] : o
                        );
                    }
                    var Vi = {
                        evaluateInteractionItems: Pi,
                        modes: {
                            index(t, e, i, s) {
                                const n = fe(e, t),
                                    o = i.axis || "x",
                                    a = i.includeInvisible || !1,
                                    r = i.intersect ? Ii(t, n, o, s, a) : Ni(t, n, o, !1, s, a),
                                    l = [];
                                return r.length
                                    ? (t.getSortedVisibleDatasetMetas().forEach((t) => {
                                          const e = r[0].index,
                                              i = t.data[e];
                                          i && !i.skip && l.push({ element: i, datasetIndex: t.index, index: e });
                                      }),
                                      l)
                                    : [];
                            },
                            dataset(t, e, i, s) {
                                const n = fe(e, t),
                                    o = i.axis || "xy",
                                    a = i.includeInvisible || !1;
                                let r = i.intersect ? Ii(t, n, o, s, a) : Ni(t, n, o, !1, s, a);
                                if (r.length > 0) {
                                    const e = r[0].datasetIndex,
                                        i = t.getDatasetMeta(e).data;
                                    r = [];
                                    for (let t = 0; t < i.length; ++t) r.push({ element: i[t], datasetIndex: e, index: t });
                                }
                                return r;
                            },
                            point: (t, e, i, s) => Ii(t, fe(e, t), i.axis || "xy", s, i.includeInvisible || !1),
                            nearest(t, e, i, s) {
                                const n = fe(e, t),
                                    o = i.axis || "xy",
                                    a = i.includeInvisible || !1;
                                return Ni(t, n, o, i.intersect, s, a);
                            },
                            x: (t, e, i, s) => Ri(t, fe(e, t), "x", i.intersect, s),
                            y: (t, e, i, s) => Ri(t, fe(e, t), "y", i.intersect, s),
                        },
                    };
                    const Fi = ["left", "top", "right", "bottom"];
                    function Bi(t, e) {
                        return t.filter((t) => t.pos === e);
                    }
                    function Hi(t, e) {
                        return t.filter((t) => -1 === Fi.indexOf(t.pos) && t.box.axis === e);
                    }
                    function Wi(t, e) {
                        return t.sort((t, i) => {
                            const s = e ? i : t,
                                n = e ? t : i;
                            return s.weight === n.weight ? s.index - n.index : s.weight - n.weight;
                        });
                    }
                    function Yi(t, e, i, s) {
                        return Math.max(t[i], e[i]) + Math.max(t[s], e[s]);
                    }
                    function $i(t, e) {
                        (t.top = Math.max(t.top, e.top)), (t.left = Math.max(t.left, e.left)), (t.bottom = Math.max(t.bottom, e.bottom)), (t.right = Math.max(t.right, e.right));
                    }
                    function Ui(t, e, i, s) {
                        const { pos: o, box: a } = i,
                            r = t.maxPadding;
                        if (!n(o)) {
                            i.size && (t[o] -= i.size);
                            const e = s[i.stack] || { size: 0, count: 1 };
                            (e.size = Math.max(e.size, i.horizontal ? a.height : a.width)), (i.size = e.size / e.count), (t[o] += i.size);
                        }
                        a.getPadding && $i(r, a.getPadding());
                        const l = Math.max(0, e.outerWidth - Yi(r, t, "left", "right")),
                            c = Math.max(0, e.outerHeight - Yi(r, t, "top", "bottom")),
                            d = l !== t.w,
                            h = c !== t.h;
                        return (t.w = l), (t.h = c), i.horizontal ? { same: d, other: h } : { same: h, other: d };
                    }
                    function Zi(t, e) {
                        const i = e.maxPadding;
                        return (function (t) {
                            const s = { left: 0, top: 0, right: 0, bottom: 0 };
                            return (
                                t.forEach((t) => {
                                    s[t] = Math.max(e[t], i[t]);
                                }),
                                s
                            );
                        })(t ? ["left", "right"] : ["top", "bottom"]);
                    }
                    function Gi(t, e, i, s) {
                        const n = [];
                        let o, a, r, l, c, d;
                        for (o = 0, a = t.length, c = 0; o < a; ++o) {
                            (r = t[o]), (l = r.box), l.update(r.width || e.w, r.height || e.h, Zi(r.horizontal, e));
                            const { same: a, other: h } = Ui(e, i, r, s);
                            (c |= a && n.length), (d = d || h), l.fullSize || n.push(r);
                        }
                        return (c && Gi(n, e, i, s)) || d;
                    }
                    function Ki(t, e, i, s, n) {
                        (t.top = i), (t.left = e), (t.right = e + s), (t.bottom = i + n), (t.width = s), (t.height = n);
                    }
                    function qi(t, e, i, s) {
                        const n = i.padding;
                        let { x: o, y: a } = e;
                        for (const r of t) {
                            const t = r.box,
                                l = s[r.stack] || { count: 1, placed: 0, weight: 1 },
                                c = r.stackWeight / l.weight || 1;
                            if (r.horizontal) {
                                const s = e.w * c,
                                    o = l.size || t.height;
                                w(l.start) && (a = l.start), t.fullSize ? Ki(t, n.left, a, i.outerWidth - n.right - n.left, o) : Ki(t, e.left + l.placed, a, s, o), (l.start = a), (l.placed += s), (a = t.bottom);
                            } else {
                                const s = e.h * c,
                                    a = l.size || t.width;
                                w(l.start) && (o = l.start), t.fullSize ? Ki(t, o, n.top, a, i.outerHeight - n.bottom - n.top) : Ki(t, o, e.top + l.placed, a, s), (l.start = o), (l.placed += s), (o = t.right);
                            }
                        }
                        (e.x = o), (e.y = a);
                    }
                    var Xi = {
                        addBox(t, e) {
                            t.boxes || (t.boxes = []),
                                (e.fullSize = e.fullSize || !1),
                                (e.position = e.position || "top"),
                                (e.weight = e.weight || 0),
                                (e._layers =
                                    e._layers ||
                                    function () {
                                        return [
                                            {
                                                z: 0,
                                                draw(t) {
                                                    e.draw(t);
                                                },
                                            },
                                        ];
                                    }),
                                t.boxes.push(e);
                        },
                        removeBox(t, e) {
                            const i = t.boxes ? t.boxes.indexOf(e) : -1;
                            -1 !== i && t.boxes.splice(i, 1);
                        },
                        configure(t, e, i) {
                            (e.fullSize = i.fullSize), (e.position = i.position), (e.weight = i.weight);
                        },
                        update(t, e, i, s) {
                            if (!t) return;
                            const n = xi(t.options.layout.padding),
                                o = Math.max(e - n.width, 0),
                                a = Math.max(i - n.height, 0),
                                r = (function (t) {
                                    const e = (function (t) {
                                            const e = [];
                                            let i, s, n, o, a, r;
                                            for (i = 0, s = (t || []).length; i < s; ++i)
                                                (n = t[i]),
                                                    ({
                                                        position: o,
                                                        options: { stack: a, stackWeight: r = 1 },
                                                    } = n),
                                                    e.push({ index: i, box: n, pos: o, horizontal: n.isHorizontal(), weight: n.weight, stack: a && o + a, stackWeight: r });
                                            return e;
                                        })(t),
                                        i = Wi(
                                            e.filter((t) => t.box.fullSize),
                                            !0
                                        ),
                                        s = Wi(Bi(e, "left"), !0),
                                        n = Wi(Bi(e, "right")),
                                        o = Wi(Bi(e, "top"), !0),
                                        a = Wi(Bi(e, "bottom")),
                                        r = Hi(e, "x"),
                                        l = Hi(e, "y");
                                    return { fullSize: i, leftAndTop: s.concat(o), rightAndBottom: n.concat(l).concat(a).concat(r), chartArea: Bi(e, "chartArea"), vertical: s.concat(n).concat(l), horizontal: o.concat(a).concat(r) };
                                })(t.boxes),
                                l = r.vertical,
                                c = r.horizontal;
                            h(t.boxes, (t) => {
                                "function" == typeof t.beforeLayout && t.beforeLayout();
                            });
                            const d = l.reduce((t, e) => (e.box.options && !1 === e.box.options.display ? t : t + 1), 0) || 1,
                                u = Object.freeze({ outerWidth: e, outerHeight: i, padding: n, availableWidth: o, availableHeight: a, vBoxMaxWidth: o / 2 / d, hBoxMaxHeight: a / 2 }),
                                p = Object.assign({}, n);
                            $i(p, xi(s));
                            const m = Object.assign({ maxPadding: p, w: o, h: a, x: n.left, y: n.top }, n),
                                f = (function (t, e) {
                                    const i = (function (t) {
                                            const e = {};
                                            for (const i of t) {
                                                const { stack: t, pos: s, stackWeight: n } = i;
                                                if (!t || !Fi.includes(s)) continue;
                                                const o = e[t] || (e[t] = { count: 0, placed: 0, weight: 0, size: 0 });
                                                o.count++, (o.weight += n);
                                            }
                                            return e;
                                        })(t),
                                        { vBoxMaxWidth: s, hBoxMaxHeight: n } = e;
                                    let o, a, r;
                                    for (o = 0, a = t.length; o < a; ++o) {
                                        r = t[o];
                                        const { fullSize: a } = r.box,
                                            l = i[r.stack],
                                            c = l && r.stackWeight / l.weight;
                                        r.horizontal ? ((r.width = c ? c * s : a && e.availableWidth), (r.height = n)) : ((r.width = s), (r.height = c ? c * n : a && e.availableHeight));
                                    }
                                    return i;
                                })(l.concat(c), u);
                            Gi(r.fullSize, m, u, f),
                                Gi(l, m, u, f),
                                Gi(c, m, u, f) && Gi(l, m, u, f),
                                (function (t) {
                                    const e = t.maxPadding;
                                    function i(i) {
                                        const s = Math.max(e[i] - t[i], 0);
                                        return (t[i] += s), s;
                                    }
                                    (t.y += i("top")), (t.x += i("left")), i("right"), i("bottom");
                                })(m),
                                qi(r.leftAndTop, m, u, f),
                                (m.x += m.w),
                                (m.y += m.h),
                                qi(r.rightAndBottom, m, u, f),
                                (t.chartArea = { left: m.left, top: m.top, right: m.left + m.w, bottom: m.top + m.h, height: m.h, width: m.w }),
                                h(r.chartArea, (e) => {
                                    const i = e.box;
                                    Object.assign(i, t.chartArea), i.update(m.w, m.h, { left: 0, top: 0, right: 0, bottom: 0 });
                                });
                        },
                    };
                    class Ji {
                        acquireContext(t, e) {}
                        releaseContext(t) {
                            return !1;
                        }
                        addEventListener(t, e, i) {}
                        removeEventListener(t, e, i) {}
                        getDevicePixelRatio() {
                            return 1;
                        }
                        getMaximumSize(t, e, i, s) {
                            return (e = Math.max(0, e || t.width)), (i = i || t.height), { width: e, height: Math.max(0, s ? Math.floor(e / s) : i) };
                        }
                        isAttached(t) {
                            return !0;
                        }
                        updateConfig(t) {}
                    }
                    class Qi extends Ji {
                        acquireContext(t) {
                            return (t && t.getContext && t.getContext("2d")) || null;
                        }
                        updateConfig(t) {
                            t.options.animation = !1;
                        }
                    }
                    const ts = {
                            touchstart: "mousedown",
                            touchmove: "mousemove",
                            touchend: "mouseup",
                            pointerenter: "mouseenter",
                            pointerdown: "mousedown",
                            pointermove: "mousemove",
                            pointerup: "mouseup",
                            pointerleave: "mouseout",
                            pointerout: "mouseout",
                        },
                        es = (t) => null === t || "" === t,
                        is = !!ve && { passive: !0 };
                    function ss(t, e, i) {
                        t.canvas.removeEventListener(e, i, is);
                    }
                    function ns(t, e) {
                        for (const i of t) if (i === e || i.contains(e)) return !0;
                    }
                    function os(t, e, i) {
                        const s = t.canvas,
                            n = new MutationObserver((t) => {
                                let e = !1;
                                for (const i of t) (e = e || ns(i.addedNodes, s)), (e = e && !ns(i.removedNodes, s));
                                e && i();
                            });
                        return n.observe(document, { childList: !0, subtree: !0 }), n;
                    }
                    function as(t, e, i) {
                        const s = t.canvas,
                            n = new MutationObserver((t) => {
                                let e = !1;
                                for (const i of t) (e = e || ns(i.removedNodes, s)), (e = e && !ns(i.addedNodes, s));
                                e && i();
                            });
                        return n.observe(document, { childList: !0, subtree: !0 }), n;
                    }
                    const rs = new Map();
                    let ls = 0;
                    function cs() {
                        const t = window.devicePixelRatio;
                        t !== ls &&
                            ((ls = t),
                            rs.forEach((e, i) => {
                                i.currentDevicePixelRatio !== t && e();
                            }));
                    }
                    function ds(t, e, i) {
                        const s = t.canvas,
                            n = s && ce(s);
                        if (!n) return;
                        const o = ct((t, e) => {
                                const s = n.clientWidth;
                                i(t, e), s < n.clientWidth && i();
                            }, window),
                            a = new ResizeObserver((t) => {
                                const e = t[0],
                                    i = e.contentRect.width,
                                    s = e.contentRect.height;
                                (0 === i && 0 === s) || o(i, s);
                            });
                        return (
                            a.observe(n),
                            (function (t, e) {
                                rs.size || window.addEventListener("resize", cs), rs.set(t, e);
                            })(t, o),
                            a
                        );
                    }
                    function hs(t, e, i) {
                        i && i.disconnect(),
                            "resize" === e &&
                                (function (t) {
                                    rs.delete(t), rs.size || window.removeEventListener("resize", cs);
                                })(t);
                    }
                    function us(t, e, i) {
                        const s = t.canvas,
                            n = ct((e) => {
                                null !== t.ctx &&
                                    i(
                                        (function (t, e) {
                                            const i = ts[t.type] || t.type,
                                                { x: s, y: n } = fe(t, e);
                                            return { type: i, chart: e, native: t, x: void 0 !== s ? s : null, y: void 0 !== n ? n : null };
                                        })(e, t)
                                    );
                            }, t);
                        return (
                            (function (t, e, i) {
                                t.addEventListener(e, i, is);
                            })(s, e, n),
                            n
                        );
                    }
                    class ps extends Ji {
                        acquireContext(t, e) {
                            const i = t && t.getContext && t.getContext("2d");
                            return i && i.canvas === t
                                ? ((function (t, e) {
                                      const i = t.style,
                                          s = t.getAttribute("height"),
                                          n = t.getAttribute("width");
                                      if (
                                          ((t.$chartjs = { initial: { height: s, width: n, style: { display: i.display, height: i.height, width: i.width } } }),
                                          (i.display = i.display || "block"),
                                          (i.boxSizing = i.boxSizing || "border-box"),
                                          es(n))
                                      ) {
                                          const e = ye(t, "width");
                                          void 0 !== e && (t.width = e);
                                      }
                                      if (es(s))
                                          if ("" === t.style.height) t.height = t.width / (e || 2);
                                          else {
                                              const e = ye(t, "height");
                                              void 0 !== e && (t.height = e);
                                          }
                                  })(t, e),
                                  i)
                                : null;
                        }
                        releaseContext(t) {
                            const e = t.canvas;
                            if (!e.$chartjs) return !1;
                            const s = e.$chartjs.initial;
                            ["height", "width"].forEach((t) => {
                                const n = s[t];
                                i(n) ? e.removeAttribute(t) : e.setAttribute(t, n);
                            });
                            const n = s.style || {};
                            return (
                                Object.keys(n).forEach((t) => {
                                    e.style[t] = n[t];
                                }),
                                (e.width = e.width),
                                delete e.$chartjs,
                                !0
                            );
                        }
                        addEventListener(t, e, i) {
                            this.removeEventListener(t, e);
                            const s = t.$proxies || (t.$proxies = {}),
                                n = { attach: os, detach: as, resize: ds }[e] || us;
                            s[e] = n(t, e, i);
                        }
                        removeEventListener(t, e) {
                            const i = t.$proxies || (t.$proxies = {}),
                                s = i[e];
                            s && (({ attach: hs, detach: hs, resize: hs }[e] || ss)(t, e, s), (i[e] = void 0));
                        }
                        getDevicePixelRatio() {
                            return window.devicePixelRatio;
                        }
                        getMaximumSize(t, e, i, s) {
                            return be(t, e, i, s);
                        }
                        isAttached(t) {
                            const e = ce(t);
                            return !(!e || !e.isConnected);
                        }
                    }
                    function ms(t) {
                        return !le() || ("undefined" != typeof OffscreenCanvas && t instanceof OffscreenCanvas) ? Qi : ps;
                    }
                    var fs = Object.freeze({ __proto__: null, _detectPlatform: ms, BasePlatform: Ji, BasicPlatform: Qi, DomPlatform: ps });
                    const gs = "transparent",
                        bs = {
                            boolean: (t, e, i) => (i > 0.5 ? e : t),
                            color(t, e, i) {
                                const s = Kt(t || gs),
                                    n = s.valid && Kt(e || gs);
                                return n && n.valid ? n.mix(s, i).hexString() : e;
                            },
                            number: (t, e, i) => t + (e - t) * i,
                        };
                    class xs {
                        constructor(t, e, i, s) {
                            const n = e[i];
                            s = yi([t.to, s, n, t.from]);
                            const o = yi([t.from, n, s]);
                            (this._active = !0),
                                (this._fn = t.fn || bs[t.type || typeof o]),
                                (this._easing = li[t.easing] || li.linear),
                                (this._start = Math.floor(Date.now() + (t.delay || 0))),
                                (this._duration = this._total = Math.floor(t.duration)),
                                (this._loop = !!t.loop),
                                (this._target = e),
                                (this._prop = i),
                                (this._from = o),
                                (this._to = s),
                                (this._promises = void 0);
                        }
                        active() {
                            return this._active;
                        }
                        update(t, e, i) {
                            if (this._active) {
                                this._notify(!1);
                                const s = this._target[this._prop],
                                    n = i - this._start,
                                    o = this._duration - n;
                                (this._start = i), (this._duration = Math.floor(Math.max(o, t.duration))), (this._total += n), (this._loop = !!t.loop), (this._to = yi([t.to, e, s, t.from])), (this._from = yi([t.from, s, e]));
                            }
                        }
                        cancel() {
                            this._active && (this.tick(Date.now()), (this._active = !1), this._notify(!1));
                        }
                        tick(t) {
                            const e = t - this._start,
                                i = this._duration,
                                s = this._prop,
                                n = this._from,
                                o = this._loop,
                                a = this._to;
                            let r;
                            if (((this._active = n !== a && (o || e < i)), !this._active)) return (this._target[s] = a), void this._notify(!0);
                            e < 0 ? (this._target[s] = n) : ((r = (e / i) % 2), (r = o && r > 1 ? 2 - r : r), (r = this._easing(Math.min(1, Math.max(0, r)))), (this._target[s] = this._fn(n, a, r)));
                        }
                        wait() {
                            const t = this._promises || (this._promises = []);
                            return new Promise((e, i) => {
                                t.push({ res: e, rej: i });
                            });
                        }
                        _notify(t) {
                            const e = t ? "res" : "rej",
                                i = this._promises || [];
                            for (let t = 0; t < i.length; t++) i[t][e]();
                        }
                    }
                    class vs {
                        constructor(t, e) {
                            (this._chart = t), (this._properties = new Map()), this.configure(e);
                        }
                        configure(t) {
                            if (!n(t)) return;
                            const e = Object.keys(re.animation),
                                i = this._properties;
                            Object.getOwnPropertyNames(t).forEach((o) => {
                                const a = t[o];
                                if (!n(a)) return;
                                const r = {};
                                for (const t of e) r[t] = a[t];
                                ((s(a.properties) && a.properties) || [o]).forEach((t) => {
                                    (t !== o && i.has(t)) || i.set(t, r);
                                });
                            });
                        }
                        _animateOptions(t, e) {
                            const i = e.options,
                                s = (function (t, e) {
                                    if (!e) return;
                                    let i = t.options;
                                    if (i) return i.$shared && (t.options = i = Object.assign({}, i, { $shared: !1, $animations: {} })), i;
                                    t.options = e;
                                })(t, i);
                            if (!s) return [];
                            const n = this._createAnimations(s, i);
                            return (
                                i.$shared &&
                                    (function (t, e) {
                                        const i = [],
                                            s = Object.keys(e);
                                        for (let e = 0; e < s.length; e++) {
                                            const n = t[s[e]];
                                            n && n.active() && i.push(n.wait());
                                        }
                                        return Promise.all(i);
                                    })(t.options.$animations, i).then(
                                        () => {
                                            t.options = i;
                                        },
                                        () => {}
                                    ),
                                n
                            );
                        }
                        _createAnimations(t, e) {
                            const i = this._properties,
                                s = [],
                                n = t.$animations || (t.$animations = {}),
                                o = Object.keys(e),
                                a = Date.now();
                            let r;
                            for (r = o.length - 1; r >= 0; --r) {
                                const l = o[r];
                                if ("$" === l.charAt(0)) continue;
                                if ("options" === l) {
                                    s.push(...this._animateOptions(t, e));
                                    continue;
                                }
                                const c = e[l];
                                let d = n[l];
                                const h = i.get(l);
                                if (d) {
                                    if (h && d.active()) {
                                        d.update(h, c, a);
                                        continue;
                                    }
                                    d.cancel();
                                }
                                h && h.duration ? ((n[l] = d = new xs(h, t, l, c)), s.push(d)) : (t[l] = c);
                            }
                            return s;
                        }
                        update(t, e) {
                            if (0 === this._properties.size) return void Object.assign(t, e);
                            const i = this._createAnimations(t, e);
                            return i.length ? (gt.add(this._chart, i), !0) : void 0;
                        }
                    }
                    function ys(t, e) {
                        const i = (t && t.options) || {},
                            s = i.reverse,
                            n = void 0 === i.min ? e : 0,
                            o = void 0 === i.max ? e : 0;
                        return { start: s ? o : n, end: s ? n : o };
                    }
                    function _s(t, e) {
                        const i = [],
                            s = t._getSortedDatasetMetas(e);
                        let n, o;
                        for (n = 0, o = s.length; n < o; ++n) i.push(s[n].index);
                        return i;
                    }
                    function Cs(t, e, i, s = {}) {
                        const n = t.keys,
                            a = "single" === s.mode;
                        let r, l, c, d;
                        if (null !== e) {
                            for (r = 0, l = n.length; r < l; ++r) {
                                if (((c = +n[r]), c === i)) {
                                    if (s.all) continue;
                                    break;
                                }
                                (d = t.values[c]), o(d) && (a || 0 === e || I(e) === I(d)) && (e += d);
                            }
                            return e;
                        }
                    }
                    function ws(t, e) {
                        const i = t && t.options.stacked;
                        return i || (void 0 === i && void 0 !== e.stack);
                    }
                    function zs(t, e, i) {
                        const s = t[e] || (t[e] = {});
                        return s[i] || (s[i] = {});
                    }
                    function ks(t, e, i, s) {
                        for (const n of e.getMatchingVisibleMetas(s).reverse()) {
                            const e = t[n.index];
                            if ((i && e > 0) || (!i && e < 0)) return n.index;
                        }
                        return null;
                    }
                    function Ms(t, e) {
                        const { chart: i, _cachedMeta: s } = t,
                            n = i._stacks || (i._stacks = {}),
                            { iScale: o, vScale: a, index: r } = s,
                            l = o.axis,
                            c = a.axis,
                            d = (function (t, e, i) {
                                return `${t.id}.${e.id}.${i.stack || i.type}`;
                            })(o, a, s),
                            h = e.length;
                        let u;
                        for (let t = 0; t < h; ++t) {
                            const i = e[t],
                                { [l]: o, [c]: h } = i;
                            (u = (i._stacks || (i._stacks = {}))[c] = zs(n, d, o)), (u[r] = h), (u._top = ks(u, a, !0, s.type)), (u._bottom = ks(u, a, !1, s.type));
                        }
                    }
                    function js(t, e) {
                        const i = t.scales;
                        return Object.keys(i)
                            .filter((t) => i[t].axis === e)
                            .shift();
                    }
                    function Ss(t, e) {
                        const i = t.controller.index,
                            s = t.vScale && t.vScale.axis;
                        if (s) {
                            e = e || t._parsed;
                            for (const t of e) {
                                const e = t._stacks;
                                if (!e || void 0 === e[s] || void 0 === e[s][i]) return;
                                delete e[s][i];
                            }
                        }
                    }
                    const As = (t) => "reset" === t || "none" === t,
                        Ls = (t, e) => (e ? t : Object.assign({}, t));
                    class Ds {
                        static defaults = {};
                        static datasetElementType = null;
                        static dataElementType = null;
                        constructor(t, e) {
                            (this.chart = t),
                                (this._ctx = t.ctx),
                                (this.index = e),
                                (this._cachedDataOpts = {}),
                                (this._cachedMeta = this.getMeta()),
                                (this._type = this._cachedMeta.type),
                                (this.options = void 0),
                                (this._parsing = !1),
                                (this._data = void 0),
                                (this._objectData = void 0),
                                (this._sharedOptions = void 0),
                                (this._drawStart = void 0),
                                (this._drawCount = void 0),
                                (this.enableOptionSharing = !1),
                                (this.supportsDecimation = !1),
                                (this.$context = void 0),
                                (this._syncList = []),
                                (this.datasetElementType = new.target.datasetElementType),
                                (this.dataElementType = new.target.dataElementType),
                                this.initialize();
                        }
                        initialize() {
                            const t = this._cachedMeta;
                            this.configure(),
                                this.linkScales(),
                                (t._stacked = ws(t.vScale, t)),
                                this.addElements(),
                                this.options.fill &&
                                    !this.chart.isPluginEnabled("filler") &&
                                    console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
                        }
                        updateIndex(t) {
                            this.index !== t && Ss(this._cachedMeta), (this.index = t);
                        }
                        linkScales() {
                            const t = this.chart,
                                e = this._cachedMeta,
                                i = this.getDataset(),
                                s = (t, e, i, s) => ("x" === t ? e : "r" === t ? s : i),
                                n = (e.xAxisID = r(i.xAxisID, js(t, "x"))),
                                o = (e.yAxisID = r(i.yAxisID, js(t, "y"))),
                                a = (e.rAxisID = r(i.rAxisID, js(t, "r"))),
                                l = e.indexAxis,
                                c = (e.iAxisID = s(l, n, o, a)),
                                d = (e.vAxisID = s(l, o, n, a));
                            (e.xScale = this.getScaleForId(n)), (e.yScale = this.getScaleForId(o)), (e.rScale = this.getScaleForId(a)), (e.iScale = this.getScaleForId(c)), (e.vScale = this.getScaleForId(d));
                        }
                        getDataset() {
                            return this.chart.data.datasets[this.index];
                        }
                        getMeta() {
                            return this.chart.getDatasetMeta(this.index);
                        }
                        getScaleForId(t) {
                            return this.chart.scales[t];
                        }
                        _getOtherScale(t) {
                            const e = this._cachedMeta;
                            return t === e.iScale ? e.vScale : e.iScale;
                        }
                        reset() {
                            this._update("reset");
                        }
                        _destroy() {
                            const t = this._cachedMeta;
                            this._data && at(this._data, this), t._stacked && Ss(t);
                        }
                        _dataCheck() {
                            const t = this.getDataset(),
                                e = t.data || (t.data = []),
                                i = this._data;
                            if (n(e))
                                this._data = (function (t) {
                                    const e = Object.keys(t),
                                        i = new Array(e.length);
                                    let s, n, o;
                                    for (s = 0, n = e.length; s < n; ++s) (o = e[s]), (i[s] = { x: o, y: t[o] });
                                    return i;
                                })(e);
                            else if (i !== e) {
                                if (i) {
                                    at(i, this);
                                    const t = this._cachedMeta;
                                    Ss(t), (t._parsed = []);
                                }
                                e && Object.isExtensible(e) && ot(e, this), (this._syncList = []), (this._data = e);
                            }
                        }
                        addElements() {
                            const t = this._cachedMeta;
                            this._dataCheck(), this.datasetElementType && (t.dataset = new this.datasetElementType());
                        }
                        buildOrUpdateElements(t) {
                            const e = this._cachedMeta,
                                i = this.getDataset();
                            let s = !1;
                            this._dataCheck();
                            const n = e._stacked;
                            (e._stacked = ws(e.vScale, e)), e.stack !== i.stack && ((s = !0), Ss(e), (e.stack = i.stack)), this._resyncElements(t), (s || n !== e._stacked) && Ms(this, e._parsed);
                        }
                        configure() {
                            const t = this.chart.config,
                                e = t.datasetScopeKeys(this._type),
                                i = t.getOptionScopes(this.getDataset(), e, !0);
                            (this.options = t.createResolver(i, this.getContext())), (this._parsing = this.options.parsing), (this._cachedDataOpts = {});
                        }
                        parse(t, e) {
                            const { _cachedMeta: i, _data: o } = this,
                                { iScale: a, _stacked: r } = i,
                                l = a.axis;
                            let c,
                                d,
                                h,
                                u = (0 === t && e === o.length) || i._sorted,
                                p = t > 0 && i._parsed[t - 1];
                            if (!1 === this._parsing) (i._parsed = o), (i._sorted = !0), (h = o);
                            else {
                                h = s(o[t]) ? this.parseArrayData(i, o, t, e) : n(o[t]) ? this.parseObjectData(i, o, t, e) : this.parsePrimitiveData(i, o, t, e);
                                const a = () => null === d[l] || (p && d[l] < p[l]);
                                for (c = 0; c < e; ++c) (i._parsed[c + t] = d = h[c]), u && (a() && (u = !1), (p = d));
                                i._sorted = u;
                            }
                            r && Ms(this, h);
                        }
                        parsePrimitiveData(t, e, i, s) {
                            const { iScale: n, vScale: o } = t,
                                a = n.axis,
                                r = o.axis,
                                l = n.getLabels(),
                                c = n === o,
                                d = new Array(s);
                            let h, u, p;
                            for (h = 0, u = s; h < u; ++h) (p = h + i), (d[h] = { [a]: c || n.parse(l[p], p), [r]: o.parse(e[p], p) });
                            return d;
                        }
                        parseArrayData(t, e, i, s) {
                            const { xScale: n, yScale: o } = t,
                                a = new Array(s);
                            let r, l, c, d;
                            for (r = 0, l = s; r < l; ++r) (c = r + i), (d = e[c]), (a[r] = { x: n.parse(d[0], c), y: o.parse(d[1], c) });
                            return a;
                        }
                        parseObjectData(t, e, i, s) {
                            const { xScale: n, yScale: o } = t,
                                { xAxisKey: a = "x", yAxisKey: r = "y" } = this._parsing,
                                l = new Array(s);
                            let c, d, h, u;
                            for (c = 0, d = s; c < d; ++c) (h = c + i), (u = e[h]), (l[c] = { x: n.parse(_(u, a), h), y: o.parse(_(u, r), h) });
                            return l;
                        }
                        getParsed(t) {
                            return this._cachedMeta._parsed[t];
                        }
                        getDataElement(t) {
                            return this._cachedMeta.data[t];
                        }
                        applyStack(t, e, i) {
                            const s = this.chart,
                                n = this._cachedMeta,
                                o = e[t.axis];
                            return Cs({ keys: _s(s, !0), values: e._stacks[t.axis] }, o, n.index, { mode: i });
                        }
                        updateRangeFromParsed(t, e, i, s) {
                            const n = i[e.axis];
                            let o = null === n ? NaN : n;
                            const a = s && i._stacks[e.axis];
                            s && a && ((s.values = a), (o = Cs(s, n, this._cachedMeta.index))), (t.min = Math.min(t.min, o)), (t.max = Math.max(t.max, o));
                        }
                        getMinMax(t, e) {
                            const i = this._cachedMeta,
                                s = i._parsed,
                                n = i._sorted && t === i.iScale,
                                a = s.length,
                                r = this._getOtherScale(t),
                                l = ((t, e, i) => t && !e.hidden && e._stacked && { keys: _s(i, !0), values: null })(e, i, this.chart),
                                c = { min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY },
                                { min: d, max: h } = (function (t) {
                                    const { min: e, max: i, minDefined: s, maxDefined: n } = t.getUserBounds();
                                    return { min: s ? e : Number.NEGATIVE_INFINITY, max: n ? i : Number.POSITIVE_INFINITY };
                                })(r);
                            let u, p;
                            function m() {
                                p = s[u];
                                const e = p[r.axis];
                                return !o(p[t.axis]) || d > e || h < e;
                            }
                            for (u = 0; u < a && (m() || (this.updateRangeFromParsed(c, t, p, l), !n)); ++u);
                            if (n)
                                for (u = a - 1; u >= 0; --u)
                                    if (!m()) {
                                        this.updateRangeFromParsed(c, t, p, l);
                                        break;
                                    }
                            return c;
                        }
                        getAllParsedValues(t) {
                            const e = this._cachedMeta._parsed,
                                i = [];
                            let s, n, a;
                            for (s = 0, n = e.length; s < n; ++s) (a = e[s][t.axis]), o(a) && i.push(a);
                            return i;
                        }
                        getMaxOverflow() {
                            return !1;
                        }
                        getLabelAndValue(t) {
                            const e = this._cachedMeta,
                                i = e.iScale,
                                s = e.vScale,
                                n = this.getParsed(t);
                            return { label: i ? "" + i.getLabelForValue(n[i.axis]) : "", value: s ? "" + s.getLabelForValue(n[s.axis]) : "" };
                        }
                        _update(t) {
                            const e = this._cachedMeta;
                            this.update(t || "default"),
                                (e._clip = (function (t) {
                                    let e, i, s, o;
                                    return n(t) ? ((e = t.top), (i = t.right), (s = t.bottom), (o = t.left)) : (e = i = s = o = t), { top: e, right: i, bottom: s, left: o, disabled: !1 === t };
                                })(
                                    r(
                                        this.options.clip,
                                        (function (t, e, i) {
                                            if (!1 === i) return !1;
                                            const s = ys(t, i),
                                                n = ys(e, i);
                                            return { top: n.end, right: s.end, bottom: n.start, left: s.start };
                                        })(e.xScale, e.yScale, this.getMaxOverflow())
                                    )
                                ));
                        }
                        update(t) {}
                        draw() {
                            const t = this._ctx,
                                e = this.chart,
                                i = this._cachedMeta,
                                s = i.data || [],
                                n = e.chartArea,
                                o = [],
                                a = this._drawStart || 0,
                                r = this._drawCount || s.length - a,
                                l = this.options.drawActiveElementsOnTop;
                            let c;
                            for (i.dataset && i.dataset.draw(t, n, a, r), c = a; c < a + r; ++c) {
                                const e = s[c];
                                e.hidden || (e.active && l ? o.push(e) : e.draw(t, n));
                            }
                            for (c = 0; c < o.length; ++c) o[c].draw(t, n);
                        }
                        getStyle(t, e) {
                            const i = e ? "active" : "default";
                            return void 0 === t && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(i) : this.resolveDataElementOptions(t || 0, i);
                        }
                        getContext(t, e, i) {
                            const s = this.getDataset();
                            let n;
                            if (t >= 0 && t < this._cachedMeta.data.length) {
                                const e = this._cachedMeta.data[t];
                                (n =
                                    e.$context ||
                                    (e.$context = (function (t, e, i) {
                                        return Ci(t, { active: !1, dataIndex: e, parsed: void 0, raw: void 0, element: i, index: e, mode: "default", type: "data" });
                                    })(this.getContext(), t, e))),
                                    (n.parsed = this.getParsed(t)),
                                    (n.raw = s.data[t]),
                                    (n.index = n.dataIndex = t);
                            } else
                                (n =
                                    this.$context ||
                                    (this.$context = (function (t, e) {
                                        return Ci(t, { active: !1, dataset: void 0, datasetIndex: e, index: e, mode: "default", type: "dataset" });
                                    })(this.chart.getContext(), this.index))),
                                    (n.dataset = s),
                                    (n.index = n.datasetIndex = this.index);
                            return (n.active = !!e), (n.mode = i), n;
                        }
                        resolveDatasetElementOptions(t) {
                            return this._resolveElementOptions(this.datasetElementType.id, t);
                        }
                        resolveDataElementOptions(t, e) {
                            return this._resolveElementOptions(this.dataElementType.id, e, t);
                        }
                        _resolveElementOptions(t, e = "default", i) {
                            const s = "active" === e,
                                n = this._cachedDataOpts,
                                o = t + "-" + e,
                                a = n[o],
                                r = this.enableOptionSharing && w(i);
                            if (a) return Ls(a, r);
                            const l = this.chart.config,
                                c = l.datasetElementScopeKeys(this._type, t),
                                d = s ? [`${t}Hover`, "hover", t, ""] : [t, ""],
                                h = l.getOptionScopes(this.getDataset(), c),
                                u = Object.keys(re.elements[t]),
                                p = l.resolveNamedOptions(h, u, () => this.getContext(i, s), d);
                            return p.$shared && ((p.$shared = r), (n[o] = Object.freeze(Ls(p, r)))), p;
                        }
                        _resolveAnimations(t, e, i) {
                            const s = this.chart,
                                n = this._cachedDataOpts,
                                o = `animation-${e}`,
                                a = n[o];
                            if (a) return a;
                            let r;
                            if (!1 !== s.options.animation) {
                                const s = this.chart.config,
                                    n = s.datasetAnimationScopeKeys(this._type, e),
                                    o = s.getOptionScopes(this.getDataset(), n);
                                r = s.createResolver(o, this.getContext(t, i, e));
                            }
                            const l = new vs(s, r && r.animations);
                            return r && r._cacheable && (n[o] = Object.freeze(l)), l;
                        }
                        getSharedOptions(t) {
                            if (t.$shared) return this._sharedOptions || (this._sharedOptions = Object.assign({}, t));
                        }
                        includeOptions(t, e) {
                            return !e || As(t) || this.chart._animationsDisabled;
                        }
                        _getSharedOptions(t, e) {
                            const i = this.resolveDataElementOptions(t, e),
                                s = this._sharedOptions,
                                n = this.getSharedOptions(i),
                                o = this.includeOptions(e, n) || n !== s;
                            return this.updateSharedOptions(n, e, i), { sharedOptions: n, includeOptions: o };
                        }
                        updateElement(t, e, i, s) {
                            As(s) ? Object.assign(t, i) : this._resolveAnimations(e, s).update(t, i);
                        }
                        updateSharedOptions(t, e, i) {
                            t && !As(e) && this._resolveAnimations(void 0, e).update(t, i);
                        }
                        _setStyle(t, e, i, s) {
                            t.active = s;
                            const n = this.getStyle(e, s);
                            this._resolveAnimations(e, i, s).update(t, { options: (!s && this.getSharedOptions(n)) || n });
                        }
                        removeHoverStyle(t, e, i) {
                            this._setStyle(t, i, "active", !1);
                        }
                        setHoverStyle(t, e, i) {
                            this._setStyle(t, i, "active", !0);
                        }
                        _removeDatasetHoverStyle() {
                            const t = this._cachedMeta.dataset;
                            t && this._setStyle(t, void 0, "active", !1);
                        }
                        _setDatasetHoverStyle() {
                            const t = this._cachedMeta.dataset;
                            t && this._setStyle(t, void 0, "active", !0);
                        }
                        _resyncElements(t) {
                            const e = this._data,
                                i = this._cachedMeta.data;
                            for (const [t, e, i] of this._syncList) this[t](e, i);
                            this._syncList = [];
                            const s = i.length,
                                n = e.length,
                                o = Math.min(n, s);
                            o && this.parse(0, o), n > s ? this._insertElements(s, n - s, t) : n < s && this._removeElements(n, s - n);
                        }
                        _insertElements(t, e, i = !0) {
                            const s = this._cachedMeta,
                                n = s.data,
                                o = t + e;
                            let a;
                            const r = (t) => {
                                for (t.length += e, a = t.length - 1; a >= o; a--) t[a] = t[a - e];
                            };
                            for (r(n), a = t; a < o; ++a) n[a] = new this.dataElementType();
                            this._parsing && r(s._parsed), this.parse(t, e), i && this.updateElements(n, t, e, "reset");
                        }
                        updateElements(t, e, i, s) {}
                        _removeElements(t, e) {
                            const i = this._cachedMeta;
                            if (this._parsing) {
                                const s = i._parsed.splice(t, e);
                                i._stacked && Ss(i, s);
                            }
                            i.data.splice(t, e);
                        }
                        _sync(t) {
                            if (this._parsing) this._syncList.push(t);
                            else {
                                const [e, i, s] = t;
                                this[e](i, s);
                            }
                            this.chart._dataChanges.push([this.index, ...t]);
                        }
                        _onDataPush() {
                            const t = arguments.length;
                            this._sync(["_insertElements", this.getDataset().data.length - t, t]);
                        }
                        _onDataPop() {
                            this._sync(["_removeElements", this._cachedMeta.data.length - 1, 1]);
                        }
                        _onDataShift() {
                            this._sync(["_removeElements", 0, 1]);
                        }
                        _onDataSplice(t, e) {
                            e && this._sync(["_removeElements", t, e]);
                            const i = arguments.length - 2;
                            i && this._sync(["_insertElements", t, i]);
                        }
                        _onDataUnshift() {
                            this._sync(["_insertElements", 0, arguments.length]);
                        }
                    }
                    class Ts {
                        static defaults = {};
                        static defaultRoutes = void 0;
                        active = !1;
                        tooltipPosition(t) {
                            const { x: e, y: i } = this.getProps(["x", "y"], t);
                            return { x: e, y: i };
                        }
                        hasValue() {
                            return F(this.x) && F(this.y);
                        }
                        getProps(t, e) {
                            const i = this.$animations;
                            if (!e || !i) return this;
                            const s = {};
                            return (
                                t.forEach((t) => {
                                    s[t] = i[t] && i[t].active() ? i[t]._to : this[t];
                                }),
                                s
                            );
                        }
                    }
                    function Es(t, e) {
                        const s = t.options.ticks,
                            n = (function (t) {
                                const e = t.options.offset,
                                    i = t._tickSize(),
                                    s = t._length / i + (e ? 0 : 1),
                                    n = t._maxLength / i;
                                return Math.floor(Math.min(s, n));
                            })(t),
                            o = Math.min(s.maxTicksLimit || n, n),
                            a = s.major.enabled
                                ? (function (t) {
                                      const e = [];
                                      let i, s;
                                      for (i = 0, s = t.length; i < s; i++) t[i].major && e.push(i);
                                      return e;
                                  })(e)
                                : [],
                            r = a.length,
                            l = a[0],
                            c = a[r - 1],
                            d = [];
                        if (r > o)
                            return (
                                (function (t, e, i, s) {
                                    let n,
                                        o = 0,
                                        a = i[0];
                                    for (s = Math.ceil(s), n = 0; n < t.length; n++) n === a && (e.push(t[n]), o++, (a = i[o * s]));
                                })(e, d, a, r / o),
                                d
                            );
                        const h = (function (t, e, i) {
                            const s = (function (t) {
                                    const e = t.length;
                                    let i, s;
                                    if (e < 2) return !1;
                                    for (s = t[0], i = 1; i < e; ++i) if (t[i] - t[i - 1] !== s) return !1;
                                    return s;
                                })(t),
                                n = e.length / i;
                            if (!s) return Math.max(n, 1);
                            const o = V(s);
                            for (let t = 0, e = o.length - 1; t < e; t++) {
                                const e = o[t];
                                if (e > n) return e;
                            }
                            return Math.max(n, 1);
                        })(a, e, o);
                        if (r > 0) {
                            let t, s;
                            const n = r > 1 ? Math.round((c - l) / (r - 1)) : null;
                            for (Os(e, d, h, i(n) ? 0 : l - n, l), t = 0, s = r - 1; t < s; t++) Os(e, d, h, a[t], a[t + 1]);
                            return Os(e, d, h, c, i(n) ? e.length : c + n), d;
                        }
                        return Os(e, d, h), d;
                    }
                    function Os(t, e, i, s, n) {
                        const o = r(s, 0),
                            a = Math.min(r(n, t.length), t.length);
                        let l,
                            c,
                            d,
                            h = 0;
                        for (i = Math.ceil(i), n && ((l = n - s), (i = l / Math.floor(l / i))), d = o; d < 0; ) h++, (d = Math.round(o + h * i));
                        for (c = Math.max(o, 0); c < a; c++) c === d && (e.push(t[c]), h++, (d = Math.round(o + h * i)));
                    }
                    const Ps = (t, e, i) => ("top" === e || "left" === e ? t[e] + i : t[e] - i);
                    function Is(t, e) {
                        const i = [],
                            s = t.length / e,
                            n = t.length;
                        let o = 0;
                        for (; o < n; o += s) i.push(t[Math.floor(o)]);
                        return i;
                    }
                    function Ns(t, e, i) {
                        const s = t.ticks.length,
                            n = Math.min(e, s - 1),
                            o = t._startPixel,
                            a = t._endPixel,
                            r = 1e-6;
                        let l,
                            c = t.getPixelForTick(n);
                        if (!(i && ((l = 1 === s ? Math.max(c - o, a - c) : 0 === e ? (t.getPixelForTick(1) - c) / 2 : (c - t.getPixelForTick(n - 1)) / 2), (c += n < e ? l : -l), c < o - r || c > a + r))) return c;
                    }
                    function Rs(t) {
                        return t.drawTicks ? t.tickLength : 0;
                    }
                    function Vs(t, e) {
                        if (!t.display) return 0;
                        const i = vi(t.font, e),
                            n = xi(t.padding);
                        return (s(t.text) ? t.text.length : 1) * i.lineHeight + n.height;
                    }
                    function Fs(t, e, i) {
                        let s = ht(t);
                        return ((i && "right" !== e) || (!i && "right" === e)) && (s = ((t) => ("left" === t ? "right" : "right" === t ? "left" : t))(s)), s;
                    }
                    class Bs extends Ts {
                        constructor(t) {
                            super(),
                                (this.id = t.id),
                                (this.type = t.type),
                                (this.options = void 0),
                                (this.ctx = t.ctx),
                                (this.chart = t.chart),
                                (this.top = void 0),
                                (this.bottom = void 0),
                                (this.left = void 0),
                                (this.right = void 0),
                                (this.width = void 0),
                                (this.height = void 0),
                                (this._margins = { left: 0, right: 0, top: 0, bottom: 0 }),
                                (this.maxWidth = void 0),
                                (this.maxHeight = void 0),
                                (this.paddingTop = void 0),
                                (this.paddingBottom = void 0),
                                (this.paddingLeft = void 0),
                                (this.paddingRight = void 0),
                                (this.axis = void 0),
                                (this.labelRotation = void 0),
                                (this.min = void 0),
                                (this.max = void 0),
                                (this._range = void 0),
                                (this.ticks = []),
                                (this._gridLineItems = null),
                                (this._labelItems = null),
                                (this._labelSizes = null),
                                (this._length = 0),
                                (this._maxLength = 0),
                                (this._longestTextCache = {}),
                                (this._startPixel = void 0),
                                (this._endPixel = void 0),
                                (this._reversePixels = !1),
                                (this._userMax = void 0),
                                (this._userMin = void 0),
                                (this._suggestedMax = void 0),
                                (this._suggestedMin = void 0),
                                (this._ticksLength = 0),
                                (this._borderValue = 0),
                                (this._cache = {}),
                                (this._dataLimitsCached = !1),
                                (this.$context = void 0);
                        }
                        init(t) {
                            (this.options = t.setContext(this.getContext())),
                                (this.axis = t.axis),
                                (this._userMin = this.parse(t.min)),
                                (this._userMax = this.parse(t.max)),
                                (this._suggestedMin = this.parse(t.suggestedMin)),
                                (this._suggestedMax = this.parse(t.suggestedMax));
                        }
                        parse(t, e) {
                            return t;
                        }
                        getUserBounds() {
                            let { _userMin: t, _userMax: e, _suggestedMin: i, _suggestedMax: s } = this;
                            return (
                                (t = a(t, Number.POSITIVE_INFINITY)),
                                (e = a(e, Number.NEGATIVE_INFINITY)),
                                (i = a(i, Number.POSITIVE_INFINITY)),
                                (s = a(s, Number.NEGATIVE_INFINITY)),
                                { min: a(t, i), max: a(e, s), minDefined: o(t), maxDefined: o(e) }
                            );
                        }
                        getMinMax(t) {
                            let e,
                                { min: i, max: s, minDefined: n, maxDefined: o } = this.getUserBounds();
                            if (n && o) return { min: i, max: s };
                            const r = this.getMatchingVisibleMetas();
                            for (let a = 0, l = r.length; a < l; ++a) (e = r[a].controller.getMinMax(this, t)), n || (i = Math.min(i, e.min)), o || (s = Math.max(s, e.max));
                            return (i = o && i > s ? s : i), (s = n && i > s ? i : s), { min: a(i, a(s, i)), max: a(s, a(i, s)) };
                        }
                        getPadding() {
                            return { left: this.paddingLeft || 0, top: this.paddingTop || 0, right: this.paddingRight || 0, bottom: this.paddingBottom || 0 };
                        }
                        getTicks() {
                            return this.ticks;
                        }
                        getLabels() {
                            const t = this.chart.data;
                            return this.options.labels || (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels || [];
                        }
                        beforeLayout() {
                            (this._cache = {}), (this._dataLimitsCached = !1);
                        }
                        beforeUpdate() {
                            d(this.options.beforeUpdate, [this]);
                        }
                        update(t, e, i) {
                            const { beginAtZero: s, grace: n, ticks: o } = this.options,
                                a = o.sampleSize;
                            this.beforeUpdate(),
                                (this.maxWidth = t),
                                (this.maxHeight = e),
                                (this._margins = i = Object.assign({ left: 0, right: 0, top: 0, bottom: 0 }, i)),
                                (this.ticks = null),
                                (this._labelSizes = null),
                                (this._gridLineItems = null),
                                (this._labelItems = null),
                                this.beforeSetDimensions(),
                                this.setDimensions(),
                                this.afterSetDimensions(),
                                (this._maxLength = this.isHorizontal() ? this.width + i.left + i.right : this.height + i.top + i.bottom),
                                this._dataLimitsCached || (this.beforeDataLimits(), this.determineDataLimits(), this.afterDataLimits(), (this._range = _i(this, n, s)), (this._dataLimitsCached = !0)),
                                this.beforeBuildTicks(),
                                (this.ticks = this.buildTicks() || []),
                                this.afterBuildTicks();
                            const r = a < this.ticks.length;
                            this._convertTicksToLabels(r ? Is(this.ticks, a) : this.ticks),
                                this.configure(),
                                this.beforeCalculateLabelRotation(),
                                this.calculateLabelRotation(),
                                this.afterCalculateLabelRotation(),
                                o.display && (o.autoSkip || "auto" === o.source) && ((this.ticks = Es(this, this.ticks)), (this._labelSizes = null), this.afterAutoSkip()),
                                r && this._convertTicksToLabels(this.ticks),
                                this.beforeFit(),
                                this.fit(),
                                this.afterFit(),
                                this.afterUpdate();
                        }
                        configure() {
                            let t,
                                e,
                                i = this.options.reverse;
                            this.isHorizontal() ? ((t = this.left), (e = this.right)) : ((t = this.top), (e = this.bottom), (i = !i)),
                                (this._startPixel = t),
                                (this._endPixel = e),
                                (this._reversePixels = i),
                                (this._length = e - t),
                                (this._alignToPixels = this.options.alignToPixels);
                        }
                        afterUpdate() {
                            d(this.options.afterUpdate, [this]);
                        }
                        beforeSetDimensions() {
                            d(this.options.beforeSetDimensions, [this]);
                        }
                        setDimensions() {
                            this.isHorizontal() ? ((this.width = this.maxWidth), (this.left = 0), (this.right = this.width)) : ((this.height = this.maxHeight), (this.top = 0), (this.bottom = this.height)),
                                (this.paddingLeft = 0),
                                (this.paddingTop = 0),
                                (this.paddingRight = 0),
                                (this.paddingBottom = 0);
                        }
                        afterSetDimensions() {
                            d(this.options.afterSetDimensions, [this]);
                        }
                        _callHooks(t) {
                            this.chart.notifyPlugins(t, this.getContext()), d(this.options[t], [this]);
                        }
                        beforeDataLimits() {
                            this._callHooks("beforeDataLimits");
                        }
                        determineDataLimits() {}
                        afterDataLimits() {
                            this._callHooks("afterDataLimits");
                        }
                        beforeBuildTicks() {
                            this._callHooks("beforeBuildTicks");
                        }
                        buildTicks() {
                            return [];
                        }
                        afterBuildTicks() {
                            this._callHooks("afterBuildTicks");
                        }
                        beforeTickToLabelConversion() {
                            d(this.options.beforeTickToLabelConversion, [this]);
                        }
                        generateTickLabels(t) {
                            const e = this.options.ticks;
                            let i, s, n;
                            for (i = 0, s = t.length; i < s; i++) (n = t[i]), (n.label = d(e.callback, [n.value, i, t], this));
                        }
                        afterTickToLabelConversion() {
                            d(this.options.afterTickToLabelConversion, [this]);
                        }
                        beforeCalculateLabelRotation() {
                            d(this.options.beforeCalculateLabelRotation, [this]);
                        }
                        calculateLabelRotation() {
                            const t = this.options,
                                e = t.ticks,
                                i = this.ticks.length,
                                s = e.minRotation || 0,
                                n = e.maxRotation;
                            let o,
                                a,
                                r,
                                l = s;
                            if (!this._isVisible() || !e.display || s >= n || i <= 1 || !this.isHorizontal()) return void (this.labelRotation = s);
                            const c = this._getLabelSizes(),
                                d = c.widest.width,
                                h = c.highest.height,
                                u = X(this.chart.width - d, 0, this.maxWidth);
                            (o = t.offset ? this.maxWidth / i : u / (i - 1)),
                                d + 6 > o &&
                                    ((o = u / (i - (t.offset ? 0.5 : 1))),
                                    (a = this.maxHeight - Rs(t.grid) - e.padding - Vs(t.title, this.chart.options.font)),
                                    (r = Math.sqrt(d * d + h * h)),
                                    (l = Y(Math.min(Math.asin(X((c.highest.height + 6) / o, -1, 1)), Math.asin(X(a / r, -1, 1)) - Math.asin(X(h / r, -1, 1))))),
                                    (l = Math.max(s, Math.min(n, l)))),
                                (this.labelRotation = l);
                        }
                        afterCalculateLabelRotation() {
                            d(this.options.afterCalculateLabelRotation, [this]);
                        }
                        afterAutoSkip() {}
                        beforeFit() {
                            d(this.options.beforeFit, [this]);
                        }
                        fit() {
                            const t = { width: 0, height: 0 },
                                {
                                    chart: e,
                                    options: { ticks: i, title: s, grid: n },
                                } = this,
                                o = this._isVisible(),
                                a = this.isHorizontal();
                            if (o) {
                                const o = Vs(s, e.options.font);
                                if ((a ? ((t.width = this.maxWidth), (t.height = Rs(n) + o)) : ((t.height = this.maxHeight), (t.width = Rs(n) + o)), i.display && this.ticks.length)) {
                                    const { first: e, last: s, widest: n, highest: o } = this._getLabelSizes(),
                                        r = 2 * i.padding,
                                        l = W(this.labelRotation),
                                        c = Math.cos(l),
                                        d = Math.sin(l);
                                    if (a) {
                                        const e = i.mirror ? 0 : d * n.width + c * o.height;
                                        t.height = Math.min(this.maxHeight, t.height + e + r);
                                    } else {
                                        const e = i.mirror ? 0 : c * n.width + d * o.height;
                                        t.width = Math.min(this.maxWidth, t.width + e + r);
                                    }
                                    this._calculatePadding(e, s, d, c);
                                }
                            }
                            this._handleMargins(),
                                a
                                    ? ((this.width = this._length = e.width - this._margins.left - this._margins.right), (this.height = t.height))
                                    : ((this.width = t.width), (this.height = this._length = e.height - this._margins.top - this._margins.bottom));
                        }
                        _calculatePadding(t, e, i, s) {
                            const {
                                    ticks: { align: n, padding: o },
                                    position: a,
                                } = this.options,
                                r = 0 !== this.labelRotation,
                                l = "top" !== a && "x" === this.axis;
                            if (this.isHorizontal()) {
                                const a = this.getPixelForTick(0) - this.left,
                                    c = this.right - this.getPixelForTick(this.ticks.length - 1);
                                let d = 0,
                                    h = 0;
                                r
                                    ? l
                                        ? ((d = s * t.width), (h = i * e.height))
                                        : ((d = i * t.height), (h = s * e.width))
                                    : "start" === n
                                    ? (h = e.width)
                                    : "end" === n
                                    ? (d = t.width)
                                    : "inner" !== n && ((d = t.width / 2), (h = e.width / 2)),
                                    (this.paddingLeft = Math.max(((d - a + o) * this.width) / (this.width - a), 0)),
                                    (this.paddingRight = Math.max(((h - c + o) * this.width) / (this.width - c), 0));
                            } else {
                                let i = e.height / 2,
                                    s = t.height / 2;
                                "start" === n ? ((i = 0), (s = t.height)) : "end" === n && ((i = e.height), (s = 0)), (this.paddingTop = i + o), (this.paddingBottom = s + o);
                            }
                        }
                        _handleMargins() {
                            this._margins &&
                                ((this._margins.left = Math.max(this.paddingLeft, this._margins.left)),
                                (this._margins.top = Math.max(this.paddingTop, this._margins.top)),
                                (this._margins.right = Math.max(this.paddingRight, this._margins.right)),
                                (this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom)));
                        }
                        afterFit() {
                            d(this.options.afterFit, [this]);
                        }
                        isHorizontal() {
                            const { axis: t, position: e } = this.options;
                            return "top" === e || "bottom" === e || "x" === t;
                        }
                        isFullSize() {
                            return this.options.fullSize;
                        }
                        _convertTicksToLabels(t) {
                            let e, s;
                            for (this.beforeTickToLabelConversion(), this.generateTickLabels(t), e = 0, s = t.length; e < s; e++) i(t[e].label) && (t.splice(e, 1), s--, e--);
                            this.afterTickToLabelConversion();
                        }
                        _getLabelSizes() {
                            let t = this._labelSizes;
                            if (!t) {
                                const e = this.options.ticks.sampleSize;
                                let i = this.ticks;
                                e < i.length && (i = Is(i, e)), (this._labelSizes = t = this._computeLabelSizes(i, i.length));
                            }
                            return t;
                        }
                        _computeLabelSizes(t, e) {
                            const { ctx: n, _longestTextCache: o } = this,
                                a = [],
                                r = [];
                            let l,
                                c,
                                d,
                                u,
                                p,
                                m,
                                f,
                                g,
                                b,
                                x,
                                v,
                                y = 0,
                                _ = 0;
                            for (l = 0; l < e; ++l) {
                                if (((u = t[l].label), (p = this._resolveTickFontOptions(l)), (n.font = m = p.string), (f = o[m] = o[m] || { data: {}, gc: [] }), (g = p.lineHeight), (b = x = 0), i(u) || s(u))) {
                                    if (s(u)) for (c = 0, d = u.length; c < d; ++c) (v = u[c]), i(v) || s(v) || ((b = Ce(n, f.data, f.gc, b, v)), (x += g));
                                } else (b = Ce(n, f.data, f.gc, b, u)), (x = g);
                                a.push(b), r.push(x), (y = Math.max(b, y)), (_ = Math.max(x, _));
                            }
                            !(function (t, e) {
                                h(t, (t) => {
                                    const i = t.gc,
                                        s = i.length / 2;
                                    let n;
                                    if (s > e) {
                                        for (n = 0; n < s; ++n) delete t.data[i[n]];
                                        i.splice(0, s);
                                    }
                                });
                            })(o, e);
                            const C = a.indexOf(y),
                                w = r.indexOf(_),
                                z = (t) => ({ width: a[t] || 0, height: r[t] || 0 });
                            return { first: z(0), last: z(e - 1), widest: z(C), highest: z(w), widths: a, heights: r };
                        }
                        getLabelForValue(t) {
                            return t;
                        }
                        getPixelForValue(t, e) {
                            return NaN;
                        }
                        getValueForPixel(t) {}
                        getPixelForTick(t) {
                            const e = this.ticks;
                            return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value);
                        }
                        getPixelForDecimal(t) {
                            this._reversePixels && (t = 1 - t);
                            const e = this._startPixel + t * this._length;
                            return J(this._alignToPixels ? ze(this.chart, e, 0) : e);
                        }
                        getDecimalForPixel(t) {
                            const e = (t - this._startPixel) / this._length;
                            return this._reversePixels ? 1 - e : e;
                        }
                        getBasePixel() {
                            return this.getPixelForValue(this.getBaseValue());
                        }
                        getBaseValue() {
                            const { min: t, max: e } = this;
                            return t < 0 && e < 0 ? e : t > 0 && e > 0 ? t : 0;
                        }
                        getContext(t) {
                            const e = this.ticks || [];
                            if (t >= 0 && t < e.length) {
                                const i = e[t];
                                return (
                                    i.$context ||
                                    (i.$context = (function (t, e, i) {
                                        return Ci(t, { tick: i, index: e, type: "tick" });
                                    })(this.getContext(), t, i))
                                );
                            }
                            return this.$context || (this.$context = Ci(this.chart.getContext(), { scale: this, type: "scale" }));
                        }
                        _tickSize() {
                            const t = this.options.ticks,
                                e = W(this.labelRotation),
                                i = Math.abs(Math.cos(e)),
                                s = Math.abs(Math.sin(e)),
                                n = this._getLabelSizes(),
                                o = t.autoSkipPadding || 0,
                                a = n ? n.widest.width + o : 0,
                                r = n ? n.highest.height + o : 0;
                            return this.isHorizontal() ? (r * i > a * s ? a / i : r / s) : r * s < a * i ? r / i : a / s;
                        }
                        _isVisible() {
                            const t = this.options.display;
                            return "auto" !== t ? !!t : this.getMatchingVisibleMetas().length > 0;
                        }
                        _computeGridLineItems(t) {
                            const e = this.axis,
                                i = this.chart,
                                s = this.options,
                                { grid: o, position: a, border: l } = s,
                                c = o.offset,
                                d = this.isHorizontal(),
                                h = this.ticks.length + (c ? 1 : 0),
                                u = Rs(o),
                                p = [],
                                m = l.setContext(this.getContext()),
                                f = m.display ? m.width : 0,
                                g = f / 2,
                                b = function (t) {
                                    return ze(i, t, f);
                                };
                            let x, v, y, _, C, w, z, k, M, j, S, A;
                            if ("top" === a) (x = b(this.bottom)), (w = this.bottom - u), (k = x - g), (j = b(t.top) + g), (A = t.bottom);
                            else if ("bottom" === a) (x = b(this.top)), (j = t.top), (A = b(t.bottom) - g), (w = x + g), (k = this.top + u);
                            else if ("left" === a) (x = b(this.right)), (C = this.right - u), (z = x - g), (M = b(t.left) + g), (S = t.right);
                            else if ("right" === a) (x = b(this.left)), (M = t.left), (S = b(t.right) - g), (C = x + g), (z = this.left + u);
                            else if ("x" === e) {
                                if ("center" === a) x = b((t.top + t.bottom) / 2 + 0.5);
                                else if (n(a)) {
                                    const t = Object.keys(a)[0],
                                        e = a[t];
                                    x = b(this.chart.scales[t].getPixelForValue(e));
                                }
                                (j = t.top), (A = t.bottom), (w = x + g), (k = w + u);
                            } else if ("y" === e) {
                                if ("center" === a) x = b((t.left + t.right) / 2);
                                else if (n(a)) {
                                    const t = Object.keys(a)[0],
                                        e = a[t];
                                    x = b(this.chart.scales[t].getPixelForValue(e));
                                }
                                (C = x - g), (z = C - u), (M = t.left), (S = t.right);
                            }
                            const L = r(s.ticks.maxTicksLimit, h),
                                D = Math.max(1, Math.ceil(h / L));
                            for (v = 0; v < h; v += D) {
                                const t = this.getContext(v),
                                    e = o.setContext(t),
                                    s = l.setContext(t),
                                    n = e.lineWidth,
                                    a = e.color,
                                    r = s.dash || [],
                                    h = s.dashOffset,
                                    u = e.tickWidth,
                                    m = e.tickColor,
                                    f = e.tickBorderDash || [],
                                    g = e.tickBorderDashOffset;
                                (y = Ns(this, v, c)),
                                    void 0 !== y &&
                                        ((_ = ze(i, y, n)),
                                        d ? (C = z = M = S = _) : (w = k = j = A = _),
                                        p.push({ tx1: C, ty1: w, tx2: z, ty2: k, x1: M, y1: j, x2: S, y2: A, width: n, color: a, borderDash: r, borderDashOffset: h, tickWidth: u, tickColor: m, tickBorderDash: f, tickBorderDashOffset: g }));
                            }
                            return (this._ticksLength = h), (this._borderValue = x), p;
                        }
                        _computeLabelItems(t) {
                            const e = this.axis,
                                i = this.options,
                                { position: o, ticks: a } = i,
                                r = this.isHorizontal(),
                                l = this.ticks,
                                { align: c, crossAlign: d, padding: h, mirror: u } = a,
                                p = Rs(i.grid),
                                m = p + h,
                                f = u ? -h : m,
                                g = -W(this.labelRotation),
                                b = [];
                            let x,
                                v,
                                y,
                                _,
                                C,
                                w,
                                z,
                                k,
                                M,
                                j,
                                S,
                                A,
                                L = "middle";
                            if ("top" === o) (w = this.bottom - f), (z = this._getXAxisLabelAlignment());
                            else if ("bottom" === o) (w = this.top + f), (z = this._getXAxisLabelAlignment());
                            else if ("left" === o) {
                                const t = this._getYAxisLabelAlignment(p);
                                (z = t.textAlign), (C = t.x);
                            } else if ("right" === o) {
                                const t = this._getYAxisLabelAlignment(p);
                                (z = t.textAlign), (C = t.x);
                            } else if ("x" === e) {
                                if ("center" === o) w = (t.top + t.bottom) / 2 + m;
                                else if (n(o)) {
                                    const t = Object.keys(o)[0],
                                        e = o[t];
                                    w = this.chart.scales[t].getPixelForValue(e) + m;
                                }
                                z = this._getXAxisLabelAlignment();
                            } else if ("y" === e) {
                                if ("center" === o) C = (t.left + t.right) / 2 - m;
                                else if (n(o)) {
                                    const t = Object.keys(o)[0],
                                        e = o[t];
                                    C = this.chart.scales[t].getPixelForValue(e);
                                }
                                z = this._getYAxisLabelAlignment(p).textAlign;
                            }
                            "y" === e && ("start" === c ? (L = "top") : "end" === c && (L = "bottom"));
                            const D = this._getLabelSizes();
                            for (x = 0, v = l.length; x < v; ++x) {
                                (y = l[x]), (_ = y.label);
                                const t = a.setContext(this.getContext(x));
                                (k = this.getPixelForTick(x) + a.labelOffset), (M = this._resolveTickFontOptions(x)), (j = M.lineHeight), (S = s(_) ? _.length : 1);
                                const e = S / 2,
                                    i = t.color,
                                    n = t.textStrokeColor,
                                    c = t.textStrokeWidth;
                                let h,
                                    p = z;
                                if (
                                    (r
                                        ? ((C = k),
                                          "inner" === z && (p = x === v - 1 ? (this.options.reverse ? "left" : "right") : 0 === x ? (this.options.reverse ? "right" : "left") : "center"),
                                          (A =
                                              "top" === o
                                                  ? "near" === d || 0 !== g
                                                      ? -S * j + j / 2
                                                      : "center" === d
                                                      ? -D.highest.height / 2 - e * j + j
                                                      : -D.highest.height + j / 2
                                                  : "near" === d || 0 !== g
                                                  ? j / 2
                                                  : "center" === d
                                                  ? D.highest.height / 2 - e * j
                                                  : D.highest.height - S * j),
                                          u && (A *= -1),
                                          0 === g || t.showLabelBackdrop || (C += (j / 2) * Math.sin(g)))
                                        : ((w = k), (A = ((1 - S) * j) / 2)),
                                    t.showLabelBackdrop)
                                ) {
                                    const e = xi(t.backdropPadding),
                                        i = D.heights[x],
                                        s = D.widths[x];
                                    let n = A - e.top,
                                        o = 0 - e.left;
                                    switch (L) {
                                        case "middle":
                                            n -= i / 2;
                                            break;
                                        case "bottom":
                                            n -= i;
                                    }
                                    switch (z) {
                                        case "center":
                                            o -= s / 2;
                                            break;
                                        case "right":
                                            o -= s;
                                    }
                                    h = { left: o, top: n, width: s + e.width, height: i + e.height, color: t.backdropColor };
                                }
                                b.push({ rotation: g, label: _, font: M, color: i, strokeColor: n, strokeWidth: c, textOffset: A, textAlign: p, textBaseline: L, translation: [C, w], backdrop: h });
                            }
                            return b;
                        }
                        _getXAxisLabelAlignment() {
                            const { position: t, ticks: e } = this.options;
                            if (-W(this.labelRotation)) return "top" === t ? "left" : "right";
                            let i = "center";
                            return "start" === e.align ? (i = "left") : "end" === e.align ? (i = "right") : "inner" === e.align && (i = "inner"), i;
                        }
                        _getYAxisLabelAlignment(t) {
                            const {
                                    position: e,
                                    ticks: { crossAlign: i, mirror: s, padding: n },
                                } = this.options,
                                o = t + n,
                                a = this._getLabelSizes().widest.width;
                            let r, l;
                            return (
                                "left" === e
                                    ? s
                                        ? ((l = this.right + n), "near" === i ? (r = "left") : "center" === i ? ((r = "center"), (l += a / 2)) : ((r = "right"), (l += a)))
                                        : ((l = this.right - o), "near" === i ? (r = "right") : "center" === i ? ((r = "center"), (l -= a / 2)) : ((r = "left"), (l = this.left)))
                                    : "right" === e
                                    ? s
                                        ? ((l = this.left + n), "near" === i ? (r = "right") : "center" === i ? ((r = "center"), (l -= a / 2)) : ((r = "left"), (l -= a)))
                                        : ((l = this.left + o), "near" === i ? (r = "left") : "center" === i ? ((r = "center"), (l += a / 2)) : ((r = "right"), (l = this.right)))
                                    : (r = "right"),
                                { textAlign: r, x: l }
                            );
                        }
                        _computeLabelArea() {
                            if (this.options.ticks.mirror) return;
                            const t = this.chart,
                                e = this.options.position;
                            return "left" === e || "right" === e ? { top: 0, left: this.left, bottom: t.height, right: this.right } : "top" === e || "bottom" === e ? { top: this.top, left: 0, bottom: this.bottom, right: t.width } : void 0;
                        }
                        drawBackground() {
                            const {
                                ctx: t,
                                options: { backgroundColor: e },
                                left: i,
                                top: s,
                                width: n,
                                height: o,
                            } = this;
                            e && (t.save(), (t.fillStyle = e), t.fillRect(i, s, n, o), t.restore());
                        }
                        getLineWidthForValue(t) {
                            const e = this.options.grid;
                            if (!this._isVisible() || !e.display) return 0;
                            const i = this.ticks.findIndex((e) => e.value === t);
                            return i >= 0 ? e.setContext(this.getContext(i)).lineWidth : 0;
                        }
                        drawGrid(t) {
                            const e = this.options.grid,
                                i = this.ctx,
                                s = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(t));
                            let n, o;
                            const a = (t, e, s) => {
                                s.width &&
                                    s.color &&
                                    (i.save(),
                                    (i.lineWidth = s.width),
                                    (i.strokeStyle = s.color),
                                    i.setLineDash(s.borderDash || []),
                                    (i.lineDashOffset = s.borderDashOffset),
                                    i.beginPath(),
                                    i.moveTo(t.x, t.y),
                                    i.lineTo(e.x, e.y),
                                    i.stroke(),
                                    i.restore());
                            };
                            if (e.display)
                                for (n = 0, o = s.length; n < o; ++n) {
                                    const t = s[n];
                                    e.drawOnChartArea && a({ x: t.x1, y: t.y1 }, { x: t.x2, y: t.y2 }, t),
                                        e.drawTicks && a({ x: t.tx1, y: t.ty1 }, { x: t.tx2, y: t.ty2 }, { color: t.tickColor, width: t.tickWidth, borderDash: t.tickBorderDash, borderDashOffset: t.tickBorderDashOffset });
                                }
                        }
                        drawBorder() {
                            const {
                                    chart: t,
                                    ctx: e,
                                    options: { border: i, grid: s },
                                } = this,
                                n = i.setContext(this.getContext()),
                                o = i.display ? n.width : 0;
                            if (!o) return;
                            const a = s.setContext(this.getContext(0)).lineWidth,
                                r = this._borderValue;
                            let l, c, d, h;
                            this.isHorizontal() ? ((l = ze(t, this.left, o) - o / 2), (c = ze(t, this.right, a) + a / 2), (d = h = r)) : ((d = ze(t, this.top, o) - o / 2), (h = ze(t, this.bottom, a) + a / 2), (l = c = r)),
                                e.save(),
                                (e.lineWidth = n.width),
                                (e.strokeStyle = n.color),
                                e.beginPath(),
                                e.moveTo(l, d),
                                e.lineTo(c, h),
                                e.stroke(),
                                e.restore();
                        }
                        drawLabels(t) {
                            if (!this.options.ticks.display) return;
                            const e = this.ctx,
                                i = this._computeLabelArea();
                            i && Ae(e, i);
                            const s = this._labelItems || (this._labelItems = this._computeLabelItems(t));
                            let n, o;
                            for (n = 0, o = s.length; n < o; ++n) {
                                const t = s[n],
                                    i = t.font;
                                Ee(e, t.label, 0, t.textOffset, i, t);
                            }
                            i && Le(e);
                        }
                        drawTitle() {
                            const {
                                ctx: t,
                                options: { position: e, title: i, reverse: o },
                            } = this;
                            if (!i.display) return;
                            const a = vi(i.font),
                                r = xi(i.padding),
                                l = i.align;
                            let c = a.lineHeight / 2;
                            "bottom" === e || "center" === e || n(e) ? ((c += r.bottom), s(i.text) && (c += a.lineHeight * (i.text.length - 1))) : (c += r.top);
                            const { titleX: d, titleY: h, maxWidth: u, rotation: p } = (function (t, e, i, s) {
                                const { top: o, left: a, bottom: r, right: l, chart: c } = t,
                                    { chartArea: d, scales: h } = c;
                                let u,
                                    p,
                                    m,
                                    f = 0;
                                const g = r - o,
                                    b = l - a;
                                if (t.isHorizontal()) {
                                    if (((p = ut(s, a, l)), n(i))) {
                                        const t = Object.keys(i)[0],
                                            s = i[t];
                                        m = h[t].getPixelForValue(s) + g - e;
                                    } else m = "center" === i ? (d.bottom + d.top) / 2 + g - e : Ps(t, i, e);
                                    u = l - a;
                                } else {
                                    if (n(i)) {
                                        const t = Object.keys(i)[0],
                                            s = i[t];
                                        p = h[t].getPixelForValue(s) - b + e;
                                    } else p = "center" === i ? (d.left + d.right) / 2 - b + e : Ps(t, i, e);
                                    (m = ut(s, r, o)), (f = "left" === i ? -T : T);
                                }
                                return { titleX: p, titleY: m, maxWidth: u, rotation: f };
                            })(this, c, e, l);
                            Ee(t, i.text, 0, 0, a, { color: i.color, maxWidth: u, rotation: p, textAlign: Fs(l, e, o), textBaseline: "middle", translation: [d, h] });
                        }
                        draw(t) {
                            this._isVisible() && (this.drawBackground(), this.drawGrid(t), this.drawBorder(), this.drawTitle(), this.drawLabels(t));
                        }
                        _layers() {
                            const t = this.options,
                                e = (t.ticks && t.ticks.z) || 0,
                                i = r(t.grid && t.grid.z, -1),
                                s = r(t.border && t.border.z, 0);
                            return this._isVisible() && this.draw === Bs.prototype.draw
                                ? [
                                      {
                                          z: i,
                                          draw: (t) => {
                                              this.drawBackground(), this.drawGrid(t), this.drawTitle();
                                          },
                                      },
                                      {
                                          z: s,
                                          draw: () => {
                                              this.drawBorder();
                                          },
                                      },
                                      {
                                          z: e,
                                          draw: (t) => {
                                              this.drawLabels(t);
                                          },
                                      },
                                  ]
                                : [
                                      {
                                          z: e,
                                          draw: (t) => {
                                              this.draw(t);
                                          },
                                      },
                                  ];
                        }
                        getMatchingVisibleMetas(t) {
                            const e = this.chart.getSortedVisibleDatasetMetas(),
                                i = this.axis + "AxisID",
                                s = [];
                            let n, o;
                            for (n = 0, o = e.length; n < o; ++n) {
                                const o = e[n];
                                o[i] !== this.id || (t && o.type !== t) || s.push(o);
                            }
                            return s;
                        }
                        _resolveTickFontOptions(t) {
                            return vi(this.options.ticks.setContext(this.getContext(t)).font);
                        }
                        _maxDigits() {
                            const t = this._resolveTickFontOptions(0).lineHeight;
                            return (this.isHorizontal() ? this.width : this.height) / t;
                        }
                    }
                    class Hs {
                        constructor(t, e, i) {
                            (this.type = t), (this.scope = e), (this.override = i), (this.items = Object.create(null));
                        }
                        isForType(t) {
                            return Object.prototype.isPrototypeOf.call(this.type.prototype, t.prototype);
                        }
                        register(t) {
                            const e = Object.getPrototypeOf(t);
                            let i;
                            (function (t) {
                                return "id" in t && "defaults" in t;
                            })(e) && (i = this.register(e));
                            const s = this.items,
                                n = t.id,
                                o = this.scope + "." + n;
                            if (!n) throw new Error("class does not have id: " + t);
                            return (
                                n in s ||
                                    ((s[n] = t),
                                    (function (t, e, i) {
                                        const s = g(Object.create(null), [i ? re.get(i) : {}, re.get(e), t.defaults]);
                                        re.set(e, s),
                                            t.defaultRoutes &&
                                                (function (t, e) {
                                                    Object.keys(e).forEach((i) => {
                                                        const s = i.split("."),
                                                            n = s.pop(),
                                                            o = [t].concat(s).join("."),
                                                            a = e[i].split("."),
                                                            r = a.pop(),
                                                            l = a.join(".");
                                                        re.route(o, n, l, r);
                                                    });
                                                })(e, t.defaultRoutes),
                                            t.descriptors && re.describe(e, t.descriptors);
                                    })(t, o, i),
                                    this.override && re.override(t.id, t.overrides)),
                                o
                            );
                        }
                        get(t) {
                            return this.items[t];
                        }
                        unregister(t) {
                            const e = this.items,
                                i = t.id,
                                s = this.scope;
                            i in e && delete e[i], s && i in re[s] && (delete re[s][i], this.override && delete se[i]);
                        }
                    }
                    var Ws = new (class {
                        constructor() {
                            (this.controllers = new Hs(Ds, "datasets", !0)),
                                (this.elements = new Hs(Ts, "elements")),
                                (this.plugins = new Hs(Object, "plugins")),
                                (this.scales = new Hs(Bs, "scales")),
                                (this._typedRegistries = [this.controllers, this.scales, this.elements]);
                        }
                        add(...t) {
                            this._each("register", t);
                        }
                        remove(...t) {
                            this._each("unregister", t);
                        }
                        addControllers(...t) {
                            this._each("register", t, this.controllers);
                        }
                        addElements(...t) {
                            this._each("register", t, this.elements);
                        }
                        addPlugins(...t) {
                            this._each("register", t, this.plugins);
                        }
                        addScales(...t) {
                            this._each("register", t, this.scales);
                        }
                        getController(t) {
                            return this._get(t, this.controllers, "controller");
                        }
                        getElement(t) {
                            return this._get(t, this.elements, "element");
                        }
                        getPlugin(t) {
                            return this._get(t, this.plugins, "plugin");
                        }
                        getScale(t) {
                            return this._get(t, this.scales, "scale");
                        }
                        removeControllers(...t) {
                            this._each("unregister", t, this.controllers);
                        }
                        removeElements(...t) {
                            this._each("unregister", t, this.elements);
                        }
                        removePlugins(...t) {
                            this._each("unregister", t, this.plugins);
                        }
                        removeScales(...t) {
                            this._each("unregister", t, this.scales);
                        }
                        _each(t, e, i) {
                            [...e].forEach((e) => {
                                const s = i || this._getRegistryForType(e);
                                i || s.isForType(e) || (s === this.plugins && e.id)
                                    ? this._exec(t, s, e)
                                    : h(e, (e) => {
                                          const s = i || this._getRegistryForType(e);
                                          this._exec(t, s, e);
                                      });
                            });
                        }
                        _exec(t, e, i) {
                            const s = C(t);
                            d(i["before" + s], [], i), e[t](i), d(i["after" + s], [], i);
                        }
                        _getRegistryForType(t) {
                            for (let e = 0; e < this._typedRegistries.length; e++) {
                                const i = this._typedRegistries[e];
                                if (i.isForType(t)) return i;
                            }
                            return this.plugins;
                        }
                        _get(t, e, i) {
                            const s = e.get(t);
                            if (void 0 === s) throw new Error('"' + t + '" is not a registered ' + i + ".");
                            return s;
                        }
                    })();
                    class Ys {
                        constructor() {
                            this._init = [];
                        }
                        notify(t, e, i, s) {
                            "beforeInit" === e && ((this._init = this._createDescriptors(t, !0)), this._notify(this._init, t, "install"));
                            const n = s ? this._descriptors(t).filter(s) : this._descriptors(t),
                                o = this._notify(n, t, e, i);
                            return "afterDestroy" === e && (this._notify(n, t, "stop"), this._notify(this._init, t, "uninstall")), o;
                        }
                        _notify(t, e, i, s) {
                            s = s || {};
                            for (const n of t) {
                                const t = n.plugin;
                                if (!1 === d(t[i], [e, s, n.options], t) && s.cancelable) return !1;
                            }
                            return !0;
                        }
                        invalidate() {
                            i(this._cache) || ((this._oldCache = this._cache), (this._cache = void 0));
                        }
                        _descriptors(t) {
                            if (this._cache) return this._cache;
                            const e = (this._cache = this._createDescriptors(t));
                            return this._notifyStateChanges(t), e;
                        }
                        _createDescriptors(t, e) {
                            const i = t && t.config,
                                s = r(i.options && i.options.plugins, {}),
                                n = (function (t) {
                                    const e = {},
                                        i = [],
                                        s = Object.keys(Ws.plugins.items);
                                    for (let t = 0; t < s.length; t++) i.push(Ws.getPlugin(s[t]));
                                    const n = t.plugins || [];
                                    for (let t = 0; t < n.length; t++) {
                                        const s = n[t];
                                        -1 === i.indexOf(s) && (i.push(s), (e[s.id] = !0));
                                    }
                                    return { plugins: i, localIds: e };
                                })(i);
                            return !1 !== s || e
                                ? (function (t, { plugins: e, localIds: i }, s, n) {
                                      const o = [],
                                          a = t.getContext();
                                      for (const r of e) {
                                          const e = r.id,
                                              l = $s(s[e], n);
                                          null !== l && o.push({ plugin: r, options: Us(t.config, { plugin: r, local: i[e] }, l, a) });
                                      }
                                      return o;
                                  })(t, n, s, e)
                                : [];
                        }
                        _notifyStateChanges(t) {
                            const e = this._oldCache || [],
                                i = this._cache,
                                s = (t, e) => t.filter((t) => !e.some((e) => t.plugin.id === e.plugin.id));
                            this._notify(s(e, i), t, "stop"), this._notify(s(i, e), t, "start");
                        }
                    }
                    function $s(t, e) {
                        return e || !1 !== t ? (!0 === t ? {} : t) : null;
                    }
                    function Us(t, { plugin: e, local: i }, s, n) {
                        const o = t.pluginScopeKeys(e),
                            a = t.getOptionScopes(s, o);
                        return i && e.defaults && a.push(e.defaults), t.createResolver(a, n, [""], { scriptable: !1, indexable: !1, allKeys: !0 });
                    }
                    function Zs(t, e) {
                        const i = re.datasets[t] || {};
                        return ((e.datasets || {})[t] || {}).indexAxis || e.indexAxis || i.indexAxis || "x";
                    }
                    function Gs(t, e) {
                        if ("x" === t || "y" === t || "r" === t) return t;
                        var i;
                        if ((t = e.axis || ("top" === (i = e.position) || "bottom" === i ? "x" : "left" === i || "right" === i ? "y" : void 0) || (t.length > 1 && Gs(t[0].toLowerCase(), e)))) return t;
                        throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);
                    }
                    function Ks(t) {
                        const e = t.options || (t.options = {});
                        (e.plugins = r(e.plugins, {})),
                            (e.scales = (function (t, e) {
                                const i = se[t.type] || { scales: {} },
                                    s = e.scales || {},
                                    o = Zs(t.type, e),
                                    a = Object.create(null);
                                return (
                                    Object.keys(s).forEach((t) => {
                                        const e = s[t];
                                        if (!n(e)) return console.error(`Invalid scale configuration for scale: ${t}`);
                                        if (e._proxy) return console.warn(`Ignoring resolver passed as options for scale: ${t}`);
                                        const r = Gs(t, e),
                                            l = (function (t, e) {
                                                return t === e ? "_index_" : "_value_";
                                            })(r, o),
                                            c = i.scales || {};
                                        a[t] = b(Object.create(null), [{ axis: r }, e, c[r], c[l]]);
                                    }),
                                    t.data.datasets.forEach((i) => {
                                        const n = i.type || t.type,
                                            o = i.indexAxis || Zs(n, e),
                                            r = (se[n] || {}).scales || {};
                                        Object.keys(r).forEach((t) => {
                                            const e = (function (t, e) {
                                                    let i = t;
                                                    return "_index_" === t ? (i = e) : "_value_" === t && (i = "x" === e ? "y" : "x"), i;
                                                })(t, o),
                                                n = i[e + "AxisID"] || e;
                                            (a[n] = a[n] || Object.create(null)), b(a[n], [{ axis: e }, s[n], r[t]]);
                                        });
                                    }),
                                    Object.keys(a).forEach((t) => {
                                        const e = a[t];
                                        b(e, [re.scales[e.type], re.scale]);
                                    }),
                                    a
                                );
                            })(t, e));
                    }
                    function qs(t) {
                        return ((t = t || {}).datasets = t.datasets || []), (t.labels = t.labels || []), t;
                    }
                    const Xs = new Map(),
                        Js = new Set();
                    function Qs(t, e) {
                        let i = Xs.get(t);
                        return i || ((i = e()), Xs.set(t, i), Js.add(i)), i;
                    }
                    const tn = (t, e, i) => {
                        const s = _(e, i);
                        void 0 !== s && t.add(s);
                    };
                    class en {
                        constructor(t) {
                            (this._config = (function (t) {
                                return ((t = t || {}).data = qs(t.data)), Ks(t), t;
                            })(t)),
                                (this._scopeCache = new Map()),
                                (this._resolverCache = new Map());
                        }
                        get platform() {
                            return this._config.platform;
                        }
                        get type() {
                            return this._config.type;
                        }
                        set type(t) {
                            this._config.type = t;
                        }
                        get data() {
                            return this._config.data;
                        }
                        set data(t) {
                            this._config.data = qs(t);
                        }
                        get options() {
                            return this._config.options;
                        }
                        set options(t) {
                            this._config.options = t;
                        }
                        get plugins() {
                            return this._config.plugins;
                        }
                        update() {
                            const t = this._config;
                            this.clearCache(), Ks(t);
                        }
                        clearCache() {
                            this._scopeCache.clear(), this._resolverCache.clear();
                        }
                        datasetScopeKeys(t) {
                            return Qs(t, () => [[`datasets.${t}`, ""]]);
                        }
                        datasetAnimationScopeKeys(t, e) {
                            return Qs(`${t}.transition.${e}`, () => [
                                [`datasets.${t}.transitions.${e}`, `transitions.${e}`],
                                [`datasets.${t}`, ""],
                            ]);
                        }
                        datasetElementScopeKeys(t, e) {
                            return Qs(`${t}-${e}`, () => [[`datasets.${t}.elements.${e}`, `datasets.${t}`, `elements.${e}`, ""]]);
                        }
                        pluginScopeKeys(t) {
                            const e = t.id;
                            return Qs(`${this.type}-plugin-${e}`, () => [[`plugins.${e}`, ...(t.additionalOptionScopes || [])]]);
                        }
                        _cachedScopes(t, e) {
                            const i = this._scopeCache;
                            let s = i.get(t);
                            return (s && !e) || ((s = new Map()), i.set(t, s)), s;
                        }
                        getOptionScopes(t, e, i) {
                            const { options: s, type: n } = this,
                                o = this._cachedScopes(t, i),
                                a = o.get(e);
                            if (a) return a;
                            const r = new Set();
                            e.forEach((e) => {
                                t && (r.add(t), e.forEach((e) => tn(r, t, e))), e.forEach((t) => tn(r, s, t)), e.forEach((t) => tn(r, se[n] || {}, t)), e.forEach((t) => tn(r, re, t)), e.forEach((t) => tn(r, ne, t));
                            });
                            const l = Array.from(r);
                            return 0 === l.length && l.push(Object.create(null)), Js.has(e) && o.set(e, l), l;
                        }
                        chartOptionScopes() {
                            const { options: t, type: e } = this;
                            return [t, se[e] || {}, re.datasets[e] || {}, { type: e }, re, ne];
                        }
                        resolveNamedOptions(t, e, i, n = [""]) {
                            const o = { $shared: !0 },
                                { resolver: a, subPrefixes: r } = sn(this._resolverCache, t, n);
                            let l = a;
                            (function (t, e) {
                                const { isScriptable: i, isIndexable: n } = Ve(t);
                                for (const o of e) {
                                    const e = i(o),
                                        a = n(o),
                                        r = (a || e) && t[o];
                                    if ((e && (z(r) || nn(r))) || (a && s(r))) return !0;
                                }
                                return !1;
                            })(a, e) && ((o.$shared = !1), (l = Re(a, (i = z(i) ? i() : i), this.createResolver(t, i, r))));
                            for (const t of e) o[t] = l[t];
                            return o;
                        }
                        createResolver(t, e, i = [""], s) {
                            const { resolver: o } = sn(this._resolverCache, t, i);
                            return n(e) ? Re(o, e, void 0, s) : o;
                        }
                    }
                    function sn(t, e, i) {
                        let s = t.get(e);
                        s || ((s = new Map()), t.set(e, s));
                        const n = i.join();
                        let o = s.get(n);
                        return o || ((o = { resolver: Ne(e, i), subPrefixes: i.filter((t) => !t.toLowerCase().includes("hover")) }), s.set(n, o)), o;
                    }
                    const nn = (t) => n(t) && Object.getOwnPropertyNames(t).reduce((e, i) => e || z(t[i]), !1),
                        on = ["top", "bottom", "left", "right", "chartArea"];
                    function an(t, e) {
                        return "top" === t || "bottom" === t || (-1 === on.indexOf(t) && "x" === e);
                    }
                    function rn(t, e) {
                        return function (i, s) {
                            return i[t] === s[t] ? i[e] - s[e] : i[t] - s[t];
                        };
                    }
                    function ln(t) {
                        const e = t.chart,
                            i = e.options.animation;
                        e.notifyPlugins("afterRender"), d(i && i.onComplete, [t], e);
                    }
                    function cn(t) {
                        const e = t.chart,
                            i = e.options.animation;
                        d(i && i.onProgress, [t], e);
                    }
                    function _n(t) {
                        return le() && "string" == typeof t ? (t = document.getElementById(t)) : t && t.length && (t = t[0]), t && t.canvas && (t = t.canvas), t;
                    }
                    const dn = {},
                        hn = (t) => {
                            const e = _n(t);
                            return Object.values(dn)
                                .filter((t) => t.canvas === e)
                                .pop();
                        };
                    function un(t, e, i) {
                        const s = Object.keys(t);
                        for (const n of s) {
                            const s = +n;
                            if (s >= e) {
                                const o = t[n];
                                delete t[n], (i > 0 || s > e) && (t[s + i] = o);
                            }
                        }
                    }
                    class pn {
                        static defaults = re;
                        static instances = dn;
                        static overrides = se;
                        static registry = Ws;
                        static version = "4.0.1";
                        static getChart = hn;
                        static register(...t) {
                            Ws.add(...t), mn();
                        }
                        static unregister(...t) {
                            Ws.remove(...t), mn();
                        }
                        constructor(t, i) {
                            const s = (this.config = new en(i)),
                                n = _n(t),
                                o = hn(n);
                            if (o) throw new Error("Canvas is already in use. Chart with ID '" + o.id + "' must be destroyed before the canvas with ID '" + o.canvas.id + "' can be reused.");
                            const a = s.createResolver(s.chartOptionScopes(), this.getContext());
                            (this.platform = new (s.platform || ms(n))()), this.platform.updateConfig(s);
                            const r = this.platform.acquireContext(n, a.aspectRatio),
                                l = r && r.canvas,
                                c = l && l.height,
                                d = l && l.width;
                            (this.id = e()),
                                (this.ctx = r),
                                (this.canvas = l),
                                (this.width = d),
                                (this.height = c),
                                (this._options = a),
                                (this._aspectRatio = this.aspectRatio),
                                (this._layers = []),
                                (this._metasets = []),
                                (this._stacks = void 0),
                                (this.boxes = []),
                                (this.currentDevicePixelRatio = void 0),
                                (this.chartArea = void 0),
                                (this._active = []),
                                (this._lastEvent = void 0),
                                (this._listeners = {}),
                                (this._responsiveListeners = void 0),
                                (this._sortedMetasets = []),
                                (this.scales = {}),
                                (this._plugins = new Ys()),
                                (this.$proxies = {}),
                                (this._hiddenIndices = {}),
                                (this.attached = !1),
                                (this._animationsDisabled = void 0),
                                (this.$context = void 0),
                                (this._doResize = dt((t) => this.update(t), a.resizeDelay || 0)),
                                (this._dataChanges = []),
                                (dn[this.id] = this),
                                r && l
                                    ? (gt.listen(this, "complete", ln), gt.listen(this, "progress", cn), this._initialize(), this.attached && this.update())
                                    : console.error("Failed to create chart: can't acquire context from the given item");
                        }
                        get aspectRatio() {
                            const {
                                options: { aspectRatio: t, maintainAspectRatio: e },
                                width: s,
                                height: n,
                                _aspectRatio: o,
                            } = this;
                            return i(t) ? (e && o ? o : n ? s / n : null) : t;
                        }
                        get data() {
                            return this.config.data;
                        }
                        set data(t) {
                            this.config.data = t;
                        }
                        get options() {
                            return this._options;
                        }
                        set options(t) {
                            this.config.options = t;
                        }
                        get registry() {
                            return Ws;
                        }
                        _initialize() {
                            return this.notifyPlugins("beforeInit"), this.options.responsive ? this.resize() : xe(this, this.options.devicePixelRatio), this.bindEvents(), this.notifyPlugins("afterInit"), this;
                        }
                        clear() {
                            return ke(this.canvas, this.ctx), this;
                        }
                        stop() {
                            return gt.stop(this), this;
                        }
                        resize(t, e) {
                            gt.running(this) ? (this._resizeBeforeDraw = { width: t, height: e }) : this._resize(t, e);
                        }
                        _resize(t, e) {
                            const i = this.options,
                                s = this.canvas,
                                n = i.maintainAspectRatio && this.aspectRatio,
                                o = this.platform.getMaximumSize(s, t, e, n),
                                a = i.devicePixelRatio || this.platform.getDevicePixelRatio(),
                                r = this.width ? "resize" : "attach";
                            (this.width = o.width),
                                (this.height = o.height),
                                (this._aspectRatio = this.aspectRatio),
                                xe(this, a, !0) && (this.notifyPlugins("resize", { size: o }), d(i.onResize, [this, o], this), this.attached && this._doResize(r) && this.render());
                        }
                        ensureScalesHaveIDs() {
                            h(this.options.scales || {}, (t, e) => {
                                t.id = e;
                            });
                        }
                        buildOrUpdateScales() {
                            const t = this.options,
                                e = t.scales,
                                i = this.scales,
                                s = Object.keys(i).reduce((t, e) => ((t[e] = !1), t), {});
                            let n = [];
                            e &&
                                (n = n.concat(
                                    Object.keys(e).map((t) => {
                                        const i = e[t],
                                            s = Gs(t, i),
                                            n = "r" === s,
                                            o = "x" === s;
                                        return { options: i, dposition: n ? "chartArea" : o ? "bottom" : "left", dtype: n ? "radialLinear" : o ? "category" : "linear" };
                                    })
                                )),
                                h(n, (e) => {
                                    const n = e.options,
                                        o = n.id,
                                        a = Gs(o, n),
                                        l = r(n.type, e.dtype);
                                    (void 0 !== n.position && an(n.position, a) === an(e.dposition)) || (n.position = e.dposition), (s[o] = !0);
                                    let c = null;
                                    o in i && i[o].type === l ? (c = i[o]) : ((c = new (Ws.getScale(l))({ id: o, type: l, ctx: this.ctx, chart: this })), (i[c.id] = c)), c.init(n, t);
                                }),
                                h(s, (t, e) => {
                                    t || delete i[e];
                                }),
                                h(i, (t) => {
                                    Xi.configure(this, t, t.options), Xi.addBox(this, t);
                                });
                        }
                        _updateMetasets() {
                            const t = this._metasets,
                                e = this.data.datasets.length,
                                i = t.length;
                            if ((t.sort((t, e) => t.index - e.index), i > e)) {
                                for (let t = e; t < i; ++t) this._destroyDatasetMeta(t);
                                t.splice(e, i - e);
                            }
                            this._sortedMetasets = t.slice(0).sort(rn("order", "index"));
                        }
                        _removeUnreferencedMetasets() {
                            const {
                                _metasets: t,
                                data: { datasets: e },
                            } = this;
                            t.length > e.length && delete this._stacks,
                                t.forEach((t, i) => {
                                    0 === e.filter((e) => e === t._dataset).length && this._destroyDatasetMeta(i);
                                });
                        }
                        buildOrUpdateControllers() {
                            const t = [],
                                e = this.data.datasets;
                            let i, s;
                            for (this._removeUnreferencedMetasets(), i = 0, s = e.length; i < s; i++) {
                                const s = e[i];
                                let n = this.getDatasetMeta(i);
                                const o = s.type || this.config.type;
                                if (
                                    (n.type && n.type !== o && (this._destroyDatasetMeta(i), (n = this.getDatasetMeta(i))),
                                    (n.type = o),
                                    (n.indexAxis = s.indexAxis || Zs(o, this.options)),
                                    (n.order = s.order || 0),
                                    (n.index = i),
                                    (n.label = "" + s.label),
                                    (n.visible = this.isDatasetVisible(i)),
                                    n.controller)
                                )
                                    n.controller.updateIndex(i), n.controller.linkScales();
                                else {
                                    const e = Ws.getController(o),
                                        { datasetElementType: s, dataElementType: a } = re.datasets[o];
                                    Object.assign(e, { dataElementType: Ws.getElement(a), datasetElementType: s && Ws.getElement(s) }), (n.controller = new e(this, i)), t.push(n.controller);
                                }
                            }
                            return this._updateMetasets(), t;
                        }
                        _resetElements() {
                            h(
                                this.data.datasets,
                                (t, e) => {
                                    this.getDatasetMeta(e).controller.reset();
                                },
                                this
                            );
                        }
                        reset() {
                            this._resetElements(), this.notifyPlugins("reset");
                        }
                        update(t) {
                            const e = this.config;
                            e.update();
                            const i = (this._options = e.createResolver(e.chartOptionScopes(), this.getContext())),
                                s = (this._animationsDisabled = !i.animation);
                            if ((this._updateScales(), this._checkEventBindings(), this._updateHiddenIndices(), this._plugins.invalidate(), !1 === this.notifyPlugins("beforeUpdate", { mode: t, cancelable: !0 }))) return;
                            const n = this.buildOrUpdateControllers();
                            this.notifyPlugins("beforeElementsUpdate");
                            let o = 0;
                            for (let t = 0, e = this.data.datasets.length; t < e; t++) {
                                const { controller: e } = this.getDatasetMeta(t),
                                    i = !s && -1 === n.indexOf(e);
                                e.buildOrUpdateElements(i), (o = Math.max(+e.getMaxOverflow(), o));
                            }
                            (o = this._minPadding = i.layout.autoPadding ? o : 0),
                                this._updateLayout(o),
                                s ||
                                    h(n, (t) => {
                                        t.reset();
                                    }),
                                this._updateDatasets(t),
                                this.notifyPlugins("afterUpdate", { mode: t }),
                                this._layers.sort(rn("z", "_idx"));
                            const { _active: a, _lastEvent: r } = this;
                            r ? this._eventHandler(r, !0) : a.length && this._updateHoverStyles(a, a, !0), this.render();
                        }
                        _updateScales() {
                            h(this.scales, (t) => {
                                Xi.removeBox(this, t);
                            }),
                                this.ensureScalesHaveIDs(),
                                this.buildOrUpdateScales();
                        }
                        _checkEventBindings() {
                            const t = this.options,
                                e = new Set(Object.keys(this._listeners)),
                                i = new Set(t.events);
                            (k(e, i) && !!this._responsiveListeners === t.responsive) || (this.unbindEvents(), this.bindEvents());
                        }
                        _updateHiddenIndices() {
                            const { _hiddenIndices: t } = this,
                                e = this._getUniformDataChanges() || [];
                            for (const { method: i, start: s, count: n } of e) un(t, s, "_removeElements" === i ? -n : n);
                        }
                        _getUniformDataChanges() {
                            const t = this._dataChanges;
                            if (!t || !t.length) return;
                            this._dataChanges = [];
                            const e = this.data.datasets.length,
                                i = (e) => new Set(t.filter((t) => t[0] === e).map((t, e) => e + "," + t.splice(1).join(","))),
                                s = i(0);
                            for (let t = 1; t < e; t++) if (!k(s, i(t))) return;
                            return Array.from(s)
                                .map((t) => t.split(","))
                                .map((t) => ({ method: t[1], start: +t[2], count: +t[3] }));
                        }
                        _updateLayout(t) {
                            if (!1 === this.notifyPlugins("beforeLayout", { cancelable: !0 })) return;
                            Xi.update(this, this.width, this.height, t);
                            const e = this.chartArea,
                                i = e.width <= 0 || e.height <= 0;
                            (this._layers = []),
                                h(
                                    this.boxes,
                                    (t) => {
                                        (i && "chartArea" === t.position) || (t.configure && t.configure(), this._layers.push(...t._layers()));
                                    },
                                    this
                                ),
                                this._layers.forEach((t, e) => {
                                    t._idx = e;
                                }),
                                this.notifyPlugins("afterLayout");
                        }
                        _updateDatasets(t) {
                            if (!1 !== this.notifyPlugins("beforeDatasetsUpdate", { mode: t, cancelable: !0 })) {
                                for (let t = 0, e = this.data.datasets.length; t < e; ++t) this.getDatasetMeta(t).controller.configure();
                                for (let e = 0, i = this.data.datasets.length; e < i; ++e) this._updateDataset(e, z(t) ? t({ datasetIndex: e }) : t);
                                this.notifyPlugins("afterDatasetsUpdate", { mode: t });
                            }
                        }
                        _updateDataset(t, e) {
                            const i = this.getDatasetMeta(t),
                                s = { meta: i, index: t, mode: e, cancelable: !0 };
                            !1 !== this.notifyPlugins("beforeDatasetUpdate", s) && (i.controller._update(e), (s.cancelable = !1), this.notifyPlugins("afterDatasetUpdate", s));
                        }
                        render() {
                            !1 !== this.notifyPlugins("beforeRender", { cancelable: !0 }) && (gt.has(this) ? this.attached && !gt.running(this) && gt.start(this) : (this.draw(), ln({ chart: this })));
                        }
                        draw() {
                            let t;
                            if (this._resizeBeforeDraw) {
                                const { width: t, height: e } = this._resizeBeforeDraw;
                                this._resize(t, e), (this._resizeBeforeDraw = null);
                            }
                            if ((this.clear(), this.width <= 0 || this.height <= 0)) return;
                            if (!1 === this.notifyPlugins("beforeDraw", { cancelable: !0 })) return;
                            const e = this._layers;
                            for (t = 0; t < e.length && e[t].z <= 0; ++t) e[t].draw(this.chartArea);
                            for (this._drawDatasets(); t < e.length; ++t) e[t].draw(this.chartArea);
                            this.notifyPlugins("afterDraw");
                        }
                        _getSortedDatasetMetas(t) {
                            const e = this._sortedMetasets,
                                i = [];
                            let s, n;
                            for (s = 0, n = e.length; s < n; ++s) {
                                const n = e[s];
                                (t && !n.visible) || i.push(n);
                            }
                            return i;
                        }
                        getSortedVisibleDatasetMetas() {
                            return this._getSortedDatasetMetas(!0);
                        }
                        _drawDatasets() {
                            if (!1 === this.notifyPlugins("beforeDatasetsDraw", { cancelable: !0 })) return;
                            const t = this.getSortedVisibleDatasetMetas();
                            for (let e = t.length - 1; e >= 0; --e) this._drawDataset(t[e]);
                            this.notifyPlugins("afterDatasetsDraw");
                        }
                        _drawDataset(t) {
                            const e = this.ctx,
                                i = t._clip,
                                s = !i.disabled,
                                n =
                                    (function (t) {
                                        const { xScale: e, yScale: i } = t;
                                        if (e && i) return { left: e.left, right: e.right, top: i.top, bottom: i.bottom };
                                    })(t) || this.chartArea,
                                o = { meta: t, index: t.index, cancelable: !0 };
                            !1 !== this.notifyPlugins("beforeDatasetDraw", o) &&
                                (s &&
                                    Ae(e, {
                                        left: !1 === i.left ? 0 : n.left - i.left,
                                        right: !1 === i.right ? this.width : n.right + i.right,
                                        top: !1 === i.top ? 0 : n.top - i.top,
                                        bottom: !1 === i.bottom ? this.height : n.bottom + i.bottom,
                                    }),
                                t.controller.draw(),
                                s && Le(e),
                                (o.cancelable = !1),
                                this.notifyPlugins("afterDatasetDraw", o));
                        }
                        isPointInArea(t) {
                            return Se(t, this.chartArea, this._minPadding);
                        }
                        getElementsAtEventForMode(t, e, i, s) {
                            const n = Vi.modes[e];
                            return "function" == typeof n ? n(this, t, i, s) : [];
                        }
                        getDatasetMeta(t) {
                            const e = this.data.datasets[t],
                                i = this._metasets;
                            let s = i.filter((t) => t && t._dataset === e).pop();
                            return (
                                s || ((s = { type: null, data: [], dataset: null, controller: null, hidden: null, xAxisID: null, yAxisID: null, order: (e && e.order) || 0, index: t, _dataset: e, _parsed: [], _sorted: !1 }), i.push(s)), s
                            );
                        }
                        getContext() {
                            return this.$context || (this.$context = Ci(null, { chart: this, type: "chart" }));
                        }
                        getVisibleDatasetCount() {
                            return this.getSortedVisibleDatasetMetas().length;
                        }
                        isDatasetVisible(t) {
                            const e = this.data.datasets[t];
                            if (!e) return !1;
                            const i = this.getDatasetMeta(t);
                            return "boolean" == typeof i.hidden ? !i.hidden : !e.hidden;
                        }
                        setDatasetVisibility(t, e) {
                            this.getDatasetMeta(t).hidden = !e;
                        }
                        toggleDataVisibility(t) {
                            this._hiddenIndices[t] = !this._hiddenIndices[t];
                        }
                        getDataVisibility(t) {
                            return !this._hiddenIndices[t];
                        }
                        _updateVisibility(t, e, i) {
                            const s = i ? "show" : "hide",
                                n = this.getDatasetMeta(t),
                                o = n.controller._resolveAnimations(void 0, s);
                            w(e) ? ((n.data[e].hidden = !i), this.update()) : (this.setDatasetVisibility(t, i), o.update(n, { visible: i }), this.update((e) => (e.datasetIndex === t ? s : void 0)));
                        }
                        hide(t, e) {
                            this._updateVisibility(t, e, !1);
                        }
                        show(t, e) {
                            this._updateVisibility(t, e, !0);
                        }
                        _destroyDatasetMeta(t) {
                            const e = this._metasets[t];
                            e && e.controller && e.controller._destroy(), delete this._metasets[t];
                        }
                        _stop() {
                            let t, e;
                            for (this.stop(), gt.remove(this), t = 0, e = this.data.datasets.length; t < e; ++t) this._destroyDatasetMeta(t);
                        }
                        destroy() {
                            this.notifyPlugins("beforeDestroy");
                            const { canvas: t, ctx: e } = this;
                            this._stop(), this.config.clearCache(), t && (this.unbindEvents(), ke(t, e), this.platform.releaseContext(e), (this.canvas = null), (this.ctx = null)), delete dn[this.id], this.notifyPlugins("afterDestroy");
                        }
                        toBase64Image(...t) {
                            return this.canvas.toDataURL(...t);
                        }
                        bindEvents() {
                            this.bindUserEvents(), this.options.responsive ? this.bindResponsiveEvents() : (this.attached = !0);
                        }
                        bindUserEvents() {
                            const t = this._listeners,
                                e = this.platform,
                                i = (i, s) => {
                                    e.addEventListener(this, i, s), (t[i] = s);
                                },
                                s = (t, e, i) => {
                                    (t.offsetX = e), (t.offsetY = i), this._eventHandler(t);
                                };
                            h(this.options.events, (t) => i(t, s));
                        }
                        bindResponsiveEvents() {
                            this._responsiveListeners || (this._responsiveListeners = {});
                            const t = this._responsiveListeners,
                                e = this.platform,
                                i = (i, s) => {
                                    e.addEventListener(this, i, s), (t[i] = s);
                                },
                                s = (i, s) => {
                                    t[i] && (e.removeEventListener(this, i, s), delete t[i]);
                                },
                                n = (t, e) => {
                                    this.canvas && this.resize(t, e);
                                };
                            let o;
                            const a = () => {
                                s("attach", a), (this.attached = !0), this.resize(), i("resize", n), i("detach", o);
                            };
                            (o = () => {
                                (this.attached = !1), s("resize", n), this._stop(), this._resize(0, 0), i("attach", a);
                            }),
                                e.isAttached(this.canvas) ? a() : o();
                        }
                        unbindEvents() {
                            h(this._listeners, (t, e) => {
                                this.platform.removeEventListener(this, e, t);
                            }),
                                (this._listeners = {}),
                                h(this._responsiveListeners, (t, e) => {
                                    this.platform.removeEventListener(this, e, t);
                                }),
                                (this._responsiveListeners = void 0);
                        }
                        updateHoverStyle(t, e, i) {
                            const s = i ? "set" : "remove";
                            let n, o, a, r;
                            for ("dataset" === e && ((n = this.getDatasetMeta(t[0].datasetIndex)), n.controller["_" + s + "DatasetHoverStyle"]()), a = 0, r = t.length; a < r; ++a) {
                                o = t[a];
                                const e = o && this.getDatasetMeta(o.datasetIndex).controller;
                                e && e[s + "HoverStyle"](o.element, o.datasetIndex, o.index);
                            }
                        }
                        getActiveElements() {
                            return this._active || [];
                        }
                        setActiveElements(t) {
                            const e = this._active || [],
                                i = t.map(({ datasetIndex: t, index: e }) => {
                                    const i = this.getDatasetMeta(t);
                                    if (!i) throw new Error("No dataset found at index " + t);
                                    return { datasetIndex: t, element: i.data[e], index: e };
                                });
                            !u(i, e) && ((this._active = i), (this._lastEvent = null), this._updateHoverStyles(i, e));
                        }
                        notifyPlugins(t, e, i) {
                            return this._plugins.notify(this, t, e, i);
                        }
                        isPluginEnabled(t) {
                            return 1 === this._plugins._cache.filter((e) => e.plugin.id === t).length;
                        }
                        _updateHoverStyles(t, e, i) {
                            const s = this.options.hover,
                                n = (t, e) => t.filter((t) => !e.some((e) => t.datasetIndex === e.datasetIndex && t.index === e.index)),
                                o = n(e, t),
                                a = i ? t : n(t, e);
                            o.length && this.updateHoverStyle(o, s.mode, !1), a.length && s.mode && this.updateHoverStyle(a, s.mode, !0);
                        }
                        _eventHandler(t, e) {
                            const i = { event: t, replay: e, cancelable: !0, inChartArea: this.isPointInArea(t) },
                                s = (e) => (e.options.events || this.options.events).includes(t.native.type);
                            if (!1 === this.notifyPlugins("beforeEvent", i, s)) return;
                            const n = this._handleEvent(t, e, i.inChartArea);
                            return (i.cancelable = !1), this.notifyPlugins("afterEvent", i, s), (n || i.changed) && this.render(), this;
                        }
                        _handleEvent(t, e, i) {
                            const { _active: s = [], options: n } = this,
                                o = e,
                                a = this._getActiveElements(t, s, i, o),
                                r = M(t),
                                l = (function (t, e, i, s) {
                                    return i && "mouseout" !== t.type ? (s ? e : t) : null;
                                })(t, this._lastEvent, i, r);
                            i && ((this._lastEvent = null), d(n.onHover, [t, a, this], this), r && d(n.onClick, [t, a, this], this));
                            const c = !u(a, s);
                            return (c || e) && ((this._active = a), this._updateHoverStyles(a, s, e)), (this._lastEvent = l), c;
                        }
                        _getActiveElements(t, e, i, s) {
                            if ("mouseout" === t.type) return [];
                            if (!i) return e;
                            const n = this.options.hover;
                            return this.getElementsAtEventForMode(t, n.mode, n, s);
                        }
                    }
                    function mn() {
                        return h(pn.instances, (t) => t._plugins.invalidate());
                    }
                    var fn = pn;
                    function gn() {
                        throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
                    }
                    class bn {
                        static override(t) {
                            Object.assign(bn.prototype, t);
                        }
                        constructor(t) {
                            this.options = t || {};
                        }
                        init() {}
                        formats() {
                            return gn();
                        }
                        parse() {
                            return gn();
                        }
                        format() {
                            return gn();
                        }
                        add() {
                            return gn();
                        }
                        diff() {
                            return gn();
                        }
                        startOf() {
                            return gn();
                        }
                        endOf() {
                            return gn();
                        }
                    }
                    var xn = { _date: bn };
                    function vn(t) {
                        const e = t.iScale,
                            i = (function (t, e) {
                                if (!t._cache.$bar) {
                                    const i = t.getMatchingVisibleMetas(e);
                                    let s = [];
                                    for (let e = 0, n = i.length; e < n; e++) s = s.concat(i[e].controller.getAllParsedValues(t));
                                    t._cache.$bar = rt(s.sort((t, e) => t - e));
                                }
                                return t._cache.$bar;
                            })(e, t.type);
                        let s,
                            n,
                            o,
                            a,
                            r = e._length;
                        const l = () => {
                            32767 !== o && -32768 !== o && (w(a) && (r = Math.min(r, Math.abs(o - a) || r)), (a = o));
                        };
                        for (s = 0, n = i.length; s < n; ++s) (o = e.getPixelForValue(i[s])), l();
                        for (a = void 0, s = 0, n = e.ticks.length; s < n; ++s) (o = e.getPixelForTick(s)), l();
                        return r;
                    }
                    function yn(t, e, i, n) {
                        return (
                            s(t)
                                ? (function (t, e, i, s) {
                                      const n = i.parse(t[0], s),
                                          o = i.parse(t[1], s),
                                          a = Math.min(n, o),
                                          r = Math.max(n, o);
                                      let l = a,
                                          c = r;
                                      Math.abs(a) > Math.abs(r) && ((l = r), (c = a)), (e[i.axis] = c), (e._custom = { barStart: l, barEnd: c, start: n, end: o, min: a, max: r });
                                  })(t, e, i, n)
                                : (e[i.axis] = i.parse(t, n)),
                            e
                        );
                    }
                    function Cn(t, e, i, s) {
                        const n = t.iScale,
                            o = t.vScale,
                            a = n.getLabels(),
                            r = n === o,
                            l = [];
                        let c, d, h, u;
                        for (c = i, d = i + s; c < d; ++c) (u = e[c]), (h = {}), (h[n.axis] = r || n.parse(a[c], c)), l.push(yn(u, h, o, c));
                        return l;
                    }
                    function wn(t) {
                        return t && void 0 !== t.barStart && void 0 !== t.barEnd;
                    }
                    function zn(t, e, i, s) {
                        let n = e.borderSkipped;
                        const o = {};
                        if (!n) return void (t.borderSkipped = o);
                        if (!0 === n) return void (t.borderSkipped = { top: !0, right: !0, bottom: !0, left: !0 });
                        const { start: a, end: r, reverse: l, top: c, bottom: d } = (function (t) {
                            let e, i, s, n, o;
                            return (
                                t.horizontal ? ((e = t.base > t.x), (i = "left"), (s = "right")) : ((e = t.base < t.y), (i = "bottom"), (s = "top")),
                                e ? ((n = "end"), (o = "start")) : ((n = "start"), (o = "end")),
                                { start: i, end: s, reverse: e, top: n, bottom: o }
                            );
                        })(t);
                        "middle" === n && i && ((t.enableBorderRadius = !0), (i._top || 0) === s ? (n = c) : (i._bottom || 0) === s ? (n = d) : ((o[kn(d, a, r, l)] = !0), (n = c))), (o[kn(n, a, r, l)] = !0), (t.borderSkipped = o);
                    }
                    function kn(t, e, i, s) {
                        var n, o, a;
                        return s ? ((a = i), (t = Mn((t = (n = t) === (o = e) ? a : n === a ? o : n), i, e))) : (t = Mn(t, e, i)), t;
                    }
                    function Mn(t, e, i) {
                        return "start" === t ? e : "end" === t ? i : t;
                    }
                    function jn(t, { inflateAmount: e }, i) {
                        t.inflateAmount = "auto" === e ? (1 === i ? 0.33 : 0) : e;
                    }
                    class Sn extends Ds {
                        static id = "doughnut";
                        static defaults = {
                            datasetElementType: !1,
                            dataElementType: "arc",
                            animation: { animateRotate: !0, animateScale: !1 },
                            animations: { numbers: { type: "number", properties: ["circumference", "endAngle", "innerRadius", "outerRadius", "startAngle", "x", "y", "offset", "borderWidth", "spacing"] } },
                            cutout: "50%",
                            rotation: 0,
                            circumference: 360,
                            radius: "100%",
                            spacing: 0,
                            indexAxis: "r",
                        };
                        static descriptors = { _scriptable: (t) => "spacing" !== t, _indexable: (t) => "spacing" !== t };
                        static overrides = {
                            aspectRatio: 1,
                            plugins: {
                                legend: {
                                    labels: {
                                        generateLabels(t) {
                                            const e = t.data;
                                            if (e.labels.length && e.datasets.length) {
                                                const {
                                                    labels: { pointStyle: i, color: s },
                                                } = t.legend.options;
                                                return e.labels.map((e, n) => {
                                                    const o = t.getDatasetMeta(0).controller.getStyle(n);
                                                    return { text: e, fillStyle: o.backgroundColor, strokeStyle: o.borderColor, fontColor: s, lineWidth: o.borderWidth, pointStyle: i, hidden: !t.getDataVisibility(n), index: n };
                                                });
                                            }
                                            return [];
                                        },
                                    },
                                    onClick(t, e, i) {
                                        i.chart.toggleDataVisibility(e.index), i.chart.update();
                                    },
                                },
                            },
                        };
                        constructor(t, e) {
                            super(t, e), (this.enableOptionSharing = !0), (this.innerRadius = void 0), (this.outerRadius = void 0), (this.offsetX = void 0), (this.offsetY = void 0);
                        }
                        linkScales() {}
                        parse(t, e) {
                            const i = this.getDataset().data,
                                s = this._cachedMeta;
                            if (!1 === this._parsing) s._parsed = i;
                            else {
                                let o,
                                    a,
                                    r = (t) => +i[t];
                                if (n(i[t])) {
                                    const { key: t = "value" } = this._parsing;
                                    r = (e) => +_(i[e], t);
                                }
                                for (o = t, a = t + e; o < a; ++o) s._parsed[o] = r(o);
                            }
                        }
                        _getRotation() {
                            return W(this.options.rotation - 90);
                        }
                        _getCircumference() {
                            return W(this.options.circumference);
                        }
                        _getRotationExtents() {
                            let t = S,
                                e = -S;
                            for (let i = 0; i < this.chart.data.datasets.length; ++i)
                                if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {
                                    const s = this.chart.getDatasetMeta(i).controller,
                                        n = s._getRotation(),
                                        o = s._getCircumference();
                                    (t = Math.min(t, n)), (e = Math.max(e, n + o));
                                }
                            return { rotation: t, circumference: e - t };
                        }
                        update(t) {
                            const e = this.chart,
                                { chartArea: i } = e,
                                s = this._cachedMeta,
                                n = s.data,
                                o = this.getMaxBorderWidth() + this.getMaxOffset(n) + this.options.spacing,
                                a = Math.max((Math.min(i.width, i.height) - o) / 2, 0),
                                r = Math.min(l(this.options.cutout, a), 1),
                                d = this._getRingWeight(this.index),
                                { circumference: h, rotation: u } = this._getRotationExtents(),
                                { ratioX: p, ratioY: m, offsetX: f, offsetY: g } = (function (t, e, i) {
                                    let s = 1,
                                        n = 1,
                                        o = 0,
                                        a = 0;
                                    if (e < S) {
                                        const r = t,
                                            l = r + e,
                                            c = Math.cos(r),
                                            d = Math.sin(r),
                                            h = Math.cos(l),
                                            u = Math.sin(l),
                                            p = (t, e, s) => (q(t, r, l, !0) ? 1 : Math.max(e, e * i, s, s * i)),
                                            m = (t, e, s) => (q(t, r, l, !0) ? -1 : Math.min(e, e * i, s, s * i)),
                                            f = p(0, c, h),
                                            g = p(T, d, u),
                                            b = m(j, c, h),
                                            x = m(j + T, d, u);
                                        (s = (f - b) / 2), (n = (g - x) / 2), (o = -(f + b) / 2), (a = -(g + x) / 2);
                                    }
                                    return { ratioX: s, ratioY: n, offsetX: o, offsetY: a };
                                })(u, h, r),
                                b = (i.width - o) / p,
                                x = (i.height - o) / m,
                                v = Math.max(Math.min(b, x) / 2, 0),
                                y = c(this.options.radius, v),
                                _ = (y - Math.max(y * r, 0)) / this._getVisibleDatasetWeightTotal();
                            (this.offsetX = f * y),
                                (this.offsetY = g * y),
                                (s.total = this.calculateTotal()),
                                (this.outerRadius = y - _ * this._getRingWeightOffset(this.index)),
                                (this.innerRadius = Math.max(this.outerRadius - _ * d, 0)),
                                this.updateElements(n, 0, n.length, t);
                        }
                        _circumference(t, e) {
                            const i = this.options,
                                s = this._cachedMeta,
                                n = this._getCircumference();
                            return (e && i.animation.animateRotate) || !this.chart.getDataVisibility(t) || null === s._parsed[t] || s.data[t].hidden ? 0 : this.calculateCircumference((s._parsed[t] * n) / S);
                        }
                        updateElements(t, e, i, s) {
                            const n = "reset" === s,
                                o = this.chart,
                                a = o.chartArea,
                                r = o.options.animation,
                                l = (a.left + a.right) / 2,
                                c = (a.top + a.bottom) / 2,
                                d = n && r.animateScale,
                                h = d ? 0 : this.innerRadius,
                                u = d ? 0 : this.outerRadius,
                                { sharedOptions: p, includeOptions: m } = this._getSharedOptions(e, s);
                            let f,
                                g = this._getRotation();
                            for (f = 0; f < e; ++f) g += this._circumference(f, n);
                            for (f = e; f < e + i; ++f) {
                                const e = this._circumference(f, n),
                                    i = t[f],
                                    o = { x: l + this.offsetX, y: c + this.offsetY, startAngle: g, endAngle: g + e, circumference: e, outerRadius: u, innerRadius: h };
                                m && (o.options = p || this.resolveDataElementOptions(f, i.active ? "active" : s)), (g += e), this.updateElement(i, f, o, s);
                            }
                        }
                        calculateTotal() {
                            const t = this._cachedMeta,
                                e = t.data;
                            let i,
                                s = 0;
                            for (i = 0; i < e.length; i++) {
                                const n = t._parsed[i];
                                null === n || isNaN(n) || !this.chart.getDataVisibility(i) || e[i].hidden || (s += Math.abs(n));
                            }
                            return s;
                        }
                        calculateCircumference(t) {
                            const e = this._cachedMeta.total;
                            return e > 0 && !isNaN(t) ? S * (Math.abs(t) / e) : 0;
                        }
                        getLabelAndValue(t) {
                            const e = this._cachedMeta,
                                i = this.chart,
                                s = i.data.labels || [],
                                n = te(e._parsed[t], i.options.locale);
                            return { label: s[t] || "", value: n };
                        }
                        getMaxBorderWidth(t) {
                            let e = 0;
                            const i = this.chart;
                            let s, n, o, a, r;
                            if (!t)
                                for (s = 0, n = i.data.datasets.length; s < n; ++s)
                                    if (i.isDatasetVisible(s)) {
                                        (o = i.getDatasetMeta(s)), (t = o.data), (a = o.controller);
                                        break;
                                    }
                            if (!t) return 0;
                            for (s = 0, n = t.length; s < n; ++s) (r = a.resolveDataElementOptions(s)), "inner" !== r.borderAlign && (e = Math.max(e, r.borderWidth || 0, r.hoverBorderWidth || 0));
                            return e;
                        }
                        getMaxOffset(t) {
                            let e = 0;
                            for (let i = 0, s = t.length; i < s; ++i) {
                                const t = this.resolveDataElementOptions(i);
                                e = Math.max(e, t.offset || 0, t.hoverOffset || 0);
                            }
                            return e;
                        }
                        _getRingWeightOffset(t) {
                            let e = 0;
                            for (let i = 0; i < t; ++i) this.chart.isDatasetVisible(i) && (e += this._getRingWeight(i));
                            return e;
                        }
                        _getRingWeight(t) {
                            return Math.max(r(this.chart.data.datasets[t].weight, 1), 0);
                        }
                        _getVisibleDatasetWeightTotal() {
                            return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
                        }
                    }
                    var An = Object.freeze({
                        __proto__: null,
                        BarController: class extends Ds {
                            static id = "bar";
                            static defaults = {
                                datasetElementType: !1,
                                dataElementType: "bar",
                                categoryPercentage: 0.8,
                                barPercentage: 0.9,
                                grouped: !0,
                                animations: { numbers: { type: "number", properties: ["x", "y", "base", "width", "height"] } },
                            };
                            static overrides = { scales: { _index_: { type: "category", offset: !0, grid: { offset: !0 } }, _value_: { type: "linear", beginAtZero: !0 } } };
                            parsePrimitiveData(t, e, i, s) {
                                return Cn(t, e, i, s);
                            }
                            parseArrayData(t, e, i, s) {
                                return Cn(t, e, i, s);
                            }
                            parseObjectData(t, e, i, s) {
                                const { iScale: n, vScale: o } = t,
                                    { xAxisKey: a = "x", yAxisKey: r = "y" } = this._parsing,
                                    l = "x" === n.axis ? a : r,
                                    c = "x" === o.axis ? a : r,
                                    d = [];
                                let h, u, p, m;
                                for (h = i, u = i + s; h < u; ++h) (m = e[h]), (p = {}), (p[n.axis] = n.parse(_(m, l), h)), d.push(yn(_(m, c), p, o, h));
                                return d;
                            }
                            updateRangeFromParsed(t, e, i, s) {
                                super.updateRangeFromParsed(t, e, i, s);
                                const n = i._custom;
                                n && e === this._cachedMeta.vScale && ((t.min = Math.min(t.min, n.min)), (t.max = Math.max(t.max, n.max)));
                            }
                            getMaxOverflow() {
                                return 0;
                            }
                            getLabelAndValue(t) {
                                const e = this._cachedMeta,
                                    { iScale: i, vScale: s } = e,
                                    n = this.getParsed(t),
                                    o = n._custom,
                                    a = wn(o) ? "[" + o.start + ", " + o.end + "]" : "" + s.getLabelForValue(n[s.axis]);
                                return { label: "" + i.getLabelForValue(n[i.axis]), value: a };
                            }
                            initialize() {
                                (this.enableOptionSharing = !0), super.initialize(), (this._cachedMeta.stack = this.getDataset().stack);
                            }
                            update(t) {
                                const e = this._cachedMeta;
                                this.updateElements(e.data, 0, e.data.length, t);
                            }
                            updateElements(t, e, s, n) {
                                const o = "reset" === n,
                                    {
                                        index: a,
                                        _cachedMeta: { vScale: r },
                                    } = this,
                                    l = r.getBasePixel(),
                                    c = r.isHorizontal(),
                                    d = this._getRuler(),
                                    { sharedOptions: h, includeOptions: u } = this._getSharedOptions(e, n);
                                for (let p = e; p < e + s; p++) {
                                    const e = this.getParsed(p),
                                        s = o || i(e[r.axis]) ? { base: l, head: l } : this._calculateBarValuePixels(p),
                                        m = this._calculateBarIndexPixels(p, d),
                                        f = (e._stacks || {})[r.axis],
                                        g = {
                                            horizontal: c,
                                            base: s.base,
                                            enableBorderRadius: !f || wn(e._custom) || a === f._top || a === f._bottom,
                                            x: c ? s.head : m.center,
                                            y: c ? m.center : s.head,
                                            height: c ? m.size : Math.abs(s.size),
                                            width: c ? Math.abs(s.size) : m.size,
                                        };
                                    u && (g.options = h || this.resolveDataElementOptions(p, t[p].active ? "active" : n));
                                    const b = g.options || t[p].options;
                                    zn(g, b, f, a), jn(g, b, d.ratio), this.updateElement(t[p], p, g, n);
                                }
                            }
                            _getStacks(t, e) {
                                const { iScale: s } = this._cachedMeta,
                                    n = s.getMatchingVisibleMetas(this._type).filter((t) => t.controller.options.grouped),
                                    o = s.options.stacked,
                                    a = [],
                                    r = (t) => {
                                        const s = t.controller.getParsed(e),
                                            n = s && s[t.vScale.axis];
                                        if (i(n) || isNaN(n)) return !0;
                                    };
                                for (const i of n) if ((void 0 === e || !r(i)) && ((!1 === o || -1 === a.indexOf(i.stack) || (void 0 === o && void 0 === i.stack)) && a.push(i.stack), i.index === t)) break;
                                return a.length || a.push(void 0), a;
                            }
                            _getStackCount(t) {
                                return this._getStacks(void 0, t).length;
                            }
                            _getStackIndex(t, e, i) {
                                const s = this._getStacks(t, i),
                                    n = void 0 !== e ? s.indexOf(e) : -1;
                                return -1 === n ? s.length - 1 : n;
                            }
                            _getRuler() {
                                const t = this.options,
                                    e = this._cachedMeta,
                                    i = e.iScale,
                                    s = [];
                                let n, o;
                                for (n = 0, o = e.data.length; n < o; ++n) s.push(i.getPixelForValue(this.getParsed(n)[i.axis], n));
                                const a = t.barThickness;
                                return { min: a || vn(e), pixels: s, start: i._startPixel, end: i._endPixel, stackCount: this._getStackCount(), scale: i, grouped: t.grouped, ratio: a ? 1 : t.categoryPercentage * t.barPercentage };
                            }
                            _calculateBarValuePixels(t) {
                                const {
                                        _cachedMeta: { vScale: e, _stacked: s },
                                        options: { base: n, minBarLength: o },
                                    } = this,
                                    a = n || 0,
                                    r = this.getParsed(t),
                                    l = r._custom,
                                    c = wn(l);
                                let d,
                                    h,
                                    u = r[e.axis],
                                    p = 0,
                                    m = s ? this.applyStack(e, r, s) : u;
                                m !== u && ((p = m - u), (m = u)), c && ((u = l.barStart), (m = l.barEnd - l.barStart), 0 !== u && I(u) !== I(l.barEnd) && (p = 0), (p += u));
                                const f = i(n) || c ? p : n;
                                let g = e.getPixelForValue(f);
                                if (((d = this.chart.getDataVisibility(t) ? e.getPixelForValue(p + m) : g), (h = d - g), Math.abs(h) < o)) {
                                    (h =
                                        (function (t, e, i) {
                                            return 0 !== t ? I(t) : (e.isHorizontal() ? 1 : -1) * (e.min >= i ? 1 : -1);
                                        })(h, e, a) * o),
                                        u === a && (g -= h / 2);
                                    const t = e.getPixelForDecimal(0),
                                        i = e.getPixelForDecimal(1),
                                        s = Math.min(t, i),
                                        n = Math.max(t, i);
                                    (g = Math.max(Math.min(g, n), s)), (d = g + h);
                                }
                                if (g === e.getPixelForValue(a)) {
                                    const t = (I(h) * e.getLineWidthForValue(a)) / 2;
                                    (g += t), (h -= t);
                                }
                                return { size: h, base: g, head: d, center: d + h / 2 };
                            }
                            _calculateBarIndexPixels(t, e) {
                                const s = e.scale,
                                    n = this.options,
                                    o = n.skipNull,
                                    a = r(n.maxBarThickness, 1 / 0);
                                let l, c;
                                if (e.grouped) {
                                    const s = o ? this._getStackCount(t) : e.stackCount,
                                        r =
                                            "flex" === n.barThickness
                                                ? (function (t, e, i, s) {
                                                      const n = e.pixels,
                                                          o = n[t];
                                                      let a = t > 0 ? n[t - 1] : null,
                                                          r = t < n.length - 1 ? n[t + 1] : null;
                                                      const l = i.categoryPercentage;
                                                      null === a && (a = o - (null === r ? e.end - e.start : r - o)), null === r && (r = o + o - a);
                                                      const c = o - ((o - Math.min(a, r)) / 2) * l;
                                                      return { chunk: ((Math.abs(r - a) / 2) * l) / s, ratio: i.barPercentage, start: c };
                                                  })(t, e, n, s)
                                                : (function (t, e, s, n) {
                                                      const o = s.barThickness;
                                                      let a, r;
                                                      return i(o) ? ((a = e.min * s.categoryPercentage), (r = s.barPercentage)) : ((a = o * n), (r = 1)), { chunk: a / n, ratio: r, start: e.pixels[t] - a / 2 };
                                                  })(t, e, n, s),
                                        d = this._getStackIndex(this.index, this._cachedMeta.stack, o ? t : void 0);
                                    (l = r.start + r.chunk * d + r.chunk / 2), (c = Math.min(a, r.chunk * r.ratio));
                                } else (l = s.getPixelForValue(this.getParsed(t)[s.axis], t)), (c = Math.min(a, e.min * e.ratio));
                                return { base: l - c / 2, head: l + c / 2, center: l, size: c };
                            }
                            draw() {
                                const t = this._cachedMeta,
                                    e = t.vScale,
                                    i = t.data,
                                    s = i.length;
                                let n = 0;
                                for (; n < s; ++n) null !== this.getParsed(n)[e.axis] && i[n].draw(this._ctx);
                            }
                        },
                        BubbleController: class extends Ds {
                            static id = "bubble";
                            static defaults = { datasetElementType: !1, dataElementType: "point", animations: { numbers: { type: "number", properties: ["x", "y", "borderWidth", "radius"] } } };
                            static overrides = { scales: { x: { type: "linear" }, y: { type: "linear" } } };
                            initialize() {
                                (this.enableOptionSharing = !0), super.initialize();
                            }
                            parsePrimitiveData(t, e, i, s) {
                                const n = super.parsePrimitiveData(t, e, i, s);
                                for (let t = 0; t < n.length; t++) n[t]._custom = this.resolveDataElementOptions(t + i).radius;
                                return n;
                            }
                            parseArrayData(t, e, i, s) {
                                const n = super.parseArrayData(t, e, i, s);
                                for (let t = 0; t < n.length; t++) {
                                    const s = e[i + t];
                                    n[t]._custom = r(s[2], this.resolveDataElementOptions(t + i).radius);
                                }
                                return n;
                            }
                            parseObjectData(t, e, i, s) {
                                const n = super.parseObjectData(t, e, i, s);
                                for (let t = 0; t < n.length; t++) {
                                    const s = e[i + t];
                                    n[t]._custom = r(s && s.r && +s.r, this.resolveDataElementOptions(t + i).radius);
                                }
                                return n;
                            }
                            getMaxOverflow() {
                                const t = this._cachedMeta.data;
                                let e = 0;
                                for (let i = t.length - 1; i >= 0; --i) e = Math.max(e, t[i].size(this.resolveDataElementOptions(i)) / 2);
                                return e > 0 && e;
                            }
                            getLabelAndValue(t) {
                                const e = this._cachedMeta,
                                    i = this.chart.data.labels || [],
                                    { xScale: s, yScale: n } = e,
                                    o = this.getParsed(t),
                                    a = s.getLabelForValue(o.x),
                                    r = n.getLabelForValue(o.y),
                                    l = o._custom;
                                return { label: i[t] || "", value: "(" + a + ", " + r + (l ? ", " + l : "") + ")" };
                            }
                            update(t) {
                                const e = this._cachedMeta.data;
                                this.updateElements(e, 0, e.length, t);
                            }
                            updateElements(t, e, i, s) {
                                const n = "reset" === s,
                                    { iScale: o, vScale: a } = this._cachedMeta,
                                    { sharedOptions: r, includeOptions: l } = this._getSharedOptions(e, s),
                                    c = o.axis,
                                    d = a.axis;
                                for (let h = e; h < e + i; h++) {
                                    const e = t[h],
                                        i = !n && this.getParsed(h),
                                        u = {},
                                        p = (u[c] = n ? o.getPixelForDecimal(0.5) : o.getPixelForValue(i[c])),
                                        m = (u[d] = n ? a.getBasePixel() : a.getPixelForValue(i[d]));
                                    (u.skip = isNaN(p) || isNaN(m)), l && ((u.options = r || this.resolveDataElementOptions(h, e.active ? "active" : s)), n && (u.options.radius = 0)), this.updateElement(e, h, u, s);
                                }
                            }
                            resolveDataElementOptions(t, e) {
                                const i = this.getParsed(t);
                                let s = super.resolveDataElementOptions(t, e);
                                s.$shared && (s = Object.assign({}, s, { $shared: !1 }));
                                const n = s.radius;
                                return "active" !== e && (s.radius = 0), (s.radius += r(i && i._custom, n)), s;
                            }
                        },
                        DoughnutController: Sn,
                        LineController: class extends Ds {
                            static id = "line";
                            static defaults = { datasetElementType: "line", dataElementType: "point", showLine: !0, spanGaps: !1 };
                            static overrides = { scales: { _index_: { type: "category" }, _value_: { type: "linear" } } };
                            initialize() {
                                (this.enableOptionSharing = !0), (this.supportsDecimation = !0), super.initialize();
                            }
                            update(t) {
                                const e = this._cachedMeta,
                                    { dataset: i, data: s = [], _dataset: n } = e,
                                    o = this.chart._animationsDisabled;
                                let { start: a, count: r } = mt(e, s, o);
                                (this._drawStart = a), (this._drawCount = r), ft(e) && ((a = 0), (r = s.length)), (i._chart = this.chart), (i._datasetIndex = this.index), (i._decimated = !!n._decimated), (i.points = s);
                                const l = this.resolveDatasetElementOptions(t);
                                this.options.showLine || (l.borderWidth = 0), (l.segment = this.options.segment), this.updateElement(i, void 0, { animated: !o, options: l }, t), this.updateElements(s, a, r, t);
                            }
                            updateElements(t, e, s, n) {
                                const o = "reset" === n,
                                    { iScale: a, vScale: r, _stacked: l, _dataset: c } = this._cachedMeta,
                                    { sharedOptions: d, includeOptions: h } = this._getSharedOptions(e, n),
                                    u = a.axis,
                                    p = r.axis,
                                    { spanGaps: m, segment: f } = this.options,
                                    g = F(m) ? m : Number.POSITIVE_INFINITY,
                                    b = this.chart._animationsDisabled || o || "none" === n,
                                    x = e + s,
                                    v = t.length;
                                let y = e > 0 && this.getParsed(e - 1);
                                for (let s = 0; s < v; ++s) {
                                    const m = t[s],
                                        v = b ? m : {};
                                    if (s < e || s >= x) {
                                        v.skip = !0;
                                        continue;
                                    }
                                    const _ = this.getParsed(s),
                                        C = i(_[p]),
                                        w = (v[u] = a.getPixelForValue(_[u], s)),
                                        z = (v[p] = o || C ? r.getBasePixel() : r.getPixelForValue(l ? this.applyStack(r, _, l) : _[p], s));
                                    (v.skip = isNaN(w) || isNaN(z) || C),
                                        (v.stop = s > 0 && Math.abs(_[u] - y[u]) > g),
                                        f && ((v.parsed = _), (v.raw = c.data[s])),
                                        h && (v.options = d || this.resolveDataElementOptions(s, m.active ? "active" : n)),
                                        b || this.updateElement(m, s, v, n),
                                        (y = _);
                                }
                            }
                            getMaxOverflow() {
                                const t = this._cachedMeta,
                                    e = t.dataset,
                                    i = (e.options && e.options.borderWidth) || 0,
                                    s = t.data || [];
                                if (!s.length) return i;
                                const n = s[0].size(this.resolveDataElementOptions(0)),
                                    o = s[s.length - 1].size(this.resolveDataElementOptions(s.length - 1));
                                return Math.max(i, n, o) / 2;
                            }
                            draw() {
                                const t = this._cachedMeta;
                                t.dataset.updateControlPoints(this.chart.chartArea, t.iScale.axis), super.draw();
                            }
                        },
                        PolarAreaController: class extends Ds {
                            static id = "polarArea";
                            static defaults = {
                                dataElementType: "arc",
                                animation: { animateRotate: !0, animateScale: !0 },
                                animations: { numbers: { type: "number", properties: ["x", "y", "startAngle", "endAngle", "innerRadius", "outerRadius"] } },
                                indexAxis: "r",
                                startAngle: 0,
                            };
                            static overrides = {
                                aspectRatio: 1,
                                plugins: {
                                    legend: {
                                        labels: {
                                            generateLabels(t) {
                                                const e = t.data;
                                                if (e.labels.length && e.datasets.length) {
                                                    const {
                                                        labels: { pointStyle: i, color: s },
                                                    } = t.legend.options;
                                                    return e.labels.map((e, n) => {
                                                        const o = t.getDatasetMeta(0).controller.getStyle(n);
                                                        return { text: e, fillStyle: o.backgroundColor, strokeStyle: o.borderColor, fontColor: s, lineWidth: o.borderWidth, pointStyle: i, hidden: !t.getDataVisibility(n), index: n };
                                                    });
                                                }
                                                return [];
                                            },
                                        },
                                        onClick(t, e, i) {
                                            i.chart.toggleDataVisibility(e.index), i.chart.update();
                                        },
                                    },
                                },
                                scales: { r: { type: "radialLinear", angleLines: { display: !1 }, beginAtZero: !0, grid: { circular: !0 }, pointLabels: { display: !1 }, startAngle: 0 } },
                            };
                            constructor(t, e) {
                                super(t, e), (this.innerRadius = void 0), (this.outerRadius = void 0);
                            }
                            getLabelAndValue(t) {
                                const e = this._cachedMeta,
                                    i = this.chart,
                                    s = i.data.labels || [],
                                    n = te(e._parsed[t].r, i.options.locale);
                                return { label: s[t] || "", value: n };
                            }
                            parseObjectData(t, e, i, s) {
                                return qe.bind(this)(t, e, i, s);
                            }
                            update(t) {
                                const e = this._cachedMeta.data;
                                this._updateRadius(), this.updateElements(e, 0, e.length, t);
                            }
                            getMinMax() {
                                const t = this._cachedMeta,
                                    e = { min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY };
                                return (
                                    t.data.forEach((t, i) => {
                                        const s = this.getParsed(i).r;
                                        !isNaN(s) && this.chart.getDataVisibility(i) && (s < e.min && (e.min = s), s > e.max && (e.max = s));
                                    }),
                                    e
                                );
                            }
                            _updateRadius() {
                                const t = this.chart,
                                    e = t.chartArea,
                                    i = t.options,
                                    s = Math.min(e.right - e.left, e.bottom - e.top),
                                    n = Math.max(s / 2, 0),
                                    o = (n - Math.max(i.cutoutPercentage ? (n / 100) * i.cutoutPercentage : 1, 0)) / t.getVisibleDatasetCount();
                                (this.outerRadius = n - o * this.index), (this.innerRadius = this.outerRadius - o);
                            }
                            updateElements(t, e, i, s) {
                                const n = "reset" === s,
                                    o = this.chart,
                                    a = o.options.animation,
                                    r = this._cachedMeta.rScale,
                                    l = r.xCenter,
                                    c = r.yCenter,
                                    d = r.getIndexAngle(0) - 0.5 * j;
                                let h,
                                    u = d;
                                const p = 360 / this.countVisibleElements();
                                for (h = 0; h < e; ++h) u += this._computeAngle(h, s, p);
                                for (h = e; h < e + i; h++) {
                                    const e = t[h];
                                    let i = u,
                                        m = u + this._computeAngle(h, s, p),
                                        f = o.getDataVisibility(h) ? r.getDistanceFromCenterForValue(this.getParsed(h).r) : 0;
                                    (u = m), n && (a.animateScale && (f = 0), a.animateRotate && (i = m = d));
                                    const g = { x: l, y: c, innerRadius: 0, outerRadius: f, startAngle: i, endAngle: m, options: this.resolveDataElementOptions(h, e.active ? "active" : s) };
                                    this.updateElement(e, h, g, s);
                                }
                            }
                            countVisibleElements() {
                                const t = this._cachedMeta;
                                let e = 0;
                                return (
                                    t.data.forEach((t, i) => {
                                        !isNaN(this.getParsed(i).r) && this.chart.getDataVisibility(i) && e++;
                                    }),
                                    e
                                );
                            }
                            _computeAngle(t, e, i) {
                                return this.chart.getDataVisibility(t) ? W(this.resolveDataElementOptions(t, e).angle || i) : 0;
                            }
                        },
                        PieController: class extends Sn {
                            static id = "pie";
                            static defaults = { cutout: 0, rotation: 0, circumference: 360, radius: "100%" };
                        },
                        RadarController: class extends Ds {
                            static id = "radar";
                            static defaults = { datasetElementType: "line", dataElementType: "point", indexAxis: "r", showLine: !0, elements: { line: { fill: "start" } } };
                            static overrides = { aspectRatio: 1, scales: { r: { type: "radialLinear" } } };
                            getLabelAndValue(t) {
                                const e = this._cachedMeta.vScale,
                                    i = this.getParsed(t);
                                return { label: e.getLabels()[t], value: "" + e.getLabelForValue(i[e.axis]) };
                            }
                            parseObjectData(t, e, i, s) {
                                return qe.bind(this)(t, e, i, s);
                            }
                            update(t) {
                                const e = this._cachedMeta,
                                    i = e.dataset,
                                    s = e.data || [],
                                    n = e.iScale.getLabels();
                                if (((i.points = s), "resize" !== t)) {
                                    const e = this.resolveDatasetElementOptions(t);
                                    this.options.showLine || (e.borderWidth = 0);
                                    const o = { _loop: !0, _fullLoop: n.length === s.length, options: e };
                                    this.updateElement(i, void 0, o, t);
                                }
                                this.updateElements(s, 0, s.length, t);
                            }
                            updateElements(t, e, i, s) {
                                const n = this._cachedMeta.rScale,
                                    o = "reset" === s;
                                for (let a = e; a < e + i; a++) {
                                    const e = t[a],
                                        i = this.resolveDataElementOptions(a, e.active ? "active" : s),
                                        r = n.getPointPositionForValue(a, this.getParsed(a).r),
                                        l = o ? n.xCenter : r.x,
                                        c = o ? n.yCenter : r.y,
                                        d = { x: l, y: c, angle: r.angle, skip: isNaN(l) || isNaN(c), options: i };
                                    this.updateElement(e, a, d, s);
                                }
                            }
                        },
                        ScatterController: class extends Ds {
                            static id = "scatter";
                            static defaults = { datasetElementType: !1, dataElementType: "point", showLine: !1, fill: !1 };
                            static overrides = { interaction: { mode: "point" }, scales: { x: { type: "linear" }, y: { type: "linear" } } };
                            getLabelAndValue(t) {
                                const e = this._cachedMeta,
                                    i = this.chart.data.labels || [],
                                    { xScale: s, yScale: n } = e,
                                    o = this.getParsed(t),
                                    a = s.getLabelForValue(o.x),
                                    r = n.getLabelForValue(o.y);
                                return { label: i[t] || "", value: "(" + a + ", " + r + ")" };
                            }
                            update(t) {
                                const e = this._cachedMeta,
                                    { data: i = [] } = e,
                                    s = this.chart._animationsDisabled;
                                let { start: n, count: o } = mt(e, i, s);
                                if (((this._drawStart = n), (this._drawCount = o), ft(e) && ((n = 0), (o = i.length)), this.options.showLine)) {
                                    const { dataset: n, _dataset: o } = e;
                                    (n._chart = this.chart), (n._datasetIndex = this.index), (n._decimated = !!o._decimated), (n.points = i);
                                    const a = this.resolveDatasetElementOptions(t);
                                    (a.segment = this.options.segment), this.updateElement(n, void 0, { animated: !s, options: a }, t);
                                }
                                this.updateElements(i, n, o, t);
                            }
                            addElements() {
                                const { showLine: t } = this.options;
                                !this.datasetElementType && t && (this.datasetElementType = this.chart.registry.getElement("line")), super.addElements();
                            }
                            updateElements(t, e, s, n) {
                                const o = "reset" === n,
                                    { iScale: a, vScale: r, _stacked: l, _dataset: c } = this._cachedMeta,
                                    d = this.resolveDataElementOptions(e, n),
                                    h = this.getSharedOptions(d),
                                    u = this.includeOptions(n, h),
                                    p = a.axis,
                                    m = r.axis,
                                    { spanGaps: f, segment: g } = this.options,
                                    b = F(f) ? f : Number.POSITIVE_INFINITY,
                                    x = this.chart._animationsDisabled || o || "none" === n;
                                let v = e > 0 && this.getParsed(e - 1);
                                for (let d = e; d < e + s; ++d) {
                                    const e = t[d],
                                        s = this.getParsed(d),
                                        f = x ? e : {},
                                        y = i(s[m]),
                                        _ = (f[p] = a.getPixelForValue(s[p], d)),
                                        C = (f[m] = o || y ? r.getBasePixel() : r.getPixelForValue(l ? this.applyStack(r, s, l) : s[m], d));
                                    (f.skip = isNaN(_) || isNaN(C) || y),
                                        (f.stop = d > 0 && Math.abs(s[p] - v[p]) > b),
                                        g && ((f.parsed = s), (f.raw = c.data[d])),
                                        u && (f.options = h || this.resolveDataElementOptions(d, e.active ? "active" : n)),
                                        x || this.updateElement(e, d, f, n),
                                        (v = s);
                                }
                                this.updateSharedOptions(h, n, d);
                            }
                            getMaxOverflow() {
                                const t = this._cachedMeta,
                                    e = t.data || [];
                                if (!this.options.showLine) {
                                    let t = 0;
                                    for (let i = e.length - 1; i >= 0; --i) t = Math.max(t, e[i].size(this.resolveDataElementOptions(i)) / 2);
                                    return t > 0 && t;
                                }
                                const i = t.dataset,
                                    s = (i.options && i.options.borderWidth) || 0;
                                if (!e.length) return s;
                                const n = e[0].size(this.resolveDataElementOptions(0)),
                                    o = e[e.length - 1].size(this.resolveDataElementOptions(e.length - 1));
                                return Math.max(s, n, o) / 2;
                            }
                        },
                    });
                    function Ln(t, e, i, s) {
                        return { x: i + t * Math.cos(e), y: s + t * Math.sin(e) };
                    }
                    function Dn(t, e, i, s, n, o) {
                        const { x: a, y: r, startAngle: l, pixelMargin: c, innerRadius: d } = e,
                            h = Math.max(e.outerRadius + s + i - c, 0),
                            u = d > 0 ? d + s + i + c : 0;
                        let p = 0;
                        const m = n - l;
                        if (s) {
                            const t = ((d > 0 ? d - s : 0) + (h > 0 ? h - s : 0)) / 2;
                            p = (m - (0 !== t ? (m * t) / (t + s) : m)) / 2;
                        }
                        const f = (m - Math.max(0.001, m * h - i / j) / h) / 2,
                            g = l + f + p,
                            b = n - f - p,
                            { outerStart: x, outerEnd: v, innerStart: y, innerEnd: _ } = (function (t, e, i, s) {
                                const n = fi(t.options.borderRadius, ["outerStart", "outerEnd", "innerStart", "innerEnd"]),
                                    o = (i - e) / 2,
                                    a = Math.min(o, (s * e) / 2),
                                    r = (t) => {
                                        const e = ((i - Math.min(o, t)) * s) / 2;
                                        return X(t, 0, Math.min(o, e));
                                    };
                                return { outerStart: r(n.outerStart), outerEnd: r(n.outerEnd), innerStart: X(n.innerStart, 0, a), innerEnd: X(n.innerEnd, 0, a) };
                            })(e, u, h, b - g),
                            C = h - x,
                            w = h - v,
                            z = g + x / C,
                            k = b - v / w,
                            M = u + y,
                            S = u + _,
                            A = g + y / M,
                            L = b - _ / S;
                        if ((t.beginPath(), o)) {
                            const e = (z + k) / 2;
                            if ((t.arc(a, r, h, z, e), t.arc(a, r, h, e, k), v > 0)) {
                                const e = Ln(w, k, a, r);
                                t.arc(e.x, e.y, v, k, b + T);
                            }
                            const i = Ln(S, b, a, r);
                            if ((t.lineTo(i.x, i.y), _ > 0)) {
                                const e = Ln(S, L, a, r);
                                t.arc(e.x, e.y, _, b + T, L + Math.PI);
                            }
                            const s = (b - _ / u + (g + y / u)) / 2;
                            if ((t.arc(a, r, u, b - _ / u, s, !0), t.arc(a, r, u, s, g + y / u, !0), y > 0)) {
                                const e = Ln(M, A, a, r);
                                t.arc(e.x, e.y, y, A + Math.PI, g - T);
                            }
                            const n = Ln(C, g, a, r);
                            if ((t.lineTo(n.x, n.y), x > 0)) {
                                const e = Ln(C, z, a, r);
                                t.arc(e.x, e.y, x, g - T, z);
                            }
                        } else {
                            t.moveTo(a, r);
                            const e = Math.cos(z) * h + a,
                                i = Math.sin(z) * h + r;
                            t.lineTo(e, i);
                            const s = Math.cos(k) * h + a,
                                n = Math.sin(k) * h + r;
                            t.lineTo(s, n);
                        }
                        t.closePath();
                    }
                    function Tn(t, e, i = e) {
                        (t.lineCap = r(i.borderCapStyle, e.borderCapStyle)),
                            t.setLineDash(r(i.borderDash, e.borderDash)),
                            (t.lineDashOffset = r(i.borderDashOffset, e.borderDashOffset)),
                            (t.lineJoin = r(i.borderJoinStyle, e.borderJoinStyle)),
                            (t.lineWidth = r(i.borderWidth, e.borderWidth)),
                            (t.strokeStyle = r(i.borderColor, e.borderColor));
                    }
                    function En(t, e, i) {
                        t.lineTo(i.x, i.y);
                    }
                    function On(t, e, i = {}) {
                        const s = t.length,
                            { start: n = 0, end: o = s - 1 } = i,
                            { start: a, end: r } = e,
                            l = Math.max(n, a),
                            c = Math.min(o, r),
                            d = (n < a && o < a) || (n > r && o > r);
                        return { count: s, start: l, loop: e.loop, ilen: c < l && !d ? s + c - l : c - l };
                    }
                    function Pn(t, e, i, s) {
                        const { points: n, options: o } = e,
                            { count: a, start: r, loop: l, ilen: c } = On(n, i, s),
                            d = (function (t) {
                                return t.stepped ? De : t.tension || "monotone" === t.cubicInterpolationMode ? Te : En;
                            })(o);
                        let h,
                            u,
                            p,
                            { move: m = !0, reverse: f } = s || {};
                        for (h = 0; h <= c; ++h) (u = n[(r + (f ? c - h : h)) % a]), u.skip || (m ? (t.moveTo(u.x, u.y), (m = !1)) : d(t, p, u, f, o.stepped), (p = u));
                        return l && ((u = n[(r + (f ? c : 0)) % a]), d(t, p, u, f, o.stepped)), !!l;
                    }
                    function In(t, e, i, s) {
                        const n = e.points,
                            { count: o, start: a, ilen: r } = On(n, i, s),
                            { move: l = !0, reverse: c } = s || {};
                        let d,
                            h,
                            u,
                            p,
                            m,
                            f,
                            g = 0,
                            b = 0;
                        const x = (t) => (a + (c ? r - t : t)) % o,
                            v = () => {
                                p !== m && (t.lineTo(g, m), t.lineTo(g, p), t.lineTo(g, f));
                            };
                        for (l && ((h = n[x(0)]), t.moveTo(h.x, h.y)), d = 0; d <= r; ++d) {
                            if (((h = n[x(d)]), h.skip)) continue;
                            const e = h.x,
                                i = h.y,
                                s = 0 | e;
                            s === u ? (i < p ? (p = i) : i > m && (m = i), (g = (b * g + e) / ++b)) : (v(), t.lineTo(e, i), (u = s), (b = 0), (p = m = i)), (f = i);
                        }
                        v();
                    }
                    function Nn(t) {
                        const e = t.options,
                            i = e.borderDash && e.borderDash.length;
                        return t._decimated || t._loop || e.tension || "monotone" === e.cubicInterpolationMode || e.stepped || i ? Pn : In;
                    }
                    const Rn = "function" == typeof Path2D;
                    class Vn extends Ts {
                        static id = "line";
                        static defaults = {
                            borderCapStyle: "butt",
                            borderDash: [],
                            borderDashOffset: 0,
                            borderJoinStyle: "miter",
                            borderWidth: 3,
                            capBezierPoints: !0,
                            cubicInterpolationMode: "default",
                            fill: !1,
                            spanGaps: !1,
                            stepped: !1,
                            tension: 0,
                        };
                        static defaultRoutes = { backgroundColor: "backgroundColor", borderColor: "borderColor" };
                        static descriptors = { _scriptable: !0, _indexable: (t) => "borderDash" !== t && "fill" !== t };
                        constructor(t) {
                            super(),
                                (this.animated = !0),
                                (this.options = void 0),
                                (this._chart = void 0),
                                (this._loop = void 0),
                                (this._fullLoop = void 0),
                                (this._path = void 0),
                                (this._points = void 0),
                                (this._segments = void 0),
                                (this._decimated = !1),
                                (this._pointsUpdated = !1),
                                (this._datasetIndex = void 0),
                                t && Object.assign(this, t);
                        }
                        updateControlPoints(t, e) {
                            const i = this.options;
                            if ((i.tension || "monotone" === i.cubicInterpolationMode) && !i.stepped && !this._pointsUpdated) {
                                const s = i.spanGaps ? this._loop : this._fullLoop;
                                si(this._points, i, t, s, e), (this._pointsUpdated = !0);
                            }
                        }
                        set points(t) {
                            (this._points = t), delete this._segments, delete this._path, (this._pointsUpdated = !1);
                        }
                        get points() {
                            return this._points;
                        }
                        get segments() {
                            return this._segments || (this._segments = Li(this, this.options.segment));
                        }
                        first() {
                            const t = this.segments,
                                e = this.points;
                            return t.length && e[t[0].start];
                        }
                        last() {
                            const t = this.segments,
                                e = this.points,
                                i = t.length;
                            return i && e[t[i - 1].end];
                        }
                        interpolate(t, e) {
                            const i = this.options,
                                s = t[e],
                                n = this.points,
                                o = Ai(this, { property: e, start: s, end: s });
                            if (!o.length) return;
                            const a = [],
                                r = (function (t) {
                                    return t.stepped ? di : t.tension || "monotone" === t.cubicInterpolationMode ? hi : ci;
                                })(i);
                            let l, c;
                            for (l = 0, c = o.length; l < c; ++l) {
                                const { start: c, end: d } = o[l],
                                    h = n[c],
                                    u = n[d];
                                if (h === u) {
                                    a.push(h);
                                    continue;
                                }
                                const p = r(h, u, Math.abs((s - h[e]) / (u[e] - h[e])), i.stepped);
                                (p[e] = t[e]), a.push(p);
                            }
                            return 1 === a.length ? a[0] : a;
                        }
                        pathSegment(t, e, i) {
                            return Nn(this)(t, this, e, i);
                        }
                        path(t, e, i) {
                            const s = this.segments,
                                n = Nn(this);
                            let o = this._loop;
                            (e = e || 0), (i = i || this.points.length - e);
                            for (const a of s) o &= n(t, this, a, { start: e, end: e + i - 1 });
                            return !!o;
                        }
                        draw(t, e, i, s) {
                            const n = this.options || {};
                            (this.points || []).length &&
                                n.borderWidth &&
                                (t.save(),
                                (function (t, e, i, s) {
                                    Rn && !e.options.segment
                                        ? (function (t, e, i, s) {
                                              let n = e._path;
                                              n || ((n = e._path = new Path2D()), e.path(n, i, s) && n.closePath()), Tn(t, e.options), t.stroke(n);
                                          })(t, e, i, s)
                                        : (function (t, e, i, s) {
                                              const { segments: n, options: o } = e,
                                                  a = Nn(e);
                                              for (const r of n) Tn(t, o, r.style), t.beginPath(), a(t, e, r, { start: i, end: i + s - 1 }) && t.closePath(), t.stroke();
                                          })(t, e, i, s);
                                })(t, this, i, s),
                                t.restore()),
                                this.animated && ((this._pointsUpdated = !1), (this._path = void 0));
                        }
                    }
                    function Fn(t, e, i, s) {
                        const n = t.options,
                            { [i]: o } = t.getProps([i], s);
                        return Math.abs(e - o) < n.radius + n.hitRadius;
                    }
                    function Bn(t, e) {
                        const { x: i, y: s, base: n, width: o, height: a } = t.getProps(["x", "y", "base", "width", "height"], e);
                        let r, l, c, d, h;
                        return (
                            t.horizontal ? ((h = a / 2), (r = Math.min(i, n)), (l = Math.max(i, n)), (c = s - h), (d = s + h)) : ((h = o / 2), (r = i - h), (l = i + h), (c = Math.min(s, n)), (d = Math.max(s, n))),
                            { left: r, top: c, right: l, bottom: d }
                        );
                    }
                    function Hn(t, e, i, s) {
                        return t ? 0 : X(e, i, s);
                    }
                    function Wn(t) {
                        const e = Bn(t),
                            i = e.right - e.left,
                            s = e.bottom - e.top,
                            o = (function (t, e, i) {
                                const s = t.options.borderWidth,
                                    n = t.borderSkipped,
                                    o = gi(s);
                                return { t: Hn(n.top, o.top, 0, i), r: Hn(n.right, o.right, 0, e), b: Hn(n.bottom, o.bottom, 0, i), l: Hn(n.left, o.left, 0, e) };
                            })(t, i / 2, s / 2),
                            a = (function (t, e, i) {
                                const { enableBorderRadius: s } = t.getProps(["enableBorderRadius"]),
                                    o = t.options.borderRadius,
                                    a = bi(o),
                                    r = Math.min(e, i),
                                    l = t.borderSkipped,
                                    c = s || n(o);
                                return {
                                    topLeft: Hn(!c || l.top || l.left, a.topLeft, 0, r),
                                    topRight: Hn(!c || l.top || l.right, a.topRight, 0, r),
                                    bottomLeft: Hn(!c || l.bottom || l.left, a.bottomLeft, 0, r),
                                    bottomRight: Hn(!c || l.bottom || l.right, a.bottomRight, 0, r),
                                };
                            })(t, i / 2, s / 2);
                        return {
                            outer: { x: e.left, y: e.top, w: i, h: s, radius: a },
                            inner: {
                                x: e.left + o.l,
                                y: e.top + o.t,
                                w: i - o.l - o.r,
                                h: s - o.t - o.b,
                                radius: {
                                    topLeft: Math.max(0, a.topLeft - Math.max(o.t, o.l)),
                                    topRight: Math.max(0, a.topRight - Math.max(o.t, o.r)),
                                    bottomLeft: Math.max(0, a.bottomLeft - Math.max(o.b, o.l)),
                                    bottomRight: Math.max(0, a.bottomRight - Math.max(o.b, o.r)),
                                },
                            },
                        };
                    }
                    function Yn(t, e, i, s) {
                        const n = null === e,
                            o = null === i,
                            a = t && !(n && o) && Bn(t, s);
                        return a && (n || Q(e, a.left, a.right)) && (o || Q(i, a.top, a.bottom));
                    }
                    function $n(t, e) {
                        t.rect(e.x, e.y, e.w, e.h);
                    }
                    function Un(t, e, i = {}) {
                        const s = t.x !== i.x ? -e : 0,
                            n = t.y !== i.y ? -e : 0,
                            o = (t.x + t.w !== i.x + i.w ? e : 0) - s,
                            a = (t.y + t.h !== i.y + i.h ? e : 0) - n;
                        return { x: t.x + s, y: t.y + n, w: t.w + o, h: t.h + a, radius: t.radius };
                    }
                    var Zn = Object.freeze({
                        __proto__: null,
                        ArcElement: class extends Ts {
                            static id = "arc";
                            static defaults = { borderAlign: "center", borderColor: "#fff", borderJoinStyle: void 0, borderRadius: 0, borderWidth: 2, offset: 0, spacing: 0, angle: void 0, circular: !0 };
                            static defaultRoutes = { backgroundColor: "backgroundColor" };
                            constructor(t) {
                                super(),
                                    (this.options = void 0),
                                    (this.circumference = void 0),
                                    (this.startAngle = void 0),
                                    (this.endAngle = void 0),
                                    (this.innerRadius = void 0),
                                    (this.outerRadius = void 0),
                                    (this.pixelMargin = 0),
                                    (this.fullCircles = 0),
                                    t && Object.assign(this, t);
                            }
                            inRange(t, e, i) {
                                const s = this.getProps(["x", "y"], i),
                                    { angle: n, distance: o } = U(s, { x: t, y: e }),
                                    { startAngle: a, endAngle: l, innerRadius: c, outerRadius: d, circumference: h } = this.getProps(["startAngle", "endAngle", "innerRadius", "outerRadius", "circumference"], i),
                                    u = this.options.spacing / 2,
                                    p = r(h, l - a) >= S || q(n, a, l),
                                    m = Q(o, c + u, d + u);
                                return p && m;
                            }
                            getCenterPoint(t) {
                                const { x: e, y: i, startAngle: s, endAngle: n, innerRadius: o, outerRadius: a } = this.getProps(["x", "y", "startAngle", "endAngle", "innerRadius", "outerRadius", "circumference"], t),
                                    { offset: r, spacing: l } = this.options,
                                    c = (s + n) / 2,
                                    d = (o + a + l + r) / 2;
                                return { x: e + Math.cos(c) * d, y: i + Math.sin(c) * d };
                            }
                            tooltipPosition(t) {
                                return this.getCenterPoint(t);
                            }
                            draw(t) {
                                const { options: e, circumference: i } = this,
                                    s = (e.offset || 0) / 4,
                                    n = (e.spacing || 0) / 2,
                                    o = e.circular;
                                if (((this.pixelMargin = "inner" === e.borderAlign ? 0.33 : 0), (this.fullCircles = i > S ? Math.floor(i / S) : 0), 0 === i || this.innerRadius < 0 || this.outerRadius < 0)) return;
                                t.save();
                                const a = (this.startAngle + this.endAngle) / 2;
                                t.translate(Math.cos(a) * s, Math.sin(a) * s);
                                const r = s * (1 - Math.sin(Math.min(j, i || 0)));
                                (t.fillStyle = e.backgroundColor),
                                    (t.strokeStyle = e.borderColor),
                                    (function (t, e, i, s, n) {
                                        const { fullCircles: o, startAngle: a, circumference: r } = e;
                                        let l = e.endAngle;
                                        if (o) {
                                            Dn(t, e, i, s, l, n);
                                            for (let e = 0; e < o; ++e) t.fill();
                                            isNaN(r) || (l = a + (r % S || S));
                                        }
                                        Dn(t, e, i, s, l, n), t.fill();
                                    })(t, this, r, n, o),
                                    (function (t, e, i, s, n) {
                                        const { fullCircles: o, startAngle: a, circumference: r, options: l } = e,
                                            { borderWidth: c, borderJoinStyle: d } = l,
                                            h = "inner" === l.borderAlign;
                                        if (!c) return;
                                        h ? ((t.lineWidth = 2 * c), (t.lineJoin = d || "round")) : ((t.lineWidth = c), (t.lineJoin = d || "bevel"));
                                        let u = e.endAngle;
                                        if (o) {
                                            Dn(t, e, i, s, u, n);
                                            for (let e = 0; e < o; ++e) t.stroke();
                                            isNaN(r) || (u = a + (r % S || S));
                                        }
                                        h &&
                                            (function (t, e, i) {
                                                const { startAngle: s, pixelMargin: n, x: o, y: a, outerRadius: r, innerRadius: l } = e;
                                                let c = n / r;
                                                t.beginPath(), t.arc(o, a, r, s - c, i + c), l > n ? ((c = n / l), t.arc(o, a, l, i + c, s - c, !0)) : t.arc(o, a, n, i + T, s - T), t.closePath(), t.clip();
                                            })(t, e, u),
                                            o || (Dn(t, e, i, s, u, n), t.stroke());
                                    })(t, this, r, n, o),
                                    t.restore();
                            }
                        },
                        LineElement: Vn,
                        PointElement: class extends Ts {
                            static id = "point";
                            static defaults = { borderWidth: 1, hitRadius: 1, hoverBorderWidth: 1, hoverRadius: 4, pointStyle: "circle", radius: 3, rotation: 0 };
                            static defaultRoutes = { backgroundColor: "backgroundColor", borderColor: "borderColor" };
                            constructor(t) {
                                super(), (this.options = void 0), (this.parsed = void 0), (this.skip = void 0), (this.stop = void 0), t && Object.assign(this, t);
                            }
                            inRange(t, e, i) {
                                const s = this.options,
                                    { x: n, y: o } = this.getProps(["x", "y"], i);
                                return Math.pow(t - n, 2) + Math.pow(e - o, 2) < Math.pow(s.hitRadius + s.radius, 2);
                            }
                            inXRange(t, e) {
                                return Fn(this, t, "x", e);
                            }
                            inYRange(t, e) {
                                return Fn(this, t, "y", e);
                            }
                            getCenterPoint(t) {
                                const { x: e, y: i } = this.getProps(["x", "y"], t);
                                return { x: e, y: i };
                            }
                            size(t) {
                                let e = (t = t || this.options || {}).radius || 0;
                                return (e = Math.max(e, (e && t.hoverRadius) || 0)), 2 * (e + ((e && t.borderWidth) || 0));
                            }
                            draw(t, e) {
                                const i = this.options;
                                this.skip || i.radius < 0.1 || !Se(this, e, this.size(i) / 2) || ((t.strokeStyle = i.borderColor), (t.lineWidth = i.borderWidth), (t.fillStyle = i.backgroundColor), Me(t, i, this.x, this.y));
                            }
                            getRange() {
                                const t = this.options || {};
                                return t.radius + t.hitRadius;
                            }
                        },
                        BarElement: class extends Ts {
                            static id = "bar";
                            static defaults = { borderSkipped: "start", borderWidth: 0, borderRadius: 0, inflateAmount: "auto", pointStyle: void 0 };
                            static defaultRoutes = { backgroundColor: "backgroundColor", borderColor: "borderColor" };
                            constructor(t) {
                                super(), (this.options = void 0), (this.horizontal = void 0), (this.base = void 0), (this.width = void 0), (this.height = void 0), (this.inflateAmount = void 0), t && Object.assign(this, t);
                            }
                            draw(t) {
                                const {
                                        inflateAmount: e,
                                        options: { borderColor: i, backgroundColor: s },
                                    } = this,
                                    { inner: n, outer: o } = Wn(this),
                                    a = (r = o.radius).topLeft || r.topRight || r.bottomLeft || r.bottomRight ? Ie : $n;
                                var r;
                                t.save(),
                                    (o.w === n.w && o.h === n.h) || (t.beginPath(), a(t, Un(o, e, n)), t.clip(), a(t, Un(n, -e, o)), (t.fillStyle = i), t.fill("evenodd")),
                                    t.beginPath(),
                                    a(t, Un(n, e)),
                                    (t.fillStyle = s),
                                    t.fill(),
                                    t.restore();
                            }
                            inRange(t, e, i) {
                                return Yn(this, t, e, i);
                            }
                            inXRange(t, e) {
                                return Yn(this, t, null, e);
                            }
                            inYRange(t, e) {
                                return Yn(this, null, t, e);
                            }
                            getCenterPoint(t) {
                                const { x: e, y: i, base: s, horizontal: n } = this.getProps(["x", "y", "base", "horizontal"], t);
                                return { x: n ? (e + s) / 2 : e, y: n ? i : (i + s) / 2 };
                            }
                            getRange(t) {
                                return "x" === t ? this.width / 2 : this.height / 2;
                            }
                        },
                    });
                    const Gn = ["rgb(54, 162, 235)", "rgb(255, 99, 132)", "rgb(255, 159, 64)", "rgb(255, 205, 86)", "rgb(75, 192, 192)", "rgb(153, 102, 255)", "rgb(201, 203, 207)"],
                        Kn = Gn.map((t) => t.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
                    function qn(t) {
                        return Gn[t % Gn.length];
                    }
                    function Xn(t) {
                        return Kn[t % Kn.length];
                    }
                    function Jn(t) {
                        let e;
                        for (e in t) if (t[e].borderColor || t[e].backgroundColor) return !0;
                        return !1;
                    }
                    var Qn = {
                        id: "colors",
                        defaults: { enabled: !0 },
                        beforeLayout(t, e, i) {
                            if (!i.enabled) return;
                            const {
                                type: s,
                                options: { elements: n },
                                data: { datasets: o },
                            } = t.config;
                            if (Jn(o) || (n && Jn(n))) return;
                            const a = (function (t) {
                                return "doughnut" === t || "pie" === t
                                    ? (function () {
                                          let t = 0;
                                          return (e) => {
                                              e.backgroundColor = e.data.map(() => qn(t++));
                                          };
                                      })()
                                    : "polarArea" === t
                                    ? (function () {
                                          let t = 0;
                                          return (e) => {
                                              e.backgroundColor = e.data.map(() => Xn(t++));
                                          };
                                      })()
                                    : (t, e) => {
                                          (t.borderColor = qn(e)), (t.backgroundColor = Xn(e));
                                      };
                            })(s);
                            o.forEach(a);
                        },
                    };
                    function to(t) {
                        if (t._decimated) {
                            const e = t._data;
                            delete t._decimated, delete t._data, Object.defineProperty(t, "data", { value: e });
                        }
                    }
                    function eo(t) {
                        t.data.datasets.forEach((t) => {
                            to(t);
                        });
                    }
                    var io = {
                        id: "decimation",
                        defaults: { algorithm: "min-max", enabled: !1 },
                        beforeElementsUpdate: (t, e, s) => {
                            if (!s.enabled) return void eo(t);
                            const n = t.width;
                            t.data.datasets.forEach((e, o) => {
                                const { _data: a, indexAxis: r } = e,
                                    l = t.getDatasetMeta(o),
                                    c = a || e.data;
                                if ("y" === yi([r, t.options.indexAxis])) return;
                                if (!l.controller.supportsDecimation) return;
                                const d = t.scales[l.xAxisID];
                                if ("linear" !== d.type && "time" !== d.type) return;
                                if (t.options.parsing) return;
                                let h,
                                    { start: u, count: p } = (function (t, e) {
                                        const i = e.length;
                                        let s,
                                            n = 0;
                                        const { iScale: o } = t,
                                            { min: a, max: r, minDefined: l, maxDefined: c } = o.getUserBounds();
                                        return l && (n = X(et(e, o.axis, a).lo, 0, i - 1)), (s = c ? X(et(e, o.axis, r).hi + 1, n, i) - n : i - n), { start: n, count: s };
                                    })(l, c);
                                if (p <= (s.threshold || 4 * n)) to(e);
                                else {
                                    switch (
                                        (i(a) &&
                                            ((e._data = c),
                                            delete e.data,
                                            Object.defineProperty(e, "data", {
                                                configurable: !0,
                                                enumerable: !0,
                                                get: function () {
                                                    return this._decimated;
                                                },
                                                set: function (t) {
                                                    this._data = t;
                                                },
                                            })),
                                        s.algorithm)
                                    ) {
                                        case "lttb":
                                            h = (function (t, e, i, s, n) {
                                                const o = n.samples || s;
                                                if (o >= i) return t.slice(e, e + i);
                                                const a = [],
                                                    r = (i - 2) / (o - 2);
                                                let l = 0;
                                                const c = e + i - 1;
                                                let d,
                                                    h,
                                                    u,
                                                    p,
                                                    m,
                                                    f = e;
                                                for (a[l++] = t[f], d = 0; d < o - 2; d++) {
                                                    let s,
                                                        n = 0,
                                                        o = 0;
                                                    const c = Math.floor((d + 1) * r) + 1 + e,
                                                        g = Math.min(Math.floor((d + 2) * r) + 1, i) + e,
                                                        b = g - c;
                                                    for (s = c; s < g; s++) (n += t[s].x), (o += t[s].y);
                                                    (n /= b), (o /= b);
                                                    const x = Math.floor(d * r) + 1 + e,
                                                        v = Math.min(Math.floor((d + 1) * r) + 1, i) + e,
                                                        { x: y, y: _ } = t[f];
                                                    for (u = p = -1, s = x; s < v; s++) (p = 0.5 * Math.abs((y - n) * (t[s].y - _) - (y - t[s].x) * (o - _))), p > u && ((u = p), (h = t[s]), (m = s));
                                                    (a[l++] = h), (f = m);
                                                }
                                                return (a[l++] = t[c]), a;
                                            })(c, u, p, n, s);
                                            break;
                                        case "min-max":
                                            h = (function (t, e, s, n) {
                                                let o,
                                                    a,
                                                    r,
                                                    l,
                                                    c,
                                                    d,
                                                    h,
                                                    u,
                                                    p,
                                                    m,
                                                    f = 0,
                                                    g = 0;
                                                const b = [],
                                                    x = e + s - 1,
                                                    v = t[e].x,
                                                    y = t[x].x - v;
                                                for (o = e; o < e + s; ++o) {
                                                    (a = t[o]), (r = ((a.x - v) / y) * n), (l = a.y);
                                                    const e = 0 | r;
                                                    if (e === c) l < p ? ((p = l), (d = o)) : l > m && ((m = l), (h = o)), (f = (g * f + a.x) / ++g);
                                                    else {
                                                        const s = o - 1;
                                                        if (!i(d) && !i(h)) {
                                                            const e = Math.min(d, h),
                                                                i = Math.max(d, h);
                                                            e !== u && e !== s && b.push({ ...t[e], x: f }), i !== u && i !== s && b.push({ ...t[i], x: f });
                                                        }
                                                        o > 0 && s !== u && b.push(t[s]), b.push(a), (c = e), (g = 0), (p = m = l), (d = h = u = o);
                                                    }
                                                }
                                                return b;
                                            })(c, u, p, n);
                                            break;
                                        default:
                                            throw new Error(`Unsupported decimation algorithm '${s.algorithm}'`);
                                    }
                                    e._decimated = h;
                                }
                            });
                        },
                        destroy(t) {
                            eo(t);
                        },
                    };
                    function so(t, e, i, s) {
                        if (s) return;
                        let n = e[t],
                            o = i[t];
                        return "angle" === t && ((n = K(n)), (o = K(o))), { property: t, start: n, end: o };
                    }
                    function no(t, e, i) {
                        for (; e > t; e--) {
                            const t = i[e];
                            if (!isNaN(t.x) && !isNaN(t.y)) break;
                        }
                        return e;
                    }
                    function oo(t, e, i, s) {
                        return t && e ? s(t[i], e[i]) : t ? t[i] : e ? e[i] : 0;
                    }
                    function ao(t, e) {
                        let i = [],
                            n = !1;
                        return (
                            s(t)
                                ? ((n = !0), (i = t))
                                : (i = (function (t, e) {
                                      const { x: i = null, y: s = null } = t || {},
                                          n = e.points,
                                          o = [];
                                      return (
                                          e.segments.forEach(({ start: t, end: e }) => {
                                              e = no(t, e, n);
                                              const a = n[t],
                                                  r = n[e];
                                              null !== s ? (o.push({ x: a.x, y: s }), o.push({ x: r.x, y: s })) : null !== i && (o.push({ x: i, y: a.y }), o.push({ x: i, y: r.y }));
                                          }),
                                          o
                                      );
                                  })(t, e)),
                            i.length ? new Vn({ points: i, options: { tension: 0 }, _loop: n, _fullLoop: n }) : null
                        );
                    }
                    function ro(t) {
                        return t && !1 !== t.fill;
                    }
                    function lo(t, e, i) {
                        let s = t[e].fill;
                        const n = [e];
                        let a;
                        if (!i) return s;
                        for (; !1 !== s && -1 === n.indexOf(s); ) {
                            if (!o(s)) return s;
                            if (((a = t[s]), !a)) return !1;
                            if (a.visible) return s;
                            n.push(s), (s = a.fill);
                        }
                        return !1;
                    }
                    function co(t, e, i) {
                        const s = (function (t) {
                            const e = t.options,
                                i = e.fill;
                            let s = r(i && i.target, i);
                            return void 0 === s && (s = !!e.backgroundColor), !1 !== s && null !== s && (!0 === s ? "origin" : s);
                        })(t);
                        if (n(s)) return !isNaN(s.value) && s;
                        let a = parseFloat(s);
                        return o(a) && Math.floor(a) === a
                            ? (function (t, e, i, s) {
                                  return ("-" !== t && "+" !== t) || (i = e + i), !(i === e || i < 0 || i >= s) && i;
                              })(s[0], e, a, i)
                            : ["origin", "start", "end", "stack", "shape"].indexOf(s) >= 0 && s;
                    }
                    function ho(t, e, i) {
                        const s = [];
                        for (let n = 0; n < i.length; n++) {
                            const o = i[n],
                                { first: a, last: r, point: l } = uo(o, e, "x");
                            if (!(!l || (a && r)))
                                if (a) s.unshift(l);
                                else if ((t.push(l), !r)) break;
                        }
                        t.push(...s);
                    }
                    function uo(t, e, i) {
                        const s = t.interpolate(e, i);
                        if (!s) return {};
                        const n = s[i],
                            o = t.segments,
                            a = t.points;
                        let r = !1,
                            l = !1;
                        for (let t = 0; t < o.length; t++) {
                            const e = o[t],
                                s = a[e.start][i],
                                c = a[e.end][i];
                            if (Q(n, s, c)) {
                                (r = n === s), (l = n === c);
                                break;
                            }
                        }
                        return { first: r, last: l, point: s };
                    }
                    class po {
                        constructor(t) {
                            (this.x = t.x), (this.y = t.y), (this.radius = t.radius);
                        }
                        pathSegment(t, e, i) {
                            const { x: s, y: n, radius: o } = this;
                            return (e = e || { start: 0, end: S }), t.arc(s, n, o, e.end, e.start, !0), !i.bounds;
                        }
                        interpolate(t) {
                            const { x: e, y: i, radius: s } = this,
                                n = t.angle;
                            return { x: e + Math.cos(n) * s, y: i + Math.sin(n) * s, angle: n };
                        }
                    }
                    function mo(t) {
                        const { chart: e, fill: i, line: s } = t;
                        if (o(i))
                            return (function (t, e) {
                                const i = t.getDatasetMeta(e);
                                return i && t.isDatasetVisible(e) ? i.dataset : null;
                            })(e, i);
                        if ("stack" === i)
                            return (function (t) {
                                const { scale: e, index: i, line: s } = t,
                                    n = [],
                                    o = s.segments,
                                    a = s.points,
                                    r = (function (t, e) {
                                        const i = [],
                                            s = t.getMatchingVisibleMetas("line");
                                        for (let t = 0; t < s.length; t++) {
                                            const n = s[t];
                                            if (n.index === e) break;
                                            n.hidden || i.unshift(n.dataset);
                                        }
                                        return i;
                                    })(e, i);
                                r.push(ao({ x: null, y: e.bottom }, s));
                                for (let t = 0; t < o.length; t++) {
                                    const e = o[t];
                                    for (let t = e.start; t <= e.end; t++) ho(n, a[t], r);
                                }
                                return new Vn({ points: n, options: {} });
                            })(t);
                        if ("shape" === i) return !0;
                        const a = (function (t) {
                            return (t.scale || {}).getPointPositionForValue
                                ? (function (t) {
                                      const { scale: e, fill: i } = t,
                                          s = e.options,
                                          o = e.getLabels().length,
                                          a = s.reverse ? e.max : e.min,
                                          r = (function (t, e, i) {
                                              let s;
                                              return (s = "start" === t ? i : "end" === t ? (e.options.reverse ? e.min : e.max) : n(t) ? t.value : e.getBaseValue()), s;
                                          })(i, e, a),
                                          l = [];
                                      if (s.grid.circular) {
                                          const t = e.getPointPositionForValue(0, a);
                                          return new po({ x: t.x, y: t.y, radius: e.getDistanceFromCenterForValue(r) });
                                      }
                                      for (let t = 0; t < o; ++t) l.push(e.getPointPositionForValue(t, r));
                                      return l;
                                  })(t)
                                : (function (t) {
                                      const { scale: e = {}, fill: i } = t,
                                          s = (function (t, e) {
                                              let i = null;
                                              return "start" === t ? (i = e.bottom) : "end" === t ? (i = e.top) : n(t) ? (i = e.getPixelForValue(t.value)) : e.getBasePixel && (i = e.getBasePixel()), i;
                                          })(i, e);
                                      if (o(s)) {
                                          const t = e.isHorizontal();
                                          return { x: t ? s : null, y: t ? null : s };
                                      }
                                      return null;
                                  })(t);
                        })(t);
                        return a instanceof po ? a : ao(a, s);
                    }
                    function fo(t, e, i) {
                        const s = mo(e),
                            { line: n, scale: o, axis: a } = e,
                            r = n.options,
                            l = r.fill,
                            c = r.backgroundColor,
                            { above: d = c, below: h = c } = l || {};
                        s &&
                            n.points.length &&
                            (Ae(t, i),
                            (function (t, e) {
                                const { line: i, target: s, above: n, below: o, area: a, scale: r } = e,
                                    l = i._loop ? "angle" : e.axis;
                                t.save(),
                                    "x" === l && o !== n && (go(t, s, a.top), bo(t, { line: i, target: s, color: n, scale: r, property: l }), t.restore(), t.save(), go(t, s, a.bottom)),
                                    bo(t, { line: i, target: s, color: o, scale: r, property: l }),
                                    t.restore();
                            })(t, { line: n, target: s, above: d, below: h, area: i, scale: o, axis: a }),
                            Le(t));
                    }
                    function go(t, e, i) {
                        const { segments: s, points: n } = e;
                        let o = !0,
                            a = !1;
                        t.beginPath();
                        for (const r of s) {
                            const { start: s, end: l } = r,
                                c = n[s],
                                d = n[no(s, l, n)];
                            o ? (t.moveTo(c.x, c.y), (o = !1)) : (t.lineTo(c.x, i), t.lineTo(c.x, c.y)), (a = !!e.pathSegment(t, r, { move: a })), a ? t.closePath() : t.lineTo(d.x, i);
                        }
                        t.lineTo(e.first().x, i), t.closePath(), t.clip();
                    }
                    function bo(t, e) {
                        const { line: i, target: s, property: n, color: o, scale: a } = e,
                            r = (function (t, e, i) {
                                const s = t.segments,
                                    n = t.points,
                                    o = e.points,
                                    a = [];
                                for (const t of s) {
                                    let { start: s, end: r } = t;
                                    r = no(s, r, n);
                                    const l = so(i, n[s], n[r], t.loop);
                                    if (!e.segments) {
                                        a.push({ source: t, target: l, start: n[s], end: n[r] });
                                        continue;
                                    }
                                    const c = Ai(e, l);
                                    for (const e of c) {
                                        const s = so(i, o[e.start], o[e.end], e.loop),
                                            r = Si(t, n, s);
                                        for (const t of r) a.push({ source: t, target: e, start: { [i]: oo(l, s, "start", Math.max) }, end: { [i]: oo(l, s, "end", Math.min) } });
                                    }
                                }
                                return a;
                            })(i, s, n);
                        for (const { source: e, target: l, start: c, end: d } of r) {
                            const { style: { backgroundColor: r = o } = {} } = e,
                                h = !0 !== s;
                            t.save(), (t.fillStyle = r), xo(t, a, h && so(n, c, d)), t.beginPath();
                            const u = !!i.pathSegment(t, e);
                            let p;
                            if (h) {
                                u ? t.closePath() : vo(t, s, d, n);
                                const e = !!s.pathSegment(t, l, { move: u, reverse: !0 });
                                (p = u && e), p || vo(t, s, c, n);
                            }
                            t.closePath(), t.fill(p ? "evenodd" : "nonzero"), t.restore();
                        }
                    }
                    function xo(t, e, i) {
                        const { top: s, bottom: n } = e.chart.chartArea,
                            { property: o, start: a, end: r } = i || {};
                        "x" === o && (t.beginPath(), t.rect(a, s, r - a, n - s), t.clip());
                    }
                    function vo(t, e, i, s) {
                        const n = e.interpolate(i, s);
                        n && t.lineTo(n.x, n.y);
                    }
                    var yo = {
                        id: "filler",
                        afterDatasetsUpdate(t, e, i) {
                            const s = (t.data.datasets || []).length,
                                n = [];
                            let o, a, r, l;
                            for (a = 0; a < s; ++a)
                                (o = t.getDatasetMeta(a)),
                                    (r = o.dataset),
                                    (l = null),
                                    r && r.options && r instanceof Vn && (l = { visible: t.isDatasetVisible(a), index: a, fill: co(r, a, s), chart: t, axis: o.controller.options.indexAxis, scale: o.vScale, line: r }),
                                    (o.$filler = l),
                                    n.push(l);
                            for (a = 0; a < s; ++a) (l = n[a]), l && !1 !== l.fill && (l.fill = lo(n, a, i.propagate));
                        },
                        beforeDraw(t, e, i) {
                            const s = "beforeDraw" === i.drawTime,
                                n = t.getSortedVisibleDatasetMetas(),
                                o = t.chartArea;
                            for (let e = n.length - 1; e >= 0; --e) {
                                const i = n[e].$filler;
                                i && (i.line.updateControlPoints(o, i.axis), s && i.fill && fo(t.ctx, i, o));
                            }
                        },
                        beforeDatasetsDraw(t, e, i) {
                            if ("beforeDatasetsDraw" !== i.drawTime) return;
                            const s = t.getSortedVisibleDatasetMetas();
                            for (let e = s.length - 1; e >= 0; --e) {
                                const i = s[e].$filler;
                                ro(i) && fo(t.ctx, i, t.chartArea);
                            }
                        },
                        beforeDatasetDraw(t, e, i) {
                            const s = e.meta.$filler;
                            ro(s) && "beforeDatasetDraw" === i.drawTime && fo(t.ctx, s, t.chartArea);
                        },
                        defaults: { propagate: !0, drawTime: "beforeDatasetDraw" },
                    };
                    const _o = (t, e) => {
                        let { boxHeight: i = e, boxWidth: s = e } = t;
                        return t.usePointStyle && ((i = Math.min(i, e)), (s = t.pointStyleWidth || Math.min(s, e))), { boxWidth: s, boxHeight: i, itemHeight: Math.max(e, i) };
                    };
                    class Co extends Ts {
                        constructor(t) {
                            super(),
                                (this._added = !1),
                                (this.legendHitBoxes = []),
                                (this._hoveredItem = null),
                                (this.doughnutMode = !1),
                                (this.chart = t.chart),
                                (this.options = t.options),
                                (this.ctx = t.ctx),
                                (this.legendItems = void 0),
                                (this.columnSizes = void 0),
                                (this.lineWidths = void 0),
                                (this.maxHeight = void 0),
                                (this.maxWidth = void 0),
                                (this.top = void 0),
                                (this.bottom = void 0),
                                (this.left = void 0),
                                (this.right = void 0),
                                (this.height = void 0),
                                (this.width = void 0),
                                (this._margins = void 0),
                                (this.position = void 0),
                                (this.weight = void 0),
                                (this.fullSize = void 0);
                        }
                        update(t, e, i) {
                            (this.maxWidth = t), (this.maxHeight = e), (this._margins = i), this.setDimensions(), this.buildLabels(), this.fit();
                        }
                        setDimensions() {
                            this.isHorizontal() ? ((this.width = this.maxWidth), (this.left = this._margins.left), (this.right = this.width)) : ((this.height = this.maxHeight), (this.top = this._margins.top), (this.bottom = this.height));
                        }
                        buildLabels() {
                            const t = this.options.labels || {};
                            let e = d(t.generateLabels, [this.chart], this) || [];
                            t.filter && (e = e.filter((e) => t.filter(e, this.chart.data))), t.sort && (e = e.sort((e, i) => t.sort(e, i, this.chart.data))), this.options.reverse && e.reverse(), (this.legendItems = e);
                        }
                        fit() {
                            const { options: t, ctx: e } = this;
                            if (!t.display) return void (this.width = this.height = 0);
                            const i = t.labels,
                                s = vi(i.font),
                                n = s.size,
                                o = this._computeTitleHeight(),
                                { boxWidth: a, itemHeight: r } = _o(i, n);
                            let l, c;
                            (e.font = s.string),
                                this.isHorizontal() ? ((l = this.maxWidth), (c = this._fitRows(o, n, a, r) + 10)) : ((c = this.maxHeight), (l = this._fitCols(o, s, a, r) + 10)),
                                (this.width = Math.min(l, t.maxWidth || this.maxWidth)),
                                (this.height = Math.min(c, t.maxHeight || this.maxHeight));
                        }
                        _fitRows(t, e, i, s) {
                            const {
                                    ctx: n,
                                    maxWidth: o,
                                    options: {
                                        labels: { padding: a },
                                    },
                                } = this,
                                r = (this.legendHitBoxes = []),
                                l = (this.lineWidths = [0]),
                                c = s + a;
                            let d = t;
                            (n.textAlign = "left"), (n.textBaseline = "middle");
                            let h = -1,
                                u = -c;
                            return (
                                this.legendItems.forEach((t, p) => {
                                    const m = i + e / 2 + n.measureText(t.text).width;
                                    (0 === p || l[l.length - 1] + m + 2 * a > o) && ((d += c), (l[l.length - (p > 0 ? 0 : 1)] = 0), (u += c), h++), (r[p] = { left: 0, top: u, row: h, width: m, height: s }), (l[l.length - 1] += m + a);
                                }),
                                d
                            );
                        }
                        _fitCols(t, e, i, s) {
                            const {
                                    ctx: n,
                                    maxHeight: o,
                                    options: {
                                        labels: { padding: a },
                                    },
                                } = this,
                                r = (this.legendHitBoxes = []),
                                l = (this.columnSizes = []),
                                c = o - t;
                            let d = a,
                                h = 0,
                                u = 0,
                                p = 0,
                                m = 0;
                            return (
                                this.legendItems.forEach((t, o) => {
                                    const { itemWidth: f, itemHeight: g } = (function (t, e, i, s, n) {
                                        const o = (function (t, e, i, s) {
                                                let n = t.text;
                                                return n && "string" != typeof n && (n = n.reduce((t, e) => (t.length > e.length ? t : e))), e + i.size / 2 + s.measureText(n).width;
                                            })(s, t, e, i),
                                            a = (function (t, e, i) {
                                                let s = t;
                                                return "string" != typeof e.text && (s = wo(e, i)), s;
                                            })(n, s, e.lineHeight);
                                        return { itemWidth: o, itemHeight: a };
                                    })(i, e, n, t, s);
                                    o > 0 && u + g + 2 * a > c && ((d += h + a), l.push({ width: h, height: u }), (p += h + a), m++, (h = u = 0)),
                                        (r[o] = { left: p, top: u, col: m, width: f, height: g }),
                                        (h = Math.max(h, f)),
                                        (u += g + a);
                                }),
                                (d += h),
                                l.push({ width: h, height: u }),
                                d
                            );
                        }
                        adjustHitBoxes() {
                            if (!this.options.display) return;
                            const t = this._computeTitleHeight(),
                                {
                                    legendHitBoxes: e,
                                    options: {
                                        align: i,
                                        labels: { padding: s },
                                        rtl: n,
                                    },
                                } = this,
                                o = wi(n, this.left, this.width);
                            if (this.isHorizontal()) {
                                let n = 0,
                                    a = ut(i, this.left + s, this.right - this.lineWidths[n]);
                                for (const r of e) n !== r.row && ((n = r.row), (a = ut(i, this.left + s, this.right - this.lineWidths[n]))), (r.top += this.top + t + s), (r.left = o.leftForLtr(o.x(a), r.width)), (a += r.width + s);
                            } else {
                                let n = 0,
                                    a = ut(i, this.top + t + s, this.bottom - this.columnSizes[n].height);
                                for (const r of e)
                                    r.col !== n && ((n = r.col), (a = ut(i, this.top + t + s, this.bottom - this.columnSizes[n].height))),
                                        (r.top = a),
                                        (r.left += this.left + s),
                                        (r.left = o.leftForLtr(o.x(r.left), r.width)),
                                        (a += r.height + s);
                            }
                        }
                        isHorizontal() {
                            return "top" === this.options.position || "bottom" === this.options.position;
                        }
                        draw() {
                            if (this.options.display) {
                                const t = this.ctx;
                                Ae(t, this), this._draw(), Le(t);
                            }
                        }
                        _draw() {
                            const { options: t, columnSizes: e, lineWidths: i, ctx: s } = this,
                                { align: n, labels: o } = t,
                                a = re.color,
                                l = wi(t.rtl, this.left, this.width),
                                c = vi(o.font),
                                { padding: d } = o,
                                h = c.size,
                                u = h / 2;
                            let p;
                            this.drawTitle(), (s.textAlign = l.textAlign("left")), (s.textBaseline = "middle"), (s.lineWidth = 0.5), (s.font = c.string);
                            const { boxWidth: m, boxHeight: f, itemHeight: g } = _o(o, h),
                                b = this.isHorizontal(),
                                x = this._computeTitleHeight();
                            (p = b ? { x: ut(n, this.left + d, this.right - i[0]), y: this.top + d + x, line: 0 } : { x: this.left + d, y: ut(n, this.top + x + d, this.bottom - e[0].height), line: 0 }), zi(this.ctx, t.textDirection);
                            const v = g + d;
                            this.legendItems.forEach((y, _) => {
                                (s.strokeStyle = y.fontColor), (s.fillStyle = y.fontColor);
                                const C = s.measureText(y.text).width,
                                    w = l.textAlign(y.textAlign || (y.textAlign = o.textAlign)),
                                    z = m + u + C;
                                let k = p.x,
                                    M = p.y;
                                if (
                                    (l.setWidth(this.width),
                                    b
                                        ? _ > 0 && k + z + d > this.right && ((M = p.y += v), p.line++, (k = p.x = ut(n, this.left + d, this.right - i[p.line])))
                                        : _ > 0 && M + v > this.bottom && ((k = p.x = k + e[p.line].width + d), p.line++, (M = p.y = ut(n, this.top + x + d, this.bottom - e[p.line].height))),
                                    (function (t, e, i) {
                                        if (isNaN(m) || m <= 0 || isNaN(f) || f < 0) return;
                                        s.save();
                                        const n = r(i.lineWidth, 1);
                                        if (
                                            ((s.fillStyle = r(i.fillStyle, a)),
                                            (s.lineCap = r(i.lineCap, "butt")),
                                            (s.lineDashOffset = r(i.lineDashOffset, 0)),
                                            (s.lineJoin = r(i.lineJoin, "miter")),
                                            (s.lineWidth = n),
                                            (s.strokeStyle = r(i.strokeStyle, a)),
                                            s.setLineDash(r(i.lineDash, [])),
                                            o.usePointStyle)
                                        ) {
                                            const a = { radius: (f * Math.SQRT2) / 2, pointStyle: i.pointStyle, rotation: i.rotation, borderWidth: n },
                                                r = l.xPlus(t, m / 2);
                                            je(s, a, r, e + u, o.pointStyleWidth && m);
                                        } else {
                                            const o = e + Math.max((h - f) / 2, 0),
                                                a = l.leftForLtr(t, m),
                                                r = bi(i.borderRadius);
                                            s.beginPath(), Object.values(r).some((t) => 0 !== t) ? Ie(s, { x: a, y: o, w: m, h: f, radius: r }) : s.rect(a, o, m, f), s.fill(), 0 !== n && s.stroke();
                                        }
                                        s.restore();
                                    })(l.x(k), M, y),
                                    (k = pt(w, k + m + u, b ? k + z : this.right, t.rtl)),
                                    (function (t, e, i) {
                                        Ee(s, i.text, t, e + g / 2, c, { strikethrough: i.hidden, textAlign: l.textAlign(i.textAlign) });
                                    })(l.x(k), M, y),
                                    b)
                                )
                                    p.x += z + d;
                                else if ("string" != typeof y.text) {
                                    const t = c.lineHeight;
                                    p.y += wo(y, t);
                                } else p.y += v;
                            }),
                                ki(this.ctx, t.textDirection);
                        }
                        drawTitle() {
                            const t = this.options,
                                e = t.title,
                                i = vi(e.font),
                                s = xi(e.padding);
                            if (!e.display) return;
                            const n = wi(t.rtl, this.left, this.width),
                                o = this.ctx,
                                a = e.position,
                                r = i.size / 2,
                                l = s.top + r;
                            let c,
                                d = this.left,
                                h = this.width;
                            if (this.isHorizontal()) (h = Math.max(...this.lineWidths)), (c = this.top + l), (d = ut(t.align, d, this.right - h));
                            else {
                                const e = this.columnSizes.reduce((t, e) => Math.max(t, e.height), 0);
                                c = l + ut(t.align, this.top, this.bottom - e - t.labels.padding - this._computeTitleHeight());
                            }
                            const u = ut(a, d, d + h);
                            (o.textAlign = n.textAlign(ht(a))), (o.textBaseline = "middle"), (o.strokeStyle = e.color), (o.fillStyle = e.color), (o.font = i.string), Ee(o, e.text, u, c, i);
                        }
                        _computeTitleHeight() {
                            const t = this.options.title,
                                e = vi(t.font),
                                i = xi(t.padding);
                            return t.display ? e.lineHeight + i.height : 0;
                        }
                        _getLegendItemAt(t, e) {
                            let i, s, n;
                            if (Q(t, this.left, this.right) && Q(e, this.top, this.bottom))
                                for (n = this.legendHitBoxes, i = 0; i < n.length; ++i) if (((s = n[i]), Q(t, s.left, s.left + s.width) && Q(e, s.top, s.top + s.height))) return this.legendItems[i];
                            return null;
                        }
                        handleEvent(t) {
                            const e = this.options;
                            if (
                                !(function (t, e) {
                                    return !(("mousemove" !== t && "mouseout" !== t) || (!e.onHover && !e.onLeave)) || !(!e.onClick || ("click" !== t && "mouseup" !== t));
                                })(t.type, e)
                            )
                                return;
                            const i = this._getLegendItemAt(t.x, t.y);
                            if ("mousemove" === t.type || "mouseout" === t.type) {
                                const o = this._hoveredItem,
                                    a = ((n = i), null !== (s = o) && null !== n && s.datasetIndex === n.datasetIndex && s.index === n.index);
                                o && !a && d(e.onLeave, [t, o, this], this), (this._hoveredItem = i), i && !a && d(e.onHover, [t, i, this], this);
                            } else i && d(e.onClick, [t, i, this], this);
                            var s, n;
                        }
                    }
                    function wo(t, e) {
                        return e * (t.text ? t.text.length + 0.5 : 0);
                    }
                    var zo = {
                        id: "legend",
                        _element: Co,
                        start(t, e, i) {
                            const s = (t.legend = new Co({ ctx: t.ctx, options: i, chart: t }));
                            Xi.configure(t, s, i), Xi.addBox(t, s);
                        },
                        stop(t) {
                            Xi.removeBox(t, t.legend), delete t.legend;
                        },
                        beforeUpdate(t, e, i) {
                            const s = t.legend;
                            Xi.configure(t, s, i), (s.options = i);
                        },
                        afterUpdate(t) {
                            const e = t.legend;
                            e.buildLabels(), e.adjustHitBoxes();
                        },
                        afterEvent(t, e) {
                            e.replay || t.legend.handleEvent(e.event);
                        },
                        defaults: {
                            display: !0,
                            position: "top",
                            align: "center",
                            fullSize: !0,
                            reverse: !1,
                            weight: 1e3,
                            onClick(t, e, i) {
                                const s = e.datasetIndex,
                                    n = i.chart;
                                n.isDatasetVisible(s) ? (n.hide(s), (e.hidden = !0)) : (n.show(s), (e.hidden = !1));
                            },
                            onHover: null,
                            onLeave: null,
                            labels: {
                                color: (t) => t.chart.options.color,
                                boxWidth: 40,
                                padding: 10,
                                generateLabels(t) {
                                    const e = t.data.datasets,
                                        {
                                            labels: { usePointStyle: i, pointStyle: s, textAlign: n, color: o, useBorderRadius: a, borderRadius: r },
                                        } = t.legend.options;
                                    return t._getSortedDatasetMetas().map((t) => {
                                        const l = t.controller.getStyle(i ? 0 : void 0),
                                            c = xi(l.borderWidth);
                                        return {
                                            text: e[t.index].label,
                                            fillStyle: l.backgroundColor,
                                            fontColor: o,
                                            hidden: !t.visible,
                                            lineCap: l.borderCapStyle,
                                            lineDash: l.borderDash,
                                            lineDashOffset: l.borderDashOffset,
                                            lineJoin: l.borderJoinStyle,
                                            lineWidth: (c.width + c.height) / 4,
                                            strokeStyle: l.borderColor,
                                            pointStyle: s || l.pointStyle,
                                            rotation: l.rotation,
                                            textAlign: n || l.textAlign,
                                            borderRadius: a && (r || l.borderRadius),
                                            datasetIndex: t.index,
                                        };
                                    }, this);
                                },
                            },
                            title: { color: (t) => t.chart.options.color, display: !1, position: "center", text: "" },
                        },
                        descriptors: { _scriptable: (t) => !t.startsWith("on"), labels: { _scriptable: (t) => !["generateLabels", "filter", "sort"].includes(t) } },
                    };
                    class ko extends Ts {
                        constructor(t) {
                            super(),
                                (this.chart = t.chart),
                                (this.options = t.options),
                                (this.ctx = t.ctx),
                                (this._padding = void 0),
                                (this.top = void 0),
                                (this.bottom = void 0),
                                (this.left = void 0),
                                (this.right = void 0),
                                (this.width = void 0),
                                (this.height = void 0),
                                (this.position = void 0),
                                (this.weight = void 0),
                                (this.fullSize = void 0);
                        }
                        update(t, e) {
                            const i = this.options;
                            if (((this.left = 0), (this.top = 0), !i.display)) return void (this.width = this.height = this.right = this.bottom = 0);
                            (this.width = this.right = t), (this.height = this.bottom = e);
                            const n = s(i.text) ? i.text.length : 1;
                            this._padding = xi(i.padding);
                            const o = n * vi(i.font).lineHeight + this._padding.height;
                            this.isHorizontal() ? (this.height = o) : (this.width = o);
                        }
                        isHorizontal() {
                            const t = this.options.position;
                            return "top" === t || "bottom" === t;
                        }
                        _drawArgs(t) {
                            const { top: e, left: i, bottom: s, right: n, options: o } = this,
                                a = o.align;
                            let r,
                                l,
                                c,
                                d = 0;
                            return (
                                this.isHorizontal() ? ((l = ut(a, i, n)), (c = e + t), (r = n - i)) : ("left" === o.position ? ((l = i + t), (c = ut(a, s, e)), (d = -0.5 * j)) : ((l = n - t), (c = ut(a, e, s)), (d = 0.5 * j)), (r = s - e)),
                                { titleX: l, titleY: c, maxWidth: r, rotation: d }
                            );
                        }
                        draw() {
                            const t = this.ctx,
                                e = this.options;
                            if (!e.display) return;
                            const i = vi(e.font),
                                s = i.lineHeight / 2 + this._padding.top,
                                { titleX: n, titleY: o, maxWidth: a, rotation: r } = this._drawArgs(s);
                            Ee(t, e.text, 0, 0, i, { color: e.color, maxWidth: a, rotation: r, textAlign: ht(e.align), textBaseline: "middle", translation: [n, o] });
                        }
                    }
                    var Mo = {
                        id: "title",
                        _element: ko,
                        start(t, e, i) {
                            !(function (t, e) {
                                const i = new ko({ ctx: t.ctx, options: e, chart: t });
                                Xi.configure(t, i, e), Xi.addBox(t, i), (t.titleBlock = i);
                            })(t, i);
                        },
                        stop(t) {
                            const e = t.titleBlock;
                            Xi.removeBox(t, e), delete t.titleBlock;
                        },
                        beforeUpdate(t, e, i) {
                            const s = t.titleBlock;
                            Xi.configure(t, s, i), (s.options = i);
                        },
                        defaults: { align: "center", display: !1, font: { weight: "bold" }, fullSize: !0, padding: 10, position: "top", text: "", weight: 2e3 },
                        defaultRoutes: { color: "color" },
                        descriptors: { _scriptable: !0, _indexable: !1 },
                    };
                    const jo = new WeakMap();
                    var So = {
                        id: "subtitle",
                        start(t, e, i) {
                            const s = new ko({ ctx: t.ctx, options: i, chart: t });
                            Xi.configure(t, s, i), Xi.addBox(t, s), jo.set(t, s);
                        },
                        stop(t) {
                            Xi.removeBox(t, jo.get(t)), jo.delete(t);
                        },
                        beforeUpdate(t, e, i) {
                            const s = jo.get(t);
                            Xi.configure(t, s, i), (s.options = i);
                        },
                        defaults: { align: "center", display: !1, font: { weight: "normal" }, fullSize: !0, padding: 0, position: "top", text: "", weight: 1500 },
                        defaultRoutes: { color: "color" },
                        descriptors: { _scriptable: !0, _indexable: !1 },
                    };
                    const Ao = {
                        average(t) {
                            if (!t.length) return !1;
                            let e,
                                i,
                                s = 0,
                                n = 0,
                                o = 0;
                            for (e = 0, i = t.length; e < i; ++e) {
                                const i = t[e].element;
                                if (i && i.hasValue()) {
                                    const t = i.tooltipPosition();
                                    (s += t.x), (n += t.y), ++o;
                                }
                            }
                            return { x: s / o, y: n / o };
                        },
                        nearest(t, e) {
                            if (!t.length) return !1;
                            let i,
                                s,
                                n,
                                o = e.x,
                                a = e.y,
                                r = Number.POSITIVE_INFINITY;
                            for (i = 0, s = t.length; i < s; ++i) {
                                const s = t[i].element;
                                if (s && s.hasValue()) {
                                    const t = Z(e, s.getCenterPoint());
                                    t < r && ((r = t), (n = s));
                                }
                            }
                            if (n) {
                                const t = n.tooltipPosition();
                                (o = t.x), (a = t.y);
                            }
                            return { x: o, y: a };
                        },
                    };
                    function Lo(t, e) {
                        return e && (s(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t;
                    }
                    function Do(t) {
                        return ("string" == typeof t || t instanceof String) && t.indexOf("\n") > -1 ? t.split("\n") : t;
                    }
                    function To(t, e) {
                        const { element: i, datasetIndex: s, index: n } = e,
                            o = t.getDatasetMeta(s).controller,
                            { label: a, value: r } = o.getLabelAndValue(n);
                        return { chart: t, label: a, parsed: o.getParsed(n), raw: t.data.datasets[s].data[n], formattedValue: r, dataset: o.getDataset(), dataIndex: n, datasetIndex: s, element: i };
                    }
                    function Eo(t, e) {
                        const i = t.chart.ctx,
                            { body: s, footer: n, title: o } = t,
                            { boxWidth: a, boxHeight: r } = e,
                            l = vi(e.bodyFont),
                            c = vi(e.titleFont),
                            d = vi(e.footerFont),
                            u = o.length,
                            p = n.length,
                            m = s.length,
                            f = xi(e.padding);
                        let g = f.height,
                            b = 0,
                            x = s.reduce((t, e) => t + e.before.length + e.lines.length + e.after.length, 0);
                        (x += t.beforeBody.length + t.afterBody.length),
                            u && (g += u * c.lineHeight + (u - 1) * e.titleSpacing + e.titleMarginBottom),
                            x && (g += m * (e.displayColors ? Math.max(r, l.lineHeight) : l.lineHeight) + (x - m) * l.lineHeight + (x - 1) * e.bodySpacing),
                            p && (g += e.footerMarginTop + p * d.lineHeight + (p - 1) * e.footerSpacing);
                        let v = 0;
                        const y = function (t) {
                            b = Math.max(b, i.measureText(t).width + v);
                        };
                        return (
                            i.save(),
                            (i.font = c.string),
                            h(t.title, y),
                            (i.font = l.string),
                            h(t.beforeBody.concat(t.afterBody), y),
                            (v = e.displayColors ? a + 2 + e.boxPadding : 0),
                            h(s, (t) => {
                                h(t.before, y), h(t.lines, y), h(t.after, y);
                            }),
                            (v = 0),
                            (i.font = d.string),
                            h(t.footer, y),
                            i.restore(),
                            (b += f.width),
                            { width: b, height: g }
                        );
                    }
                    function Oo(t, e, i, s) {
                        const { x: n, width: o } = i,
                            {
                                width: a,
                                chartArea: { left: r, right: l },
                            } = t;
                        let c = "center";
                        return (
                            "center" === s ? (c = n <= (r + l) / 2 ? "left" : "right") : n <= o / 2 ? (c = "left") : n >= a - o / 2 && (c = "right"),
                            (function (t, e, i, s) {
                                const { x: n, width: o } = s,
                                    a = i.caretSize + i.caretPadding;
                                return ("left" === t && n + o + a > e.width) || ("right" === t && n - o - a < 0) || void 0;
                            })(c, t, e, i) && (c = "center"),
                            c
                        );
                    }
                    function Po(t, e, i) {
                        const s =
                            i.yAlign ||
                            e.yAlign ||
                            (function (t, e) {
                                const { y: i, height: s } = e;
                                return i < s / 2 ? "top" : i > t.height - s / 2 ? "bottom" : "center";
                            })(t, i);
                        return { xAlign: i.xAlign || e.xAlign || Oo(t, e, i, s), yAlign: s };
                    }
                    function Io(t, e, i, s) {
                        const { caretSize: n, caretPadding: o, cornerRadius: a } = t,
                            { xAlign: r, yAlign: l } = i,
                            c = n + o,
                            { topLeft: d, topRight: h, bottomLeft: u, bottomRight: p } = bi(a);
                        let m = (function (t, e) {
                            let { x: i, width: s } = t;
                            return "right" === e ? (i -= s) : "center" === e && (i -= s / 2), i;
                        })(e, r);
                        const f = (function (t, e, i) {
                            let { y: s, height: n } = t;
                            return "top" === e ? (s += i) : (s -= "bottom" === e ? n + i : n / 2), s;
                        })(e, l, c);
                        return (
                            "center" === l ? ("left" === r ? (m += c) : "right" === r && (m -= c)) : "left" === r ? (m -= Math.max(d, u) + n) : "right" === r && (m += Math.max(h, p) + n),
                            { x: X(m, 0, s.width - e.width), y: X(f, 0, s.height - e.height) }
                        );
                    }
                    function No(t, e, i) {
                        const s = xi(i.padding);
                        return "center" === e ? t.x + t.width / 2 : "right" === e ? t.x + t.width - s.right : t.x + s.left;
                    }
                    function Ro(t) {
                        return Lo([], Do(t));
                    }
                    function Vo(t, e) {
                        const i = e && e.dataset && e.dataset.tooltip && e.dataset.tooltip.callbacks;
                        return i ? t.override(i) : t;
                    }
                    const Fo = {
                        beforeTitle: t,
                        title(t) {
                            if (t.length > 0) {
                                const e = t[0],
                                    i = e.chart.data.labels,
                                    s = i ? i.length : 0;
                                if (this && this.options && "dataset" === this.options.mode) return e.dataset.label || "";
                                if (e.label) return e.label;
                                if (s > 0 && e.dataIndex < s) return i[e.dataIndex];
                            }
                            return "";
                        },
                        afterTitle: t,
                        beforeBody: t,
                        beforeLabel: t,
                        label(t) {
                            if (this && this.options && "dataset" === this.options.mode) return t.label + ": " + t.formattedValue || t.formattedValue;
                            let e = t.dataset.label || "";
                            e && (e += ": ");
                            const s = t.formattedValue;
                            return i(s) || (e += s), e;
                        },
                        labelColor(t) {
                            const e = t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);
                            return { borderColor: e.borderColor, backgroundColor: e.backgroundColor, borderWidth: e.borderWidth, borderDash: e.borderDash, borderDashOffset: e.borderDashOffset, borderRadius: 0 };
                        },
                        labelTextColor() {
                            return this.options.bodyColor;
                        },
                        labelPointStyle(t) {
                            const e = t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);
                            return { pointStyle: e.pointStyle, rotation: e.rotation };
                        },
                        afterLabel: t,
                        afterBody: t,
                        beforeFooter: t,
                        footer: t,
                        afterFooter: t,
                    };
                    function Bo(t, e, i, s) {
                        const n = t[e].call(i, s);
                        return void 0 === n ? Fo[e].call(i, s) : n;
                    }
                    class Ho extends Ts {
                        static positioners = Ao;
                        constructor(t) {
                            super(),
                                (this.opacity = 0),
                                (this._active = []),
                                (this._eventPosition = void 0),
                                (this._size = void 0),
                                (this._cachedAnimations = void 0),
                                (this._tooltipItems = []),
                                (this.$animations = void 0),
                                (this.$context = void 0),
                                (this.chart = t.chart),
                                (this.options = t.options),
                                (this.dataPoints = void 0),
                                (this.title = void 0),
                                (this.beforeBody = void 0),
                                (this.body = void 0),
                                (this.afterBody = void 0),
                                (this.footer = void 0),
                                (this.xAlign = void 0),
                                (this.yAlign = void 0),
                                (this.x = void 0),
                                (this.y = void 0),
                                (this.height = void 0),
                                (this.width = void 0),
                                (this.caretX = void 0),
                                (this.caretY = void 0),
                                (this.labelColors = void 0),
                                (this.labelPointStyles = void 0),
                                (this.labelTextColors = void 0);
                        }
                        initialize(t) {
                            (this.options = t), (this._cachedAnimations = void 0), (this.$context = void 0);
                        }
                        _resolveAnimations() {
                            const t = this._cachedAnimations;
                            if (t) return t;
                            const e = this.chart,
                                i = this.options.setContext(this.getContext()),
                                s = i.enabled && e.options.animation && i.animations,
                                n = new vs(this.chart, s);
                            return s._cacheable && (this._cachedAnimations = Object.freeze(n)), n;
                        }
                        getContext() {
                            return this.$context || (this.$context = Ci(this.chart.getContext(), { tooltip: this, tooltipItems: this._tooltipItems, type: "tooltip" }));
                        }
                        getTitle(t, e) {
                            const { callbacks: i } = e,
                                s = Bo(i, "beforeTitle", this, t),
                                n = Bo(i, "title", this, t),
                                o = Bo(i, "afterTitle", this, t);
                            let a = [];
                            return (a = Lo(a, Do(s))), (a = Lo(a, Do(n))), (a = Lo(a, Do(o))), a;
                        }
                        getBeforeBody(t, e) {
                            return Ro(Bo(e.callbacks, "beforeBody", this, t));
                        }
                        getBody(t, e) {
                            const { callbacks: i } = e,
                                s = [];
                            return (
                                h(t, (t) => {
                                    const e = { before: [], lines: [], after: [] },
                                        n = Vo(i, t);
                                    Lo(e.before, Do(Bo(n, "beforeLabel", this, t))), Lo(e.lines, Bo(n, "label", this, t)), Lo(e.after, Do(Bo(n, "afterLabel", this, t))), s.push(e);
                                }),
                                s
                            );
                        }
                        getAfterBody(t, e) {
                            return Ro(Bo(e.callbacks, "afterBody", this, t));
                        }
                        getFooter(t, e) {
                            const { callbacks: i } = e,
                                s = Bo(i, "beforeFooter", this, t),
                                n = Bo(i, "footer", this, t),
                                o = Bo(i, "afterFooter", this, t);
                            let a = [];
                            return (a = Lo(a, Do(s))), (a = Lo(a, Do(n))), (a = Lo(a, Do(o))), a;
                        }
                        _createItems(t) {
                            const e = this._active,
                                i = this.chart.data,
                                s = [],
                                n = [],
                                o = [];
                            let a,
                                r,
                                l = [];
                            for (a = 0, r = e.length; a < r; ++a) l.push(To(this.chart, e[a]));
                            return (
                                t.filter && (l = l.filter((e, s, n) => t.filter(e, s, n, i))),
                                t.itemSort && (l = l.sort((e, s) => t.itemSort(e, s, i))),
                                h(l, (e) => {
                                    const i = Vo(t.callbacks, e);
                                    s.push(Bo(i, "labelColor", this, e)), n.push(Bo(i, "labelPointStyle", this, e)), o.push(Bo(i, "labelTextColor", this, e));
                                }),
                                (this.labelColors = s),
                                (this.labelPointStyles = n),
                                (this.labelTextColors = o),
                                (this.dataPoints = l),
                                l
                            );
                        }
                        update(t, e) {
                            const i = this.options.setContext(this.getContext()),
                                s = this._active;
                            let n,
                                o = [];
                            if (s.length) {
                                const t = Ao[i.position].call(this, s, this._eventPosition);
                                (o = this._createItems(i)),
                                    (this.title = this.getTitle(o, i)),
                                    (this.beforeBody = this.getBeforeBody(o, i)),
                                    (this.body = this.getBody(o, i)),
                                    (this.afterBody = this.getAfterBody(o, i)),
                                    (this.footer = this.getFooter(o, i));
                                const e = (this._size = Eo(this, i)),
                                    a = Object.assign({}, t, e),
                                    r = Po(this.chart, i, a),
                                    l = Io(i, a, r, this.chart);
                                (this.xAlign = r.xAlign), (this.yAlign = r.yAlign), (n = { opacity: 1, x: l.x, y: l.y, width: e.width, height: e.height, caretX: t.x, caretY: t.y });
                            } else 0 !== this.opacity && (n = { opacity: 0 });
                            (this._tooltipItems = o), (this.$context = void 0), n && this._resolveAnimations().update(this, n), t && i.external && i.external.call(this, { chart: this.chart, tooltip: this, replay: e });
                        }
                        drawCaret(t, e, i, s) {
                            const n = this.getCaretPosition(t, i, s);
                            e.lineTo(n.x1, n.y1), e.lineTo(n.x2, n.y2), e.lineTo(n.x3, n.y3);
                        }
                        getCaretPosition(t, e, i) {
                            const { xAlign: s, yAlign: n } = this,
                                { caretSize: o, cornerRadius: a } = i,
                                { topLeft: r, topRight: l, bottomLeft: c, bottomRight: d } = bi(a),
                                { x: h, y: u } = t,
                                { width: p, height: m } = e;
                            let f, g, b, x, v, y;
                            return (
                                "center" === n
                                    ? ((v = u + m / 2), "left" === s ? ((f = h), (g = f - o), (x = v + o), (y = v - o)) : ((f = h + p), (g = f + o), (x = v - o), (y = v + o)), (b = f))
                                    : ((g = "left" === s ? h + Math.max(r, c) + o : "right" === s ? h + p - Math.max(l, d) - o : this.caretX),
                                      "top" === n ? ((x = u), (v = x - o), (f = g - o), (b = g + o)) : ((x = u + m), (v = x + o), (f = g + o), (b = g - o)),
                                      (y = x)),
                                { x1: f, x2: g, x3: b, y1: x, y2: v, y3: y }
                            );
                        }
                        drawTitle(t, e, i) {
                            const s = this.title,
                                n = s.length;
                            let o, a, r;
                            if (n) {
                                const l = wi(i.rtl, this.x, this.width);
                                for (
                                    t.x = No(this, i.titleAlign, i), e.textAlign = l.textAlign(i.titleAlign), e.textBaseline = "middle", o = vi(i.titleFont), a = i.titleSpacing, e.fillStyle = i.titleColor, e.font = o.string, r = 0;
                                    r < n;
                                    ++r
                                )
                                    e.fillText(s[r], l.x(t.x), t.y + o.lineHeight / 2), (t.y += o.lineHeight + a), r + 1 === n && (t.y += i.titleMarginBottom - a);
                            }
                        }
                        _drawColorBox(t, e, i, s, o) {
                            const a = this.labelColors[i],
                                r = this.labelPointStyles[i],
                                { boxHeight: l, boxWidth: c, boxPadding: d } = o,
                                h = vi(o.bodyFont),
                                u = No(this, "left", o),
                                p = s.x(u),
                                m = l < h.lineHeight ? (h.lineHeight - l) / 2 : 0,
                                f = e.y + m;
                            if (o.usePointStyle) {
                                const e = { radius: Math.min(c, l) / 2, pointStyle: r.pointStyle, rotation: r.rotation, borderWidth: 1 },
                                    i = s.leftForLtr(p, c) + c / 2,
                                    n = f + l / 2;
                                (t.strokeStyle = o.multiKeyBackground), (t.fillStyle = o.multiKeyBackground), Me(t, e, i, n), (t.strokeStyle = a.borderColor), (t.fillStyle = a.backgroundColor), Me(t, e, i, n);
                            } else {
                                (t.lineWidth = n(a.borderWidth) ? Math.max(...Object.values(a.borderWidth)) : a.borderWidth || 1),
                                    (t.strokeStyle = a.borderColor),
                                    t.setLineDash(a.borderDash || []),
                                    (t.lineDashOffset = a.borderDashOffset || 0);
                                const e = s.leftForLtr(p, c - d),
                                    i = s.leftForLtr(s.xPlus(p, 1), c - d - 2),
                                    r = bi(a.borderRadius);
                                Object.values(r).some((t) => 0 !== t)
                                    ? (t.beginPath(),
                                      (t.fillStyle = o.multiKeyBackground),
                                      Ie(t, { x: e, y: f, w: c, h: l, radius: r }),
                                      t.fill(),
                                      t.stroke(),
                                      (t.fillStyle = a.backgroundColor),
                                      t.beginPath(),
                                      Ie(t, { x: i, y: f + 1, w: c - 2, h: l - 2, radius: r }),
                                      t.fill())
                                    : ((t.fillStyle = o.multiKeyBackground), t.fillRect(e, f, c, l), t.strokeRect(e, f, c, l), (t.fillStyle = a.backgroundColor), t.fillRect(i, f + 1, c - 2, l - 2));
                            }
                            t.fillStyle = this.labelTextColors[i];
                        }
                        drawBody(t, e, i) {
                            const { body: s } = this,
                                { bodySpacing: n, bodyAlign: o, displayColors: a, boxHeight: r, boxWidth: l, boxPadding: c } = i,
                                d = vi(i.bodyFont);
                            let u = d.lineHeight,
                                p = 0;
                            const m = wi(i.rtl, this.x, this.width),
                                f = function (i) {
                                    e.fillText(i, m.x(t.x + p), t.y + u / 2), (t.y += u + n);
                                },
                                g = m.textAlign(o);
                            let b, x, v, y, _, C, w;
                            for (
                                e.textAlign = o,
                                    e.textBaseline = "middle",
                                    e.font = d.string,
                                    t.x = No(this, g, i),
                                    e.fillStyle = i.bodyColor,
                                    h(this.beforeBody, f),
                                    p = a && "right" !== g ? ("center" === o ? l / 2 + c : l + 2 + c) : 0,
                                    y = 0,
                                    C = s.length;
                                y < C;
                                ++y
                            ) {
                                for (
                                    b = s[y], x = this.labelTextColors[y], e.fillStyle = x, h(b.before, f), v = b.lines, a && v.length && (this._drawColorBox(e, t, y, m, i), (u = Math.max(d.lineHeight, r))), _ = 0, w = v.length;
                                    _ < w;
                                    ++_
                                )
                                    f(v[_]), (u = d.lineHeight);
                                h(b.after, f);
                            }
                            (p = 0), (u = d.lineHeight), h(this.afterBody, f), (t.y -= n);
                        }
                        drawFooter(t, e, i) {
                            const s = this.footer,
                                n = s.length;
                            let o, a;
                            if (n) {
                                const r = wi(i.rtl, this.x, this.width);
                                for (
                                    t.x = No(this, i.footerAlign, i),
                                        t.y += i.footerMarginTop,
                                        e.textAlign = r.textAlign(i.footerAlign),
                                        e.textBaseline = "middle",
                                        o = vi(i.footerFont),
                                        e.fillStyle = i.footerColor,
                                        e.font = o.string,
                                        a = 0;
                                    a < n;
                                    ++a
                                )
                                    e.fillText(s[a], r.x(t.x), t.y + o.lineHeight / 2), (t.y += o.lineHeight + i.footerSpacing);
                            }
                        }
                        drawBackground(t, e, i, s) {
                            const { xAlign: n, yAlign: o } = this,
                                { x: a, y: r } = t,
                                { width: l, height: c } = i,
                                { topLeft: d, topRight: h, bottomLeft: u, bottomRight: p } = bi(s.cornerRadius);
                            (e.fillStyle = s.backgroundColor),
                                (e.strokeStyle = s.borderColor),
                                (e.lineWidth = s.borderWidth),
                                e.beginPath(),
                                e.moveTo(a + d, r),
                                "top" === o && this.drawCaret(t, e, i, s),
                                e.lineTo(a + l - h, r),
                                e.quadraticCurveTo(a + l, r, a + l, r + h),
                                "center" === o && "right" === n && this.drawCaret(t, e, i, s),
                                e.lineTo(a + l, r + c - p),
                                e.quadraticCurveTo(a + l, r + c, a + l - p, r + c),
                                "bottom" === o && this.drawCaret(t, e, i, s),
                                e.lineTo(a + u, r + c),
                                e.quadraticCurveTo(a, r + c, a, r + c - u),
                                "center" === o && "left" === n && this.drawCaret(t, e, i, s),
                                e.lineTo(a, r + d),
                                e.quadraticCurveTo(a, r, a + d, r),
                                e.closePath(),
                                e.fill(),
                                s.borderWidth > 0 && e.stroke();
                        }
                        _updateAnimationTarget(t) {
                            const e = this.chart,
                                i = this.$animations,
                                s = i && i.x,
                                n = i && i.y;
                            if (s || n) {
                                const i = Ao[t.position].call(this, this._active, this._eventPosition);
                                if (!i) return;
                                const o = (this._size = Eo(this, t)),
                                    a = Object.assign({}, i, this._size),
                                    r = Po(e, t, a),
                                    l = Io(t, a, r, e);
                                (s._to === l.x && n._to === l.y) ||
                                    ((this.xAlign = r.xAlign), (this.yAlign = r.yAlign), (this.width = o.width), (this.height = o.height), (this.caretX = i.x), (this.caretY = i.y), this._resolveAnimations().update(this, l));
                            }
                        }
                        _willRender() {
                            return !!this.opacity;
                        }
                        draw(t) {
                            const e = this.options.setContext(this.getContext());
                            let i = this.opacity;
                            if (!i) return;
                            this._updateAnimationTarget(e);
                            const s = { width: this.width, height: this.height },
                                n = { x: this.x, y: this.y };
                            i = Math.abs(i) < 0.001 ? 0 : i;
                            const o = xi(e.padding),
                                a = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
                            e.enabled &&
                                a &&
                                (t.save(),
                                (t.globalAlpha = i),
                                this.drawBackground(n, t, s, e),
                                zi(t, e.textDirection),
                                (n.y += o.top),
                                this.drawTitle(n, t, e),
                                this.drawBody(n, t, e),
                                this.drawFooter(n, t, e),
                                ki(t, e.textDirection),
                                t.restore());
                        }
                        getActiveElements() {
                            return this._active || [];
                        }
                        setActiveElements(t, e) {
                            const i = this._active,
                                s = t.map(({ datasetIndex: t, index: e }) => {
                                    const i = this.chart.getDatasetMeta(t);
                                    if (!i) throw new Error("Cannot find a dataset at index " + t);
                                    return { datasetIndex: t, element: i.data[e], index: e };
                                }),
                                n = !u(i, s),
                                o = this._positionChanged(s, e);
                            (n || o) && ((this._active = s), (this._eventPosition = e), (this._ignoreReplayEvents = !0), this.update(!0));
                        }
                        handleEvent(t, e, i = !0) {
                            if (e && this._ignoreReplayEvents) return !1;
                            this._ignoreReplayEvents = !1;
                            const s = this.options,
                                n = this._active || [],
                                o = this._getActiveElements(t, n, e, i),
                                a = this._positionChanged(o, t),
                                r = e || !u(o, n) || a;
                            return r && ((this._active = o), (s.enabled || s.external) && ((this._eventPosition = { x: t.x, y: t.y }), this.update(!0, e))), r;
                        }
                        _getActiveElements(t, e, i, s) {
                            const n = this.options;
                            if ("mouseout" === t.type) return [];
                            if (!s) return e;
                            const o = this.chart.getElementsAtEventForMode(t, n.mode, n, i);
                            return n.reverse && o.reverse(), o;
                        }
                        _positionChanged(t, e) {
                            const { caretX: i, caretY: s, options: n } = this,
                                o = Ao[n.position].call(this, t, e);
                            return !1 !== o && (i !== o.x || s !== o.y);
                        }
                    }
                    var Wo = {
                            id: "tooltip",
                            _element: Ho,
                            positioners: Ao,
                            afterInit(t, e, i) {
                                i && (t.tooltip = new Ho({ chart: t, options: i }));
                            },
                            beforeUpdate(t, e, i) {
                                t.tooltip && t.tooltip.initialize(i);
                            },
                            reset(t, e, i) {
                                t.tooltip && t.tooltip.initialize(i);
                            },
                            afterDraw(t) {
                                const e = t.tooltip;
                                if (e && e._willRender()) {
                                    const i = { tooltip: e };
                                    if (!1 === t.notifyPlugins("beforeTooltipDraw", { ...i, cancelable: !0 })) return;
                                    e.draw(t.ctx), t.notifyPlugins("afterTooltipDraw", i);
                                }
                            },
                            afterEvent(t, e) {
                                if (t.tooltip) {
                                    const i = e.replay;
                                    t.tooltip.handleEvent(e.event, i, e.inChartArea) && (e.changed = !0);
                                }
                            },
                            defaults: {
                                enabled: !0,
                                external: null,
                                position: "average",
                                backgroundColor: "rgba(0,0,0,0.8)",
                                titleColor: "#fff",
                                titleFont: { weight: "bold" },
                                titleSpacing: 2,
                                titleMarginBottom: 6,
                                titleAlign: "left",
                                bodyColor: "#fff",
                                bodySpacing: 2,
                                bodyFont: {},
                                bodyAlign: "left",
                                footerColor: "#fff",
                                footerSpacing: 2,
                                footerMarginTop: 6,
                                footerFont: { weight: "bold" },
                                footerAlign: "left",
                                padding: 6,
                                caretPadding: 2,
                                caretSize: 5,
                                cornerRadius: 6,
                                boxHeight: (t, e) => e.bodyFont.size,
                                boxWidth: (t, e) => e.bodyFont.size,
                                multiKeyBackground: "#fff",
                                displayColors: !0,
                                boxPadding: 0,
                                borderColor: "rgba(0,0,0,0)",
                                borderWidth: 0,
                                animation: { duration: 400, easing: "easeOutQuart" },
                                animations: { numbers: { type: "number", properties: ["x", "y", "width", "height", "caretX", "caretY"] }, opacity: { easing: "linear", duration: 200 } },
                                callbacks: Fo,
                            },
                            defaultRoutes: { bodyFont: "font", footerFont: "font", titleFont: "font" },
                            descriptors: {
                                _scriptable: (t) => "filter" !== t && "itemSort" !== t && "external" !== t,
                                _indexable: !1,
                                callbacks: { _scriptable: !1, _indexable: !1 },
                                animation: { _fallback: !1 },
                                animations: { _fallback: "animation" },
                            },
                            additionalOptionScopes: ["interaction"],
                        },
                        Yo = Object.freeze({ __proto__: null, Colors: Qn, Decimation: io, Filler: yo, Legend: zo, SubTitle: So, Title: Mo, Tooltip: Wo });
                    function $o(t) {
                        const e = this.getLabels();
                        return t >= 0 && t < e.length ? e[t] : t;
                    }
                    function Uo(t, e, { horizontal: i, minRotation: s }) {
                        const n = W(s),
                            o = (i ? Math.sin(n) : Math.cos(n)) || 0.001,
                            a = 0.75 * e * ("" + t).length;
                        return Math.min(e / o, a);
                    }
                    class Zo extends Bs {
                        constructor(t) {
                            super(t), (this.start = void 0), (this.end = void 0), (this._startValue = void 0), (this._endValue = void 0), (this._valueRange = 0);
                        }
                        parse(t, e) {
                            return i(t) || (("number" == typeof t || t instanceof Number) && !isFinite(+t)) ? null : +t;
                        }
                        handleTickRangeOptions() {
                            const { beginAtZero: t } = this.options,
                                { minDefined: e, maxDefined: i } = this.getUserBounds();
                            let { min: s, max: n } = this;
                            const o = (t) => (s = e ? s : t),
                                a = (t) => (n = i ? n : t);
                            if (t) {
                                const t = I(s),
                                    e = I(n);
                                t < 0 && e < 0 ? a(0) : t > 0 && e > 0 && o(0);
                            }
                            if (s === n) {
                                let e = 0 === n ? 1 : Math.abs(0.05 * n);
                                a(n + e), t || o(s - e);
                            }
                            (this.min = s), (this.max = n);
                        }
                        getTickLimit() {
                            const t = this.options.ticks;
                            let e,
                                { maxTicksLimit: i, stepSize: s } = t;
                            return (
                                s
                                    ? ((e = Math.ceil(this.max / s) - Math.floor(this.min / s) + 1), e > 1e3 && (console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`), (e = 1e3)))
                                    : ((e = this.computeTickLimit()), (i = i || 11)),
                                i && (e = Math.min(i, e)),
                                e
                            );
                        }
                        computeTickLimit() {
                            return Number.POSITIVE_INFINITY;
                        }
                        buildTicks() {
                            const t = this.options,
                                e = t.ticks;
                            let s = this.getTickLimit();
                            s = Math.max(2, s);
                            const n = (function (t, e) {
                                const s = [],
                                    { bounds: n, step: o, min: a, max: r, precision: l, count: c, maxTicks: d, maxDigits: h, includeBounds: u } = t,
                                    p = o || 1,
                                    m = d - 1,
                                    { min: f, max: g } = e,
                                    b = !i(a),
                                    x = !i(r),
                                    v = !i(c),
                                    y = (g - f) / (h + 1);
                                let _,
                                    C,
                                    w,
                                    z,
                                    k = R((g - f) / m / p) * p;
                                if (k < 1e-14 && !b && !x) return [{ value: f }, { value: g }];
                                (z = Math.ceil(g / k) - Math.floor(f / k)),
                                    z > m && (k = R((z * k) / m / p) * p),
                                    i(l) || ((_ = Math.pow(10, l)), (k = Math.ceil(k * _) / _)),
                                    "ticks" === n ? ((C = Math.floor(f / k) * k), (w = Math.ceil(g / k) * k)) : ((C = f), (w = g)),
                                    b && x && o && B((r - a) / o, k / 1e3)
                                        ? ((z = Math.round(Math.min((r - a) / k, d))), (k = (r - a) / z), (C = a), (w = r))
                                        : v
                                        ? ((C = b ? a : C), (w = x ? r : w), (z = c - 1), (k = (w - C) / z))
                                        : ((z = (w - C) / k), (z = N(z, Math.round(z), k / 1e3) ? Math.round(z) : Math.ceil(z)));
                                const M = Math.max($(k), $(C));
                                (_ = Math.pow(10, i(l) ? M : l)), (C = Math.round(C * _) / _), (w = Math.round(w * _) / _);
                                let j = 0;
                                for (b && (u && C !== a ? (s.push({ value: a }), C < a && j++, N(Math.round((C + j * k) * _) / _, a, Uo(a, y, t)) && j++) : C < a && j++); j < z; ++j) s.push({ value: Math.round((C + j * k) * _) / _ });
                                return x && u && w !== r ? (s.length && N(s[s.length - 1].value, r, Uo(r, y, t)) ? (s[s.length - 1].value = r) : s.push({ value: r })) : (x && w !== r) || s.push({ value: w }), s;
                            })(
                                {
                                    maxTicks: s,
                                    bounds: t.bounds,
                                    min: t.min,
                                    max: t.max,
                                    precision: e.precision,
                                    step: e.stepSize,
                                    count: e.count,
                                    maxDigits: this._maxDigits(),
                                    horizontal: this.isHorizontal(),
                                    minRotation: e.minRotation || 0,
                                    includeBounds: !1 !== e.includeBounds,
                                },
                                this._range || this
                            );
                            return "ticks" === t.bounds && H(n, this, "value"), t.reverse ? (n.reverse(), (this.start = this.max), (this.end = this.min)) : ((this.start = this.min), (this.end = this.max)), n;
                        }
                        configure() {
                            const t = this.ticks;
                            let e = this.min,
                                i = this.max;
                            if ((super.configure(), this.options.offset && t.length)) {
                                const s = (i - e) / Math.max(t.length - 1, 1) / 2;
                                (e -= s), (i += s);
                            }
                            (this._startValue = e), (this._endValue = i), (this._valueRange = i - e);
                        }
                        getLabelForValue(t) {
                            return te(t, this.chart.options.locale, this.options.ticks.format);
                        }
                    }
                    class Go extends Zo {
                        static id = "linear";
                        static defaults = { ticks: { callback: ie.formatters.numeric } };
                        determineDataLimits() {
                            const { min: t, max: e } = this.getMinMax(!0);
                            (this.min = o(t) ? t : 0), (this.max = o(e) ? e : 1), this.handleTickRangeOptions();
                        }
                        computeTickLimit() {
                            const t = this.isHorizontal(),
                                e = t ? this.width : this.height,
                                i = W(this.options.ticks.minRotation),
                                s = (t ? Math.sin(i) : Math.cos(i)) || 0.001,
                                n = this._resolveTickFontOptions(0);
                            return Math.ceil(e / Math.min(40, n.lineHeight / s));
                        }
                        getPixelForValue(t) {
                            return null === t ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange);
                        }
                        getValueForPixel(t) {
                            return this._startValue + this.getDecimalForPixel(t) * this._valueRange;
                        }
                    }
                    const Ko = (t) => Math.floor(P(t)),
                        qo = (t, e) => Math.pow(10, Ko(t) + e);
                    function Xo(t) {
                        return 1 === t / Math.pow(10, Ko(t));
                    }
                    function Jo(t, e, i) {
                        const s = Math.pow(10, i),
                            n = Math.floor(t / s);
                        return Math.ceil(e / s) - n;
                    }
                    class Qo extends Bs {
                        static id = "logarithmic";
                        static defaults = { ticks: { callback: ie.formatters.logarithmic, major: { enabled: !0 } } };
                        constructor(t) {
                            super(t), (this.start = void 0), (this.end = void 0), (this._startValue = void 0), (this._valueRange = 0);
                        }
                        parse(t, e) {
                            const i = Zo.prototype.parse.apply(this, [t, e]);
                            if (0 !== i) return o(i) && i > 0 ? i : null;
                            this._zero = !0;
                        }
                        determineDataLimits() {
                            const { min: t, max: e } = this.getMinMax(!0);
                            (this.min = o(t) ? Math.max(0, t) : null),
                                (this.max = o(e) ? Math.max(0, e) : null),
                                this.options.beginAtZero && (this._zero = !0),
                                this._zero && this.min !== this._suggestedMin && !o(this._userMin) && (this.min = t === qo(this.min, 0) ? qo(this.min, -1) : qo(this.min, 0)),
                                this.handleTickRangeOptions();
                        }
                        handleTickRangeOptions() {
                            const { minDefined: t, maxDefined: e } = this.getUserBounds();
                            let i = this.min,
                                s = this.max;
                            const n = (e) => (i = t ? i : e),
                                o = (t) => (s = e ? s : t);
                            i === s && (i <= 0 ? (n(1), o(10)) : (n(qo(i, -1)), o(qo(s, 1)))), i <= 0 && n(qo(s, -1)), s <= 0 && o(qo(i, 1)), (this.min = i), (this.max = s);
                        }
                        buildTicks() {
                            const t = this.options,
                                e = (function (t, { min: e, max: i }) {
                                    e = a(t.min, e);
                                    const s = [],
                                        n = Ko(e);
                                    let o = (function (t, e) {
                                            let i = Ko(e - t);
                                            for (; Jo(t, e, i) > 10; ) i++;
                                            for (; Jo(t, e, i) < 10; ) i--;
                                            return Math.min(i, Ko(t));
                                        })(e, i),
                                        r = o < 0 ? Math.pow(10, Math.abs(o)) : 1;
                                    const l = Math.pow(10, o),
                                        c = n > o ? Math.pow(10, n) : 0,
                                        d = Math.round((e - c) * r) / r,
                                        h = Math.floor((e - c) / l / 10) * l * 10;
                                    let u = Math.floor((d - h) / Math.pow(10, o)),
                                        p = a(t.min, Math.round((c + h + u * Math.pow(10, o)) * r) / r);
                                    for (; p < i; )
                                        s.push({ value: p, major: Xo(p), significand: u }), u >= 10 ? (u = u < 15 ? 15 : 20) : u++, u >= 20 && (o++, (u = 2), (r = o >= 0 ? 1 : r)), (p = Math.round((c + h + u * Math.pow(10, o)) * r) / r);
                                    const m = a(t.max, p);
                                    return s.push({ value: m, major: Xo(m), significand: u }), s;
                                })({ min: this._userMin, max: this._userMax }, this);
                            return "ticks" === t.bounds && H(e, this, "value"), t.reverse ? (e.reverse(), (this.start = this.max), (this.end = this.min)) : ((this.start = this.min), (this.end = this.max)), e;
                        }
                        getLabelForValue(t) {
                            return void 0 === t ? "0" : te(t, this.chart.options.locale, this.options.ticks.format);
                        }
                        configure() {
                            const t = this.min;
                            super.configure(), (this._startValue = P(t)), (this._valueRange = P(this.max) - P(t));
                        }
                        getPixelForValue(t) {
                            return (void 0 !== t && 0 !== t) || (t = this.min), null === t || isNaN(t) ? NaN : this.getPixelForDecimal(t === this.min ? 0 : (P(t) - this._startValue) / this._valueRange);
                        }
                        getValueForPixel(t) {
                            const e = this.getDecimalForPixel(t);
                            return Math.pow(10, this._startValue + e * this._valueRange);
                        }
                    }
                    function ta(t) {
                        const e = t.ticks;
                        if (e.display && t.display) {
                            const t = xi(e.backdropPadding);
                            return r(e.font && e.font.size, re.font.size) + t.height;
                        }
                        return 0;
                    }
                    function ea(t, e, i, s, n) {
                        return t === s || t === n ? { start: e - i / 2, end: e + i / 2 } : t < s || t > n ? { start: e - i, end: e } : { start: e, end: e + i };
                    }
                    function ia(t, e, i, s, n) {
                        const o = Math.abs(Math.sin(i)),
                            a = Math.abs(Math.cos(i));
                        let r = 0,
                            l = 0;
                        s.start < e.l ? ((r = (e.l - s.start) / o), (t.l = Math.min(t.l, e.l - r))) : s.end > e.r && ((r = (s.end - e.r) / o), (t.r = Math.max(t.r, e.r + r))),
                            n.start < e.t ? ((l = (e.t - n.start) / a), (t.t = Math.min(t.t, e.t - l))) : n.end > e.b && ((l = (n.end - e.b) / a), (t.b = Math.max(t.b, e.b + l)));
                    }
                    function sa(t) {
                        return 0 === t || 180 === t ? "center" : t < 180 ? "left" : "right";
                    }
                    function na(t, e, i) {
                        return "right" === i ? (t -= e) : "center" === i && (t -= e / 2), t;
                    }
                    function oa(t, e, i) {
                        return 90 === i || 270 === i ? (t -= e / 2) : (i > 270 || i < 90) && (t -= e), t;
                    }
                    function aa(t, e, i, s) {
                        const { ctx: n } = t;
                        if (i) n.arc(t.xCenter, t.yCenter, e, 0, S);
                        else {
                            let i = t.getPointPosition(0, e);
                            n.moveTo(i.x, i.y);
                            for (let o = 1; o < s; o++) (i = t.getPointPosition(o, e)), n.lineTo(i.x, i.y);
                        }
                    }
                    class ra extends Zo {
                        static id = "radialLinear";
                        static defaults = {
                            display: !0,
                            animate: !0,
                            position: "chartArea",
                            angleLines: { display: !0, lineWidth: 1, borderDash: [], borderDashOffset: 0 },
                            grid: { circular: !1 },
                            startAngle: 0,
                            ticks: { showLabelBackdrop: !0, callback: ie.formatters.numeric },
                            pointLabels: { backdropColor: void 0, backdropPadding: 2, display: !0, font: { size: 10 }, callback: (t) => t, padding: 5, centerPointLabels: !1 },
                        };
                        static defaultRoutes = { "angleLines.color": "borderColor", "pointLabels.color": "color", "ticks.color": "color" };
                        static descriptors = { angleLines: { _fallback: "grid" } };
                        constructor(t) {
                            super(t), (this.xCenter = void 0), (this.yCenter = void 0), (this.drawingArea = void 0), (this._pointLabels = []), (this._pointLabelItems = []);
                        }
                        setDimensions() {
                            const t = (this._padding = xi(ta(this.options) / 2)),
                                e = (this.width = this.maxWidth - t.width),
                                i = (this.height = this.maxHeight - t.height);
                            (this.xCenter = Math.floor(this.left + e / 2 + t.left)), (this.yCenter = Math.floor(this.top + i / 2 + t.top)), (this.drawingArea = Math.floor(Math.min(e, i) / 2));
                        }
                        determineDataLimits() {
                            const { min: t, max: e } = this.getMinMax(!1);
                            (this.min = o(t) && !isNaN(t) ? t : 0), (this.max = o(e) && !isNaN(e) ? e : 0), this.handleTickRangeOptions();
                        }
                        computeTickLimit() {
                            return Math.ceil(this.drawingArea / ta(this.options));
                        }
                        generateTickLabels(t) {
                            Zo.prototype.generateTickLabels.call(this, t),
                                (this._pointLabels = this.getLabels()
                                    .map((t, e) => {
                                        const i = d(this.options.pointLabels.callback, [t, e], this);
                                        return i || 0 === i ? i : "";
                                    })
                                    .filter((t, e) => this.chart.getDataVisibility(e)));
                        }
                        fit() {
                            const t = this.options;
                            t.display && t.pointLabels.display
                                ? (function (t) {
                                      const e = { l: t.left + t._padding.left, r: t.right - t._padding.right, t: t.top + t._padding.top, b: t.bottom - t._padding.bottom },
                                          i = Object.assign({}, e),
                                          n = [],
                                          o = [],
                                          a = t._pointLabels.length,
                                          r = t.options.pointLabels,
                                          l = r.centerPointLabels ? j / a : 0;
                                      for (let u = 0; u < a; u++) {
                                          const a = r.setContext(t.getPointLabelContext(u));
                                          o[u] = a.padding;
                                          const p = t.getPointPosition(u, t.drawingArea + o[u], l),
                                              m = vi(a.font),
                                              f = ((c = t.ctx), (d = m), (h = s((h = t._pointLabels[u])) ? h : [h]), { w: we(c, d.string, h), h: h.length * d.lineHeight });
                                          n[u] = f;
                                          const g = K(t.getIndexAngle(u) + l),
                                              b = Math.round(Y(g));
                                          ia(i, e, g, ea(b, p.x, f.w, 0, 180), ea(b, p.y, f.h, 90, 270));
                                      }
                                      var c, d, h;
                                      t.setCenterPoint(e.l - i.l, i.r - e.r, e.t - i.t, i.b - e.b),
                                          (t._pointLabelItems = (function (t, e, i) {
                                              const s = [],
                                                  n = t._pointLabels.length,
                                                  o = t.options,
                                                  a = ta(o) / 2,
                                                  r = t.drawingArea,
                                                  l = o.pointLabels.centerPointLabels ? j / n : 0;
                                              for (let o = 0; o < n; o++) {
                                                  const n = t.getPointPosition(o, r + a + i[o], l),
                                                      c = Math.round(Y(K(n.angle + T))),
                                                      d = e[o],
                                                      h = oa(n.y, d.h, c),
                                                      u = sa(c),
                                                      p = na(n.x, d.w, u);
                                                  s.push({ x: n.x, y: h, textAlign: u, left: p, top: h, right: p + d.w, bottom: h + d.h });
                                              }
                                              return s;
                                          })(t, n, o));
                                  })(this)
                                : this.setCenterPoint(0, 0, 0, 0);
                        }
                        setCenterPoint(t, e, i, s) {
                            (this.xCenter += Math.floor((t - e) / 2)), (this.yCenter += Math.floor((i - s) / 2)), (this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(t, e, i, s)));
                        }
                        getIndexAngle(t) {
                            return K(t * (S / (this._pointLabels.length || 1)) + W(this.options.startAngle || 0));
                        }
                        getDistanceFromCenterForValue(t) {
                            if (i(t)) return NaN;
                            const e = this.drawingArea / (this.max - this.min);
                            return this.options.reverse ? (this.max - t) * e : (t - this.min) * e;
                        }
                        getValueForDistanceFromCenter(t) {
                            if (i(t)) return NaN;
                            const e = t / (this.drawingArea / (this.max - this.min));
                            return this.options.reverse ? this.max - e : this.min + e;
                        }
                        getPointLabelContext(t) {
                            const e = this._pointLabels || [];
                            if (t >= 0 && t < e.length) {
                                const i = e[t];
                                return (function (t, e, i) {
                                    return Ci(t, { label: i, index: e, type: "pointLabel" });
                                })(this.getContext(), t, i);
                            }
                        }
                        getPointPosition(t, e, i = 0) {
                            const s = this.getIndexAngle(t) - T + i;
                            return { x: Math.cos(s) * e + this.xCenter, y: Math.sin(s) * e + this.yCenter, angle: s };
                        }
                        getPointPositionForValue(t, e) {
                            return this.getPointPosition(t, this.getDistanceFromCenterForValue(e));
                        }
                        getBasePosition(t) {
                            return this.getPointPositionForValue(t || 0, this.getBaseValue());
                        }
                        getPointLabelPosition(t) {
                            const { left: e, top: i, right: s, bottom: n } = this._pointLabelItems[t];
                            return { left: e, top: i, right: s, bottom: n };
                        }
                        drawBackground() {
                            const {
                                backgroundColor: t,
                                grid: { circular: e },
                            } = this.options;
                            if (t) {
                                const i = this.ctx;
                                i.save(), i.beginPath(), aa(this, this.getDistanceFromCenterForValue(this._endValue), e, this._pointLabels.length), i.closePath(), (i.fillStyle = t), i.fill(), i.restore();
                            }
                        }
                        drawGrid() {
                            const t = this.ctx,
                                e = this.options,
                                { angleLines: s, grid: n, border: o } = e,
                                a = this._pointLabels.length;
                            let r, l, c;
                            if (
                                (e.pointLabels.display &&
                                    (function (t, e) {
                                        const {
                                            ctx: s,
                                            options: { pointLabels: n },
                                        } = t;
                                        for (let o = e - 1; o >= 0; o--) {
                                            const e = n.setContext(t.getPointLabelContext(o)),
                                                a = vi(e.font),
                                                { x: r, y: l, textAlign: c, left: d, top: h, right: u, bottom: p } = t._pointLabelItems[o],
                                                { backdropColor: m } = e;
                                            if (!i(m)) {
                                                const t = bi(e.borderRadius),
                                                    i = xi(e.backdropPadding);
                                                s.fillStyle = m;
                                                const n = d - i.left,
                                                    o = h - i.top,
                                                    a = u - d + i.width,
                                                    r = p - h + i.height;
                                                Object.values(t).some((t) => 0 !== t) ? (s.beginPath(), Ie(s, { x: n, y: o, w: a, h: r, radius: t }), s.fill()) : s.fillRect(n, o, a, r);
                                            }
                                            Ee(s, t._pointLabels[o], r, l + a.lineHeight / 2, a, { color: e.color, textAlign: c, textBaseline: "middle" });
                                        }
                                    })(this, a),
                                n.display &&
                                    this.ticks.forEach((t, e) => {
                                        if (0 !== e) {
                                            l = this.getDistanceFromCenterForValue(t.value);
                                            const i = this.getContext(e),
                                                s = n.setContext(i),
                                                r = o.setContext(i);
                                            !(function (t, e, i, s, n) {
                                                const o = t.ctx,
                                                    a = e.circular,
                                                    { color: r, lineWidth: l } = e;
                                                (!a && !s) ||
                                                    !r ||
                                                    !l ||
                                                    i < 0 ||
                                                    (o.save(), (o.strokeStyle = r), (o.lineWidth = l), o.setLineDash(n.dash), (o.lineDashOffset = n.dashOffset), o.beginPath(), aa(t, i, a, s), o.closePath(), o.stroke(), o.restore());
                                            })(this, s, l, a, r);
                                        }
                                    }),
                                s.display)
                            ) {
                                for (t.save(), r = a - 1; r >= 0; r--) {
                                    const i = s.setContext(this.getPointLabelContext(r)),
                                        { color: n, lineWidth: o } = i;
                                    o &&
                                        n &&
                                        ((t.lineWidth = o),
                                        (t.strokeStyle = n),
                                        t.setLineDash(i.borderDash),
                                        (t.lineDashOffset = i.borderDashOffset),
                                        (l = this.getDistanceFromCenterForValue(e.ticks.reverse ? this.min : this.max)),
                                        (c = this.getPointPosition(r, l)),
                                        t.beginPath(),
                                        t.moveTo(this.xCenter, this.yCenter),
                                        t.lineTo(c.x, c.y),
                                        t.stroke());
                                }
                                t.restore();
                            }
                        }
                        drawBorder() {}
                        drawLabels() {
                            const t = this.ctx,
                                e = this.options,
                                i = e.ticks;
                            if (!i.display) return;
                            const s = this.getIndexAngle(0);
                            let n, o;
                            t.save(),
                                t.translate(this.xCenter, this.yCenter),
                                t.rotate(s),
                                (t.textAlign = "center"),
                                (t.textBaseline = "middle"),
                                this.ticks.forEach((s, a) => {
                                    if (0 === a && !e.reverse) return;
                                    const r = i.setContext(this.getContext(a)),
                                        l = vi(r.font);
                                    if (((n = this.getDistanceFromCenterForValue(this.ticks[a].value)), r.showLabelBackdrop)) {
                                        (t.font = l.string), (o = t.measureText(s.label).width), (t.fillStyle = r.backdropColor);
                                        const e = xi(r.backdropPadding);
                                        t.fillRect(-o / 2 - e.left, -n - l.size / 2 - e.top, o + e.width, l.size + e.height);
                                    }
                                    Ee(t, s.label, 0, -n, l, { color: r.color });
                                }),
                                t.restore();
                        }
                        drawTitle() {}
                    }
                    const la = {
                            millisecond: { common: !0, size: 1, steps: 1e3 },
                            second: { common: !0, size: 1e3, steps: 60 },
                            minute: { common: !0, size: 6e4, steps: 60 },
                            hour: { common: !0, size: 36e5, steps: 24 },
                            day: { common: !0, size: 864e5, steps: 30 },
                            week: { common: !1, size: 6048e5, steps: 4 },
                            month: { common: !0, size: 2628e6, steps: 12 },
                            quarter: { common: !1, size: 7884e6, steps: 4 },
                            year: { common: !0, size: 3154e7 },
                        },
                        ca = Object.keys(la);
                    function da(t, e) {
                        return t - e;
                    }
                    function ha(t, e) {
                        if (i(e)) return null;
                        const s = t._adapter,
                            { parser: n, round: a, isoWeekday: r } = t._parseOpts;
                        let l = e;
                        return (
                            "function" == typeof n && (l = n(l)),
                            o(l) || (l = "string" == typeof n ? s.parse(l, n) : s.parse(l)),
                            null === l ? null : (a && (l = "week" !== a || (!F(r) && !0 !== r) ? s.startOf(l, a) : s.startOf(l, "isoWeek", r)), +l)
                        );
                    }
                    function ua(t, e, i, s) {
                        const n = ca.length;
                        for (let o = ca.indexOf(t); o < n - 1; ++o) {
                            const t = la[ca[o]],
                                n = t.steps ? t.steps : Number.MAX_SAFE_INTEGER;
                            if (t.common && Math.ceil((i - e) / (n * t.size)) <= s) return ca[o];
                        }
                        return ca[n - 1];
                    }
                    function pa(t, e, i) {
                        if (i) {
                            if (i.length) {
                                const { lo: s, hi: n } = tt(i, e);
                                t[i[s] >= e ? i[s] : i[n]] = !0;
                            }
                        } else t[e] = !0;
                    }
                    function ma(t, e, i) {
                        const s = [],
                            n = {},
                            o = e.length;
                        let a, r;
                        for (a = 0; a < o; ++a) (r = e[a]), (n[r] = a), s.push({ value: r, major: !1 });
                        return 0 !== o && i
                            ? (function (t, e, i, s) {
                                  const n = t._adapter,
                                      o = +n.startOf(e[0].value, s),
                                      a = e[e.length - 1].value;
                                  let r, l;
                                  for (r = o; r <= a; r = +n.add(r, 1, s)) (l = i[r]), l >= 0 && (e[l].major = !0);
                                  return e;
                              })(t, s, n, i)
                            : s;
                    }
                    class fa extends Bs {
                        static id = "time";
                        static defaults = {
                            bounds: "data",
                            adapters: {},
                            time: { parser: !1, unit: !1, round: !1, isoWeekday: !1, minUnit: "millisecond", displayFormats: {} },
                            ticks: { source: "auto", callback: !1, major: { enabled: !1 } },
                        };
                        constructor(t) {
                            super(t), (this._cache = { data: [], labels: [], all: [] }), (this._unit = "day"), (this._majorUnit = void 0), (this._offsets = {}), (this._normalized = !1), (this._parseOpts = void 0);
                        }
                        init(t, e = {}) {
                            const i = t.time || (t.time = {}),
                                s = (this._adapter = new xn._date(t.adapters.date));
                            s.init(e), b(i.displayFormats, s.formats()), (this._parseOpts = { parser: i.parser, round: i.round, isoWeekday: i.isoWeekday }), super.init(t), (this._normalized = e.normalized);
                        }
                        parse(t, e) {
                            return void 0 === t ? null : ha(this, t);
                        }
                        beforeLayout() {
                            super.beforeLayout(), (this._cache = { data: [], labels: [], all: [] });
                        }
                        determineDataLimits() {
                            const t = this.options,
                                e = this._adapter,
                                i = t.time.unit || "day";
                            let { min: s, max: n, minDefined: a, maxDefined: r } = this.getUserBounds();
                            function l(t) {
                                a || isNaN(t.min) || (s = Math.min(s, t.min)), r || isNaN(t.max) || (n = Math.max(n, t.max));
                            }
                            (a && r) || (l(this._getLabelBounds()), ("ticks" === t.bounds && "labels" === t.ticks.source) || l(this.getMinMax(!1))),
                                (s = o(s) && !isNaN(s) ? s : +e.startOf(Date.now(), i)),
                                (n = o(n) && !isNaN(n) ? n : +e.endOf(Date.now(), i) + 1),
                                (this.min = Math.min(s, n - 1)),
                                (this.max = Math.max(s + 1, n));
                        }
                        _getLabelBounds() {
                            const t = this.getLabelTimestamps();
                            let e = Number.POSITIVE_INFINITY,
                                i = Number.NEGATIVE_INFINITY;
                            return t.length && ((e = t[0]), (i = t[t.length - 1])), { min: e, max: i };
                        }
                        buildTicks() {
                            const t = this.options,
                                e = t.time,
                                i = t.ticks,
                                s = "labels" === i.source ? this.getLabelTimestamps() : this._generate();
                            "ticks" === t.bounds && s.length && ((this.min = this._userMin || s[0]), (this.max = this._userMax || s[s.length - 1]));
                            const n = this.min,
                                o = st(s, n, this.max);
                            return (
                                (this._unit =
                                    e.unit ||
                                    (i.autoSkip
                                        ? ua(e.minUnit, this.min, this.max, this._getLabelCapacity(n))
                                        : (function (t, e, i, s, n) {
                                              for (let o = ca.length - 1; o >= ca.indexOf(i); o--) {
                                                  const i = ca[o];
                                                  if (la[i].common && t._adapter.diff(n, s, i) >= e - 1) return i;
                                              }
                                              return ca[i ? ca.indexOf(i) : 0];
                                          })(this, o.length, e.minUnit, this.min, this.max))),
                                (this._majorUnit =
                                    i.major.enabled && "year" !== this._unit
                                        ? (function (t) {
                                              for (let e = ca.indexOf(t) + 1, i = ca.length; e < i; ++e) if (la[ca[e]].common) return ca[e];
                                          })(this._unit)
                                        : void 0),
                                this.initOffsets(s),
                                t.reverse && o.reverse(),
                                ma(this, o, this._majorUnit)
                            );
                        }
                        afterAutoSkip() {
                            this.options.offsetAfterAutoskip && this.initOffsets(this.ticks.map((t) => +t.value));
                        }
                        initOffsets(t = []) {
                            let e,
                                i,
                                s = 0,
                                n = 0;
                            this.options.offset &&
                                t.length &&
                                ((e = this.getDecimalForValue(t[0])),
                                (s = 1 === t.length ? 1 - e : (this.getDecimalForValue(t[1]) - e) / 2),
                                (i = this.getDecimalForValue(t[t.length - 1])),
                                (n = 1 === t.length ? i : (i - this.getDecimalForValue(t[t.length - 2])) / 2));
                            const o = t.length < 3 ? 0.5 : 0.25;
                            (s = X(s, 0, o)), (n = X(n, 0, o)), (this._offsets = { start: s, end: n, factor: 1 / (s + 1 + n) });
                        }
                        _generate() {
                            const t = this._adapter,
                                e = this.min,
                                i = this.max,
                                s = this.options,
                                n = s.time,
                                o = n.unit || ua(n.minUnit, e, i, this._getLabelCapacity(e)),
                                a = r(s.ticks.stepSize, 1),
                                l = "week" === o && n.isoWeekday,
                                c = F(l) || !0 === l,
                                d = {};
                            let h,
                                u,
                                p = e;
                            if ((c && (p = +t.startOf(p, "isoWeek", l)), (p = +t.startOf(p, c ? "day" : o)), t.diff(i, e, o) > 1e5 * a)) throw new Error(e + " and " + i + " are too far apart with stepSize of " + a + " " + o);
                            const m = "data" === s.ticks.source && this.getDataTimestamps();
                            for (h = p, u = 0; h < i; h = +t.add(h, a, o), u++) pa(d, h, m);
                            return (
                                (h !== i && "ticks" !== s.bounds && 1 !== u) || pa(d, h, m),
                                Object.keys(d)
                                    .sort((t, e) => t - e)
                                    .map((t) => +t)
                            );
                        }
                        getLabelForValue(t) {
                            const e = this._adapter,
                                i = this.options.time;
                            return i.tooltipFormat ? e.format(t, i.tooltipFormat) : e.format(t, i.displayFormats.datetime);
                        }
                        _tickFormatFunction(t, e, i, s) {
                            const n = this.options,
                                o = n.ticks.callback;
                            if (o) return d(o, [t, e, i], this);
                            const a = n.time.displayFormats,
                                r = this._unit,
                                l = this._majorUnit,
                                c = r && a[r],
                                h = l && a[l],
                                u = i[e],
                                p = l && h && u && u.major;
                            return this._adapter.format(t, s || (p ? h : c));
                        }
                        generateTickLabels(t) {
                            let e, i, s;
                            for (e = 0, i = t.length; e < i; ++e) (s = t[e]), (s.label = this._tickFormatFunction(s.value, e, t));
                        }
                        getDecimalForValue(t) {
                            return null === t ? NaN : (t - this.min) / (this.max - this.min);
                        }
                        getPixelForValue(t) {
                            const e = this._offsets,
                                i = this.getDecimalForValue(t);
                            return this.getPixelForDecimal((e.start + i) * e.factor);
                        }
                        getValueForPixel(t) {
                            const e = this._offsets,
                                i = this.getDecimalForPixel(t) / e.factor - e.end;
                            return this.min + i * (this.max - this.min);
                        }
                        _getLabelSize(t) {
                            const e = this.options.ticks,
                                i = this.ctx.measureText(t).width,
                                s = W(this.isHorizontal() ? e.maxRotation : e.minRotation),
                                n = Math.cos(s),
                                o = Math.sin(s),
                                a = this._resolveTickFontOptions(0).size;
                            return { w: i * n + a * o, h: i * o + a * n };
                        }
                        _getLabelCapacity(t) {
                            const e = this.options.time,
                                i = e.displayFormats,
                                s = i[e.unit] || i.millisecond,
                                n = this._tickFormatFunction(t, 0, ma(this, [t], this._majorUnit), s),
                                o = this._getLabelSize(n),
                                a = Math.floor(this.isHorizontal() ? this.width / o.w : this.height / o.h) - 1;
                            return a > 0 ? a : 1;
                        }
                        getDataTimestamps() {
                            let t,
                                e,
                                i = this._cache.data || [];
                            if (i.length) return i;
                            const s = this.getMatchingVisibleMetas();
                            if (this._normalized && s.length) return (this._cache.data = s[0].controller.getAllParsedValues(this));
                            for (t = 0, e = s.length; t < e; ++t) i = i.concat(s[t].controller.getAllParsedValues(this));
                            return (this._cache.data = this.normalize(i));
                        }
                        getLabelTimestamps() {
                            const t = this._cache.labels || [];
                            let e, i;
                            if (t.length) return t;
                            const s = this.getLabels();
                            for (e = 0, i = s.length; e < i; ++e) t.push(ha(this, s[e]));
                            return (this._cache.labels = this._normalized ? t : this.normalize(t));
                        }
                        normalize(t) {
                            return rt(t.sort(da));
                        }
                    }
                    function ga(t, e, i) {
                        let s,
                            n,
                            o,
                            a,
                            r = 0,
                            l = t.length - 1;
                        i
                            ? (e >= t[r].pos && e <= t[l].pos && ({ lo: r, hi: l } = et(t, "pos", e)), ({ pos: s, time: o } = t[r]), ({ pos: n, time: a } = t[l]))
                            : (e >= t[r].time && e <= t[l].time && ({ lo: r, hi: l } = et(t, "time", e)), ({ time: s, pos: o } = t[r]), ({ time: n, pos: a } = t[l]));
                        const c = n - s;
                        return c ? o + ((a - o) * (e - s)) / c : o;
                    }
                    var ba = Object.freeze({
                        __proto__: null,
                        CategoryScale: class extends Bs {
                            static id = "category";
                            static defaults = { ticks: { callback: $o } };
                            constructor(t) {
                                super(t), (this._startValue = void 0), (this._valueRange = 0), (this._addedLabels = []);
                            }
                            init(t) {
                                const e = this._addedLabels;
                                if (e.length) {
                                    const t = this.getLabels();
                                    for (const { index: i, label: s } of e) t[i] === s && t.splice(i, 1);
                                    this._addedLabels = [];
                                }
                                super.init(t);
                            }
                            parse(t, e) {
                                if (i(t)) return null;
                                const s = this.getLabels();
                                return ((t, e) => (null === t ? null : X(Math.round(t), 0, e)))(
                                    (e =
                                        isFinite(e) && s[e] === t
                                            ? e
                                            : (function (t, e, i, s) {
                                                  const n = t.indexOf(e);
                                                  return -1 === n
                                                      ? ((t, e, i, s) => ("string" == typeof e ? ((i = t.push(e) - 1), s.unshift({ index: i, label: e })) : isNaN(e) && (i = null), i))(t, e, i, s)
                                                      : n !== t.lastIndexOf(e)
                                                      ? i
                                                      : n;
                                              })(s, t, r(e, t), this._addedLabels)),
                                    s.length - 1
                                );
                            }
                            determineDataLimits() {
                                const { minDefined: t, maxDefined: e } = this.getUserBounds();
                                let { min: i, max: s } = this.getMinMax(!0);
                                "ticks" === this.options.bounds && (t || (i = 0), e || (s = this.getLabels().length - 1)), (this.min = i), (this.max = s);
                            }
                            buildTicks() {
                                const t = this.min,
                                    e = this.max,
                                    i = this.options.offset,
                                    s = [];
                                let n = this.getLabels();
                                (n = 0 === t && e === n.length - 1 ? n : n.slice(t, e + 1)), (this._valueRange = Math.max(n.length - (i ? 0 : 1), 1)), (this._startValue = this.min - (i ? 0.5 : 0));
                                for (let i = t; i <= e; i++) s.push({ value: i });
                                return s;
                            }
                            getLabelForValue(t) {
                                return $o.call(this, t);
                            }
                            configure() {
                                super.configure(), this.isHorizontal() || (this._reversePixels = !this._reversePixels);
                            }
                            getPixelForValue(t) {
                                return "number" != typeof t && (t = this.parse(t)), null === t ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange);
                            }
                            getPixelForTick(t) {
                                const e = this.ticks;
                                return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value);
                            }
                            getValueForPixel(t) {
                                return Math.round(this._startValue + this.getDecimalForPixel(t) * this._valueRange);
                            }
                            getBasePixel() {
                                return this.bottom;
                            }
                        },
                        LinearScale: Go,
                        LogarithmicScale: Qo,
                        RadialLinearScale: ra,
                        TimeScale: fa,
                        TimeSeriesScale: class extends fa {
                            static id = "timeseries";
                            static defaults = fa.defaults;
                            constructor(t) {
                                super(t), (this._table = []), (this._minPos = void 0), (this._tableRange = void 0);
                            }
                            initOffsets() {
                                const t = this._getTimestampsForTable(),
                                    e = (this._table = this.buildLookupTable(t));
                                (this._minPos = ga(e, this.min)), (this._tableRange = ga(e, this.max) - this._minPos), super.initOffsets(t);
                            }
                            buildLookupTable(t) {
                                const { min: e, max: i } = this,
                                    s = [],
                                    n = [];
                                let o, a, r, l, c;
                                for (o = 0, a = t.length; o < a; ++o) (l = t[o]), l >= e && l <= i && s.push(l);
                                if (s.length < 2)
                                    return [
                                        { time: e, pos: 0 },
                                        { time: i, pos: 1 },
                                    ];
                                for (o = 0, a = s.length; o < a; ++o) (c = s[o + 1]), (r = s[o - 1]), (l = s[o]), Math.round((c + r) / 2) !== l && n.push({ time: l, pos: o / (a - 1) });
                                return n;
                            }
                            _getTimestampsForTable() {
                                let t = this._cache.all || [];
                                if (t.length) return t;
                                const e = this.getDataTimestamps(),
                                    i = this.getLabelTimestamps();
                                return (t = e.length && i.length ? this.normalize(e.concat(i)) : e.length ? e : i), (t = this._cache.all = t), t;
                            }
                            getDecimalForValue(t) {
                                return (ga(this._table, t) - this._minPos) / this._tableRange;
                            }
                            getValueForPixel(t) {
                                const e = this._offsets,
                                    i = this.getDecimalForPixel(t) / e.factor - e.end;
                                return ga(this._table, i * this._tableRange + this._minPos, !0);
                            }
                        },
                    });
                    return (
                        fn.register(An, ba, Zn, Yo),
                        (fn.helpers = { ...Ei }),
                        (fn._adapters = xn),
                        (fn.Animation = xs),
                        (fn.Animations = vs),
                        (fn.animator = gt),
                        (fn.controllers = Ws.controllers.items),
                        (fn.DatasetController = Ds),
                        (fn.Element = Ts),
                        (fn.elements = Zn),
                        (fn.Interaction = Vi),
                        (fn.layouts = Xi),
                        (fn.platforms = fs),
                        (fn.Scale = Bs),
                        (fn.Ticks = ie),
                        Object.assign(fn, An, ba, Zn, Yo, fs),
                        (fn.Chart = fn),
                        "undefined" != typeof window && (window.Chart = fn),
                        fn
                    );
                })();
            },
            8539: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => l });
                var s = i(8168),
                    n = i(1609),
                    o = i(3899),
                    a = i(2836),
                    r = i(405),
                    l =
                        (i(5795),
                        i(7003),
                        (0, n.forwardRef)(function (t, e) {
                            var i = (0, r.u)(t),
                                l = (0, a.u)(i);
                            return n.createElement(o.S, (0, s.A)({ ref: e }, l));
                        }));
            },
            8587: (t, e, i) => {
                "use strict";
                function s(t, e) {
                    if (null == t) return {};
                    var i = {};
                    for (var s in t)
                        if ({}.hasOwnProperty.call(t, s)) {
                            if (e.includes(s)) continue;
                            i[s] = t[s];
                        }
                    return i;
                }
                i.d(e, { A: () => s });
            },
            9379: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => o });
                var s = i(4467);
                function n(t, e) {
                    var i = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var s = Object.getOwnPropertySymbols(t);
                        e &&
                            (s = s.filter(function (e) {
                                return Object.getOwnPropertyDescriptor(t, e).enumerable;
                            })),
                            i.push.apply(i, s);
                    }
                    return i;
                }
                function o(t) {
                    for (var e = 1; e < arguments.length; e++) {
                        var i = null != arguments[e] ? arguments[e] : {};
                        e % 2
                            ? n(Object(i), !0).forEach(function (e) {
                                  (0, s.A)(t, e, i[e]);
                              })
                            : Object.getOwnPropertyDescriptors
                            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i))
                            : n(Object(i)).forEach(function (e) {
                                  Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e));
                              });
                    }
                    return t;
                }
            },
            9394: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => r });
                var s = i(4243),
                    n = i(3893),
                    o = i(7800),
                    a = i(519);
                function r(t) {
                    return (0, s.A)(t) || (0, n.A)(t) || (0, o.A)(t) || (0, a.A)();
                }
            },
            9417: (t, e, i) => {
                "use strict";
                function s(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }
                i.d(e, { A: () => s });
            },
            9426: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => a });
                var s = i(3954),
                    n = i(2176),
                    o = i(6822);
                function a(t) {
                    var e = (0, n.A)();
                    return function () {
                        var i,
                            n = (0, s.A)(t);
                        if (e) {
                            var a = (0, s.A)(this).constructor;
                            i = Reflect.construct(n, arguments, a);
                        } else i = n.apply(this, arguments);
                        return (0, o.A)(this, i);
                    };
                }
            },
            9458: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => s });
                const s = (t) => new DOMParser().parseFromString(t, "text/html").documentElement.textContent;
            },
            9503: (t, e, i) => {
                "use strict";
                i.d(e, { MY: () => o, r1: () => n });
                var s = i(9735);
                function n(t) {
                    var e = (0, s.FK)(t);
                    return function (i, s, n, o) {
                        for (var a = "", r = 0; r < e; r++) a += t[r](i, s, n, o) || "";
                        return a;
                    };
                }
                function o(t) {
                    return function (e) {
                        e.root || ((e = e.return) && t(e));
                    };
                }
            },
            9735: (t, e, i) => {
                "use strict";
                i.d(e, { BC: () => f, Bq: () => r, FK: () => m, HC: () => c, HT: () => n, K5: () => d, YW: () => l, b2: () => p, c1: () => u, kg: () => g, kp: () => o, tW: () => a, tn: () => s, wN: () => h });
                var s = Math.abs,
                    n = String.fromCharCode,
                    o = Object.assign;
                function a(t, e) {
                    return 45 ^ h(t, 0) ? (((((((e << 2) ^ h(t, 0)) << 2) ^ h(t, 1)) << 2) ^ h(t, 2)) << 2) ^ h(t, 3) : 0;
                }
                function r(t) {
                    return t.trim();
                }
                function l(t, e) {
                    return (t = e.exec(t)) ? t[0] : t;
                }
                function c(t, e, i) {
                    return t.replace(e, i);
                }
                function d(t, e) {
                    return t.indexOf(e);
                }
                function h(t, e) {
                    return 0 | t.charCodeAt(e);
                }
                function u(t, e, i) {
                    return t.slice(e, i);
                }
                function p(t) {
                    return t.length;
                }
                function m(t) {
                    return t.length;
                }
                function f(t, e) {
                    return e.push(t), t;
                }
                function g(t, e) {
                    return t.map(e).join("");
                }
            },
            9800: (t, e, i) => {
                "use strict";
                i.d(e, {
                    A: () => A,
                    B: () => N,
                    C: () => I,
                    D: () => P,
                    E: () => x,
                    F: () => Lt,
                    G: () => w,
                    H: () => v,
                    I: () => j,
                    J: () => g,
                    K: () => O,
                    L: () => C,
                    M: () => $,
                    a: () => lt,
                    b: () => X,
                    d: () => pt,
                    e: () => rt,
                    f: () => gt,
                    g: () => ft,
                    h: () => ct,
                    i: () => Q,
                    j: () => xt,
                    k: () => K,
                    l: () => ht,
                    m: () => W,
                    n: () => U,
                    o: () => q,
                    p: () => Ct,
                    q: () => wt,
                    r: () => R,
                    s: () => E,
                    t: () => zt,
                    u: () => G,
                    v: () => Mt,
                    w: () => jt,
                    x: () => St,
                    y: () => J,
                    z: () => S,
                });
                var s = i(9379),
                    n = i(8168),
                    o = i(7437),
                    a = i(3453),
                    r = i(45),
                    l = i(2284),
                    c = i(7528),
                    d = i(4467),
                    h = i(1609),
                    u = i(5795),
                    p = i(8491),
                    m = i(7003),
                    f = ["className", "clearValue", "cx", "getStyles", "getClassNames", "getValue", "hasValue", "isMulti", "isRtl", "options", "selectOption", "selectProps", "setValue", "theme"],
                    g = function () {};
                function b(t, e) {
                    return e ? ("-" === e[0] ? t + e : t + "__" + e) : t;
                }
                function x(t, e) {
                    for (var i = arguments.length, s = new Array(i > 2 ? i - 2 : 0), n = 2; n < i; n++) s[n - 2] = arguments[n];
                    var o = [].concat(s);
                    if (e && t) for (var a in e) e.hasOwnProperty(a) && e[a] && o.push("".concat(b(t, a)));
                    return o
                        .filter(function (t) {
                            return t;
                        })
                        .map(function (t) {
                            return String(t).trim();
                        })
                        .join(" ");
                }
                var v = function (t) {
                        return (e = t), Array.isArray(e) ? t.filter(Boolean) : "object" === (0, l.A)(t) && null !== t ? [t] : [];
                        var e;
                    },
                    y = function (t) {
                        t.className, t.clearValue, t.cx, t.getStyles, t.getClassNames, t.getValue, t.hasValue, t.isMulti, t.isRtl, t.options, t.selectOption, t.selectProps, t.setValue, t.theme;
                        var e = (0, r.A)(t, f);
                        return (0, s.A)({}, e);
                    },
                    _ = function (t, e, i) {
                        var s = t.cx,
                            n = t.getStyles,
                            o = t.getClassNames,
                            a = t.className;
                        return { css: n(e, t), className: s(null != i ? i : {}, o(e, t), a) };
                    };
                function C(t, e, i) {
                    if (i) {
                        var s = i(t, e);
                        if ("string" == typeof s) return s;
                    }
                    return t;
                }
                function w(t) {
                    return [document.documentElement, document.body, window].indexOf(t) > -1;
                }
                function z(t) {
                    return w(t) ? window.pageYOffset : t.scrollTop;
                }
                function k(t, e) {
                    w(t) ? window.scrollTo(0, e) : (t.scrollTop = e);
                }
                function M(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 200,
                        s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : g,
                        n = z(t),
                        o = e - n,
                        a = 0;
                    !(function e() {
                        var r,
                            l = o * ((r = (r = a += 10) / i - 1) * r * r + 1) + n;
                        k(t, l), a < i ? window.requestAnimationFrame(e) : s(t);
                    })();
                }
                function j(t, e) {
                    var i = t.getBoundingClientRect(),
                        s = e.getBoundingClientRect(),
                        n = e.offsetHeight / 3;
                    s.bottom + n > i.bottom ? k(t, Math.min(e.offsetTop + e.clientHeight - t.offsetHeight + n, t.scrollHeight)) : s.top - n < i.top && k(t, Math.max(e.offsetTop - n, 0));
                }
                function S() {
                    try {
                        return document.createEvent("TouchEvent"), !0;
                    } catch (t) {
                        return !1;
                    }
                }
                function A() {
                    try {
                        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                    } catch (t) {
                        return !1;
                    }
                }
                var L = !1,
                    D = {
                        get passive() {
                            return (L = !0);
                        },
                    },
                    T = "undefined" != typeof window ? window : {};
                T.addEventListener && T.removeEventListener && (T.addEventListener("p", g, D), T.removeEventListener("p", g, !1));
                var E = L;
                function O(t) {
                    return null != t;
                }
                function P(t, e, i) {
                    return t ? e : i;
                }
                function I(t) {
                    return t;
                }
                function N(t) {
                    return t;
                }
                var R = function (t) {
                        for (var e = arguments.length, i = new Array(e > 1 ? e - 1 : 0), s = 1; s < e; s++) i[s - 1] = arguments[s];
                        return Object.entries(t)
                            .filter(function (t) {
                                var e = (0, a.A)(t, 1)[0];
                                return !i.includes(e);
                            })
                            .reduce(function (t, e) {
                                var i = (0, a.A)(e, 2),
                                    s = i[0],
                                    n = i[1];
                                return (t[s] = n), t;
                            }, {});
                    },
                    V = ["children", "innerProps"],
                    F = ["children", "innerProps"];
                var B,
                    H = function (t) {
                        return "auto" === t ? "bottom" : t;
                    },
                    W = function (t, e) {
                        var i,
                            n = t.placement,
                            o = t.theme,
                            a = o.borderRadius,
                            r = o.spacing,
                            l = o.colors;
                        return (0, s.A)(
                            ((i = { label: "menu" }),
                            (0, d.A)(
                                i,
                                (function (t) {
                                    return t ? { bottom: "top", top: "bottom" }[t] : "bottom";
                                })(n),
                                "100%"
                            ),
                            (0, d.A)(i, "position", "absolute"),
                            (0, d.A)(i, "width", "100%"),
                            (0, d.A)(i, "zIndex", 1),
                            i),
                            e ? {} : { backgroundColor: l.neutral0, borderRadius: a, boxShadow: "0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)", marginBottom: r.menuGutter, marginTop: r.menuGutter }
                        );
                    },
                    Y = (0, h.createContext)(null),
                    $ = function (t) {
                        var e = t.children,
                            i = t.minMenuHeight,
                            n = t.maxMenuHeight,
                            o = t.menuPlacement,
                            r = t.menuPosition,
                            l = t.menuShouldScrollIntoView,
                            c = t.theme,
                            d = ((0, h.useContext)(Y) || {}).setPortalPlacement,
                            u = (0, h.useRef)(null),
                            p = (0, h.useState)(n),
                            f = (0, a.A)(p, 2),
                            g = f[0],
                            b = f[1],
                            x = (0, h.useState)(null),
                            v = (0, a.A)(x, 2),
                            y = v[0],
                            _ = v[1],
                            C = c.spacing.controlHeight;
                        return (
                            (0, m.A)(
                                function () {
                                    var t = u.current;
                                    if (t) {
                                        var e = "fixed" === r,
                                            s = (function (t) {
                                                var e = t.maxHeight,
                                                    i = t.menuEl,
                                                    s = t.minHeight,
                                                    n = t.placement,
                                                    o = t.shouldScroll,
                                                    a = t.isFixedPosition,
                                                    r = t.controlHeight,
                                                    l = (function (t) {
                                                        var e = getComputedStyle(t),
                                                            i = "absolute" === e.position,
                                                            s = /(auto|scroll)/;
                                                        if ("fixed" === e.position) return document.documentElement;
                                                        for (var n = t; (n = n.parentElement); ) if (((e = getComputedStyle(n)), (!i || "static" !== e.position) && s.test(e.overflow + e.overflowY + e.overflowX))) return n;
                                                        return document.documentElement;
                                                    })(i),
                                                    c = { placement: "bottom", maxHeight: e };
                                                if (!i || !i.offsetParent) return c;
                                                var d,
                                                    h = l.getBoundingClientRect().height,
                                                    u = i.getBoundingClientRect(),
                                                    p = u.bottom,
                                                    m = u.height,
                                                    f = u.top,
                                                    g = i.offsetParent.getBoundingClientRect().top,
                                                    b = a || w((d = l)) ? window.innerHeight : d.clientHeight,
                                                    x = z(l),
                                                    v = parseInt(getComputedStyle(i).marginBottom, 10),
                                                    y = parseInt(getComputedStyle(i).marginTop, 10),
                                                    _ = g - y,
                                                    C = b - f,
                                                    j = _ + x,
                                                    S = h - x - f,
                                                    A = p - b + x + v,
                                                    L = x + f - y,
                                                    D = 160;
                                                switch (n) {
                                                    case "auto":
                                                    case "bottom":
                                                        if (C >= m) return { placement: "bottom", maxHeight: e };
                                                        if (S >= m && !a) return o && M(l, A, D), { placement: "bottom", maxHeight: e };
                                                        if ((!a && S >= s) || (a && C >= s)) return o && M(l, A, D), { placement: "bottom", maxHeight: a ? C - v : S - v };
                                                        if ("auto" === n || a) {
                                                            var T = e,
                                                                E = a ? _ : j;
                                                            return E >= s && (T = Math.min(E - v - r, e)), { placement: "top", maxHeight: T };
                                                        }
                                                        if ("bottom" === n) return o && k(l, A), { placement: "bottom", maxHeight: e };
                                                        break;
                                                    case "top":
                                                        if (_ >= m) return { placement: "top", maxHeight: e };
                                                        if (j >= m && !a) return o && M(l, L, D), { placement: "top", maxHeight: e };
                                                        if ((!a && j >= s) || (a && _ >= s)) {
                                                            var O = e;
                                                            return ((!a && j >= s) || (a && _ >= s)) && (O = a ? _ - y : j - y), o && M(l, L, D), { placement: "top", maxHeight: O };
                                                        }
                                                        return { placement: "bottom", maxHeight: e };
                                                    default:
                                                        throw new Error('Invalid placement provided "'.concat(n, '".'));
                                                }
                                                return c;
                                            })({ maxHeight: n, menuEl: t, minHeight: i, placement: o, shouldScroll: l && !e, isFixedPosition: e, controlHeight: C });
                                        b(s.maxHeight), _(s.placement), null == d || d(s.placement);
                                    }
                                },
                                [n, o, r, l, i, d, C]
                            ),
                            e({ ref: u, placerProps: (0, s.A)((0, s.A)({}, t), {}, { placement: y || H(o), maxHeight: g }) })
                        );
                    },
                    U = function (t, e) {
                        var i = t.maxHeight,
                            n = t.theme.spacing.baseUnit;
                        return (0, s.A)({ maxHeight: i, overflowY: "auto", position: "relative", WebkitOverflowScrolling: "touch" }, e ? {} : { paddingBottom: n, paddingTop: n });
                    },
                    Z = function (t, e) {
                        var i = t.theme,
                            n = i.spacing.baseUnit,
                            o = i.colors;
                        return (0, s.A)({ textAlign: "center" }, e ? {} : { color: o.neutral40, padding: "".concat(2 * n, "px ").concat(3 * n, "px") });
                    },
                    G = Z,
                    K = Z,
                    q = function (t) {
                        var e = t.rect,
                            i = t.offset,
                            s = t.position;
                        return { left: e.left, position: s, top: i, width: e.width, zIndex: 1 };
                    },
                    X = function (t) {
                        var e = t.isDisabled;
                        return { label: "container", direction: t.isRtl ? "rtl" : void 0, pointerEvents: e ? "none" : void 0, position: "relative" };
                    },
                    J = function (t, e) {
                        var i = t.theme.spacing,
                            n = t.isMulti,
                            o = t.hasValue,
                            a = t.selectProps.controlShouldRenderValue;
                        return (0, s.A)(
                            { alignItems: "center", display: n && o && a ? "flex" : "grid", flex: 1, flexWrap: "wrap", WebkitOverflowScrolling: "touch", position: "relative", overflow: "hidden" },
                            e ? {} : { padding: "".concat(i.baseUnit / 2, "px ").concat(2 * i.baseUnit, "px") }
                        );
                    },
                    Q = function () {
                        return { alignItems: "center", alignSelf: "stretch", display: "flex", flexShrink: 0 };
                    },
                    tt = ["size"],
                    et = ["innerProps", "isRtl", "size"],
                    it = { name: "8mmkcg", styles: "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0" },
                    st = function (t) {
                        var e = t.size,
                            i = (0, r.A)(t, tt);
                        return (0, o.Y)("svg", (0, n.A)({ height: e, width: e, viewBox: "0 0 20 20", "aria-hidden": "true", focusable: "false", css: it }, i));
                    },
                    nt = function (t) {
                        return (0, o.Y)(
                            st,
                            (0, n.A)({ size: 20 }, t),
                            (0, o.Y)("path", {
                                d:
                                    "M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z",
                            })
                        );
                    },
                    ot = function (t) {
                        return (0, o.Y)(
                            st,
                            (0, n.A)({ size: 20 }, t),
                            (0, o.Y)("path", {
                                d:
                                    "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z",
                            })
                        );
                    },
                    at = function (t, e) {
                        var i = t.isFocused,
                            n = t.theme,
                            o = n.spacing.baseUnit,
                            a = n.colors;
                        return (0, s.A)({ label: "indicatorContainer", display: "flex", transition: "color 150ms" }, e ? {} : { color: i ? a.neutral60 : a.neutral20, padding: 2 * o, ":hover": { color: i ? a.neutral80 : a.neutral40 } });
                    },
                    rt = at,
                    lt = at,
                    ct = function (t, e) {
                        var i = t.isDisabled,
                            n = t.theme,
                            o = n.spacing.baseUnit,
                            a = n.colors;
                        return (0, s.A)({ label: "indicatorSeparator", alignSelf: "stretch", width: 1 }, e ? {} : { backgroundColor: i ? a.neutral10 : a.neutral20, marginBottom: 2 * o, marginTop: 2 * o });
                    },
                    dt = (0, o.i7)(B || (B = (0, c.A)(["\n  0%, 80%, 100% { opacity: 0; }\n  40% { opacity: 1; }\n"]))),
                    ht = function (t, e) {
                        var i = t.isFocused,
                            n = t.size,
                            o = t.theme,
                            a = o.colors,
                            r = o.spacing.baseUnit;
                        return (0, s.A)(
                            { label: "loadingIndicator", display: "flex", transition: "color 150ms", alignSelf: "center", fontSize: n, lineHeight: 1, marginRight: n, textAlign: "center", verticalAlign: "middle" },
                            e ? {} : { color: i ? a.neutral60 : a.neutral20, padding: 2 * r }
                        );
                    },
                    ut = function (t) {
                        var e = t.delay,
                            i = t.offset;
                        return (0, o.Y)("span", {
                            css: (0, o.AH)(
                                {
                                    animation: "".concat(dt, " 1s ease-in-out ").concat(e, "ms infinite;"),
                                    backgroundColor: "currentColor",
                                    borderRadius: "1em",
                                    display: "inline-block",
                                    marginLeft: i ? "1em" : void 0,
                                    height: "1em",
                                    verticalAlign: "top",
                                    width: "1em",
                                },
                                "",
                                ""
                            ),
                        });
                    },
                    pt = function (t, e) {
                        var i = t.isDisabled,
                            n = t.isFocused,
                            o = t.theme,
                            a = o.colors,
                            r = o.borderRadius,
                            l = o.spacing;
                        return (0, s.A)(
                            {
                                label: "control",
                                alignItems: "center",
                                cursor: "default",
                                display: "flex",
                                flexWrap: "wrap",
                                justifyContent: "space-between",
                                minHeight: l.controlHeight,
                                outline: "0 !important",
                                position: "relative",
                                transition: "all 100ms",
                            },
                            e
                                ? {}
                                : {
                                      backgroundColor: i ? a.neutral5 : a.neutral0,
                                      borderColor: i ? a.neutral10 : n ? a.primary : a.neutral20,
                                      borderRadius: r,
                                      borderStyle: "solid",
                                      borderWidth: 1,
                                      boxShadow: n ? "0 0 0 1px ".concat(a.primary) : void 0,
                                      "&:hover": { borderColor: n ? a.primary : a.neutral30 },
                                  }
                        );
                    },
                    mt = ["data"],
                    ft = function (t, e) {
                        var i = t.theme.spacing;
                        return e ? {} : { paddingBottom: 2 * i.baseUnit, paddingTop: 2 * i.baseUnit };
                    },
                    gt = function (t, e) {
                        var i = t.theme,
                            n = i.colors,
                            o = i.spacing;
                        return (0, s.A)(
                            { label: "group", cursor: "default", display: "block" },
                            e ? {} : { color: n.neutral40, fontSize: "75%", fontWeight: 500, marginBottom: "0.25em", paddingLeft: 3 * o.baseUnit, paddingRight: 3 * o.baseUnit, textTransform: "uppercase" }
                        );
                    },
                    bt = ["innerRef", "isDisabled", "isHidden", "inputClassName"],
                    xt = function (t, e) {
                        var i = t.isDisabled,
                            n = t.value,
                            o = t.theme,
                            a = o.spacing,
                            r = o.colors;
                        return (0, s.A)(
                            (0, s.A)({ visibility: i ? "hidden" : "visible", transform: n ? "translateZ(0)" : "" }, yt),
                            e ? {} : { margin: a.baseUnit / 2, paddingBottom: a.baseUnit / 2, paddingTop: a.baseUnit / 2, color: r.neutral80 }
                        );
                    },
                    vt = { gridArea: "1 / 2", font: "inherit", minWidth: "2px", border: 0, margin: 0, outline: 0, padding: 0 },
                    yt = { flex: "1 1 auto", display: "inline-grid", gridArea: "1 / 1 / 2 / 3", gridTemplateColumns: "0 min-content", "&:after": (0, s.A)({ content: 'attr(data-value) " "', visibility: "hidden", whiteSpace: "pre" }, vt) },
                    _t = function (t) {
                        return (0, s.A)({ label: "input", color: "inherit", background: 0, opacity: t ? 0 : 1, width: "100%" }, vt);
                    },
                    Ct = function (t, e) {
                        var i = t.theme,
                            n = i.spacing,
                            o = i.borderRadius,
                            a = i.colors;
                        return (0, s.A)({ label: "multiValue", display: "flex", minWidth: 0 }, e ? {} : { backgroundColor: a.neutral10, borderRadius: o / 2, margin: n.baseUnit / 2 });
                    },
                    wt = function (t, e) {
                        var i = t.theme,
                            n = i.borderRadius,
                            o = i.colors,
                            a = t.cropWithEllipsis;
                        return (0, s.A)({ overflow: "hidden", textOverflow: a || void 0 === a ? "ellipsis" : void 0, whiteSpace: "nowrap" }, e ? {} : { borderRadius: n / 2, color: o.neutral80, fontSize: "85%", padding: 3, paddingLeft: 6 });
                    },
                    zt = function (t, e) {
                        var i = t.theme,
                            n = i.spacing,
                            o = i.borderRadius,
                            a = i.colors,
                            r = t.isFocused;
                        return (0, s.A)(
                            { alignItems: "center", display: "flex" },
                            e ? {} : { borderRadius: o / 2, backgroundColor: r ? a.dangerLight : void 0, paddingLeft: n.baseUnit, paddingRight: n.baseUnit, ":hover": { backgroundColor: a.dangerLight, color: a.danger } }
                        );
                    },
                    kt = function (t) {
                        var e = t.children,
                            i = t.innerProps;
                        return (0, o.Y)("div", i, e);
                    },
                    Mt = function (t, e) {
                        var i = t.isDisabled,
                            n = t.isFocused,
                            o = t.isSelected,
                            a = t.theme,
                            r = a.spacing,
                            l = a.colors;
                        return (0, s.A)(
                            { label: "option", cursor: "default", display: "block", fontSize: "inherit", width: "100%", userSelect: "none", WebkitTapHighlightColor: "rgba(0, 0, 0, 0)" },
                            e
                                ? {}
                                : {
                                      backgroundColor: o ? l.primary : n ? l.primary25 : "transparent",
                                      color: i ? l.neutral20 : o ? l.neutral0 : "inherit",
                                      padding: "".concat(2 * r.baseUnit, "px ").concat(3 * r.baseUnit, "px"),
                                      ":active": { backgroundColor: i ? void 0 : o ? l.primary : l.primary50 },
                                  }
                        );
                    },
                    jt = function (t, e) {
                        var i = t.theme,
                            n = i.spacing,
                            o = i.colors;
                        return (0, s.A)({ label: "placeholder", gridArea: "1 / 1 / 2 / 3" }, e ? {} : { color: o.neutral50, marginLeft: n.baseUnit / 2, marginRight: n.baseUnit / 2 });
                    },
                    St = function (t, e) {
                        var i = t.isDisabled,
                            n = t.theme,
                            o = n.spacing,
                            a = n.colors;
                        return (0, s.A)(
                            { label: "singleValue", gridArea: "1 / 1 / 2 / 3", maxWidth: "100%", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" },
                            e ? {} : { color: i ? a.neutral40 : a.neutral80, marginLeft: o.baseUnit / 2, marginRight: o.baseUnit / 2 }
                        );
                    },
                    At = {
                        ClearIndicator: function (t) {
                            var e = t.children,
                                i = t.innerProps;
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "clearIndicator", { indicator: !0, "clear-indicator": !0 }), i), e || (0, o.Y)(nt, null));
                        },
                        Control: function (t) {
                            var e = t.children,
                                i = t.isDisabled,
                                s = t.isFocused,
                                a = t.innerRef,
                                r = t.innerProps,
                                l = t.menuIsOpen;
                            return (0, o.Y)("div", (0, n.A)({ ref: a }, _(t, "control", { control: !0, "control--is-disabled": i, "control--is-focused": s, "control--menu-is-open": l }), r, { "aria-disabled": i || void 0 }), e);
                        },
                        DropdownIndicator: function (t) {
                            var e = t.children,
                                i = t.innerProps;
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "dropdownIndicator", { indicator: !0, "dropdown-indicator": !0 }), i), e || (0, o.Y)(ot, null));
                        },
                        DownChevron: ot,
                        CrossIcon: nt,
                        Group: function (t) {
                            var e = t.children,
                                i = t.cx,
                                s = t.getStyles,
                                a = t.getClassNames,
                                r = t.Heading,
                                l = t.headingProps,
                                c = t.innerProps,
                                d = t.label,
                                h = t.theme,
                                u = t.selectProps;
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "group", { group: !0 }), c), (0, o.Y)(r, (0, n.A)({}, l, { selectProps: u, theme: h, getStyles: s, getClassNames: a, cx: i }), d), (0, o.Y)("div", null, e));
                        },
                        GroupHeading: function (t) {
                            var e = y(t);
                            e.data;
                            var i = (0, r.A)(e, mt);
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "groupHeading", { "group-heading": !0 }), i));
                        },
                        IndicatorsContainer: function (t) {
                            var e = t.children,
                                i = t.innerProps;
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "indicatorsContainer", { indicators: !0 }), i), e);
                        },
                        IndicatorSeparator: function (t) {
                            var e = t.innerProps;
                            return (0, o.Y)("span", (0, n.A)({}, e, _(t, "indicatorSeparator", { "indicator-separator": !0 })));
                        },
                        Input: function (t) {
                            var e = t.cx,
                                i = t.value,
                                s = y(t),
                                a = s.innerRef,
                                l = s.isDisabled,
                                c = s.isHidden,
                                d = s.inputClassName,
                                h = (0, r.A)(s, bt);
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "input", { "input-container": !0 }), { "data-value": i || "" }), (0, o.Y)("input", (0, n.A)({ className: e({ input: !0 }, d), ref: a, style: _t(c), disabled: l }, h)));
                        },
                        LoadingIndicator: function (t) {
                            var e = t.innerProps,
                                i = t.isRtl,
                                a = t.size,
                                l = void 0 === a ? 4 : a,
                                c = (0, r.A)(t, et);
                            return (0, o.Y)(
                                "div",
                                (0, n.A)({}, _((0, s.A)((0, s.A)({}, c), {}, { innerProps: e, isRtl: i, size: l }), "loadingIndicator", { indicator: !0, "loading-indicator": !0 }), e),
                                (0, o.Y)(ut, { delay: 0, offset: i }),
                                (0, o.Y)(ut, { delay: 160, offset: !0 }),
                                (0, o.Y)(ut, { delay: 320, offset: !i })
                            );
                        },
                        Menu: function (t) {
                            var e = t.children,
                                i = t.innerRef,
                                s = t.innerProps;
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "menu", { menu: !0 }), { ref: i }, s), e);
                        },
                        MenuList: function (t) {
                            var e = t.children,
                                i = t.innerProps,
                                s = t.innerRef,
                                a = t.isMulti;
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "menuList", { "menu-list": !0, "menu-list--is-multi": a }), { ref: s }, i), e);
                        },
                        MenuPortal: function (t) {
                            var e = t.appendTo,
                                i = t.children,
                                r = t.controlElement,
                                l = t.innerProps,
                                c = t.menuPlacement,
                                d = t.menuPosition,
                                f = (0, h.useRef)(null),
                                g = (0, h.useRef)(null),
                                b = (0, h.useState)(H(c)),
                                x = (0, a.A)(b, 2),
                                v = x[0],
                                y = x[1],
                                C = (0, h.useMemo)(function () {
                                    return { setPortalPlacement: y };
                                }, []),
                                w = (0, h.useState)(null),
                                z = (0, a.A)(w, 2),
                                k = z[0],
                                M = z[1],
                                j = (0, h.useCallback)(
                                    function () {
                                        if (r) {
                                            var t = (function (t) {
                                                    var e = t.getBoundingClientRect();
                                                    return { bottom: e.bottom, height: e.height, left: e.left, right: e.right, top: e.top, width: e.width };
                                                })(r),
                                                e = "fixed" === d ? 0 : window.pageYOffset,
                                                i = t[v] + e;
                                            (i === (null == k ? void 0 : k.offset) && t.left === (null == k ? void 0 : k.rect.left) && t.width === (null == k ? void 0 : k.rect.width)) || M({ offset: i, rect: t });
                                        }
                                    },
                                    [r, d, v, null == k ? void 0 : k.offset, null == k ? void 0 : k.rect.left, null == k ? void 0 : k.rect.width]
                                );
                            (0, m.A)(
                                function () {
                                    j();
                                },
                                [j]
                            );
                            var S = (0, h.useCallback)(
                                function () {
                                    "function" == typeof g.current && (g.current(), (g.current = null)), r && f.current && (g.current = (0, p.ll)(r, f.current, j, { elementResize: "ResizeObserver" in window }));
                                },
                                [r, j]
                            );
                            (0, m.A)(
                                function () {
                                    S();
                                },
                                [S]
                            );
                            var A = (0, h.useCallback)(
                                function (t) {
                                    (f.current = t), S();
                                },
                                [S]
                            );
                            if ((!e && "fixed" !== d) || !k) return null;
                            var L = (0, o.Y)("div", (0, n.A)({ ref: A }, _((0, s.A)((0, s.A)({}, t), {}, { offset: k.offset, position: d, rect: k.rect }), "menuPortal", { "menu-portal": !0 }), l), i);
                            return (0, o.Y)(Y.Provider, { value: C }, e ? (0, u.createPortal)(L, e) : L);
                        },
                        LoadingMessage: function (t) {
                            var e = t.children,
                                i = void 0 === e ? "Loading..." : e,
                                a = t.innerProps,
                                l = (0, r.A)(t, F);
                            return (0, o.Y)("div", (0, n.A)({}, _((0, s.A)((0, s.A)({}, l), {}, { children: i, innerProps: a }), "loadingMessage", { "menu-notice": !0, "menu-notice--loading": !0 }), a), i);
                        },
                        NoOptionsMessage: function (t) {
                            var e = t.children,
                                i = void 0 === e ? "No options" : e,
                                a = t.innerProps,
                                l = (0, r.A)(t, V);
                            return (0, o.Y)("div", (0, n.A)({}, _((0, s.A)((0, s.A)({}, l), {}, { children: i, innerProps: a }), "noOptionsMessage", { "menu-notice": !0, "menu-notice--no-options": !0 }), a), i);
                        },
                        MultiValue: function (t) {
                            var e = t.children,
                                i = t.components,
                                n = t.data,
                                a = t.innerProps,
                                r = t.isDisabled,
                                l = t.removeProps,
                                c = t.selectProps,
                                d = i.Container,
                                h = i.Label,
                                u = i.Remove;
                            return (0, o.Y)(
                                d,
                                { data: n, innerProps: (0, s.A)((0, s.A)({}, _(t, "multiValue", { "multi-value": !0, "multi-value--is-disabled": r })), a), selectProps: c },
                                (0, o.Y)(h, { data: n, innerProps: (0, s.A)({}, _(t, "multiValueLabel", { "multi-value__label": !0 })), selectProps: c }, e),
                                (0, o.Y)(u, { data: n, innerProps: (0, s.A)((0, s.A)({}, _(t, "multiValueRemove", { "multi-value__remove": !0 })), {}, { "aria-label": "Remove ".concat(e || "option") }, l), selectProps: c })
                            );
                        },
                        MultiValueContainer: kt,
                        MultiValueLabel: kt,
                        MultiValueRemove: function (t) {
                            var e = t.children,
                                i = t.innerProps;
                            return (0, o.Y)("div", (0, n.A)({ role: "button" }, i), e || (0, o.Y)(nt, { size: 14 }));
                        },
                        Option: function (t) {
                            var e = t.children,
                                i = t.isDisabled,
                                s = t.isFocused,
                                a = t.isSelected,
                                r = t.innerRef,
                                l = t.innerProps;
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "option", { option: !0, "option--is-disabled": i, "option--is-focused": s, "option--is-selected": a }), { ref: r, "aria-disabled": i }, l), e);
                        },
                        Placeholder: function (t) {
                            var e = t.children,
                                i = t.innerProps;
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "placeholder", { placeholder: !0 }), i), e);
                        },
                        SelectContainer: function (t) {
                            var e = t.children,
                                i = t.innerProps,
                                s = t.isDisabled,
                                a = t.isRtl;
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "container", { "--is-disabled": s, "--is-rtl": a }), i), e);
                        },
                        SingleValue: function (t) {
                            var e = t.children,
                                i = t.isDisabled,
                                s = t.innerProps;
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "singleValue", { "single-value": !0, "single-value--is-disabled": i }), s), e);
                        },
                        ValueContainer: function (t) {
                            var e = t.children,
                                i = t.innerProps,
                                s = t.isMulti,
                                a = t.hasValue;
                            return (0, o.Y)("div", (0, n.A)({}, _(t, "valueContainer", { "value-container": !0, "value-container--is-multi": s, "value-container--has-value": a }), i), e);
                        },
                    },
                    Lt = function (t) {
                        return (0, s.A)((0, s.A)({}, At), t.components);
                    };
            },
            9922: (t, e, i) => {
                "use strict";
                i.d(e, { A: () => o });
                var s = i(2284),
                    n = i(2327);
                function o(t) {
                    var e = (0, n.A)(t, "string");
                    return "symbol" == (0, s.A)(e) ? e : e + "";
                }
            },
        },
        e = {};
    function i(s) {
        var n = e[s];
        if (void 0 !== n) return n.exports;
        var o = (e[s] = { exports: {} });
        return t[s].call(o.exports, o, o.exports, i), o.exports;
    }
    (i.n = (t) => {
        var e = t && t.__esModule ? () => t.default : () => t;
        return i.d(e, { a: e }), e;
    }),
        (i.d = (t, e) => {
            for (var s in e) i.o(e, s) && !i.o(t, s) && Object.defineProperty(t, s, { enumerable: !0, get: e[s] });
        }),
        (i.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e)),
        (i.r = (t) => {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 });
        }),
        (() => {
            "use strict";
            var t = {};
            i.r(t),
                i.d(t, {
                    activeCampaign: () => lt,
                    aweber: () => gt,
                    fluentCRM: () => ct,
                    googleanalytics: () => pt,
                    hubspot: () => ut,
                    mailchimp: () => at,
                    mailerlite: () => ht,
                    mailpoet: () => dt,
                    pabbly: () => ft,
                    woocommerce: () => mt,
                    zapier: () => rt,
                });
            var e = {};
            i.r(e), i.d(e, { floatingbar: () => Rt, fullscreen: () => Vt, gamified: () => Ht, inline: () => Ft, popup: () => Nt, slidein: () => Bt });
            var s = i(5338),
                n = i(790);
            const o = (0, n.jsx)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "21",
                    height: "14",
                    viewBox: "0 0 21 14",
                    fill: "none",
                    children: (0, n.jsx)("path", {
                        d:
                            "M1.69618 5.58788L3.39306 14H17.8016L19.5017 5.57033C19.5411 5.57606 19.5809 5.57907 19.6207 5.57933C19.8368 5.57998 20.0455 5.50161 20.2068 5.35926C20.368 5.21692 20.4705 5.02064 20.4946 4.80808C20.5186 4.59552 20.4625 4.38166 20.337 4.20756C20.2115 4.03345 20.0254 3.91136 19.8146 3.86471C19.6037 3.81807 19.3828 3.85016 19.1944 3.95483C19.006 4.05949 18.8632 4.22936 18.7936 4.43182C18.7239 4.63429 18.7322 4.85509 18.817 5.05184C18.9017 5.2486 19.0568 5.40745 19.2526 5.49791C18.4801 6.87849 16.7609 9.49704 14.8227 9.49704C12.3456 9.49704 11.0795 3.89016 10.7218 1.98911C10.9769 1.96246 11.212 1.84055 11.3794 1.64822C11.5468 1.4559 11.6338 1.20763 11.6226 0.954016C11.6115 0.700404 11.5031 0.460539 11.3195 0.283307C11.1359 0.106075 10.8909 0.00481591 10.6345 0.000167406C10.3781 -0.0044811 10.1296 0.0878307 9.93957 0.258289C9.74954 0.428747 9.63233 0.664522 9.61182 0.91756C9.59132 1.1706 9.66906 1.42185 9.82921 1.62012C9.98935 1.81839 10.2199 1.94874 10.4737 1.98461C10.117 3.88071 8.85137 9.49704 6.37193 9.49704C4.43737 9.49704 2.72049 6.88793 1.94657 5.50601C2.17696 5.39578 2.35638 5.20294 2.44843 4.9666C2.54048 4.73025 2.53828 4.4681 2.44227 4.2333C2.34626 3.99851 2.16362 3.80865 1.93141 3.70223C1.6992 3.59582 1.4348 3.58081 1.19182 3.66026C0.948841 3.7397 0.745485 3.90765 0.622992 4.13005C0.500499 4.35244 0.46804 4.61263 0.532198 4.85784C0.596357 5.10304 0.752329 5.31492 0.968482 5.45049C1.18464 5.58606 1.44479 5.63518 1.69618 5.58788Z",
                        fill: "#F8174B",
                    }),
                }),
                a = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "18",
                    height: "18",
                    viewBox: "0 0 18 18",
                    fill: "none",
                    children: [
                        (0, n.jsx)("path", {
                            d: "M9 17C13.4183 17 17 13.4183 17 9C17 4.58172 13.4183 1 9 1C4.58172 1 1 4.58172 1 9C1 13.4183 4.58172 17 9 17Z",
                            stroke: "#646568",
                            strokeWidth: "1.5",
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                        }),
                        (0, n.jsx)("path", {
                            d: "M8.9998 12.2C10.7671 12.2 12.1998 10.7673 12.1998 8.99999C12.1998 7.23268 10.7671 5.79999 8.9998 5.79999C7.23249 5.79999 5.7998 7.23268 5.7998 8.99999C5.7998 10.7673 7.23249 12.2 8.9998 12.2Z",
                            stroke: "#646568",
                            strokeWidth: "1.5",
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                        }),
                        (0, n.jsx)("path", { d: "M3.34424 3.34399L6.73624 6.73599", stroke: "#646568", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                        (0, n.jsx)("path", { d: "M11.2642 11.264L14.6562 14.656", stroke: "#646568", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                        (0, n.jsx)("path", { d: "M11.2642 6.73599L14.6562 3.34399", stroke: "#646568", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                        (0, n.jsx)("path", { d: "M11.2642 6.73599L14.0882 3.91199", stroke: "#646568", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                        (0, n.jsx)("path", { d: "M3.34424 14.656L6.73624 11.264", stroke: "#646568", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                    ],
                }),
                r = (0, n.jsxs)("svg", {
                    width: "145",
                    height: "30",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: [
                        (0, n.jsx)("path", {
                            d:
                                "M48.323 14.509c-.425.791-1.091 1.425-2.008 1.908-.917.483-2.058.725-3.442.725h-2.825v6.475h-3.383V6.75h6.208c1.309 0 2.417.225 3.334.675.916.45 1.608 1.075 2.066 1.859.459.791.692 1.683.692 2.683 0 .9-.217 1.75-.642 2.533v.009Zm-3.516-.734c.45-.425.675-1.025.675-1.8 0-1.641-.917-2.466-2.759-2.466H40.04v4.908h2.683c.934 0 1.625-.217 2.075-.642h.009ZM53.34 22.984a6.17 6.17 0 0 1-2.426-2.425c-.591-1.05-.883-2.259-.883-3.625 0-1.367.3-2.575.908-3.625a6.238 6.238 0 0 1 2.475-2.425c1.042-.567 2.217-.859 3.509-.859 1.291 0 2.458.284 3.508.859a6.295 6.295 0 0 1 2.475 2.425c.6 1.05.908 2.258.908 3.625 0 1.366-.308 2.575-.933 3.625a6.343 6.343 0 0 1-2.517 2.425c-1.058.575-2.233.858-3.541.858-1.309 0-2.45-.283-3.484-.858Zm5.208-2.542c.541-.3.966-.742 1.291-1.342.325-.591.484-1.316.484-2.175 0-1.275-.334-2.25-1-2.933-.667-.683-1.484-1.025-2.45-1.025-.967 0-1.775.342-2.425 1.025-.65.683-.975 1.667-.975 2.933 0 1.267.316 2.25.958 2.934.633.683 1.442 1.025 2.408 1.025.609 0 1.192-.15 1.725-.45l-.016.008ZM70.988 10.634c.767-.409 1.642-.617 2.625-.617 1.142 0 2.175.283 3.108.85.925.567 1.659 1.367 2.2 2.408.542 1.042.809 2.242.809 3.609 0 1.366-.267 2.583-.809 3.633-.541 1.058-1.275 1.875-2.2 2.45-.925.583-1.958.867-3.108.867-.983 0-1.85-.2-2.6-.609-.75-.408-1.358-.908-1.825-1.525v8.292h-3.383V10.225h3.383v1.934c.433-.609 1.033-1.125 1.8-1.534v.009Zm4.792 4.158c-.334-.592-.767-1.033-1.309-1.342a3.475 3.475 0 0 0-1.75-.458c-.625 0-1.191.158-1.725.475-.541.317-.975.767-1.308 1.367-.333.6-.492 1.3-.492 2.1s.167 1.508.492 2.1c.333.6.767 1.05 1.308 1.366a3.364 3.364 0 0 0 1.725.475 3.38 3.38 0 0 0 1.75-.483c.542-.325.975-.783 1.309-1.375.333-.592.491-1.308.491-2.125s-.166-1.5-.491-2.092v-.008ZM94.346 10.234v13.391h-3.409v-1.691c-.433.583-1 1.033-1.7 1.366-.7.334-1.458.492-2.283.492-1.05 0-1.975-.225-2.775-.667-.808-.441-1.442-1.091-1.9-1.958-.458-.858-.691-1.892-.691-3.083v-7.85h3.383V17.6c0 1.067.266 1.884.8 2.45.533.575 1.258.859 2.175.859.916 0 1.666-.284 2.2-.859.533-.575.8-1.391.8-2.45v-7.366h3.408-.008ZM102.236 10.634c.767-.409 1.642-.617 2.625-.617 1.142 0 2.175.283 3.109.85.925.567 1.658 1.367 2.2 2.408.541 1.042.808 2.242.808 3.609 0 1.366-.267 2.583-.808 3.633-.542 1.058-1.275 1.875-2.2 2.45-.925.583-1.959.867-3.109.867-.983 0-1.85-.2-2.6-.609-.75-.408-1.358-.908-1.825-1.525v8.292h-3.383V10.225h3.383v1.934c.434-.609 1.034-1.125 1.8-1.534v.009Zm4.784 4.158c-.334-.592-.767-1.033-1.309-1.342a3.474 3.474 0 0 0-1.75-.458 3.3 3.3 0 0 0-1.725.475c-.541.317-.975.767-1.308 1.367-.333.6-.492 1.3-.492 2.1s.167 1.508.492 2.1c.333.6.767 1.05 1.308 1.366a3.365 3.365 0 0 0 1.725.475c.609 0 1.209-.158 1.75-.483.542-.325.975-.783 1.309-1.375.333-.592.491-1.308.491-2.125s-.166-1.5-.491-2.092v-.008ZM122.469 23.617l-6.142-7.517v7.517h-3.383V6.75h3.383v7.567l6.142-7.567h4.083l-6.958 8.359 7.15 8.508h-4.275ZM128.718 8.067c-.392-.375-.592-.85-.592-1.417 0-.566.2-1.033.592-1.416.391-.375.891-.567 1.483-.567.592 0 1.092.192 1.483.567.392.383.592.85.592 1.416 0 .567-.2 1.034-.592 1.417-.391.383-.891.567-1.483.567-.592 0-1.092-.192-1.483-.567Zm3.15 2.167v13.391h-3.384V10.234h3.384ZM138.659 13.009v6.475c0 .45.109.775.325.975.217.2.584.3 1.1.3h1.575v2.85h-2.125c-2.85 0-4.275-1.384-4.275-4.159V13h-1.591v-2.775h1.591V6.917h3.409v3.308h3V13h-3l-.009.009Z",
                            fill: "#000032",
                        }),
                        (0, n.jsx)("path", { d: "M0 15C0 6.716 6.716 0 15 0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15H2.727A2.727 2.727 0 0 1 0 27.273V15Z", fill: "url(#a)" }),
                        (0, n.jsx)("path", {
                            opacity: ".7",
                            d: "M23.479 11.74a6.523 6.523 0 0 1 6.392 5.23C28.907 24.323 22.617 30 15 30H2.728A2.728 2.728 0 0 1 0 27.273V15c0-.853.072-1.689.209-2.503a6.491 6.491 0 0 1 3.052-.758h20.217Z",
                            fill: "url(#b)",
                        }),
                        (0, n.jsx)("path", {
                            d:
                                "M5.417 14.997c0-5.498 4.632-9.914 10.207-9.56l.002-.006c4.702.298 8.548 4.075 8.925 8.768a9.584 9.584 0 0 1-9.536 10.377 3.088 3.088 0 0 0-3.095 3.084V30H5.42v-2.344c0-6.28 4.377-9.528 9.455-9.581 1.721-.016 3.2-1.373 3.208-3.062a3.08 3.08 0 0 0-3.02-3.096c-1.742-.035-3.142 1.446-3.142 3.188v1.26c0 .564-.371 1.05-.905 1.232a10.183 10.183 0 0 0-4.836 3.508c-.246.325-.763.14-.763-.264v-5.844Z",
                            fill: "url(#c)",
                        }),
                        (0, n.jsxs)("defs", {
                            children: [
                                (0, n.jsxs)("linearGradient", {
                                    id: "a",
                                    x1: "15",
                                    y1: "0",
                                    x2: "15",
                                    y2: "30",
                                    gradientUnits: "userSpaceOnUse",
                                    children: [(0, n.jsx)("stop", { stopColor: "#6D85FF" }), (0, n.jsx)("stop", { offset: "1", stopColor: "#3353F4" })],
                                }),
                                (0, n.jsxs)("linearGradient", {
                                    id: "b",
                                    x1: "13.37",
                                    y1: "11.739",
                                    x2: "13.37",
                                    y2: "31.956",
                                    gradientUnits: "userSpaceOnUse",
                                    children: [(0, n.jsx)("stop", { stopColor: "#6D85FF" }), (0, n.jsx)("stop", { offset: "1", stopColor: "#3353F4" })],
                                }),
                                (0, n.jsxs)("linearGradient", {
                                    id: "c",
                                    x1: "9.13",
                                    y1: "5.218",
                                    x2: "18.586",
                                    y2: "32.608",
                                    gradientUnits: "userSpaceOnUse",
                                    children: [(0, n.jsx)("stop", { stopColor: "#fff" }), (0, n.jsx)("stop", { offset: "1", stopColor: "#fff", stopOpacity: ".8" })],
                                }),
                            ],
                        }),
                    ],
                });
            var l = i(6087),
                c = i(7008);
            const d = window.wp.hooks;
            var h = i(1455),
                u = i.n(h);
            const p = function (t, e, i) {
                    let s = `${t}=${e}; path=/`;
                    if (i) {
                        const t = new Date();
                        t.setTime(t.getTime() + 60 * i * 60 * 1e3), (s += `; expires=${t.toUTCString()}`);
                    }
                    document.cookie = s;
                },
                m = function (t) {
                    const e = `; ${document.cookie}`.split(`; ${t}=`);
                    return 2 === e.length ? e.pop().split(";").shift() : null;
                };
            function f({ windowVariable: t = "gutenkit", hookName: e = "gutenkit.is-pro-active", cookieName: i = "isValidLicense", apiPath: s = "gutenkit" } = {}) {
                const [n, o] = (0, l.useState)(() => "true" === m(i)),
                    { has_pro: a } = window?.[t] || {};
                return (
                    (0, l.useEffect)(() => {
                        a &&
                            (async () => {
                                const t = m(i);
                                t
                                    ? o("true" === t)
                                    : setTimeout(async () => {
                                          try {
                                              const t = await u()({ path: `/${s}/v1/license/status` });
                                              "valid" === t?.status ? (o(!0), p(i, "true", 12)) : (o(!1), p(i, "false", 12));
                                          } catch (t) {
                                              console.error("Error fetching license status:", t);
                                          }
                                      }, 2e3);
                            })();
                    }, [a]),
                    (0, l.useMemo)(() => (0, d.applyFilters)(e, n), [n])
                );
            }
            const g = function ({ links: t, currentPage: e, setCurrentPage: i }) {
                const s = (0, l.useMemo)(() => e || "subscribers", [e]),
                    d = f({ windowVariable: "popupBuilderBlock", hookName: "pbb.is-pro-active", cookieName: "isPopupkitValid", apiPath: "pbb" }),
                    h = d ? "Pro" : "Free",
                    u = d ? window.popupBuilderBlock?.pro_version : window.popupBuilderBlock?.version,
                    [p, m] = (0, l.useState)(window.innerWidth),
                    [g, b] = (0, l.useState)(!1);
                (0, l.useEffect)(() => {
                    const t = () => {
                        m(window.innerWidth);
                    };
                    return window.addEventListener("resize", t), () => window.removeEventListener("resize", t);
                }, []);
                const x = p < 1200,
                    v = p < 768,
                    y = Object.keys(t),
                    _ = x ? y.slice(0, 3) : y,
                    C = x ? y.slice(3) : [];
                return (0, n.jsxs)("header", {
                    className: "popupkit-header",
                    children: [
                        (0, n.jsxs)("div", {
                            className: "header-left",
                            children: [
                                (0, n.jsx)("div", { className: "logo", children: r }),
                                v
                                    ? (0, n.jsxs)(n.Fragment, {
                                          children: [
                                              (0, n.jsx)("button", {
                                                  className: "hamburger-btn",
                                                  onClick: () => b((t) => !t),
                                                  children: (0, n.jsxs)("svg", {
                                                      xmlns: "http://www.w3.org/2000/svg",
                                                      viewBox: "0 0 24 24",
                                                      width: 24,
                                                      height: 24,
                                                      color: "#000000",
                                                      fill: "none",
                                                      children: [
                                                          (0, n.jsx)("path", { d: "M4 5L20 5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                          (0, n.jsx)("path", { d: "M4 12L20 12", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                          (0, n.jsx)("path", { d: "M4 19L20 19", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                      ],
                                                  }),
                                              }),
                                              g &&
                                                  (0, n.jsx)("div", {
                                                      className: "mobile-nav-menu",
                                                      children: y.map((t, e) =>
                                                          (0, n.jsx)(
                                                              "a",
                                                              {
                                                                  className: s === t ? "active" : "",
                                                                  href: `#${t}`,
                                                                  onClick: () =>
                                                                      ((t) => {
                                                                          i(t), b(!1);
                                                                      })(t),
                                                                  children: t,
                                                              },
                                                              e
                                                          )
                                                      ),
                                                  }),
                                          ],
                                      })
                                    : (0, n.jsxs)("nav", {
                                          className: "nav",
                                          children: [
                                              _.map((t, e) => (0, n.jsx)("a", { className: s === t ? "active" : "", href: `#${t}`, onClick: () => i(t), children: t }, e)),
                                              C.length > 0 &&
                                                  (0, n.jsxs)("div", {
                                                      className: "dropdown",
                                                      children: [
                                                          (0, n.jsx)("button", {
                                                              className: "dropdown-toggle",
                                                              children: (0, n.jsx)("svg", {
                                                                  xmlns: "http://www.w3.org/2000/svg",
                                                                  viewBox: "0 0 24 24",
                                                                  width: "24",
                                                                  height: "24",
                                                                  children: (0, n.jsx)("path", { d: "M18 9s-4.419 6-6 6-6-6-6-6", stroke: "currentColor", strokeWidth: "1.5", fill: "none" }),
                                                              }),
                                                          }),
                                                          (0, n.jsx)("div", {
                                                              className: "dropdown-menu",
                                                              children: C.map((t, e) => (0, n.jsx)("a", { className: s === t ? "active" : "", href: `#${t}`, onClick: () => i(t), children: t }, `drop-${e}`)),
                                                          }),
                                                      ],
                                                  }),
                                          ],
                                      }),
                            ],
                        }),
                        (0, n.jsxs)("div", {
                            className: "header-right",
                            children: [
                                (0, n.jsxs)("span", { className: "version", children: [h, " Version: ", (0, n.jsx)("b", { children: u })] }),
                                !d && (0, n.jsxs)("a", { href: "https://wpmet.com/plugin/popupkit/pricing/", target: "_blank", className: "upgrade-btn", children: [o, " Upgrade to Pro"] }),
                                (0, n.jsx)("a", { className: "support-btn", children: a }),
                                (0, n.jsx)(c.m_, {
                                    anchorSelect: ".support-btn",
                                    place: "top",
                                    clickable: !0,
                                    children: (0, n.jsx)("a", { href: "https://wpmet.com/support-ticket-form/", target: "_blank", style: { textDecoration: "none", color: "#fff" }, children: "Help Center" }),
                                }),
                            ],
                        }),
                    ],
                });
            };
            var b = i(6427);
            const x = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "14",
                    height: "14",
                    fill: "none",
                    children: [
                        (0, n.jsx)("path", { d: "M13 7A6 6 0 1 0 1 7a6 6 0 0 0 12 0z", stroke: "#181A26", strokeWidth: "1.5" }),
                        (0, n.jsx)("path", { d: "M7.145 10V7c0-.283 0-.424-.087-.512-.088-.088-.23-.088-.513-.088", stroke: "#181A26", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                        (0, n.jsx)("path", { d: "M6.996 4.6h.006", stroke: "#181A26", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
                    ],
                }),
                v = (0, n.jsx)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "14",
                    height: "14",
                    fill: "none",
                    children: (0, n.jsx)("path", {
                        d: "M1.6 3.4H12.4M11.2 3.4v8.4A1.2 1.2 0 0 1 10 13H4a1.2 1.2 0 0 1-1.2-1.2V3.4m1.8 0V2.2A1.2 1.2 0 0 1 5.8 1h2.4a1.2 1.2 0 0 1 1.2 1.2v1.2M5.8 6.4V10M8.2 6.4V10",
                        stroke: "#181A26",
                        strokeWidth: "1.5",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                    }),
                });
            var y = i(4519),
                _ = i(7723),
                C = i(1416),
                w = i(6154),
                z = i.n(w);
            i(6918);
            const k = ({ initialDateRange: t, value: e, onChange: i }) => {
                    const s = (0, n.jsx)("svg", {
                            width: "14",
                            height: "16",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            children: (0, n.jsx)("path", {
                                d: "M10.79 1.684V3.58M3.21 1.684V3.58M11.737 2.632H2.263C1.566 2.632 1 3.197 1 3.895v9.158c0 .697.566 1.263 1.263 1.263h9.474c.697 0 1.263-.566 1.263-1.263V3.895c0-.698-.566-1.263-1.263-1.263ZM1 5.79h12",
                                stroke: "#545558",
                                strokeWidth: "1.5",
                                strokeLinecap: "round",
                                strokeLinejoin: "round",
                            }),
                        }),
                        o = (0, n.jsx)("svg", {
                            xmlns: "http://www.w3.org/2000/svg",
                            width: "10",
                            height: "6",
                            viewBox: "0 0 10 6",
                            fill: "none",
                            children: (0, n.jsx)("path", { d: "M1 1.00003L5.00001 4.99999L9 1", stroke: "#545558", strokeWidth: "1.5", strokeMiterlimit: "16", strokeLinecap: "round", strokeLinejoin: "round" }),
                        });
                    return (
                        (0, l.useEffect)(() => {
                            const s = e?.start || z()().subtract(29, "days"),
                                n = e?.end || z()(),
                                o = t?.split(" ")?.[0] || z()().subtract(29, "days"),
                                a = {
                                    Today: [z()(), z()()],
                                    Yesterday: [z()().subtract(1, "days"), z()().subtract(1, "days")],
                                    "Last 7 Days": [z()().subtract(6, "days"), z()()],
                                    "Last 15 Days": [z()().subtract(14, "days"), z()()],
                                    "Last 30 Days": [z()().subtract(29, "days"), z()()],
                                    "This Month": [z()().startOf("month"), z()().endOf("month")],
                                    "Last Month": [z()().subtract(1, "month").startOf("month"), z()().subtract(1, "month").endOf("month")],
                                    "All Time": [z()(o), z()()],
                                };
                            function r(t, e, s) {
                                let n = Object.keys(a).find((i) => t.isSame(a[i][0], "day") && e.isSame(a[i][1], "day")) || `${t.format("MMMM D, YYYY")} - ${e.format("MMMM D, YYYY")}`;
                                i({ start: t, end: e, label: n });
                            }
                            return (
                                jQuery("#reportrange").daterangepicker({ startDate: s, endDate: n, ranges: a, alwaysShowCalendars: !0, showCustomRangeLabel: !1, opens: "right" }, r),
                                r(s, n),
                                () => {
                                    jQuery("#reportrange").data("daterangepicker") && jQuery("#reportrange").data("daterangepicker").remove();
                                }
                            );
                        }, [t]),
                        (0, n.jsx)("div", {
                            className: "pbb-date-range-picker",
                            children: (0, n.jsxs)("div", {
                                id: "reportrange",
                                children: [(0, n.jsx)("span", { children: s }), (0, n.jsx)("span", { className: "select-date", children: e.label }), (0, n.jsx)("span", { className: "down-arrow", children: o })],
                            }),
                        })
                    );
                },
                M = window.wp.url;
            var j = i(9458),
                S = i(1409);
            const A = {},
                L = function () {
                    const t = (0, l.useRef)(null),
                        [e, i] = (0, l.useState)([]),
                        [s, o] = (0, l.useState)(""),
                        [a, r] = (0, l.useState)(1),
                        [d, h] = (0, l.useState)(null),
                        [p, m] = (0, l.useState)("asc"),
                        [g, w] = (0, l.useState)([]),
                        [z, L] = (0, l.useState)(null),
                        [D, T] = (0, l.useState)({ value: 10, label: "10 / page" }),
                        [E, O] = (0, l.useState)(null),
                        [P, I] = (0, l.useState)([]),
                        [N, R] = (0, l.useState)({ value: "", label: (0, _.__)("All Campaigns", "popup-builder-block") }),
                        [V, F] = (0, l.useState)([{ label: (0, _.__)("All Campaigns", "popup-builder-block"), value: "" }]),
                        [B, H] = (0, l.useState)(!1),
                        [W, Y] = (0, l.useState)(""),
                        [$, U] = (0, l.useState)(""),
                        [Z, G] = (0, l.useState)(!0),
                        [K, q] = (0, l.useState)(!1),
                        X = f({ windowVariable: "popupBuilderBlock", hookName: "pbb.is-pro-active", cookieName: "isPopupkitValid", apiPath: "pbb" }),
                        [J, Q] = (0, l.useState)(""),
                        [tt, et] = (0, l.useState)({ start: moment().subtract(14, "days"), end: moment(), label: "Last 15 Days" }),
                        it = JSON.stringify({ campaignId: N, start: tt?.start?.format("YYYY-MM-DD"), end: tt?.end?.format("YYYY-MM-DD") }),
                        st = () => H(!1),
                        nt = (0, l.useMemo)(() => (e.length ? e.filter((t) => Object.values(t).some((t) => String(t).toLowerCase().includes(s.toLowerCase()))) : []), [e, s, N]),
                        ot = (0, l.useMemo)(
                            () =>
                                d
                                    ? [...nt].sort((t, e) => {
                                          const i = t[d],
                                              s = e[d];
                                          return "asc" === p ? i.localeCompare(s) : s.localeCompare(i);
                                      })
                                    : nt,
                            [nt, d, p]
                        ),
                        at = (0, l.useMemo)(() => {
                            const t = (a - 1) * D.value;
                            return ot.slice(t, t + D.value);
                        }, [ot, a, D]);
                    (0, l.useEffect)(() => {
                        if (!tt?.start || !tt?.end) return;
                        if (A[it]) return i(A[it]), void G(!1);
                        const t = { start: tt.start.format("YYYY-MM-DD"), end: tt.end.format("YYYY-MM-DD"), order_by: "date DESC" };
                        N?.value && (t.campaign_id = N?.value);
                        const e = (0, M.addQueryArgs)("/pbb/v1/subscribers", t);
                        u()({ path: e })
                            .then((t) => {
                                "success" === t.status ? ((A[it] = t.data), i(t.data)) : i([]), G(!1);
                            })
                            .catch((t) => {
                                console.error(t), G(!1);
                            });
                    }, [it]),
                        (0, l.useEffect)(() => {
                            u()({ path: "/pbb/v1/popup/campaigns?status[]=publish&status[]=draft&status[]=trash&subscribers=1" })
                                .then((t) => {
                                    if ("success" !== t.status) return;
                                    I(t.data);
                                    const e = t.data.map(({ id: t, title: e }) => ({ value: t, label: (0, j.A)(e) || "(no title)" }));
                                    F([...V, ...e]);
                                })
                                .catch((t) => {
                                    console.error(t);
                                }),
                                u()({ path: "/pbb/v1/subscribers?limit=1" })
                                    .then((t) => {
                                        "error" !== t.status && 0 !== t?.data?.length && Q(t?.data[0]?.date);
                                    })
                                    .catch((t) => {
                                        console.error(t);
                                    });
                        }, []);
                    const rt = { name: (0, _.__)("Name", "popup-builder-block"), email: (0, _.__)("Email", "popup-builder-block"), campaign_id: (0, _.__)("Campaign", "popup-builder-block"), date: (0, _.__)("Date", "popup-builder-block") },
                        lt = (t) => {
                            Y("delete"), H(!0), U(t);
                        },
                        ct = Math.ceil(nt.length / D.value);
                    return (0, n.jsxs)(n.Fragment, {
                        children: [
                            (0, n.jsx)("h3", { className: "pbb-subscribers-title", children: (0, _.__)("Subscribers", "popup-builder-block") }),
                            (0, n.jsxs)("div", {
                                className: "pbb-subscribers-table-wrapper",
                                ref: t,
                                children: [
                                    (0, n.jsxs)("div", {
                                        className: "pbb-subscribers-headers",
                                        children: [
                                            (0, n.jsxs)("div", {
                                                className: "pbb-subscribers-wrap",
                                                children: [
                                                    (0, n.jsx)("input", { className: "pbb-subscribers-search", type: "text", placeholder: "Search...", value: s, onChange: (t) => o(t.target.value) }),
                                                    (0, n.jsx)(k, { initialDateRange: J, value: tt, onChange: (t) => et(t) }),
                                                ],
                                            }),
                                            (0, n.jsxs)("div", {
                                                className: "pbb-subscribers-actions",
                                                children: [
                                                    (0, n.jsx)("div", { className: "pbb-subscribers-select", children: (0, n.jsx)(C.A, { options: V, value: N, onChange: (t) => R(t) }) }),
                                                    X
                                                        ? (0, n.jsxs)(n.Fragment, {
                                                              children: [
                                                                  (0, n.jsxs)("button", {
                                                                      className: "export-button",
                                                                      onClick: () => {
                                                                          const t = [Object.keys(rt).join(","), ...e.map(({ name: t, email: e, campaign_id: i, date: s }) => `${t},${e},${i},${s}`)].join("\n"),
                                                                              i = new Blob([t], { type: "text/csv" }),
                                                                              s = URL.createObjectURL(i),
                                                                              n = document.createElement("a");
                                                                          (n.href = s), (n.download = "data.csv"), n.click(), URL.revokeObjectURL(s);
                                                                      },
                                                                      children: [
                                                                          (0, _.__)("Export Data", "popup-builder-block"),
                                                                          (0, n.jsxs)("svg", {
                                                                              xmlns: "http://www.w3.org/2000/svg",
                                                                              width: "14",
                                                                              height: "14",
                                                                              viewBox: "0 0 14 14",
                                                                              fill: "none",
                                                                              children: [
                                                                                  (0, n.jsx)("path", {
                                                                                      d: "M7 13C10.3137 13 13 10.3137 13 7C13 3.68629 10.3137 1 7 1C3.68629 1 1 3.68629 1 7C1 10.3137 3.68629 13 7 13Z",
                                                                                      stroke: "#545558",
                                                                                      strokeWidth: "1.5",
                                                                                      strokeLinecap: "round",
                                                                                      strokeLinejoin: "round",
                                                                                  }),
                                                                                  (0, n.jsx)("path", { d: "M7 9.4V7", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                                  (0, n.jsx)("path", { d: "M7 4.59985H7.006", stroke: "#545558", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                              ],
                                                                          }),
                                                                      ],
                                                                  }),
                                                                  (0, n.jsx)(c.m_, {
                                                                      anchorSelect: ".export-button",
                                                                      place: "top-end",
                                                                      children:
                                                                          "Select a campaign name from the dropdown menu to view and export all the subscribers associated with it. Use the filters to narrow results by campaign and date.",
                                                                  }),
                                                              ],
                                                          })
                                                        : (0, n.jsxs)(n.Fragment, {
                                                              children: [
                                                                  (0, n.jsxs)("button", {
                                                                      style: { opacity: "0.5" },
                                                                      className: "export-button",
                                                                      onClick: () => {
                                                                          window.open("https://wpmet.com/plugin/popupkit/pricing/", "_blank");
                                                                      },
                                                                      children: [
                                                                          (0, _.__)("Export Data", "popup-builder-block"),
                                                                          (0, n.jsxs)("svg", {
                                                                              xmlns: "http://www.w3.org/2000/svg",
                                                                              width: "14",
                                                                              height: "14",
                                                                              viewBox: "0 0 14 14",
                                                                              fill: "none",
                                                                              children: [
                                                                                  (0, n.jsx)("path", {
                                                                                      d: "M7 13C10.3137 13 13 10.3137 13 7C13 3.68629 10.3137 1 7 1C3.68629 1 1 3.68629 1 7C1 10.3137 3.68629 13 7 13Z",
                                                                                      stroke: "#545558",
                                                                                      strokeWidth: "1.5",
                                                                                      strokeLinecap: "round",
                                                                                      strokeLinejoin: "round",
                                                                                  }),
                                                                                  (0, n.jsx)("path", { d: "M7 9.4V7", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                                  (0, n.jsx)("path", { d: "M7 4.59985H7.006", stroke: "#545558", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                              ],
                                                                          }),
                                                                      ],
                                                                  }),
                                                                  (0, n.jsx)(c.m_, { anchorSelect: ".export-button", place: "top-end", children: "Upgrade to Pro to export Subscribers data." }),
                                                              ],
                                                          }),
                                                    (0, n.jsx)("div", {
                                                        className: "pbb-subscribers-select rows-per-page",
                                                        children: (0, n.jsx)(C.A, {
                                                            options: [
                                                                { label: (0, _.__)("5 / page", "popup-builder-block"), value: 5 },
                                                                { label: (0, _.__)("10 / page", "popup-builder-block"), value: 10 },
                                                                { label: (0, _.__)("20 / page", "popup-builder-block"), value: 20 },
                                                                { label: (0, _.__)("30 / page", "popup-builder-block"), value: 30 },
                                                                { label: (0, _.__)("50 / page", "popup-builder-block"), value: 50 },
                                                            ],
                                                            isSearchable: !1,
                                                            value: D,
                                                            onChange: (t) => T(t),
                                                        }),
                                                    }),
                                                ],
                                            }),
                                        ],
                                    }),
                                    (0, n.jsx)("div", {
                                        className: "pbb-subscribers-table-wrapper",
                                        children: (0, n.jsxs)("table", {
                                            className: "wp-list-table widefat striped table-view-list posts pbb-subscribers-table",
                                            children: [
                                                (0, n.jsx)("thead", {
                                                    children: (0, n.jsxs)("tr", {
                                                        children: [
                                                            (0, n.jsxs)("td", {
                                                                id: "cb",
                                                                className: "manage-column column-cb check-column",
                                                                children: [
                                                                    (0, n.jsx)("input", {
                                                                        type: "checkbox",
                                                                        onChange: () => {
                                                                            if (0 === at.length) return;
                                                                            const t = at.map((t) => t.id),
                                                                                e = t.every((t) => g.includes(t));
                                                                            w(e ? g.filter((e) => !t.includes(e)) : [...new Set([...g, ...t])]);
                                                                        },
                                                                        checked: at.length > 0 && at.every((t) => g.includes(t.id)),
                                                                    }),
                                                                    (0, n.jsx)("label", {
                                                                        htmlFor: "cb-select-all-1",
                                                                        children: (0, n.jsx)("span", { className: "screen-reader-text", children: (0, _.__)("Select All", "popup-builder-block") }),
                                                                    }),
                                                                ],
                                                            }),
                                                            Object.keys(rt || {}).map((t) =>
                                                                (0, n.jsxs)("th", { onClick: () => (h(t), void m("asc" === p ? "desc" : "asc")), children: [rt[t], " ", d === t ? ("asc" === p ? "▲" : "▼") : ""] }, t)
                                                            ),
                                                            (0, n.jsx)("td", { "data-colname": "Actions", children: (0, _.__)("Actions", "popup-builder-block") }),
                                                        ],
                                                    }),
                                                }),
                                                (0, n.jsxs)("tbody", {
                                                    children: [
                                                        P.length > 0 &&
                                                            at.length > 0 &&
                                                            at.map((t) => {
                                                                const e = t.id,
                                                                    i = moment(t.date).format("YYYY-MM-DD [at] h:mm a");
                                                                let s = "(no title)",
                                                                    o = "#";
                                                                const a = P.filter((e) => e.id == t.campaign_id);
                                                                return (
                                                                    0 != a.length && ((s = a[0].title), (o = `${popupBuilderBlock?.adminUrl}post.php?post=${a[0].id}&action=edit`)),
                                                                    (s = (0, j.A)(s)),
                                                                    (0, n.jsxs)(
                                                                        "tr",
                                                                        {
                                                                            className: "iedit author-self level-0 post-2620 type-popup-builder-block status-publish hentry",
                                                                            children: [
                                                                                (0, n.jsxs)("th", {
                                                                                    scope: "row",
                                                                                    className: "check-column pbb-subscribers-checkbox",
                                                                                    children: [
                                                                                        (0, n.jsx)("input", {
                                                                                            type: "checkbox",
                                                                                            checked: g.includes(e),
                                                                                            onChange: () => {
                                                                                                return (t = e), void w((e) => (e.includes(t) ? e.filter((e) => e !== t) : [...e, t]));
                                                                                                var t;
                                                                                            },
                                                                                        }),
                                                                                        (0, n.jsx)("label", {
                                                                                            htmlFor: "cb-select-2630",
                                                                                            children: (0, n.jsx)("span", { className: "screen-reader-text", children: (0, _.__)("Select Easter", "popup-builder-block") }),
                                                                                        }),
                                                                                    ],
                                                                                }),
                                                                                (0, n.jsx)("td", { "data-colname": "Name", children: t.name || "(no name)" }),
                                                                                (0, n.jsx)("td", {
                                                                                    "data-colname": "Email",
                                                                                    children: X
                                                                                        ? (0, n.jsx)("a", { href: `mailto:${t.email}`, children: t.email })
                                                                                        : (0, n.jsx)("a", {
                                                                                              className: "email-pro",
                                                                                              target: "_blank",
                                                                                              href: "https://wpmet.com/plugin/popupkit/pricing/",
                                                                                              children: (0, _.__)("Upgrade To Pro", "popup-builder-block"),
                                                                                          }),
                                                                                }),
                                                                                (0, n.jsx)("td", { "data-colname": "Campaign", children: (0, n.jsx)("a", { href: o, children: s }) }),
                                                                                (0, n.jsx)("td", { "data-colname": "Date", children: i }),
                                                                                (0, n.jsxs)("td", {
                                                                                    "data-colname": "Actions",
                                                                                    children: [
                                                                                        X
                                                                                            ? (0, n.jsxs)(n.Fragment, {
                                                                                                  children: [
                                                                                                      (0, n.jsx)("button", {
                                                                                                          className: "details",
                                                                                                          onClick: () =>
                                                                                                              (async (t) => {
                                                                                                                  const e = P.filter((e) => e.id == t.campaign_id),
                                                                                                                      i = e?.[0]?.title || "Untitled Campaign",
                                                                                                                      s = JSON.parse(t.form_data),
                                                                                                                      n = JSON.parse(t.user_data);
                                                                                                                  O({ ...t, formData: s, userDetails: n, campaignTitle: i }), Y("userDetails"), H(!0);
                                                                                                              })(t),
                                                                                                          children: x,
                                                                                                      }),
                                                                                                      (0, n.jsx)(c.m_, { anchorSelect: ".details", place: "top", children: (0, _.__)("Details", "popup-builder-block") }),
                                                                                                  ],
                                                                                              })
                                                                                            : (0, n.jsxs)(n.Fragment, {
                                                                                                  children: [
                                                                                                      (0, n.jsx)("button", { className: "details pro", href: "https://wpmet.com/plugin/popupkit/pricing/", target: "_blank", children: x }),
                                                                                                      (0, n.jsx)(c.m_, {
                                                                                                          anchorSelect: ".details",
                                                                                                          place: "top-end",
                                                                                                          children: (0, _.__)("Upgrade to Pro to see the Subscriber's details.", "popup-builder-block"),
                                                                                                      }),
                                                                                                  ],
                                                                                              }),
                                                                                        (0, n.jsx)("button", {
                                                                                            className: "remove",
                                                                                            onClick: () => {
                                                                                                lt("single"), L(e);
                                                                                            },
                                                                                            children: v,
                                                                                        }),
                                                                                        (0, n.jsx)(c.m_, { anchorSelect: ".remove", place: "top", children: "Delete" }),
                                                                                    ],
                                                                                }),
                                                                            ],
                                                                        },
                                                                        e
                                                                    )
                                                                );
                                                            }),
                                                        Z && (0, n.jsx)("tr", { children: (0, n.jsx)("td", { style: { textAlign: "center" }, colSpan: Object.keys(rt).length + 2, children: (0, n.jsx)(b.Spinner, {}) }) }),
                                                        0 === at.length && !Z && (0, n.jsx)("tr", { children: (0, n.jsx)("td", { style: { textAlign: "center" }, colSpan: Object.keys(rt).length + 2, children: "No data found" }) }),
                                                    ],
                                                }),
                                            ],
                                        }),
                                    }),
                                    (0, n.jsxs)("div", {
                                        className: "pbb-subscribers-pagination",
                                        children: [
                                            (0, n.jsxs)("div", {
                                                className: "pbb-subscribers-bulk-actions",
                                                children: [
                                                    (0, n.jsxs)("span", { children: [(0, _.__)("Bulk Action:", "popup-builder-block"), " "] }),
                                                    (0, n.jsxs)("button", { onClick: () => lt("multiple"), disabled: 0 === g.length, children: [v, " ", (0, _.__)("Delete", "popup-builder-block")] }),
                                                ],
                                            }),
                                            (0, n.jsxs)("div", {
                                                className: "pbb-subscribers-pagination-buttons",
                                                children: [
                                                    (0, n.jsxs)("b", { children: [(0, _.__)("Page:", "popup-builder-block"), " "] }),
                                                    ct > 1 &&
                                                        (0, n.jsx)("button", {
                                                            className: "arrow-btn",
                                                            disabled: 1 === a,
                                                            onClick: () => r((t) => Math.max(t - 1, 1)),
                                                            children: (0, n.jsx)("svg", {
                                                                xmlns: "http://www.w3.org/2000/svg",
                                                                width: "8",
                                                                height: "12",
                                                                viewBox: "0 0 8 12",
                                                                fill: "none",
                                                                children: (0, n.jsx)("path", { d: "M6.5 11L1.5 6L6.5 1", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                            }),
                                                        }),
                                                    (() => {
                                                        const t = [],
                                                            e = Math.max(1, a - 3),
                                                            i = Math.min(ct, a + 3);
                                                        e > 1 &&
                                                            (t.push((0, n.jsx)("button", { onClick: () => r(1), className: 1 === a ? "active" : "", children: "1" }, 1)),
                                                            e > 2 && t.push((0, n.jsx)("span", { children: "..." }, "start-ellipsis")));
                                                        for (let s = e; s <= i; s++) t.push((0, n.jsx)("button", { onClick: () => r(s), className: a === s ? "active" : "", children: s }, s));
                                                        return (
                                                            i < ct &&
                                                                (i < ct - 1 && t.push((0, n.jsx)("span", { children: "..." }, "end-ellipsis")),
                                                                t.push((0, n.jsx)("button", { onClick: () => r(ct), className: a === ct ? "active" : "", children: ct }, ct))),
                                                            t
                                                        );
                                                    })(),
                                                    ct > 1 &&
                                                        (0, n.jsx)("button", {
                                                            className: "arrow-btn",
                                                            disabled: a === ct,
                                                            onClick: () => r((t) => Math.min(t + 1, ct)),
                                                            children: (0, n.jsx)("svg", {
                                                                xmlns: "http://www.w3.org/2000/svg",
                                                                width: "8",
                                                                height: "12",
                                                                viewBox: "0 0 8 12",
                                                                fill: "none",
                                                                children: (0, n.jsx)("path", { d: "M1.5 11L6.5 6L1.5 1", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                            }),
                                                        }),
                                                ],
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                            B &&
                                (0, n.jsxs)(y.A, {
                                    closeModal: st,
                                    className: "pbb-subscribers-details",
                                    children: [
                                        "userDetails" === W &&
                                            (0, n.jsxs)("div", {
                                                className: "pbb-subscribers-details-content",
                                                children: [
                                                    (0, n.jsx)("h3", { className: "pbb-subscribers-details-info-title", children: (0, _.__)("Form Details", "popup-builder-block") }),
                                                    (0, n.jsxs)("div", {
                                                        className: "pbb-subscribers-details-wrap",
                                                        children: [
                                                            (0, n.jsx)("span", {
                                                                className: "pbb-subscribers-details-info",
                                                                children: (0, n.jsxs)("p", { children: [(0, n.jsx)("strong", { children: (0, _.__)("Name:", "popup-builder-block") }), " ", (0, n.jsx)("br", {}), " ", E?.name] }),
                                                            }),
                                                            (0, n.jsx)("span", {
                                                                className: "pbb-subscribers-details-info",
                                                                children: (0, n.jsxs)("p", { children: [(0, n.jsx)("strong", { children: (0, _.__)("Email:", "popup-builder-block") }), "  ", (0, n.jsx)("br", {}), " ", E?.email] }),
                                                            }),
                                                            Object.keys(E?.formData).length > 0 &&
                                                                Object.keys(E.formData).map((t, e) =>
                                                                    (0, n.jsx)(
                                                                        "span",
                                                                        {
                                                                            className: "pbb-subscribers-details-info",
                                                                            children: (0, n.jsxs)("p", { children: [(0, n.jsxs)("strong", { children: ["tel" == t ? "Phone" : t, ":"] }), " ", (0, n.jsx)("br", {}), " ", E.formData[t]] }, e),
                                                                        },
                                                                        e
                                                                    )
                                                                ),
                                                        ],
                                                    }),
                                                    (0, n.jsx)("h3", { className: "pbb-subscribers-details-info-title title-wrap", children: (0, _.__)("User Details", "popup-builder-block") }),
                                                    (0, n.jsxs)("div", {
                                                        className: "pbb-subscribers-details-wrap",
                                                        children: [
                                                            (0, n.jsx)("span", {
                                                                className: "pbb-subscribers-details-info",
                                                                children: (0, n.jsxs)("p", {
                                                                    children: [(0, n.jsx)("strong", { children: (0, _.__)("Campaign Name:", "popup-builder-block") }), " ", (0, n.jsx)("br", {}), " ", E?.campaignTitle],
                                                                }),
                                                            }),
                                                            Object.keys(E?.userDetails).length > 0 &&
                                                                Object.keys(E.userDetails).map((t, e) =>
                                                                    (0, n.jsx)(
                                                                        "span",
                                                                        {
                                                                            className: "pbb-subscribers-details-info",
                                                                            children: (0, n.jsxs)("p", { children: [(0, n.jsxs)("strong", { children: [t, ":"] }), " ", (0, n.jsx)("br", {}), " ", E.userDetails[t]] }, e),
                                                                        },
                                                                        e
                                                                    )
                                                                ),
                                                        ],
                                                    }),
                                                    (0, n.jsx)("div", {
                                                        className: "pbb-subscribers-details-actions",
                                                        children: (0, n.jsx)("a", {
                                                            href: "#",
                                                            className: "close-btn",
                                                            onClick: st,
                                                            children: (0, n.jsxs)("svg", {
                                                                xmlns: "http://www.w3.org/2000/svg",
                                                                width: "12",
                                                                height: "12",
                                                                viewBox: "0 0 12 12",
                                                                fill: "none",
                                                                children: [
                                                                    (0, n.jsx)("path", { d: "M11 1L1 11", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                    (0, n.jsx)("path", { d: "M1 1L11 11", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                ],
                                                            }),
                                                        }),
                                                    }),
                                                ],
                                            }),
                                        "delete" === W &&
                                            (0, n.jsxs)("div", {
                                                className: "pbb-subscribers-details-content delete-confirmation",
                                                children: [
                                                    (0, n.jsx)("span", {
                                                        className: "alert-icon",
                                                        children: (0, n.jsxs)("svg", {
                                                            xmlns: "http://www.w3.org/2000/svg",
                                                            width: "38",
                                                            height: "37",
                                                            viewBox: "0 0 38 37",
                                                            fill: "none",
                                                            children: [
                                                                (0, n.jsx)("path", {
                                                                    d:
                                                                        "M6.97908 13.9293C11.3237 6.24157 13.496 2.39771 16.4769 1.40825C18.1167 0.863916 19.8832 0.863916 21.523 1.40825C24.504 2.39771 26.6763 6.24157 31.0209 13.9293C35.3656 21.6169 37.5378 25.4608 36.8862 28.5928C36.5277 30.3159 35.6444 31.8787 34.363 33.0575C32.0338 35.2 27.6893 35.2 19 35.2C10.3108 35.2 5.96615 35.2 3.63693 33.0575C2.35555 31.8787 1.47231 30.3159 1.1138 28.5928C0.462149 25.4608 2.63446 21.6169 6.97908 13.9293Z",
                                                                    stroke: "#FEAD0C",
                                                                    strokeWidth: "2",
                                                                }),
                                                                (0, n.jsx)("path", { d: "M18.9844 25.2998H19.0024", stroke: "#FEAD0C", strokeWidth: "2.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                (0, n.jsx)("path", { d: "M19 19.9002V12.7002", stroke: "#FEAD0C", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                            ],
                                                        }),
                                                    }),
                                                    (0, n.jsx)("h2", { className: "confirmation-title", children: (0, _.__)("Are you sure to delete this subscriber?", "popup-builder-block") }),
                                                    (0, n.jsx)("p", { className: "confirmation-description", children: (0, _.__)("Deleting this subscriber will remove all associated data.", "popup-builder-block") }),
                                                    (0, n.jsxs)("div", {
                                                        className: "confirmation-actions",
                                                        children: [
                                                            (0, n.jsxs)(b.Button, {
                                                                className: "confirm-btn",
                                                                onClick: () => {
                                                                    q(!0);
                                                                    const t = "single" === $ ? z : g,
                                                                        s = JSON.stringify(t);
                                                                    u()({ path: `/pbb/v1/subscribers?id=${s}`, method: "DELETE" })
                                                                        .then((s) => {
                                                                            Array.isArray(t) ? (i(e.filter((t) => !g.includes(t.id))), w([])) : i(e.filter((e) => e.id !== t)),
                                                                                q(!1),
                                                                                st(),
                                                                                S.oR.success("Subscribers removed successfully!", { autoClose: 2e3, pauseOnHover: !1 });
                                                                        })
                                                                        .catch((t) => {
                                                                            console.error(t), q(!1), S.oR.error("Failed to remove subscribers.", { autoClose: 2e3, pauseOnHover: !1 });
                                                                        });
                                                                },
                                                                children: [(0, _.__)("Yes, I'm Sure", "popup-builder-block"), K && (0, n.jsx)(b.Spinner, { style: { width: "12px", height: "12px", margin: "0px 0 0 6px" } })],
                                                            }),
                                                            (0, n.jsx)(b.Button, { className: "cancel-btn", onClick: st, children: (0, _.__)("Cancel", "popup-builder-block") }),
                                                        ],
                                                    }),
                                                ],
                                            }),
                                    ],
                                }),
                        ],
                    });
                },
                D = (0, l.createContext)(null),
                T = () => {
                    const t = (0, l.useContext)(D);
                    if (!t) throw new Error("Analytics not found!");
                    return t;
                },
                E = {},
                O = function ({ type: t }) {
                    const { campaignId: e, dateRange: i } = T(),
                        [s, n] = (0, l.useState)([]),
                        [o, a] = (0, l.useState)(!0),
                        r = JSON.stringify({ type: t, campaignId: e?.value || "", startDate: i?.start?.format("YYYY-MM-DD"), endDate: i?.end?.format("YYYY-MM-DD") });
                    return (
                        (0, l.useEffect)(() => {
                            if (!i?.start || !i?.end) return;
                            if (E[r]) return n(E[r]), void a(!1);
                            const s = { startDate: i.start.format("YYYY-MM-DD"), endDate: i.end.format("YYYY-MM-DD"), type: t };
                            e?.value && (s.campaignId = e.value);
                            const o = (0, M.addQueryArgs)("/pbb/v1/popup/logs", s);
                            u()({ path: o })
                                .then((t) => {
                                    "success" === t.status && ((E[r] = t.data), n(t.data)), a(!1);
                                })
                                .catch((t) => {
                                    console.error(t), a(!1);
                                });
                        }, [r]),
                        { data: s, isLoading: o }
                    );
                },
                P = function () {
                    return (0, n.jsx)("div", { style: { textAlign: "center" }, children: (0, n.jsx)(b.Spinner, {}) });
                },
                I = () => {
                    const t = (0, l.useRef)(null),
                        { data: e, isLoading: i } = O({ type: "devices" }),
                        s = e.length > 0;
                    return (
                        (0, l.useEffect)(() => {
                            const i = t.current?.getContext("2d");
                            let n = null;
                            if (i && s) {
                                const t = ["rgba(47, 42, 42, 0.5)", "rgba(54, 163, 235, 0.5)", "rgba(255, 204, 86, 0.5)"];
                                n = new Chart(i, {
                                    type: "doughnut",
                                    data: { labels: ["Desktop", "Tablet", "Mobile"], datasets: [{ label: "Views", data: [e[0]?.desktop, e[0]?.tablet, e[0]?.mobile], backgroundColor: t, borderWidth: 1, hoverOffset: 4 }] },
                                    options: { plugins: { tooltip: { mode: "index", intersect: !1 } }, animation: { duration: 1e3, easing: "easeInSine" }, responsive: !0, maintainAspectRatio: !1 },
                                });
                            }
                            return () => {
                                n && n.destroy();
                            };
                        }, [e]),
                        (0, n.jsxs)("div", {
                            className: "pbb-analytics-device",
                            children: [
                                (0, n.jsx)("h3", { className: "pbb-analytics-statistics__title", children: (0, _.__)("Devices", "popup-builder") }),
                                (0, n.jsx)("div", {
                                    className: "chart-container",
                                    children: i ? (0, n.jsx)(P, {}) : s ? (0, n.jsx)("canvas", { id: "chart-canvas", ref: t }) : (0, n.jsx)("p", { children: (0, _.__)("No data found", "popup-builder") }),
                                }),
                            ],
                        })
                    );
                },
                N = [
                    {
                        d:
                            "m 479.68275,331.6274 -0.077,0.025 -0.258,0.155 -0.147,0.054 -0.134,0.027 -0.105,-0.011 -0.058,-0.091 0.006,-0.139 -0.024,-0.124 -0.02,-0.067 0.038,-0.181 0.086,-0.097 0.119,-0.08 0.188,0.029 0.398,0.116 0.083,0.109 10e-4,0.072 -0.073,0.119 z",
                        title: "Andorra",
                        id: "AD",
                    },
                    {
                        d:
                            "m 632.89475,388.8674 0.184,0.251 0.026,1.701 0.042,0.121 -0.098,0.018 -0.11,0.129 -0.129,0.199 -0.177,0.103 -0.142,0.116 -0.134,0.144 -0.12,0.031 -0.155,-0.183 -0.107,-0.187 0.026,-0.041 0.075,-0.013 0.028,-0.097 -0.045,-0.14 -0.105,-0.053 -0.132,-0.004 -0.127,0.063 -0.135,0.124 -0.076,0.133 -0.011,0.267 0.035,0.3 -10e-4,0.146 -0.074,0.181 -0.026,0.266 0.053,0.206 0.048,0.123 0.005,0.104 -0.126,0.328 0.109,0.062 0.361,0.023 0.106,0.222 0.072,0.152 -0.02,0.09 -0.256,0.067 -0.322,0.074 -0.231,-0.021 -0.418,0.1 -0.223,0.154 0.065,0.096 0.077,0.074 0.035,0.203 -0.065,0.288 -0.118,0.279 -0.147,0.348 -0.17,0.399 -0.233,0.6 -0.197,0.471 -0.021,0.339 0.005,0.221 -0.022,0.441 -0.187,0.243 -0.042,0.007 -0.223,-0.029 -0.075,-0.01 -0.213,-0.028 -0.33,-0.043 -0.429,-0.057 -0.507,-0.066 -0.565,-0.075 -0.604,-0.08 -0.625,-0.082 -0.624,-0.082 -0.605,-0.08 -0.565,-0.074 -0.507,-0.067 -0.428,-0.057 -0.33,-0.043 -0.213,-0.028 -0.075,-0.01 -0.236,-0.031 -0.127,-0.164 -0.154,-0.198 -0.155,-0.199 -0.154,-0.199 -0.154,-0.199 -0.154,-0.199 -0.154,-0.199 -0.154,-0.199 -0.154,-0.199 -0.154,-0.2 -0.154,-0.199 -0.155,-0.2 -0.154,-0.2 -0.154,-0.2 -0.154,-0.2 -0.154,-0.2 -0.154,-0.2 -0.104,-0.134 -0.057,-0.151 -0.011,-0.396 0,-0.087 0.104,-0.16 0.05,0.114 0.116,0.155 0.197,-0.038 0.092,0.026 0.068,0.549 0.145,0.195 0.176,0.078 0.597,0.043 0.371,-0.074 0.731,-0.358 0.384,-0.129 1.062,0.022 0.851,0.149 1.325,0.088 0.257,-0.023 0.715,-0.288 0.438,-0.254 0.261,-0.073 0.172,-0.246 0.113,-0.32 0.101,-0.209 0.129,-0.1 0.122,-0.178 0.099,-0.289 0.246,-0.292 0.986,-0.711 0.576,-0.602 0.051,-0.195 0.313,-0.292 0.251,-0.32 1.175,-0.916 0.235,-0.379 0.139,-0.425 0.017,-0.03 0.101,-0.018 0.144,0.064 0.015,0.318 -0.053,0.3 -0.006,0.318 -0.021,0.172 0.109,0.141 0.186,0.061 0.081,-0.007 0.048,-0.071 z m -0.046,1.283 0.017,-0.133 -0.029,-0.069 -0.12,-0.009 -0.05,0.115 -0.017,0.165 0.083,0.014 0.116,-0.083 z m -5.096,2.438 -0.025,0.06 -0.079,-0.005 -0.198,-0.054 -0.064,-0.086 0.124,-0.103 0.055,-0.005 0.079,0.108 0.108,0.085 z m -3.181,0.564 -0.208,0.017 -0.188,-0.116 0.397,-0.155 0.107,-0.07 0.116,-0.143 0.093,0.123 -0.103,0.193 -0.073,0.083 -0.141,0.068 z m -2.008,-0.091 -0.047,0.022 -0.05,-0.165 0.003,-0.052 0.129,-0.075 0.079,0.135 -0.114,0.135 z m 3.679,0.34 10e-4,0.104 -0.285,-0.03 -0.076,0.054 -0.234,-0.03 -0.229,-0.075 0.155,-0.125 0.404,-0.147 0.168,0.134 0.096,0.115 z",
                        title: "United Arab Emirates",
                        id: "AE",
                    },
                    {
                        d:
                            "m 685.07675,350.8434 -0.144,0.023 -0.204,-0.084 -0.08,-0.128 -0.034,-0.018 -0.162,0.084 -0.309,0.106 -0.524,0.277 0.012,0.071 0.341,0.281 0.08,0.093 0.042,0.029 -0.309,0.135 -0.664,0.304 -0.437,0.248 -0.104,0.009 -0.264,-0.104 -0.39,-0.124 -0.104,0.002 -0.9,0.021 -0.827,0.046 -0.344,0.06 -0.639,0.057 -0.402,0.02 -0.257,0.096 -0.281,0.126 -0.292,0.082 -0.217,0.027 -0.261,0.118 -0.172,0.234 -0.491,0.346 -0.276,0.167 -0.139,0.189 -0.158,0.018 -0.27,-0.034 -0.209,0.204 -0.231,0.292 -0.423,0.423 -0.225,0.171 -0.134,0.276 0.099,0.143 0.344,0.214 0.154,0.202 0.084,0.16 0.157,0.41 0.1,0.403 0.148,0.174 0.043,0.295 0.038,0.181 -0.081,0.129 -0.074,0.143 0,0.136 0.089,0.14 0.078,0.124 0.043,0.099 -0.053,0.11 -0.157,0.168 -0.08,0.172 -0.174,0.287 -0.272,0.196 -0.18,0.142 -0.191,0.3 -0.316,0.333 -0.133,0.278 -0.139,0.153 -0.143,0.082 0.037,0.15 0.124,0.187 0.205,0.209 -0.009,0.325 -0.01,0.234 0.007,0.283 -0.112,0.238 -0.57,0.228 -0.546,0.1 -0.669,0.006 -0.253,-0.036 -0.202,-0.05 -0.726,-0.256 -0.295,0.151 -0.061,0.369 0.53,0.598 0.217,0.333 0.241,0.556 0.18,0.286 -0.064,0.268 -0.48,0.304 -0.477,0.285 -0.608,0.059 -0.382,0.102 -0.185,0.147 -0.136,0.623 -0.137,0.228 0.003,0.271 -0.129,0.307 -0.195,0.197 -0.137,0.322 0.043,0.609 0.064,1.03 -0.259,0.324 -0.292,0.328 -0.308,0.234 -0.293,0.108 -0.243,-0.04 -0.192,-0.202 -0.114,-0.17 -0.212,-0.142 -0.216,0.029 -0.217,0.13 -0.347,-0.043 -0.296,-0.13 -0.15,0.014 -0.086,0.131 -0.317,0.28 -0.778,0.425 -0.318,0.031 -0.136,0.106 0.054,0.174 0.139,0.142 0.243,0.1 0.012,0.116 -0.214,0.101 -0.183,0.115 -0.403,0.141 -0.465,0.055 -0.48,-0.082 -0.247,-0.187 -0.292,-0.018 -0.266,0.137 -0.275,0.226 -0.3,0.484 -0.08,0.085 -0.081,0.077 -0.196,0.104 -0.281,0.17 -0.141,0.356 -0.169,0.633 0.04,0.34 0.013,0.589 -0.066,0.413 -0.122,0.271 0.024,0.213 0.186,0.242 -0.075,0.157 -0.156,0.174 -0.151,0.097 -0.605,0.183 -0.829,0.249 -0.548,0.16 -0.815,0.238 -0.238,0.058 -0.496,0.021 -0.257,-0.036 -0.348,-0.01 -0.512,0.009 -0.357,0.065 -0.358,0.119 -0.264,0.15 -0.152,0.148 -0.054,0.071 -0.359,-0.122 -1.131,-0.218 -3.063,0.288 -0.289,-0.055 -1.045,-0.337 -1.347,-0.434 -0.833,-0.269 -1.069,-0.352 0.732,-0.87 0.638,-0.76 0.64,-0.764 0.63,-0.755 0.075,-0.265 0.01,-0.519 -0.166,-0.695 -0.267,-0.317 -0.881,-0.128 -0.661,-0.097 -0.721,-0.105 -0.092,-0.039 -0.082,-0.543 0.035,-0.242 -0.047,-0.469 0.007,-0.362 0.104,-0.595 0.006,-0.269 -0.333,-1.161 -0.186,-0.645 -0.19,-0.667 -0.041,-0.213 -0.004,-0.263 0.442,-0.62 0.137,-0.135 0.259,-0.309 0.162,-0.165 -0.028,-0.113 -0.282,-0.065 -0.426,-0.006 -0.227,-0.094 -0.177,-0.169 -0.07,-0.246 0.116,-0.437 -0.116,-0.851 0.237,-0.422 0.204,-0.295 0.692,-0.042 -0.24,-0.334 -0.116,-0.194 -0.074,-0.056 -0.028,-0.089 0.037,-0.09 0.177,-0.034 0.12,-0.112 0.195,-0.157 0.102,-0.068 0.018,-0.191 0.093,-0.134 0.14,-0.169 0.111,-0.192 -0.028,-0.225 0.102,-0.27 0.047,-0.17 0.074,-0.147 -0.065,-0.214 -0.056,-0.181 -0.018,-0.215 0.111,-0.057 0.14,-0.079 0.027,-0.17 0.074,-0.215 0.056,-0.171 0.093,-0.135 0.01,-0.137 -0.056,-0.227 0.231,-0.034 0.093,0.125 0.124,0.162 0.339,0.302 0.22,0.088 0.277,0.044 0.341,-0.041 0.272,-0.057 0.128,0.015 0.297,0.219 0.347,0.307 0.111,0.137 0.052,0.209 0.102,0.062 0.222,-0.207 0.214,-0.068 0.197,0.039 0.217,0.023 0.218,-0.076 0.097,-0.055 0.379,-0.268 0.344,-0.204 0.214,-0.125 0.077,-0.42 0.099,-0.239 0.141,-0.139 -0.052,-0.173 -0.059,-0.132 -0.06,-0.179 0.06,-0.095 0.137,-0.042 0.344,0 0.605,-0.189 0.504,-0.189 0.466,-0.154 0.212,-0.025 0.201,0.026 0.092,-0.045 0.025,-0.147 0.114,-0.155 0.259,-0.126 0.487,-0.267 0.43,-0.397 0.153,-0.302 0.104,-0.441 0.201,-0.682 0.222,-0.749 0.082,-0.331 0.094,-0.255 0.38,-0.215 0.388,-0.156 0.601,-0.031 0.705,-0.016 0.149,-0.411 0.093,-0.35 0.117,-0.181 0.171,-0.147 0.06,-0.029 0.38,0.215 0.583,0.329 0.679,0.164 0.341,0.082 0.142,-0.013 0.857,-0.08 0.677,0.128 0.355,0.35 0.349,0.089 0.342,-0.169 0.212,-0.031 0.082,0.109 0.17,0.046 0.26,-0.017 0.15,0.097 0.016,0.097 0.02,0.112 0.192,0.266 0.347,0.323 0.308,0.078 0.405,-0.251 0.137,0.029 0.067,-0.081 0.041,-0.183 0.245,-0.172 0.448,-0.161 0.254,-0.144 0.091,-0.119 0.151,-0.034 0.165,0.036 0.118,-0.045 0.041,-0.113 0.047,-0.049 0.084,-0.04 0.075,-0.02 0.136,0.031 0.251,0.206 0.366,0.38 0.238,0.174 0.109,-0.029 0.14,-0.117 0.171,-0.202 0.042,-0.292 -0.085,-0.381 0.058,-0.308 0.203,-0.234 0.375,-0.144 0.547,-0.055 0.336,0.033 0.124,0.121 0.168,0.066 0.211,0.013 0.194,-0.137 0.175,-0.289 0.01,-0.357 -0.155,-0.427 0.042,-0.136 0.067,-0.059 0.21,-0.155 0.293,-0.321 0.283,-0.414 0.273,-0.508 0.337,-0.314 0.401,-0.121 0.486,0.138 0.573,0.396 0.215,0.486 -0.14,0.577 -0.012,0.316 0.116,0.059 0.196,-0.016 0.275,-0.09 0.18,-0.005 0.085,0.082 -0.005,0.162 -0.096,0.243 -0.115,0.681 -0.071,0.588 -0.071,0.577 -0.061,0.506 0.109,0.394 0.166,0.594 0.187,0.392 0.191,0.125 0.192,0.045 0.191,-0.035 0.393,-0.252 0.593,-0.468 0.576,-0.288 0.838,-0.162 0.281,-0.503 0.388,-0.333 0.886,-0.495 0.481,-0.19 0.277,-0.032 0.346,0.089 0.079,0.032 0.068,0.024 0.179,0.041 0.037,0.151 -0.047,0.163 -0.191,0.134 -0.061,0.104 0.073,0.078 0.27,0.027 0.559,-0.181 0.362,-0.116 0.251,-0.046 0.101,-0.151 0.158,-0.152 0.251,-0.011 0.269,0.081 0.223,0.047 0.379,-0.043 0.2,0.132 0.28,0.249 0.126,0.155 z",
                        title: "Afghanistan",
                        id: "AF",
                    },
                    {
                        d:
                            "m 301.68975,414.7024 -0.09,0.116 -0.313,-0.047 -0.063,-0.145 -0.014,-0.102 0.196,-0.207 0.221,0.088 0.085,0.098 0.063,0.02 -10e-4,0.083 -0.024,0.061 -0.06,0.035 z m -0.087,-1.572 -0.042,0.077 -0.229,-0.139 -0.07,-0.261 0.007,-0.055 0.039,-0.029 0.091,0.05 0.121,0.019 0.077,0.085 0.006,0.253 z",
                        title: "Antigua and Barbuda",
                        id: "AG",
                    },
                    { d: "m 298.08375,411.2344 -0.446,0.148 0.018,-0.085 0.358,-0.203 0.13,0.014 z", title: "Anguilla", id: "AI" },
                    {
                        d:
                            "m 531.20475,331.4604 0.111,0.086 0.231,0.374 0.153,0.33 0.303,0.114 0.168,0.128 0.217,0.195 0.104,0.195 0.148,0.597 0.017,0.36 -0.043,0.164 -0.036,0.043 -0.135,0.584 0.032,0.297 -10e-4,0.196 -0.114,0.077 -0.076,0.123 0.123,0.484 -0.015,0.207 0.006,0.236 0.221,0.538 0.131,0.166 0.116,0.079 0.15,0.494 0.088,0.085 0.363,-0.047 0.178,0.055 0.071,0.117 0.016,0.08 -0.024,0.276 0.09,0.212 0.121,0.218 0,0.133 -0.082,0.218 -0.145,0.253 -0.192,0.098 -0.212,0.082 -0.102,0.197 -0.051,0.209 -0.095,0.155 -0.058,0.17 -0.091,0.346 -0.021,0.125 -0.143,0.127 -0.222,0.052 -0.2,0.011 -0.134,0.059 -0.069,0.118 -0.127,0.095 -0.076,0.042 0,0.105 0.092,0.219 0.105,0.178 0.003,0.142 -0.052,0.04 -0.163,-0.018 -0.034,0.052 -0.018,0.16 -0.043,0.135 -0.067,0.083 -0.116,0.09 -0.213,-0.029 -0.2,-0.136 -0.104,-0.042 -0.06,0.004 -0.016,-0.333 -0.087,-0.259 -0.316,-0.625 -1.031,-0.608 -0.243,-0.274 -0.106,-0.231 -0.107,-0.218 0.102,-0.006 0.101,0.055 0.129,0.067 0.053,-0.109 -0.056,-0.239 -0.266,-0.558 -0.02,-0.154 0.13,-0.468 0.217,-0.527 -0.014,-0.64 0.067,-0.485 -0.075,-0.315 -0.036,-0.386 0.159,-0.515 0.137,-0.127 0.084,-0.164 0.005,-0.55 -0.307,-0.258 -0.353,-0.048 0.008,-0.187 0.044,-0.297 -0.025,-0.099 0.026,-0.17 -0.086,-0.226 -0.14,-0.164 0.135,-0.289 0.198,-0.351 0.184,-0.278 0.223,-0.29 0.149,-0.278 0.159,-0.241 0.138,-0.073 0.068,0.051 0.037,0.105 -0.009,0.31 0.047,0.107 0.095,0.079 0.201,-0.039 0.222,-0.077 0.3,-0.164 z",
                        title: "Albania",
                        id: "AL",
                    },
                    {
                        d:
                            "m 605.37075,344.8974 -0.485,-0.021 -0.414,0.156 -0.156,-0.031 -0.104,-0.277 -0.089,-0.225 -0.264,-0.579 0.071,-0.237 -0.147,-0.137 -0.354,-0.247 -0.091,-0.102 0.05,-0.141 0.035,-0.257 -0.034,-0.208 -0.096,-0.063 -0.177,-0.004 -0.215,0.052 -0.432,0.201 -0.3,-0.128 -0.173,-0.129 -0.101,-0.108 -0.225,0.09 -0.055,-0.043 -0.012,-0.268 -0.068,-0.145 -0.135,-0.169 -0.126,-0.081 -0.461,0.167 -0.277,0.057 -0.097,-0.156 -0.487,-0.514 -0.451,-0.395 -0.31,-0.163 -0.312,0.017 -0.484,0.079 -0.178,-0.033 -0.422,-0.172 -0.352,-0.205 0.048,-0.085 0.074,-0.062 -0.089,-0.267 -0.196,-0.43 0.021,-0.135 -0.062,-0.186 -0.068,-0.141 0.276,-0.337 0.126,-0.271 0.028,-0.265 -0.074,-0.275 -0.182,-0.499 -0.112,-0.145 -0.208,-0.136 -0.175,-0.222 -0.044,-0.157 0.147,-0.031 0.429,-0.004 0.416,-0.054 0.326,-0.104 0.472,-0.087 0.194,-0.078 0.227,-0.037 0.689,0.083 0.258,-0.064 0.776,-0.012 0.02,-0.033 -0.105,-0.106 10e-4,-0.04 0.462,-0.067 0.072,-0.05 0.06,0.168 0.174,0.187 0.189,0.075 0.102,0.103 0.005,0.078 -0.335,0.095 -0.023,0.047 0.022,0.046 0.1,0.023 0.47,0.234 0.268,0.005 0.141,0.071 0.07,0.14 0.224,0.19 0.179,0.184 0.011,0.063 -0.034,0.093 -0.5,0.359 -0.063,0.124 -0.008,0.131 0.219,0.389 0.323,0.424 0.466,0.322 0.643,0.349 0.008,0.216 -0.102,0.256 -0.087,0.174 -0.04,0.118 -0.078,0.049 -0.64,-0.011 -0.096,0.042 -0.042,0.05 -0.003,0.042 0.23,0.078 0.359,0.273 0.207,0.265 0.215,0.116 0.241,0.211 0.193,0.196 0.301,0.254 0.335,-0.083 0.448,0.226 0.019,0.153 -0.028,0.137 -0.282,0.149 -0.035,0.062 0,0.052 0.037,0.073 0.165,0.122 0.195,0.181 0.219,0.27 -0.098,0.081 -0.205,0.012 -0.159,-0.033 -0.056,0.055 0.003,0.088 0.208,0.205 0.041,0.149 -0.009,0.259 0.014,0.329 z m -4.117,-7.736 0.014,-0.099 -0.021,-0.089 -0.075,-0.028 -0.092,0.023 -0.007,0.099 0.028,0.094 0.093,0.042 0.06,-0.042 z m 1.484,1.519 -0.107,0.061 -0.1,-0.027 0,-0.152 0.072,-0.061 0.083,0.003 0.079,0.055 -0.027,0.121 z",
                        title: "Armenia",
                        id: "AM",
                    },
                    {
                        d:
                            "m 511.58375,475.8564 -0.043,0.045 -0.308,0.124 -0.331,0.116 -0.435,0.472 -0.22,0.204 -0.064,0.051 -0.199,0.113 -0.144,0.097 0.005,0.053 0.096,0.062 0.098,0.102 -0.01,0.771 -0.042,0.76 -0.054,0.064 -0.276,0.025 -0.367,0.053 -0.117,0.034 -0.041,-0.075 -0.123,-0.278 0.069,-0.264 0.074,-0.197 -0.083,-0.401 -0.187,-0.357 -0.198,-0.453 -0.061,-0.087 0.167,-0.146 0.251,-0.32 0.105,-0.166 0.291,-0.037 0.108,-0.116 0.077,-0.186 0.03,-0.108 0.328,-0.088 0.394,-0.157 0.218,-0.172 0.221,-0.11 0.14,-0.004 0.092,0.045 0.253,0.298 0.215,0.188 0.071,0.045 z m 30.573,17.559 0.062,0.372 0.061,0.517 0.043,0.372 0.044,0.167 0.015,0.089 -0.049,0.096 -0.04,0.223 -0.079,0.198 -0.044,0.138 0.037,0.254 -0.03,0.364 -0.031,0.385 -0.01,0.371 0.105,0.664 -0.015,0.204 -0.131,0.348 -0.099,0.264 -0.064,0.306 -0.012,0.16 0.24,0.452 -0.014,0.09 -0.184,0.028 -0.152,0.008 -0.582,0 -0.834,0 -0.834,0 -0.834,0 -0.767,0 -0.734,0 -0.647,0 0,0.446 0,0.92 0,0.921 0,0.922 0,0.924 0,0.925 0,0.926 0,0.927 0,0.929 0,0.671 0.169,0.892 0.31,0.972 0.121,0.09 0.312,0.179 0.433,0.366 0.243,0.277 0.494,0.481 0.657,0.614 0.633,0.551 0.559,0.486 -0.877,0.171 -1.247,0.242 -0.841,0.164 -1.021,0.199 -0.68,0.125 -0.847,0.155 -0.135,-0.003 -0.227,-0.107 -0.49,-0.021 -0.576,0.148 -0.457,0.04 -0.338,-0.068 -0.33,-0.129 -0.322,-0.191 -0.557,-0.07 -0.793,0.052 -0.764,-0.037 -0.736,-0.126 -0.526,-0.05 -0.317,0.027 -0.34,-0.041 -0.363,-0.109 -0.303,-0.185 -0.364,-0.39 -0.285,-0.372 -0.074,-0.053 -0.09,-0.057 -0.089,-0.017 -0.808,-0.01 -0.767,-0.009 -0.439,-10e-4 -1.074,-0.001 -1.074,-10e-4 -1.074,-0.002 -1.074,-0.001 -1.074,-0.002 -1.074,-10e-4 -1.074,-0.002 -1.074,-10e-4 -0.57,-10e-4 -0.53,0.03 -0.585,0.032 -0.084,-0.014 -0.139,-0.045 -0.095,-0.082 -0.315,-0.211 -0.274,-0.16 -0.373,-0.27 -0.241,-0.295 -0.203,-0.094 -0.359,-0.053 -0.27,-0.052 -0.22,-0.012 -0.387,0.139 -0.292,0.138 -0.208,0.133 -0.361,0.152 -0.304,0.152 -0.53,-0.02 -0.115,0.022 -0.295,-0.01 -0.278,-0.133 -0.282,0.012 -0.313,0.169 -0.448,0.066 0.104,-1.103 0.109,-0.487 0.003,-0.582 -0.064,-1.504 -0.077,-0.207 -0.052,-0.242 0.277,-0.184 0.141,-0.141 0.191,-0.249 0.136,-0.349 0.16,-0.768 0.582,-1.763 0.276,-1.723 0.35,-0.814 0.131,-0.912 0.974,-1.175 0.24,-0.721 0.504,-0.353 0.713,-0.376 0.508,-0.669 0.246,-0.463 0.28,-0.887 -0.003,-0.925 0.178,-1.233 -0.039,-0.354 -0.266,-0.49 -0.049,-0.35 -0.247,-0.344 -0.264,-0.26 -0.124,-0.464 -0.458,-0.731 -0.125,-0.487 -0.219,-0.35 -0.035,-0.431 -0.115,-0.456 -0.224,-0.45 -0.209,-0.515 0,-0.161 0.136,-0.194 0.129,-0.063 -0.043,0.098 -0.086,0.115 0.021,0.089 0.856,-0.902 0.054,-0.176 -0.029,-0.197 -0.004,-0.241 0.034,-0.28 -0.808,-1.661 -0.641,-1.542 -0.109,-0.779 -0.848,-1.023 -0.334,-0.665 -0.19,-0.466 -0.143,-0.176 0.054,-0.089 0.218,-0.023 0.486,-0.108 0.666,-0.118 0.615,-0.27 0.164,-0.12 0.326,-0.024 0.332,0.072 0.123,-0.052 0.07,-0.004 0.779,0 0.324,-0.018 0.601,0.005 0.379,0.022 0.216,0.03 0.583,0.047 0.728,-0.011 0.257,-0.024 0.954,-0.016 0.942,-0.016 0.847,-0.014 0.936,0.003 0.716,0.002 0.326,0.097 0.296,0.184 0.135,0.167 0.064,0.074 0.088,0.176 0.162,0.14 0.058,0.216 -0.047,0.293 0.023,0.353 0.094,0.412 0.197,0.432 0.298,0.454 0.13,0.36 -0.039,0.267 0.092,0.282 0.222,0.297 0.162,0.157 0.094,0.119 0.252,0.456 0.467,0.728 0.35,0.546 0.123,0.065 0.179,-0.023 0.38,-0.054 0.376,-0.011 0.269,0.112 0.108,-0.019 0.405,-0.217 0.402,-0.066 0.42,-0.09 0.219,-0.092 0.255,0 0.687,0.175 0.13,0.009 0.556,0 0.556,-0.098 0.082,-0.732 0.005,-0.145 0.134,-0.275 0.17,-0.24 0.021,-0.229 -0.01,-0.313 0.123,-0.379 0.373,-0.302 0.603,-0.143 0.343,-0.028 0.541,-0.084 0.82,-0.085 0.303,0.011 0.024,0.043 -0.174,0.524 -0.003,0.171 0.063,0.173 0.139,0.094 0.851,0.01 0.784,0.01 0.899,0.033 0.674,0.024 0.086,0.026 0.068,0.039 0.1,0.26 -0.022,0.508 -0.15,0.742 0.058,0.694 0.267,0.646 0.027,0.993 -0.094,0.593 -0.119,0.748 -0.046,0.849 0.122,0.355 0.258,0.371 0.394,0.389 0.305,0.503 0.216,0.619 0.078,0.39 -0.058,0.161 0.004,0.278 0.067,0.396 -0.075,0.263 -0.216,0.129 -0.072,0.178 0.109,0.342 0.027,0.311 0.085,0.119 0.062,0.086 0.102,0.013 0.219,-0.111 0.262,-0.207 0.21,-0.087 0.296,0.011 0.416,0.059 0.734,0.021 0.226,-0.037 0.683,-0.279 0.179,-0.021 0.27,0.026 0.383,0.083 0.386,0.017 0.188,-0.086 0.017,-0.113 0.06,-0.147 0.104,-0.055 z",
                        title: "Angola",
                        id: "AO",
                    },
                    {
                        d:
                            "m 299.06575,526.5414 0.071,0.083 -0.001,0.087 0.237,0.178 0.474,0.271 0.444,0.523 0.414,0.777 0.389,0.576 0.363,0.372 0.334,0.264 0.305,0.154 0.163,0.125 0.021,0.096 0.285,0.199 0.549,0.303 0.347,0.303 0.146,0.302 0.542,0.313 0.939,0.322 0.683,0.154 0.426,-0.014 0.611,0.257 0.796,0.53 0.486,0.368 0.175,0.205 0.521,0.333 1.3,0.689 0.573,0.173 0.272,0.158 0.161,0.2 0.159,0.062 0.157,-0.078 0.326,0.072 0.496,0.222 0.388,0.269 0.499,0.593 0.159,0.237 0.067,0.212 -0.024,0.187 -0.152,0.2 -0.28,0.212 -0.083,0.093 -0.006,0.089 -0.071,0.179 -0.232,0.382 -0.059,0.178 -0.013,0.132 -0.147,0.144 -0.391,0.266 -0.081,0.129 -0.02,0.139 -0.049,0.083 -0.053,0.035 -0.075,0.139 -0.061,0.231 -0.006,0.296 0.048,0.362 -0.01,0.117 -0.086,0.062 -0.049,0.084 -0.017,0.169 -0.074,0.124 -0.129,0.079 -0.048,0.09 0.034,0.103 -0.095,0.101 -0.224,0.1 -0.137,0.146 -0.051,0.191 -0.125,0.171 -0.199,0.151 -0.065,0.201 0.104,0.372 1.226,-0.129 0.999,0.136 1.182,0.358 0.784,0.125 0.387,-0.108 0.287,0.015 0.187,0.139 0.251,0.028 0.315,-0.082 0.261,0.063 0.206,0.208 0.187,-0.052 0.168,-0.31 0.193,-0.227 0.218,-0.142 0.271,-0.043 0.325,0.057 0.259,0.114 0.194,0.171 0.211,-0.005 0.229,-0.181 0.11,-0.217 -0.01,-0.253 0.091,-0.181 0.191,-0.109 0.129,-0.147 0.067,-0.186 0.227,-0.113 0.387,-0.041 0.203,-0.091 0.018,-0.141 0.114,-0.13 0.211,-0.119 0.145,-0.148 0.078,-0.177 0.127,-0.112 0.178,-0.045 0.198,-0.373 0.217,-0.698 0.129,-0.942 0.045,-1.333 0.219,10e-4 0.102,0.099 0.162,0.051 0.17,-0.112 0.145,-0.052 0.229,-0.004 0.124,-0.126 0.145,-0.02 0.099,0.068 0.096,0.083 0.204,0.019 0.162,0.216 0.178,0.066 0.076,0.248 0.115,0.653 0.214,0.386 0.212,0.44 0.008,0.196 -0.119,0.198 -0.02,0.285 -0.074,0.697 -0.025,0.257 0.074,0.175 0.027,0.245 -0.115,0.299 -0.224,0.448 -0.217,0.121 -0.056,0.005 -0.294,0.259 -0.207,0.097 -0.12,-0.065 -0.137,0.112 -0.154,0.291 -0.188,0.13 -0.34,0.072 -0.102,0.034 -0.198,-0.01 -0.17,0.072 -0.142,0.155 -0.151,0.058 -0.161,-0.039 -0.146,0.057 -0.131,0.153 -0.076,0.166 -0.021,0.179 -0.128,0.122 -0.236,0.065 -0.082,0.09 0.015,0.125 -0.106,0.097 -0.399,0.102 -0.289,0.18 -0.178,0.259 -0.188,0.163 -0.296,0.1 -0.402,0.264 -0.058,0.163 0.153,0.15 0.055,0.134 -0.043,0.117 -0.125,0.016 -0.208,-0.085 -0.148,-0.018 -0.088,0.05 -0.042,0.094 0.005,0.138 -0.074,0.094 -0.154,0.05 -0.097,0.114 -0.041,0.179 -0.193,0.226 -0.344,0.272 -0.271,0.367 -0.199,0.462 -0.232,0.304 -0.266,0.146 -0.183,0.208 -0.1,0.27 -0.284,0.418 -0.466,0.568 -0.423,0.39 -0.38,0.212 -0.213,0.24 -0.047,0.267 -0.246,0.305 -0.445,0.342 -0.126,0.154 -0.104,0.126 -0.015,0.22 -0.173,0.289 -0.333,0.359 -0.116,0.311 0.151,0.393 0.022,0.477 -0.066,0.191 -0.146,0.065 -0.033,0.123 0.079,0.182 0.004,0.239 -0.07,0.297 -0.154,0.34 -0.239,0.383 -0.058,0.256 0.124,0.129 0.061,0.137 -0.002,0.146 -0.051,0.211 -0.099,0.277 -0.15,0.206 -0.201,0.134 -0.061,0.17 0.081,0.205 0.011,0.214 -0.058,0.223 0.034,0.217 0.126,0.211 -0.009,0.241 -0.219,0.495 -0.053,0.306 0.137,1.313 -0.083,0.184 -0.139,0.212 -0.165,0.016 -0.188,-0.037 -0.136,0.132 -0.085,0.583 -0.259,1.264 0.046,0.301 0.208,0.489 0.076,0.312 0.058,0.235 0.046,0.446 -0.121,0.201 -0.112,0.035 -0.141,0.113 0.167,0.545 0.133,0.251 0.38,0.516 1.459,0.718 0.605,0.424 0.685,0.579 0.374,0.596 0.033,0.492 -0.547,0.737 -0.061,0.62 0.112,0.437 0.198,0.406 0.53,0.528 0.39,0.194 0.527,-0.021 0.09,0.148 0.054,0.13 0.083,1.075 -0.01,0.405 -0.155,0.372 -1.012,1.714 -0.864,1.052 -0.313,0.583 -0.111,0.625 -0.277,0.298 -1.498,0.948 -2.324,0.849 -1.878,0.442 -0.427,0.149 -3.019,0.487 -0.584,0.068 -0.76,-0.043 -0.617,0.065 -0.688,-0.133 -0.614,-0.153 -0.344,-0.38 -0.408,-0.047 -0.111,0.19 0.199,0.485 -0.097,0.585 0.121,0.334 0.241,0.067 0.232,0.173 0.205,0.232 -0.353,0.024 0.137,0.185 0.151,0.108 -0.017,0.387 -0.137,0.934 -0.344,0.2 -0.092,0.054 -0.104,0.202 -0.219,0.898 -0.07,0.584 0.094,0.377 0.413,0.794 -0.156,0.517 -0.261,0.281 -1.131,0.579 -0.452,0.232 -0.712,0.159 -1.147,0.027 -0.424,-0.036 -0.983,-0.528 -0.73,-0.316 -0.668,-0.251 -0.65,-0.15 0.093,-0.076 0.043,-0.136 -0.183,-0.076 -0.133,-0.017 -0.428,0.273 -0.18,0.279 -0.052,0.245 -0.009,0.588 0.076,0.495 0.308,1.223 0.032,0.667 -0.146,0.844 0.204,0.498 0.248,0.225 0.557,0.223 0.216,0.152 0.238,-0.024 0.073,0.059 -0.035,0.109 -0.14,0.215 0.009,0.227 0.422,0.067 0.438,-0.046 0.459,-0.101 0.108,-0.158 0.003,-0.33 -0.538,-0.058 0.068,-0.123 0.408,-0.134 0.534,-0.219 0.273,-0.041 0.186,0.147 0.125,0.135 0.154,0.355 0.096,0.469 0.004,0.565 -0.064,0.533 -0.076,0.189 -0.135,0.227 -0.96,0.29 -0.269,-0.076 -0.25,-0.403 -0.079,-0.417 -0.214,-0.281 -0.459,-0.223 -0.457,0.068 -0.453,0.387 -0.445,0.125 -0.158,0.353 1.116,0.572 0.527,0.16 0.172,-0.006 0.171,0.075 -0.159,0.213 -0.159,0.132 -0.794,0.292 -0.35,0.204 -0.409,0.402 -0.573,0.879 -0.176,0.192 -0.088,0.224 -0.059,0.609 0.186,1.015 -0.196,0.426 0.121,0.474 -0.068,0.317 -0.2,0.457 -0.804,0.723 -0.143,0.53 0.279,0.313 -0.019,0.274 -0.093,0.249 -0.334,-0.003 -1.214,-0.167 -0.442,0.272 -0.41,0.333 -0.112,0.159 -0.145,0.1 -0.835,0.178 -0.165,0.118 -0.888,1.275 -0.38,0.794 -0.459,0.782 -0.12,0.332 -0.026,0.461 0.064,0.416 0.064,0.307 0.16,0.395 0.336,0.451 1.711,1.847 0.355,0.162 1.83,0.199 0.406,0.259 0.237,0.412 0.087,0.364 -0.105,0.924 -0.109,0.29 -0.202,0.264 -0.433,0.34 -0.518,0.181 0.148,0.129 0.21,-0.019 0.458,-0.11 0.198,0.11 0.15,0.367 -0.287,0.148 -0.087,0.179 -0.207,0.271 -1.056,1.084 -0.569,0.325 -0.523,0.437 -0.702,0.443 -0.275,0.255 -0.372,0.536 -0.569,0.585 -0.614,1.261 -0.024,0.245 0.089,0.164 -0.341,2.231 -0.119,0.264 -0.247,0.282 -0.65,0.466 -0.313,0.058 -0.414,-0.27 -0.233,-0.282 -0.229,-0.482 -0.276,-0.496 -0.014,0.177 0.096,0.302 -0.065,0.316 -0.706,0.144 -0.187,0.148 0.637,-0.066 0.434,0.096 0.184,0.115 0.165,0.241 0.146,0.29 -0.122,0.161 -0.348,0.133 -0.45,0.245 -0.532,0.443 -0.295,0.514 -0.127,0.37 -0.144,0.748 -0.038,0.496 -0.225,0.382 -0.347,0.345 0.02,0.079 0.235,-0.177 0.188,-0.056 0.162,0.46 0.218,0.923 0.101,0.642 -0.016,0.19 -0.065,0.262 -0.448,0.063 -0.4,-0.008 -0.294,0.112 0.158,0.116 0.27,-0.041 0.373,0.276 0.414,-0.118 0.189,0.185 0.136,0.169 0.634,1.354 0.554,0.841 0.28,0.5 -0.139,0.228 -0.05,-0.303 -0.361,-0.079 -0.352,-0.081 -0.587,-0.217 -0.791,-0.328 -0.792,0 -0.629,-0.277 -0.695,-0.306 -1.467,-0.027 -1.292,-0.019 -1.324,-0.019 -0.847,-0.013 -0.567,-0.008 -0.147,-0.115 0.05,-0.38 -0.21,-0.28 -0.305,-0.338 -0.371,-0.238 -0.184,-0.319 -0.206,-0.358 0.116,-0.317 0.178,-0.769 0.003,-0.338 -0.161,-0.236 -0.049,-0.335 0.049,-0.157 0.145,-0.119 0.087,-0.547 -0.068,-0.535 -0.111,-0.477 -0.147,-0.21 -0.189,-0.1 -0.14,-0.019 -0.31,0.178 -0.514,-0.045 -0.175,0.068 -0.251,0.191 -0.356,0.282 -0.198,-0.098 -0.061,-0.302 -0.132,-0.261 -0.084,-0.23 -0.063,-0.379 -0.105,-0.485 -0.21,-0.573 -0.322,-0.462 -0.018,-0.415 -0.06,-0.52 0.164,-0.505 -0.096,-0.418 -0.201,-0.497 0.062,-0.514 0.198,-0.284 0.062,-0.36 0.916,-0.057 -0.038,-0.483 0.152,-0.39 0.171,-0.353 0.146,-0.16 0.326,-0.14 0.384,-0.203 0.217,-0.232 0.104,-0.208 0.063,-0.268 0.017,-0.285 -0.063,-0.605 0.072,-0.186 0.238,-0.245 0.402,-0.217 0.173,-0.575 -0.099,-0.499 -0.223,-0.395 -0.284,-0.178 -0.025,-0.405 0.128,-0.384 0.167,-0.411 0.199,-0.471 -0.012,-0.329 0.177,-0.192 0.504,-0.428 0.173,-0.418 0.177,-0.113 0.207,-0.05 0.012,-0.236 -0.151,-0.234 -0.024,-0.293 0.018,-0.324 0.046,-0.433 0.235,-0.162 0.348,-0.35 0.093,-0.222 0.012,-0.297 -0.101,-0.612 -0.086,-0.438 -0.044,-0.161 -0.158,-0.296 -0.117,-0.187 0.187,-0.234 0.35,-0.245 0.148,-0.355 -0.136,-0.301 -0.198,-0.159 -0.062,-0.46 0.074,-0.583 0.148,-0.176 0.52,-0.088 0.049,-0.299 0.396,-0.422 -0.012,-0.403 -0.252,-0.247 -0.247,-0.398 -0.182,-0.351 -0.606,-0.192 -0.644,-0.104 -0.087,-0.331 0.025,-0.191 0.299,0.077 0.489,-0.067 0.368,-0.015 0.256,-0.034 0.295,-0.048 0.272,0.139 0.272,-0.087 0.111,-0.521 0.173,-0.277 0.025,-0.26 -0.173,-0.207 -0.317,-0.064 -1.387,-0.164 -0.042,-0.207 0.012,-0.347 0.052,-0.354 0,-0.174 0.126,-0.153 0.144,-0.32 0.101,-0.213 -0.101,-0.276 -0.221,-0.407 0.161,-0.188 0.013,-0.224 -0.05,-0.219 -0.23,-0.243 -0.203,-0.335 0,-0.356 0.238,-0.095 0.158,-0.109 0.037,-0.22 -0.087,-0.271 -0.329,-0.083 -0.438,-0.166 -0.134,-0.139 -0.124,-0.29 0.092,-0.813 -0.046,-0.489 -0.039,-0.27 0.107,-0.208 0.146,-0.187 -0.069,-0.435 -0.13,-0.228 0.046,-0.175 0.123,-0.176 0.107,-0.217 0.092,-0.051 0.138,0.124 0.233,-0.073 0.281,-0.175 0.03,-0.206 -0.056,-0.294 -0.209,-0.738 -0.188,-0.455 0.039,-0.164 0.074,-0.172 -0.059,-0.624 0.019,-0.376 0.014,-1.105 0.021,-0.376 -0.192,-0.384 0.026,-0.359 0.135,-0.262 0.127,-0.354 0.095,-0.313 0.1,-0.141 0.169,-0.07 0.039,-0.171 -0.077,-0.13 -0.218,-0.203 -0.05,-0.248 0.046,-0.19 0.107,-0.11 0.166,0.001 0.125,-0.271 0.036,-0.334 0.026,-0.155 -0.096,-0.195 -0.069,-0.459 -0.065,-0.26 0.077,-0.109 0.107,-0.04 0.189,0.062 0.133,-0.032 0.023,-0.139 0.015,-0.149 0.051,-0.101 0.119,-0.336 0.127,-0.416 0.03,-0.293 -0.045,-0.793 0.067,-0.182 0.136,-0.166 0.189,-0.156 0.249,-0.129 0.309,-0.186 0.38,-0.068 0.154,-0.206 0.107,-0.274 0.03,-0.225 -0.146,-0.156 -0.192,-0.186 -0.091,-0.467 -0.049,-0.431 -0.028,-0.542 -0.191,-0.465 -0.2,-0.522 -0.054,-0.464 0.067,-0.253 0.079,-0.402 -0.084,-0.183 -0.1,-0.327 0.104,-0.256 0.126,-0.397 -0.015,-0.201 -0.1,-0.479 -0.092,-0.268 0.092,-0.286 0.146,-0.267 0.115,-0.143 -0.019,-0.23 0.05,-0.189 0.218,-0.126 0.204,-0.234 0.146,-0.028 0.176,0 0.115,-0.066 0.046,-0.18 0.031,-0.199 0.281,-0.247 0.165,-0.227 0.299,-0.047 0.146,-0.246 0.003,-0.315 -0.034,-0.318 0.1,-0.367 -0.111,-0.56 0.011,-0.296 -0.115,-0.244 0.023,-0.263 -0.062,-0.168 -0.174,-0.063 -0.064,-0.209 0.084,-0.103 0.164,-0.079 0.206,-0.16 0.154,-0.768 0.073,-0.228 0.071,-0.273 -0.009,-0.142 0.099,-0.205 0.124,-0.311 0.195,-0.3 0.111,-0.206 0.108,-0.277 0.031,-0.167 0.138,-0.083 0.159,-0.021 0.187,-0.052 0.077,-0.102 -0.014,-0.148 -0.012,-0.327 -0.056,-0.519 -0.036,-0.667 0.033,-0.438 0.123,-0.439 0.115,-0.238 -0.031,-0.183 -0.031,-0.201 -0.215,-0.11 -0.204,0.095 -0.143,-0.026 -0.183,-0.233 -0.054,-0.247 0.031,-0.337 0.143,-0.21 0.056,-0.264 -0.084,-0.082 -0.18,-0.175 -0.17,-0.602 0.021,-0.512 -0.169,-0.136 -0.079,-0.399 -0.174,-0.143 -0.069,-0.298 -0.054,-0.307 0.023,-0.135 0.182,-0.038 0.103,-0.242 -0.077,-0.135 -0.138,-0.117 -0.176,0.009 -0.158,-0.138 -0.211,-0.577 -0.167,-0.318 0.053,-0.463 0.033,-0.361 0.072,-0.309 0.026,-0.243 0.13,-0.116 0.123,0.053 0.115,-0.027 0.106,-0.197 0.116,-0.124 -0.007,-0.098 -0.069,-0.106 -0.033,-0.187 0.081,-0.223 0.14,-0.509 0.212,-0.56 0.091,-0.209 -0.023,-0.177 0.046,-0.08 0.144,0.089 0.409,-0.098 0.138,-0.248 0.054,-0.221 0.123,-0.124 -0.054,-0.176 -0.169,-0.053 -0.102,-0.083 0.041,-0.2 0.06,-0.459 -0.01,-0.337 -0.154,-0.719 -0.124,-0.71 0.087,-0.237 0.268,-0.324 0.203,-0.146 0.037,-0.185 0.201,-0.834 0.023,-0.455 0.132,-0.251 0.087,-0.472 0.364,-0.406 0.107,-0.269 0.146,-0.026 0.077,-0.087 0.193,-0.299 0.251,-0.307 0.216,-0.155 0.054,-0.242 0.103,-0.33 0.214,-0.547 0.12,-0.381 0.161,-0.137 0.188,-0.498 0.081,-0.292 0.215,-0.12 0.168,-0.034 0.161,0.137 0.169,-0.026 0.154,-0.171 0.37,-0.117 0.167,-0.063 0.077,-0.171 0,-0.3 -0.154,-0.222 -0.313,-0.425 -0.27,-0.475 -0.029,-0.149 -0.002,-0.163 0.046,-0.206 0.129,-0.233 0.324,-0.384 -0.035,-0.274 -0.236,-1.007 -0.087,-0.277 -0.164,-0.513 0.023,-0.203 0.144,-0.566 0.125,-0.228 0.184,-0.042 0.1,-0.076 0.031,-0.101 -0.123,-0.126 -0.054,-0.16 -0.054,-0.228 -0.17,-0.08 -0.098,-0.189 0,-0.277 0.153,-0.361 0.169,-0.101 0.069,-0.16 0.181,-0.146 0.165,-0.113 0.138,-0.209 0.569,-0.256 0.452,-0.199 0.882,-0.38 0.605,-0.261 0.058,-0.18 0.046,-0.123 0.28,-0.917 0.363,-1.183 0.227,-0.74 -0.522,-0.544 0.092,-0.145 0.299,-0.372 0.062,-0.298 0.119,-0.128 0.536,-0.303 0.092,-0.201 0.047,-0.223 0.109,-0.16 0.204,-0.033 0.371,-0.142 0.398,-0.135 0.12,-0.183 0.113,-0.318 0.097,-0.352 0.077,-0.083 0.128,0.009 0.213,0.088 0.112,0.133 0.557,0.422 0.25,0.241 0.238,0.032 0.47,-0.047 0.095,0.011 1.199,0.014 0.183,0.021 0.419,0.103 0.237,0.083 0.165,0.043 0.265,0.13 0.23,0.431 0.129,0.343 0.09,0.302 0.201,0.531 0.137,0.202 0.049,-0.098 0.117,-0.581 0.161,-0.338 0.217,-0.379 0.437,-0.884 0.153,-0.132 0.17,-0.064 0.119,-0.005 0.121,0.066 0.165,0 0.117,-0.07 1.146,-0.011 1.189,-0.01 0.025,0.005 0.054,0.152 0.198,0.332 0.222,0.176 0.044,0.053 z m 2.176,55.359 0.028,0.228 -0.146,-0.027 -0.347,-0.218 -0.117,-0.204 -0.027,-0.086 0.354,0.093 0.167,0.085 0.088,0.129 z m -19.021,65.026 0.016,-1.096 0.022,-1.464 0.004,-1.297 0.004,-1.256 0.004,-1.292 0.004,-1.283 0.005,-1.363 0.005,-1.375 0.165,0.195 0.652,0.95 0.17,0.39 0.107,0.456 -0.261,-0.29 -0.275,0.166 -0.136,0.272 -0.116,0.296 0,0.209 0.09,0.183 0.268,0.159 0.651,0.054 0.048,0.06 0.38,1.151 0.191,0.258 0.222,0.205 0.514,0.592 0.493,0.64 0.585,0.609 0.63,0.469 0.574,0.356 0.547,0.437 0.584,0.612 0.635,0.446 0.682,0.315 0.689,0.264 1.061,-0.103 0.329,0.028 0.205,0.194 -0.206,0.537 -0.263,0.433 -0.351,0.179 -0.371,0.066 -0.335,-0.009 -0.334,-0.08 -0.314,0.045 -0.3,0.183 -0.313,0.091 -0.322,0.012 -0.314,0.154 -0.315,0.111 -0.327,-0.092 -0.85,-0.432 -0.552,-0.103 -1.87,-0.171 -0.6,-0.099 -0.598,-0.149 -0.313,-0.007 -0.447,0.097 -0.358,-0.012 -0.095,0.099 z m 11.518,-0.667 0.31,0.112 0.612,-0.085 0.323,-10e-4 0.142,0.04 0.063,0.06 0.422,-0.094 0.187,0.011 -0.048,0.208 -0.389,0.207 -0.16,-0.088 -0.827,0.019 -0.366,0.214 -0.156,-0.002 -0.361,0.305 -0.264,-0.193 -0.073,-0.177 0.191,-0.252 0.18,-0.005 0.123,-0.102 0.091,-0.177 z",
                        title: "Argentina",
                        id: "AR",
                    },
                    { d: "m 1006.0897,503.3594 -0.121,0.025 -0.144,-0.137 0.28,-0.104 0.089,-0.054 0.34,0.027 -0.203,0.045 z", title: "American Samoa", id: "AS" },
                    {
                        d:
                            "m 522.47375,307.2434 -0.011,0.043 -0.016,0.159 -0.109,0.201 -0.118,0.262 0.008,0.23 0.301,0.794 0.268,0.481 0.05,0.183 0.172,0.141 -0.163,0.177 -0.032,0.262 -0.106,0.117 -0.028,0.149 0.045,0.136 -10e-4,0.17 0.059,0.233 -0.262,0.051 -0.311,-0.008 -0.111,0.014 -0.104,0.064 -0.107,-0.032 -0.282,-0.219 -0.158,-0.049 -0.112,0.013 -0.084,0.096 -0.145,0.122 -0.135,0.086 0.03,0.075 0.583,0.197 0.103,0.302 -0.112,0.246 -0.038,0.121 -0.137,0.094 -0.167,0.083 -0.202,0.021 -0.024,0.133 0.079,0.389 -0.064,0.084 -0.064,0.121 0.06,0.319 0.125,0.023 0.028,0.072 -0.022,0.13 -0.022,0.137 -0.044,0.145 -0.022,0.065 -0.083,0.04 -0.258,-0.021 -0.223,0.124 -0.448,0.444 -0.156,0.076 -0.17,0.178 0.01,0.389 -0.023,0.036 -0.041,0.08 -0.535,-0.138 -0.018,0.003 -0.359,0.05 -0.245,0.178 -0.297,0.103 -0.624,-0.055 -0.607,0.069 -0.144,0.052 -0.157,0.03 -0.148,0.104 -0.085,0.146 -0.151,0.184 -0.215,0.145 -0.233,0.112 -0.056,0.093 -0.076,0.054 -0.131,-0.07 -0.105,0.004 -0.129,-0.048 -0.429,-0.052 -0.47,-0.086 -0.225,-0.082 -0.254,-0.066 -0.274,-0.053 -0.245,-0.012 -0.124,-0.025 -0.589,-0.143 -0.389,-0.01 -0.513,-0.06 -1.019,-0.216 -0.297,-0.088 -0.283,-0.027 -0.336,-0.075 -0.255,-0.123 -0.163,-0.234 -0.175,-0.31 -0.319,-0.407 -0.066,-0.203 0.098,-0.178 0.1,-0.135 -0.011,-0.057 -0.078,-0.03 -0.561,0.174 -0.544,0.22 -0.214,0.006 -0.207,-0.048 -0.276,-0.004 -0.264,0.059 -0.53,0.03 -0.31,0.162 -0.198,0.315 -0.107,0.254 -0.09,0.082 -0.185,0.031 -0.276,-0.024 -0.194,-0.073 -0.198,-0.217 -0.307,-0.031 -0.282,-0.005 -0.075,-0.04 0.005,-0.142 -0.111,-0.266 -0.184,-0.083 -0.476,0.501 -0.13,0.045 -0.383,-0.139 -0.335,-0.214 -0.036,-0.157 -0.055,-0.129 -0.281,-0.122 -0.351,-0.083 -0.112,0 0.044,-0.076 0.041,-0.129 -0.026,-0.102 -0.082,-0.107 -0.045,-0.113 -0.014,-0.11 -0.025,-0.09 -0.015,-0.085 -0.026,-0.066 0.229,-0.5 0.047,-0.311 -0.2,-0.183 -0.085,-0.054 0.07,-0.041 0.285,0.034 0.181,-0.103 0.095,-0.103 0.253,0.097 0.372,0.194 0.175,0.132 0.072,0.101 0.041,0.085 -0.022,0.146 0.084,0.057 0.175,0.021 0.117,0.045 -0.041,0.192 -0.008,0.157 0.161,-0.022 0.203,-0.12 0.158,-0.217 0.098,-0.211 0.074,-0.514 0.026,-0.043 0.122,0.04 0.493,-0.022 0.233,0.096 0.369,0.016 -0.007,0.08 0.065,0.126 0.164,0.181 0.08,0.118 0.171,0.021 0.265,-0.065 0.154,-0.068 0.059,0.048 0.241,-0.047 0.214,-0.146 0.053,-0.111 0.216,-0.079 0.292,-0.181 0.401,-0.139 1.315,-0.15 0.051,-0.113 -0.019,-0.259 0.035,-0.038 0.165,0.064 0.266,0.061 0.205,0.091 0.131,0.12 0.123,0.005 0.19,-0.084 0.257,-0.054 0.24,0.125 0.07,0.134 -0.042,0.069 0.004,0.109 0.075,0.091 0.195,0.148 0.25,0.127 0.13,-0.01 0.048,-0.123 0.046,-0.295 0.017,-0.316 -0.057,-0.181 -0.135,-0.044 -0.161,-0.015 -0.086,-0.038 0.031,-0.099 0.128,-0.258 -10e-4,-0.345 -0.291,-0.394 -0.253,-0.381 10e-4,-0.13 0.152,-0.226 0.233,-0.18 0.519,-0.3 0.163,-0.062 0.21,-0.05 0.302,-0.124 0.145,-0.127 0.098,-0.138 0.142,-0.719 0.033,-0.031 0.042,-0.042 0.529,0.249 0.047,-0.042 0.09,-0.04 0.172,-0.191 0.038,-0.144 -0.004,-0.275 0.016,-0.259 0.033,-0.083 0.079,0.031 0.228,0.134 0.181,0.152 0.169,0.381 0.395,0.101 0.499,0.01 0.178,-0.17 0.162,-0.039 0.183,0.052 0.386,0.059 0.043,-0.307 0.222,-0.321 0.101,-0.112 0.283,0.011 0.069,-0.24 0.07,-0.665 0.059,-0.073 0.206,0.014 0.205,0.121 0.061,0.099 0.107,-0.008 0.149,-0.068 0.163,-0.043 0.259,0.071 0.551,0.302 0.285,0.111 0.18,-0.021 0.169,0.004 0.651,0.466 0.455,0.065 0.415,0.002 0.134,-0.14 0.176,-0.119 0.185,0.016 0.161,0.061 0.314,0.202 0.145,0.052 0.193,0.033 0.141,0.045 0.125,0.35 z",
                        title: "Austria",
                        id: "AT",
                    },
                    {
                        d:
                            "m 840.87475,494.6464 -0.102,-0.256 0.045,-0.064 0.052,-0.034 0.066,0.008 0.26,0.274 0.113,0.075 0.166,0.199 0.375,0.024 0.45,-0.214 0.21,0.087 0.1,-0.016 0.33,-0.203 0.215,-0.058 0.144,-0.15 0.146,0.162 0.326,0.188 0.103,0.197 0.138,0.093 0.046,0.062 -0.199,0.207 -0.025,0.223 -0.213,-0.015 -0.255,0.366 -0.957,0.614 -0.859,-0.524 -0.373,-0.354 -0.25,-0.49 -0.052,-0.401 z m 18.467,12.683 0.032,0.145 0.152,0.141 0.12,-0.134 -0.063,-0.116 -0.019,-0.218 -0.154,-0.197 -0.066,0.167 -0.063,0.039 -0.059,0.133 0.12,0.04 z m 6.327,2.884 0.123,0.002 0.2,-0.066 0.104,-0.14 0.109,0.036 0.217,-0.256 0.146,-0.126 0.388,-0.042 -0.262,-0.325 -0.047,-0.023 -0.362,0.126 -0.466,0.083 -0.18,0.175 -0.186,0.287 -0.042,0.256 0.033,0.081 0.225,-0.068 z m 8.218,-18.834 0.068,-0.195 -0.121,-0.095 -0.144,0.199 0.124,0.168 0.073,-0.077 z m -15.629,3.476 0.401,-0.523 0.109,-0.518 -0.137,0.035 -0.013,0.228 -0.047,0.153 -0.063,0.055 -0.109,0.097 -0.25,0.416 -0.107,0.103 0.014,0.128 0.202,-0.174 z m -11.52,-0.611 0.224,0.439 0.056,-0.044 0.101,-0.38 -0.091,-0.178 -0.01,-0.309 -0.041,-0.082 -0.115,0.169 -0.151,0.025 0.091,0.224 -0.064,0.136 z m 10.904,1.193 0.256,-0.21 0.025,-0.123 -0.085,0.06 -0.511,0.254 -0.244,0.286 0.444,-0.212 0.115,-0.055 z m 1.312,11.606 0.045,-0.021 0.077,-0.09 -0.037,-0.25 -0.088,0.12 0.003,0.241 z m 14.83,-14.284 -0.015,0.079 0.032,0.18 0.152,0.085 0.234,-0.163 -0.216,-0.32 -0.187,0.139 z m -15.795,14.156 0.032,0.128 0.047,0.015 0.168,-0.012 0.061,-0.244 -0.074,-0.03 -0.178,0.027 -0.056,0.116 z m 1.074,-3.999 -0.276,-0.113 -0.104,-0.123 -0.013,-0.122 0.12,-0.365 0.075,-0.11 0.079,-0.031 0.176,-0.2 -0.042,-0.116 -0.057,-0.066 -0.071,-0.037 -0.114,0.263 -0.131,0.008 -0.121,-0.119 -0.053,-0.223 0.017,-0.128 -0.13,-0.016 -0.204,0.13 -0.138,0.208 -0.307,0.205 -0.037,0.42 0.046,0.331 -0.1,0.142 -0.159,0.104 0.078,0.049 0.272,0.016 0.531,0.132 0.318,-0.021 0.368,0.057 0.104,-0.135 0.055,-0.178 -0.047,-0.015 -0.135,0.053 z m 40.28,28.299 0.065,-0.041 0.097,-0.128 -0.061,-0.158 -0.128,-0.224 0.032,-0.198 -0.079,-0.05 -0.088,0.009 -0.096,-0.077 -0.243,-0.092 -0.075,0.212 0.424,0.641 0.152,0.106 z m 5.091,6.157 0.071,-0.085 0.018,-0.212 0.162,-0.525 0.586,-1.388 0.025,-0.263 -0.172,-0.192 -0.045,-0.544 -0.07,-0.029 -0.095,0.033 -0.119,0.078 -0.104,0.154 0.12,0.055 0.156,0.276 -0.041,0.256 -0.107,0.2 -0.424,0.377 0.063,0.337 -0.026,0.161 -0.146,0.291 -0.063,0.318 0.085,0.55 0.126,0.152 z m 1.035,4.845 0.061,-0.047 -0.045,-0.36 0.113,-0.513 -0.097,-0.025 -0.147,0.061 -0.042,0.28 0.032,0.303 0.125,0.301 z m -0.056,0.55 -0.014,0.502 0.086,0.13 0.073,0.017 0.242,-0.867 -0.048,-0.044 -0.242,-0.054 -0.097,0.316 z m -8.094,-15.959 0.09,-0.047 -0.076,-0.237 -0.094,-0.053 -0.01,0.172 -0.063,0.121 0.072,0.051 0.081,-0.007 z m -1.651,-0.39 -10e-4,-0.132 -0.044,-0.303 -0.104,0.076 -0.017,0.23 0.067,0.22 0.099,-0.091 z m -10.7,-11.602 0.211,0.207 0.125,0.258 0.177,0.1 0.079,-0.106 0.042,-0.143 -0.121,-0.217 -0.058,-0.279 -0.082,-0.016 -0.051,0.045 -0.124,0.041 -0.247,-0.01 0.049,0.12 z m -10.767,-23.153 0.167,-0.176 -0.112,-0.147 -0.225,0.026 -0.066,0.141 0.059,0.103 0.177,0.053 z m 18.681,28.641 0.058,-0.045 0.033,-0.269 -0.103,0.073 -0.07,0.098 -0.055,0.124 0.074,0.032 0.063,-0.013 z m 0.145,0.451 0.091,0.002 0.067,-0.033 0.004,-0.042 -0.114,-0.167 -0.066,-0.202 -0.118,0.387 0.136,0.055 z m -26.741,-9.579 -0.143,0.121 0.037,0.12 0.105,-0.05 0.313,-0.059 -0.03,-0.153 -0.188,-0.15 -0.094,0.171 z m 16.916,67.796 -0.169,-0.145 -0.368,0.017 -0.026,0.079 -0.016,0.177 0.156,0.108 0.423,-0.236 z m 7.889,5.881 -0.077,-0.069 -0.258,-0.103 -0.499,-0.659 -0.188,-0.115 -0.264,0.384 -0.202,0.141 0.127,0.146 0.18,-0.018 0.083,0.24 -0.043,0.157 0.376,0.575 0.063,0.149 0.075,0.103 0.09,0.078 0.294,-0.104 0.25,-0.224 0.039,0.004 0.027,-0.106 -0.203,-0.165 0.109,-0.125 0.021,-0.289 z m -0.17,1.939 -0.052,-0.037 -0.071,-0.007 -0.213,0.067 0.027,0.083 0.171,0.179 0.138,-0.285 z m -8.724,-7.203 0.399,-0.028 0.236,0.133 -0.017,-0.067 -0.098,-0.169 -0.074,-0.066 -0.196,-0.048 -0.25,0.245 z m -0.966,7.172 0.018,-0.244 -0.021,-0.02 -0.09,0.13 -0.115,0.055 0.105,0.383 0.103,-0.304 z m -24.205,-85.169 -0.071,0.047 -0.034,0.079 0.002,0.104 0.255,0.055 0.066,-0.032 0.106,-0.096 -0.05,-0.243 -0.118,-0.12 -0.156,0.206 z m 63.812,143.65 -0.171,0.957 0.026,0.22 0.094,-0.191 0.188,-0.652 0.037,-0.495 -0.174,0.161 z m -29.666,-59.215 -0.36,0.187 -0.391,-0.003 -0.136,0.087 0.027,0.086 0.231,0.174 0.313,0.022 0.296,-0.084 0.094,0.23 0.144,-0.039 0.197,-0.199 -0.15,-0.24 -0.265,-0.221 z m 0.041,6.706 -0.036,-0.141 -0.074,-0.127 0,-0.135 0.039,-0.288 -0.078,-0.42 0.025,-0.635 -0.027,-0.341 0.008,-0.336 0.063,-0.43 -0.017,-0.434 -0.041,-0.217 -0.018,-0.22 0.021,-0.624 -0.218,-0.341 -0.512,-0.273 -0.181,-0.005 -0.269,0.344 -0.155,-0.003 -0.55,-0.1 -0.119,0.114 -0.221,0.328 -0.129,0.139 -0.188,-0.06 -0.189,-0.107 -0.145,0.012 -0.141,0.088 -0.317,0.04 -0.325,-0.007 -0.197,0.094 -0.177,0.15 -0.058,0.189 0.034,0.218 -0.175,-0.202 -0.175,-0.132 -0.205,0.142 -0.214,0.097 -0.721,0.078 -0.579,-0.168 -0.813,-0.347 -0.129,-0.102 -0.117,-0.13 -0.134,-0.085 -0.308,-0.129 -0.12,-0.148 -0.136,-0.042 -0.156,0.021 -0.225,-0.118 -0.187,-0.208 -0.165,-0.018 -0.184,0.094 -0.325,-0.014 -0.63,-0.24 -0.28,-0.182 -0.025,0.408 -0.179,0.732 0.046,0.363 0.1,0.415 0.187,0.561 0.005,0.181 0.034,0.107 0.386,0.841 0.393,0.685 0.513,0.725 0.059,0.33 -0.067,0.338 0.167,-0.022 0.103,-0.166 0.024,0.165 0.058,0.139 0.438,0.48 0.03,0.127 -0.166,0.397 -0.094,-0.328 -0.174,-0.257 -0.488,-0.407 0.107,0.85 0.087,0.337 0.616,1.455 0.084,0.094 0.14,0.064 0.119,0.116 0.201,0.297 0.34,0.644 0.198,0.186 0.286,-0.059 0.421,0.131 0.144,-0.036 0.089,0.055 0.052,0.15 -0.33,-0.003 -0.321,0.083 -0.035,0.125 0.088,0.141 0.084,0.395 0.403,-0.133 0.636,0.026 0.38,-0.042 0.423,0.359 0.379,0.067 0.111,-0.026 0.227,-0.425 0.141,-0.511 0.087,-0.195 0.117,-0.166 -0.252,-0.219 -0.008,-0.111 0.033,-0.128 0.494,0.382 0.202,-0.154 0.042,-0.343 0,-0.212 0.059,-0.151 0.124,-0.07 0.05,-0.188 0.014,-0.145 -0.128,-0.328 -0.012,-0.189 0.31,0.393 0.124,0.533 0.237,-0.141 0.034,-0.084 -0.037,-0.369 0.106,-0.123 0.336,0.1 0.299,0.214 0.021,0.099 -0.02,0.1 -0.074,0.088 -0.243,-0.09 -0.111,0.156 0.144,0.39 0.244,0.374 0.147,-0.096 0.3,-0.051 0.1,-0.095 -0.064,-0.752 -0.12,-0.55 -0.008,-0.601 0.034,-0.327 0.138,-0.252 0.101,-0.266 -0.013,-0.343 0.05,-0.324 0.123,-0.336 0.172,-0.251 0.08,-0.058 -0.042,-0.07 0.073,-0.217 0.13,-0.159 0.079,0.195 -0.104,0.076 -0.061,0.085 0.204,0.143 0.061,0.127 0.021,0.14 -0.021,0.174 0.037,0.134 0.115,0.025 0.032,-0.175 -0.033,-0.212 0.027,-0.18 z m 14.691,-47.646 -0.339,-0.608 -0.075,-0.477 -0.119,-0.408 -0.527,-1.146 -0.228,-0.661 0.127,-0.664 -0.219,-2.121 0.227,-1.056 -0.11,-0.129 -0.273,-0.163 -0.121,-0.167 -0.181,-0.396 -0.02,-0.793 -0.35,-0.488 -0.378,-0.223 -0.256,-0.4 -0.172,-0.333 -0.024,-0.185 -0.104,-0.313 -0.29,-0.215 -0.199,-0.102 -0.427,-0.313 -0.209,-0.316 -0.429,-0.899 -0.199,-0.239 -0.396,-0.258 -0.324,-0.015 -0.209,-0.064 -0.742,-0.572 -0.231,-0.125 -0.186,-0.268 -0.278,-0.288 -0.161,-0.212 -0.247,-0.225 -0.169,-0.855 0,-0.83 -0.054,-0.989 -0.257,-0.477 -0.139,-0.154 -0.152,0.051 -0.012,0.308 0.042,0.21 -0.107,0.01 -0.382,-0.272 -0.478,-0.29 -0.258,-0.324 -0.188,-0.304 -0.156,0.012 -0.11,0.048 -0.11,0.374 0.179,0.645 -0.088,0.088 -0.151,-0.149 -0.275,-0.337 -0.143,0.11 -0.189,0.043 -0.165,-0.338 -0.139,-0.213 -0.201,-0.705 -0.18,-0.776 -0.017,-0.561 -0.351,-0.308 -0.137,-0.529 -0.109,-0.147 -0.103,-0.375 -0.405,-0.49 -0.416,-0.346 -0.345,-0.327 -0.297,-0.463 0.13,-0.335 0.211,0.071 0.224,-0.032 -0.179,-0.341 -0.174,-0.229 -0.445,-0.429 -0.207,-0.108 -0.448,-0.063 -0.498,-0.391 -0.305,-0.169 -0.215,-0.027 -0.249,-0.061 -0.176,-0.221 -0.311,-0.073 -0.438,-0.437 -0.215,-0.44 -0.108,-0.162 -0.147,-0.122 -0.216,0.073 -0.178,0.033 -0.392,-0.062 -0.129,-0.179 -0.253,-0.227 -0.487,-0.06 -0.385,-0.143 -0.294,-0.141 -0.298,-0.18 -0.274,-0.3 -0.243,-0.401 0.042,-0.514 0.061,-0.333 -0.31,-0.129 -0.535,-0.697 -0.026,-0.285 0.144,-0.582 0.146,-1.002 -0.213,-0.744 -0.415,-0.907 0.028,-0.46 -0.209,-0.006 -0.232,-0.09 -0.327,-0.447 -0.248,-0.294 -0.167,-0.271 -0.181,-0.367 0.029,-0.294 0.043,-0.198 0.018,-0.524 -0.231,-0.509 -0.073,-0.521 -0.219,-0.651 0.061,-0.432 -0.048,-0.356 -0.068,-0.308 0.071,-0.196 0.029,-0.249 -0.302,-0.249 -0.324,-0.19 -0.418,-0.336 -0.751,-0.524 -0.173,-0.396 -0.318,-0.354 -0.425,0.137 -0.313,0.065 -0.292,0.267 -0.404,0.197 -0.392,-0.178 -0.186,-0.15 -0.138,-0.53 -0.179,-0.578 -0.152,-0.29 -0.114,-0.35 0.107,-0.853 -0.16,-0.401 -0.05,-0.599 -0.152,-0.684 -0.169,-0.342 0.012,-0.275 -0.314,-0.403 -0.1,-0.289 -0.178,-0.104 -0.226,-0.165 -0.032,-0.221 0.017,-0.161 0.135,-0.267 0.073,-0.346 -0.315,-0.086 -0.219,-0.015 -0.153,-0.109 -0.172,-0.169 -0.062,-0.538 0.006,-0.57 -0.045,-0.356 -0.094,-0.265 -0.066,-0.28 -0.159,-0.298 -0.478,-0.387 0.035,-0.156 0.111,-0.202 -0.169,-0.116 -0.248,0 -0.14,0.27 -0.226,0.232 -0.443,0.177 -0.083,0.928 -0.275,1.02 -0.25,0.753 0.046,0.228 -0.02,0.223 -0.135,-0.1 -0.119,-0.125 -0.182,0.298 -0.329,0.773 -0.03,0.401 0.193,0.108 0.135,0.106 0.161,0.035 0.073,0.099 0.041,0.194 0.104,0.167 -0.026,0.181 -0.125,-0.071 -0.263,10e-4 -0.134,0.157 -0.339,0.314 0.089,0.904 -0.159,0.476 -0.153,0.369 -0.173,0.7 0.023,0.371 0.153,0.264 0.165,0.386 -0.1,0.532 -0.101,0.381 0.226,1.104 0.063,0.588 -0.124,0.401 -0.364,1.186 -0.164,0.868 0.053,0.479 -0.158,0.44 -0.18,0.704 -0.203,0.532 -0.711,1.074 -0.141,0.52 -0.239,0.648 -0.511,0.378 -0.386,0.236 -0.846,0.234 -0.488,-0.005 -0.252,-0.143 -0.145,-0.124 -0.575,-0.207 -0.699,-0.468 -0.538,-0.152 -0.266,-0.47 -0.026,-0.195 -0.096,-0.254 -0.282,-0.334 -0.532,-0.113 -0.546,-0.241 -0.337,0.034 -0.731,-0.207 -0.487,-0.295 -0.445,-0.409 -0.587,-0.708 -0.498,-0.191 -0.637,-0.293 -0.366,-0.244 -0.222,-0.118 -0.246,-0.183 -0.224,0.041 -0.387,0.005 -0.243,-0.172 -0.031,-0.135 0.037,-0.106 0.014,-0.193 -0.085,-0.029 -0.086,0 -0.071,0.052 -0.099,0.038 -0.342,-0.148 -0.479,-0.247 -0.09,-0.217 -0.151,-0.265 -0.662,-0.385 -0.384,-0.318 -0.848,-0.461 -0.217,-0.223 -0.071,-0.195 -0.063,-0.281 0.19,-0.292 0.185,-0.207 0.577,-0.859 0.173,-0.15 0.217,-0.233 0.199,-0.627 0.099,-0.358 -0.169,-0.542 -0.006,-0.91 0.67,-0.353 0.187,-0.046 0.173,-0.078 0.198,0.11 0.133,0.171 0.138,-0.031 0.374,-0.634 -0.06,-0.264 -0.155,-0.225 0.054,-0.139 1.152,-1.241 -0.141,-0.304 -0.171,-0.07 -0.328,0.021 -0.309,-0.265 -0.194,-0.501 -0.272,-0.018 -0.486,0.514 -0.057,0.118 0.118,0.067 0.103,0.312 -0.19,0.366 -0.19,0.003 -0.312,-0.036 -0.142,-0.261 -0.064,-0.398 -0.198,-0.112 -0.226,0.075 -0.187,0.14 -0.132,0.04 -0.11,-0.091 -0.006,-0.166 0.285,-0.276 0.239,-0.177 0.019,-0.066 -0.174,-0.054 0.026,-0.128 0.222,-0.227 -0.104,-0.012 -0.271,0.243 -0.289,0.14 -0.384,0.298 -0.551,0.195 -0.378,0.264 -0.527,-0.08 -0.491,-0.26 -0.107,-0.137 -0.242,-0.201 -0.539,0.218 -0.339,-0.023 -0.187,-0.077 -0.319,-0.052 -0.274,-0.193 -0.66,-0.308 -0.701,-0.059 -0.34,0.014 -0.253,-0.159 -0.244,-0.091 -0.479,-0.064 -0.199,-0.239 -0.251,-0.481 -0.18,-0.129 -0.291,-0.046 -0.309,0.221 -0.181,0.104 -0.353,-0.395 -0.627,-0.408 -0.2,-0.056 -0.105,0.099 -0.076,0.188 -0.119,0.018 -0.139,-0.085 -0.245,-0.241 -0.16,-0.044 -0.42,0.257 0.029,0.088 0.343,0.131 0.36,0.359 0.171,0.074 0.404,-0.094 0.554,0.068 0.559,0.448 -0.082,0.223 -0.042,0.31 0.015,0.338 -0.013,0.229 0.23,0.252 -0.103,0.019 -0.26,-0.057 -0.205,0.07 -0.193,0.119 -0.086,0.339 -0.109,-0.16 -0.334,-0.152 -0.198,0.117 -0.332,0.154 -0.302,-0.062 -0.192,-0.078 -0.454,0.132 -0.809,-0.004 -0.27,-0.19 -0.079,-0.326 -0.063,-0.08 -0.074,0.146 -0.127,0.168 -0.489,0.034 -0.073,0.069 0.029,0.163 -0.019,0.205 -0.188,0.015 -0.232,0.054 0.025,0.251 0.043,0.196 -0.086,0.098 -0.255,-0.179 -0.114,-0.193 -0.179,-0.06 -0.14,0.069 -0.036,0.172 0.021,0.444 -0.127,0.05 -0.331,-0.017 -0.152,0.084 -0.229,0.558 -0.421,0.213 -0.064,0.291 -0.028,0.248 0.35,0.449 -0.169,0.23 -0.178,0.188 -0.178,0.08 -0.378,0.073 -0.278,0.205 -0.117,0.216 -0.022,0.206 -0.077,0.264 -0.121,0.313 -0.024,0.169 -0.253,0.168 -0.45,0.503 -0.227,0.515 0.296,0.28 0.348,0.201 0.253,-0.006 0.002,0.051 -0.264,0.207 0.164,0.212 0.253,0.198 0.154,0.029 0.113,0.084 -0.239,0.047 -0.354,0.017 -0.068,0.216 0.043,0.249 0.063,0.216 -0.044,0.153 -0.132,-0.105 -0.058,-0.162 -0.304,-0.33 -0.218,-0.101 -0.319,-0.078 -0.096,0.1 0.013,0.503 -0.063,0.231 -0.113,-0.131 -0.028,-0.368 -0.301,-0.298 -1.186,-0.298 -0.168,-0.019 -0.276,0.039 -0.189,0.118 -0.019,0.116 -0.126,0.094 -0.205,0.107 -0.188,0.164 -0.122,0.137 -0.006,0.171 0.152,0.321 0.089,0.093 -0.012,0.153 -0.148,-0.159 -0.13,-0.051 -0.123,0.25 -0.118,0.05 0.031,-0.698 0.123,-0.473 0.1,-0.279 0.11,-0.218 -0.053,-0.115 -0.822,-0.653 -0.348,-0.535 -0.255,-0.3 -0.397,-0.289 -0.207,-0.182 -0.461,-0.278 -0.544,-0.193 -0.262,-0.261 -0.289,-0.093 -0.358,0.127 -0.03,0.243 0.045,0.236 -0.285,0.386 -0.307,0.206 -0.245,-0.236 -0.223,-0.172 -0.225,0.124 -0.068,0.213 -0.113,0.079 -0.085,-0.145 -0.123,-0.32 -0.183,-0.127 -0.183,0.056 0.055,0.254 0.105,0.14 -0.029,0.202 -0.132,0.093 -0.025,0.191 -0.079,0.254 0.012,0.355 -0.209,0.075 -0.156,0.281 -0.113,-0.06 -0.029,-0.183 -0.057,-0.187 -0.228,-0.071 -0.084,0.174 -0.051,0.059 -0.081,0.012 0.055,-0.142 0,-0.266 0.066,-0.278 -0.216,-0.1 -0.086,0.062 0.003,0.24 -0.052,0.35 -0.214,0.055 -0.19,0.157 -0.281,0.003 -0.143,0.076 -0.051,0.185 -0.247,0.191 0.005,0.229 0.166,0.232 0.011,0.202 0.395,0.205 -0.023,0.206 -0.056,0.096 -0.149,-0.038 -0.319,-0.178 -0.325,-0.038 -0.098,-0.082 -0.039,0.059 -0.002,0.137 -0.126,0.1 -0.181,0.01 -0.211,0.147 0.15,0.23 -0.027,0.091 0.074,0.11 0.322,0.02 0.137,-0.029 0.014,0.196 -0.041,0.196 -0.131,0.07 -0.125,-0.18 -0.621,-0.345 -0.163,-0.033 -0.034,0.108 0.029,0.141 -0.131,0.171 -0.231,0.224 -0.157,-0.061 -0.186,0.053 -0.12,0.383 -0.042,0.383 0.206,0.268 0.138,0.353 0.287,-0.434 0.117,-0.05 10e-4,0.188 -0.112,0.195 -0.066,0.24 -0.022,0.271 -0.188,0.007 -0.211,-0.036 -0.051,0.086 -0.079,0.202 0.046,0.279 0.14,0.105 0.325,-0.01 0.277,0.02 0.247,0.101 0.041,0.085 -0.223,-0.048 -0.456,0.026 -0.217,-0.038 -0.431,0.026 -0.32,-0.159 -0.158,-0.159 -0.239,-0.041 -0.233,0.064 -0.13,0.223 -0.157,0.054 -0.365,-0.552 -0.229,-0.037 -0.113,0.129 0.11,0.346 -0.058,0.213 -0.125,0.159 -0.158,-0.01 -0.098,0.067 0.078,0.146 0.25,0.371 0.205,0.162 0.182,0.225 0.093,0.194 0.22,-0.009 0.051,0.157 -0.126,0.228 0.004,0.362 -0.09,0.019 -0.127,-0.08 -0.252,-0.223 -0.13,-0.043 -0.067,0.064 -0.021,0.153 0.061,0.4 -0.129,0.571 0.026,0.167 -0.023,0.142 -0.106,-0.103 -0.13,-0.221 -0.269,-0.343 -0.329,-0.747 -0.348,-0.506 -0.189,-0.431 -0.291,-0.811 -0.151,-0.012 -0.193,0.349 -0.213,0.459 -0.145,0.226 -0.344,0.225 -0.212,0.228 -0.254,0.08 -0.279,0.26 -0.201,0.223 -0.282,0.52 -0.048,0.335 0.012,0.353 0.123,0.501 0.13,0.728 0.191,0.078 0.154,0.123 -0.043,0.22 -0.234,0.139 -0.718,0.689 -0.483,0.246 -0.138,0.173 -0.177,0.365 -0.256,0.461 -0.116,0.291 -0.269,0.564 -0.438,0.63 -0.443,0.468 -0.511,0.375 -0.335,0.179 -1.248,0.524 -0.666,0.2 -1.203,0.146 -0.51,0.237 -0.638,-0.077 -0.714,-0.051 -0.991,0.792 -0.822,0.193 -0.728,0.145 -0.313,0.13 -0.716,0.457 -0.417,0.209 -0.778,0.234 -0.319,-0.024 -0.431,-0.215 -0.403,0.05 -0.446,-0.031 -0.364,0.02 -0.283,0.178 -1.669,0.946 -0.33,0.258 -0.343,0.375 -0.492,0.347 -0.393,0.4 -0.826,0.417 -0.85,0.316 -0.42,0.263 -0.299,0.357 -0.521,0.96 -0.11,0.243 -0.208,0.253 -0.276,0.092 -0.179,0.082 0.063,-0.482 -0.199,-0.428 0.14,-0.817 -0.052,-0.244 -0.284,0.159 -0.181,0.174 -0.459,1.184 -0.314,0.923 0.238,0.53 0.077,0.308 -10e-4,0.331 -0.084,0.476 0.006,0.31 -0.028,0.413 -0.572,0.958 -0.178,0.417 -0.192,0.802 -0.023,0.372 0.014,0.557 0.241,0.488 0.184,0.302 0.285,0.874 0.342,0.581 0.563,1.171 0.621,0.95 0.04,0.364 -0.07,0.49 0.034,0.507 -0.111,0.149 -0.24,0.175 -0.275,-0.225 -0.14,-0.195 -0.176,-0.718 -0.072,-0.041 -0.118,0.314 -0.13,0.137 -0.118,-0.093 -0.09,-0.119 -0.022,-0.124 0.04,-0.148 0.043,-0.538 -0.258,-0.307 -0.229,-0.33 -0.247,-0.081 -0.152,0.149 -0.005,0.205 0.331,0.574 0.213,0.622 0.329,0.389 0.194,0.1 0.217,0.237 -0.047,0.525 -0.157,0.196 -0.131,0.1 -0.427,-0.116 -0.099,-0.378 -0.334,-0.743 -0.108,-0.288 -0.092,-0.078 -0.037,0.142 0.007,0.256 -0.062,0.11 -0.065,-0.011 -0.132,-0.134 -0.119,-0.072 -0.072,0.025 0.13,0.185 0.286,0.548 1.056,1.344 0.895,1.566 0.197,0.62 0.099,1.364 0.089,0.33 0.528,0.679 0.517,0.787 0.152,0.392 -0.003,0.336 0.105,0.319 0.642,0.866 0.286,0.93 0.035,0.34 -0.082,0.584 0.075,1.033 0.072,0.562 0.233,1.114 0.278,0.804 0.329,0.5 0.45,1.112 0.684,1.284 0.111,0.635 -0.035,1.693 -0.049,0.552 -0.15,0.095 -0.101,0.233 0.146,1.114 0.034,0.636 -0.221,0.6 -0.25,0.533 -0.439,0.364 -0.497,0.012 -0.231,-0.212 -0.295,-0.217 -0.052,0.969 -0.006,0.832 0.09,0.317 0.01,0.374 0.334,0.291 0.188,-0.113 0.232,-0.016 0.807,0.412 0.453,0.34 0.73,0.914 0.646,0.241 0.842,0.416 0.978,0.132 0.782,0.024 1.229,0.219 0.263,-0.078 0.526,-0.068 0.402,-0.142 0.362,-0.091 1.08,-0.849 1.053,-0.874 0.521,-0.069 0.467,-0.01 0.57,-0.298 0.518,-0.903 0.264,-0.201 0.351,-0.225 0.997,-0.132 0.587,0.093 0.314,-0.146 0.797,-0.163 1.658,-0.15 0.91,0.121 0.608,-0.02 0.322,0.06 0.252,0.395 1.759,-0.34 0.5,-0.024 0.313,0.057 0.394,0.295 0.442,-0.279 0.397,0.037 0.402,-0.269 0.611,-0.806 0.278,-0.503 0.445,-1.059 0.33,-0.38 0.363,-0.189 0.426,-0.061 0.657,-0.191 1.425,-0.891 0.553,-0.192 0.292,-0.168 0.981,-0.691 0.615,-0.133 1.804,0.179 0.855,-0.046 0.662,-0.108 1.005,-0.372 1.094,-0.28 1.343,-0.588 1.122,-0.608 0.679,-0.14 1.069,-0.107 1.574,-0.158 1.833,0.082 0.464,-0.125 0.228,-0.111 0.321,-0.119 0.396,0.083 0.304,0.09 0.92,0.485 1.386,1.021 0.306,0.043 0.912,-0.233 0.305,0.023 1.276,0.75 0.529,0.016 0.423,-0.019 0.32,0.081 0.34,0.204 0.403,0.472 0.853,0.453 0.043,0.366 -0.063,0.238 -0.192,0.009 -0.163,0.051 0.205,0.767 0.358,0.62 0.86,0.084 0.313,0.217 0.201,0.245 0.157,0.389 0.117,0.609 0.431,0.508 0.402,0.434 0.094,0.179 0.189,0.615 0.072,0.18 0.157,0.609 0.229,0.696 -0.063,0.071 -0.136,-0.015 -0.242,-0.177 -0.213,-0.197 -0.114,0.031 -0.13,0.135 -0.019,0.167 0.19,-0.044 0.111,0.024 0.263,0.213 0.245,0.248 0.194,0.145 0.468,0.618 0.183,-0.138 0.224,-0.123 0.356,0.336 0.142,0.067 0.081,-0.129 -0.135,-0.603 -0.135,-0.146 -0.032,-0.214 0.167,-0.153 0.081,-0.183 0.397,-0.451 0.869,-1.347 0.267,-0.154 0.308,-0.295 0.416,-0.225 0.43,-0.267 0.274,-0.104 0.269,-0.055 0.301,-0.247 0.328,-0.668 0.247,-0.791 0.264,-0.348 0.404,-0.371 0.311,-0.515 -0.025,-0.403 0.004,-0.411 0.224,0.317 0.141,0.322 0.223,1.077 -0.191,0.237 -0.202,0.119 0.039,0.378 0.135,0.493 0.05,0.395 -0.424,0.417 -0.366,0.524 -0.439,1.018 -0.028,0.308 -0.069,0.428 0.026,0.377 0.068,0.365 -0.108,0.566 -0.177,0.506 -0.232,0.013 -0.158,-0.019 -0.347,0.045 -0.32,-0.03 -0.367,1.106 0.233,0.052 0.178,-0.063 0.321,0 0.359,-0.198 0.525,-0.162 0.3,0.057 0.352,-0.018 0.512,-1.416 0.127,-0.921 0.261,-0.413 0.081,-0.285 0.135,-0.27 0.272,0.464 0.219,0.451 0.482,0.732 0.151,0.365 0.06,0.888 -0.313,1.03 -0.188,0.295 -0.227,0.257 -0.19,0.433 0.575,0.11 0.373,-0.008 0.583,-0.315 0.115,-0.042 0.293,-0.005 0.112,-0.165 0.287,-0.157 0.214,-0.184 0.277,-0.145 0.252,0.096 0.057,0.083 0.063,0.093 -0.093,0.204 -0.008,0.431 -0.165,-0.047 -0.147,-0.256 -0.184,0.066 -0.128,0.193 -0.275,-0.061 0.046,0.126 0.147,0.247 0.581,0.476 0.621,0.631 0.231,0.298 0.506,0.951 0.36,1.011 -0.029,0.299 -0.177,0.54 -0.127,0.549 0.011,0.288 0.117,0.365 0.255,0.374 0.946,1.021 0.5,0.9 0.665,0.467 1.077,0.172 0.569,0.338 0.591,0.682 0.188,0.058 0.287,0.028 0.368,-0.415 0.561,0.044 0.738,0.412 0.439,-0.098 0.313,0.051 0.438,0.233 0.641,0.461 0.68,0.232 0.404,0.349 0.314,0.052 0.563,0.227 0.414,-0.194 0.352,-0.244 0.813,-0.845 0.637,-0.407 0.335,-0.158 0.269,-0.07 0.341,-0.264 -0.212,-0.186 -0.201,0.031 -0.344,-0.105 0.196,-0.122 0.205,-0.091 0.99,-0.628 0.263,0.186 0.182,0.208 0.197,0.285 -0.148,0.403 -0.132,0.19 -0.305,0.305 -0.368,0.012 -0.175,-0.025 0.363,0.342 0.314,0.23 0.65,-0.418 0.162,-0.329 0.123,-0.191 0.206,-0.042 0.308,0.064 0.119,0.241 0.067,0.294 -0.223,0.08 -0.108,0.218 -0.076,0.207 0.388,0.266 0.199,0.169 0.24,-0.004 0.277,0.041 0.21,0.391 0.196,0.451 0.232,-0.125 0.145,-0.118 0.248,0.113 0.27,0.355 0.219,0.403 0.022,0.17 0.168,0.078 0.159,-0.12 0.076,-0.17 -0.006,-0.313 -0.043,-0.494 -0.111,-0.075 -0.253,0.268 -0.144,-0.194 -0.194,-0.206 0.003,-0.199 0.211,-0.099 0.179,0.043 0.224,0 1.182,-0.173 1.512,-1.585 0.662,-0.581 0.688,-0.431 0.712,-0.277 0.371,-0.089 1.912,-0.149 0.995,0.048 0.512,-0.109 0.237,-0.146 0.402,-0.399 0.282,-0.244 0.346,-0.068 0.084,-0.298 10e-4,-0.319 0.066,-0.333 -0.101,-0.625 0.027,-0.821 0.078,-0.428 0.209,-0.601 0.092,-0.617 0.094,-0.874 0.083,-0.518 0.104,-0.473 0.271,-0.521 0.23,-0.337 0.543,-1.268 0.188,-0.125 0.157,0 0.068,-0.077 0.021,-0.07 -0.046,-0.051 -0.069,-0.147 0.046,-0.119 0.165,-0.118 0.052,0.045 0.084,-0.025 0.013,-0.065 -0.078,-0.347 0.114,-0.486 0.139,-0.849 0.157,-0.381 0.093,-0.303 0.363,-0.455 0.397,-0.448 -0.113,-0.048 -0.186,-0.034 0.12,-0.107 0.095,-0.032 0.121,0.071 0.1,-0.197 0.022,-0.309 0.097,-0.456 -0.086,-0.397 0.184,-0.124 0.209,-0.075 0.088,-0.416 0.058,-0.167 0.13,-0.155 0.218,-0.331 0.171,-0.345 0.405,-0.658 0.396,-0.269 0.59,-0.208 0.066,-0.119 -0.15,-0.073 0.006,-0.072 0.222,0 0.09,-0.23 0.234,-0.17 0.391,-0.392 0.13,-0.36 0.081,-0.288 0.039,-0.651 0.636,-0.854 0.443,-1.153 0.107,-0.739 0.11,-0.399 0.074,-0.584 -0.067,-0.608 0.019,-0.509 0.442,-1.292 0.101,-0.533 0.136,-0.342 0.209,-1.273 0.004,-0.66 0.32,-0.768 0.399,-0.625 0.034,-0.578 -0.134,-0.444 0.019,-0.938 z m -65.797,-48.962 0.522,-0.151 0.52,0.182 0.291,-0.054 -0.01,-0.123 -0.064,-0.103 -0.106,-0.097 -0.231,-0.067 -0.074,-0.249 -0.133,-0.234 -0.024,-0.256 -0.105,-0.236 -0.124,0 -0.123,0.067 -0.276,0.333 0.097,0.182 0.029,0.333 -0.164,0.11 -0.188,-0.046 -0.081,0.304 0.094,0.108 0.15,-0.003 z m -47.708,41.786 -10e-4,-0.216 -0.1,-0.209 -0.319,-0.913 -0.1,0.035 -0.108,0.119 0.157,0.66 0.539,0.967 0.074,-0.128 -0.097,-0.246 -0.045,-0.069 z m 6.332,-15.474 0.163,-0.233 0.031,-0.213 -0.064,-0.144 -0.225,0.233 -0.129,0.193 0.026,0.118 0.198,0.046 z m 25.64,-15.989 0.1,0.025 0.105,-0.082 0.022,-0.131 -0.114,-0.132 -0.038,-0.117 -0.089,-0.008 -0.043,0.072 -0.06,0.139 0.115,0.122 0.002,0.112 z m 1.893,-2.431 -0.015,-0.078 0.013,-0.224 -0.107,-0.054 -0.119,0.104 -0.073,0.288 0.122,0.144 0.179,-0.18 z m 62.175,92.398 -0.071,0.131 -0.023,0.118 -0.064,0.063 0.117,0.083 0.031,0.188 0.064,0.032 0.176,0 -0.104,-0.47 -0.126,-0.145 z m -0.113,0.767 -0.08,-0.005 -0.14,0.198 -0.04,0.157 -0.06,0.03 -0.039,0.11 -0.061,0.086 -0.164,-0.067 10e-4,0.07 0.137,0.266 0.218,-0.065 0.218,0.068 0.132,-0.4 -0.038,-0.195 -0.084,-0.253 z m 2.331,-2.538 -0.197,-0.087 -0.141,0.18 0.023,0.087 -0.004,0.196 0.053,0.017 0.157,-0.034 -0.011,-0.113 0.193,-0.11 -0.073,-0.136 z m -28.666,-24.877 -0.261,0.124 -0.672,-0.081 0.005,-0.057 0.104,-0.226 -0.142,-0.125 -0.153,-0.052 -0.551,-0.043 -0.68,0.245 -1.271,0.293 -0.168,0.206 -0.107,0.281 0.137,0.156 0.465,0.338 0.442,0.046 0.317,-0.079 0.342,0.053 0.174,-0.196 0.484,0.133 0.186,0.187 0.398,-0.165 0.09,-0.307 0.137,-0.139 0.462,-0.104 0.495,0.137 0.153,-0.024 0.16,-0.167 -0.216,-0.335 -0.33,-0.099 z m 17.378,14.355 -0.083,-0.535 -0.254,-0.21 -0.146,0.013 -0.027,0.27 -0.168,0.152 -0.049,0.138 0.009,0.313 -0.074,0.291 0.138,0.29 -0.033,0.293 0.064,0.206 0.082,-0.015 0.3,-0.138 0.217,-0.205 0.081,-0.25 -0.098,-0.291 0.041,-0.322 z m -57.605,-86.254 -0.002,-0.029 -0.063,-0.005 0.002,0.029 0.063,0.005 z",
                        title: "Australia",
                        id: "AU",
                    },
                    { d: "m 278.72375,427.9294 0.01,0.083 -0.13,-0.045 -0.174,-0.177 -0.174,-0.133 0.043,-0.143 0.044,-0.048 0.174,0.133 0.172,0.249 z", title: "Aruba", id: "AW" },
                    {
                        d:
                            "m 530.99575,250.1104 0.086,0.001 0.039,-0.048 0.15,0.034 0.226,0.219 0.046,0.119 0.155,0.061 0.054,0.123 -0.18,0.382 -0.111,0.007 -0.083,-0.048 -0.147,0.042 -0.086,0.072 -0.029,0.159 0.005,0.332 -0.657,0.066 -0.151,-0.097 -0.207,-0.755 0.042,-0.196 0.139,-0.083 0.119,-0.018 0.018,0.408 0.175,-0.041 0.055,-0.269 0.012,-0.189 -0.047,-0.096 -0.119,-0.074 -0.069,-0.127 0.099,-0.205 0.183,-0.089 0.158,0.274 0.125,0.036 z m -0.919,0.927 0.015,0.126 -0.107,-0.032 -0.083,0.043 -0.056,0.155 -0.122,-0.056 -0.049,-0.223 0.091,-0.334 0.217,-0.013 0.094,0.334 z m 2.664,0.823 -0.022,0.133 -0.229,0.029 -0.096,-0.118 -0.214,0.015 -0.037,-0.059 0.089,-0.118 0.17,-0.074 0.222,0.03 0.117,0.162 z",
                        title: "Aland Islands",
                        id: "AX",
                    },
                    {
                        d:
                            "m 611.21475,334.1134 0.258,0.217 0.447,0.588 0.637,0.954 0.156,0.27 0.103,0.312 0.089,0.377 0.146,0.333 0.646,0.837 0.279,0.309 0.455,0.398 0.162,0.089 0.212,0.025 0.391,10e-4 0.36,0.156 0.178,0.109 0.184,0.158 0.165,0.183 0.166,0.486 -0.625,-0.16 -0.63,0.025 -0.355,0.104 -0.346,0.143 -0.331,0.201 -0.207,0.391 -0.174,0.902 -0.255,0.841 0.009,0.388 0.111,0.373 -0.013,0.176 -0.116,0.075 -0.146,0.158 -0.195,0.766 -0.097,0.153 -0.125,0.095 -0.034,-0.09 0.008,-0.201 -0.275,-0.177 -0.145,0.199 -0.101,0.421 -0.201,0.441 -0.01,0.084 0.05,1.359 -0.08,-0.006 -0.575,0.138 -0.12,-0.044 -0.492,-0.626 -0.102,-0.069 -0.212,-0.028 -0.125,-0.103 -0.101,-0.168 -0.058,-0.125 -0.509,-0.34 -0.075,-0.125 -0.011,-0.11 0.075,-0.099 0.086,-0.083 0.249,-0.085 0.29,-0.073 0.093,-0.053 0.047,-0.091 -0.003,-0.146 -0.047,-0.144 -0.417,-0.261 -0.046,-0.113 -0.013,-0.138 0.023,-0.145 0.065,-0.113 0.34,-0.154 0.182,-0.16 -0.113,-0.178 -0.367,-0.407 -0.436,-0.448 -0.291,-0.004 -0.335,0.132 -0.536,0.382 -0.296,0.163 -0.387,0.27 -0.421,0.3 -0.345,0.318 -0.215,0.263 -0.382,0.114 -0.195,0.22 -0.641,0.658 -0.18,-0.008 -0.011,-0.327 0.009,-0.259 -0.041,-0.149 -0.208,-0.205 -0.003,-0.088 0.056,-0.055 0.159,0.033 0.205,-0.012 0.098,-0.081 -0.219,-0.27 -0.195,-0.181 -0.165,-0.122 -0.037,-0.073 0,-0.052 0.035,-0.062 0.282,-0.149 0.028,-0.137 -0.019,-0.153 -0.448,-0.226 -0.335,0.083 -0.301,-0.254 -0.193,-0.196 -0.241,-0.211 -0.215,-0.116 -0.207,-0.265 -0.359,-0.273 -0.23,-0.078 0.003,-0.042 0.042,-0.05 0.096,-0.042 0.64,0.011 0.078,-0.049 0.04,-0.118 0.087,-0.174 0.102,-0.256 -0.008,-0.216 -0.643,-0.349 -0.466,-0.322 -0.323,-0.424 -0.219,-0.389 0.008,-0.131 0.063,-0.124 0.5,-0.359 0.034,-0.093 -0.011,-0.063 -0.179,-0.184 -0.224,-0.19 -0.07,-0.14 -0.141,-0.071 -0.268,-0.005 -0.47,-0.234 -0.1,-0.023 -0.022,-0.046 0.023,-0.047 0.335,-0.095 -0.005,-0.078 -0.102,-0.103 -0.189,-0.075 -0.174,-0.187 -0.06,-0.168 0.605,-0.492 0.179,-0.099 0.396,0.091 0.823,0.327 -0.056,0.181 0.083,0.102 0.189,0.138 0.363,0.14 0.307,0.072 0.155,-0.062 0.236,-0.052 0.307,0.162 0.283,0.205 0.141,0.083 0.076,0.025 0.215,-0.068 0.258,-0.264 0.102,-0.319 0.028,-0.154 -0.15,-0.212 -0.31,-0.23 -0.347,-0.202 -0.223,-0.179 -0.143,-0.353 -0.144,-0.039 -0.036,-0.046 -0.024,-0.121 0.006,-0.168 0.049,-0.13 0.141,-0.056 0.142,-0.02 0.128,-0.124 0.161,-0.243 0.068,-0.135 0.302,0.077 0.041,0.218 0.054,0.046 0.125,-0.026 0.208,-0.091 0.166,0.07 0.214,0.259 0.295,0.273 0.16,0.184 0.063,0.126 0.151,0.123 0.221,0.144 0.176,0.226 0.157,0.524 0.159,0.121 0.569,0.199 0.2,0.041 0.559,0.07 0.197,-0.05 0.288,-0.451 0.259,-0.465 0.242,-0.097 0.437,-0.225 0.262,-0.213 0.11,-0.23 0.247,-0.434 0.153,-0.243 z m -8.477,4.567 0.028,-0.122 -0.079,-0.055 -0.083,-0.003 -0.072,0.061 0,0.152 0.1,0.027 0.106,-0.06 z m -1.484,-1.519 -0.061,0.042 -0.093,-0.042 -0.028,-0.094 0.007,-0.099 0.092,-0.023 0.075,0.028 0.021,0.089 -0.013,0.099 z m 3.061,7.839 -0.541,-0.108 -0.973,-0.233 -0.268,-0.12 -0.253,-0.323 -0.151,-0.156 -0.223,-0.2 -0.184,-0.076 -0.139,-0.14 -0.079,-0.207 -0.117,-0.186 -0.2,-0.219 -0.455,-0.745 -0.059,-0.078 -0.095,-0.124 -0.042,-0.069 0.277,-0.057 0.461,-0.167 0.126,0.081 0.135,0.169 0.068,0.145 0.012,0.268 0.055,0.043 0.225,-0.09 0.101,0.108 0.173,0.129 0.3,0.128 0.432,-0.201 0.215,-0.052 0.177,0.004 0.096,0.063 0.034,0.208 -0.035,0.257 -0.05,0.141 0.091,0.102 0.354,0.247 0.147,0.137 -0.071,0.237 0.264,0.579 0.089,0.225 0.103,0.28 z",
                        title: "Azerbaijan",
                        id: "AZ",
                    },
                    {
                        d:
                            "m 522.37775,320.8624 0.58,0.416 0.239,0.062 0.135,-0.057 0.183,0.026 0.408,0.122 0.093,0.051 0.123,-0.009 0.301,-0.162 0.103,0.02 0.344,0.318 0.173,0.004 0.208,-0.137 0.134,-0.119 0.396,0.089 0.226,-0.054 0.188,-0.005 0.204,0.054 0.186,0.074 0.181,0.064 0.489,0.033 0.234,0.202 0.094,0.195 0.002,0.119 0.023,0.127 0.134,0.125 0.295,0.071 0.185,-0.015 0.098,-0.009 0.251,-0.112 0.296,-0.058 0.212,0.067 0.101,0.065 0.023,0.089 -0.063,0.307 -0.119,0.33 -0.193,0.343 -0.202,0.323 -0.052,0.17 -0.015,0.272 -0.025,0.213 0.028,0.116 0.066,0.109 0.223,0.086 0.302,0.214 0.256,0.278 0.329,0.315 0.102,0.117 0,0.126 -0.096,0.093 -0.281,0.036 -0.292,-0.028 -0.112,-0.032 -0.105,0.038 -0.065,0.072 0.035,0.085 0.299,0.382 0.349,0.547 0.019,0.235 -0.042,0.184 -0.081,0.128 -0.144,-0.022 -0.111,-0.1 -0.167,0.007 -0.13,0.028 -0.169,0.198 -0.084,-0.009 -0.145,0.03 -0.091,0.039 -0.145,-0.058 -0.153,-0.038 -0.066,0.061 -0.029,0.116 0.094,0.209 0.177,0.327 -0.028,0.25 -0.135,0.027 -0.124,-0.208 -0.109,-0.034 -0.125,0.008 -0.286,0.241 -0.211,0.203 -0.048,0.141 -0.076,0.154 -0.023,0.112 0.005,0.371 -0.379,0.059 -0.079,0.055 -0.046,0.112 0.031,0.475 0.031,0.255 0.217,0.392 0.008,0.124 -0.031,0.082 -0.155,0.155 -0.073,0.056 -0.049,0.018 -0.252,-0.102 -0.12,-0.049 -0.505,-0.346 -0.223,-0.193 -0.353,-0.252 -0.217,-0.144 -0.11,-0.218 -0.174,-0.05 -0.204,0.07 -0.231,-0.158 0.164,-0.081 0.04,-0.078 -0.021,-0.102 -0.072,-0.138 -0.624,-0.598 -0.307,-0.41 -0.049,-0.147 -0.005,-0.392 -0.072,-0.094 -0.459,-0.179 -0.512,-0.511 -0.53,-0.503 -0.072,-0.14 -0.272,-0.381 -0.333,-0.347 -0.265,-0.222 -0.217,-0.252 -0.241,-0.354 -0.125,-0.535 -0.111,-0.476 -0.075,-0.185 -0.153,-0.066 -0.474,-0.567 -0.403,-0.33 0.004,-0.357 0.066,-0.597 0.075,-0.679 0.097,-0.095 0.184,-0.051 0.21,0.019 0.183,0.085 0.362,0.465 0.207,0.181 0.175,0.07 0.201,-0.196 0.248,-0.411 0.217,-0.217 0.73,0.079 z",
                        title: "Bosnia and Herzegovina",
                        id: "BA",
                    },
                    { d: "m 307.92775,426.1274 -0.08,0.057 -0.251,-0.114 -0.088,-0.138 -0.011,-0.438 0.155,-0.042 0.291,0.347 0.169,0.126 z", title: "Barbados", id: "BB" },
                    {
                        d:
                            "m 734.70575,400.0724 0.022,0.114 0.004,0.996 0.025,0.425 0.09,0.35 0.018,0.133 -0.089,0.108 -0.088,0.021 -0.083,-0.169 -0.188,-0.129 -0.278,-0.138 -0.118,-0.092 -0.143,0.037 -0.201,0.209 -0.08,0.194 0.035,0.272 0.063,0.268 0.14,0.153 0.011,0.169 0.05,0.219 0.072,0.2 0.034,0.217 -0.046,0.004 -0.167,-0.278 -0.15,-0.301 -0.389,-0.57 -0.127,-1.022 -0.008,-0.506 -0.267,-0.596 -0.177,-0.826 -0.071,-0.215 0.093,-0.268 0.016,-0.1 -0.05,0.022 -0.136,0.138 -0.177,-0.33 -0.116,-0.296 -0.458,-0.613 -0.133,-0.271 -0.006,-0.265 -0.198,0.266 -0.269,0.187 -0.274,0.281 -0.182,0.085 -0.577,0.052 -0.334,-0.376 -0.479,-0.921 -0.063,-0.208 0.063,-0.543 -0.114,-0.515 0.002,-0.271 -0.034,-0.182 -0.086,0.04 -0.033,0.125 0.019,0.191 -0.035,0.16 -0.414,-0.031 -0.39,-0.073 0.343,0.271 0.369,0.063 0.19,0.242 0.023,0.189 -0.012,0.213 -0.188,0.149 -0.173,0.094 0.031,0.204 0.21,0.248 -0.254,0.07 -0.069,0.162 -0.006,0.231 0.128,0.204 0.051,0.151 -0.031,0.139 0.124,0.149 0.18,0.313 0.058,0.222 -0.075,0.313 -0.103,0.122 -0.165,0.118 -0.388,0.394 -0.19,0.448 -0.161,0.209 -0.202,0.039 -0.078,-0.092 -0.167,-0.12 -0.004,-0.219 0.051,-0.173 0.341,-0.419 -0.186,0.056 -0.21,0.12 -0.32,0.227 -0.102,-0.281 -0.067,-0.26 -0.001,-0.319 0.257,-0.477 -0.291,0.238 -0.08,0.297 0.036,0.35 -0.038,0.248 -0.113,0.323 -0.155,0.194 -0.25,0.125 -0.11,0.191 -0.168,0.14 -0.005,-0.28 -0.054,-0.37 -0.181,-0.879 -0.039,0.189 0.094,0.545 -0.006,0.354 -0.137,0.28 -0.275,0.3 -0.211,0.042 -0.124,-0.046 -0.188,-0.186 -0.206,-0.266 -0.034,-0.428 -0.085,-0.235 0.013,-0.281 -0.017,-0.266 -0.221,-0.713 -0.143,-0.366 0.018,-0.118 -0.01,-0.05 -0.066,-0.472 -0.092,-0.289 -0.046,-0.308 0.218,-0.443 -0.088,-0.072 -0.251,-0.059 -0.233,-0.077 -0.057,-0.115 0.104,-0.437 -0.121,-0.171 -0.174,-0.173 -0.055,-0.069 -0.058,-0.09 -0.08,-0.22 0.155,-0.463 0.217,-0.538 0.039,-0.205 0.036,-0.356 0.02,-0.137 -0.028,-0.135 -0.229,-0.156 -0.403,-0.063 -0.285,-0.131 -0.166,-0.198 -0.142,-0.079 -0.175,0.059 -0.223,-0.077 -0.187,-0.197 -0.156,-0.239 0.02,-0.112 0.041,-0.149 0.294,-0.62 0.109,-0.019 0.255,0.119 0.095,0 0.167,-0.245 0.234,-0.699 0.33,0.002 0.291,0.022 0.196,0.036 0.195,-0.022 0.205,-0.056 0.111,-0.088 0.061,-0.112 -0.021,-0.097 -0.251,-0.132 -0.097,-0.099 -0.07,-0.281 -0.073,-0.105 -0.493,-0.015 -0.256,-0.129 -0.141,-0.116 -0.25,-0.383 -0.31,-0.284 -0.296,-0.067 -0.114,-0.092 -0.062,-0.146 0.035,-0.211 0.089,-0.192 0.062,-0.214 0.236,-0.283 0.277,-0.247 0.124,-0.17 0.175,-0.179 0.021,-0.098 -0.03,-0.112 -0.142,-0.107 -0.099,-0.034 -0.016,-0.069 0.068,-0.185 0.135,-0.023 0.281,0.168 0.286,0.271 0.169,0.242 0.007,0.191 0.11,0.031 0.111,0.007 0.186,0.084 0.192,-0.025 0.124,0.047 0.083,-0.017 0.031,-0.11 -0.093,-0.162 -0.068,-0.115 0.078,-0.116 0.089,-0.023 0.099,0.029 0.135,0.104 0.099,0.213 0.019,0.331 0.219,0.299 0.289,0.212 0.226,0.098 0.272,0.07 0.233,-0.067 0.116,-0.208 -0.053,-0.187 0.037,-0.167 0.093,-0.092 0.146,0.006 0.108,0.132 0.317,0.714 -0.065,0.316 0.071,0.866 -0.08,0.57 0.013,0.123 0.037,0.095 0.054,0.039 0.093,-0.001 0.386,0.107 0.325,0.119 0.367,0.108 0.53,0.084 0.325,-0.027 0.162,-0.003 0.329,0.025 0.864,-0.045 0.715,-0.012 0.291,0.082 0.233,0.029 0.796,-0.057 0.804,-0.027 0.435,0.181 0.474,0.295 0.267,0.219 0.048,0.125 -0.029,0.107 -0.089,0.059 -0.164,0.002 -0.375,-0.143 -0.064,0.042 0.007,0.292 -0.012,0.046 -0.08,0.262 -0.226,0.589 -0.044,0.263 -0.048,0.067 -0.059,0.037 -0.177,0.01 -0.139,0.043 -0.058,0.096 -0.09,0.198 -0.063,0.2 -0.086,0.062 -0.207,-0.108 -0.129,0.017 -0.162,0.046 -0.162,0.114 -0.111,0.142 -0.126,0.048 -0.376,-0.028 -0.071,0.02 -0.048,0.101 -0.038,0.127 -0.293,0.3 -0.111,0.481 -0.09,0.312 0.015,0.242 0.247,0.631 0.173,0.818 0.066,0.083 0.058,0.026 0.026,-0.019 -0.006,-0.169 0.011,-0.205 0.081,-0.048 0.104,0.042 0.099,0.178 0.111,0.326 0.119,0.128 0.186,0.036 0.211,-0.077 0.157,-0.147 0.064,-0.16 -0.045,-0.314 -0.01,-0.235 0.101,-0.224 0.362,-0.334 0.052,-0.103 -0.023,-0.285 10e-4,-0.268 0.137,-0.018 0.185,0.043 0.232,-0.131 0.071,-0.003 0.098,0.141 0.165,-0.024 0.122,0.582 0.125,0.513 10e-4,0.239 0.021,0.524 0.057,0.427 0.089,0.097 0.104,0.228 0.096,0.265 0.075,0.148 0.051,0.483 0.063,0.348 0.083,1.092 0.038,0.209 z m -5.425,-2.974 0.05,0.13 -0.156,-0.078 -0.117,-0.09 -0.072,-0.12 0.122,-0.063 0.173,0.221 z m 0.381,2.639 -0.488,0.106 -0.249,-0.033 0.465,-0.791 -0.016,-0.354 -0.072,-0.289 -0.236,-0.232 -0.013,-0.166 -0.106,-0.227 -0.055,-0.266 0.262,-0.085 0.213,0.152 0.03,0.084 0.046,0.217 0.105,0.226 0.368,0.465 -0.007,0.285 -0.101,0.695 -0.146,0.213 z m 2.186,-0.882 -0.13,0.089 -0.122,-0.077 -0.156,-0.294 0.077,-0.372 0.049,-0.053 0.078,0.121 0.109,0.259 0.071,0.197 0.024,0.13 z m -1.139,0.624 -0.297,0.211 0.097,-1.25 0.222,0.466 0.056,0.249 -0.078,0.324 z m 2.029,1.032 -0.102,0.246 -0.05,-0.179 0.043,-0.227 0.044,-0.125 0.029,10e-4 0.06,0.129 -0.024,0.155 z m 0.212,0.973 -0.169,0.014 -0.083,-0.089 0.039,-0.125 -0.046,-0.403 0.143,-0.042 0.073,0.002 0.041,0.119 0.038,0.218 -0.036,0.306 z",
                        title: "Bangladesh",
                        id: "BD",
                    },
                    {
                        d:
                            "m 488.41175,294.8954 0.013,0.093 0.077,0.039 0.269,-0.02 0.136,-0.169 0.108,-0.106 0.08,0.072 0.039,0.208 0.074,0.27 0.321,0.302 0.271,0.086 0.334,-0.059 0.132,-0.054 0.09,0.045 0.089,0.16 0.191,0.182 0.404,0.13 0.123,0.073 0.086,0.123 -0.025,0.174 -0.192,0.435 -0.025,0.128 0.026,0.043 -0.038,0.08 -0.25,0.291 -0.022,0.102 0.083,0.167 0.069,0.138 0.002,-0.027 0.383,-0.125 0.173,0.251 0.284,0.009 0.034,0.081 0.319,0.234 0.098,0.185 0.229,0.179 -0.19,0.226 0.029,0.101 0.068,0.103 0.258,0.06 0.129,0.148 0.008,0.227 0.059,0.368 -0.532,0.366 -0.151,0.408 -0.014,0.08 -0.018,-0.012 -0.058,-0.135 -0.097,0.002 -0.22,-0.057 -0.307,0.368 -0.139,0.306 -0.082,0.224 -0.124,0.181 -0.025,0.191 0.016,0.081 -0.042,0.103 -0.002,0.109 0.176,0.213 0.045,0.116 0.215,0.379 -0.067,0.137 -0.053,0.149 -0.062,0.106 -0.073,0.067 -0.222,-0.004 -0.282,0.047 -0.19,0.075 -0.098,0 -0.204,-0.188 -0.228,-0.282 -0.144,-0.135 -0.066,-0.116 -0.179,-0.049 -0.255,-0.139 -0.177,-0.152 -0.152,-0.095 -0.214,-0.047 -0.177,0.005 -0.051,-0.256 -0.022,-0.292 -0.144,-0.197 0.198,-0.768 -0.118,-0.075 -0.128,0.061 -0.186,0.184 -0.089,0.218 -0.053,0.194 -0.312,0.183 -0.495,0.067 -0.541,-0.067 -0.074,-0.049 -0.035,-0.056 0,-0.067 0.037,-0.104 0.094,-0.127 0.024,-0.18 -0.097,-0.156 -0.063,-0.061 0.025,-0.151 0.071,-0.189 0.015,-0.109 -0.367,-0.327 -0.265,-0.064 -0.257,-0.012 -0.195,-0.037 -0.114,0.016 -0.081,0.095 -0.083,0.069 -0.062,-0.082 -0.114,-0.582 -0.088,-0.088 -0.332,-0.098 -0.452,-0.035 -0.12,-0.106 -0.066,-0.263 -0.042,-0.316 -0.148,-0.304 -0.076,-0.077 -0.135,-0.134 -0.236,0.055 -0.283,0.177 -0.167,0.048 -0.064,0.019 -0.225,-0.172 -0.254,-0.269 -0.203,-0.286 -0.049,-0.159 0.062,-0.193 -0.074,-0.148 -0.109,-0.271 -0.031,-0.212 1.221,-0.752 0.744,-0.386 0.351,-0.117 0.084,0.388 0.064,0.123 0.083,0.08 0.11,0.016 0.127,-0.096 0.178,-0.101 0.285,0.047 0.207,0.093 0.073,0.097 0.138,0.092 0.2,0.022 0.387,-0.176 0.372,-0.268 0.109,-0.187 0.041,-0.169 0.22,0.112 0.194,0.024 0.086,-0.05 -0.055,-0.271 0.158,-0.145 0.175,-0.066 0.079,0.117 0.161,0.12 0.127,0.001 0.341,-0.312 0.08,0.062 0.074,0.111 z",
                        title: "Belgium",
                        id: "BE",
                    },
                    {
                        d:
                            "m 475.50575,420.8694 -0.039,0.134 -0.002,0.237 -0.05,0.375 -0.06,0.449 0.244,0.29 0.292,0.312 0.078,0.121 -0.078,0.307 0.055,0.18 0.154,0.3 0.262,0.381 0.269,0.391 0.186,0.051 0.177,0.032 0.108,0.07 0.157,0.068 0.157,0.044 0.136,0.086 0.087,0.084 0.113,0.241 0.303,0.159 0.212,0.157 -0.085,0.08 -0.264,-0.032 -0.248,-0.069 -0.033,0.116 -0.01,0.442 0.039,0.367 0.058,0.049 0.25,0.068 0.595,0.477 0.538,0.452 0.181,0.117 0.297,0.044 0.334,0.019 0.143,-0.042 0.323,-0.227 0.172,-0.025 0.159,0.006 0.086,0.036 0.155,0.186 0.145,0.28 0.041,0.207 -0.013,0.111 -0.049,0.042 -0.265,0.053 -0.115,0.042 -0.028,0.06 0.041,0.139 0.051,0.09 0.289,0.403 0.418,0.544 0.129,0.139 -0.073,0.162 -0.213,0.424 -0.159,0.177 -0.703,0.6 -0.344,-0.071 -0.723,0.121 -0.108,-0.138 -0.169,-0.018 -0.209,0.024 -0.076,0.052 -0.023,0.059 -0.075,0.083 -0.134,0.238 -0.103,0.06 -0.128,0.037 -0.158,-0.005 -0.092,0.031 0,0.118 -0.028,0.102 -0.107,0.052 -0.045,0.114 0.008,0.113 -0.062,0.052 -0.136,-0.028 -0.081,-0.032 -0.076,0.146 -0.094,0.099 -0.067,-0.001 -0.723,0.029 -0.263,0.078 -0.158,0.002 -0.006,-0.066 -0.019,-0.039 -0.912,-0.221 -0.639,-0.131 -0.648,-0.145 -0.037,0.136 -0.093,0.088 -0.14,0.006 -0.097,-0.021 -0.065,0.105 -0.108,0.139 -0.15,0.067 -0.147,0.086 -0.083,0.075 -0.06,10e-4 -0.148,-0.176 -0.197,-0.018 -0.368,0.029 -0.166,-0.048 -0.226,-0.023 -0.534,0.036 -0.853,-0.072 -0.14,0.039 -0.037,0.032 -0.845,0.008 -0.929,0.009 -0.778,0.008 -0.681,0.007 -0.001,-0.03 -0.219,-0.004 -0.024,0.059 -0.193,0.708 -0.021,0.385 0.103,0.239 0.115,0.152 0.129,0.063 0.013,0.086 -0.104,0.111 0.009,0.113 0.122,0.117 0.03,0.124 -0.062,0.129 0.015,0.31 0.09,0.491 0.003,0.318 -0.086,0.145 0.041,0.249 0.167,0.351 0.03,0.148 -0.06,0.069 -0.139,0.091 -0.141,-0.003 -0.164,-0.212 -0.072,-0.095 -0.132,-0.216 -0.113,-0.216 -0.152,-0.095 -0.15,-0.088 -0.182,-0.275 -0.176,-0.131 -0.186,0.037 -0.271,-0.051 -0.547,-0.068 -0.588,0.02 -0.244,0.063 -0.241,0.1 -0.611,0.221 -0.241,0.108 -0.183,0.276 -0.208,-0.006 -0.207,-0.088 -0.13,-0.125 -0.279,0.027 -0.269,-0.121 -0.26,-0.239 -0.192,-0.079 -0.245,-0.173 -0.067,-0.33 -0.155,-0.231 -0.142,-0.322 -0.212,-0.144 -0.244,-0.077 -0.337,0.016 -0.221,-0.129 -0.175,-0.188 0.046,-0.163 0.079,-0.232 0.009,-0.223 0.052,-0.362 -0.032,-0.453 -0.061,-0.316 0.186,-0.132 0.215,-0.118 0.134,-0.215 0.139,-0.483 0.058,-0.417 -0.043,-0.155 -0.071,-0.123 -0.057,-0.18 -0.033,-0.22 0.039,-0.192 0.163,-0.178 0.204,-0.148 0.145,-0.072 0.384,-0.074 0.48,-0.11 0.277,-0.126 0.202,-0.125 0.113,-0.1 0.115,-0.203 0.186,-0.158 0.144,-0.16 0.02,-0.443 -10e-4,-0.253 -0.107,-0.14 -0.058,-0.119 0.711,-0.348 0.005,-0.245 -0.099,-0.274 -0.139,-0.221 -0.052,-0.19 0.197,-0.225 0.175,-0.169 0.127,-0.143 0.28,-0.218 0.292,-0.057 0.263,0.082 0.779,0.514 0.135,0.033 0.162,-0.039 0.206,-0.136 0.266,-0.106 0.098,-0.344 -0.009,-0.506 0.061,-0.232 0.14,-0.042 0.448,0.097 0.117,0.005 0.13,-0.032 0.095,-0.089 -0.004,-0.164 -0.021,-0.145 0.146,-0.47 0.267,-0.354 0.539,-0.442 0.168,-0.089 0.195,-0.045 0.966,0.304 0.157,-0.075 0.236,-0.754 0.262,-0.072 0.314,-0.013 0.204,-0.065 0.106,-0.052 0.46,-0.287 0.81,-0.39 0.436,-0.168 0.085,-0.063 0.312,-0.277 0.414,-0.318 0.264,-0.064 0.365,-0.023 0.23,0.052 0.062,0.09 0.076,0.046 0.476,-0.135 0.682,0.215 z",
                        title: "Burkina Faso",
                        id: "BF",
                    },
                    {
                        d:
                            "m 555.11975,326.8804 -0.066,0.931 -0.271,0.431 -0.409,-0.144 -0.522,0.12 -0.276,0.49 -0.157,0.145 -0.141,0.17 -0.091,0.634 -0.022,1.034 -0.198,0.125 -0.181,0.039 -0.755,0.906 0.435,0.254 0.192,0.193 0.318,0.537 0.452,0.605 0.09,0.295 -0.38,-0.066 -0.132,0.02 -0.085,0.093 -0.177,-0.019 -0.218,10e-4 -0.228,0.107 -0.126,0.045 -0.168,-0.098 -0.315,-0.294 -0.191,-0.205 -0.141,-0.052 -0.143,0.061 -0.51,0.07 -0.121,0.119 -0.236,0.132 -0.236,0.063 -0.341,0.045 -0.179,-0.006 -0.1,0.063 -0.084,0.193 -0.057,0.188 -0.05,0.076 -0.424,0.093 -0.094,0.108 -0.025,0.105 0.008,0.105 -0.338,-0.102 -0.261,0.069 -0.062,0.08 -0.054,0.116 0.03,0.123 0.096,0.12 0.091,0.324 0.033,0.323 -0.056,0.184 -0.194,0.13 -0.401,0.145 -0.389,-0.069 -0.17,0.057 -0.288,0.018 -0.265,0.038 -0.407,0.132 -0.368,0.078 -0.33,-0.269 -0.392,-0.183 -0.412,-0.109 -0.143,0.079 -0.062,0.063 -0.345,-0.238 -0.154,-0.085 -0.075,-0.092 -0.143,-0.318 -0.085,-0.01 -0.284,0.118 -0.274,-0.005 -0.165,-0.022 -0.49,0.014 -0.065,0.217 -0.06,0.033 -0.106,0.029 -0.26,-0.014 -0.333,0.161 -0.357,0.098 -0.279,0.002 -0.287,-0.047 -0.172,0.034 -0.371,0.017 -0.235,0.234 -0.366,-0.013 -0.308,-0.039 0.038,-0.074 0.062,-0.931 0.152,-0.417 -0.006,-0.086 -0.033,-0.065 -0.135,-0.067 -0.097,-0.226 -0.203,-0.595 -0.115,-0.12 -0.319,-0.126 -0.279,-0.172 -0.237,-0.228 -0.433,-0.562 0.219,-0.056 0.066,-0.115 0.219,-0.31 0.025,-0.152 -0.023,-0.086 -0.147,-0.149 -0.1,-0.327 0.075,-0.305 0.007,-0.157 -0.074,-0.156 0.077,-0.194 0.158,-0.106 0.099,-0.031 0.415,-0.021 0.263,-0.389 0.16,-0.124 0.164,-0.221 0.076,-0.081 0.072,-0.172 0.025,-0.176 -0.329,-0.247 -0.112,-0.186 -0.147,-0.206 -0.198,-0.142 -0.399,-0.244 -0.156,-0.248 -0.07,-0.322 -0.106,-0.244 -0.117,-0.159 -0.022,-0.13 -0.049,-0.159 -0.011,-0.313 0.095,-0.417 0.061,-0.148 0.135,-0.041 0.36,-0.223 0.017,-0.285 0.065,-0.178 0.114,-0.102 0.106,-0.068 0.197,0.166 0.478,0.265 0.233,0.192 -0.012,0.119 -0.109,0.118 -0.208,0.116 -0.121,0.153 -0.033,0.189 0.031,0.134 0.144,0.117 0.858,-0.153 0.87,0.079 1.168,0.259 0.774,0.09 0.573,-0.12 1.059,0.217 0.987,0.202 0.947,0.059 0.53,-0.158 0.373,-0.213 0.321,-0.402 0.793,-0.531 0.767,-0.299 1.006,-0.242 0.672,-0.082 0.094,0.082 0.855,0.489 0.381,0.002 0.308,0.087 0.113,0.129 0.077,0.032 0.41,-0.121 0.181,0.267 0.283,0.374 0.483,0.192 0.43,0.108 0.136,0.017 z",
                        title: "Bulgaria",
                        id: "BG",
                    },
                    { d: "m 616.92475,388.1464 -0.091,0.237 -0.087,-0.083 -0.22,-0.41 0.066,-0.288 -0.103,-0.412 0.049,-0.118 0.264,-0.055 0.061,0.018 -0.079,0.132 0.146,0.23 0.022,0.379 z", title: "Bahrain", id: "BH" },
                    {
                        d:
                            "m 560.64375,469.6144 -0.056,0.073 -0.257,0.522 -0.05,0.079 0.028,0.048 0.11,0.099 -0.065,0.165 -0.025,0.044 -0.049,0.153 0.027,0.141 0.062,0.052 0.167,0.068 0.25,0.049 0.295,0.118 0.199,0.021 0.047,0.085 -0.009,0.151 0.048,0.131 10e-4,0.235 -0.059,0.207 -0.304,0.097 -0.157,0.106 -0.042,0.054 0.038,0.062 0.02,0.083 -0.286,0.207 -0.294,0.269 -0.07,0.181 -0.059,0.215 -0.086,0.137 -0.224,0.198 -0.229,0.398 -0.112,0.258 -0.561,0.62 -0.499,0.31 -0.145,0.105 -0.883,-0.018 -0.067,-0.418 -0.134,-0.571 -0.304,-0.515 -0.032,-0.216 0.014,-0.416 10e-4,-0.584 -0.02,-0.314 0.007,-0.229 0.038,-0.398 -0.005,-0.238 -0.199,-0.274 -0.248,-0.292 -0.136,-0.143 -0.007,-0.115 10e-4,-0.107 0.04,-0.155 0.097,-0.173 0.109,-0.019 0.268,0.069 0.279,0.147 0.148,0.331 0.114,0.047 0.206,-10e-4 0.527,-0.043 0.131,0.005 0.239,-0.079 0.238,-0.139 0.069,-0.144 0.055,-0.325 0.05,-0.583 0.122,-0.006 0.332,0.207 0.072,0.014 0.069,-0.007 0.116,-0.103 0.141,-0.084 0.105,0.002 0.386,-0.097 0.207,0.176 0.13,0.055 z",
                        title: "Burundi",
                        id: "BI",
                    },
                    {
                        d:
                            "m 484.98575,430.0844 -0.116,0.183 -0.178,0.378 -0.008,0.295 0.424,0.622 0.049,0.063 0.109,0.097 0.059,0.116 0.051,0.306 0.029,0.345 0.034,0.232 0.205,0.326 0.013,0.131 -0.142,0.487 -0.034,0.052 -0.037,0.013 -0.22,-0.042 -0.094,0.053 -0.12,0.165 -0.073,0.165 -0.004,0.069 0.195,0.306 -0.123,0.441 -0.126,0.275 -0.226,0.157 -0.202,0.037 -0.141,0.074 -0.082,0.097 0.012,0.315 -0.298,0.287 -0.165,0.201 -0.08,0.121 0.034,0.37 -0.106,0.374 -0.184,0.295 -0.412,0.064 -0.346,0.036 -0.118,0.751 0.006,0.475 -0.032,0.485 -0.057,0.198 0.024,0.278 -0.026,0.629 -0.046,0.495 0.061,0.133 0.035,0.291 -0.002,0.301 0.088,0.209 0.096,0.183 -0.003,0.094 -0.051,0.059 -0.043,0.077 0,0.708 0.018,0.212 -0.026,0.134 -0.074,0.112 0.029,0.358 0.06,0.228 0.06,0.168 -0.058,0.14 -0.051,0.185 -0.077,0.472 -0.005,0.164 -1.177,0.115 -1.316,0.189 -0.549,0.123 -0.032,-0.095 0.468,-0.123 -0.097,-0.369 -0.292,-0.436 -0.114,-0.08 -0.059,-0.217 0.071,-0.142 -0.034,-0.096 -0.024,-0.294 -0.144,-0.325 0.263,-0.013 0,-1.045 0,-1.004 0,-0.856 0,-0.678 -0.051,-0.813 -0.007,-0.597 -0.011,-0.788 -0.095,-0.246 -0.398,-0.417 -0.109,-0.216 -0.019,-0.287 -0.089,-0.295 -0.005,-0.517 -0.007,-0.602 -0.036,-0.097 -0.432,-0.287 -0.611,-0.407 -0.466,-0.31 -0.034,-0.023 -0.047,-0.076 0.068,-0.918 0.096,-0.12 0.149,-0.378 0.072,-0.306 0.067,0.001 0.094,-0.099 0.076,-0.146 0.081,0.032 0.136,0.028 0.062,-0.052 -0.008,-0.113 0.045,-0.114 0.107,-0.052 0.028,-0.102 0,-0.118 0.092,-0.031 0.158,0.005 0.128,-0.037 0.103,-0.06 0.134,-0.238 0.075,-0.083 0.023,-0.059 0.076,-0.052 0.209,-0.024 0.169,0.018 0.108,0.138 0.723,-0.121 0.344,0.071 0.703,-0.6 0.159,-0.177 0.213,-0.424 0.073,-0.162 0.066,-0.292 -0.139,-0.539 0.008,-0.096 0.29,-0.116 0.362,-0.09 0.14,-0.007 0.093,-0.046 0.132,-0.117 0.215,-0.085 0.127,0.028 0.078,0.017 0.762,0.713 0.331,0.36 0.088,0.184 0.171,0.133 0.252,0.082 0.23,0.183 z",
                        title: "Benin",
                        id: "BJ",
                    },
                    { d: "m 298.55875,412.2484 -0.043,0.003 -0.033,-0.024 -0.03,-0.044 -0.017,-0.044 0.004,-0.026 0.025,0.012 0.184,0.028 -0.02,0.033 -0.032,0.035 z", title: "Saint Barthelemy", id: "BL" },
                    {
                        d:
                            "m 797.71675,449.2464 -0.229,0.122 -0.226,0.152 -0.226,0.131 -0.105,0.103 0.037,0.144 0.055,0.317 0.03,0.249 0.079,0.099 0.062,0.099 -0.025,0.108 -0.134,0.206 0.076,0.04 -0.097,0.273 -0.144,0.202 -0.199,0.165 -0.128,0.038 -0.103,-0.07 -0.168,-0.181 -0.183,-0.251 -0.085,-0.146 -0.263,-0.02 -0.094,-0.116 -0.006,-0.142 -0.074,-0.166 -0.104,-0.178 -0.154,-0.138 -0.207,-0.107 -0.088,-0.077 0.32,0.005 0.341,-0.045 0.351,-0.149 0.338,-0.18 0.284,-0.206 0.267,-0.232 0.279,-0.183 0.435,-0.213 0.146,0.017 -0.001,0.151 -0.057,0.179 z m 0,0 0.318,0 0.079,0.092 0.167,0.325 0.109,0.326 0.035,0.497 0.133,0.211 -0.021,0.043 -0.08,0.036 -0.124,0.015 -0.214,-0.048 -0.178,-0.073 -0.156,-0.538 -0.069,-0.304 0.006,-0.363 -0.005,-0.219 z",
                        title: "Brunei Darussalam",
                        id: "BN",
                    },
                    {
                        d:
                            "m 311.67075,520.3484 0.056,-0.493 -0.057,-0.427 -0.057,-0.11 -0.825,-0.508 -0.749,-0.462 -0.98,-0.604 -1.264,0.017 -1.309,0.017 -1.247,0.27 -1.227,0.265 -0.582,0.126 -1.167,0.252 -0.687,0.116 -0.18,0.486 -0.269,0.73 -0.267,0.427 -0.308,0.449 -0.434,0.633 -10e-4,0.77 0,0.733 -0.305,1.035 -0.26,0.88 -0.25,0.852 -0.172,0.589 -0.064,0.15 -0.04,-0.048 -0.222,-0.176 -0.198,-0.332 -0.054,-0.151 -0.025,-0.006 -1.19,0.01 -1.145,0.011 -0.117,0.07 -0.165,-10e-4 -0.121,-0.065 -0.118,0.005 -0.171,0.064 -0.153,0.133 -0.437,0.884 -0.216,0.378 -0.161,0.339 -0.117,0.581 -0.049,0.097 -0.136,-0.201 -0.201,-0.531 -0.09,-0.303 -0.129,-0.343 -0.23,-0.431 -0.265,-0.13 -0.165,-0.043 -0.237,-0.082 -0.419,-0.103 -0.183,-0.021 -1.199,-0.014 -0.095,-0.011 -0.47,0.047 -0.238,-0.032 -0.25,-0.24 -0.557,-0.422 -0.112,-0.134 -0.214,-0.088 -0.127,-0.009 -0.078,0.083 -0.096,0.352 -0.114,0.318 -0.119,0.183 -0.398,0.135 -0.371,0.141 -0.204,0.033 -0.109,0.159 -0.048,0.223 -0.091,0.201 -0.536,0.303 -0.119,0.127 -0.062,0.299 -0.299,0.371 -0.092,0.145 -0.47,0.102 -0.611,0.11 -0.357,-0.007 -0.244,-0.029 -0.074,-0.067 -0.165,-0.105 -0.028,-0.117 -0.002,-0.166 0.046,-0.299 -0.023,-0.414 -0.192,-0.482 0.015,-0.155 -0.025,-0.236 -0.097,-0.443 -0.248,-0.223 -0.07,-0.368 -0.029,-0.323 -0.209,-0.404 -0.034,-0.514 0.005,-0.44 -0.328,-0.511 -0.342,-0.542 -0.276,-0.074 -0.068,-0.065 -0.03,-0.155 -0.006,-0.241 0.022,-0.146 0.213,-0.237 0.008,-0.036 -0.043,-0.05 -0.55,-0.354 -0.139,-0.103 -0.043,-0.126 0.004,-0.114 0.131,-0.116 0.067,-0.086 -0.129,-0.252 0.013,-0.228 -0.082,-0.098 0.009,-0.074 0.08,-0.063 0.357,-0.073 0.111,-0.231 0.004,-0.192 -0.054,-0.136 -0.33,-0.343 -0.007,-0.058 0.346,-0.477 0.248,-0.313 0.068,-0.064 -0.021,-0.068 -0.061,-0.083 -0.157,-0.12 -0.204,-0.132 -0.169,-0.16 -0.22,-0.237 -0.277,-0.203 -0.205,-0.202 -0.105,-0.168 -0.002,-0.172 -0.028,-0.285 -0.134,-0.462 -0.036,-0.312 -0.058,-0.345 -0.058,-0.225 -0.032,-0.217 -0.096,-0.235 -0.053,-0.172 0.077,-0.121 0.077,-0.094 -0.009,-0.059 -0.529,-0.251 -0.088,-0.064 -0.125,-0.502 -0.384,-0.446 -0.045,-0.332 0,-0.004 0,-0.13 -0.031,-0.209 -0.117,-0.163 -0.175,-0.113 -0.055,-0.134 0.058,-0.141 0.341,-0.279 0.183,-0.047 0.048,-0.142 0.111,-0.112 0.321,-0.41 0.189,-0.269 0.189,-0.162 0.219,-0.112 0.095,-0.094 -0.05,-0.289 0.015,-0.195 0.076,-0.123 0.219,-0.13 0.197,-0.099 0.042,-0.049 -0.017,-0.073 -0.181,-0.148 -0.373,-0.129 -0.247,0.013 -0.151,-0.114 -0.083,-0.097 -0.489,-1.196 -0.081,-0.279 0.006,-0.108 0.328,-0.59 0.133,-0.193 0.23,-0.278 -0.041,-0.11 -0.403,-0.461 -0.124,-0.219 0.003,-0.219 0.04,-0.265 0.234,-0.143 0.067,-0.216 0.049,-0.213 0.1,-0.07 0.102,-0.121 0.121,-0.174 0.188,-0.152 0.111,-0.116 0.024,-0.323 0.092,-0.088 0.257,-0.103 0.026,-0.083 -0.058,-0.217 -0.128,-0.229 -0.104,-0.112 -0.137,-0.562 -0.143,-0.279 0.06,-0.112 0.099,-0.142 0.096,-0.281 0.031,-0.327 -0.024,-1.202 0.006,-0.237 0.126,-0.165 0.185,-0.192 0.157,-0.073 0.148,-0.121 -0.011,-0.227 0.098,-0.134 0.121,-0.168 -0.375,-0.661 -0.33,-0.581 -0.309,-0.545 -0.358,-0.63 -0.235,-0.415 -0.293,-0.515 -0.257,-0.452 -0.351,-0.616 0.326,-0.011 0.657,0.022 0.636,0.11 0.431,0.048 0.18,0.094 0.04,0.151 0.119,0.07 0.138,-0.027 0.156,-0.01 0.349,-0.154 0.282,-0.103 0.243,-0.123 0.125,-0.12 0.303,-0.421 0.244,-0.232 0.225,-0.081 0.439,-0.034 0.139,0.066 0.179,-0.008 0.155,-0.239 0.236,-0.264 0.465,-0.329 0.236,-0.09 0.147,-0.115 0.252,-0.017 0.222,-0.12 1.071,-0.831 0.434,-0.214 0.27,-0.039 0.224,-0.051 0.38,-0.119 0.952,-0.116 0.611,-0.047 0.196,0.115 0.22,-0.033 0.187,-0.186 0.155,-0.06 0.114,0.005 0.164,0.22 0.08,0.234 -0.053,0.178 0.01,0.259 0.073,0.338 -0.041,0.302 -0.231,0.394 -0.116,0.161 -0.029,0.166 0.02,0.224 0.106,0.364 0.191,0.506 0.029,0.374 -0.134,0.243 -0.062,0.21 0.011,0.177 0.047,0.124 0.086,0.071 0.047,0.141 0.01,0.212 0.112,0.205 0.213,0.198 0.087,0.188 -0.04,0.18 0.011,0.113 0.062,0.044 0.058,-0.036 0.078,-0.05 0.069,0.018 0.15,0.251 0.019,0.051 0.081,0.208 0.025,0.157 0.219,0.088 0.237,0.069 0.131,0.082 0.262,0.249 0.22,0.164 0.276,0.134 0.091,0.215 0.169,0.324 0.465,0.124 0.542,0.062 0.346,0.071 0.422,-0.172 0.279,0.024 0.289,0.117 0.123,0.08 0.215,0.167 0.333,0.214 0.272,0.079 0.194,-0.119 0.179,-0.042 0.139,0.05 0.073,0.233 0.073,0.157 0.161,0.119 0.345,0.305 0.195,0.125 0.22,-0.009 0.454,0.201 0.484,0.195 0.25,0.032 0.246,-0.029 0.163,0.076 0.066,0.235 0.421,0.47 0.198,0.185 0.236,0.158 0.601,-0.003 0.18,0.047 0.268,-0.042 0.806,-0.08 0.146,-0.025 0.456,0.205 0.539,0.296 0.357,0.232 0.249,0.128 0.13,0.208 0.106,0.217 0.049,0.234 -0.065,0.232 -0.098,0.094 -0.033,0.15 0.041,0.225 0.179,0.201 0.066,0.247 0.098,0.438 0.11,0.138 0.071,1.357 -0.361,0.011 -0.509,0.016 0.149,0.13 0.421,0.506 0.387,0.467 0.062,0.75 0.038,0.473 0.055,0.668 0.032,0.399 0.967,0.036 1.114,0.041 1.339,0.05 1.177,0.044 0.116,-0.005 0.204,-0.054 0.136,-0.071 0.083,0.002 0.014,0.162 -0.028,0.204 10e-4,0.235 -0.337,0.464 -0.021,0.146 0.051,0.612 0.119,0.496 0.06,0.448 0.135,0.14 0.399,0.237 0.603,0.438 0.241,0.057 0.204,-0.06 0.122,0.179 0.024,0.289 0.333,0.807 0.211,0.513 0.097,0.179 0.158,0.092 -0.03,0.067 -0.131,0.027 -0.059,0.096 -0.183,0.576 -0.241,0.759 -0.163,0.535 0.147,0.008 0.006,0.148 0.033,0.226 -0.181,0.028 -0.054,0.081 -0.208,0.439 -0.272,0.575 -0.282,0.596 -0.167,0.353 0.285,0.261 0.475,0.436 -0.075,0.121 -0.204,0.061 -0.171,0.042 -0.131,0.165 -0.073,0.121 z",
                        title: "Bolivia",
                        id: "BO",
                    },
                    { d: "m 293.23075,367.6474 -0.252,0.112 -0.07,-0.009 -0.05,-0.038 0.257,-0.112 0.215,-0.262 0.074,0.017 z", title: "Bermuda", id: "BM" },
                    {
                        d:
                            "m 283.47675,428.8064 -0.136,0.321 -0.078,-0.143 -0.014,-0.255 -0.056,-0.1 -0.116,-0.061 -0.063,-0.084 0.005,-0.126 0.42,0.202 0.038,0.246 z m 14.785,-15.444 -0.068,0.061 -0.06,-0.005 -0.04,-0.059 -0.007,-0.098 0.057,0.027 0.021,0.015 0.018,0.02 0.079,0.039 z m -0.828,-0.373 -0.025,0.011 -0.036,-0.027 0.006,-0.048 0.03,-0.02 0.023,0.014 0.018,0.038 -0.016,0.032 z",
                        title: "Bonaire,  Saint Eustachius and Saba",
                        id: "BQ",
                    },
                    {
                        d:
                            "m 316.37675,457.5064 0.084,0.027 0.188,0.023 0.446,0.107 0.582,0.121 0.159,-0.042 0.095,-0.085 0.022,-0.249 0.018,-0.176 -0.131,-0.155 -0.163,-0.176 -0.15,-0.219 -0.18,-0.063 0.023,-0.113 0.117,-0.117 0.12,-0.064 0.069,-0.079 0.076,-0.292 0.05,-0.052 0.051,-0.013 0.06,0.011 0.119,0.076 0.458,0.232 0.201,-0.035 0.768,-0.061 0.116,-0.134 0.163,-0.03 0.276,-0.134 0.109,-0.009 0.098,0.032 0.123,-0.025 0.181,-0.125 0.076,-0.013 0.029,0.138 0.117,0.143 0.142,0.131 0.068,0.03 0.238,-0.042 0.125,0.037 0.054,0.122 0.016,0.106 0.1,0.09 0.128,0.002 0.068,0.037 0.117,0.058 0.099,0.133 0.23,0.106 0.393,0.148 0.183,0.002 0.17,0.045 0.104,0.045 0.113,-0.083 0.402,-0.229 0.196,-0.128 0.132,-0.097 0.099,-0.092 0.074,-0.024 0.05,0.055 0.043,0.074 0.144,0.043 0.336,0.086 0.154,0.024 0.216,-0.073 0.185,-0.125 0.088,-0.043 0.137,0.125 0.094,0.175 0.063,0.077 0.139,-0.018 0.275,0.027 0.203,0.056 0.126,-0.005 0.172,-0.078 0.093,-0.154 0.244,-0.141 0.232,-0.13 0.133,-0.173 0.197,-0.288 0.066,-0.123 0.014,-0.208 0.277,-0.604 0.105,-0.111 0.062,-0.191 0.111,-0.221 0,-0.185 0.081,-0.179 0.159,-0.154 0.117,-0.097 0.188,-0.26 0.131,-0.245 0.327,-0.543 0.025,-0.154 0.13,-0.092 0.043,-0.117 0.139,-0.145 0.146,-0.114 0.063,-0.169 0.107,-0.175 0.234,-0.131 0.087,-0.06 0.266,-0.482 0.03,-0.215 0.24,-0.008 0.377,0.249 0.301,0.367 0.403,1.179 0.067,1.089 0.163,0.57 0.469,1.188 0.03,0.22 0.075,0.266 0.148,0.282 0.164,0.464 0.006,0.086 -0.106,0.126 0.156,0.009 0.141,0.075 0.092,0.294 0.117,0.199 0.212,0.272 0.434,0.089 0.328,0.033 0.373,0.154 0.274,0.197 0.212,0.669 -0.069,0.42 0.021,0.296 -0.11,0.116 -0.307,0.194 -0.067,0.103 -0.627,0.5 -0.137,0.236 -0.336,0.317 -0.333,0.604 -0.487,0.552 -0.172,0.14 -0.263,0.032 -0.16,0.085 -0.378,0.451 -0.508,0.15 -0.047,0.261 -0.293,0.596 -0.259,0.326 -0.165,0.11 -0.415,0.594 -0.053,0.26 0.002,0.455 -0.277,0.277 -0.288,0.176 -0.036,0.389 -0.13,0.133 -0.111,0.086 -0.586,-0.102 -0.91,0.423 -0.311,0.105 0.993,0.021 0.319,0.225 0.699,-0.149 0.846,-0.536 0.323,-0.113 0.656,-0.364 0.267,-0.243 0.486,-0.291 0.104,-0.128 0.272,-0.136 0.148,0.173 0.012,0.109 -0.224,0.213 0.058,0.137 0.147,0.172 0.053,0.238 0.02,0.181 0.091,0.317 0.301,0.429 0.01,0.142 -0.042,0.187 0.144,0.154 0.149,0.091 0.512,0.462 0.4,-0.258 0.247,-0.075 0.157,-0.108 0.33,-0.072 0.27,0.108 0.515,0.155 0.377,-0.165 0.762,-0.378 -0.238,0.669 -0.173,0.614 -0.131,0.248 -0.13,0.668 -0.128,0.179 -0.104,0.204 0.17,-0.071 0.146,-0.097 0.187,-0.257 0.14,-0.447 0.552,-1.193 0.158,-0.106 0.459,-0.136 0.79,-0.954 0.309,0.003 0.198,0.219 0.187,0.13 0.048,-0.261 0.27,-0.106 -0.285,-0.129 -0.046,-0.117 -0.027,-0.195 0.194,-0.264 -0.116,-0.234 0.402,-0.294 -0.031,-0.221 0.144,-0.182 0.182,-0.188 0.206,-0.091 0.038,-0.161 0.13,-0.066 0.102,-0.024 0.201,0.18 0.218,-0.212 0.212,-0.083 0.095,0.037 0.119,0.094 0.125,0.04 0.101,-0.017 0.263,-0.136 0.243,0.219 0.146,0.048 -0.04,-0.123 -0.077,-0.114 0.06,-0.093 0.115,-0.058 0.364,0.052 0.191,0.098 0.207,0.181 0.287,0.013 0.226,-0.019 0.142,0.102 0.231,-10e-4 0.116,0.159 0.352,0.223 0.076,0.151 0.283,0.073 0.266,0.093 0.283,0.025 0.286,-0.022 0.012,0.191 0.209,0.052 0.269,-0.042 0.203,0.235 0.543,0.177 0.376,0.271 0.247,-0.048 0.276,0.072 0.296,0.589 0.067,0.418 0.132,-0.058 0.123,-0.187 0.158,-0.342 0.297,-0.113 0.142,0.131 0.297,0.21 0.256,0.23 0.108,0.148 0.193,0.024 -0.161,0.182 0.162,-0.019 0.195,-0.129 0.167,0.268 0.126,0.292 0.025,0.297 -0.119,0.17 -0.104,0.107 -0.116,0.21 -0.137,0.038 -0.137,0.068 0.156,0.153 0.107,0.147 0.234,-0.398 0.165,-0.112 0.238,-0.062 0.124,0.283 0.026,0.268 -0.388,0.111 -10e-4,0.211 -0.116,0.12 -0.076,0.138 -0.061,0.288 -0.079,0.239 -0.231,1.06 -0.004,0.175 0.282,-0.187 0.52,-0.54 0.158,-0.575 0.205,-0.567 0.223,-0.178 0.139,0 0.207,0.062 0.012,0.186 -0.032,0.107 -0.222,0.282 -0.094,0.154 0.091,0.152 0.503,-0.467 0.226,-0.164 0.192,0.033 0.381,-0.216 0.768,-0.045 0.058,-0.247 0.153,-0.105 0.422,0.028 0.822,0.22 0.293,0.18 0.439,0.167 0.231,0.199 0.965,0.366 0.701,0.039 0.347,-0.166 0.433,0.174 0.229,0.195 0.45,0.105 0.454,0.055 0.347,-0.14 0.896,-0.046 1.125,-0.207 0.671,0.049 0.76,0.135 0.542,0.347 0.456,0.196 0.276,0.193 0.445,0.201 0.949,0.539 0.333,0.312 0.588,0.424 0.591,0.178 0.319,0.444 0.253,0.2 0.626,0.75 0.71,0.525 0.475,0.525 0.912,0.338 0.356,0.558 0.617,0.068 0.263,0.083 0.32,0.235 0.439,0.131 0.572,-0.037 0.631,0.027 0.511,-0.11 1.208,0.209 0.19,0.103 0.25,0.237 0.441,0.885 0.263,0.982 0.13,0.751 0.301,0.584 0.164,1.098 0.14,0.346 0.011,0.267 0.119,0.06 0.08,0.742 -0.031,0.299 -0.116,0.389 -0.008,0.174 0.017,0.11 -0.051,0.163 -0.016,0.156 0.117,0.35 0.006,0.28 -0.157,0.34 -0.214,0.889 -0.536,1.475 -0.514,0.848 -0.719,0.876 -0.469,0.458 -0.186,0.047 -0.17,-0.091 0.121,0.242 -0.105,0.213 -0.476,0.646 -0.473,0.422 -0.491,0.734 -0.037,0.017 -0.629,0.284 -0.372,0.232 -0.476,0.422 -0.437,0.666 -0.09,0.085 -0.161,-0.047 0.005,0.338 -0.376,0.536 -0.115,0.079 0.003,-0.152 0.065,-0.116 0.03,-0.123 -0.002,-0.146 -0.105,0.106 -0.223,0.402 0.075,0.294 -0.161,0.445 -0.616,1.272 -0.754,1.071 -0.174,0.331 -0.619,0.723 -0.455,0.349 -0.128,0.002 -0.145,-0.03 -0.073,-0.556 -0.362,-0.336 -0.104,-0.059 -0.148,0.356 -0.124,0.098 -0.179,0.021 0.191,0.155 0.056,0.18 -0.195,0.36 -0.006,0.327 -0.348,0.361 -0.202,0.264 -0.102,0.331 -0.062,0.309 0.153,-0.084 0.073,0.065 0.057,0.096 -0.035,0.142 -0.112,0.269 0.017,0.669 -0.037,0.152 0.111,0.165 0.118,-0.281 0.068,0.079 -0.329,1.796 0.129,0.81 0.048,0.919 0.148,0.899 0.163,0.804 0.013,0.064 -0.225,0.935 -0.288,0.924 -0.173,0.755 -0.109,0.816 -0.109,0.393 -0.035,0.402 0.125,0.954 0.047,0.181 -0.349,0.426 -0.377,0.207 -0.208,0.206 -0.46,0.77 -0.25,1.14 -0.006,0.607 0.118,1.274 -0.088,0.521 -0.146,0.349 -0.172,0.229 -0.439,0.275 -0.394,0.671 -0.171,0.706 -0.27,0.258 -0.055,0.396 -0.217,0.428 -0.563,0.639 -0.366,0.186 -0.174,0.179 -0.111,0.375 -0.353,0.618 -0.26,0.803 0.068,0.273 0.004,0.042 0.095,0.93 -0.035,0.237 -0.343,0.257 -1.292,0.48 -0.344,0.199 -0.771,0.818 -0.048,0.193 0.032,0.276 0.126,0.159 -0.13,0.172 -0.154,0.309 -0.225,-0.019 -1.287,0 -0.696,0.098 -0.362,-0.019 -0.163,-0.074 -0.182,-0.121 -0.055,-0.159 0.099,-0.24 -0.059,-0.143 -0.191,0.005 -0.209,0.068 -0.036,0.143 0.015,0.103 0.078,0.149 0.043,0.184 -0.086,0.159 -0.408,0.021 -0.458,0.146 -0.572,0.061 -0.456,0.106 -0.21,-0.134 0.21,-0.067 0.302,0.032 0.324,-0.111 -0.076,-0.131 -0.458,-0.168 -0.509,0.103 -0.282,0.201 -0.617,-0.019 -0.756,0.153 -0.123,0.156 0.021,0.302 0.147,0.066 0.145,0.138 -0.139,0.129 -0.135,0.057 -0.798,0.141 -0.74,0.591 -0.309,0.074 -0.275,0.261 -0.028,0.223 -0.087,0.135 -0.176,0.007 -0.386,-0.122 -0.501,-0.003 -0.362,0.097 -1.849,0.961 -0.664,0.386 -0.757,0.787 -1.277,0.884 -0.671,0.529 -0.127,0.137 -0.106,0.007 -0.21,0.11 0.083,0.091 0.143,0.008 -0.059,0.309 -0.267,0.211 -0.501,0.555 -0.111,-0.041 0.159,-0.289 -0.246,-0.011 -0.362,-0.106 -0.157,0.119 0.087,0.286 -0.136,0.123 -0.247,0.014 -0.224,-0.034 -0.246,-0.209 0.111,0.379 0.52,0.092 0.216,0.089 0.081,0.146 -0.404,0.677 -0.338,0.088 -0.037,0.096 0.186,0 0.103,0.188 -0.121,0.758 -0.167,0.144 -0.098,0.004 -0.097,0.13 0.133,0.248 0.138,0.181 -0.019,0.352 -0.052,0.291 -0.003,0.283 0.174,0.548 0.063,0.563 0.07,0.205 0.04,0.228 -0.116,0.213 0.066,0.342 -0.198,0.583 0.104,0.842 -0.042,0.792 -0.078,0.417 -0.126,0.326 -0.292,0.42 -0.006,0.421 -0.629,0.393 -0.695,0.549 -0.642,0.652 -0.691,0.921 -0.806,1.406 -0.747,2.017 -0.899,1.532 -0.36,0.555 -0.486,0.622 -0.647,0.726 -0.866,0.728 -0.948,0.65 -0.342,0.293 -0.334,0.413 -0.083,-0.171 0.072,-0.282 -0.046,-0.211 -0.01,-0.273 0.191,-0.051 0.286,0.174 0.146,-0.118 0.106,-0.116 0.345,-0.073 0.658,-0.713 0.488,-0.263 0.275,-0.449 0.047,-0.238 -0.011,-0.483 0.156,-0.123 0.353,0.042 0.072,-0.138 -0.031,-0.152 0.069,-0.332 0.479,-0.294 0.227,-0.354 -0.076,-0.902 0.088,-0.041 0.197,0.14 0.093,-0.058 0.099,-0.395 -0.048,-0.205 -0.232,-0.054 -0.802,0.445 -0.261,-0.019 -0.043,-0.349 -0.39,-0.16 -0.152,-0.29 -0.045,-0.198 -0.135,-0.081 0.008,0.343 0.037,0.333 0.35,0.389 -0.085,0.155 -0.166,0.18 -0.116,0.401 0.013,0.521 -0.094,-0.159 -0.12,-0.092 -0.049,0.56 -0.232,0.215 -0.073,0.211 0.061,0.245 -0.12,0.169 -0.591,0.455 -0.589,0.311 -0.128,0.146 -0.063,0.348 -0.09,0.357 -0.261,0.315 -0.207,0.626 0.005,0.27 0.069,0.398 0.111,0.262 -0.176,0.175 -0.237,0.34 -0.188,0.384 -0.468,1.445 -0.403,0.875 -0.311,0.429 -0.443,0.453 -1.262,1.141 -0.076,-0.016 -0.185,-0.092 -0.155,-0.109 -0.035,-0.073 -0.018,-0.109 0.021,-0.411 -0.003,-1.102 0.055,-0.208 0.082,-0.134 0.246,-0.194 0.239,-0.277 0.27,-0.353 0.249,-0.28 -0.089,-0.188 -0.208,-0.182 -0.369,-0.146 -0.355,-0.258 -0.315,-0.332 -0.146,-0.345 -0.134,-0.372 -0.127,-0.293 -0.042,-0.134 -0.125,-0.056 -0.198,-0.149 -0.124,-0.139 -0.181,-0.08 -0.324,-0.087 -0.337,-0.153 -0.419,-0.362 -0.302,-0.401 -0.149,-0.265 -0.159,-0.186 -0.865,-0.308 -0.393,-0.367 -0.155,0.115 -0.231,-0.112 -0.228,-0.176 -0.068,-0.136 -0.096,-0.139 -0.09,-0.159 -0.058,-0.152 -0.234,-0.267 -0.303,-0.288 -0.128,-0.082 -0.068,0.024 -0.065,0.11 -0.042,0.107 -0.114,0.071 -0.141,0.132 -0.145,0.162 -0.185,0.107 -0.22,0.037 -0.148,-0.005 -0.03,-0.064 -0.008,-0.221 0.055,-0.503 -0.128,-0.194 -0.171,-0.208 -0.197,-0.277 -0.648,-0.587 -0.883,-0.843 -0.312,-0.257 -0.293,-0.02 -0.268,0.029 -0.247,0.111 -0.187,0.389 -0.077,0.06 -0.476,-0.008 -0.473,-0.063 -0.159,-0.237 0.126,-0.154 0.445,-0.342 0.246,-0.305 0.047,-0.267 0.213,-0.24 0.38,-0.212 0.423,-0.39 0.466,-0.568 0.284,-0.418 0.1,-0.27 0.183,-0.208 0.266,-0.146 0.232,-0.304 0.199,-0.462 0.271,-0.367 0.344,-0.272 0.193,-0.226 0.041,-0.179 0.097,-0.114 0.154,-0.05 0.074,-0.094 -0.005,-0.138 0.042,-0.094 0.088,-0.05 0.148,0.018 0.208,0.085 0.125,-0.016 0.043,-0.117 -0.055,-0.134 -0.153,-0.15 0.058,-0.163 0.402,-0.264 0.296,-0.1 0.188,-0.163 0.178,-0.259 0.289,-0.18 0.399,-0.102 0.106,-0.097 -0.015,-0.125 0.082,-0.09 0.236,-0.065 0.128,-0.122 0.021,-0.179 0.076,-0.166 0.131,-0.153 0.146,-0.057 0.161,0.039 0.151,-0.058 0.142,-0.155 0.17,-0.072 0.198,0.01 0.102,-0.034 0.34,-0.072 0.188,-0.13 0.154,-0.291 0.137,-0.112 0.12,0.065 0.207,-0.097 0.294,-0.259 0.056,-0.005 0.217,-0.121 0.224,-0.448 0.115,-0.299 -0.027,-0.245 -0.074,-0.175 0.025,-0.257 0.074,-0.697 0.02,-0.285 0.119,-0.198 -0.008,-0.196 -0.212,-0.44 -0.214,-0.386 -0.115,-0.653 -0.076,-0.248 -0.178,-0.066 -0.162,-0.216 -0.204,-0.019 -0.096,-0.083 -0.099,-0.068 -0.145,0.02 -0.124,0.126 -0.229,0.004 -0.145,0.052 -0.17,0.112 -0.162,-0.051 -0.102,-0.099 -0.219,-10e-4 0.015,-0.443 0.386,-0.656 0.104,-0.305 -0.05,-0.173 0.115,-0.609 0.281,-1.042 0.09,-0.681 -0.102,-0.321 -0.003,-0.224 0.145,-0.19 0.07,-0.057 -0.362,-0.232 -0.195,-0.212 -0.25,-0.151 -0.269,-0.121 -0.13,0.051 -0.139,0.07 -0.269,0.111 -0.306,0.192 -0.158,0.07 -0.279,0.071 -0.315,0.061 -0.26,-0.04 -0.223,-0.041 -0.14,-0.121 -0.074,-0.263 0,-0.222 -0.046,-0.322 -0.167,-0.182 -0.056,-0.141 -0.009,-0.171 0.019,-0.191 0.046,-0.141 -0.028,-0.171 -0.074,-0.121 0.019,-0.211 -0.037,-0.292 -0.111,-0.181 -0.056,-0.21 0,-0.21 -0.083,-0.21 -0.009,-0.23 0.074,-0.21 0.028,-0.21 -0.083,-0.15 -0.158,-0.09 -0.121,-0.24 -0.019,-0.31 -0.13,-0.169 -0.139,-0.14 -0.158,0 -0.241,-0.08 -0.213,0.01 -0.344,-0.01 -0.158,-0.05 -0.083,-0.109 -0.213,-0.149 -0.121,-0.259 -0.148,-0.05 -0.214,0.08 -0.074,0.1 -0.083,0.14 -0.148,0.16 -0.195,-0.01 -0.204,0.09 -0.195,0.01 -0.26,0.02 -0.26,-0.08 -0.315,-0.09 -0.27,-0.06 -0.26,0.06 -0.176,-0.05 -0.232,-0.03 -0.26,-0.02 -0.204,-0.16 -0.223,-0.089 -0.121,0.03 -0.158,0.1 -0.167,-0.02 -0.214,-0.08 -0.083,-0.189 0.019,-0.12 0.046,-0.12 0.083,-0.169 -0.046,-0.179 0.019,-0.159 0.037,-0.139 0.037,-0.159 -0.028,-0.149 -0.009,-0.159 -0.019,-0.149 -0.028,-0.159 0.111,-0.228 0.093,-0.188 -0.056,-0.158 0.019,-0.109 0.074,-0.178 0.093,-0.218 -0.009,-0.406 -0.083,-0.237 -0.091,-0.064 -0.023,-0.071 0.044,-0.094 -0.048,-0.096 -0.019,-0.099 0.048,-0.086 -0.066,-0.17 -0.133,-0.049 -0.046,-0.049 -0.046,-0.188 -0.037,-0.217 0.019,-0.167 -0.065,-0.147 -0.093,-0.089 -0.093,-0.157 -0.093,-0.118 -0.037,-0.167 -0.062,-0.216 0.185,-0.04 0.073,-0.121 0.13,-0.164 0.171,-0.043 0.204,-0.06 0.075,-0.121 -0.475,-0.436 -0.285,-0.261 0.167,-0.354 0.282,-0.595 0.272,-0.576 0.208,-0.438 0.053,-0.081 0.182,-0.028 -0.033,-0.226 -0.006,-0.148 -0.146,-0.008 0.163,-0.534 0.241,-0.76 0.183,-0.575 0.059,-0.096 0.131,-0.027 0.03,-0.066 -0.158,-0.092 -0.097,-0.179 -0.211,-0.513 -0.333,-0.808 -0.024,-0.289 -0.122,-0.178 -0.204,0.06 -0.241,-0.057 -0.603,-0.438 -0.399,-0.237 -0.135,-0.14 -0.06,-0.449 -0.119,-0.495 -0.051,-0.612 0.021,-0.146 0.337,-0.464 -10e-4,-0.234 0.028,-0.205 -0.014,-0.162 -0.083,-0.002 -0.135,0.071 -0.205,0.054 -0.116,0.005 -1.177,-0.044 -1.339,-0.05 -1.114,-0.042 -0.967,-0.036 -0.032,-0.399 -0.055,-0.667 -0.039,-0.474 -0.062,-0.75 -0.388,-0.467 -0.421,-0.506 -0.148,-0.13 0.509,-0.016 0.361,-0.011 -0.071,-1.357 -0.11,-0.138 -0.098,-0.438 -0.066,-0.248 -0.179,-0.2 -0.041,-0.226 0.033,-0.15 0.098,-0.093 0.065,-0.232 -0.049,-0.233 -0.106,-0.217 -0.13,-0.208 -0.249,-0.128 -0.356,-0.232 -0.54,-0.295 -0.456,-0.206 -0.146,0.025 -0.806,0.08 -0.268,0.042 -0.18,-0.047 -0.601,0.002 -0.236,-0.158 -0.198,-0.185 -0.421,-0.47 -0.065,-0.235 -0.163,-0.075 -0.247,0.029 -0.25,-0.032 -0.484,-0.195 -0.454,-0.2 -0.22,0.008 -0.195,-0.125 -0.345,-0.305 -0.161,-0.119 -0.073,-0.158 -0.073,-0.232 -0.139,-0.05 -0.179,0.042 -0.194,0.119 -0.272,-0.079 -0.333,-0.214 -0.215,-0.167 -0.123,-0.079 -0.289,-0.117 -0.279,-0.024 -0.422,0.172 -0.346,-0.071 -0.542,-0.062 -0.464,-0.125 -0.169,-0.324 -0.091,-0.214 -0.276,-0.134 -0.22,-0.164 -0.262,-0.249 -0.13,-0.083 -0.237,-0.069 -0.219,-0.088 -0.024,-0.157 -0.082,-0.207 -0.019,-0.051 -0.149,-0.251 -0.07,-0.018 -0.077,0.05 -0.058,0.036 -0.063,-0.044 -0.011,-0.112 0.04,-0.18 -0.086,-0.188 -0.213,-0.198 -0.112,-0.205 -0.01,-0.212 -0.047,-0.141 -0.085,-0.072 -0.048,-0.124 -0.01,-0.176 0.062,-0.21 0.134,-0.243 -0.029,-0.375 -0.191,-0.506 -0.106,-0.364 -0.02,-0.224 0.029,-0.166 0.116,-0.161 0.231,-0.395 0.041,-0.301 -0.073,-0.339 -0.01,-0.259 0.053,-0.178 -0.08,-0.233 -0.164,-0.22 -0.114,-0.005 -0.155,0.06 -0.187,0.186 -0.22,0.033 -0.195,-0.115 -0.612,0.048 -0.951,0.115 -0.38,0.119 -0.224,0.051 -0.271,0.039 -0.434,0.214 -1.071,0.831 -0.222,0.121 -0.252,0.017 -0.147,0.115 -0.236,0.09 -0.464,0.329 -0.236,0.264 -0.155,0.239 -0.179,0.008 -0.139,-0.066 -0.439,0.033 -0.225,0.082 -0.244,0.232 -0.303,0.42 -0.125,0.12 -0.244,0.124 -0.282,0.103 -0.349,0.154 -0.156,0.01 -0.138,0.027 -0.119,-0.07 -0.04,-0.151 -0.18,-0.095 -0.43,-0.048 -0.637,-0.11 -0.657,-0.021 -0.326,0.01 -0.268,0.007 -0.465,-0.059 -0.339,-0.01 -0.297,0.149 -0.432,0.185 -0.197,0.047 -0.145,0.007 -0.141,-0.023 -0.165,-0.096 -0.231,-0.221 -0.178,0.085 -0.128,0.095 0.002,-0.481 0.003,-0.723 0.003,-0.637 0.002,-0.509 0.002,-0.594 0.002,-0.419 0.121,-0.159 0.074,-0.178 -0.089,-0.238 0.02,-0.218 0.062,-0.152 0.081,-0.148 -0.187,0.074 -0.082,0.041 -0.1,0.112 -0.242,0.152 -0.162,0.152 -0.191,0.124 -0.242,0.273 -0.199,0.15 -0.207,0.096 -0.344,0.321 -0.285,0.064 -0.754,0.049 -0.784,-0.001 -0.717,-10e-4 -0.108,-0.004 0.007,-0.265 0.018,-0.187 -0.245,-0.197 -0.017,-0.243 -0.065,-0.168 -0.082,-0.205 -0.171,-0.131 -0.241,-0.051 -0.395,-0.113 -0.586,-0.118 -0.56,-0.008 -0.549,0.011 0.335,-0.412 0.335,-0.411 -0.01,-0.358 -0.271,-0.312 -0.146,-0.194 -0.226,-0.267 -0.279,-0.185 -0.152,-0.246 0.014,-0.149 -0.024,-0.098 -0.106,-0.057 -0.106,-0.09 -0.146,-0.099 -0.171,-0.131 0,-0.131 -0.065,-0.139 -0.106,-0.163 0,-0.131 -0.098,-0.205 -0.106,-0.147 -0.106,-0.098 -0.155,-0.139 0.008,-0.114 0.114,-0.057 0.049,-0.131 -0.016,-0.131 -0.13,-0.082 -0.155,-0.041 -0.204,-0.237 -0.147,-0.123 -0.098,-0.074 -0.057,-0.082 0.057,-0.057 0.065,-0.082 0.017,-0.131 -0.033,-0.122 0,-0.106 0.098,-0.033 0.106,0.017 0.106,-0.065 0.139,-0.024 0.155,-0.017 0.082,-0.073 -0.008,-0.13 -0.098,-0.253 -0.098,-0.106 -0.033,-0.155 0.08,-0.298 0.051,-0.191 0.179,-0.202 0.546,-0.433 0.49,-0.294 0.239,-0.03 0.177,-0.109 0.112,-0.167 0.031,-0.182 -0.025,-0.159 -0.091,-0.234 -0.109,-0.292 -0.082,-0.163 0.073,-0.195 0.13,-0.267 0.266,-0.403 0.248,-0.434 0.027,-0.126 0.032,-0.265 0.114,-0.54 0.063,-0.292 -0.033,-0.113 0.057,-0.098 0.155,-0.082 0.374,-0.074 0.254,-0.161 0.391,-0.303 0.326,-0.322 0.27,-0.104 0.489,-0.298 0.281,-0.189 0.11,-0.059 0.276,-0.137 0.495,-0.047 0.412,-0.049 0.233,-0.09 0.341,-0.037 0.229,-0.101 0.255,-0.003 0.479,-0.103 0.163,-0.154 0.139,-0.184 0.187,-0.157 0.219,-0.041 0.244,0.027 0.292,-0.003 0.354,-0.049 0.171,0.122 0.075,0.149 0.218,0.151 0.155,-0.008 0.155,-0.033 0.212,0.13 0.139,-0.016 0.089,-0.073 0.017,-0.182 0.05,-0.099 0.104,-0.57 0.172,-0.941 0.156,-0.853 0.172,-0.943 0.179,-0.974 0.181,-0.986 0.148,-0.809 0.127,-0.695 0.079,-0.427 0.122,-0.559 0.048,-0.491 0.049,-0.141 -0.031,-0.119 -0.106,-0.169 10e-4,-0.074 0.012,-0.098 -0.012,-0.086 -0.111,-0.092 -0.086,-0.055 -0.068,-0.08 -0.031,-0.111 -0.056,-0.111 -0.025,-0.117 -0.081,-0.092 -0.024,-0.117 0.056,-0.111 0.024,-0.117 -0.024,-0.11 -0.031,-0.129 -0.062,-0.123 -0.094,-0.075 -0.225,-0.083 -0.226,-0.199 -0.267,-0.178 -0.34,-0.338 -0.074,-0.16 -10e-4,-0.439 0.015,-0.476 0.022,-0.719 0.011,-0.366 0.192,-0.021 0.169,-0.01 0.177,-0.025 0.154,-0.025 0.142,-0.053 0.106,-0.065 0.126,-0.042 0.099,0.015 0.099,-0.058 0.109,-0.055 0.106,-0.045 0.154,-0.038 0.144,0.088 0.081,0.088 0.094,0.042 0.088,-0.01 0.061,0.008 0.063,0.07 0.081,0.005 0.116,-0.013 0.109,-0.015 0.05,-0.021 0.008,-0.045 -0.028,-0.078 -0.038,-0.073 0.03,-0.113 0.003,-0.136 0.005,-0.173 -0.086,-0.096 -0.086,-0.181 -0.096,-0.146 -0.149,-0.098 -0.139,-0.038 -0.116,0.061 -0.108,0.01 -0.081,-0.055 -0.131,-0.002 -0.142,-0.018 -0.149,-0.021 -0.27,0.04 -0.096,-0.049 -0.131,-0.005 -0.152,0.053 0.004,-0.695 0.004,-0.655 0.002,-0.46 0.136,0.01 0.169,-0.083 0.251,-0.013 0.193,-0.087 0.108,-0.007 0.204,0.042 0.213,0.09 0.209,0.013 0.548,0 0.592,0 0.659,0 0.66,0 0.572,0 0.177,0.005 -0.103,-0.153 -0.12,-0.198 0.046,-0.156 0.059,-0.157 0.069,-0.082 0.178,0.087 0.149,0.267 0.124,0.201 0.121,0.099 0.15,0.011 0.17,-0.034 0.17,-0.083 0.29,-0.368 0.288,-0.315 0.149,-0.106 0.158,-0.097 0.118,-0.037 0.161,0.012 0.136,0.086 0.088,0.15 0.322,0.522 0.243,0.394 0.082,0.246 0.005,0.6 -0.015,0.531 0.032,0.069 0.048,0.02 0.531,-0.125 0.721,0.644 0.533,0.476 0.23,0.152 0.128,0.042 0.31,-0.032 0.368,-0.062 0.179,-0.068 0.198,-0.149 0.321,-0.207 0.262,-0.114 0.103,-0.015 0.104,0.037 0.221,0.124 0.121,0.23 -0.111,0.267 0.019,0.166 0.232,-0.009 0.186,-0.276 0.13,-0.218 0.272,-0.177 0.265,-0.251 0.185,-0.24 0.217,-0.14 0.327,-0.171 0.259,-0.104 0.242,0.011 0.18,-0.113 0.233,-0.212 0.163,-0.17 0.113,-0.061 0.227,0.017 0.283,-0.023 0.278,-0.207 0.253,-0.25 0.134,-0.422 0.088,-0.374 0.076,-0.076 0.092,-0.06 0.108,-0.039 0.26,-0.027 0.456,-0.199 0.314,-0.202 0.298,-0.043 0.088,-0.054 0.108,-0.187 0.054,-0.329 -0.041,-0.199 -0.548,-0.062 -0.359,0 -0.594,-0.051 -0.283,-0.082 -0.061,-0.057 -0.006,-0.063 0.057,-0.143 0.055,-0.267 -0.081,-0.362 -0.296,-0.567 -0.211,-0.558 -0.028,-0.389 0.005,-0.411 0.017,-0.269 -0.152,-0.21 -0.821,-0.663 -0.284,-0.313 -0.094,-0.217 -0.324,-0.399 0.082,-0.123 0.187,0.004 0.159,0.104 0.146,0.222 0.104,0.05 0.143,0 0.757,-10e-4 0.177,0.038 0.107,0.075 0.091,0.093 0.136,0.259 0.146,0.126 0.3,-0.004 0.47,-0.005 0.264,-0.023 0.158,0.072 0.196,0.06 0.413,-0.138 0.115,-0.003 0.124,0.061 0.445,0.463 0.255,0.195 0.215,0.259 0.313,0.001 0.26,-0.222 0.069,-0.747 0.078,-0.217 0.131,-0.061 0.156,-0.007 0.185,-0.117 0.2,-0.152 0.174,-0.051 0.723,0.163 0.201,-0.078 0.732,-0.197 0.748,-0.254 0.21,-0.32 0.313,-0.086 0.246,-0.234 0.198,0.024 0.3,0.01 0.186,-0.041 0.094,-0.044 0.103,-0.11 0.169,-0.313 0.205,-0.119 0.257,-0.126 0.176,-0.148 0.145,-0.183 0.067,-0.159 -0.002,-0.126 -0.085,-0.245 -0.104,-0.23 -0.112,-0.076 -0.084,-0.029 0.255,-0.054 0.21,0.081 0.328,0.012 0.143,-0.062 0.207,0.03 0.262,-0.165 0.168,0.054 0.111,0 0.101,0.125 0.079,0.141 0.245,0.171 -0.024,0.26 -0.045,0.23 -0.032,0.266 -0.014,0.202 -0.104,0.207 -0.156,0.193 -0.046,0.078 -0.022,0.102 0.105,0.062 0.186,0.018 0.232,0.008 0.158,0.06 0.204,0.012 0.246,0.166 0.119,0.1 0.01,0.077 -0.078,0.184 -0.031,0.17 0.061,0.108 0.072,0.078 0.199,0.384 0.095,0.133 0.08,0.043 0.019,0.074 -0.068,0.14 -0.082,0.178 -0.185,0.187 -0.025,0.148 -0.147,0.093 -0.345,0.221 0.06,0.35 0.012,0.177 -0.006,0.138 -0.118,0.185 -0.204,0.545 -0.075,0.272 -0.066,0.628 0.004,0.211 0.094,0.283 0.2,0.629 0.114,0.101 0.263,0.147 0.033,0.425 -0.023,0.444 -0.012,0.172 0.043,0.074 0.118,0.036 0.084,0.053 0.013,0.131 -0.008,0.137 0.196,0.079 0.171,0.05 0.158,0.188 0.285,0.293 0.114,0.054 0.057,0.121 0.241,0.247 0.367,0.09 0.37,0.109 0.146,0.155 0.152,0.126 0.115,0.006 0.097,-0.02 0.16,-0.109 0.128,-0.094 0.223,0.006 0.262,-0.016 0.045,-0.077 0.025,-0.099 -0.054,-0.253 0.093,-0.077 0.217,-0.043 0.043,-0.135 0.049,-0.074 0.062,-0.086 0.074,-0.012 0.093,0.049 0.143,0.031 0.161,0.043 0.086,0.086 0.143,0.007 0.159,-0.016 0.064,-0.055 0.047,-0.096 0.035,-0.207 0.102,-0.006 0.205,-0.046 0.218,-0.091 0.292,-0.014 0.273,0.002 0.137,-0.061 0.127,-0.133 0.246,-0.377 0.129,-0.087 0.139,-0.065 0.118,0.012 0.241,-0.063 0.198,-0.09 0.074,0.023 0.154,0.193 0.078,0.042 0.114,0.014 0.373,0.098 0.198,-0.031 0.214,-0.062 0.206,-0.023 0.148,0.043 0.107,-0.056 0.093,-0.037 z m 17.355,0.01 -0.28,0.127 -0.161,-0.049 -0.148,-0.332 0.05,-0.276 0.203,-0.092 0.157,0.02 0.058,0.035 0.14,0.453 -0.019,0.114 z m 0.41,4.31 -0.305,0.094 -0.057,-0.088 0,-0.351 0.086,-0.192 0.388,-0.054 0.04,-0.057 0.111,-0.036 0.062,0.121 -0.009,0.201 -0.316,0.362 z m -0.767,0.707 -0.05,0.41 -0.505,-0.173 0.038,-0.419 0.236,-0.118 0.209,-0.223 0.072,-0.273 0.004,-0.372 0.078,-0.064 0.068,-0.026 0.061,0.025 0.024,0.558 0.029,0.342 -0.264,0.333 z m 1.931,-0.359 0.115,0.146 -0.397,0.583 -0.219,0.084 -0.24,0.017 -0.311,-0.174 -0.484,0.013 -0.151,-0.041 -0.016,-0.254 0.203,-0.271 0.406,0.015 0.699,-0.218 0.395,0.1 z m 0.826,1.061 -0.744,0.087 -0.34,-0.139 0.077,-0.117 0.254,-0.187 0.309,-0.132 0.277,-0.059 0.289,0.074 0.079,0.157 -0.024,0.158 -0.177,0.158 z m -3.393,0.053 -0.768,0.546 -0.26,-0.179 -0.054,-0.104 0.044,-0.105 -0.009,-0.044 0.086,-0.187 0.429,-0.153 0.216,-0.026 0.276,0.048 0.046,0.134 -0.006,0.07 z m 2.874,0.273 0.262,0.012 0.371,-0.053 0.249,-0.13 0.278,-0.026 0.275,0.014 0.927,0.145 0.557,0.045 0.204,0.046 0.199,0.066 0.146,0.071 0.036,0.154 -0.135,0.248 -0.101,0.26 -0.094,0.363 -0.073,0.073 -0.122,-0.019 0.076,0.325 -0.027,0.13 -0.061,0.126 -0.149,0.262 -0.226,0.334 -0.067,0.07 -0.172,0.116 -0.14,0.148 0.03,0.14 0.07,0.141 -0.083,0.176 -0.267,0.257 -0.16,0.062 -0.147,0.026 -0.136,-0.025 -0.241,-0.258 -0.025,0.202 -0.065,0.207 -0.082,0.113 -0.311,-0.012 -0.173,-0.111 -0.281,-0.123 -0.053,0.332 -0.175,0.229 -0.176,0.072 -0.276,0.048 -0.158,0.098 -0.298,-0.076 -0.277,-0.152 -0.157,-0.013 -0.122,0.123 -0.643,0.023 -0.295,0.125 -0.18,-0.035 -0.265,-0.252 -0.042,-0.167 -0.158,-0.339 -0.142,-0.403 -0.101,-0.366 0.085,-0.316 0.172,0.01 0.203,0.047 0.043,-0.022 0.01,-0.102 -0.045,-0.084 -0.327,0.013 -0.207,-0.188 -0.036,-0.29 0.042,-0.604 0.027,-0.124 0.145,-0.173 0.047,-0.153 -0.036,-0.162 0.062,-0.295 0.135,-0.255 0.516,-0.322 0.599,-0.115 1.741,0.313 z m -6.185,3.358 -0.297,0.053 0.383,-0.698 0.342,-0.325 0.005,-0.644 0.371,-0.573 0.341,-0.233 0.479,-0.068 0.262,0.349 -0.325,0.99 -0.095,0.006 -0.435,0.522 -0.484,0.365 -0.547,0.256 z m 19.504,-0.323 -0.18,0.134 -0.059,0.069 -0.148,-0.052 0.027,-0.077 0.044,0.008 0.048,-0.224 0.253,0.027 0.015,0.115 z m 1.077,4.524 -0.276,0.274 0.091,-0.317 -0.046,-0.219 0.036,-0.169 0.189,-0.164 0.057,-0.024 -0.016,0.202 0.013,0.062 -0.048,0.355 z m 16.152,28.639 -0.11,0.062 -0.011,-0.182 0.287,-0.229 0.047,-0.271 0.15,0.125 0.04,0.139 -0.002,0.058 -0.401,0.298 z m -0.448,1.078 -0.096,0.169 -0.111,-0.025 -0.044,-0.113 -0.082,-0.11 0.044,-0.086 0.074,-0.049 0.205,0.007 0.01,0.207 z m -14.666,28.45 0.088,0.083 -0.162,-0.008 -0.182,0.073 -0.279,0.065 -0.112,-0.122 0.241,-0.17 0.088,-0.127 0.063,0.027 0.081,0.092 0.174,0.087 z m -3.174,2.275 -0.002,0.159 -0.117,-0.081 -0.31,0.062 -0.108,-0.12 0.418,-0.513 0.084,0.075 0.065,0.093 0.045,0.13 -0.048,0.084 -0.027,0.111 z m -9.329,7.747 -0.052,0.038 -0.176,-0.387 0.354,-0.371 0.118,0.15 -0.094,0.294 -0.104,0.208 -0.046,0.068 z m 0.277,4.281 -0.193,0.143 0.035,-0.749 0.104,-0.25 0.113,-0.187 0.14,-0.115 0.104,0.163 -0.089,0.361 -0.245,0.443 0.031,0.191 z",
                        title: "Brazil",
                        id: "BR",
                    },
                    {
                        d:
                            "m 258.16275,388.0814 -0.059,0.027 -0.244,-0.311 -0.196,-0.09 0.306,-0.22 0.133,-0.189 -0.003,-0.413 0.075,-0.227 -0.025,-0.196 0.067,-0.2 -0.091,-0.225 -0.256,-0.179 -0.507,-0.711 -0.801,-0.173 -0.415,-0.007 0.228,-0.115 0.21,0.014 0.324,0.068 0.388,0.033 0.237,0.209 0.226,0.278 0.205,0.112 0.084,0.071 -0.009,0.081 0.034,0.076 0.267,0.13 0.269,0.209 0.079,0.613 -0.362,0.29 -0.066,0.886 -0.098,0.159 z m -3.557,-2.569 0.34,0.098 0.183,-0.014 0.109,-0.063 0.503,0.026 0.406,-0.094 0.061,0.166 -0.01,0.087 -0.864,0.081 -0.792,0.244 -0.434,0.165 -0.204,0.019 -0.156,-0.087 -0.523,-0.502 0.14,0.05 0.386,0.284 0.24,-0.052 0.223,-0.188 0.034,-0.142 -0.033,-0.067 0.101,-0.225 0.29,0.214 z m 5.175,3.86 0.462,0.348 0.394,0.132 0.426,0.436 0.184,0.155 0.033,0.141 -0.072,0.644 -0.096,0.387 0.014,0.339 -0.1,-0.101 -0.101,-0.222 -0.166,-0.127 -0.056,-0.067 0.298,-0.015 0.026,-0.35 0.146,-0.276 -0.022,-0.288 -0.348,-0.317 -0.238,-0.279 -0.367,-0.09 -0.339,-0.278 -0.202,-0.034 -0.247,0.049 0.089,-0.166 0.062,-0.22 0.045,-0.042 0.175,0.241 z m -3.073,2.404 -0.006,0.372 0.031,0.278 -0.028,0.099 -0.304,0.186 -0.078,0.104 -0.286,0.105 -0.173,0.146 -0.087,-0.237 -0.168,-0.146 -0.028,-0.249 -0.128,0.084 -0.186,-0.051 -0.306,-0.188 -0.193,-0.256 0.271,-0.044 0.056,0.159 0.214,-0.195 -0.049,-0.103 -0.039,-0.013 -0.07,-0.191 0.322,-0.502 0.07,-0.324 -0.146,-0.521 0.137,-0.034 0.363,0.183 0.163,0.18 0.005,0.247 0.153,0.19 0.221,0.457 0.269,0.264 z m 1.113,-0.943 -0.317,0.064 -0.227,-0.063 -0.058,-0.051 0.097,-0.085 0.213,-0.071 0.343,-0.007 0.15,0.084 0.018,0.037 -0.219,0.092 z m 5.723,2.499 0.019,0.155 -0.188,-0.031 -0.278,0.061 -0.1,0.002 0.062,-0.107 0.193,-0.144 0.01,-0.137 -0.239,-0.198 -0.277,-0.493 -0.13,-0.117 -0.062,-0.186 -0.233,-0.199 0.048,-0.106 0.048,-0.025 0.157,0.051 0.356,0.71 0.023,0.068 0.591,0.696 z m -6.594,-0.152 0.005,0.07 -0.278,0.193 0.202,0.138 0.19,-0.3 0.151,0.244 0.083,0.456 -0.014,0.08 0.014,0.068 0.029,0.087 0.007,0.126 -0.154,0.397 -0.554,-0.041 -0.013,-0.335 -0.086,-0.065 -0.129,-0.479 -0.173,-0.154 -0.241,-0.394 0.14,-0.102 0.187,0.034 0.096,-0.048 0.259,-0.038 0.157,-0.054 0.122,0.117 z m 9.06,0.555 -0.223,0.331 -0.119,-0.028 0.067,-0.417 0.154,-0.066 0.061,0.004 0.06,0.176 z m -3.466,1.884 -0.117,0.018 -0.209,-0.081 -0.491,-0.37 -0.228,-0.032 0.075,-0.209 0.174,0.073 0.396,0.319 0.149,0.16 0.251,0.122 z m 2.313,1.687 -0.018,0.078 -0.354,-0.605 -0.446,-0.147 -0.256,-0.146 0.053,-0.083 0.178,-0.036 0.03,-0.192 -0.076,-0.208 -0.235,-0.42 -0.132,-0.285 -0.061,-0.066 -0.018,-0.239 0.279,0.371 0.116,0.329 0.187,0.322 0.125,0.554 0.357,0.188 0.257,0.268 0.014,0.317 z m 2.197,0.517 0.064,0.054 -0.179,0.122 -0.403,-0.15 -0.091,0.011 -0.08,-0.16 -0.031,-0.118 0.02,-0.109 0.24,0.084 0.129,0.157 0.331,0.109 z m -0.419,1.539 -0.197,0.091 0.044,-0.156 0.377,-0.265 0.209,-0.233 0.119,-0.083 0.042,-0.064 0.166,-0.086 0.083,-0.15 -0.023,-0.123 -0.173,-0.203 0.002,-0.143 0.06,-0.101 0.292,-0.047 -0.077,0.152 0.115,0.43 -0.388,0.535 -0.332,0.166 -0.319,0.28 z m 3.272,-0.649 0.174,0.043 0.095,-0.003 0.321,0.09 0.191,0.125 0.043,0.051 -0.103,0.111 -0.295,-0.21 -0.258,-0.027 -0.362,0.005 -0.145,-0.04 0.097,-0.226 0.242,0.081 z m 0.351,2.775 -0.374,0.147 -0.038,-0.173 0.191,-0.139 0.221,0.165 z m -0.312,0.942 -0.089,0.219 -0.297,0.418 -0.663,0.105 -0.73,0.02 -0.056,-0.114 -0.016,-0.1 0.053,-0.157 -0.005,-0.062 -0.03,-0.063 0.268,-0.067 0.174,-0.194 0.277,-0.033 0.345,0.137 0.186,0.005 0.275,-0.15 0.221,-0.325 0.131,0.042 -0.044,0.319 z",
                        title: "Bahamas",
                        id: "BS",
                    },
                    {
                        d:
                            "m 732.05875,382.2754 -0.016,0.071 -0.079,0.191 -0.052,0.206 0.043,0.17 0.178,0.201 0.239,0.161 0.303,0.012 0.28,-0.062 0.111,0.026 0.152,0.269 0.109,0.232 -0.148,0.24 -0.08,0.21 -0.028,0.149 0.018,0.065 0.09,0.12 0.105,0.206 0.015,0.189 -0.067,0.125 -0.144,0.062 -0.154,-0.018 -0.127,0.003 -0.158,0.022 -0.248,0.069 -0.23,0.09 -0.433,-0.016 -0.173,-0.187 -0.081,-10e-4 -0.393,0.242 -0.429,-0.043 -0.78,0.081 -0.327,0.019 -0.335,-0.027 -0.17,-0.051 -0.314,-0.17 -0.286,-0.123 -0.29,0.113 -0.103,0.021 -0.232,0.29 -0.505,0.096 -0.503,0.07 -0.149,-0.038 -0.284,-0.018 -0.01,-0.068 0.009,-0.066 -0.065,-0.052 -0.115,-0.054 -0.198,-0.023 -0.254,-0.072 -0.146,-0.069 -0.516,0.102 -0.301,-0.153 -0.342,-0.211 -0.173,-0.091 -0.062,-0.326 -0.061,-0.105 -0.135,-0.111 -0.075,-0.13 0.061,-0.133 0.34,-0.249 0.027,-0.059 0.158,-0.464 0.219,-0.17 0.216,-0.235 0.163,-0.374 0.314,-0.385 0.346,-0.395 0.238,-0.322 0.157,-0.15 0.326,-0.161 0.272,-0.095 0.189,-0.215 0.227,-0.121 0.233,-0.054 0.347,0.03 0.326,0.076 0.358,0.108 0.041,0.087 -0.031,0.152 -0.051,0.156 -10e-4,0.079 0.054,0.044 0.35,0.03 0.429,-0.024 0.24,0.021 0.536,0.143 0.156,0.101 0.164,0.077 0.161,-0.013 0.202,-0.166 0.213,-0.14 0.132,-0.023 0.095,0.045 0.17,0.134 0.354,0.126 0.314,0.095 0.103,0.09 -0.036,0.387 z",
                        title: "Bhutan",
                        id: "BT",
                    },
                    {
                        d:
                            "m 484.61275,644.9594 -0.051,0.023 -0.127,-10e-4 -0.043,0.006 -0.063,0.047 -0.02,-0.02 -0.023,-0.036 -0.01,-0.094 0.028,-0.105 0.041,-0.049 0.072,-0.043 0.058,-0.025 0.056,-0.01 0.03,0.003 0.105,0.077 0.008,0.055 -0.016,0.068 -0.017,0.049 z",
                        title: "Bouvet Island",
                        id: "BV",
                    },
                    {
                        d:
                            "m 545.78375,513.3534 -0.055,0.145 -0.043,0.211 0.052,0.158 0.112,0.212 0.162,0.185 0.124,0.11 0.147,0.273 0.148,0.342 0.194,0.266 0.569,0.61 0.063,0.219 0.079,0.217 0.358,0.417 0.056,0.139 -0.024,0.283 0.368,0.852 0.242,0.498 0.205,0.092 0.655,0.531 0.572,0.428 0.669,0.289 0.491,0.19 0.243,0.139 0.122,0.133 0.098,0.256 0.051,0.446 0.017,0.288 0.528,-0.011 0.437,0.026 0.153,0.058 0.057,0.082 -0.013,0.19 0.006,0.284 0.02,0.229 -0.045,0.244 -0.031,0.288 -0.021,0.358 0.067,0.139 0.423,0.451 0.177,0.292 0.189,0.443 0.11,0.142 0.089,0.057 0.382,0.048 0.983,0.186 0.606,0.17 0.481,0.175 0.201,0.046 0.097,0.047 0.033,0.043 -0.06,0.386 0.021,0.125 0.054,0.112 0.082,0.088 0.099,0.054 0.365,0.042 0.22,0.235 0.138,0.109 -0.659,0.059 -0.327,0.196 -0.189,0.352 -0.298,0.259 -0.405,0.165 -0.428,0.113 -0.452,0.062 -0.482,0.303 -0.511,0.545 -0.261,0.343 -0.011,0.142 -0.114,0.122 -0.219,0.103 -0.124,0.125 -0.028,0.145 -0.117,0.069 -0.204,-0.006 -0.144,0.107 -0.083,0.218 -0.18,0.133 -0.28,0.047 -0.241,0.123 -0.203,0.2 -0.155,0.102 -0.11,0.003 -0.171,0.163 -0.277,0.386 -0.046,0.179 -0.38,1.458 -0.208,0.173 -0.402,0.301 -0.326,0.361 -0.14,0.213 -0.153,0.095 -0.748,0.178 -0.277,0.095 -0.337,0.138 -0.084,0.124 -0.083,0.454 -0.232,0.65 -0.188,0.481 -0.122,0.419 -0.212,0.521 -0.184,0.175 -0.209,0.16 -0.274,0.079 -0.373,0.05 -0.339,-0.014 -0.262,0.007 -0.364,0.184 -0.34,0.013 -0.54,-0.107 -0.437,-0.103 -0.195,-0.021 -0.386,-0.341 -0.248,0.006 -0.379,-0.027 -0.213,-0.078 -0.197,-0.174 -0.429,-0.342 -0.419,-0.277 -0.371,-0.164 -0.346,-0.076 -0.329,0.068 -0.256,0.073 -0.099,0.036 -0.199,0.143 -0.203,0.271 -0.169,0.424 -0.064,0.26 -0.188,0.553 -0.249,0.664 -0.119,0.191 -0.138,0.142 -0.218,0.126 -0.711,0.529 -0.356,0.597 -0.224,0.174 -0.27,0.081 -0.229,0.051 -0.126,0.1 -0.141,0.302 -0.122,0.107 -0.135,0.041 -0.407,-0.036 -0.13,-0.031 -1.078,0.059 -0.329,-0.095 -0.233,-0.039 -0.367,0.126 -0.154,-0.083 -0.123,-0.251 -0.06,-0.504 0.019,-0.428 0.2,-0.323 0.166,-0.236 0.163,-0.309 0.021,-0.138 -0.033,-0.124 -0.032,-0.253 -0.018,-0.26 -0.231,-0.566 -0.284,-0.749 -0.383,-0.833 -0.119,-0.229 -0.24,-0.361 -0.888,-0.686 -0.136,-0.093 0,-0.076 0,-0.664 -10e-4,-0.878 -10e-4,-0.877 -10e-4,-0.874 -0.001,-0.873 -10e-4,-0.87 -10e-4,-0.869 0,-0.867 -10e-4,-0.865 -10e-4,-0.73 0.64,0 0.791,0 0.941,0 0.416,0 0.024,-0.115 0,-0.535 -0.002,-1.224 -0.002,-1.221 -0.002,-1.217 -10e-4,-1.214 -0.002,-1.21 -0.002,-1.208 -0.002,-1.204 -10e-4,-1.203 -0.001,-0.592 0.726,-0.036 0.833,-0.121 1.352,-0.196 1.259,-0.244 0.822,-0.142 0.974,-0.169 0.335,-0.029 0.091,0.023 0.132,0.058 0.452,0.598 0.282,0.456 0.057,0.196 0.054,0.021 0.133,-0.032 0.15,-0.073 0.459,-0.455 0.096,-0.119 0.293,-0.22 0.355,-0.225 0.322,-0.159 0.323,-0.132 0.149,0.033 0.176,0.114 0.156,0.071 0.734,-0.551 0.328,-0.127 0.862,-0.099 z",
                        title: "Botswana",
                        id: "BW",
                    },
                    {
                        d:
                            "m 553.89175,272.5424 0.383,0.437 0.09,0.017 0.213,-0.172 0.042,-0.011 0.44,-0.015 0.204,0.152 0.152,0.296 0.14,0.236 0.152,0.064 0.428,-0.297 0.237,-0.099 0.156,0.003 0.549,0.267 0.258,0.146 0.059,0.132 0.006,0.156 -0.07,0.231 -0.055,0.251 0.167,0.296 0.194,0.201 0.415,-0.332 0.153,-0.092 0.167,-0.003 0.224,-0.123 0.162,-0.186 0.155,-0.064 0.297,0.044 0.536,-0.044 0.625,0.291 0.054,0.09 0.312,0.34 0.109,0.169 0.103,0.054 0.166,0.166 0.223,0.104 0.154,-0.032 0.074,0.055 0.069,0.13 0.005,0.222 -0.022,0.632 -0.109,0.182 -0.115,0.148 -0.029,0.115 0.011,0.139 0.177,0.272 0.228,0.421 0.053,0.243 0,0.183 -0.311,0.536 -0.103,0.125 -0.072,0.263 -0.038,0.267 0.022,0.111 0.52,0.424 0.385,0.229 0.086,0.112 0.008,0.07 -0.204,0.453 -0.02,0.122 0.308,0.187 0.171,0.295 0.15,0.48 0.293,0.459 0.631,0.406 0.459,0.264 0.096,0.12 0.033,0.142 -0.035,0.313 -0.119,0.381 -0.081,0.211 0.187,0.088 0.481,-0.024 0.585,0.074 0.701,0.418 0.002,0.187 -0.072,0.171 0.048,0.179 0.076,0.152 0.607,0.465 0.058,0.135 0.01,0.226 -0.016,0.165 -0.168,0.034 -0.187,0.077 -0.305,0.198 -0.12,0.279 -0.494,0.384 -0.304,0.174 -0.243,0.007 -0.578,-0.078 -0.203,-0.189 -0.084,-0.174 -0.222,-0.079 -0.295,-0.007 -0.407,0.03 -0.083,0.053 -0.067,0.213 -0.173,0.365 -0.124,0.205 0.102,0.126 0.162,0.262 0.252,0.332 0.26,0.295 0.083,0.18 -0.004,0.129 -0.123,0.151 0.018,0.304 0.252,0.399 -0.085,0.064 -0.026,0.489 0.003,0.521 0.068,0.126 0.135,0.104 0.115,0.19 0.191,0.432 0.013,0.113 -0.532,-0.032 -0.639,0.013 -0.359,0.251 -0.14,-0.058 -0.25,-0.064 -0.277,0.14 -0.378,0.423 -0.254,0.263 -0.247,0.368 -0.078,0.199 -0.156,0.366 -0.143,0.418 0.078,0.292 0.117,0.271 0.026,0.292 0.058,0.228 -0.156,0.166 -0.091,0.239 -0.266,-0.042 -0.326,-0.229 -0.069,-0.332 -0.251,-0.231 -0.165,-0.121 -0.272,-0.018 -0.435,0.108 -0.569,0.083 -0.429,0.022 -0.234,0.118 -0.346,0.116 -0.134,-0.138 -0.192,-0.377 -0.157,-0.376 -0.109,-0.165 -0.094,-0.046 -0.116,0.009 -0.133,0.119 -0.1,0.123 -0.141,0.043 -0.218,0.099 -0.159,0.134 -0.174,0.346 -0.115,-0.024 -0.119,-0.08 -0.137,-0.387 -0.188,-0.089 -0.301,-0.005 -0.373,-0.082 -0.303,-0.118 -0.11,0.028 -0.181,0.165 -0.194,0.024 -0.428,-0.147 -0.083,0.068 -0.113,0.217 -0.133,0.209 -0.116,0.021 -0.065,-0.054 0.036,-0.371 -0.248,-0.131 -0.418,-0.021 -0.294,0.054 -0.143,-0.015 -0.074,-0.072 -0.36,-0.625 -0.19,-0.04 -0.341,0.031 -0.503,-0.076 -0.58,-0.141 -0.319,-0.052 -0.165,-0.141 -0.357,-0.048 -0.96,-0.265 -0.391,-0.047 -0.577,-0.004 -0.878,-0.059 -0.563,0.033 -0.261,0.088 -0.301,0.055 -0.509,0.048 -0.207,-0.005 -0.326,0.029 -0.374,0.071 -0.107,0.131 -0.123,0.289 -0.43,0.498 -0.417,0.33 -0.076,0.028 -0.244,-0.175 -0.203,-0.059 -0.239,-0.019 -0.169,0.056 -0.106,0.083 0.014,0.383 -0.024,0.033 -0.184,-0.454 0.015,-0.412 0.102,-0.236 0.125,-0.213 -0.051,-0.319 0.122,-0.423 0.004,-0.307 -0.054,-0.132 -0.099,-0.153 -0.272,-0.17 -0.12,-0.133 -0.368,-0.178 -0.365,-0.221 -0.062,-0.136 0.017,-0.093 0.064,-0.142 0.279,-0.415 0.302,-0.404 0.193,-0.162 1.025,-0.52 0.158,-0.182 0.04,-0.308 0.002,-0.224 -0.019,-0.4 -0.063,-0.57 -0.078,-0.394 -0.196,-0.742 -0.534,-1.543 -0.321,-1.613 0.209,0.095 0.49,0.035 0.389,-0.111 0.202,-0.016 0.18,0.036 0.268,-0.064 0.245,-0.026 0.127,0.145 0.228,0.128 0.451,-0.184 0.399,-0.229 0.414,0.025 0.059,-0.113 0.103,-0.575 0.123,-0.126 0.495,0.058 0.183,-0.104 0.192,-0.284 0.292,-0.178 0.244,10e-4 0.254,-0.2 0.125,0.134 0.061,0.239 -0.084,0.19 0.036,0.075 0.176,0.094 0.301,-0.003 0.193,-0.078 0.045,-0.109 0,-0.198 -0.048,-0.185 -0.128,-0.159 -0.24,-0.083 -0.167,-0.002 -0.028,-0.102 0.057,-0.217 0.148,-0.402 0.182,-0.363 0.111,-0.137 0.019,-0.127 -0.021,-0.22 -0.004,-0.397 0.163,-0.56 0.22,-0.418 0.295,-0.137 0.361,-0.073 0.231,-0.2 0.114,-0.23 0.043,-0.195 0.055,-0.168 0.115,-0.074 0.868,0.046 0.133,-0.363 0.075,-0.101 0.166,-0.108 0.116,-0.129 -0.043,-0.1 -0.222,-0.064 -0.522,-0.057 -0.105,-0.121 0.033,-0.145 0.139,-0.376 0.133,-0.486 0.069,-0.377 0.007,-0.223 0.075,-0.06 0.425,-0.071 0.143,-0.076 0.366,-0.516 0.279,-0.088 0.721,0.133 0.33,-0.01 0.09,0.012 0.33,0.023 0.036,-0.052 0.148,-0.511 0.146,-0.149 0.567,-0.675 0.381,-0.287 0.241,-0.063 z",
                        title: "Belarus",
                        id: "BY",
                    },
                    {
                        d:
                            "m 227.09475,410.4984 -0.15,0.334 0.15,0.043 0.136,-0.031 0.329,0.012 0.126,0.366 -0.033,0.307 -0.31,0.808 -0.039,0.277 -0.141,0.415 0.191,0.273 -0.179,0.362 -0.061,0.234 -0.014,0.352 0.09,0.668 -0.145,0.962 -0.256,0.42 -0.159,0.159 -0.284,0.417 -0.373,0.124 -0.517,0.671 -0.091,0.176 0.05,0.19 -0.121,0.002 -0.495,-0.031 -0.335,0.035 -0.013,-0.017 0.027,-0.721 0.043,-1.117 0.031,-0.821 0.03,-0.804 0.023,-0.603 0.031,-0.822 0.027,-0.71 -0.003,-0.255 0.081,-0.202 0.233,-0.084 0.302,0.176 0.126,0.073 0.113,-0.042 0.144,-0.107 0.176,-0.311 0.442,-0.643 0.177,-0.457 0.173,-0.091 0.25,-0.016 0.218,0.029 z m 0.968,1.607 -0.133,0.054 0.11,-0.169 0.016,-0.108 0.154,-0.452 0.11,0.002 0.029,0.04 -0.286,0.633 z m 0.275,1.47 -0.216,0.409 -0.014,-0.117 0.09,-0.303 0.122,-0.106 0.076,-0.112 0.017,-0.132 0.106,0.064 -0.027,0.13 -0.154,0.167 z",
                        title: "Belize",
                        id: "BZ",
                    },
                    {
                        d:
                            "m 279.87575,14.295401 2.289,0.416 0.742,-0.151 0.848,1.013 0.511,0.118 0.842,-0.191 0.614,0.24 2.285,0.225 0.475,0.392 -0.006,0.471 -0.493,1.017 -0.662,0.975 -4.27,3.137 -0.314,0.516 0.832,0.162 1.227,-0.142 0.951,-0.345 1.121,-1.058 0.371,-0.061 0.712,-0.516 1.379,-1.452 1.103,-0.793 0.499,0.349 0.42,0.55 0.283,0.063 0.147,-0.424 0.236,-1.163 0.138,-0.424 0.363,-0.304 0.222,0.033 0.359,0.553 0.398,1.303 0.367,0.9 0.198,0.015 0.839,-1.018 0.423,-0.132 0.961,0.37 0.399,0.449 0.072,0.477 -0.256,0.5 -0.158,0.431 -0.062,0.362 0.14,0.419 0.582,0.893 0.842,1.924 -0.005,0.702 -0.459,1.417 0.011,0.356 2.166,-1.488 2.184,0.666 0.618,0.454 0.237,0.545 0.252,0.896 0.268,1.241 -0.186,1.284 -0.959,1.98 -0.992,1.524 -0.584,1.36 -0.897,0.741 -3.075,3.222 -1.503,1.022 -0.864,1 -0.388,0.174 -1.831,-0.191 -0.485,0.548 -0.27,0.918 -0.577,0.436 -0.853,0.311 -1.743,0.251 -0.391,1.024 -0.1,0.691 -0.17,0.535 -0.148,0.258 -4.98,3.594 -0.092,0.594 0.501,0.244 0.631,-0.244 7.247,-4.362 1.391,-0.292 1.291,0.319 -0.148,1.025 -1.827,2.874 -2.327,2.547 -1.162,1.908 -2.94,3.238 -2.403,3.161 -0.923,1.583 -1.237,2.79 -0.423,0.667 -0.514,0.274 -0.605,-0.115 -0.545,-0.401 -0.727,-1.035 -0.663,-1.165 -0.208,-0.205 0.125,0.579 1.277,3.831 -0.146,0.731 -2.344,0.769 -1.038,0.676 -0.535,0.164 -0.379,-0.122 -0.37,0.069 -0.36,0.261 -0.02,0.289 0.321,0.316 0.934,0.247 2.074,-0.836 0.333,0.059 0.534,0.408 0.026,0.37 -0.557,1.18 -1.679,1.398 0.219,0.08 0.481,0.492 -0.011,0.442 -0.529,1.035 -0.25,0.329 -1.619,0.955 -0.705,0.224 -0.62,-0.119 -2.839,-2.095 -1.002,-0.305 -0.952,-0.534 -0.702,0.091 -0.746,0.62 0.335,0.311 1.375,0.592 1.147,0.114 0.476,0.23 0.187,0.382 0.495,1.383 0.08,0.738 -0.109,0.684 -0.15,0.477 -0.19,0.271 -0.293,0.136 -1.123,-0.096 -0.419,0.167 -0.487,0.396 -0.61,0.172 -1.1,-0.079 -1.295,0.576 -0.685,0.105 -0.759,-0.26 -0.823,-0.644 -0.868,-0.326 -1.467,-0.275 0.123,0.371 0.517,0.156 1.053,0.988 0.503,1.331 0.474,0.224 0.968,1.082 0.703,0.171 0.729,0.367 1.028,-0.472 0.69,0.088 -0.144,2.632 -0.305,0.254 -1.662,0 -0.79,-0.379 -0.349,-0.392 -0.766,-0.446 -0.69,0.258 -0.625,-0.056 -0.424,0.262 -0.673,-0.01 -1.759,0.442 -0.93,0.005 -0.686,-0.285 -0.797,-0.088 -0.909,0.106 0.063,0.303 0.385,0.091 0.561,0.491 0.52,0.752 0.432,0.315 0.518,-0.178 0.527,-0.351 1.924,-0.579 0.844,-0.094 0.753,0.256 0.501,0.319 0.35,0.383 0.442,1.012 1.109,0.124 0.846,0.334 1.348,1.454 0.371,0.11 0.149,0.373 -0.286,0.928 -0.032,0.555 -0.932,1.07 -1.454,0.31 -1.598,-0.099 -1.144,0.124 -0.12,0.134 0.785,0.279 1.819,1.235 0.705,0.666 0.123,0.389 -1.002,1.472 -0.885,2.878999 -0.291,0.225 -0.303,0.079 -0.78,-0.05 -0.989,0.715 -0.747,0.143 -1.353,-0.268 -1.562,0.015 -0.123,0.46 -0.078,0.877 0.008,1.311 0.095,1.734 -0.082,1.256 -0.257,0.79 -0.325,0.58 -0.588,0.562 -0.604,0.349 -0.452,0.123 -0.752,0.02 -2.158,0.401 -1.053,-0.024 -0.818,-0.17 -0.846,-0.56 -1.41,-1.592 -0.4,-0.355 -0.392,-0.207 0.015,0.345 0.422,0.893 0.352,0.574 0.282,0.256 -0.066,0.271 -0.622,0.425 -0.686,0.19 -0.813,-0.007 -0.026,0.164 0.275,0.456 0.358,0.428 0.235,0.128 0.623,-0.132 0.721,-0.542 0.45,-0.16 0.896,0.129 0.353,0.193 1.118,1.182 0.156,0.055 0.828,-0.594 1.197,-0.032 0.439,0.477 0.168,0.922 0.021,0.744 -0.127,0.567 0.276,0.551 0.678,0.535 0.526,0.115 0.374,-0.302 0.568,-0.735 0.241,-0.174 0.228,0.041 0.347,0.536 0.467,1.026 0.043,1.191 -0.38,1.353 -0.465,0.882 -1.824,1.444 -0.551,0.564 -0.436,0.586 -0.632,0.526 -1.242,0.7 -0.655,0.131 -1.413,0.75 -0.307,0.034 -0.458,-0.122 -0.095,-0.365 0.117,-0.651 0.151,-0.608 0.187,-0.565 0.007,-0.471 -0.399,-0.735 -0.28,-0.341 -0.271,-0.172 -0.545,0.1 -0.308,0.202 -0.33,0.039 -0.352,-0.126 -0.296,-0.312 -0.593,-1.312 -0.223,-0.168 -0.292,0.042 -0.262,-0.189 -0.231,-0.42 -0.383,-0.407 0.102,0.311 0.383,0.751 0.267,0.743 0.15,0.735 -0.07,0.575 -3.244,0.318 -1.394,-0.166 -0.282,-0.502 -0.667,-2.181 -0.145,3.836 -2.43,0.617 -0.568,-0.104 -0.945,-0.423 -1.222,-1.024 -0.506,-0.683 -0.198,-0.683 -0.147,-0.375 -0.096,-0.064 -0.304,0.825 -0.332,1.675 -0.835,-0.431 -1.057,-0.422 -0.38,-1.658 -0.022,2.396 -1.703,-0.315 -0.819,0.089 -0.24,-2.1 -0.04,-2.346 -0.332,1.488 0.145,1.255 0.047,1.516 -0.724,-0.43 -1.588,-0.211 -0.563,-0.209 0.072,-2.027 0.125,-2.045 2.045,-2.063 0.603,-0.986 0.444,-0.399 0.702,-0.252 0.897,-0.157 0.611,0.121 0.698,-0.118 0.834,-0.374 0.596,-0.108 0.112,-0.133 -0.172,-0.195 -0.638,-1.366 -0.229,-0.312 -0.233,-0.139 -0.461,-0.062 -0.447,-0.604 -0.259,-0.535 -0.277,-0.73 -0.443,-1.392 -0.44,-1.567 0.218,-0.867 0.729,-0.684 0.731,-0.476 0.732,-0.266 0.612,-0.006 0.738,0.381 1.038,0.734 0.596,0.827 0.747,1.739 0.493,1.371 0.4,0.615 1.79,1.109 0.595,0.179 0.707,-0.089 1.441,-0.29 0.708,-0.304 0.318,-0.362 0.163,-0.521 0.204,-0.402 0.637,-0.927 0.976,-1.941 0.54,-1.549 0.128,-0.525 0.108,-0.637 0.087,-0.751 -0.304,0.4 -1.684,3.839 -0.349,0.688 -0.986,1.156 -0.417,0.186 -0.673,-0.057 -0.892,-0.511 -1.052,0.812 -0.638,-0.206 -0.565,-0.568 -0.007,-2.689 -0.717,-2.183 0.792,-1.116 0.656,-0.696 1.168,-1.822999 0.256,-0.019 0.846,0.289 -0.464,-0.417 -0.454,-0.619 -1.011,0.16 0.357,-4.012 -0.677,3.008 -0.69,1.556 -0.418,0.781 -0.468,0.447999 -1.773,0.386 0.436,-1.442999 0.4,-2.151 -0.423,0.807 -1,1.206 -0.748,0.63 -0.616,0.329999 -1.196,-0.08 -0.596,-0.601 0.17,-1.483 0,-1.844 0.365,-0.862 0.553,-1.112 0.593,-1.51 0.407,-1.584 1.588,-0.711 1.546,-0.292 1.294,-0.847 0.634,-0.149 0.607,0.403 2.468,0.66 1.013,0.501 0.444,0.363 0.329,0.13 0.348,-0.541 0.442,-0.525 1.538,0.054 0.424,-0.097 0.392,-0.247 0.477,-0.5 0.562,-0.757 0.086,-0.373 -0.39,0.013 -0.391,0.191 -0.587,0.553 -0.565,0.297 -0.576,-0.056 -1.163,-0.467 -2.021,-0.084 -1.031,-0.213 -0.478,-0.227 -0.269,-0.313 -0.235,-0.471 -0.202,-0.631 0.105,-0.444 0.412,-0.256 0.356,-0.054 0.571,0.349 0.641,0.59 0.698,0.076 -0.242,-0.539 -0.887,-1.087 -0.615,-0.927 -0.516,-1.147 -0.397,-1.143 -0.881,-1.808 -0.711,-1.817 -0.501,-0.811 -0.529,-0.403 -1.612,-0.504 -0.323,-0.329 -0.77,-1.621 -0.207,-2.776 -0.337,-1.714 0.325,-2.219 0.537,-1.017 3.221,0.792 1.359,-0.119 1.737,0.282 0.935,0.546 1.066,1.349 0.953,1.508 0.917,1.001 0.844,1.359 0.921,1.997 0.542,0.95 0.47,0.577 0.632,0.496 1.192,0.623 1.039,0.205 0.539,-0.081 0.576,-0.451 0.41,-0.536 -0.457,-0.148 -1.197,0.063 -0.831,-0.285 -0.474,-0.633 -0.504,-0.858 -0.801,-1.629 -0.606,-1.074 -1.325,-1.767 -0.979,-1.775 -0.786,-1.702 -0.073,-0.745 0.568,-0.521 0.698,-0.366 4.368,-1.174 2.606,-1.415 1.058,-1.657 0.126,-0.389 3.489,-2.375 2.467,-0.885 0.949,-0.144 0.859,-0.386 0.036,-0.237 -0.752,-0.324 -0.76,-0.159 -1.725,0.01 -1.536,-0.295 -0.463,-0.539 0.096,-0.884 0.147,-0.763 0.464,-1.283 0.497,-0.97 2.107,-2.829 1.418,-1.206 0.409,-0.837 -3.051,1.862 -1.066,1.333 -1.071,1.98 -0.555,0.579 -0.396,-0.153 -0.353,0.183 -0.312,0.518 -0.261,0.943 -0.211,1.36 -0.191,0.92 -0.172,0.489 -0.434,0.704 -1.045,1.37 -2.451,1.896 -0.825,0.478 -0.707,0.076 -2.289,1.055 -0.687,0.041 -0.761,-0.319 0.325,-0.913 1.211,-1.698 0.321,-0.762 -0.774,0.167 -0.79,0.466 -1.744,0.384 -0.69,0.692 -0.668,1.248 -0.536,0.779 -0.403,0.316 -0.556,0.188 -2.043,0.096 -0.453,-0.083 -1.176,-0.942 -1.041,0.326 -0.43,-0.063 -0.79,-0.668 -0.235,-0.435 0.034,-0.587 0.457,-1.111 0.529,-1.074 1.72,-2.386 1.103,-1.129 1.589,-0.979 3.735,-1.102 0.169,-0.812 -3.779,0.907 -3.215,1.139 -0.522,0.417 -0.748,1.106 -2.376,3.944 -0.701,0.981 -1.071,0.233 -0.82,-0.331 -0.641,-0.493 -1.103,-1.155 -0.832,-0.624 -0.394,-0.42 -0.232,-0.426 -0.189,-0.5 -0.144,-0.574 0.27,-0.481 2.116,-1.045 2.875,0.204 1.29,-0.216 1.269,-0.634 1.873,-1.59 2.038,-2.257 0.399,-0.728 -0.744,-0.16 -0.551,0.177 -1.326,0.815 -2.099,2.17 -1.831,0.76 -4.523,0.402 -1.436,0.598 -0.63,-0.128 -0.475,-0.583 -0.529,-1.085 0.094,-0.875 1.078,-0.987 0.844,-0.231 0.151,-0.203 -1.198,-0.962 -0.106,-0.494 0.692,-1.098 1.501,-1.632 0.759,-0.518 1.39,-0.331 1.431,0.18 0.055,-0.314 -1.415,-0.626 -1.06,-0.115 -1.401,0.442 -3.719,2.656 -0.316,-0.08 -0.541,-0.455 0.155,-0.654 1.989,-2.812 0.066,-0.447 -1.429,0.063 -0.419,-0.134 -0.41,-0.337 -0.582,0.299 -0.755,0.934 -0.532,0.397 -0.31,-0.133 -0.789,-1.105 0.102,-0.932 0.628,-1.176 0.574,-0.852 0.779,-0.783 1.268,-0.985 0.918,-0.333 1.486,-0.011 0.708,-0.442 0.63,-0.773 0.789,-1.26 0.865,-0.873 1.414,-0.721 1.191,0.232 0.658,0.628 0.522,1.094 0.561,0.833 0.053,-0.672 0.464,-0.832 0.582,-0.358 0.7,0.119 0.615,0.397 0.795,1.005 0.643,0.449 0.302,-0.027 0.378,-0.554 1.006,-0.012 -0.021,-0.236 -0.328,-0.582 -0.397,-0.417 -3.564,-2.931 -0.099,-0.648 1.201,-0.61 0.751,-0.732 0.353,-0.179 0.88,-1.57 0.575,-0.823 1.064,-0.942 0.427,0.258 0.537,0.83 0.52,0.517 1.528,0.491 0.654,0.51 1.165,2.9 0.464,0.937 0.663,0.957 0.394,0.359 0.779,0.229 0.08,-0.538 -0.925,-1.349 -0.254,-0.786 0.109,-0.669 0.197,-0.353 0.285,-0.032 0.73,0.599 1.942,2.016 2.903,2.356 1.113,0.543 0.687,0.83 0.626,1.004 0.617,0.689 0.115,-0.065 -0.575,-1.55 -1.404,-1.932 -3.756,-3.354 -1.486,-1.784 -0.719,-1.216 -0.544,-1.24 -0.011,-0.682 0.512,-0.801 0.689,-0.639 0.857,-0.254 0.103,-0.267 -0.779,-0.964 -0.46,-0.838 0.016,-0.587 0.93,-0.45 0.577,0.136 1.097,1.06 0.916,0.499 0.148,-0.322 -0.946,-2.834 -0.088,-0.646 0.14,-0.379 0.332,-0.386 0.991,0.221 1.631,1.396 2.921,0.696 0.803,-0.104 -0.121,-0.32 -1.166,-0.86 -1.221,-1.163 -0.538,-0.706 -0.395,-0.956 -0.468,-0.798 -0.039,-0.384 0.754,-0.624 1.981,0.122 1.84,0.957 1.561,-0.346 0.984,0.238 0.389,0.288 0.712,1.037 2.259,3.7 0.24,0.582 0.257,0.881 0.274,1.178 0.385,0.318 0.744,-0.807 0.501,-0.786 -0.217,-0.764 -1.246,-1.767 -0.283,-0.761 -0.624,-1.294 -1.399,-2.341 -0.373,-1.1 -0.235,-0.942 3.873,-0.893 3.734,0.788 0.607,0.556 0.398,0.771 0.391,1.167 0.599,1.185 1.21,1.8 1.721,1.11 -0.329,-0.756 -1.288,-1.983 -0.582,-1.371 0.003,-0.935 0.104,-0.717 0.204,-0.496 1.458,-1.909 2.084,-0.58 0.241,0.107 1.62,2.931 0.769,1.185 0.538,0.474 0.021,-0.206 -0.745,-1.331 -0.573,-0.729 -0.059,-0.458 0.95,-1.428 0.602,-0.36 2.528,-0.42 0.287,0.152 0.24,0.398 0.597,1.57 0.234,0.197 z m -62.856,38.523 0.367,1.514 1.354,3.554 0.613,1.272 1.042,1.568 0.129,0.561 0.012,0.235 -0.03,0.826 0.297,0.305 0.897,0.473 0.999,0.849 0.18,-0.048 0.348,-0.502 0.418,-0.138 0.549,0.121 0.263,0.359 0.192,0.527 0.081,0.376 0.012,0.29 -0.197,0.563 0.022,0.216 0.118,0.261 0.021,0.305 -0.198,1.187 0.055,0.434 0.502,1.07 0.455,0.531 0.897,0.575 0.584,-0.042 0.363,0.364 0.009,-0.224 -0.165,-0.678 -0.352,-0.967 -0.65,-0.5 -0.095,-0.57 -0.048,-0.977 0.056,-0.647 0.333,-0.524 0.282,-0.169 0.84,-0.024 0.463,0.234 0.8,0.731 0.083,0.397 0.043,0.782 0.033,1.561 -0.02,0.334 -0.684,0.875 -0.149,0.591 0.173,0.167 0.587,0.131 0.906,0.535 0.355,0.054 0.353,1.233 0.278,1.167 -0.203,1.414 -0.266,2.248 -0.213,0.511 -0.21,0.774 0.147,0.14 0.892,-0.308 0.18,-0.105 0.596,-0.756 0.875,0.176 0.294,0.196 0.145,0.265 0.267,0.841 0.22,1.107 0.163,-0.101 0.407,-1.344 0.148,-0.333 0.203,-0.323 0.086,0.06 0.411,1.257 0.914,2.195 0.314,0.897 0.061,0.66 -0.391,0.766 -0.305,0.381 -2.25,1.616 -1.007,0.907 -0.502,0.698 -0.256,0.232 -0.541,-0.108 -0.123,0.116 -0.167,1.114 -0.179,0.474 -0.466,0.763 -0.652,1.373 -0.389,0.599 -0.685,-0.437 -0.17,-0.639 -0.095,-1.448 -0.013,-0.604 0.021,-0.319 0.086,-0.52 0.297,-1.26 -0.036,-0.133 -0.137,0.106 -0.455,0.631 -0.179,0.331 -0.167,0.576 -0.074,0.963 0.066,1.762 -0.065,0.705 -0.18,0.349 0.072,0.271 0.536,0.372 0.095,0.163 0.059,0.295 0.023,0.425 -0.026,0.391 -0.161,0.601 -0.301,0.244 -0.384,-0.273 -0.831,-1.489 -0.361,0.083 -0.091,0.171 0.078,0.532 0.255,1.187 0.047,0.98 -0.118,0.811 -0.238,1.272 -0.163,0.676 -0.088,0.09 -0.413,0.02 -0.354,-0.341 -1.051,-2.225 -0.52,-0.958 -0.76,-1.889 -0.194,-0.392 -0.117,-0.087 -0.11,0.817 0.211,0.752 0.684,1.757 0.409,1.266 0.294,1.041 0.047,0.429 -0.101,0.169 -0.151,-0.096 -0.201,-0.362 -0.623,-0.612 -0.259,-0.343 -0.169,-0.397 -0.311,-0.302 -0.452,-0.208 -0.455,-0.04 -0.456,0.127 -0.086,0.194 0.514,0.542 0.179,0.301 0.133,0.384 0.087,0.466 -0.169,0.294 -0.638,0.184 -0.853,-0.117 -1.379,-0.405 -1.374,-0.671 -1.269,-1.049 -0.918,-1.059 -0.363,-0.567 -0.114,-0.426 0.344,-0.373 1.204,-0.48 1.207,-0.309 -0.191,-0.269 -2.19,-0.614 -0.721,-0.112 -0.384,0.162 -0.441,-0.095 -0.345,-0.49 -0.457,-0.931 -0.231,-0.619 0.031,-0.243 0.174,-0.138 0.991,0.118 0.136,-0.094 -0.496,-0.468 -1.588,-0.93 -0.596,-0.827 -0.109,-0.324 -0.045,-0.319 0.019,-0.314 0.597,-0.636 1.842,-1.514 0.632,-0.236 0.637,-0.015 0.443,-0.439 0.383,-1.454 1.908,-0.526 1.47,-0.659 0.123,-0.18 -1.103,0.122 -1.559,-0.132 -0.664,-1.004 -0.45,-0.172 -0.498,0.008 -0.579,0.316 -0.99,0.932 -0.476,0.216 -1.074,0.958 -0.299,-0.068 -0.15,-0.114 -0.045,-0.187 0.194,-0.636 0.282,-0.436 -0.058,-0.15 -0.421,-0.092 -0.488,0.018 -0.339,0.151 -1.238,0.843 -0.555,0.628 -0.167,0.056 -0.599,-0.982 -0.956,-0.542 -0.213,-0.424 0.196,-1.676 0.279,-0.347 0.733,-0.284 2.196,-1.542 0.124,-0.299 0.207,-0.787 -0.502,0.168 -1.101,0.76 -0.909,0.377 -0.717,-0.002 -0.524,-0.108 -0.332,-0.213 -0.399,-0.484 -1.3,-2.258 -0.354,-1.104 -0.05,-0.981 -0.091,-0.751 -0.376,-1.818 2.782,1.132 1.089,0.214 2.099,0.074 0.098,-0.111 0.031,-0.294 -0.037,-0.479 0.016,-0.37 0.069,-0.259 0.78,-0.66 0.118,-0.218 -0.919,-0.109 -1.69,1.103 -0.597,-0.01 -0.677,-1.579 -0.723,0.278 -0.342,-0.125 -0.532,-0.4 -0.261,-0.35 -0.169,-0.434 -0.072,-0.365 0.024,-0.298 0.143,-0.333 0.624,-0.464 0.282,-0.044 0.742,0.298 0.557,-0.022 -0.184,-0.497 -0.804,-1.26 -0.704,-1.407 0.053,-2.375 0.578,-0.508 0.599,-0.084 0.584,0.606 0.785,0.083 0.562,0.681 0.374,1.298 0.444,-0.024 0.699,0.244 1.565,-0.019 -0.283,-0.462 -0.487,-0.404 -1.106,-0.533 -0.54,-1.92 -1.143,-0.999 -0.895,-0.525 0.015,-0.443 0.672,-2.449 0.812,-0.879 1.294,0.333 0.851,-0.469 1.095,-0.878 1.073,0.407 0.277,-0.038 0.164,-0.271 0.143,-0.519 0.001,-0.479 -0.142,-0.44 -0.338,-0.548 -1.369,-0.076 -0.606,-0.216 -0.236,-0.293 -0.068,-0.443 -0.036,-0.458 -0.004,-0.472 0.036,-0.291 0.114,-0.159 0.336,-0.187 1.276,-0.024 0.764,-0.258 0.837,0.338 1.746,1.264 0.563,0.641 0.601,1.067 0.321,0.956 z m -19.382,19.723 0.063,2.087 -0.059,1.04 -0.143,0.763 -0.125,0.179 -0.168,0.025 -0.767,-0.596 -0.234,-0.352 -0.012,-0.297 -0.075,-0.583 -0.513,-0.759 -0.959,0.123 -0.399,-0.073 -0.16,-0.227 -0.1,-0.327 -0.094,-1.33 0.016,-0.472 0.118,-0.824 0.071,-0.2 0.703,-0.765 0.201,-0.065 0.86,0.289 0.762,0.037 0.383,0.214 0.342,0.479 0.201,0.722 0.088,0.912 z m -13.006,10.395 0.658,0.307 0.778,0.967 0.736,2.031 0.037,0.258 0.004,0.335 -0.03,0.41 -0.097,0.532 -0.134,0.318 0.378,0.386 0.042,0.188 -0.034,0.426 0.046,0.314 0.229,-0.31 0.196,-0.475 0.049,-0.306 0.04,-0.826 0.574,-0.413 0.603,-0.604 0.284,-0.137 0.474,0.141 1.136,1.427 0.433,0.136 0.158,0.167 0.144,0.329 0.01,0.355 -0.231,0.821 -0.088,0.498 0.054,0.323 0.593,0.271 1.351,-0.541 1.181,1.322 0.654,1.557 0.484,0.52 0.077,0.28 -0.138,0.263 -0.138,0.721 -0.388,0.535 -0.083,0.241 0.207,0.632 0.016,0.396 -0.027,0.548 0.075,0.307 0.53,0.327 1.209,2.219999 0.22,0.614 0.137,0.764 0.014,0.257 -0.173,0.421 -0.188,1.186 -0.107,0.27 -0.491,0.23 -0.892,0.208 -0.833,0.402 -0.895,-0.517 -0.874,-0.789 -0.265,-0.52 -0.218,-0.632 -0.057,-0.248 -0.088,-1.023 -0.047,-0.219 -0.369,-0.578999 -0.327,-0.87 -0.628,-0.076 -1.492,-0.89 -0.639,-0.213 -0.638,0.063 -0.905,0.359 -0.17,-0.096 -0.154,-0.267 -0.139,-0.438 -0.034,-0.322 0.148,-0.568 -2.654,0.715 -0.756,0.823 -1.06,-0.13 -0.529,-0.348 -0.704,-0.79 -0.325,-0.691 -0.298,-0.935 -0.028,-0.71 0.241,-0.481 0.251,-0.287 0.261,-0.092 1.44,0.561 1.262,0.285 0.544,-0.286 0.247,-0.766 -0.295,-0.413 -1.215,-0.169 0.259,-0.406 1.027,-0.419 0.536,-0.626 -0.103,-0.22 -0.309,-0.252 -1.376,0.074 -0.495,-0.249 -0.027,-0.207 0.111,-0.265 0.784,-1.288 -0.032,-0.235 -0.337,-0.425 -0.296,-0.554 -0.11,-0.063 -0.682,0.495 -0.958,1.896 -0.229,0.273 -0.219,-0.016 -0.209,-0.303 0.002,-0.396 0.213,-0.49 0.444,-1.477 -0.032,-0.53 -0.434,-0.354 -1.144,0.265 -0.637,0.01 -0.099,-0.42 -0.026,-0.789 0.026,-0.745 0.158,-1.172 0.221,-0.901 0.135,-0.323 1.517,0.191 2.478,-0.563 0.725,-0.06 0.788,0.554 z m 20.267,11.46 0.663,0.369 1.143,-0.162 0.416,0.269 1.071,0.944 0.325,0.555 0.078,0.418 0.001,0.212 -0.355,0.453 -0.713,0.689 -0.172,0.519 0.636,0.645 0.323,0.571 0.145,0.406999 0.005,0.418 -0.429,1.124 -0.314,0.329 -0.481,-0.036 -0.228,0.102 -0.615,0.521 -0.957,0.496 -1.306,0.204 -0.354,0.305 -0.648,0.498 -0.437,0.078 -0.143,-0.285 -0.065,-0.421 0.034,-0.292 0.092,-0.363 -0.208,-0.341 -0.936,-0.656 -0.545,-0.918 -0.078,-0.291 -0.027,-0.258 1.211,-0.171 0.521,-0.187 0.231,-0.300999 0.039,-0.176 -0.232,-0.076 -0.83,-0.628 -1.392,-0.376 -0.066,-0.438 -0.58,-0.879 -0.056,-0.84 -0.126,-0.233 -0.395,-0.367 -0.058,-0.121 -0.117,-0.546 -0.018,-0.299 0.022,-0.272 0.716,-0.577 -0.1,-0.401 -0.544,-1.506 -0.143,-0.844 0.023,-0.321 0.338,-0.448 0.475,-0.01 1.254,0.136 0.6,0.187 0.598,0.363 0.655,0.538 0.979,0.475 0.313,0.313 0.589,0.994 0.063,0.314 -0.039,0.312 0.148,0.282 z m -38.201,-1.69 0.491,0.829 0.168,-0.016 0.215,0.152 0.104,0.216 0.295,1.049 0.056,0.518 0.018,0.665 -0.045,0.555 -0.108,0.445 -0.264,0.281 -0.629,0.175 -0.878,-0.264 -0.762,0.341 -0.351,0.044 -0.945,-0.218 -0.238,-0.16 -0.524,-0.629 -0.4,-0.26 -0.168,0.139 -0.201,0.553 -0.377,0.681 -0.231,0.175 -0.68,-0.114 -1.042,-1.152 -1.197,0.341 -1.241,0.673 -0.484,0.126 -0.142,-0.195 -0.195,-0.506 0.03,-0.255 0.37,-0.775 0.826,-0.818 0.604,-0.463 1.198,-0.676 1.418,-0.381 0.53,-0.405 0.335,-0.58 0.923,-0.919 0.544,-0.383 0.729,-0.328 0.59,0.017 0.75,0.75 0.56,0.372 0.348,0.4 z m 19.12,7.032 -0.322,0.273999 -0.376,-0.160999 -0.053,-0.171 -0.007,-0.207 0.038,-0.243 0.42,-0.856 0.385,-0.294 0.229,-0.056 0.186,0.292 0.104,0.439 -0.604,0.983 z m -20.922,0.588999 2.249,0.326 0.097,0.061 0.009,0.244 -0.169,0.778 -0.259,0.564 -1.2,0.705 -1.548,0.637 -0.321,0.308 0.025,0.183 0.126,0.229 0.259,0.288 1.199,-0.065 0.289,0.124 0.102,0.187 0.062,0.271 0.038,0.354 0.001,1.193 -0.063,0.688 -0.166,0.619 -0.485,0.439 -0.874,0.578 -0.592,0.257 -0.467,-0.093 -0.465,0.06 -2.037,1.083 -0.63,0.006 -0.55,-0.261 -0.761,-1.024 -0.791,-0.404 -0.338,-0.463 -0.332,-0.254 -0.092,-0.372 -0.032,-0.278 0.056,-0.255 0.144,-0.232 0.047,-0.198 -0.132,-0.575 -0.061,-0.551 -0.229,-0.795 -0.034,-0.459 10e-4,-0.301 0.038,-0.325 0.152,-0.581 0.079,-0.118 0.464,-0.091 0.609,-0.302 1.403,-0.877 3.082,-1.103 0.936,0.103 0.41,-0.217 0.751,-0.091 z m -9.47,4.677 -0.768,0.449 -0.509,-0.011 -0.901,-0.633 -1.044,-1.946 -0.137,-0.7 0.39,-0.126 0.284,-0.216 0.177,-0.306 0.335,-0.335 0.776,-0.504 0.094,0.195 -0.017,0.413 0.064,0.384 0.278,0.082 0.263,0.274 0.532,0.838 0.364,0.161 0.131,0.183 0.069,0.28 0.221,0.487 -0.004,0.252 -0.299,0.5 -0.299,0.279 z m 34.068,0.766 -0.386,0.122 -0.698,-0.064 -0.836,-0.474 -0.226,-0.556 -0.047,-0.883 0.01,-0.491 0.067,-0.096 0.518,-0.117 0.969,-0.137 0.781,0.1 0.891,0.507 0.361,0.325 0.184,0.228 0.229,0.462 0.075,0.204 0.049,0.362 -1.11,0.08 -0.524,0.142 -0.307,0.286 z m 17.426,-1.261 0.706,0.506 0.767,-0.268 0.823,-0.029 1.83,0.216 1.212,-0.144 0.313,0.085 0.478,0.324 0.253,0.391 0.23,0.658 -0.591,0.4 -0.506,2.021 -0.068,0.1 -0.551,0.027 -0.27,0.16 -1.607,-0.285 -4.429,-0.128 -0.194,-0.251 -0.583,-1.185 -0.036,-0.471 0.105,-0.551 0.125,-0.368 0.145,-0.183 1.289,-0.898 0.559,-0.127 z m -25.466,8.409 -0.43,0.224 -0.854,-0.512 -0.56,-0.221 -0.463,-0.916 -0.495,-1.256 -0.39,-1.399 -0.146,-0.83 -0.283,-0.495 -0.098,-0.824 -0.514,-1.3 0.085,-0.191 0.484,-0.192 0.772,0.243 0.37,0.462 0.467,0.773 0.605,1.225 0.187,0.54 0.037,0.739 0.109,0.399 0.52,0.07 0.64,0.969 0.116,0.374 0.132,0.757 -0.009,0.36 -0.102,0.74 -0.18,0.261 z m 41.325,-1.594 -0.734,0.727 -0.375,-0.026 -2.147,-1.49 -0.432,-0.741 -0.083,-0.501 -0.023,-0.713 0.007,-0.982 0.093,-0.664 0.113,-0.231 0.253,-0.237 0.495,-0.146 0.471,0.083 0.708,0.266 0.704,0.44 0.935,1.344 0.335,0.637 0.071,0.824 -0.001,0.502 -0.049,0.365 -0.097,0.228 -0.244,0.315 z m -72.177,-1.223 0.212,0.499 0.015,0.2 -0.102,0.211 -0.329,0.334 -1.655,1.112 -0.324,0.52 0.122,0.445 0.597,0.898 0.607,0.757 0.131,0.375 -0.289,0.38 -0.553,-0.121 -0.206,0.033 -0.195,0.176 0.053,0.334 0.611,1.106 0.201,0.592 -0.005,0.305 -0.108,0.297 -0.256,0.407 -0.405,0.515 -0.694,0.411 -1.492,0.549 -0.049,0.427 0.01,0.324 -0.036,0.785 -0.051,0.362 -0.178,0.608 -0.129,0.284 -0.224,0.195 -0.318,0.106 -0.408,-0.002 -0.673,-0.521 -0.306,-0.334 -0.425,-0.726 -0.077,-0.487 0.042,-0.601 0.112,-0.932 0.185,-0.958 0.258,-0.985 0.077,-0.616 -0.105,-0.244 -0.176,-0.012 -0.549,0.401 -0.354,0.146 -0.274,0.292 -0.194,0.436 -0.11,0.471 -0.062,0.901 -0.104,0.491 -0.296,0.267 -0.443,-0.004 -0.168,0.151 -0.083,0.327 0.06,0.264 0.437,0.554 0.054,0.616 -0.053,0.371 -0.472,0.682 -0.111,0.228 -0.293,1.062 -0.108,0.267 -0.244,0.243 -0.246,-0.028 -0.228,-0.386 -0.333,-0.732 -0.225,-0.633 -0.115,-0.532 -0.098,-0.237 -0.159,0.164 -0.192,0.552 -0.005,0.427 0.042,0.634 -0.011,0.39 -0.28,0.456 0.041,0.208 0.492,0.558 0.063,0.25 0.003,0.387 -0.033,0.174 -0.197,-0.028 -0.166,0.446 -0.19,0.353 -0.5,0.651 -0.695,0.079 -0.575,0.312 -0.122,-0.01 -0.139,-0.511 -0.156,-1.017 -0.139,-0.58 -0.208,-0.297 -0.257,-1.167 -0.12,-0.378 -0.118,-0.152 -0.098,-0.04 -0.145,0.226 -0.334,1.671 -0.545,0.424 -0.3,0.077 -0.302,-0.047 -0.748,-0.455 -0.6,-0.168 -0.419,0.193 -0.688,0.677 -0.274,0.18 -0.372,-0.077 -0.163,-0.255 -0.139,-0.418 -0.016,-0.254 0.108,-0.089 0.171,-0.487 -0.005,-0.196 -0.169,-0.282 -0.002,-0.22 0.061,-0.149 -0.014,-0.106 -0.087,-0.064 -0.17,0.06 -0.612,0.324 0.069,-0.353 0.292,-0.74 0.715,-1.485 0.27,-0.439 0.162,-0.133 2.109,-0.48 0.148,-0.144 1.002,-2.033 0.286,-0.469 0.293,-0.374 1.438,-1.245 0.134,-0.286 0.225,-0.869 0.131,-0.219 0.311,-0.331 1.036,-1.778 0.944,-1.297 0.479,-0.808 0.656,-0.821 0.758,-0.353 2.287,-0.622 1.646,0.817 0.392,0.051 0.192,-0.231 0.173,-0.376 0.246,0.158 0.611,0.115 0.135,-0.09 0.257,-0.428 -0.176,-0.235 -0.74,-0.433 -0.045,-0.221 0.017,-0.209 0.26,-0.501 0.314,-0.325 0.909,-0.244 0.417,0.063 0.432,0.348 0.563,0.717 1.282,1.251 z m 59.656,5.683 0.525,0.107 0.449,-0.165 0.385,0.037 0.568,0.499 0.527,0.759 0.404,0.343 0.131,0.172 0.051,0.191 0.063,0.57 -0.002,0.264 -0.03,0.21 -0.177,0.518 -0.149,0.639 -0.307,0.561 -0.164,0.422 -0.141,0.532 0.316,-0.317 1.197,-1.764 0.784,0.211 1.176,-0.158 1.425,-0.726 0.676,-0.113 0.683,0.053 0.507,0.229 1.083,0.977 0.375,0.464 0.141,0.327 0.034,0.241 -0.222,0.373 -0.68,-0.227 -1.12,-0.2 -0.205,-0.124 -0.174,0.01 -0.127,0.135 0.08,0.512 0.228,0.112 1.345,0.11 4.407,1.616 0.184,0.513 -0.049,0.227 -0.156,0.25 -0.321,0.336 -2.542,0.366 -1.446,-0.324 -1.215,-0.522 -0.413,0.117 0.359,0.707 0.729,0.215 0.61,0.417 0.253,0.348 1.293,0.265 0.211,0.27 0.402,0.688 0.337,0.053 0.334,0.479 0.275,0.82 0.127,0.109 0.39,-0.147 0.656,0.708 0.204,0.378 0.001,0.282 -0.146,0.441 -0.293,0.597 -0.742,0.701 -0.058,0.21 0.867,-0.082 0.16,0.093 1.021,1.235 0.134,0.022 0.084,-0.128 0.098,-0.437 -0.044,-0.405 -0.125,-0.563 0.033,-0.41 0.192,-0.255 0.193,-0.126 0.196,0.002 0.213,0.151 1.032,1.499 1.324,-0.715 0.241,0.321 0.2,0.6 0.093,0.099 0.49,-1.196 0.302,-0.298 1.242,1.421 0.757,0.313 0.304,0.303 0.562,0.333 0.799,0.126 0.132,-0.523 -0.46,-0.674 0.269,-0.296 1.099,-0.574 0.587,0.081 1.082,-0.816 0.664,-0.111 0.408,0.014 1.339,-1.24 0.318,-0.198 0.231,-0.446 0.526,0.07 1.424,0.708 0.403,-0.064 1.515,-0.706 0.561,-0.173 0.562,0.026 1.421,0.414 1.063,0.444 0.33,0.233 -0.117,0.582 0.054,0.172 0.138,0.125 0.347,0.17 1.328,0.011 0.577,0.147 0.459,0.541 0.11,0.215 -0.019,0.224 -0.452,0.581 0.074,0.122 0.451,0.135 1.016,0.066 0.218,0.134 0.209,0.72 0.219,0.992 -0.004,0.393 -0.352,0.665 -0.962,0.884 -1.067,0.731 -0.069,0.188 0.341,0.348 0.352,0.152 0.277,-0.03 0.852,-0.331 0.193,0.006 0.391,0.338 0.181,0.334 0.166,0.445 -0.299,0.403 -1.225,0.5 -0.724,-0.657 -0.243,-0.146 -0.165,0.057 0.093,0.289 0.35,0.52 0.115,0.343 -0.122,0.166 -0.058,0.328 0.007,0.488 -0.029,0.495 -0.118,0.768 -0.042,0.031 -2.662,0.157 -0.321,0.138 -0.749,0.538 -0.566,0.27 -0.369,0.041 -0.36,-0.098 -0.972,-0.558 -0.647,0.105 -0.254,-0.053 -0.548,-0.372 -0.133,-0.188 -0.222,-0.489 -0.167,-0.672 0.013,-0.415 0.07,-0.6 -0.043,-0.302 -0.156,-0.001 -0.174,-0.125 -0.524,-0.606 -0.323,-0.179 -0.06,0.099 0.095,0.474 0.063,0.151 0.345,0.345 0.064,0.399 -0.147,1.005 -0.052,0.161 -0.335,0.733 -0.253,0.208 -0.691,0.016 -1.058,0.518 -0.506,0.075 -0.678,-0.121 -0.424,-0.236 -0.275,-0.271 -0.267,-0.385 -0.14,-0.029 -0.071,0.835 -0.131,0.108 -0.227,-0.013 -0.351,-0.259 -0.289,-0.604 -0.09,0.002 -0.04,0.352 -0.065,0.231 -0.089,0.109 -0.743,0.376 -0.414,0.002 -0.433,-0.431 -0.284,0.043 -0.364,0.233 -0.884,-0.441 -0.211,-0.018 0.182,0.714 -0.292,0.11 -0.63,-0.018 -1.036,-0.23 -0.642,0.334 -1.16,-0.2 -1.171,-0.05 -0.218,-0.163 -0.154,-0.334 -0.006,-0.297 0.057,-0.413 0.171,-0.616 0.286,-0.821 0.099,-0.435 -0.258,-0.202 -0.16,-0.27 -0.131,-0.031 -0.413,0.319 -0.269,0.926 -0.206,0.268 -0.091,-0.225 -0.068,-0.562 -0.091,-0.274 -0.113,0.015 -0.11,0.15 -0.107,0.286 -0.161,0.103 -0.215,-0.078 -0.076,0.14 0.063,0.357 0.022,0.333 -0.019,0.311 -0.186,0.3 -0.528,0.436 -0.305,0.139 -0.802,0.065 -0.479,-0.129 -0.972,-0.523 -0.538,-0.024 -0.648,-0.881 -0.513,-0.204 0.026,-0.321 0.224,-0.597 -0.007,-0.179 -0.701,0.871 -0.095,0.277 0.082,0.642 -0.093,0.046 -0.482,-0.23 -0.474,0.175 -0.114,-0.052 -0.327,-0.463 -0.576,-0.472 -0.254,-0.531 -0.396,-1.668 -0.201,-1.113 0.025,-0.228 0.294,-0.316 -0.044,-0.247 -0.366,-0.631 -0.395,-0.533 -0.117,-0.37 -0.054,-0.375 -0.052,-0.544 -0.002,-0.403 0.047,-0.261 0.226,-0.817 0.618,-1.474 0.083,-0.269 0.033,-0.266 -0.085,-0.788 -0.12,-0.793 -0.121,-0.569 -0.341,-0.789 -0.469,-0.824 -0.66,-1.489 -0.489,-1.167 -0.585,-1.657 -0.282,-0.144 -0.327,0.076 -0.705,0.573 -0.237,0.271 -0.058,0.182 -0.525,0.041 -1.488,-0.149 -0.569,-0.176 -0.425,0.046 -0.729,0.42 -0.778,-0.079 -0.487,-1.17 -1.106,-0.633 -0.33,-0.356 -0.226,-0.488 0.075,-0.32 0.629,-0.287 0.262,-0.317 0.125,-0.256 -0.624,0.221 -0.275,-0.039 -1.876,-1.618 -0.578,-0.287 -0.098,-0.146 -0.049,-0.192 10e-4,-0.239 0.055,-0.36 0.558,0.455 0.25,0.034 0.391,-0.136 0.139,-0.284 -0.089,-0.166 -0.639,-0.547 -0.309,-0.417 -0.119,-0.304 0.123,-0.432 0.032,-0.293 0.206,-0.165 0.379,-0.037 0.485,-0.208 0.887,-0.568 0.594,-0.203 0.593,0.031 1.437,0.581 1.432,0.735 0.898,0.57 z m -54.069,2.083 -0.426,0.4 -2.916,-0.591 -0.159,-0.186 -0.076,-0.253 0.528,-0.693 0.638,-0.3 1.482,-0.241 0.517,0.271 0.342,0.316 0.194,0.274 0.081,0.513 -0.205,0.49 z m 66.89,2.86 -0.131,0.164 -0.423,-0.084 -0.14,0.16 -0.225,-0.091 -0.31,-0.342 -0.362,-0.674 -0.414,-1.01 -0.323,-0.875 -0.018,-0.241 0.106,-0.411 0.323,-0.274 0.767,-0.33 0.526,0.009 0.489,0.666 0.138,0.229 0.084,0.272 0.002,0.261 -0.04,0.228 -0.222,0.506 -0.097,0.352 0,0.344 0.048,0.498 0.089,0.327 0.131,0.158 0.002,0.158 z m -52.105,5.328 0.354,0.033 0.414,-0.128 0.467,0.088 0.211,0.261 0.15,0.463 0.006,0.248 -0.03,0.213 -0.065,0.177 -0.604,1.159 -0.141,0.399 0.195,0.097 0.094,-0.067 0.603,-0.865 0.454,-0.271 0.344,-0.063 0.567,0.173 0.226,0.149 0.155,0.177 0.084,0.204 0.223,0.827 0.161,1.063 0.026,-0.109 0.004,-0.595 0.031,-0.465 0.557,-0.314 0.014,-0.104 -0.2,-0.259 -0.17,-0.354 -0.118,-0.664 0.046,-0.248 0.116,-0.267 0.357,-0.569 0.417,-0.341 0.37,-0.083 1.38,0.594 0.543,0.487 0.221,0.25 0.08,0.178 0.115,0.568 0.231,1.545 -0.001,0.494 -0.107,0.792 -0.446,1.474 -0.068,0.993 -0.449,2.443 -0.307,0.658 -0.338,0.459 -1.391,0.805 -1.046,0.815 -0.265,0.128 -0.275,0.011 -0.866,-0.27 -1.005,-0.519 -0.571,0.147 -0.57,0.374 -0.359,0.1 -0.337,-0.049 -0.335,-0.134 -0.441,-0.351 0.228,-0.16 0.104,-0.18 -0.092,-0.185 -0.464,-0.267 -0.481,0.593 -1.405,1.377 -1.888,0.459 -0.592,0.279 -0.439,0.359 -0.229,0.295 -0.35,0.692 -0.538,0.519 -0.973,0.566 -1.238,0.875 -2.219,0.892 -1.396,0.156 -1.395,-0.294 -0.442,-0.24 -0.463,-0.376 -0.949,-0.892 -0.262,-0.323 -0.305,-0.704 0.18,-0.47 0.506,-0.544 0.757,-0.496 1.511,-0.673 1.371,-1.082 0.485,-0.204 1.32,-0.167 0.665,0.102 0.481,-0.057 0.317,-0.149 0.471,-0.393 0.688,-0.786 0.502,-0.739 0.127,-0.347 -0.168,-0.325 -0.246,-0.046 -0.821,0.763 -0.413,0.256 -0.449,0.018 -0.616,0.26 -0.6,0.104 -0.116,-0.008 -0.625,-0.727 -0.334,-0.128 -0.155,0.076 -0.143,0.193 -0.271,0.536 -0.156,0.193 -0.27,0.139 -1.09,0.159 -1.044,0.268 -0.232,-0.166 -0.141,-0.31 -0.029,-0.188 -0.016,-0.639 -0.07,-0.254 0.092,-0.534 0.119,-0.408 0.146,-0.281 0.718,-0.832 0.101,-0.217 -0.342,0.045 -0.813,0.408 -0.106,-0.141 -0.19,-0.467 -0.091,-0.047 -0.104,0.194 -0.061,0.272 -0.14,1.122 -0.123,0.571 -0.327,-0.115 -0.404,-0.345 -0.151,-0.046 -0.087,0.109 0.028,0.193 0.41,0.953 0.005,0.332 -0.269,0.58 -1.144,0.958 -0.452,0.256 -0.16,-0.099 -0.144,-0.262 -0.127,-0.427 -0.297,-0.575 -0.176,-0.129 -0.198,-0.017 -0.182,0.119 -0.166,0.255 -0.104,0.271 -0.098,0.503 -0.208,0.384 -0.128,0.065 -1.162,-0.796 -0.936,-1.421 -1.024,0.222 -0.459,-0.05 -1.396,-0.523 -0.177,-0.324 -0.098,-0.423 0.01,-0.23 0.058,-0.238 0.177,-0.474 0.352,-0.719 0.147,-0.232 0.219,-0.192 0.29,-0.151 0.739,-0.084 1.903,-0.027 0.381,-0.112 2.082,-1.407 0.238,-0.232 0.305,-0.453 0.069,-0.188 -0.013,-0.123 -2.561,1.123 -1.098,0.241 -1.683,-0.183 -0.317,-0.176 -0.072,-0.313 0.351,-0.834 0.185,-0.311 0.479,-0.295 1.158,-0.418 1.548,-0.371 1.014,-0.008 0.851,-0.295 0.512,-0.338 -1.714,0.018 -2.064,0.158 -0.298,-0.11 -0.59,-0.446 -0.028,-0.326 0.236,-0.393 0.086,-0.294 -0.169,-0.662 0.052,-0.258 0.385,-0.554 0.686,-0.601 0.423,-0.086 0.816,0.206 2.326,0.213 0.451,-0.077 -0.285,-0.261 -0.405,-0.195 -1.796,-0.334 -0.372,-0.15 -0.071,-0.206 -0.027,-0.305 0.018,-0.404 0.13,-0.414 0.557,-0.869 1.634,-0.719 0.65,-0.099 0.651,0.047 0.662,0.323 0.295,0.28 0.148,0.344 0.071,0.32 0.008,0.552 0.032,0.217 0.12,0.362 0.381,0.846 0.28,0.263 1.292,-0.491 0.538,-0.11 0.541,0.154 0.788,0.506 1.021,1.52 1.315,1.538 -0.006,0.33 -0.504,0.51 -0.095,0.218 0.068,0.151 0.503,0.1 0.471,-0.075 0.45,0.114 0.101,0.131 0.165,0.554 0.229,0.975 0.272,0.724 0.315,0.477 0.311,0.244 0.458,0.018 0.46,-0.142 0.747,0.047 3.854,0.548 0.228,-0.095 0.163,-0.301 0.097,-0.508 0.037,-0.419 -0.053,-0.574 -0.075,-0.275 -2.389,-1.873 -0.208,-0.761 1.167,-1.067 0.084,-0.248 0.022,-0.341 -0.039,-0.435 -0.158,-0.416 -0.627,-0.796 -0.555,-0.12 -0.822,-0.789 -0.129,-0.2 -0.106,-0.316 -0.083,-0.433 0.014,-0.333 0.111,-0.234 0.81,-0.812 0.328,-0.452 1.01,-2.05 0.467,-0.834 0.334,-0.393 0.34,-0.244 0.749,-0.114 0.779,0.774 0.172,0.048 0.071,0.203 -0.03,0.359 -0.098,0.341 -0.279,0.614 -0.065,0.257 0.021,0.265 0.191,0.608 0.059,0.399 0.042,0.671 0.031,0.099 0.469,0.564 0.426,0.733 0.197,1.143 -0.153,0.393 -0.359,0.54 -0.213,0.449 -0.068,0.358 0.054,0.216 0.265,0.112 z m 19.832,-6.195 -0.727,0.053 -0.336,-0.145 -0.022,-0.213 0.291,-0.28 0.967,-0.458 0.569,-0.838 0.212,-0.104 0.743,-0.12 0.433,0.026 0.556,0.198 -1.34,1.036 -1.346,0.845 z m 9.893,1.359 0.032,0.534 -0.034,0.412 -0.099,0.289 -0.004,0.332 0.09,0.374 0.375,0.939 0.119,0.502 0.018,0.502 -0.019,0.343 -0.231,0.663 -0.103,0.853 -0.006,0.45 0.138,0.701 0.004,0.325 -0.26,0.555 -0.551,0.482 0.078,0.254 1.188,0.608 0.09,0.137 -0.006,1.359 0.207,1.481 -0.077,0.028 -0.286,-0.461 -0.528,-0.55 -0.631,1.024 0.072,1.727 0.415,0.765 0.126,0.435 -0.041,0.261 -0.351,0.116 -0.122,-0.057 -0.36,-0.344 -0.209,-0.521 -0.066,0.018 -0.064,0.251 0.042,0.255 0.244,0.462 0.103,0.551 -0.108,0.156 -0.362,0.142 -0.489,0.006 -0.768,0.248 -0.378,0.038 -0.369,-0.134 -0.492,-0.032 -0.409,0.059 -0.25,-0.109 -0.228,-0.257 -0.265,0.062 -0.579,0.651 -0.897,-0.207 -0.808,-0.053 -0.163,-0.217 -0.181,-0.424 -0.356,-1.33 0.067,-0.336 0.863,-0.183 0.018,-0.115 -0.613,-0.479 -0.704,-0.353 -0.326,-0.278 0.075,-0.531 -0.021,-0.134 1.213,-0.609 0.882,-1.207 0.547,-0.493 0.04,-0.239 0.463,-0.249 1.071,-0.15 0.042,-0.338 -2.022,0.194 -2.769,0.689 -0.856,0.338 -0.714,-0.197 -3.031,1.061 -0.129,0 -0.317,-0.336 -0.272,-0.631 0.195,-0.441 0.89,-0.84 0.445,-0.74 -0.052,-0.4 0.354,-0.714 0.566,-0.101 0.963,0.587 0.5,0.581 0.449,0.271 0.398,-0.054 0.412,-0.405 -0.104,-0.046 -0.699,0.215 -0.082,-0.063 -0.356,-0.649 -0.155,-0.415 -0.1,-0.416 -0.006,-0.294 0.215,-0.56 -0.801,-0.185 -0.299,-0.389 -0.137,-0.486 0.03,-0.211 0.252,-0.571 0.68,-0.79 -0.079,-0.219 -0.99,0.018 -0.218,-0.103 -0.422,-0.494 0.093,-0.549 0.394,-0.807 0.297,-0.478 0.199,-0.147 0.31,0.003 0.735,0.313 0.212,0.172 0.563,0.778 0.144,0.443 -0.018,0.425 0.108,0.312 0.437,0.454 1.878,2.33 0.351,0.547 0.24,0.241 0.434,0.177 0.254,-0.037 0.207,-0.163 0.035,-0.211 -0.812,-0.809 -0.204,-0.432 -0.174,-0.591 0.076,-0.191 0.236,-0.066 0.594,0.078 0.699,-0.16 -0.775,-0.25 -0.506,-0.332 -0.52,-0.016 -0.65,-0.534 0,-0.167 0.159,-0.171 0.884,-0.238 0.167,-0.102 0.015,-0.149 -0.292,-0.36 -0.26,-0.196 -1.336,-0.437 -0.475,-0.49 -0.151,-0.234 -0.048,-0.227 0.171,-0.582 0.718,-0.732 0.521,-0.351 0.896,-0.257 0.715,0.031 0.407,0.099 0.953,1.242 0.449,0.812 0.784,-0.142 -0.227,-0.854 -0.147,-0.942 0.232,-0.347 0.646,-0.617 0.514,0.323 0.67,0.833 0.147,0.283 0.754,0.512 0.446,0.17 0.231,0.273 0.073,0.353 z m -17.742,-1.405 0.139,0.067 0.428,-0.241 0.276,-0.043 0.308,0.455 0.08,0.297 1.107,0.738 0.39,0.331 0.05,0.22 -0.139,0.314 -0.327,0.409 -0.314,0.277 -0.451,0.22 -2.241,0.033 -0.244,-0.1 -0.141,-0.363 -0.277,-1.36 -0.197,-0.736 -0.074,-0.514 0.049,-0.288 0.239,-0.29 0.829,-0.434 0.367,0 0.23,0.111 0.094,0.221 -0.029,0.299 -0.152,0.377 z m 5.039,6.732 0.588,0.711 0.028,0.163 -0.111,0.135 -0.76,0.375 -0.295,0.299 -0.247,0.697 -0.192,0.322 -1.021,0.192 -1.042,-0.009 0.196,-0.672 0.57,-1.102 -0.449,-0.458 -1.594,0.763 -0.605,-0.469 0.518,-1.204 -0.516,-0.111 -0.724,-0.005 -0.459,-0.717 0.155,-0.865 0.95,-0.479 1.237,-0.415 1.328,-0.63 1.039,0.053 0.404,0.3 0.134,1.005 0.129,1.188 0.181,0.101 0.558,0.832 z m 65.01,1.03 0.032,0.678 -0.204,-0.031 -0.649,0.442 -0.53,0.063 -0.265,-0.198 -0.168,-0.463 0.414,-0.866 0.476,-0.608 0.571,-0.949 0.475,-0.626 0.234,0.131 0.227,0.332 -0.284,0.942 -0.31,0.467 -0.019,0.686 z m -110.197,3.946 -0.802,0.722 -0.57,-0.075 -0.756,-0.531 -0.616,-0.18 -0.217,-0.177 -0.032,-0.184 0.209,-0.512 0.262,-0.409 0.627,-0.807 1.059,-1.568 0.693,-0.596 0.68,-0.423 0.694,-0.948 0.384,-0.425 0.333,-0.031 0.34,0.183 0.038,0.259 -0.357,1.292 -0.251,0.518 -0.491,1.329 -0.942,2.208 -0.285,0.355 z m 66.799,-1.922 -0.274,0.005 -0.357,-0.237 -0.101,-0.248 -0.077,-0.341 -0.053,-0.433 -0.074,-0.348 -0.096,-0.261 -0.02,-0.218 0.056,-0.175 0.117,-0.098 0.267,-0.032 0.581,-0.454 0.11,0.049 0.077,0.241 0.079,0.628 0.083,0.371 0.229,0.676 0.101,0.434 -0.021,0.134 -0.072,0.119 -0.555,0.188 z m -74.511,0.047 -0.219,0.053 -0.243,-0.128 0.056,-0.292 0.547,-0.801 0.03,-0.229 -0.007,-0.188 -0.068,-0.22 0.138,-0.282 0.222,-0.116 0.074,0.11 0.025,0.246 -0.051,0.714 -0.069,0.345 -0.094,0.294 -0.145,0.263 -0.196,0.231 z m 70.155,2.657 -0.218,0.368 -0.225,0.027 -0.303,-0.348 -0.329,0.131 -0.45,0.704 -0.16,0.413 -0.123,0.149 -0.377,0.129 -0.163,-0.117 -0.153,-0.367 -0.144,-0.619 0.106,-0.467 0.355,-0.315 0.935,-0.515 0.268,-0.256 0.029,-0.275 0.056,-0.182 0.083,-0.089 0.624,0.465 0.296,0.313 0.224,0.354 -0.024,0.141 -0.307,0.356 z m 7.117,5.32 0.181,0.823 0.033,0.331 0.009,0.697 -0.077,0.905 -0.052,0.166 -0.074,0.076 -0.036,0.232 0.003,0.388 -0.073,0.236 -0.149,0.084 -1.006,0.177 -0.622,-0.034 -0.922,0.113 -0.457,-0.057 -0.299,-0.19 -0.435,-0.423 -0.919,-1.004 -0.463,-0.035 -1.163,-0.354 -0.642,-1.098 -0.246,-0.197 -0.248,0.329 -0.067,-0.074 -0.068,-0.222 -0.069,-0.37 -0.121,-0.19 -0.487,0.099 -0.088,-0.125 -0.023,-0.325 0.007,-0.283 0.087,-0.445 0.513,-1.233 0.254,-0.087 0.314,-0.229 0.174,-0.671 -0.018,-0.636 0.478,-0.952 0.285,-0.282 0.512,-0.668 1.744,-1.049 0.481,-0.092 0.644,0.079 0.622,0.335 0.479,0.555 0.976,1.36 0.444,0.817 0.236,0.835 0.212,0.478 0.263,1.024 -0.096,0.399 -0.057,0.536 0.026,0.251 z m -29.685,-0.091 -0.53,0.059 -0.914,-0.33 -0.544,-0.637 -0.166,-0.307 0.016,-0.139 0.094,-0.138 0.131,-0.417 0.311,-1.209 0.117,-0.322 0.49,-0.703 0.359,-0.188 0.762,0.06 0.442,0.364 0.185,0.234 0.132,0.28 0.13,0.625 0.032,0.403 0.222,0.459 0.066,0.265 0.004,0.259 -0.062,0.262 -0.127,0.263 -0.292,0.384 -0.858,0.473 z m 24.735,5.67 -0.128,0.053 -0.25,-0.06 -0.942,-0.47 -0.16,-0.193 -0.046,-0.142 0.214,-0.171 0.081,-0.182 0.239,-0.222 0.422,0.001 0.442,0.541 0.208,0.486 0.011,0.214 -0.091,0.145 z m -5.75,-0.219 -0.844,0.636 -0.184,-0.247 -0.08,-0.224 0.656,-0.968 0.28,-0.255 0.276,0.302 0.076,0.229 -0.035,0.176 -0.145,0.351 z m -62.812,4.293 0.022,0.043 0.722,-0.953 0.438,-0.052 0.306,0.085 0.097,0.122 0.061,0.188 0.03,0.414 0.02,1.02 0.039,0.126 0.1,-0.058 0.159,-0.24 0.791,-1.51 0.333,-0.417 0.228,-0.125 0.966,-0.228 0.656,0.007 0.725,0.142 0.541,0.213 0.887,0.625 0.697,0.716 0.64,0.759 2.146,2.822 0.908,0.824 0.347,0.466 0.154,0.339 0.135,0.424 0.042,0.395 -0.053,0.367 -0.099,0.256 -0.218,0.217 -1.313,0.917 -0.691,0.28 -0.685,0.403 -1.636,1.415 -1.12,0.669 -1.456,1.298 -2.746,2.067 -0.327,0.413 -0.15,0.296 -0.775,2.315 -0.295,0.533 -0.714,0.542 -0.904,0.135 -0.253,0.151 -0.041,0.787 -0.324,1.299 -0.158,0.869 -0.216,2.305 -0.05,0.229 -0.165,0.423 -0.28,0.457 -0.873,0.526 -0.644,0.275 -0.876,0.228 -0.209,-0.156 -0.211,-0.359 -0.221,-0.032 -0.136,0.057 -1.143,1.569 -1.103,0.631 -0.478,0.568 -0.337,0.266 -0.271,0.082 -0.446,-0.05 -0.323,-0.257 -0.292,-0.397 -0.22,-0.432 -0.566,-1.79 -0.244,-0.617 -0.207,-0.309 -0.555,-1.105 -0.153,-0.223 -2.111,-1.413 -1.028,-0.798 -0.249,-0.282 -0.23,-0.165 -1.32,0.11 -0.175,-0.043 -0.045,-0.118 0.156,-0.421 0.062,-0.266 0.021,-0.261 -0.023,-0.422 0.017,-0.077 0.501,-0.417 -0.081,-0.087 -0.059,-0.163 -0.036,-0.241 0.054,-0.168 0.146,-0.097 0.177,-0.391 0.208,-0.688 0.155,-0.388 0.215,-0.25 0.386,-0.67 0.276,-0.271 0.233,-0.341 0.007,-0.154 -0.095,-0.118 -0.033,-0.261 0.043,-0.817 -0.002,-0.422 0.042,-0.354 0.086,-0.285 0.109,-0.189 0.978,-0.598 0.049,-0.174 0.012,-0.2 -0.026,-0.227 -0.05,-0.159 -0.155,-0.131 -0.261,-0.036 -0.227,-0.347 -0.054,-0.168 0.091,-0.477 0.441,-0.763 0.149,-0.378 0.476,-1.715 0.87,-1.071 0.236,-1.16 0.654,-1.239 -0.001,-0.172 -0.211,-0.425 -0.603,-0.295 -0.291,-0.456 -0.194,-0.52 -0.883,-3.019 -0.151,-0.227 -0.045,-0.355 -0.18,-0.235 0.037,-0.22 3.446,-0.917 2.372,-0.293 2.457,-0.803 0.684,-0.047 0.53,0.159 0.523,0.417 0.693,0.728 0.918,0.707 1.715,1.029 1.069,0.215 -0.429,0.815 -0.061,0.244 0.002,0.176 z m 74.556,-0.496 1.103,0.485 0.537,0.317 0.264,0.211 0.502,0.71 0.256,0.204 0.978,-0.411 0.684,-0.153 1.522,0.188 1.292,0.585 0.476,0.439 0.29,0.402 -0.075,0.443 -0.238,0.712 -0.279,0.675 -0.558,1.053 -0.475,0.524 -0.118,0.251 -0.074,0.348 -0.184,0.508 -0.51,1.092 -0.136,0.186 -0.718,0.476 0.246,0.213 0.112,0.188 -0.095,0.479 -0.453,1.152 -0.47,1.058 -0.328,0.63 -0.597,0.906 -0.329,0.255 -0.44,0.079 -2.663,-0.79 -0.668,0.013 -1.775,0.413 0.167,0.202 0.65,0.305 0.419,0.332 0.557,1.028 0.072,0.256 0.035,0.297 -0.021,0.581 -0.038,0.147 -0.885,1.558 -0.286,1.125 -0.183,0.923 -0.298,0.253 -0.992,-0.389 -0.32,0.012 -1.113,0.269 -0.519,-0.133 0.073,-1.393 -0.073,-1.517 -0.164,-1.459 -0.833,-2.629 -0.092,-0.47 -0.062,-0.508 -0.031,-0.545 0.003,-0.551 0.058,-1.118 0.007,-0.57 -0.042,-1.494 -0.112,-2.261 -0.011,-0.805 0.008,-0.322 0.035,-0.246 0.178,-0.327 0.342,-0.236 0.175,-0.036 1.094,0.695 0.503,0.231 0.335,-0.01 0.018,-0.079 -0.298,-0.146 -0.28,-0.299 -0.456,-0.893 -0.209,-0.768 -0.042,-0.255 -0.01,-0.267 0.021,-0.279 0.066,-0.251 0.229,-0.395 0.186,-0.179 0.686,-0.455 0.692,-0.278 1.526,-0.189 0.433,0.136 0.661,-0.501 0.39,-0.12 0.672,0.182 z m -14.312,2.979 -0.808,0.213 -0.373,-0.091 -0.197,0.278 -0.155,0.118 -0.441,0.051 -0.91,-0.502 -0.245,-0.175 -0.089,-0.163 0.037,-0.156 0.163,-0.15 0.698,-0.229 0.259,-0.169 0.106,-0.236 0.175,-0.19 0.242,-0.144 0.654,-0.138 1.471,-0.717 0.731,-0.102 0.287,0.061 0.086,0.19 0.023,0.189 -0.04,0.189 -0.229,0.485 -0.298,0.376 -0.802,0.807 -0.345,0.205 z m -4.86,-0.783 2.369,2.16 0.332,-0.177 0.716,-0.113 0.744,-0.316 1.032,-0.263 0.629,-0.479 0.268,-0.137 0.455,-0.085 0.248,0.002 0.715,0.259 0.287,0.182 0.152,0.191 0.165,0.347 0.282,0.843 0.042,0.313 -0.015,0.084 -0.26,0.516 -0.174,0.224 -0.358,0.213 -0.311,0.065 -0.267,0.372 -0.301,-0.099 -0.081,0.339 0.032,0.207 0.081,0.101 0.151,-0.024 0.173,-0.144 0.336,0.072 0.177,0.222 0.159,0.366 -0.118,0.338 -0.594,0.467 -0.875,0.526 -1.066,1.646 -0.561,0.685 -0.116,0.213 -0.057,0.214 0.017,0.404 0.025,0.163 0.155,0.065 0.521,-0.564 0.336,-0.263 0.341,-0.145 0.602,-0.01 0.249,0.087 0.451,0.339 0.413,0.521 0.092,0.189 -0.04,0.19 -0.171,0.19 -0.019,0.125 0.394,0.262 0.434,0.708 0.028,0.428 -0.189,0.422 -0.052,0.282 0.086,0.143 0.214,-0.086 0.513,-0.473 0.555,-0.247 0.223,0.027 0.14,0.109 0.148,0.648 0.123,0.726 0.015,0.608 -0.092,0.492 -0.132,0.383 -0.333,0.473 -0.301,0.18 -0.157,0.002 0.016,0.08 0.357,0.392 0.149,0.313 0.063,0.301 -0.021,0.29 -0.049,0.247 -0.416,0.912 0.022,0.13 0.115,0.059 0.261,0.522 0.031,1.208 -0.935,0.377 -0.22,0.279 -0.258,0.447 -0.296,0.333 -0.671,0.35 -0.34,0.04 -1.681,-0.292 -0.17,-0.17 -0.118,-0.304 -0.065,-0.438 -0.018,-0.346 0.03,-0.252 -0.009,-0.147 -0.047,-0.043 -0.187,0.253 -0.195,0.458 0.107,0.507 0.531,1.403 0.102,0.6 0.015,0.254 -0.024,0.19 -0.6,0.809 -0.347,0.273 -0.356,0.136 -0.339,-0.102 -0.322,-0.338 -0.246,-0.151 -0.508,0.021 -0.159,-0.175 -0.147,-0.326 -0.357,-1.175 -0.499,-0.838 -0.43,-0.944 -1.093,-1.388 -0.566,-0.836 -0.754,-1.354 -0.315,-0.308 -0.262,-0.124 -0.515,-0.098 -0.119,-0.17 -0.188,-0.465 -0.324,-0.35 -0.118,-0.044 -0.191,0.083 -0.504,0.323 -0.633,-0.342 -0.142,-0.241 -0.084,-0.408 -0.08,-0.225 -0.214,-0.202 -0.181,-0.513 -1.203,-1.015 -0.715,-1.173 -0.145,-0.426 -0.014,-0.174 0.073,-0.569 0.166,-0.647 0.217,-0.646 0.133,-0.265 0.471,-0.56 0.371,-0.127 0.518,0.071 0.272,0.125 0.245,0.375 0.104,0.431 0.123,0.29 0.384,0.317 0.208,0.254 0.306,0.59 0.236,0.708 0.217,0.233 0.521,0.079 0.538,-0.12 1.154,-0.445 0.047,-0.056 0.071,-0.265 0.132,-1.623 0.079,-0.007 0.392,0.753 0.111,0.083 0.169,-0.157 0.1,-0.365 -0.012,-0.174 -0.246,-0.885 -0.146,-0.386 -0.13,-0.24 -0.145,-0.079 -0.314,0.077 -0.239,-0.171 -0.053,-0.246 0.039,-0.332 0.132,-0.35 0.142,-0.201 0.275,-0.104 0.322,0.102 0.446,0.424 0.282,0.094 0.396,-0.121 -0.507,-0.249 -0.708,-0.982 -0.303,-0.185 -0.37,0.423 -0.25,0.159 -0.472,0.206 -0.376,0.03 -1.576,-1.524 -0.087,-0.146 -0.116,-0.399 0.014,-0.184 0.155,-0.285 0.393,-0.378 0.584,-0.237 0.391,-0.038 0.341,0.282 0.498,0.762 0.436,0.443 0.036,-0.16 -0.077,-0.437 -0.199,-0.65 -0.143,-0.178 -0.35,-0.195 -0.324,-0.449 -0.152,-0.333 -0.081,-0.357 -0.01,-0.382 0.062,-0.262 0.134,-0.141 1.211,-0.384 0.846,0.425 0.537,0.062 0.223,-0.522 -0.078,-0.102 -0.282,0.135 -0.319,-0.003 -0.199,-0.287 -0.006,-0.168 0.249,-0.402 0.379,-0.174 z m 37.643,27.407 0.111,0.189 0.641,-0.241 0.545,-0.278 0.849,-0.664 0.507,-0.231 1.541,0.004 0.262,0.125 -0.116,0.397 -0.064,0.112 0.051,0.172 0.166,0.232 0.332,0.258 0.131,-0.231 0.096,-0.559 0.227,-2.313 0.096,-0.704 0.046,-0.669 -0.005,-0.634 -0.111,-0.403 -0.395,-0.242 -0.539,0.04 -0.277,-0.063 -0.335,-0.125 -0.249,-0.196 -0.162,-0.266 -0.322,-0.802 -0.237,-0.449 -0.609,-0.813 -0.276,-0.272 0.139,-0.322 0.554,-0.372 0.334,-0.353 0.393,-1.038 0.236,-0.168 0.851,0.138 1.151,0.813 0.721,0.701 0.19,0.075 0.004,-0.127 -0.183,-0.328 -0.83,-0.87 -0.377,-0.636 -0.181,-0.455 0.086,-0.198 0.467,-0.202 0.061,-0.233 -0.635,-0.275 -0.322,0.006 -0.26,0.197 -0.28,0.013 -0.518,-0.358 -0.141,-0.209 -0.299,-0.621 -0.157,-0.542 -0.174,-0.337 -0.063,-0.269 -0.034,-0.838 0.015,-0.495 0.07,-0.424 0.126,-0.354 0.336,-0.656 0.189,-0.189 0.352,-0.086 0.765,0.326 2.057,1.172 -0.049,-0.376 -2.301,-1.587 -0.813,-0.411 -0.199,-0.579 1.225,-2.235 1.129,-0.529 0.562,-0.658 0.918,-0.029 0.862,0.418 0.015,-0.114 -0.389,-0.787 0.03,-0.197 0.489,-0.471 0.896,-0.555 1.094,-0.442 0.217,-0.23 0.28,-0.163 0.516,-0.142 1.282,-0.068 0.72,0.066 0.957,0.338 0.559,0.613 0.174,0.366 0.297,1.169 0.243,1.625 0.355,0.671 0.571,0.37 0.395,0.401 0.218,0.432 0.058,0.542 -0.102,0.651 0.077,0.665 0.255,0.678 0.197,0.383 0.431,0.437 0.007,0.233 -0.135,0.266 -0.285,0.363 -0.704,1.129 -0.908,1.234 -0.647,1.061 -0.032,0.312 1.347,-1.66 0.419,0.059 0.019,0.233 -0.274,0.811 -0.334,0.72 -0.336,0.46 0.062,0.173 0.64,0.803 -0.118,0.132 -0.309,-0.065 -0.126,0.072 -0.092,0.146 -0.057,0.219 -0.004,0.308 0.05,0.396 -0.005,0.295 -0.06,0.195 0.064,0.081 0.188,-0.034 0.158,-0.161 0.271,-0.534 0.896,-1.463 0.573,-0.55 0.185,-0.048 0.527,0.358 0.123,-0.021 -0.58,-1.137 -0.05,-0.289 0.118,-0.427 0.071,-0.147 0.323,-0.315 0.268,-0.168 0.15,0.07 0.237,0.583 0.11,0.405 0.197,0.162 0.438,-0.209 0.292,-0.496 0.362,0.325 0.545,0.773 -0.05,0.77 0,0.768 0.028,0.56 0.651,1.021 0.453,0.446 0.083,0.003 -0.01,-0.152 -0.095,-0.338 -0.249,-0.339 -0.224,-0.525 -0.202,-0.643 0.12,-1.509 0.339,-0.793 0.328,0.204 0.432,0.458 0.34,0.042 0.536,-0.048 1.096,0.922 0.588,0.02 -0.054,-0.376 -0.446,-0.181 -0.65,-0.51 -1.013,-0.609 -0.466,-0.699 -0.087,-0.33 0.013,-0.355 0.058,-0.314 0.102,-0.273 0.203,-0.269 0.98,-0.821 0.696,-0.351 0.523,-0.114 0.874,0.009 1.016,0.144 0.549,0.242 0.63,0.581 0.799,0.573 0.285,0.102 0.333,-0.013 0.38,-0.129 0.362,0.047 1.151,0.847 0.304,0.434 0.185,0.524 0.137,0.508 0.088,0.491 -0.036,0.397 -0.958,1.706 -0.417,0.289 -0.276,0.642 -0.411,1.208 -0.348,0.644 -0.032,0.125 0.073,0.031 0.209,-0.288 0.361,-0.832 0.262,-0.72 0.481,-0.597 0.788,-0.714 0.686,-0.342 0.584,0.033 0.492,0.103 0.399,0.174 0.237,0.146 0.075,0.118 0.16,0.536 -0.009,0.362 -0.1,0.407 -0.189,0.459 -0.858,0.507 -0.47,0.397 -0.292,0.147 -0.875,0.147 0.039,0.156 0.65,0.215 0.726,-0.072 -0.019,0.255 -0.341,0.676 -0.11,0.586 0.095,0.478 -0.018,0.388 -0.254,0.812 -0.292,0.729 0.11,0.108 0.666,-1.048 0.178,-1.155 0.269,-1.022 0.313,-0.565 0.236,-0.215 0.744,-0.087 0.412,-0.603 0.353,-0.192 0.147,-0.003 0.3,0.225 -0.018,0.237 -0.435,1.074 -0.922,1.725 0.376,-0.196 0.255,-0.409 0.341,-0.409 0.387,-0.607 0.256,0.55 0.394,0.409 0.235,0.932 0.38,0.447 0.23,0.346 -0.033,-0.586 -0.332,-1.183 0.091,-0.476 0.256,-0.238 0.799,-1.004 0.558,0.335 0.344,0.297 0.172,-0.079 0.434,0.042 0.696,0.162 0.677,0.28 0.658,0.398 0.507,0.464 0.356,0.531 0.216,0.366 0.075,0.202 0.12,0.525 -0.092,0.348 -0.497,0.8 -0.276,0.362 -0.275,0.162 -0.738,-0.159 -0.229,0.091 -0.241,0.25 -0.769,1.09 -0.425,0.469 -0.418,0.299 -0.097,0.157 0.898,-0.015 0.249,-0.322 0.208,-0.605 0.396,-0.626 0.748,-0.288 1.043,0.618 0.518,-0.025 0.396,-0.62 0.442,-0.424 0.174,-0.084 0.094,0.047 0.336,0.442 0.101,0.394 -0.007,0.895 -0.045,0.27 -0.299,0.672 -0.73,1.004 -0.478,0.375 -0.529,0.201 -0.577,0.338 -0.204,0.272 -0.199,0.385 -0.199,0.257 -0.253,0.213 0.331,0.313 0.126,-0.009 0.122,-0.187 0.333,-0.739 0.248,-0.323 0.141,-0.068 0.145,0.031 0.141,0.146 0.138,0.259 -0.011,0.63 -0.42,2.472 0.068,-0.007 0.259,-0.667 0.751,-2.585 0.184,-0.522 0.363,-0.528 0.813,-0.803 0.628,-0.422 0.709,-0.356 0.378,-0.132 0.433,0.089 0.281,0.415 0.38,0.075 0.462,-0.104 0.298,0.05 0.338,0.164 0.289,0.307 0.491,0.348 1.109,0.65 0.138,0.137 0.128,0.245 0.12,0.355 -0.015,0.35 -0.149,0.346 -0.185,0.21 -0.221,0.077 -0.229,0.188 -0.423,0.491 -0.138,0.083 -0.664,0.21 -0.615,0.103 -0.385,0.196 -0.739,0.529 -1.018,0.978 0.011,0.231 0.406,0.112 0.329,-0.147 0.453,-0.674 0.425,-0.258 0.665,-0.207 0.919,-0.181 0.394,0.028 0.071,0.037 0.052,0.16 0.032,0.283 -0.151,0.368 -0.174,0.174 -0.475,0.829 0.312,0.214 0.429,0.092 0.246,-0.221 0.221,-0.508 0.248,-0.283 0.275,-0.056 0.242,-0.13 0.208,-0.204 0.057,-0.134 -0.304,-0.266 -0.024,-0.162 0.124,-0.398 0.223,-0.442 0.233,-0.275 0.172,-0.022 0.572,0.295 0.391,0.514 0.989,1.529 0.127,0.296 0.344,1.125 0.065,0.498 -0.056,0.346 -0.081,0.211 -0.106,0.076 -0.217,0.002 -1.317,-0.457 -0.601,0.06 -0.263,0.128 -0.212,0.191 -0.165,0.242 -0.117,0.292 -0.231,0.164 -0.836,0.006 -0.469,0.162 -0.807,0.395 -0.29,0.217 -0.065,0.285 0.494,-0.049 0.813,-0.37 0.764,-0.105 1.277,0.813 0.42,0.126 0.234,-0.117 0.281,-0.036 1.021,0.054 0.346,0.1 0.517,0.311 0.791,0.673 0.152,0.197 0.088,0.207 0.025,0.216 -0.008,0.533 -0.079,0.18 -0.268,0.122 -1.137,-0.141 -0.347,-0.111 -0.427,0.14 -0.346,-0.049 -0.443,-0.213 -0.486,-0.379 -0.729,0.359 -0.584,-0.233 -0.597,0.207 -1.184,0.851 0.132,0.146 1.622,-0.729 0.313,0.044 0.513,0.267 0.81,0.523 0.227,0.214 0.002,0.82 -0.124,0.549 -0.248,0.616 -0.372,-0.083 -0.866,-0.383 -0.354,-0.053 -0.259,0.063 -0.348,0.245 -0.165,0.008 -1.385,-0.486 -0.311,-0.023 -0.036,0.05 0.066,0.096 1.256,0.753 0.929,0.082 0.582,0.13 0.345,0.229 0.163,0.169 0.012,0.5 0.31,0.502 0.279,0.204 0.178,0.01 0.306,-0.185 0.309,-0.028 0.25,0.128 0.313,0.276 0.378,0.077 0.332,0.168 0.256,0.034 0.721,-0.078 0.313,0.105 0.081,0.092 -0.136,0.161 -0.659,0.385 -0.1,0.365 0.372,0.474 0.195,0.362 -0.009,0.27 -0.199,0.613 -0.05,0.246 0.065,0.02 0.479,-0.496 0.075,0.063 0.05,0.686 0.061,-0.039 0.161,-0.567 -0.071,-0.759 0.281,-0.3 0.894,-0.228 -0.151,1.191 -0.023,0.616 -0.391,1.02 -0.326,0.328 0.01,0.068 0.232,0.129 0.145,0.014 0.139,-0.159 0.331,-0.786 0.672,-0.822 0.122,-0.018 -0.005,0.298 -0.086,0.552 0.31,0.258 0.296,-0.256 0.161,-0.221 0.372,0.032 0.169,0.105 0.05,0.243 -0.171,1.015 0.031,0.25 0.392,0.672 0.04,-0.041 -0.074,-0.324 -0.081,-0.802 0.076,-0.349 0.323,-0.449 0.662,-0.648 0.246,-0.129 0.153,0.088 0.244,0.312 -0.076,0.186 -0.263,0.194 -0.195,0.351 -0.128,0.507 0.142,0.27 0.537,0.024 0.539,-0.416 0.31,0.205 0.368,0.539 0.674,0.864 0.384,-0.235 0.475,0.654 -0.638,0.517 0.195,1.083 -0.829,-0.044 -0.466,0.084 -0.312,-0.097 -0.335,0.034 0.311,0.255 0.599,0.105 0.055,0.326 0.47,-0.008 0.353,-0.063 0.637,0.013 0.034,-0.375 0.414,-0.214 0.238,-0.236 0.198,0.14 0.576,0.16 0.774,0.736 -0.341,0.439 -0.093,0.414 -0.115,0.35 -0.064,0.315 -0.136,0.216 -1.108,1.23 0.184,0.011 0.469,-0.296 0.914,-0.443 0.509,-0.178 0.362,0.118 0.183,0.005 0.162,-0.158 0.302,0.182 0.626,0.167 0.719,-1.013 0.435,0.199 0.405,0.626 0.868,1.093 0.453,0.633 0.15,0.287 -0.021,0.282 -0.409,0.298 -0.21,0.06 -0.551,-0.563 -0.506,-0.285 -0.308,0.031 -0.306,0.217 0.096,0.121 1.226,0.866 0.214,0.636 0.016,0.277 -0.819,0.419 -0.263,0.024 -0.567,-0.2 -0.332,-0.374 -0.274,-0.135 -0.38,-0.045 -0.122,0.073 0.414,0.636 -0.04,0.19 -0.214,0.124 -0.105,0.305 0.818,0.549 0.612,0.556 0.09,0.223 -0.413,0.165 -0.296,0.038 -0.627,-0.081 -0.344,-0.117 -0.095,0.125 0.355,0.292 0.138,0.196 0.107,0.273 0.062,0.257 0.018,0.24 -0.291,0.197 -0.35,0.552 -0.137,0.57 -0.316,0.054 -0.128,-0.107 -0.426,0.173 -0.562,-0.238 -0.201,-0.26 -0.612,-1.076 -0.016,0.121 0.153,0.544 -0.031,0.322 -0.648,0.233 0.002,0.091 0.398,0.169 0.482,0.131 -0.075,0.499 0.002,2.11 -0.108,0.743 -0.236,0.647 -0.339,0.617 -0.366,-0.404 -0.147,-0.414 -0.123,-0.212 -0.175,-0.173 -0.227,-0.082 -0.239,-0.003 -0.254,0.371 -0.277,-0.32 -0.267,-0.388 0.101,-1.019 0.113,-0.512 -0.045,0.003 -0.152,0.243 -0.365,0.748 -0.239,0.909 -0.309,-0.349 -0.279,-0.436 -0.23,-0.438 -0.373,-0.507 -0.361,-0.598 -0.189,-0.706 -0.088,-0.146 -0.21,-0.591 -0.083,-0.169 -0.073,-0.057 -0.18,-0.37 0.066,-0.397 0.284,-0.47 0.258,-0.338 0.429,-0.334 0.501,-0.188 0.228,-0.433 0.279,-0.791 0.306,-0.553 0.333,-0.313 -0.166,-0.059 -0.423,0.269 -0.297,0.391 -0.354,0.649 -0.329,0.413 -0.844,0.479 -0.31,0.096 -0.359,0.051 -0.792,-0.067 -0.183,-0.161 0.095,-0.458 0.564,-0.82 -0.09,-0.058 -0.198,0.291 -0.272,0.201 -0.236,0.103 -0.347,-0.037 -0.407,-0.511 -0.193,-0.158 -0.398,-0.177 -0.162,-0.176 -0.661,-1.264 -0.133,-0.337 -0.078,-0.333 -0.212,-0.279 -0.347,-0.228 -0.08,0.038 0.125,0.285 0.004,0.245 -0.303,0.153 -0.316,-0.053 -0.331,-0.259 -0.029,0.348 0.354,0.616 0.005,0.777 -0.1,0.08 -0.241,0.045 -0.162,-0.096 -0.536,-0.58 -0.508,-0.405 -0.358,-0.225 -0.042,0.16 0.232,0.701 0.27,0.689 0.441,0.566 0.703,0.672 0.319,0.386 -0.251,0.543 -0.219,0.177 -0.135,0.056 -0.427,0 -0.778,-0.3 -0.365,-0.335 -0.53,-0.802 -0.877,-0.83 -0.19,0.005 -0.621,0.337 0.097,0.054 0.4,0.024 0.293,0.108 0.702,0.653 0.053,0.276 -0.175,0.306 0.011,0.386 0.197,0.464 0.201,0.296 0.412,0.208 0.208,0.028 0.078,0.134 -0.247,1.026 -0.021,0.279 0.071,0.116 0.086,0.009 0.53,-0.419 0.222,-0.103 0.192,-0.021 0.223,0.118 0.254,0.257 0.15,0.264 0.045,0.272 0.076,0.178 0.521,0.287 -0.048,0.134 -0.536,0.43 -0.029,0.067 0.107,0.031 0.339,0.256 0.312,0.4 0.19,0.475 0.039,0.233 -0.002,0.222 0.043,0.132 0.165,0.023 0.067,-0.084 0.076,0.016 0.083,0.116 0.087,0.362 0.188,1.057 0.099,0.296 0.057,0.01 0.03,-1.058 0.087,-0.176 0.33,0.188 0.484,0.413 0.341,0.366 0.04,0.171 -0.258,0.332 0.055,0.147 0.189,0.216 0.174,-0.082 0.126,-0.37 0.217,-0.365 0.257,-0.259 0.479,0.213 0.396,0.545 0.06,0.187 0.259,0.235 0.228,-0.131 0.441,0.622 -0.209,0.281 -0.459,0.408 -0.046,0.138 0.11,-0.031 0.874,0 0.236,0.163 0.056,0.312 -0.388,0.865 -0.356,-0.077 -0.471,-0.021 -0.242,0.046 0.038,0.112 0.652,0.397 0.185,0.326 0.25,0.333 0.121,0.274 -0.003,0.126 -0.103,0.189 0.049,0.063 0.447,0.124 0.277,-0.111 0.348,-0.042 0.307,0.031 0.024,0.118 -0.046,0.311 -0.314,0.287 0.084,0.067 0.369,-0.082 0.169,0.134 0.219,0.68 0.246,0.532 -0.2,0.122 -0.223,0.046 0.032,0.676 0.145,0.69 10e-4,0.659 -0.046,0.584 -0.204,0.129 -0.218,-0.013 -0.087,-0.146 -0.535,-1.752 -0.132,-0.318 -0.158,-0.278 -0.567,-0.765 0.022,0.123 0.141,0.353 0.125,0.525 0.163,1.042 0.074,0.668 -0.033,0.253 -0.116,0.062 -0.031,0.121 0.055,0.18 0.434,0.677 0.209,0.406 0.148,0.421 0.138,0.284 0.128,0.147 -0.032,0.121 -0.191,0.093 -0.328,0.045 -0.153,-0.057 -0.588,-0.389 -0.084,0.122 0.326,1.418 -0.01,0.337 -0.164,0.12 -0.202,-0.14 -0.24,-0.401 -0.367,-0.447 -0.494,-0.495 -0.471,-0.388 -0.111,0.01 -0.072,0.115 -0.079,0.019 -0.085,-0.077 -0.158,-0.292 -0.165,-0.199 -0.688,-0.659 -0.071,-0.007 0.065,0.198 0.07,0.433 -0.078,0.094 -0.18,-0.035 -0.342,-0.189 -0.23,-0.433 -0.292,-0.755 -0.153,-0.286 -0.014,0.186 0.081,0.719 -0.016,0.241 -0.171,0.065 -0.073,-0.066 -0.071,-0.191 -0.069,-0.317 -0.164,-0.242 -0.257,-0.165 -0.145,-0.174 -0.071,-0.309 -0.05,-0.071 -0.455,0.072 -0.228,-0.223 -0.657,-0.881 -0.602,-0.96 -0.379,-0.51 -0.137,-0.121 0.201,0.624 0.222,0.917 0.056,0.417 -0.102,0.019 -0.222,-0.185 -1.139,-1.182 -0.702,-0.559 -0.39,-0.099 -0.635,-0.068 -0.146,0.308 0.342,0.682 0.333,0.513 0.324,0.344 0.509,0.668 0.465,0.857 0.188,0.263 0.634,0.364 0.331,0.097 0.341,0.028 0.031,0.129 -0.165,0.241 -0.037,0.148 0.754,0.378 0.285,0.21 0.275,0.348 0.157,0.086 0.654,0.874 0.163,0.139 0.583,0.283 0.194,0.181 0.321,0.56 0.202,0.285 0.285,0.673 0.213,0.297 0.522,0.339 0.223,0.097 0.1,0.128 -0.068,0.304 -0.063,0.127 -0.298,0.208 0.047,0.29 0.168,0.516 -0.007,0.319 -0.182,0.124 -0.373,0.147 -0.188,-0.012 -0.283,-0.122 -0.355,-0.208 -0.707,-0.519 -1.061,-0.36 -0.396,-0.193 -0.132,-0.174 -0.2,-0.103 -2.634,-0.504 -0.441,-0.124 -0.274,-0.154 -0.254,-0.228 -1.005,-0.521 -0.122,-0.114 -0.675,-0.897 -0.502,-1.054 -0.167,-0.142 -0.546,-0.139 -0.456,0.088 -0.306,0.116 -0.464,-0.038 -0.303,-0.172 -0.638,-0.477 -0.646,-0.254 -0.563,-0.418 -0.291,-0.148 0.027,-0.107 0.421,-0.625 -0.131,0.009 -0.732,0.476 -0.263,-0.146 -0.432,-0.374 -0.325,-0.377 -0.669,-1.047 -0.384,-0.381 0.054,-0.086 0.432,-0.035 0.344,0.033 0.231,-0.087 0.445,-0.428 0.192,-0.27 0.019,-0.159 -0.372,-0.04 -0.08,-0.077 -0.066,-0.176 -0.171,-0.226 -0.277,-0.275 -0.315,-0.119 -1.082,0.102 -0.188,-0.121 0.004,-0.184 0.211,-0.519 0.115,-0.209 0.037,-0.116 -0.042,-0.022 -0.146,0.013 -0.627,0.466 -0.136,-0.034 -0.246,-0.492 -0.149,-0.563 -0.109,-0.198 -0.145,-0.067 -0.515,-0.556 -0.733,-1.061 -0.27,-0.333 -0.3,-0.299 -0.217,-0.127 0.031,-0.157 0.464,-0.89 0.019,-0.146 -0.398,0.055 -0.6,-0.185 -0.285,0.224 -0.181,0.013 -0.211,-0.125 -0.119,0.047 -0.112,0.731 -0.086,0.183 -0.125,0.098 -0.11,-0.013 -0.095,-0.124 0.002,-0.17 -0.091,-0.899 -0.209,-0.133 -0.591,-0.035 -0.127,-0.073 -0.144,-0.167 -0.123,-0.31 -0.102,-0.452 -0.117,-0.249 -0.132,-0.044 -0.106,0.037 -0.08,0.117 -0.184,0.073 -0.289,0.028 -0.009,0.174 0.271,0.32 0.262,0.456 0.252,0.59 -0.153,0.395 -0.559,0.201 -0.487,0.059 -0.415,-0.083 -0.318,-0.137 -0.447,-0.328 -0.638,0.107 -0.145,0.861 -0.136,0.047 -0.608,-0.022 -0.242,0.076 -0.811,0.474 -0.247,0.066 -0.188,-0.056 -0.182,0.114 -0.273,0.271 -0.371,0.028 -0.47,-0.214 -0.399,-0.092 -0.328,0.03 -0.338,-0.126 -0.348,-0.284 -0.283,-0.127 -0.373,0.021 -0.086,-0.045 -0.544,-0.61 -0.169,-0.249 -0.363,-0.773 -0.064,-0.307 -0.01,-0.329 0.032,-0.243 0.126,-0.368 0.138,-0.868 0.113,-0.289 0.17,-0.263 0.333,-0.334 1.203,-0.59 0.243,-0.234 -0.008,-0.155 -0.274,-0.726 0.003,-0.187 0.092,-0.109 0.195,-0.426 0.088,-0.119 0.212,-0.066 0.441,0.216 0.38,0.087 0.504,0.028 0.834,0.297 1.164,0.565 0.669,0.392 0.506,0.576 0.36,0.564 0.051,0.285 -0.167,0.438 -0.084,0.128 0.005,0.15 0.094,0.17 0.291,0.248 0.07,-0.094 -0.022,-0.297 0.061,-0.25 0.143,-0.202 0.016,-0.263 -0.111,-0.324 -0.138,-0.28 -0.166,-0.236 -0.752,-0.814 -0.072,-0.271 0.252,-0.122 1.1,0.274 0.422,-0.061 0.16,-0.319 0.173,-0.218 0.185,-0.118 0.37,-0.051 0.518,0.149 0.254,0.022 0.225,-0.054 0.292,-0.174 0.432,-0.583 0.276,-0.132 0.418,-0.092 0.313,-0.013 0.568,0.233 0.35,-0.006 -0.028,-0.39 -0.232,-0.749 -0.289,-0.773 -0.224,-0.263 -0.581,-0.493 -0.683,-0.933 -0.35,-0.582 -0.092,-0.292 0.049,-0.194 0.116,-0.285 1.238,-1.045 0.981,-1.044 0.43,-0.537 0.207,-0.375 0.215,-0.273 0.224,-0.172 0.471,-0.206 0.135,-0.264 0.029,-0.449 0.079,-0.391 0.443,-1.055 0.34,-0.287 0.513,-0.199 0.337,-0.255 0.407,-0.875 -0.04,-0.218 -0.188,-0.166 -0.146,-0.252 -0.627,-2.321 -0.418,-1.132 -0.501,-0.992 -0.448,-1.215 -0.743,-1.205 -0.009,-0.321 0.132,-0.364 -0.063,-0.083 -0.767,0.532 -0.181,0.024 -0.294,-0.231 -0.199,-0.289 -0.166,-0.506 0.017,-0.265 0.109,-0.251 0.146,-0.621 0.005,-0.317 -0.05,-0.303 -0.066,-0.211 -0.083,-0.119 -0.234,-0.074 -0.387,-0.03 -0.126,0.108 0.426,0.94 -0.065,0.231 -0.543,0.101 -0.245,-0.044 -0.224,-0.114 -0.203,-0.184 -0.633,-0.982 -0.134,-0.371 0.042,-0.27 -0.054,-0.14 -0.129,0.09 -0.175,0.006 -0.238,-0.095 -0.049,-0.116 0.444,-0.536 0.025,-0.166 -0.205,-0.177 -0.306,-0.036 -0.082,-0.159 0.104,-0.17 0.415,-0.295 0.147,-0.195 -0.249,-0.147 -0.139,-0.013 -0.279,0.323 -0.42,0.657 -0.306,0.243 -0.419,-0.304 -0.264,-0.101 -0.185,0.066 -0.282,0.507 -0.615,0.37 -1.102,0.869 -0.473,0.276 -0.51,-0.049 -0.097,-0.175 0.009,-0.298 0.035,-0.246 0.062,-0.192 0.02,-0.236 -0.037,-0.996 0.085,-0.274 0.174,-0.164 0.321,-0.172 0.819,0.206 0.38,-0.037 0.267,-0.231 0.267,-0.335 0.268,-0.44 0.057,-0.424 -0.284,-0.688 -0.107,-0.152 -0.728,-0.539 -0.402,-0.196 -0.355,-0.085 -0.257,-0.155 -0.16,-0.227 -0.155,-0.377 -0.013,-0.258 0.025,-0.339 0.148,-0.234 0.651,-0.27 -0.008,-0.07 -0.532,-0.199 -0.251,0.023 -0.215,0.223 -0.271,0.523 -0.157,0.147 -0.486,-0.308 -0.292,-0.045 -0.197,-0.147 -0.109,-0.142 0.066,-0.146 0.242,-0.148 0.421,-0.454 0.028,-0.245 -0.291,-0.401 -0.151,-0.092 -0.607,-0.15 -0.735,0.149 -0.273,-0.076 -0.123,-0.447 -0.078,-0.534 -0.033,-0.622 -0.133,-1.065 -0.146,-0.561 -0.192,-0.071 -0.882,0.232 -0.209,0.003 -0.147,-0.07 -0.583,-0.718 -0.236,-0.255 -0.131,-0.06 -0.424,-0.769 -0.163,-0.15 -0.194,-0.38 -0.224,-0.613 -0.243,-0.188 -0.262,0.239 -0.262,0.342 -0.262,0.444 -0.142,0.374 -0.022,0.306 0.163,0.237 0.926,0.393 0.235,0.262 0.199,0.431 0.149,0.524 0.098,0.619 -0.008,0.46 -0.115,0.305 -0.199,0.27 -0.57,0.427 -0.591,0.25 -0.595,0.059 -0.282,-0.058 -1.533,-0.828 -0.276,-0.006 -0.354,-0.112 -0.796,-0.342 -0.436,-0.038 -0.765,-0.284 -1.294,-0.166 -0.259,0.137 0.344,0.383 0.302,0.192 0.259,0.002 0.373,0.341 0.486,0.677 0.277,0.403 0.23,0.479 0.007,0.165 -0.229,0.328 -1.804,-1.723 -1.104,0.604 -0.508,0.224 -0.435,0.035 -0.544,-0.237 -1.228,-0.834 -0.465,-0.292 -0.165,-0.042 -1.069,0.363 -0.921,0.017 -1.86,-0.348 -0.683,-0.233 -0.18,-0.244 -0.224,-0.123 -0.408,0 -1.066,-0.273 -0.976,0.615 -1.173,-0.563 -0.348,-0.333 -0.111,-0.228 -0.341,-0.958 -0.047,-0.515 0.097,-0.466 0.096,-0.32 0.096,-0.174 -0.639,0.536 -0.224,0.088 -0.295,0.021 -0.879,-0.198 -0.139,0.102 0.045,0.187 0.23,0.273 0.03,0.164 -0.49,0.128 -0.743,-0.133 -0.324,0.058 -0.147,0.075 -0.335,0.429 -0.136,0.097 -0.176,-0.044 -0.779,-0.972 -0.628,-0.618 -0.732,-0.238 -0.336,-0.198 -0.184,-0.239 -1.01,-2.004 -0.138,-0.435 -0.32,-1.589 -0.107,-0.341 -0.13,-0.225 0.254,-0.047 0.955,0.195 0.925,-0.009 0.502,0.13 0.583,0.398 0.759,0.284 0.544,0.06 0.871,-0.105 0.99,-0.266 0.117,-0.207 -0.642,-0.356 -0.571,-0.473 -0.528,-0.616 -0.314,-0.261 -0.528,-0.163 -1.484,-0.114 -1.375,-0.416 -0.95,-0.563 -0.773,-0.626 -0.314,-0.342 -0.113,-0.264 -0.12,-0.828 -0.127,-1.399 -0.123,-0.946 -0.118,-0.484 -0.016,-0.425 0.263,-0.91 0.751,-0.995 0.019,-0.156 -0.149,-0.046 -0.315,-0.254 -0.101,-0.373 -0.041,-0.592 -0.002,-0.504 0.035,-0.415 0.125,-0.519 0.324,-0.937 0.463,-1.144 0.502,-1.081 0.086,-0.355 0.044,-0.967 0.066,-0.708 0.069,-0.5 0.106,-0.376 0.31,-0.717 0.387,-0.683 0.606,-0.584 0.051,-0.217 0.008,-0.3 0.035,-0.225 0.062,-0.148 1.502,-1.896 0.684,-0.777 0.58,-0.495 0.694,-0.366 1.975,-0.75 1.017,-0.209 1.279,0.046 2.358,0.423 0.284,0.297 0.072,0.149 0.103,0.421 -0.078,0.269 -0.645,0.909 -0.812,0.752 -0.528,0.654 -0.894,1.461 -0.241,0.51 -1.108,2.896 -0.262,0.475 -0.154,0.379 -0.107,1.028 0.032,0.364 0.173,0.593 0.602,1.28 0.162,0.595 -0.004,0.545 -0.067,1.293 -0.008,0.652 0.027,0.624 0.124,0.888 0.221,1.147 0.512,1.153 0.803,1.158 0.598,0.763 0.589,0.56 0.697,0.826 0.155,0.397 -0.321,0.437 -0.751,0.669 -0.987,0.286 -0.528,0.272 -0.657,0.579 -0.824,0.461 -0.328,0.266 z m 19.791,-24.477 0.479,0.131 3.032,-0.244 0.628,0.182 1.91,1.102 0.493,0.367 0.243,0.484 0.22,0.761 0.102,0.167 0.692,0.451 0.285,0.544 0.1,0.281 0.146,0.641 0.313,0.362 0.357,0.206 0.117,0.188 -0.056,0.799 0.152,0.371 0.337,0.447 0.126,0.298 -0.262,0.363 -0.609,0.213 -1.72,-0.222 -2.308,-0.503 -1.342,0.143 -0.673,0.23 -1.628,0.817 -0.52,0.132 -0.508,0.017 -0.899,-0.667 -0.326,-0.354 -0.108,-0.275 -0.214,-0.808 -0.176,-0.973 -0.09,-0.803 -0.104,-0.615 -0.307,-0.204 -0.913,-0.246 -0.306,-0.337 -0.139,-0.281 -0.134,-0.456 0.003,-0.474 0.07,-0.419 0.059,-0.103 0.115,-0.011 -0.256,-0.51 -0.088,-0.563 -0.006,-0.788 0.033,-0.506 0.073,-0.223 0.169,-0.144 0.396,-0.096 0.587,0.019 0.82,0.584 0.648,0.056 0.987,0.469 z m -72.271,7.166 -0.142,0.048 -0.266,-0.221 -0.39,-0.491 -0.637,-1 -0.76,-0.997 -0.117,-0.6 -0.189,-0.449 -0.97,-1.071 -0.63,-0.436 -0.48,-0.218 -0.079,-0.301 0.333,-0.879 0.382,-0.705 0.227,-0.256 0.707,-0.23 2.385,-0.473 0.545,-0.014 0.571,0.228 0.785,0.97 0.327,0.11 0.195,0.217 0.172,0.361 0.091,0.367 0.008,0.746 -0.086,1.097 -0.109,0.418 -0.475,1.396 -0.499,0.763 -0.095,0.492 -0.202,0.389 -0.354,0.476 -0.248,0.263 z m -25.912,3.094 0.178,0.118 0.325,-0.098 0.472,-0.313 0.608,-0.258 0.745,-0.201 0.197,0.245 0.124,-0.05 0.219,-0.398 0.039,-0.263 -0.027,-0.297 0.013,-0.648 0.117,-0.392 0.442,-0.826 0.237,-0.299 0.377,-0.137 0.898,0.089 0.842,0.473 1.138,0.463 1.664,1.161 0.521,0.493 0.054,0.426 -0.295,0.906 -0.717,1.273 -0.576,0.458 -0.222,0.28 0.375,0.192 0.243,0.325 0.369,-0.469 0.27,-0.526 0.382,-0.438 0.13,-0.039 0.032,0.093 -0.066,0.225 -0.029,0.22 0.01,0.215 0.044,0.13 0.234,0.067 0.126,-0.081 0.507,-0.618 0.498,-0.95 0.755,-0.616 0.206,-0.315 0.657,-0.263 -0.008,-0.186 0.03,-0.735 -0.23,-0.314 -0.771,-0.659 -0.381,-0.793 0.08,-0.61 0.425,0.089 1.164,0.065 0.242,0.082 1.118,1.032 0.396,0.64 0.314,0.316 0.66,0.46 0.222,0.373 0.156,0.151 0.054,0.157 -0.048,0.163 -0.025,0.383 0.123,0.123 0.429,0.144 0.12,0.154 0.159,0.484 0.198,0.812 0.172,0.876 0.272,1.641 0.542,2.166 0.185,1.342 0.063,0.245 0.122,0.168 0.348,0.245 0.268,0.346 0.315,0.111 0.077,-0.031 0.079,-0.297 0.197,-0.474 0.955,-0.924 0.05,-0.144 -0.113,-0.213 -0.035,-0.146 0.014,-0.099 0.199,-0.077 -0.665,-1.184 -0.43,-1.13 -0.276,-1.409 -0.042,-0.414 -0.041,-0.884 -0.09,-0.233 -0.152,-0.214 -0.063,-0.276 0.024,-0.339 -0.03,-0.291 -0.176,-0.61 -0.677,-4.317 0.002,-0.426 0.093,-0.321 0.241,-0.184 0.388,-0.045 0.123,-0.101 -0.143,-0.155 -0.254,-0.47 -0.033,-0.217 0.169,-0.44 0.867,0.193 0.628,0.396 1.074,0.937 0.109,-0.051 0.118,-0.466 0.229,-0.299 0.344,0.098 0.972,0.678 1.124,1.202 0.754,0.589 0.529,0.796 0.36,0.749 0.227,0.576 0.01,0.224 -0.052,0.23 0.053,0.299 0.159,0.368 0.088,0.329 0.072,0.697 0.143,0.904 0.036,0.451 0.999,3.992 0.191,0.695 0.122,0.321 0.698,1.51 0.372,1.089 0.036,0.725 0.05,0.208 0.016,0.332 -0.018,0.456 -0.082,0.391 -0.146,0.327 -0.141,0.457 -0.213,1.005 -0.018,0.246 0.153,0.344 0.977,1.181 0.599,1.406 0.281,0.246 0.754,0.873 0.813,0.493 0.274,0.212 0.259,0.312 0.078,0.012 0.157,-0.059 0.045,-0.085 0.011,-0.126 -0.229,-0.659 -0.016,-0.259 0.109,-0.045 0.839,1.124 0.453,0.445 0.619,0.466 1.063,1.069 0.148,0.087 0.575,-0.098 0.157,0.067 0.099,0.105 0.041,0.143 0.023,0.629 0.157,0.309 0.907,-0.132 0.254,0.027 0.162,0.099 0.135,0.205 0.195,0.669 0.18,1.311 0.009,0.467 -0.083,0.782 -0.132,0.287 -0.172,0.09 -0.484,-0.088 -0.34,-0.248 -0.176,-0.316 -0.159,-0.687 -0.076,-0.133 -0.069,0.139 -0.159,0.629 -0.104,0.278 -0.127,0.184 -0.241,-0.045 -0.355,-0.274 -0.667,-0.702 -0.236,-0.174 -0.146,0.03 -0.319,0.238 -0.492,0.445 -0.203,0.326 0.086,0.208 0.057,0.261 0.028,0.314 -0.017,0.231 -0.063,0.149 -0.163,0.177 -0.344,0.03 -0.495,-0.136 -0.391,-0.241 -0.685,-0.642 -0.157,-0.089 -0.212,0.143 -0.084,0.187 0.131,0.267 0.348,0.345 0.425,0.571 0.114,0.111 0.109,-0.013 0.039,0.105 0.048,0.306 -0.022,0.525 -0.205,1.044 -0.021,0.248 0.084,-0.059 0.579,-1.025 0.299,-0.288 0.648,-0.454 0.28,-0.334 0.829,-0.091 0.296,0.183 0.19,0.317 0.007,0.144 -0.217,0.371 -0.04,0.186 -0.011,0.234 0.02,0.209 0.05,0.186 0.149,0.171 0.264,-0.075 0.074,0.043 0.141,0.181 0.093,0.28 0.004,0.389 -0.194,0.851 -0.347,0.277 -1.062,0.513 -0.364,0.264 -0.701,0.187 -0.271,0.247 -0.169,0.075 -0.75,-0.04 -0.858,0.156 -0.988,-0.306 -0.693,-0.136 -0.801,-0.488 -0.302,0.123 -0.312,0.313 -1.5,-0.376 -0.178,-0.273 0.059,-0.178 0.355,-0.583 0.023,-0.122 -0.017,-0.104 -0.681,-0.1 -0.76,-0.312 -0.763,-0.155 -0.571,0.044 -0.372,-0.114 -0.363,-0.257 -0.199,-0.235 -0.036,-0.212 -0.005,-0.233 0.032,-0.468 -0.048,-0.33 -0.165,-0.261 -0.336,-0.234 -0.334,0.028 -0.283,0.259 -0.269,0.476 -0.499,1.319 -0.25,0.224 -0.648,0.948 -0.243,0.231 -1.188,0.374 -1.408,0.153 -0.526,0.291 -0.5,0.544 -0.604,0.524 -1.477,0.642 -1.365,0.357 -1.428,0.156 -1.068,0.243 -0.307,-0.122 -0.478,0.045 -0.515,0.355 -0.581,0.069 -2.208,0.129 -1.014,0.237 -0.556,0.063 -0.436,-0.032 -0.304,-0.098 -0.291,-0.315 -0.299,-0.486 -0.608,-1.302 -0.174,-0.55 0.068,-0.946 -0.045,-0.55 -0.202,-1.193 -0.038,-0.103 -1.064,-0.445 -0.7,-0.141 -1.056,-0.029 -1.291,0.063 -1.289,-0.144 -0.681,-0.163 -0.676,-0.267 -1.156,-0.696 -0.065,-0.071 -0.09,-0.233 -0.114,-0.395 -0.288,-0.515 -0.788,-1.154 -0.312,-0.688 -0.051,-0.175 -0.075,-0.507 -0.099,-0.841 -0.032,-0.517 0.092,-0.316 0.077,-0.063 1.632,-0.618 2.876,-0.68 2.629,-0.46 1.194,0.041 0.703,0.216 0.705,0.098 1.276,0.049 1.607,0.32 0.323,-0.027 0.721,-0.217 0.214,-0.174 1.139,0.022 0.221,-0.107 0.203,-0.192 -0.262,-0.36 -1.09,-0.792 -2.895,-1.426 -0.706,-0.305 -1.011,-0.325 -0.586,-0.047 -0.747,0.186 -0.278,-0.008 -0.733,0.279 -0.696,0.177 -1.32,0.171 -1.908,0.125 -0.267,-0.037 -0.392,-0.217 -0.285,-0.062 -1.867,0.17 -1.668,-0.219 -1.9,-2.203 -0.315,-0.681 0.067,-0.278 0.234,-0.299 0.941,-0.864 0.336,-0.207 1.404,-0.466 1.399,-0.566 1.105,-0.534 0.542,-0.186 0.522,-0.022 0.422,-0.177 -0.086,-0.169 -0.345,-0.194 0.004,-0.275 0.179,-0.132 0.691,-0.14 0.735,0.17 0.367,-0.058 0.105,-0.188 -0.098,-0.151 -0.697,-0.314 -3.35,0.903 -1.563,0.084 -1.084,0.387 -0.596,-0.012 -0.709,-0.386 -0.095,-0.116 -0.013,-0.159 0.219,-0.518 0.758,-0.311 0.382,-0.876 -0.408,-0.015 -1.358,0.188 -0.593,-0.081 -0.801,-0.337 -0.235,-0.402 -0.1,-0.291 -0.017,-0.348 0.027,-0.992 0.068,-0.535 0.042,-0.121 0.996,-1.658 0.621,-0.348 0.436,-0.528 0.017,-0.221 -0.107,-0.223 -0.406,-0.541 -0.163,-0.275 -0.092,-0.264 0.069,-0.417 0.23,-0.572 0.678,-0.927 1.631,-1.874 0.829,-0.793 0.799,-0.43 1.118,-0.917 2.866,-1.533 2.565,-1.553 0.944,0.411 0.268,0.322 0.119,0.272 0.104,0.381 0.089,0.489 0.123,1.056 0.016,0.542 -0.021,0.542 -0.059,0.49 -0.097,0.437 -0.192,0.532 -0.288,0.625 -0.61,1.066 -0.065,0.309 z m 49.785,-3.253 -0.453,0.095 -0.418,-0.672 -0.014,-0.629 0.028,-0.348 0.052,-0.306 0.152,-0.262 0.428,-0.306 0.194,0.227 0.071,0.272 0.065,0.107 0.276,0.235 0.133,0.271 -0.014,0.311 -0.089,0.471 -0.099,0.302 -0.108,0.133 -0.204,0.099 z m 61.949,163.029 -0.15,0.019 -0.265,-0.019 -0.392,0.133 -0.514,0.28 -0.623,0.501 -1.097,1.082 -0.017,0.025 -0.02,-0.016 -0.074,0.019 -0.31,0.31 -0.324,0.173 -0.796,0.281 -0.188,0.126 -0.232,0.073 -0.276,0.021 -0.277,0.08 -0.279,0.139 -0.574,0.421 -0.14,0.012 -0.059,-0.078 0.02,-0.059 0.096,-0.104 0.351,-0.212 -0.048,-0.04 -0.106,0.045 -0.166,0.13 -0.064,-0.014 0.035,-0.158 -0.107,-0.032 -0.25,0.094 -0.156,0.021 -0.062,-0.052 -0.071,0 -0.081,0.051 -0.129,-0.01 -0.203,0.068 -0.418,0.144 -0.104,0.115 -0.004,0.039 0.393,-0.181 0.183,-0.059 0.135,-0.028 0.052,0.04 -0.048,0.092 -0.001,0.058 0.1,0.024 0.059,-0.024 0.005,-0.025 -0.049,-0.026 10e-4,-0.037 0.051,-0.046 0.438,-0.133 0.09,0.097 -0.095,0.267 0.041,0.129 0.175,-0.009 0.199,-0.069 0.223,-0.128 0.076,-0.002 -0.071,0.125 -0.117,0.115 -0.263,0.199 -0.056,0.137 0.004,0.036 0.082,-0.054 0.289,-0.033 0.111,0 -0.024,0.086 -0.155,0.051 -0.337,0.181 -0.271,0.064 -0.159,-0.037 -0.032,-0.092 0.096,-0.147 -0.014,-0.039 -0.217,0.101 -0.063,-0.004 -0.071,-0.092 0.012,-0.021 0.098,10e-4 0.046,-0.048 -0.184,-0.029 -0.27,0.068 -0.231,-0.033 -0.143,-0.108 -0.039,-0.067 0.067,-0.027 -0.015,-0.04 -0.097,-0.053 -0.276,-0.025 -0.076,0.044 -0.049,0.094 -0.288,-0.006 -0.145,0.065 -0.334,0.058 -0.523,0.052 -0.417,0.082 -0.312,0.112 -0.23,0.042 -0.149,-0.028 -0.248,0.037 -0.347,0.101 -0.549,0.081 -0.202,0.079 -0.294,0.214 -0.386,0.349 -0.262,0.171 -0.14,-0.006 -0.096,0.043 -0.053,0.093 -0.197,0.13 -0.077,0.102 -0.039,0.148 -0.13,0.233 -0.331,0.512 0.003,0.072 0.127,0.186 0.251,0.069 0.31,0.097 0.355,0.003 0.179,0.042 0.13,-0.038 0.219,-0.133 0.427,-0.156 0.006,0.019 -0.019,0.66 -0.02,0.05 0.085,0.113 0.023,0.076 -0.015,0.086 0.082,0.118 0.178,0.149 0.069,0.106 -0.04,0.063 -0.338,0.172 -0.182,0.018 -0.152,-0.058 -0.247,-0.029 -0.342,-10e-4 -0.583,0.102 -0.189,0.013 -0.104,-0.042 -0.135,0.012 -0.495,0.137 -0.496,0.077 -0.339,0.106 -0.184,0.137 -0.112,0.119 -0.109,0.092 -0.086,0.027 -0.156,0.237 0.015,0.035 0.22,-0.014 0.176,0.069 0.562,0.069 0.12,0.066 -0.089,0.03 -0.85,-0.118 -0.214,0.013 -0.403,-0.083 -0.591,-0.18 -0.595,-0.073 -0.599,0.033 -0.426,0.091 -0.254,0.147 -0.659,0.548 -0.222,0.296 -0.089,0.276 -0.073,0.14 -0.057,0.005 10e-4,-0.063 0.058,-0.13 -0.024,-0.026 -0.154,0.136 -0.024,0.039 -0.299,0.044 -0.325,0.13 -0.424,0.243 -0.282,0.208 -0.14,0.171 -0.079,0.2 -0.017,0.228 -0.044,0.045 -0.156,-0.255 -0.104,-0.095 -0.115,-0.045 -0.126,0.005 -0.403,0.146 -0.289,-0.035 -0.35,-0.165 -0.131,-0.078 -0.026,-0.184 0.036,-0.36 0.079,-0.228 -0.032,-0.017 0.042,-0.077 0.195,-0.119 0.381,-0.202 0.347,-0.41 0.278,-0.245 0.28,-0.253 0.16,-0.437 0.199,-1.061 0.295,-0.099 0.368,-0.16 0.261,-0.183 0.154,-0.203 0.166,-0.145 0.176,-0.085 0.177,-0.132 0.179,-0.18 0.126,-0.249 0.075,-0.318 0.021,-0.322 -0.032,-0.327 -0.005,-1.315 -0.038,-0.307 0.067,-0.273 0.172,-0.241 0.106,-0.234 0.039,-0.228 0.084,-0.191 0.129,-0.154 0.125,-0.1 0.121,-0.047 0.082,-0.094 0.043,-0.143 0.098,-0.178 0.152,-0.213 0.056,-0.185 -0.008,-0.286 0.007,-0.29 -0.061,-0.166 -0.115,-0.149 -0.048,-0.163 0.008,-0.262 -0.061,-0.026 -0.108,-0.013 -0.1,-0.109 -0.135,-0.263 -0.118,-0.172 -0.101,-0.081 -0.036,-0.081 -0.108,-0.092 -0.153,-0.055 -0.064,-0.082 0.024,-0.11 0.286,-0.042 0.549,0.025 0.29,0.027 0.032,0.03 -0.086,0.208 0.009,0.129 0.086,0.128 0.05,0.169 0.013,0.21 0.146,0.078 0.04,0.024 0.038,0.112 0.118,0.025 0.037,0.062 -0.045,0.098 0.021,0.039 0.167,0.017 0.118,-0.171 0.056,-0.041 0.11,-0.009 0.018,0.043 -0.074,0.096 -0.038,0.109 -0.001,0.121 -0.084,0.132 -0.256,0.238 -0.007,0.051 0.056,0.017 0.248,-0.145 0.164,-0.027 0.124,0.048 0.068,0.063 0.012,0.077 -0.028,0.194 -0.068,0.311 0.044,0.06 0.156,-0.191 0.18,-0.134 0.336,-0.105 0.058,0.022 0.159,0.325 0.372,0.239 0.658,0.268 0.396,0.079 0.134,-0.11 0.082,-0.213 0.029,-0.317 -0.067,-0.225 -0.162,-0.132 -0.081,-0.128 -10e-4,-0.123 0.122,-0.106 0.19,-0.087 0.189,-0.029 0.025,0.033 -0.042,0.123 0.029,0.042 0.094,0.014 0.042,0.042 0.139,0.121 0.307,0.027 0.111,-0.03 -0.086,-0.088 -0.014,-0.118 0.059,-0.148 -0.01,-0.064 -0.103,0.048 0,0.122 -0.047,0.065 -0.062,-0.015 -0.037,-0.138 -0.043,-0.121 -0.08,-0.203 -0.208,-0.08 -0.074,-0.07 -0.008,-0.106 -0.04,-0.063 -0.073,-0.02 -0.139,-0.198 -0.181,-0.148 0.007,-0.067 0.17,-0.039 0.045,-0.068 -0.025,-0.09 -0.095,-0.112 -0.072,-0.028 -0.048,0.057 -0.043,-0.017 -0.038,-0.089 0.027,-0.143 0.173,-0.166 0.024,-0.165 -0.044,-0.128 -0.097,-0.075 -0.149,-0.022 -0.088,0.009 -0.026,0.04 0.05,0.151 -0.027,0.019 -0.262,-0.065 -0.089,-0.091 -0.132,-0.064 -0.099,-0.236 -0.02,-0.168 0.009,-0.292 -0.072,-0.185 -0.043,-0.021 0.007,0.11 -0.048,0.055 -0.116,0.029 -0.071,-0.051 -0.025,-0.131 -0.072,-0.11 -0.132,-0.128 -0.102,-0.181 -0.034,-0.081 -0.006,-0.08 -0.036,-0.093 -0.113,-0.103 -0.047,-0.171 -0.051,-0.075 -0.154,-0.168 -0.052,-0.094 -0.035,-0.035 -0.204,0 -0.218,-0.003 -0.362,0.041 -0.177,-0.053 0.008,-0.148 -0.013,-0.082 -0.033,-0.016 -0.049,0.04 -0.016,0.061 -0.112,0.068 -0.187,0 -0.41,-0.082 -0.149,0.006 -0.265,0.106 -0.085,-0.046 0.09,-0.074 -0.006,-0.063 -0.074,-0.019 -0.016,-0.035 -0.03,-0.059 0.277,-0.14 -0.008,-0.063 -0.199,-0.117 -0.086,0.017 -0.043,0.09 -0.076,0.057 -0.108,0.023 -0.065,0.063 -0.042,-0.002 -0.001,-0.055 -0.01,-0.133 -0.133,-0.042 -0.548,-0.056 -0.292,-0.012 -0.225,-0.009 -0.342,-0.117 -0.091,-0.123 -0.695,0.065 -0.113,0.019 -0.072,-0.014 -0.156,-0.126 -0.493,0.076 -0.367,0.029 -1.217,-0.228 -0.316,-0.093 -0.059,-0.07 -0.19,-0.048 -0.511,-0.049 -0.057,-0.018 -0.052,-0.108 -0.147,-0.037 -0.279,-0.007 -0.164,-0.069 -0.047,-0.131 0.007,-0.151 0.063,-0.171 -0.009,-0.14 -0.087,-0.132 -0.132,-0.094 -0.197,0.023 -0.304,0.104 -0.248,0.037 -0.074,0.074 -0.047,0.061 -0.07,0.023 -0.19,-0.244 0,-0.135 0.059,-0.095 0.229,-0.302 0.078,-0.2 -0.073,-0.098 -0.067,0.014 -0.063,0.125 -0.048,0.063 -0.035,0 -0.059,-0.133 0.021,-0.309 0.072,-0.116 0.121,-0.056 0.215,0.017 0.072,-0.04 0.041,-0.109 -0.049,-0.105 -0.14,-0.102 -0.149,-0.055 -0.159,-0.007 -0.105,0.035 -0.052,0.077 -0.069,-0.016 -0.086,-0.109 -0.266,-0.133 -0.069,-0.093 0.01,-0.134 0.167,-0.342 -0.021,-0.091 0.088,-0.202 0.196,-0.313 0.067,-0.219 -0.062,-0.124 -0.069,-0.069 -0.077,-0.015 -0.07,-0.082 -0.063,-0.149 -0.156,-0.145 -0.25,-0.14 -0.212,-0.184 -0.173,-0.228 -0.047,-0.183 0.08,-0.137 0.031,-0.109 -0.018,-0.082 0.057,-0.117 0.108,-0.195 0.006,-0.147 0.014,-0.114 0.134,-0.172 0.056,-0.132 -0.021,-0.091 -0.305,-0.043 -0.59,0.005 -0.473,0.036 -0.356,0.067 -0.407,-0.028 -0.458,-0.123 -0.382,-0.249 -0.305,-0.374 -0.229,-0.383 -0.154,-0.394 -0.062,-0.343 -0.029,-0.085 -0.068,-0.073 -0.062,-0.201 -0.055,-0.329 -0.072,-0.209 -0.089,-0.089 -0.03,-0.074 -0.129,-0.216 -0.054,-0.113 -0.017,-0.073 -0.102,-0.114 -0.075,-0.029 -0.341,0.05 -0.114,-0.104 -0.06,-0.073 -0.14,-0.057 -0.166,0.031 -0.192,0.119 -0.19,10e-4 -0.339,-0.07 -0.214,0.042 -0.39,0.013 -0.247,-0.1 -0.269,-0.15 -0.159,-0.031 -0.15,0.015 -0.098,-0.042 -0.044,-0.097 -0.067,-0.03 -0.263,-0.09 -0.212,-0.088 -0.574,-0.165 -0.16,-0.17 -0.133,-0.012 -0.164,0.014 -0.091,0.071 -0.112,0.018 -0.132,-0.035 -0.045,0.051 0.042,0.136 0.006,0.106 0.063,0.212 0.216,0.197 0.108,0.19 -0.001,0.183 -0.082,0.212 -0.266,0.365 -0.042,0.004 -0.217,0.049 -0.122,0.093 -0.087,0.021 -0.052,-0.05 -0.071,0.038 -0.091,0.125 -0.038,0.102 0.014,0.078 -0.046,0.089 -0.106,0.1 -0.058,-0.014 -0.028,-0.114 -0.042,-0.079 0.05,-0.15 0.485,-0.54 0.169,-0.226 0.03,-0.125 -0.018,-0.158 -0.065,-0.191 -0.121,-0.103 -0.175,-0.013 -0.126,0.063 -0.091,0.201 -0.02,0.138 -0.027,0.294 0.006,0.108 -0.044,0.078 -0.103,0.042 -0.065,0.132 -0.027,0.223 -0.054,0.125 -0.082,0.027 -0.063,0.144 -0.045,0.259 -0.035,0.128 -0.136,0.066 -0.296,0.131 -0.125,0.008 0.048,-0.115 0.053,-0.065 0.058,-0.014 0.163,-0.527 0.153,-0.278 -0.03,-0.045 -0.875,0.361 -0.321,0.198 -0.068,0.14 -0.012,0.149 0.043,0.157 -0.021,0.144 -0.086,0.13 -0.125,0.317 -0.051,0.19 -0.085,0.158 -0.261,0.094 -0.031,0.027 -0.274,0.332 -0.084,0.047 -0.555,-0.057 -0.353,0.083 -0.26,-0.083 -0.13,-0.263 -0.146,-0.167 -0.641,0.079 -0.805,-0.056 -0.386,0.033 -0.148,-0.111 -0.121,-0.291 -0.212,-0.037 -0.358,0.065 -0.497,0.374 -0.467,0.193 -0.368,0.001 -0.362,-0.194 -0.592,-0.39 -0.412,-0.438 -0.468,-0.154 -0.356,0.04 -0.14,0.22 -0.186,0 -0.13,-0.375 -0.112,-0.293 -0.232,-0.125 -0.419,-0.282 -0.292,-0.152 -0.448,-0.186 -0.155,-0.034 -0.291,-0.023 -0.289,-0.015 -0.336,0.052 0.003,-0.003 -0.013,0.004 0.01,-10e-4 -0.241,0.234 -0.282,0.103 -0.403,0.048 -0.269,-0.099 -0.135,-0.247 -0.571,-0.219 -1.007,-0.191 -0.58,-0.163 -0.153,-0.135 -0.083,-0.145 -0.021,-0.232 -0.001,-0.001 -0.254,-0.595 -0.11,-0.496 -0.05,-0.597 0.017,-0.197 -0.058,-0.062 -0.181,-0.13 -0.606,-0.087 -0.008,0.714 -0.011,0.903 -0.662,-0.006 -1.196,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.198,0 -1.196,0 -1.197,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -1.197,0 -1.196,0 -1.197,0 -0.288,0 -0.106,-0.151 -0.273,-0.198 -0.108,0 -0.111,0.059 -0.07,0.096 -0.062,0.194 -0.04,0.065 -0.04,-0.011 -0.025,-0.055 -0.088,-0.27 0.023,-0.121 0.09,-0.145 -0.006,-0.052 -0.198,0.041 -0.089,-0.037 -0.041,-0.078 0.015,-0.308 -0.107,-0.175 0.127,-0.074 0.328,-0.059 0.335,-0.007 0.097,-0.128 0.095,-0.326 -0.239,0.299 -0.144,0.031 -0.445,-0.112 -0.288,0.018 -0.039,-0.066 0.012,-0.067 0.063,-0.066 0.046,-0.226 0.069,-0.636 0.09,-0.232 0.031,-0.126 -0.022,-0.029 -0.386,0.443 -0.033,0.14 0.04,0.122 -0.037,0.249 -0.178,0.075 -0.106,-0.041 -0.2,0.21 -0.063,0.022 -0.921,-0.368 -0.093,-0.051 -0.159,-0.172 -0.225,-0.294 -0.071,-0.254 0.084,-0.215 0.088,-0.107 0.093,0 0.104,0.081 0.212,0.35 0.084,0.216 0.219,-0.03 0.354,-0.277 0.085,-0.103 -0.353,0.105 -0.152,-0.007 -0.155,-0.115 -0.158,-0.224 -0.083,-0.254 -10e-4,-0.807 0.054,-0.156 0.171,-0.116 0.11,-0.193 -0.008,-0.082 -0.106,-0.164 -0.153,-0.128 -0.15,-0.064 -0.034,0.02 0.232,0.355 -0.008,0.133 -0.257,0.346 -0.039,0.102 -0.002,0.336 -0.036,0.072 -0.207,0.095 -0.232,0.264 -0.392,0.089 -0.369,-0.026 -0.198,-0.13 -0.615,-0.649 -0.225,-0.272 -0.005,-0.229 -0.421,-0.81 0.002,-0.174 -0.146,-0.253 -0.163,-0.036 -0.037,-0.241 0.336,-0.522 0.208,-0.44 0.024,-0.139 -0.009,-0.215 -0.05,-0.479 0.043,-0.208 -0.207,0.274 -0.044,0.203 0.051,0.205 -0.032,0.233 -0.12,0.325 -0.206,0.344 -0.424,0.165 -0.748,-0.092 -0.086,-0.044 -0.053,-0.118 -0.038,-0.506 -0.045,0.063 -0.085,0.27 -0.068,0.386 -0.087,0.087 -0.158,0.007 -0.123,-0.062 -0.088,-0.13 -0.188,-0.011 -0.352,0.103 -0.166,-0.042 -0.197,-0.004 -0.399,-0.113 -0.472,-0.029 -0.127,-0.087 0.007,-0.167 0.088,-0.084 0.498,-0.075 0.482,-0.179 0.476,-0.088 -0.019,-0.091 -0.215,-0.028 -1.093,0.197 -0.344,-0.023 -0.06,-0.032 -0.008,-0.199 0.126,-0.189 0.211,-0.176 0.063,-0.134 -0.122,-0.057 -0.197,0.037 -0.094,-0.107 0.104,-0.419 -0.092,-0.428 -0.128,0.406 -0.193,0.224 -0.922,0.095 -0.15,0.119 -0.122,-0.003 -0.589,-0.215 -0.251,-0.131 -0.236,-0.195 -0.42,-0.437 -0.329,-0.284 -0.018,-0.525 0.07,-0.335 0.159,-0.376 0.598,-0.813 0.205,-0.155 0.186,-0.053 0.877,-0.071 0.653,-0.103 0.124,-0.049 -0.961,-0.06 -0.855,0.042 -0.292,0.128 -0.374,0.523 -0.095,0.22 -0.099,0.16 -0.067,0.004 -0.127,-0.057 -0.041,-0.069 -0.053,-0.171 -0.201,-0.272 -0.088,-0.313 -0.052,-0.461 0.017,-0.206 0.093,-0.264 0.287,-0.519 -0.368,0.013 0.043,-0.438 0.135,-0.477 0.342,-0.283 0.347,-0.204 0.314,-0.268 0.549,-0.179 0.187,0.368 0.471,0.111 0.136,0.165 0.167,0.303 0.207,0.288 0.246,0.274 0.069,0.02 -0.108,-0.236 -0.4,-0.516 -0.018,-0.182 -0.103,-0.198 -0.53,-0.286 -0.094,-0.109 -0.094,-0.289 -0.04,-0.187 0.059,-0.181 0.539,-0.554 0.123,-0.292 0,-0.138 -0.042,-0.156 -0.118,-0.268 -0.031,0 0.037,0.407 -0.019,0.16 -0.061,0.177 -0.088,0.134 -0.115,0.092 -1.157,1.258 -0.115,0.074 -0.43,0.113 -0.22,0.133 -0.119,0.175 -0.19,0.458 -0.262,0.912 -0.3,0.735 -0.256,-0.952 -0.46,-0.731 0.899,-0.728 0.023,-0.111 -0.087,-0.39 0.025,-0.119 0.084,-0.171 0.228,-0.251 -0.009,-0.025 -0.266,0.09 -0.409,0.566 -0.16,0.182 -0.086,0.024 -0.01,-0.333 0.22,-0.864 0.181,-0.843 0.066,-0.242 0.156,-0.244 -0.148,0.018 -0.727,0.376 -0.244,-0.235 -0.204,-1.229 -0.358,-0.482 -0.607,-0.395 -0.596,-0.184 -0.136,-0.353 -0.118,-0.43 0.16,-0.507 0.261,-0.241 0.241,-0.109 0.228,0.05 0.012,0.186 -0.155,0.5 0.204,0.047 0.816,0.605 0.178,0.049 0.338,-0.233 0.188,0.009 0.444,0.188 0.15,0.227 0.425,0.444 -0.063,-0.258 -0.463,-0.545 -0.258,-0.175 -0.455,-0.034 -0.282,0.091 -0.119,-0.026 -0.249,-0.139 -0.211,-0.229 -0.211,-0.501 -0.048,-0.233 0.012,-0.173 0.05,-0.158 0.087,-0.141 0.173,-0.103 0.26,-0.063 0.079,-0.062 -0.333,-0.289 -0.151,0.001 -0.52,0.422 -0.106,0.033 -0.045,-0.082 -0.043,-0.007 -0.153,0.208 -0.119,0.093 -0.426,0.645 -0.066,0.308 -0.024,0.458 -0.049,0.287 -0.074,0.116 -0.5,0.219 -0.284,0.446 -0.345,-0.384 -0.379,-0.372 -0.253,-0.652 -0.456,-0.115 -0.53,-0.371 -0.202,-0.33 0.287,-0.681 0.412,-0.515 0.063,-0.62 0.057,-0.133 0.708,-0.154 0.462,-0.308 -0.474,-0.028 -0.291,0.047 -0.521,0.215 -0.578,-0.426 -0.299,-0.39 -0.094,-0.333 0.103,-0.282 0.014,-0.288 0.052,-0.39 0.055,-0.17 0.122,-0.218 0.248,-0.146 0.219,-0.449 0.09,-0.314 0.449,-0.946 0.164,-0.409 0.307,-0.569 0.618,-0.897 -0.195,0.051 -0.102,0.077 -0.098,-0.009 -0.092,-0.096 -0.087,-0.199 -0.083,-0.303 -0.047,0.133 -0.011,0.568 -0.062,0.485 -0.11,0.336 -0.303,0.683 -0.178,0.265 -0.122,-0.247 0.094,-0.426 0.175,-0.34 0.03,-0.466 -0.166,-0.558 -0.101,-0.45 -0.037,-0.342 -0.005,-0.313 0.027,-0.283 0.07,-0.309 0.112,-0.334 -0.014,-0.037 0.031,-0.312 -0.025,-0.32 -0.093,-0.254 -0.118,-0.221 -0.328,0.133 -0.557,-0.199 -0.18,-0.543 -0.482,-0.167 -0.26,-0.39 -0.529,-0.191 -0.429,-0.133 -0.327,-0.225 -0.383,-0.264 -0.382,-0.282 -0.29,-0.214 -0.211,0.013 -0.485,0.031 -0.024,-0.483 -0.149,-0.292 0.056,-0.259 -0.27,-0.133 -0.398,-0.195 0.116,-0.496 0.088,-0.376 -0.352,-0.111 -0.508,-0.161 0.164,-0.34 0.133,-0.275 -0.195,-0.403 -0.395,-0.677 -0.303,-0.485 -0.396,-0.759 -0.348,-0.669 -0.285,-0.548 -0.237,-0.38 -0.334,-0.681 -0.435,-0.771 -0.413,-0.608 0.06,-0.395 -0.408,-0.496 -0.358002,-0.503 -0.412,-0.581 -0.407,-0.285 -0.291,-0.204 -0.419,-0.294 -0.22,-0.264 -0.092,-0.224 -0.095,-0.157 -0.083,-0.22 -0.048,-0.256 -0.086,-0.158 -0.508,-0.382 -0.155,-0.24 -0.351,-0.278 -0.294,-0.116 -0.103,-0.094 -0.358,-0.842 0.058,-0.301 0.04,-0.302 -0.04,-0.155 -0.589,-0.645 -0.3,-0.268 -0.303,-0.278 -0.636,0.359 -0.651,0.367 -0.456,0.135 -0.63,0.186 0.209,0.398 -0.086,0.291 -0.196,0.134 -0.333,-0.017 -0.001,0.985 -0.314,0.699 -0.658,0.012 -0.354,0.24 -0.525,0.355 -0.425,0.287 -0.452,0.462 -0.231,-0.066 0.103,-0.412 -0.167,-0.699 -0.139,-0.584 -0.29,-0.301 -0.488,-0.507 -0.366,-0.382 -0.523,-0.546 -0.366,-0.383 -0.381,-0.4 -0.501,-0.528 -0.206,-0.686 -0.458,-0.249 -0.49,-0.266 -0.398,-0.507 0.135,-0.501 0.162,-0.602 0,-0.364 -0.437,0.022 -0.655,0.034 -0.584,0.03 -0.433,0.427 -0.4,0.394 -0.627,-0.307 -0.718,-0.352 -0.204,0.459 -0.666,-0.23 -0.672,-0.232 0,-1.66 0,-1.675 0,-1.69 0,-1.707 0,-1.722 0,-1.739 0,-1.755 0,-1.773 0,-1.791 0,-1.809 0,-1.825 0,-1.846 0,-1.865 0,-1.885 0,-1.905 0,-1.926 0,-1.947 0,-1.969 0,-1.991 0,-2.014 0,-2.037 0,-2.062 0,-2.086 0,-2.111 0,-2.137 0,-2.164 0,-2.191 0,-2.22 0,-2.249 0,-2.278 0,-2.309 0,-2.34 0.399,0.125 1.276,0.264 1.203,-0.155 2.231,0.853 1.38,1.585 1.119,0.774 0.457,0.529 0.727,0.465 1.71,1.009 0.532,0.103 0.991,0.481 0.614,-0.063 1.056,0.118 0.718,0.385 1.416,1.054 0.29,0.094 0.078,-0.077 -0.493,-1.042 -0.078,-0.101 -0.571,-0.391 -0.669,-0.193 -0.051,-0.076 -0.125,-0.371 0.04,-0.144 0.146,-0.066 0.499,0.003 0.295,-0.059 0.041,-0.146 -0.212,-0.034 -0.256,-0.142 -0.305,-0.25 -0.169,-0.236 0.614,-1.578 0.215,0.16 0.324,-0.367 0.58,0.233 0.106,-0.127 0.071,-0.807 0.086,-0.195 0.164,-0.145 0.808,-0.145 1.007,0.144 0.104,-0.078 -0.097,-0.542 -0.011,-0.214 0.061,-0.49 0.063,-0.263 0.119,-0.132 0.469,0.104 0.146,0.242 0.157,0.415 0.159,0.236 0.498,0.238 0.057,0.164 -0.19,0.625 -0.199,0.327 -0.412,0.857 -0.026,0.22 0.635,-0.384 0.713,-0.533 0.612002,-0.294 0.512,-0.054 0.366,-0.174 0.221,-0.293 0.158,-0.301 0.317,-0.975 0.21,-0.169 0.88,0.06 0.209,-0.03 0.136,-0.095 -0.025,-0.124 -0.186,-0.151 -0.251,-0.042 -0.006,-0.069 0.093,-0.161 0.137,-0.093 0.434,-0.111 0.285,0.354 0.194,0.025 0.644,-0.393 0.989,-1.046 0.395,-0.292 0.343,-0.051 0.289,0.191 0.223,-0.05 0.293,-0.594 0.116,-0.317 0.181,-0.275 0.732,-0.621 0.469,-0.133 0.286,0.115 0.341,0.258 0.281,0.1 0.37,-0.076 0.276,0.034 0.131,-0.125 0.472,-0.71 0.153,-0.007 0.147,0.209 0.237,0.515 10e-4,0.258 -0.309,0.625 -2.275,1.776 -0.701,0.761 -0.347,0.278 -0.359,0.157 -0.696,0.131 -0.276,0.154 -0.468,0.138 -1.094,0.242 -0.21,0.117 -0.143,0.137 -0.393,0.922 -0.191,0.3 -0.376,0.451 -0.422,0.276 -0.577,0.105 -0.367,0.428 -0.422,0.822 -0.341,0.57 -0.389,0.482 -0.423,0.628 -0.11,0.33 0.126,0.433 0.07,0.144 0.425,0.233 0.165,-0.053 -0.152,-0.231 -0.357,-0.335 -0.048,-0.121 0.092,-0.095 1.678,0.253 0.36,-0.255 0.126,-0.217 -0.027,-0.111 -0.455,-0.046 -0.098,-0.207 -0.072,-0.39 -0.015,-0.311 0.041,-0.231 0.103,-0.294 0.488,-0.483 0.525,-0.207 0.404,-0.274 0.224,-0.259 0.603,-0.444 0.242,-0.361 0.13,-0.281 0.016,-0.14 -0.109,-0.102 0.089,-0.242 0.439,-0.217 0.193,-0.019 0.618,0.208 0.112,0.162 -0.061,0.429 0.086,-0.02 0.238,-0.546 0.133,-0.182 0.137,-0.036 0.139,0.07 0.141,0.176 0.076,0.524 0.012,0.87 0.032,0.35 0.158,-0.6 0.11,-0.279 0.602,-1.286 0.406,-0.708 0.456,-0.693 0.662,-0.52 1.531,-0.865 0.862,-0.234 0.437,-0.216 0.214,-0.188 0.136,-0.232 0.24,-0.268 0.043,0.022 -0.093,0.561 -0.062,0.162 -0.561,0.346 -0.055,0.264 0.061,0.406 0.097,0.267 0.133,0.129 0.232,-0.091 0.333,-0.313 0.414,-0.48 0.895,-1.223 0.077,-0.225 0.226,-0.99 0.513,-0.439 0.929,-0.5 0.228,-0.319 -0.814,-0.271 -0.169,-0.187 -0.026,-0.112 0.154,-0.287 -0.372,-0.286 -0.137,-0.176 0.006,-0.514 0.114,-0.37 0.244,-0.359 0.139,-0.063 0.363,0.209 0.306,0.269 1.055,1.243 0.424,0.604 0.246,0.472 0.594,1.467 0.262,0.842 0.21,0.863 0.207,0.62 0.204,0.379 1.015,1.492 0.523,0.626 0.439,0.388 0.504,0.307 0.569,0.226 0.388,0.019 0.603,-0.627 0.014,-0.414 -0.266,-0.692 -0.268,-0.481 0.032,-0.294 0.354,-0.565 -0.024,-0.197 0.075,-0.585 0.245,0.112 0.096,-0.023 0.137,-0.215 0.176,-0.408 0.222,-0.338 0.268,-0.268 0.072,-0.176 -0.266,-0.127 -0.161,0 -0.12,-0.058 -0.078,-0.115 0.106,-0.125 0.582,-0.316 0.109,-0.303 0.186,-0.202 0.239,-0.081 0.147,0.084 0.163,0.251 0.008,0.401 -0.072,0.651 -0.013,0.524 0.183,1.229 0.162,0.267 0.63,0.36 -0.039,0.297 -0.729,1.28 -0.156,0.312 -0.077,0.237 0.026,0.2 0.129,0.164 0.247,0.116 0.636,0.047 0.174,-0.111 1.236,-0.036 0.227,-0.095 0.191,-0.245 0.278,-0.612 0.315,-0.187 0.099,-0.172 0.194,-0.732 0.096,-0.853 0.095,-0.359 0.143,-0.224 0.194,-0.072 0.481,0.084 0.226,-0.073 0.891,0.073 0.891,-0.063 0.921,0.152 0.591,0.176 0.547,0.277 1.049,0.656 0.415,0.351 1.465,1.573 0.428,0.319 0.806,0.304 2.762,0.676 0.347,0.181 0.728,0.706 0.501,0.41 0.595,0.391 0.743,0.337 1.457,0.508 0.237,0.168 0.267,0.049 0.297,-0.069 1.335,0.29 0.352,-0.014 0.254,0.054 0.313,0.208 0.458,0.077 -0.016,-0.144 -0.523,-0.798 0.023,-0.126 0.215,-0.01 0.647,0.134 0.148,-0.228 0.216,0.005 0.492,0.11 0.53,0.247 0.568,0.382 0.691,0.326 1.048,0.806 0.579,0.668 0.549,0.827 0.301,0.572 0.053,0.32 0.115,0.158 0.176,-0.002 0.067,0.121 -0.158,0.704 -0.091,0.175 -0.12,0.126 -0.502,0.143 -1.376,-0.169 -0.244,0.566 -0.771,0.477 -0.137,0.208 -0.031,0.151 0.056,0.493 -0.098,0.15 -0.632,0.56 -0.021,0.158 0.41,0.229 0.436,0.39 0.343,0.095 0.433,-0.053 0.544,0.137 0.655,0.326 0.456,0.148 0.256,-0.028 0.35,0.06 0.443,0.148 0.593,0.051 1.31,-0.013 0.393,0.111 0.549,0.05 1.056,-0.016 0.191,-0.021 0.338,-0.257 0.218,-0.085 0.38,-0.004 1.096,-0.189 0.379,0.003 0.351,-0.144 0.449,-0.29 0.277,-0.055 0.105,0.181 0.189,0.079 0.273,-0.023 0.52,-0.308 1.215,-0.908 0.437,0.001 0.321,-0.286 0.079,-0.005 0.088,0.118 0.297,0.666 0.091,0.107 0.205,0.058 0.2,0.34 0.208,0.507 0.156,0.141 1.14,0.021 0.401,0.141 0.121,0.145 0.123,0.399 0.075,0.77 0.05,0.281 0.166,0.409 0.109,0.118 0.103,-0.113 0.281,-1.065 0.098,-0.172 0.188,0.06 0.057,0.052 0.285,0.79 0.405,0.584 1.005,1.069 0.164,0.391 0.06,0.289 -0.057,0.258 -0.173,0.228 -0.273,0.183 -0.371,0.138 -0.347,-0.05 -0.322,-0.237 -0.104,-0.014 0.115,0.211 0.666,0.874 0.169,0.348 0.158,0.23 0.146,0.114 0.134,0.188 0.123,0.261 0.553,0.693 0.157,0.33 0.63,1.024 0.299,0.401 0.231,0.23 0.089,0.023 -0.052,-0.185 -0.804,-1.363 -0.41,-0.86 -0.058,-0.207 -0.026,-0.317 -0.016,-1.056 0.059,-0.162 0.277,-0.136 0.356,0.48 0.135,0.067 0.091,-0.028 0.047,-0.124 0.205,0.115 0.362,0.353 0.123,0.006 -0.273,-0.677 -0.195,-0.332 -0.069,-0.231 0.182,-0.349 -0.099,-0.176 -0.46,-0.516 -0.239,-0.536 -0.215,-0.813 -0.019,-0.317 0.035,-0.336 -0.032,-0.271 -0.29,-0.555 -0.314,-0.385 -0.25,-0.449 -0.051,-0.237 0.039,-0.642 0.189,-0.28 0.358,-0.376 0.097,-0.389 -0.165,-0.401 -0.03,-0.183 0.104,0.035 0.707,-0.202 0.177,0.071 0.267,-0.086 0.356,-0.245 0.279,-0.11 0.368,0.016 0.199,-0.059 0.244,-0.109 0.126,-0.122 0.224,-0.467 0.12,-0.07 0.375,0.051 0.211,0.103 0.099,-0.037 -0.015,-0.665 0.071,-0.234 0.374,-0.485 0.39,-0.051 0.261,-0.133 0.298,-0.272 0.213,-0.245 0.213,-0.394 0.087,-0.504 -0.068,-0.145 -0.443,-0.195 -0.266,0.102 -0.59,0.359 -0.62,0.461 -0.239,0.427 -0.065,0.546 -0.117,0.24 -0.483,-0.228 -0.206,0.004 -0.258,0.095 -0.274,0.209 -0.289,0.324 -0.426,0.059 -0.564,-0.205 -0.338,-0.058 -0.343,0.344 0.021,0.255 0.159,0.372 -0.158,0.22 -0.823,0.082 -0.217,-0.048 -0.439,0.146 -0.173,-0.032 -0.126,-0.177 -0.895,-0.754 -0.088,-0.153 0.217,-0.615 0.828,-1.677 0.091,-0.1 1.536,-0.294 0.927,-0.308 1.699,-0.934 0.329,-0.077 1.092,-0.622 0.449,-0.159 0.417,0.108 0.611,0.321 0.315,0.285 0.223,0.354 0.186,0.494 0.232,1.083 0.08,0.917 0.144,0.339 0.512,0.635 0.263,0.245 0.162,0.077 0.14,-0.148 0.096,-0.024 0.064,0.057 0.07,0.398 0.091,0.04 0.308,-0.05 0.327,0.165 0.047,0.122 -0.07,0.491 0.093,0.206 0.396,0.438 0.382,0.165 0.441,0.075 0.819,-0.074 0.686,-0.21 0.514,-0.345 0.423,0.385 0.846,0.925 0.506,0.652 0.419,0.306 0.85,0.366 0.193,0.197 0.311,0.022 0.428,-0.153 0.487,0.06 0.546,0.271 0.376,0.114 1.287,-0.512 0.197,-0.024 0.479,-0.247 0.309,-0.075 0.363,0.006 0.271,-0.075 0.179,-0.157 0.682,0.007 1.235,0.176 0.844,0.228 0.501,0.288 0.412,0.161 0.322,0.035 0.313,-0.051 0.305,-0.138 0.321,-0.262 0.686,-0.134 0.114,-0.069 -0.014,-0.144 -0.143,-0.218 -0.389,-0.415 -0.272,-0.405 -0.053,-0.258 0.006,-0.313 0.084,-0.181 0.164,-0.048 0.257,0.194 0.351,0.437 0.989,1.628 0.238,0.23 0.131,0.206 0.908,0.588 0.428,0.104 0.507,-0.363 0.224,-0.226 0.109,-0.218 -0.005,-0.21 0.048,-0.307 -0.051,-0.19 -0.136,-0.247 -0.364,-0.344 -0.591,-0.443 -0.54,-0.13 -0.489,0.184 -0.554,0.377 -0.23,-0.148 -0.69,-1.061 -0.174,-0.398 0,-0.11 0.32,0.127 0.015,-0.129 -0.191,-0.515 -0.118,-0.172 -0.398,-0.815 -0.049,-0.246 0.248,-0.056 0.112,-0.096 0.15,0.01 0.702,0.491 0.359,-0.219 0.832,-0.314 -0.328,-0.472 -0.078,-0.466 0.039,-0.102 0.271,-0.069 0.53,0.389 0.257,0.054 0.188,-0.154 0.199,-0.011 0.209,0.133 0.196,0.2 0.365,0.571 0.18,0.343 0.203,0.516 0.064,0.072 0.978,0.039 0.555,-0.457 -0.012,0.156 -0.127,0.358 -0.688,1.368 0.005,0.166 0.364,-0.073 0.171,-0.11 0.105,-0.164 0.091,-0.383 0.061,-0.113 1.021,-0.646 0.296,-0.096 -0.185,0.69 -0.38,2.44 -0.077,0.844 -0.083,0.286 -0.401,0.923 0.006,0.323 0.439,0.771 0.078,0.209 0.044,0.63 0.078,0.125 0.362,0.007 0.375,-0.2 0.447,-0.133 0.069,0.131 -0.245,0.761 0.014,0.066 0.424,-0.195 0.195,-0.026 0.08,0.044 0.316,0.387 0.032,0.289 -0.007,0.429 -0.033,0.308 -0.107,0.171 -0.127,0.068 -0.16,0.051 -0.144,-0.021 -0.444,0.064 -0.261,-0.082 -0.259,-0.235 -0.184,-0.057 -0.213,0.181 -0.337,-0.03 -0.378,-0.52 -0.151,0.049 -0.051,0.083 0.006,0.112 0.17,0.336 1.331,1.77 0.202,0.364 0.045,0.521 0.027,-0.002 0.125,-0.521 -0.081,-0.252 -0.685,-1.027 -0.082,-0.376 0.024,-0.103 0.181,-0.105 0.975,0.257 0.378,-0.056 0.254,-0.181 0.128,-0.224 0.093,-1.236 0.175,-0.796 -0.104,-0.716 -0.264,-1.146 -0.207,-0.678 -0.478,-0.691 -0.047,-0.248 0.533,-2.114 0.096,-0.179 0.119,-0.078 0.419,-0.031 0.305,-0.177 0.479,0.248 0.264,0.065 0.328,-0.219 0.727,-0.897 0.285,-0.279 0.362,-0.528 0.439,-0.78 0.479,-0.567 0.774,-0.531 0.474,-0.428 0.096,-0.154 -0.44,-0.037 -0.107,-0.073 -0.091,-0.407 0.046,-0.756 -0.008,-0.422 -0.052,-0.382 -0.096,-0.341 -0.14,-0.301 -0.128,-0.181 -0.116,-0.06 -0.079,0.027 -0.043,0.114 -0.118,0.727 -0.15,0.532 -0.206,0.278 -0.427,0.187 -0.733,0.138 -0.304,-0.253 -0.039,-0.215 0.106,-0.843 0.244,-0.363 0.671,-0.717 0.43,-0.576 0.007,-0.1 -0.395,-0.005 -0.094,-0.119 -0.083,-0.711 0.023,-0.267 0.062,-0.305 0.276,-0.223 0.848,-0.275 0.659,-0.324 0.02,0.113 -0.529,0.969 -0.055,0.224 0.202,0.209 0.508,-0.56 0.328,-0.463 0.055,-0.158 -0.298,-0.058 -0.016,-0.192 0.057,-0.353 -0.027,-0.242 -0.33,-0.305 -0.406,0.17 -0.339,0.321 -0.281,0.087 -0.415,0.006 -0.302,-0.073 -0.189,-0.153 -0.228,-0.343 -0.266,-0.533 -0.336,-0.533 -0.119,-0.058 -0.102,0.06 -0.215,0.515 -0.093,0.062 -1.318,-0.722 -0.559,-0.406 -0.271,-0.308 -0.336,-0.183 -0.402,-0.056 -0.321,-0.144 -0.239,-0.23 -0.194,-0.332 -0.148,-0.433 -0.273,-0.547 -0.626,-1.094 -0.166,-0.706 -0.023,-0.271 0.039,-0.7 0.586,-1.195 0.109,-0.346 0.2,-0.255 0.291,-0.164 0.209,-0.05 0.476,0.153 -0.285,-0.373 -0.022,-0.2 0.286,-0.655 -0.056,-0.03 -0.786,0.504 -0.201,-0.034 -0.283,-0.308 -0.533,-1.106 -0.006,-0.692 0.167,-0.968 0.059,-0.581 -0.152,-0.497 0.057,-0.14 0.165,-0.14 0.069,-0.15 -0.072,-0.552 0.115,-0.295 0.377,-0.573 0.37,-0.503 0.218,-0.154 0.189,0.029 0.197,0.154 0.206,0.281 0.352,0.289 0.261,0.082 0.191,-0.158 0.328,-1.084 0.116,-0.279 -0.109,-0.121 -0.643,0.011 -0.278,-0.09 -0.16,-0.105 -0.118,-0.417 0.097,-0.223 0.622,-0.776 0.293,-0.817 0.871,-1.143 0.882,-0.539 0.427,-0.178 0.348,-0.036 0.151,0.072 0.186,0.574 0.034,0.604 0.479,0.752 0.385,0.057 0.239,-0.113 0.774,0.044 0.179,0.21 -0.013,0.234 -0.086,0.378 0.053,0.323 0.525,0.616 0.473,0.425 0.424,0.529 0.632,1.1 0.137,0.31 0.095,0.334 0.164,1.216 0.021,0.459 -0.06,1.32 -0.05,0.249 -0.167,0.298 0.058,0.121 0.499,0.341 0.396,0.675 0.208,0.217 0.502,0.363 0.091,0.137 0.114,0.226 0.283,0.965 0.464,0.865 0.034,0.186 -0.1,0.405 0.071,0.128 0.179,0.148 0.161,-0.077 0.142,-0.303 0.155,-0.088 0.167,0.128 0.127,0.225 0.173,0.55 0.252,0.453 -0.021,0.138 -0.125,0.113 -0.681,0.125 -0.383,-0.087 -0.354,-0.221 -0.246,-0.229 -0.229,-0.351 -0.085,0.037 -0.12,0.286 -0.256,0.417 -0.16,0.384 0.186,0.17 0.895,-0.011 0.194,0.108 0.227,0.269 -0.259,0.449 -0.605,0.751 -1.308,1.447 -0.384,0.37 0.093,0.107 0.146,0.027 0.449,-0.063 0.419,-0.193 0.51,0.083 0.227,0.158 -0.077,0.153 0.138,0.25 0.834,0.579 0.527,-0.115 0.538,-0.558 0.416,-0.277 0.512,0.038 0.143,0.062 -0.055,0.136 -0.378,0.313 -0.342,0.348 -0.037,0.098 0.426,-0.14 0.949,0.222 0.461,0.055 0.334,-0.056 0.313,0.088 0.293,0.232 0.098,0.147 -0.274,0.095 -0.259,-0.002 -0.22,0.141 -0.181,0.281 -0.129,0.364 -0.077,0.447 -0.197,0.184 -0.316,-0.078 -0.124,-0.126 0.068,-0.177 -0.092,-0.025 -0.253,0.126 -0.197,0.003 -0.054,0.131 1.382,1.418 0.442,1.246 0.304,0.512 0.03,0.135 -0.198,0.343 -0.01,0.261 0.091,0.751 -0.042,0.597 -0.136,1.047 0.127,0.324 0.295,0.286 0.177,0.365 0.121,0.125 0.09,0.293 0.105,0.184 0.121,0.075 0.085,-0.096 0.05,-0.268 0.113,-0.251 0.312,-0.452 0.302,-0.708 0.051,-0.235 -0.048,-0.559 0.035,-0.24 0.284,-0.851 0.09,-0.592 0.086,-0.927 0.15,-0.648 0.322,-0.552 0.562,-1.12 0.203,-0.225 0.228,-0.111 0.398,0.026 0.29,0.362 0.39,0.667 0.497,0.605 0.904,0.817 0.258,0.308 0.512,0.803 0.216,0.793 0.148,1.113 0.128,0.667 0.107,0.226 0.049,0.335 -0.009,0.445 -0.041,0.347 -0.071,0.25 -0.111,0.142 -0.276,0.046 -0.337,-0.069 -0.097,-0.112 -0.177,-0.522 -0.074,-0.032 -0.313,0.385 -0.039,0.215 0.115,0.711 -0.015,1.329 0.032,0.288 0.331,1.372 0.558,1.036 1.397,1.98 0.08,0.223 0.148,0.802 0.073,0.167 0.091,0.1 0.11,0.032 0.152,-0.08 0.514,-0.608 0.447,-0.643 0.312,-0.336 0.177,-0.027 0.19,-0.118 0.204,-0.208 0.136,-0.229 0.069,-0.25 0.092,-0.98 0.078,-0.47 0.218,-0.644 0.08,-0.183 1.081,-1.646 0.089,-0.204 0.459,-1.929 0.162,-0.891 0.023,-0.539 -0.062,-0.482 0.031,-0.398 0.124,-0.314 0.131,-0.222 0.226,-0.225 0.125,-0.317 0.075,-0.032 0.185,-0.002 0.244,0.216 0.177,0.039 1.144,-0.248 0,-0.132 -0.671,-0.417 0.007,-0.209 0.059,-0.288 0.211,-0.322 0.259,-0.102 0.058,-0.205 0.007,-0.254 0.085,-0.415 -0.078,-0.148 -0.627,-0.575 -0.362,0.024 -0.092,-0.075 -0.313,-0.471 -0.114,-0.686 -0.012,-0.282 0.043,-0.454 0.04,-0.126 -0.02,-0.206 -0.079,-0.286 -0.006,-0.254 0.066,-0.223 -0.04,-0.264 -0.146,-0.307 -0.057,-0.264 0.153,-0.781 0.005,-0.24 -0.144,-0.335 -0.105,-0.13 0.077,-0.083 0.259,-0.035 0.31,0.109 0.359,0.252 0.441,0.003 0.521,-0.246 0.53,-0.119 0.916,0.049 0.216,0.07 0.911,0.728 0.707,0.369 0.319,-0.034 1.572,0.146 0.69,-0.074 0.357,0.033 0.686,0.397 -0.045,0.33 -0.296,0.551 -0.386,0.113 -0.341,0.19 0.316,0.288 0.933,0.386 0.219,0.617 0.066,0.282 -0.108,0.254 0.054,0.127 0.216,0 0.558,-0.215 0.616,0.142 0.897,0.474 0.097,0.099 0.158,0.369 -0.02,0.149 -0.793,0.917 -0.413,0.362 -0.542,0.372 -0.018,0.198 0.761,0.037 0.592,0.104 0.267,0.121 0.139,0.171 0.19,0.368 0.031,0.29 -0.019,0.392 -0.063,0.272 -0.688,0.778 -0.316,0.243 -0.538,0.287 -0.234,0.215 -0.257,-0.03 -0.28,-0.274 -0.292,-0.059 -0.525,0.22 -0.285,-0.008 -0.14,0.077 -0.011,0.169 0.249,0.488 0.144,0.192 0.056,0.144 -0.106,0.241 0.022,0.076 0.084,0.086 0.478,1.058 0.101,0.081 0.099,-0.04 0.207,-0.301 0.123,-0.123 0.06,0.016 -0.002,0.154 -0.221,0.917 -0.029,0.244 0.005,0.218 0.106,0.461 0.242,0.493 0.3,0.442 0.451,0.593 0.606,0.631 0.226,0.306 0.331,0.719 0.068,0.275 -0.087,0.751 -0.242,1.222 -0.156,0.691 -0.07,0.166 -0.457,0.488 -0.259,0.114 -0.427,-0.013 -0.144,0.095 -0.223,0.389 -0.303,0.68 -0.239,0.43 -0.174,0.181 -0.321,0.211 -0.502,0.623 -0.247,0.239 -0.862,0.259 -0.702,0.838 -0.279,0.276 -0.303,0.146 -0.328,0.018 -0.188,-0.134 -0.107,-0.51 -0.063,-0.168 -0.248,-0.35 -0.508,-1.021 -0.219,-0.351 -0.146,-0.078 -0.293,0.055 -0.15,-0.033 -0.327,-0.323 -0.118,-0.209 0.015,-0.082 0.248,-0.119 -0.106,-0.168 -0.437,-0.462 -0.181,-0.243 -0.022,-0.083 -0.433,-0.314 -0.43,-0.087 -0.545,0.521 -0.207,0.352 0.007,0.115 0.261,0.134 0.113,-0.065 0.222,-0.324 0.117,-0.101 0.336,0.051 0.278,0.224 0.101,0.194 0.037,0.132 0.759,1.03 0.269,0.208 0.112,0.245 0.085,0.407 0.165,0.451 0.365,0.742 0.388,0.913 0.08,0.359 -0.201,0.173 -0.101,0.013 -0.299,-0.135 -0.79,-0.422 -0.088,0.008 -0.208,0.222 -0.171,0.504 -0.054,0.048 -0.42,-0.197 -0.787,-0.443 -0.527,-0.376 -0.267,-0.31 -0.324,-0.495 -0.38,-0.682 -0.454,-0.218 -0.527,0.249 -0.762,0.088 -1.6,-0.077 -0.21,0.059 -0.081,0.085 0.136,0.375 -0.032,0.103 -0.107,0.07 -0.024,0.11 0.174,0.396 0.282,0.269 0.796,0.363 0.527,0.311 0.315,0.267 0.103,0.225 0.016,0.246 -0.15,0.488 -0.086,0.179 -1.85,2.411 -0.705,0.966 -0.359,0.591 -0.316,0.389 -0.274,0.19 -0.453,0.106 -0.632,0.024 -0.819,-0.091 -0.424,-0.307 -0.769,-0.821 -0.539,-0.484 -0.241,-0.162 -0.201,-0.457 -0.181,-0.088 -0.386,-0.077 -0.397,-0.245 -0.933,-0.833 -0.484,-0.333 -0.44,-0.184 -0.396,-0.033 -0.15,0.05 0.27,0.421 -0.118,0.026 -0.32,-0.096 -0.316,0.001 -0.561,-0.302 -0.553,0.04 -0.399,-0.061 -0.478,-0.168 -0.516,-0.082 -0.831,0.008 -0.297,0.036 -0.044,0.079 0.398,0.368 0.685,0.443 -0.091,-0.382 0.024,-0.099 0.229,-0.133 1.085,0.236 1.23,0.495 0.312,0.048 0.346,0.173 0.382,0.298 0.527,0.605 1.006,1.364 0.323,0.342 0.428,0.318 2.179,0.459 0.752,-0.003 1.509,0.132 0.797,0.239 0.226,0.179 0.07,0.597 -0.073,0.299 -0.433,0.907 -0.274,0.665 -1.697,2.783 -0.22,0.634 -0.096,0.378 -0.303,0.391 -0.767,0.604 -0.769,0.512 -0.462,0.11 -0.412,-0.122 -0.267,-0.148 -0.396,-0.509 -0.024,0.053 0.286,0.796 -0.067,0.081 -0.232,-0.1 -0.531,-0.357 -0.172,0.066 -0.102,0.097 -0.141,-0.002 -0.181,-0.101 -0.328,-0.297 -0.087,-0.145 -0.079,-0.442 -0.054,-0.079 -0.646,0.255 -0.108,0.085 0.265,0.177 0.09,0.125 0.261,0.652 0.014,0.14 -0.186,0.085 -0.618,-0.245 -0.074,0.021 0.305,0.646 0.117,0.307 0.013,0.159 -0.396,0.726 -0.254,0.302 -0.347,0.11 -0.217,-0.074 -0.245,-0.185 -0.177,0.026 -0.108,0.237 -0.202,0.169 -0.295,0.101 -0.375,-0.044 -0.456,-0.189 -1.209,-0.681 -0.381,-0.105 -0.706,-0.094 -0.084,-0.097 0.006,-0.092 0.097,-0.087 -0.027,-0.075 -0.149,-0.063 -0.155,0.06 -0.161,0.182 -0.281,0.054 -0.402,-0.074 -0.594,-0.266 -1.179,-0.688 -1.29,-0.583 -0.748,-0.759 0.279,0.684 -0.023,0.231 -0.143,0.203 -0.024,0.2 0.293,0.485 0.405,0.174 0.408,-0.019 0.011,-0.079 -0.17,-0.121 -0.15,-0.176 -0.072,-0.263 0.077,-0.046 0.36,0.138 0.237,0.16 1.787,0.893 0.533,0.167 0.4,0.172 0.111,0.102 -0.135,0.221 -0.718,0.551 -0.012,0.09 0.493,-0.05 0.598,-0.485 0.336,-0.226 0.323,-0.138 0.437,0.239 0.552,0.615 0.447,0.348 0.637,0.194 0.373,0.208 0.627,0.571 0.099,0.297 0.058,1.203 -0.022,0.289 -0.082,0.287 -0.141,0.283 -0.262,0.158 -0.383,0.034 -0.301,0.116 -0.658,0.631 -0.279,0.091 -1.181,-0.188 -0.462,-0.176 -0.213,0.011 -0.118,0.139 -0.124,0.063 -0.463,0.058 -0.075,0.113 0.029,0.175 0.091,0.236 0.113,0.136 0.174,0.171 0.264,0.112 0.542,0.125 0.056,0.319 -0.024,0.103 -0.178,0.212 -0.206,-0.021 -0.354,-0.251 -0.174,-0.01 -0.153,0.136 -0.213,0.045 -0.273,-0.047 -0.152,0.11 -0.03,0.266 -0.092,0.199 -0.315,0.314 -0.17,0.231 0.005,0.182 0.181,0.131 0.208,0.297 0.234,0.461 0.045,0.204 -0.144,-0.054 -0.194,-0.183 -0.243,-0.313 -0.368,-0.28 -0.81,-0.366 -0.143,0.011 0.073,0.093 0.537,0.384 0.206,0.247 0.025,0.18 -0.45,0.393 -0.012,0.131 0.119,0.115 0.032,0.096 -0.16,0.192 -0.264,0.161 -0.511,0.023 -0.047,0.091 0.195,0.197 0.065,0.122 -0.167,0.168 -0.109,0.023 -0.589,-0.078 0.155,0.419 0.091,0.146 0.181,0.207 0.324,0.191 0.006,0.074 -0.113,0.164 -0.192,0.2 -0.811,0.609 -0.57,0.712 -0.079,0.222 0.145,0.466 10e-4,0.117 -0.149,0.211 -0.333,-0.058 -0.063,0.083 0.079,0.218 0.015,0.32 -0.05,0.421 -0.246,0.662 -0.434,0.891 -0.333,0.806 -0.231,0.722 -0.167,0.357 -0.308,0.024 -0.233,0.225 0.159,0.118 0.097,0.138 0.067,0.209 -0.066,0.653 -0.2,1.092 -0.124,0.864 0.025,2.641 -0.032,1.156 -0.088,0.638 -0.143,0.346 -0.244,0.104 0.311,0.101 0.198,0.162 0.091,0.246 0.085,0.392 0.112,0.18 0.139,-0.031 0.125,0.04 0.111,0.109 0.338,0.556 0.371,0.159 0.018,0.308 -0.146,1.715 0.001,0.223 0.168,-0.431 0.177,-1.332 0.241,-0.595 0.189,-0.126 0.774,-0.067 0.825,0.151 0.312,0.019 0.272,-0.083 0.279,0.167 0.068,0.167 0.079,0.701 0.074,0.399 0.491,1.417 0.234,0.789 0.286,1.224 0.107,0.349 0.595,1.617 0.113,0.436 0.046,0.335 -0.02,0.235 -0.108,0.361 -0.197,0.487 -0.184,0.37 -0.172,0.255 -0.176,0.189 -0.181,0.125 0.012,0.033 0.205,-0.06 0.208,-0.127 0.395,-0.329 0.152,-0.074 0.429,-0.047 0.014,0.119 -0.207,0.245 0.046,0.023 0.299,-0.198 0.648,-0.282 2.545,-0.917 0.6,-0.082 0.856,0.168 0.694,0.39 0.757,0.501 0.798,0.363 1.259,0.339 0.367,0.162 0.738,0.167 0.342,0.189 0.411,0.456 0.654,0.593 0.493,0.371 0.551,0.347 0.553,0.636 0.89,1.436 0.22,0.176 0.549,0.233 1.031,0.301 1.522,0.705 0.669,0.275 0.433,0.109 0.432,0.193 0.432,0.277 0.33,0.301 0.227,0.326 0.2,0.213 0.35,0.236 0.181,0.169 0.017,0.253 -0.421,0.991 -0.009,0.079 0.426,-0.711 0.238,-0.205 0.19,-0.096 0.396,0.011 0.601,0.119 0.527,10e-4 0.453,-0.116 0.386,-0.052 0.319,0.011 0.231,-0.035 0.144,-0.08 0.172,-0.002 0.682,0.247 0.276,0.013 0.997,0.232 0.64,-0.083 0.11,0.045 0.223,0.302 0.188,0.023 0.318,-0.047 0.309,0.082 0.517,0.396 0.239,0.34 0.229,0.693 0.02,0.207 -0.424,1.597 -0.133,0.615 -0.018,0.534 0.084,0.307 0.367,0.514 0.066,0.134 0.217,0.757 0.06,0.323 -0.024,0.37 -0.114,0.608 0.029,0.462 0.096,0.697 -0.036,0.471 -0.169,0.247 -0.114,0.241 -0.089,0.437 0,0.165 0.087,0.324 0.162,0.183 0.266,0.206 0.247,0.305 0.451,0.74 0.328,0.405 0.401,0.603 0.078,0.3 -0.112,0.198 -0.139,0.138 -0.323,0.185 -0.145,0.134 0.037,0.032 0.468,-0.1 0.276,0.011 0.234,0.147 0.191,0.285 0.317,0.242 0.443,0.199 0.445,0.333 0.738,0.789 0.133,0.181 0.196,0.412 0.259,0.64 0.135,0.417 0.012,0.196 -0.146,0.197 -0.498,0.358 -0.501,0.624 0.158,-0.03 0.331,-0.264 0.558,-0.521 0.31,-0.101 0.287,0.061 0.455,0.15 0.401,0.213 0.349,0.276 0.519,0.738 0.548,0.587 0.304,0.5 -0.092,-0.318 -0.202,-0.367 -0.515,-0.585 -0.22,-0.306 -0.047,-0.146 -0.017,-0.16 0.04,-0.292 0.096,-0.425 0.129,-0.3 0.161,-0.175 0.107,-0.186 0.055,-0.197 0.085,-0.145 0.446,-0.263 0.117,0.024 0.092,0.319 0.107,0.066 0.206,0.05 0.173,0.11 0.141,0.17 0.1,0.172 0.058,0.175 0.133,0.569 0.095,0.263 0.016,-0.319 0.111,-0.503 0.085,-0.207 0.27,-0.303 -0.014,-0.131 -0.112,-0.176 -0.565,-0.758 -0.011,-0.185 0.151,-0.109 0.103,-0.21 0.056,-0.31 0.121,-0.225 0.354,-0.317 0.305,-0.488 0.157,-0.336 0.128,-0.177 0.123,-0.042 -0.183,-0.136 -0.036,-0.089 -0.009,-0.406 -0.079,-0.426 -0.122,-0.199 -0.346,-0.427 -0.057,-0.127 -0.061,-0.483 0.034,-0.243 0.089,-0.204 -0.051,-0.197 -0.321,-0.358 -0.124,-0.313 -0.137,-0.76 -0.126,-0.957 -0.143,-0.707 -0.161,-0.454 -0.036,-0.286 0.089,-0.119 0.116,-0.359 0.104,-0.088 0.162,0.023 0.003,-0.041 -0.246,-0.194 -0.121,-0.244 0.005,-0.09 0.217,-0.243 -0.039,-0.103 -0.161,-0.133 -0.49,-0.224 0.177,-0.086 0.112,-0.193 -0.022,-0.057 -0.194,-0.079 -0.224,-0.149 -0.169,-0.223 -0.209,-0.352 -0.127,-0.28 -0.125,-0.466 -0.217,-0.532 -0.095,-0.133 -0.109,-0.085 -0.122,-0.04 0.004,-0.082 0.131,-0.124 2.123,-0.894 0.177,-0.129 1.042,-0.502 0.481,-0.281 0.49,-0.405 0.667,-0.417 0.325,-0.27 0.205,-0.26 1.059,-1.043 0.449,-0.536 0.26,-0.461 0.377,-0.553 0.495,-0.646 0.313,-0.556 0.13,-0.465 0.162,-0.803 0.046,-0.715 0.029,-1.053 -0.017,-0.945 -0.133,-1.49 -0.08,-0.471 -0.152,-0.562 -0.367,-1.136 -0.066,-0.311 -0.228,-0.525 -0.746,-1.374 -0.933,-0.936 -0.177,-0.235 -0.37,-0.276 -0.562,-0.317 -0.363,-0.259 -0.949,-0.973 -0.313,-0.117 -0.121,-0.251 -0.025,-0.179 0.036,-0.468 0.055,-0.325 0.067,-0.239 0.079,-0.154 0.522,-0.724 0.292,-0.582 0.204,-0.319 0.225,-0.249 0.406,-0.326 0.231,-0.412 -0.053,-0.167 -0.183,-0.183 -0.04,-0.178 0.309,-0.455 0.043,-0.126 -0.04,-0.43 0.06,-0.096 0.381,-0.026 0.544,0.617 0.133,-0.054 -0.174,-0.17 -0.208,-0.416 0.03,-0.173 0.401,-0.45 0.011,-0.205 -0.115,-0.284 -0.013,-0.228 0.235,-0.543 -0.063,-0.114 -0.661,-0.105 -0.109,-0.152 0.039,-0.072 0.311,-0.183 0.024,-0.069 -0.549,-1.224 -0.092,-0.366 0.234,-0.453 0.266,-0.205 -0.034,-0.117 -0.348,-0.021 -0.212,-0.062 -0.212,-0.354 0.083,-0.224 0.076,-0.103 0.207,-0.531 0.199,-0.109 -0.038,-0.095 -0.753,0.226 -0.355,-0.186 -0.349,0.049 -0.166,-0.055 0.061,-0.19 0.632,-0.867 0.292,-0.471 0.183,-0.426 0.097,-0.284 0.01,-0.142 -0.064,-0.947 0.038,-0.26 0.245,-0.242 0.377,-0.456 -0.517,-0.413 -0.323,-0.404 -0.214,-0.2 -0.162,-0.197 -0.208,-0.416 -0.157,-0.543 -0.167,-1.099 -0.027,-0.608 0.038,-0.442 0.07,-0.216 0.114,-0.225 0.472,-0.43 0.831,-0.636 0.649,-0.25 0.469,0.137 0.915,0.149 0.738,0.362 2.244,0.906 0.397,0.4 -0.375,0.337 0.054,0.083 0.845,-0.643 0.223,-0.124 0.191,-0.03 0.638,0.249 0.256,0.038 0.323,0.208 0.771,0.687 0.055,-0.057 -0.216,-0.35 0.124,-0.167 0.608,-0.365 0.628,-0.299 0.446,-0.294 0.473,-0.389 0.32,-0.208 0.165,-0.027 0.211,0.115 0.565,0.517 0.363,0.265 0.292,0.276 0.409,0.487 0.16,0.106 0.31,0.33 0.412,-0.034 0.135,0.039 0.045,0.064 0.069,0.223 0.037,0.143 0.002,0.153 -0.095,0.429 -0.296,0.684 0.124,0.011 0.188,-0.146 0.244,-0.261 0.191,-0.092 0.407,0.208 0.378,0.334 0.133,0.177 0.147,0.288 0.125,0.148 0.116,0.284 -0.008,0.092 -0.109,0.138 -0.463,0.232 0.088,0.087 0.541,-0.146 0.165,-0.144 0.118,-0.24 0.158,-0.068 0.639,0.421 0.094,0.146 -0.041,0.114 -0.104,0.129 -0.279,0.143 -0.239,0.356 -0.038,0.153 0.17,0.109 0.417,0.047 -0.003,0.084 -0.241,0.156 -0.032,0.204 0.539,0.723 0.361,0.316 0.208,0.058 0.486,0.015 0.394,0.122 0.875,0.408 0.512,0.074 0.441,-0.125 0.293,-0.027 0.258,0.163 0.083,0.115 0.039,0.229 -0.005,0.342 0.142,0.239 0.289,0.137 0.233,-0.021 0.306,-0.268 0.258,-0.046 0.086,-0.201 0.076,-0.374 0.075,-0.204 0.187,-0.059 0.15,0.111 0.088,0.17 0.162,0.511 0.045,0.228 -0.018,0.208 -0.081,0.187 -0.159,0.199 -0.236,0.211 -0.186,0.303 -0.227,0.699 -0.084,0.456 -0.023,0.269 0.01,0.293 0.043,0.319 0.09,0.262 0.211,0.37 0.013,0.123 0.016,0.299 -0.019,0.131 -0.123,0.26 -0.342,0.259 -0.469,0.067 -1.534,0.015 -0.408,-0.062 0.099,0.235 0.429,0.075 0.393,-0.003 1.463,0.148 0.201,0.15 0.17,0.264 0.121,0.272 0.12,0.554 0.022,0.262 -0.064,0.291 -0.151,0.319 -0.102,0.423 -0.052,0.528 0.082,0.279 0.791,0.022 0.157,0.19 -0.018,0.142 -0.281,0.532 -0.026,0.151 0.128,0.358 -0.018,0.102 -0.078,0.104 -0.075,0.268 -0.071,0.431 -0.089,0.279 -0.215,0.215 -0.112,0.047 -0.082,-0.057 -0.212,-0.587 -0.087,-0.088 -0.083,0.055 -0.042,0.091 0,0.127 -0.037,0.131 -0.073,0.135 -0.313,0.216 -0.508,0.146 0.016,0.156 0.34,0.083 0.434,0.26 0.249,0.042 0.391,-0.21 0.754,-0.662 0.311,-0.18 0.274,-0.069 0.309,-0.009 0.342,0.051 0.683,-0.085 0.171,0.063 0.209,0.146 0.247,0.229 0.17,0.221 0.093,0.212 0.154,0.798 0.206,0.208 0.05,0.153 0.017,0.233 -0.013,0.457 -0.227,0.919 -0.117,0.338 -0.313,0.461 -0.361,0.208 -0.642,0.196 -0.335,0.164 -0.253,0.226 -0.015,0.124 0.729,-0.387 0.803,-0.189 0.229,-0.212 0.173,-0.207 0.176,-0.461 0.319,-1.199 0.181,-0.378 0.252,-0.064 0.112,0.129 0.262,0.705 -10e-4,0.179 -0.065,0.152 -0.428,0.682 0.154,-0.069 0.43,-0.641 0.091,-0.201 0.051,-0.295 0.138,-0.209 0.053,0.103 0.133,0.755 0.004,0.55 0.021,0.176 -0.048,0.521 0.054,0.093 0.129,-0.45 0.042,-0.34 0.059,-0.243 0.075,-0.146 0.526,-0.46 0.615,-0.375 0.402,-0.334 0.334,-0.16 0.5,-0.151 0.32,-0.311 0.141,-0.471 0.12,-0.327 0.099,-0.181 0.33,-0.326 0.18,-0.019 0.171,0.121 0.194,0.244 0.217,0.367 0.13,0.288 0.042,0.208 0.035,0.729 0.042,-0.002 0.2,-0.557 0.023,-0.198 -0.014,-0.209 -0.061,-0.209 -0.201,-0.458 -0.079,-0.287 0.018,-0.177 0.213,-0.101 0.315,-0.04 0.053,-0.075 -0.231,-0.19 -0.006,-0.103 0.223,-0.339 0.131,-0.019 0.256,0.053 -0.051,-0.174 0.002,-0.115 0.072,-0.045 0.424,0.11 0.05,-0.133 0.365,-0.012 0.036,-0.119 -0.316,-0.17 -0.309,-0.105 -0.095,-0.093 -0.072,-0.137 -0.096,-0.331 0.023,-0.088 0.087,-10e-4 0.151,0.091 0.082,-0.174 0.092,-0.41 0.091,-0.168 0.284,0.194 0.012,-0.083 -0.23,-0.646 0.041,-0.125 0.352,-0.047 0.213,0.081 0.56,0.475 0.101,-0.054 -0.086,-0.13 -0.286,-0.28 -0.259,-0.183 -0.231,-0.086 -0.174,-0.156 -0.19,-0.428 -0.032,-0.177 0.016,-0.231 0.133,-0.479 0.077,-0.104 0.135,-0.077 0.194,-0.05 0.215,0.047 0.443,0.316 0.074,-0.1 -0.239,-0.172 -0.129,-0.159 -0.062,-0.204 0.027,-0.231 0.188,-0.478 0.088,-0.386 0.399,-1.068 0.117,-0.195 0.125,-0.124 0.078,-0.128 0.313,-0.029 0.579,0.384 0.177,0.227 0.047,0.32 -0.303,0.432 -0.521,0.322 -0.155,0.14 0.101,0.082 0.487,-0.257 0.425,-0.12 0.349,0.004 0.283,0.511 0.04,0.706 -0.162,0.587 0.212,-0.292 0.266,-0.161 0.217,0.383 0.026,0.312 0.114,0.292 0.246,0.391 0.256,0.342 -0.281,0.357 -0.338,0.213 0.071,0.159 0.462,0.17 0.063,0.168 -0.048,0.228 0.067,-0.001 0.321,-0.352 0.274,0.047 0.35,0.759 -0.255,0.433 -0.391,0.198 -0.311,0.084 -0.433,-0.012 -0.17,0.064 0.084,0.144 0.414,0.002 0.633,-0.109 0.474,-0.178 0.206,-0.011 0.217,0.072 0.073,0.061 -0.228,0.124 -0.018,0.043 0.085,0.127 0.177,0.409 -0.016,0.092 -0.169,0.237 0.271,0.052 0.379,-0.111 0.118,0.123 0.231,0.489 0.146,0.5 -0.641,0.682 -0.326,0.141 -0.481,0.359 -0.135,0.287 -0.278,0.368 0.178,-0.004 0.497,-0.591 0.243,-0.138 0.181,0.035 0.073,0.1 -0.036,0.166 0.159,-0.021 0.668,-0.346 0.281,-0.069 0.363,-0.022 0.04,0.12 -0.226,0.828 -0.386,0.633 -0.704,0.389 -0.249,0.228 -0.309,0.368 0.117,0.066 0.671,-0.482 0.458,-0.191 0.644,-0.153 0.286,0.021 0.507,0.962 0.292,0.093 0.236,-0.05 0.446,0.276 0.167,0.266 -0.042,0.191 -0.151,0.114 -0.076,0.178 0.178,0.529 -0.103,0.296 -0.325,0.261 -0.233,0.132 -0.244,0.041 -0.238,0.231 -0.108,0.034 -0.332,-0.059 0.114,0.142 0.164,0.072 0.262,0.039 0.306,-0.073 0.298,0.009 0.469,0.167 0.196,0.205 0.003,0.057 -0.101,0.117 -0.148,0.381 -0.108,0.137 0.092,0.103 0.235,0.158 0.175,0.058 0.23,-0.051 0.246,0.067 0.828,0.89 -0.034,0.458 -0.125,0.352 0.049,0.395 0.003,0.485 -0.449,0.134 -1.49,-0.227 -0.852,-0.347 -0.044,-0.106 0.241,-0.23 -0.214,-0.018 -0.248,0.091 -0.104,0.086 0.286,0.366 0.783,0.322 0.35,0.387 0.384,0.033 0.117,0.07 0.212,0.226 -0.063,0.078 -0.391,0.027 -0.309,0.262 0.194,0.153 0.696,0.134 0.499,0.034 0.25,0.15 -0.206,0.167 -0.585,0.196 -0.017,0.292 0.434,0.116 0.386,-0.07 0.158,0.029 0.113,0.703 0.065,0.146 -0.415,0.124 -0.002,0.134 0.276,0.11 0.458,0.091 0.151,0.126 0.031,0.208 0.094,0.111 0.263,0.02 0.29,-0.259 0.17,-0.218 0.249,0.082 0.019,0.272 0.296,0.31 0.108,0.051 0.085,0.437 0.242,-0.389 0.177,0.083 0.201,0.019 -0.069,0.376 -0.12,0.296 0.158,0.185 0.123,0.274 0.326,0.376 -0.089,0.18 -0.384,0.385 -0.203,0.607 -0.048,0.21 -0.197,0.348 -0.271,0.336 0.17,-0.036 0.605,-0.62 0.36,-0.208 0.792,-0.113 0.191,-0.174 0.29,-0.072 0.178,0.199 0.018,0.358 0.234,0.112 0.247,-0.118 0.224,0.105 -0.134,0.225 -0.718,0.917 -0.209,0.367 -0.06,0.259 0.247,-0.355 0.902,-0.822 0.097,-0.124 0.196,-0.353 0.181,-0.231 0.486,0.082 0.25,0.166 0.116,0.462 0.197,0.502 0.296,0.555 0.787,0.269 0.286,0.043 0.492,-0.187 0.078,-0.259 0.384,-0.08 0.27,0.032 0.093,0.499 0.288,0.264 0.286,0.218 0.276,0.113 0.403,0.049 0.221,0.239 0,0.099 -0.227,0.255 -0.219,0.371 -0.382,0.259 -0.533,0.012 -0.736,0.162 -0.03,0.146 -0.162,0.161 -0.391,0.159 -0.213,0.121 -0.346,0.598 -0.21,0.255 -0.242,0.048 -0.341,-0.024 -0.223,0.054 -0.164,0.109 -0.096,0.162 -0.074,0.061 -0.456,0.164 -0.829,0.451 -0.438,0.014 -0.271,-0.052 -0.207,0.037 -0.141,0.126 -0.396,0.219 -0.119,0.133 -0.07,0.153 -0.054,0.315 -0.047,0.114 -0.077,0.066 -0.333,-0.065 -0.371,-0.205 0.073,0.217 0.587,0.365 0.168,0.203 -0.16,0.175 -0.374,0.274 -0.043,0.147 0.153,0.078 -0.061,0.124 -0.205,0.132 0.023,0.054 0.022,0.053 0.508,-0.189 0.453,-0.404 0.295,-0.41 0.148,-0.115 0.583,-0.152 0.345,-0.179 0.494,-0.326 0.541,-0.474 0.589,-0.623 0.75,-0.488 0.913,-0.352 0.67,-0.18 0.427,-0.008 0.021,-0.059 -0.383,-0.111 -0.316,-0.021 -0.393,0.081 -0.122,-0.191 0.013,-0.083 0.129,-0.142 0.331,-0.127 1.62,0.177 0.558,0.136 0.61,1.137 0.14,0.364 0.04,0.265 -0.062,0.166 -0.244,0.196 -0.689,0.389 -0.097,0.103 -0.009,0.054 0.301,0.079 0.095,0.107 0.153,0.431 0.31,-0.28 0.587,-0.68 0.48,-0.316 0.405,-0.086 0.484,-0.042 0.167,0.006 0.058,0.221 0.254,0.443 0.235,0.115 0.449,0.059 0.404,0.548 0.154,0.377 0.146,0.22 -0.012,0.148 0.024,0.124 0.106,0.188 0.053,0.158 -0.029,0.361 -0.236,0.625 0.175,0.566 -0.079,0.255 -0.041,0.406 0.151,0.271 0.045,0.157 -0.128,0.092 -0.894,0.224 -0.352,0.004 -0.091,0.135 0.271,0.04 0.493,-0.007 0.596,0.137 0.263,0.152 0.113,0.213 -0.029,0.169 -0.171,0.125 -0.335,-0.024 -0.323,-0.114 0.02,0.111 0.479,0.275 0.141,0.14 0.259,0.175 0.051,0.235 -0.063,0.239 -0.904,0.949 -0.744,0.6 -0.747,0.524 -1.199,1.006 -0.119,0.049 -0.217,0.019 -0.571,-0.16 -0.456,0.041 -0.864,0.194 -0.236,0.119 -0.474,0.347 -0.188,0.049 -0.508,0.071 -0.482,-0.048 -0.191,0.048 -0.232,0.17 -0.061,0.09 -0.064,0.292 -1.171,1.302 -0.31,0.44 -0.597,0.462 -0.656,0.808 -0.571,0.325 -0.199,0.447 -0.544,0.271 -1.005,0.069 -0.477,0.077 -0.559,-0.125 -0.418,0.194 -0.63,0.061 -0.306,-0.046 -1.221,0.428 -0.31,-0.406 -0.236,-0.157 -0.689,-0.026 -0.552,-0.168 -0.503,-0.032 -0.49,-0.075 -0.322,10e-4 -0.335,0.044 -0.521,-0.011 -0.289,0.224 -0.977,-0.068 -0.412,-0.203 -0.338,-0.042 -0.454,0.045 -0.434,0.151 -0.95,-0.173 -1.007,0.146 -0.879,-0.098 -0.246,-0.097 -1.386,0.267 -0.542,-0.153 -0.478,0.408 -0.328,-0.085 -0.355,0.06 -0.111,-0.076 -0.237,0.054 -0.153,0.222 -0.201,0.025 -0.334,0.392 -0.562,0.313 -0.823,1.699 -0.077,0.649 -0.309,0.441 -0.273,0.06 -0.225,0.01 -1.423,0.324 -0.633,0.256 0.172,0.203 -0.208,0.151 -0.336,0.063 -0.363,0.186 -0.236,0.208 -0.116,0.289 -0.729,0.471 -0.847,1.083 -0.405,0.79 -0.492,0.571 -0.347,0.217 -0.247,0.034 -0.252,-0.068 -0.419,-0.267 -0.308,-0.03 -0.767,-0.373 -1.781,-0.375 0.269,0.14 0.235,0.231 0.471,0.06 0.478,-0.005 0.997,0.466 0.489,0.159 0.297,0.14 0.254,0.311 -0.182,0.609 -0.184,0.502 -0.25,0.384 -0.858,0.983 -0.416,0.329 -0.723,1.17 -0.749,0.547 -0.401,0.335 -0.427,0.528 -1.002,0.398 -0.372,0.101 -0.343,-0.054 -0.417,0.323 -0.495,0.198 -0.146,0.3 -1.188,0.802 -0.456,0.101 -0.388,0.213 -0.115,0.361 -0.347,0.218 -0.096,0.167 -0.292,0.503 -0.542,0.648 -0.66,0.109 -0.241,0.225 -0.279,0.363 -0.395,0.249 -0.778,-0.117 0.189,0.152 0.696,0.237 0.072,0.352 -0.349,0.084 -0.73,0.467 -0.983,0.805 z m -71.844,-141.177 -0.036,0.068 -0.606,-0.313 -0.234,-0.185 -0.076,-0.137 -0.054,-0.279 -0.032,-0.422 0.121,-0.204 0.273,0.015 0.292,0.162 0.443,0.463 -0.126,0.137 -0.006,0.303 0.05,0.286 -0.009,0.106 z m 37.593,3.183 0.321,0.066 0.302,-0.081 0.22,0.077 0.139,0.234 0.091,0.243 0.044,0.251 -0.119,0.178 -0.496,0.155 -0.338,-0.077 -0.362,-0.208 -0.168,0.092 -0.413,-0.151 -0.205,-0.208 -0.167,-0.297 0,-0.182 0.435,-0.206 0.171,-0.161 0.545,0.275 z m -29.542,3.836 0.086,0.096 0.163,-0.082 0.126,-0.263 0.077,-0.05 0.119,0.05 0.392,0.471 0.301,0.493 0.319,0.35 0.507,0.311 1.107,1.01 0.326,0.68 0.344,1.052 0.308,0.798 0.271,0.549 0.291,0.436 0.465,0.486 0.416,-0.354 0.178,-0.09 0.153,0.147 0.145,0.366 -0.077,0.163 -0.181,0.207 -0.298,0.241 -0.417,0.018 -0.2,0.07 -0.327,0.382 -0.26,0.456 -0.363,0.153 -0.684,0.763 -0.376,0.284 -0.554,0.076 -1.149,-0.596 -0.716,0.083 -0.585,-0.122 -0.653,-0.631 -0.507,-0.358 -0.981,-0.517 -0.064,-0.077 -0.042,-0.175 -0.02,-0.273 -0.044,-0.184 -0.069,-0.093 -0.154,0.008 -0.158,0.181 -0.303,0.156 -0.461,-0.035 -0.2,-0.108 -0.153,-0.17 -0.083,-0.2 -0.013,-0.229 -0.042,-0.177 -0.072,-0.125 -0.167,-0.003 -0.262,0.119 -0.103,0.146 0.058,0.174 -0.048,0.103 -0.458,0.001 -0.18,-0.102 -0.345,-0.322 -0.151,-0.327 -0.194,-0.583 0.019,-0.158 0.124,-0.356 0.161,-0.249 1.04,-0.146 0.486,-0.141 0.529,-0.407 0.618,-0.706 0.134,-0.21 0.016,-0.154 -0.045,-0.167 -0.193,-0.409 -0.065,-0.28 0.062,-0.133 0.248,-0.012 -0.13,-0.159 -0.111,-0.225 -0.039,-0.141 0.006,-0.225 0.197,-0.049 0.243,0.112 0.469,0.646 0.187,0.125 0.321,0.098 -0.341,-0.444 -0.354,-0.938 -0.044,-0.325 0.009,-0.181 0.093,-0.508 0.083,-0.208 0.107,-0.137 0.336,-0.293 0.539,-0.205 0.275,-0.027 0.279,0.166 0.244,0.318 0.542,0.517 0.081,0.211 -0.009,0.098 -0.209,0.141 -0.026,0.129 0.08,0.199 z m 50.541,-1.174 0.113,0.465 0.071,0.146 -0.105,0.22 -0.422,0.438 -0.923,0.178 -0.465,-0.207 0.214,0.627 0.046,0.263 -0.065,0.111 -0.194,-0.033 -0.321,-0.177 -0.185,-0.212 -0.048,-0.247 -0.067,-0.055 -0.087,0.138 -0.084,-0.031 -0.191,-0.369 -0.141,-0.138 -0.927,-0.22 -0.046,-0.099 0.048,-0.171 0.143,-0.244 0.208,-0.082 0.524,0.109 0.042,-0.063 0.035,-0.307 0.039,-0.121 0.363,0.031 0.228,-0.066 0.126,0.158 0.124,0.367 0.176,-0.067 0.255,0.053 0.284,-0.134 0.435,-0.326 0.339,-0.121 0.458,0.186 z m 3.934,0.591 0.144,0.404 0.024,0.209 -0.199,0.246 -0.75,0.455 -0.457,0.395 -0.231,0.088 -0.308,-0.088 -0.374,0.183 -0.148,-0.024 0.166,-0.323 0.591,-0.93 0.496,-0.095 0.162,-0.195 0.137,0.063 0.079,-0.162 0.014,-0.24 0.173,-0.184 0.156,0.002 0.325,0.196 z m 28.386,1.402 -0.072,0.048 -0.735,-0.365 -0.054,-0.292 0.36,-0.325 0.292,-0.175 0.225,-0.025 0.224,0.055 0.209,0.351 -0.253,0.32 -0.196,0.408 z m -199.621002,-0.289 -0.231,0.301 -0.369,-0.314 -0.096,-0.156 0.426,-0.417 0.188,0.016 0.396,0.248 0.148,0.219 -0.462,0.103 z m 122.165002,0.026 0.373,0.538 -0.003,0.261 -0.048,0.434 -0.107,0.329 -0.165,0.226 -0.231,0.113 -0.297,0.001 -0.128,-0.094 0.096,-0.334 0.072,-0.099 0.012,-0.295 -0.048,-0.49 -0.06,-0.302 -0.167,-0.173 -0.12,-0.007 -0.033,0.16 0.055,0.327 -0.038,0.422 -0.13,0.517 -0.099,0.243 -0.176,-0.123 -0.083,-0.197 0.022,-0.325 -0.047,-0.295 0.044,-0.313 0.12,-0.467 0.169,-0.313 0.219,-0.159 0.256,0.011 0.292,0.181 0.25,0.223 z m -15.88,1.413 -0.229,0.068 -0.042,-0.017 0.02,-0.217 -0.017,-0.109 -0.062,-0.078 0.202,-0.173 0.029,-0.135 -0.064,-0.104 -0.276,-0.197 -0.079,-0.179 0.015,-0.157 0.108,-0.135 0.191,0.021 0.411,0.263 0.188,0.363 0.086,0.269 -0.136,0.04 -0.107,0.108 -0.112,0.229 -0.126,0.14 z m 67.851,2.007 -0.354,0.091 -0.262,-0.047 -0.17,-0.186 -0.13,-0.252 -0.161,-0.636 0.06,-0.297 0.019,-0.534 0.029,-0.201 0.063,-0.1 0.368,-0.189 0.22,0.021 0.323,0.205 0.697,0.062 0.173,0.188 0.042,0.114 -0.003,0.14 -0.049,0.166 -0.345,0.483 -0.166,0.332 -0.118,0.396 -0.236,0.244 z m -37.058,-2.183 0.063,0.494 -0.252,0.668 -0.079,0.12 -0.098,0.044 -0.095,-0.082 -0.283,-0.524 -0.077,-0.328 0.104,-0.164 0.219,-0.205 0.155,-0.1 0.194,0.086 0.068,-0.145 0.081,0.136 z m 30.841,4.516 -0.194,0.052 -0.229,-0.147 -0.082,-0.252 -0.043,-0.256 0.041,-0.132 0.103,-0.125 0.139,-0.285 0.176,-0.446 0.274,-0.3 0.602,-0.278 0.085,-0.099 0.269,-0.787 0.091,-0.135 0.308,-0.08 0.033,-0.102 -0.109,-0.195 0,-0.201 0.109,-0.208 0.15,-0.154 0.389,-0.151 0.352,0.028 0.09,0.058 0.079,0.139 0.108,0.371 0.014,0.084 -0.163,0.327 -0.427,0.502 -0.264,0.419 -0.053,0.137 -0.024,0.176 -0.099,0.214 -0.308,0.513 -0.208,0.494 -0.206,0.271 -0.564,0.255 -0.439,0.293 z m -31.663,-2.944 -0.23,0.092 -0.144,-0.328 -0.117,-0.068 -0.052,-0.219 -0.241,-0.043 0.017,-0.345 0.065,-0.169 0.224,-0.134 0.177,0.051 0.168,0.343 0.082,0.271 0.071,0.347 -0.02,0.202 z m -26.667,1.633 -0.066,0.466 -0.346,-0.125 -0.153,-0.168 -0.13,-0.383 -0.015,-0.097 0.029,-0.147 0.141,-0.334 0.095,-0.122 0.226,0.142 0.105,0.196 0.083,0.31 0.031,0.262 z m -0.625,1.612 -0.089,0.246 -0.11,0.069 -0.218,0.288 -0.089,0.039 -0.127,-0.183 -0.107,-0.299 -0.045,-0.047 -0.068,0.012 -0.147,0.19 -0.065,-0.003 -0.054,-0.128 -0.026,-0.255 0.002,-0.384 0.069,-0.593 0.004,-0.216 -0.037,-0.165 0.031,-0.15 0.099,-0.136 0.127,-0.064 0.298,0.054 0.236,0.239 0.115,0.312 0.23,0.246 0.08,0.173 -0.109,0.755 z m -4.571,1.701 -0.116,0.01 -0.161,-0.138 -0.903,-0.468 -0.118,-0.142 0.106,-0.197 0.329,-0.254 0.222,-0.26 0.171,-0.398 0.519,0.205 0.194,0.188 0.074,0.164 0.032,0.227 -0.029,0.556 -0.175,0.118 -0.145,0.389 z m 75.677,1.815 -0.22,0.049 -0.318,-0.471 -0.667,-0.537 -0.253,-0.39 -0.009,-0.189 0.02,-0.297 0.073,-0.363 0.232,-0.398 0.246,-0.064 0.351,0.088 0.255,0.286 0.278,0.791 0.185,0.385 0.058,0.279 -0.092,0.131 0.008,0.129 0.042,0.08 -0.016,0.146 -0.074,0.214 -0.099,0.131 z m -83.239,-0.435 -0.155,0.028 -0.291,-0.122 -0.426,-0.272 -0.32,-0.289 -0.214,-0.305 -0.027,-0.21 0.161,-0.117 0.244,-0.058 0.581,0.039 0.276,0.116 0.365,0.444 0.077,0.251 0.012,0.162 -0.047,0.14 -0.236,0.193 z m 71.728,1.616 -0.229,0.083 -0.309,-0.401 -0.002,-0.223 0.06,-0.537 0.564,-0.135 0.235,0.324 0.113,0.319 -0.432,0.57 z m 9.28,-0.982 1.465,0.67 0.143,0.243 0.07,0.217 0.041,0.241 0.003,0.495 -0.03,0.198 -0.143,0.478 -0.01,0.149 0.115,1.591 -0.012,0.862 -0.103,0.716 -0.21,0.573 -0.316,0.429 -0.24,0.246 -1.066,0.604 -0.755,0.156 -0.796,0.028 -1.014,0.162 -0.463,-0.034 -0.239,-0.071 -0.17,-0.121 -0.199,-0.382 -0.228,-0.646 -0.188,-0.73 -0.225,-1.302 -0.004,-0.155 0.217,-1.068 0.288,-0.723 0.508,-1.078 0.574,-1.057 0.146,-0.175 0.259,-0.186 0.649,-0.302 0.538,0.076 0.237,-0.038 0.296,-0.141 0.326,-0.034 0.536,0.109 z m -30.646,4.396 -0.12,0.008 -0.19,-0.113 -0.436,-0.448 -0.088,-0.194 -0.044,-0.227 0,-0.26 0.039,-0.27 0.133,-0.54 -0.254,-0.43 -0.062,-0.245 0.03,-0.139 0.142,-0.333 0.039,-0.208 0.143,-0.296 0.37,-0.575 0.371,0.136 0.331,0.471 0.086,0.318 -0.026,0.337 0.029,0.487 0.083,0.637 0.022,0.46 -0.04,0.286 -0.142,0.535 -0.12,0.248 -0.158,0.232 -0.138,0.123 z m -63.785,-1.897 -0.105,0.024 -0.385,-0.445 0.081,-0.383 0.357,0.392 0.051,0.244 0.001,0.168 z m 100.196,1.542 -1.368,0.01 -0.744,-0.053 -0.299,-0.113 -0.26,-0.176 -0.295,-0.572 -0.189,-0.592 -0.009,-0.252 0.05,-0.227 0.07,-0.138 0.918,-0.198 0.752,0.247 0.647,0.29 0.833,0.049 0.253,0.11 0.097,0.081 0.067,0.149 0.095,0.681 0.009,0.362 -0.025,0.274 -0.602,0.068 z m -99.756,-1.478 0.316,0.079 0.234,-0.059 0.171,0.301 0.066,0.305 -0.022,0.104 -0.074,0.042 -0.494,-0.337 -0.184,-0.207 -0.062,-0.174 0.049,-0.054 z m 3.555,4.288 -0.141,0.609 -0.054,-0.057 -0.097,-0.291 -0.195,-0.14 -0.221,-0.324 0.003,-0.698 0.085,-0.318 -0.019,-0.445 0.22,-0.268 0.163,0.315 0.045,0.535 -0.041,0.263 0.162,0.272 0.075,0.069 0.04,0.218 -0.025,0.26 z m 126.905,2.503 -0.348,0.198 -0.186,-0.243 0.131,-0.068 0.191,-0.292 0.26,-0.257 0.109,-0.207 0.437,-0.095 0.149,0.011 0.057,0.074 -0.248,0.318 -0.552,0.561 z m -127.446,0.368 0.354,0.057 0.452,-0.009 -0.078,0.553 -0.173,0.354 -0.137,0.1 -0.06,-0.193 -0.266,-0.443 -0.092,-0.419 z m 70.076,5.108 0.28,0.085 0.212,-0.009 0.047,0.102 -0.223,0.339 -0.137,0.064 -0.247,-0.243 -0.186,-0.298 -0.052,-0.181 -0.015,-0.199 0.043,-0.035 0.278,0.375 z m -1.691,3.356 0.36,0.268 0.36,0.152 0.579,0.082 0.083,0.056 0,0.126 -0.083,0.195 -0.193,0.25 -0.138,0.007 -0.32,-0.176 -0.117,-0.09 -0.129,-0.201 -0.065,-0.019 -0.084,0.067 -0.022,0.088 0.039,0.11 -0.053,0.031 -0.388,-0.076 -0.061,-0.064 0.031,-0.216 0.27,-0.315 -0.237,-0.097 -0.076,-0.117 -0.352,0.198 -0.195,0.048 -0.308,-0.139 -0.033,-0.723 -0.037,-0.265 -0.14,-0.18 -0.083,-0.19 -0.135,-0.144 -0.278,-0.146 -0.226,-0.363 -0.047,-0.165 0.031,-0.125 0.138,-0.171 0.799,0.368 0.482,0.348 0.459,0.425 0.24,0.314 0.021,0.204 -0.06,0.203 -0.141,0.203 0.109,0.239 z m -2.663,1.51 -0.146,0.076 -0.157,-0.043 -0.133,-0.196 -0.108,-0.35 -0.175,-0.263 -0.395,-0.328 -0.068,-0.129 -0.112,-0.442 -0.022,-0.442 -0.084,-0.401 -0.004,-0.198 0.073,-0.296 0.332,-0.07 0.26,0.117 0.053,0.079 0.085,0.172 0.056,0.21 0.315,0.567 0.184,0.45 0.25,0.926 0.001,0.176 -0.067,0.187 -0.138,0.198 z m -0.687,2.115 0.097,0.081 0.121,-0.046 0.199,-0.331 0.446,-0.956 0.125,-0.09 0.188,0.015 0.659,0.615 0.242,0.342 0.131,0.475 0.136,0.185 0.519,0.245 0.499,0.082 0.65,0.248 0.235,0.186 0.519,0.903 0.06,0.055 0.59,0.367 0.906,0.816 0.229,0.121 0.882,0.268 0.316,0.2 0.306,0.304 0.34,0.555 0.398,0.869 0.312,1.38 0.024,0.271 -0.038,0.161 -0.113,0.171 -0.51,0.562 0.043,0.095 0.48,-0.035 1.068,-0.345 0.65,0.248 0.226,0.039 0.052,-0.014 0.235,-0.431 0.259,0.067 0.378,0.418 0.244,0.337 0.108,0.256 -0.029,0.145 -0.25,0.05 0.611,0.245 0.531,0.388 -0.114,0.252 -0.567,0.56 -0.583,0.488 -0.679,0.73 -0.169,0.111 -0.091,0.006 -0.375,-0.136 -0.539,-0.345 -1.661,-0.796 -0.513,-0.169 -0.651,-0.099 -0.094,-0.188 -0.155,-1.21 -0.293,-0.215 -1.005,-0.254 -0.292,-0.146 -0.014,-0.245 0.063,-0.421 -0.138,-0.206 -0.338,0.009 -0.332,0.087 -0.534,0.286 -0.251,0.264 -0.094,0.286 -0.059,0.61 -0.066,0.288 -0.187,0.377 -0.825,0.972 -0.335,0.292 -0.333,0.083 -0.132,0.093 -0.224,0.357 -0.333,0.872 -0.136,0.25 -0.22,0.254 -0.456,0.388 -0.466,0.31 -0.776,0.359 -0.434,0.122 -0.289,-0.121 -0.198,-0.819 -0.416,-2.429 -0.069,-0.165 -0.084,-0.103 -0.101,-0.04 -1.395,0.315 -0.769,-0.035 -0.761,0.549 -0.192,0.04 -0.386,-0.018 -0.278,-0.087 -0.071,-0.06 -0.047,-0.237 0.014,-0.25 0.097,-0.27 0.344,-0.732 0.28,-0.454 0.129,-0.141 1.303,-0.817 0.317,-0.27 0.159,-0.277 0,-0.285 -0.062,-0.366 -0.226,-0.895 -0.057,-0.822 0.002,-0.41 0.085,-0.631 0.326,-1.54 0.11,-0.754 0.208,-2.721 0.111,-0.787 0.162,-0.722 0.155,-0.435 0.415,-0.873 0.322,-0.351 0.405,-0.244 0.089,0.028 0.077,0.102 0.149,0.371 0.565,0.343 0.182,0.332 0.128,0.368 0.07,0.478 -0.07,0.208 -0.269,0.314 -0.046,0.132 0.008,0.108 0.516,0.492 0.385,1.188 z m 20.424,8.304 -0.202,0.295 -0.603,-0.104 -0.082,-0.09 -0.022,-0.108 0.097,-0.14 0.619,-0.133 0.263,-0.01 0.134,0.044 0.016,0.053 -0.22,0.193 z m 2.707,3.781 -0.296,0.062 -0.389,-0.14 -0.38,-0.272 -0.863,-0.871 0.648,-0.591 1.039,0.685 0.312,0.44 -0.071,0.687 z m -3.365,-0.48 0.237,0.268 0.248,-0.019 0.137,0.218 0.327,0.68 0.031,0.113 -0.015,0.22 -0.172,0.281 -0.179,0.148 -0.375,0.217 -0.424,0.094 -0.23,-0.152 -0.65,-0.627 -0.597,-0.736 -0.191,-0.412 0.083,-0.171 0.253,-0.119 0.512,-0.123 0.845,0.067 0.16,0.053 z m -11.574,3.211 0.112,0.172 0.034,0.26 -0.044,0.346 -0.072,0.315 -0.1,0.283 -0.247,0.476 -0.77,0.811 -0.289,0.439 -0.217,0.263 -1.256,1.166 -0.156,0.057 -0.164,-0.022 -0.344,-0.173 -0.349,-0.031 -0.904,0.468 -0.044,-0.08 -0.04,-0.503 -0.091,-0.279 -0.399,-0.597 -0.026,-0.14 0.005,-0.174 0.032,-0.135 0.45,-0.561 1.018,-2.057 0.244,-0.102 0.501,0.23 0.238,0.074 0.17,-0.011 0.728,-0.435 0.692,0.052 0.631,-0.255 0.296,-0.001 0.229,0.044 0.132,0.1 z m 32.733,2.482 -0.194,0.024 -0.379,-0.046 -0.407,-0.126 -0.223,-0.144 -0.201,-0.313 -0.039,-0.343 -0.378,-0.511 -0.423,-0.172 -0.233,-0.356 0.239,-0.025 0.34,0.078 0.503,0.155 0.45,0.203 0.65,0.449 0.212,0.415 0.211,0.304 0.064,0.23 -0.056,0.101 -0.136,0.077 z m -10.281,-0.424 -0.149,0.053 -0.561,-0.075 -0.69,-0.286 -0.356,-0.269 0.018,-0.083 0.157,-0.043 0.178,0.042 0.298,0.188 0.802,0.095 0.258,0.108 0.081,0.162 -0.036,0.108 z m 25.754,0.363 0.539,0.065 0.327,-0.023 0.141,0.096 0.132,0.295 -0.169,0.421 -0.191,0.161 -0.312,0.047 -0.505,-0.137 -0.179,-0.09 -0.155,-0.226 0.072,-0.162 0.25,-0.056 0.042,-0.065 -0.064,-0.125 0.003,-0.109 0.069,-0.092 z m -41.315,0.892 0.222,0.165 0.365,0.548 0.139,0.277 0.041,0.371 -0.097,0.495 -0.049,0.463 -0.136,0.348 -0.252,0.439 -0.224,0.511 -0.195,0.583 -0.161,0.385 -0.128,0.188 -0.138,0.098 -0.148,0.007 -0.225,-0.209 -0.303,-0.428 -0.247,-0.262 -0.317,-0.18 -0.169,-0.243 -0.031,-0.24 -0.011,-0.78 0.014,-0.389 0.042,-0.326 0.071,-0.262 0.158,-0.361 0.44,-0.784 0.266,-0.301 0.165,-0.07 0.437,0.057 0.177,-0.02 0.146,-0.09 0.148,0.01 z m 40.735,3.195 0.063,0.052 0.076,-0.062 0.058,0.053 0.039,0.168 0.064,0.116 0.164,0.152 0.055,0.108 -0.004,0.109 -0.139,0.167 -0.087,0.004 -0.669,-0.386 -0.18,-0.394 -0.015,-0.2 0.07,-0.183 0.103,-0.088 0.136,0.006 0.161,0.097 0.105,0.281 z m -78.619,0.208 -0.115,0.014 -0.257,-0.303 -0.057,-0.154 0.339,-0.098 0.232,0.27 -0.02,0.132 -0.122,0.139 z m 79.175,2.817 -0.068,0.068 -0.064,-0.016 -0.209,-0.312 -0.281,-0.126 -0.104,-0.123 -0.849,-0.646 -0.092,-0.283 -0.015,-0.227 0.282,-0.111 0.566,-0.103 0.492,0.003 0.462,0.135 0.094,0.145 0.243,0.263 -0.06,0.316 -0.015,0.398 -0.101,0.194 -0.155,0.147 -0.126,0.278 z m -38.446,3.69 -0.385,0.067 -0.001,-0.083 0.161,-0.235 0.596,-0.206 0.443,-0.061 -0.104,0.2 -0.263,0.158 -0.447,0.16 z m 28.9,2.773 -0.253,0.045 -0.115,-0.12 -0.007,-0.343 0.083,-0.26 0.291,-0.539 0.261,-0.605 0.152,-0.147 0.307,0.1 0.179,0.174 0.187,0.291 0.081,0.223 -0.071,0.329 -0.219,0.293 -0.253,0.2 -0.623,0.359 z m 10.74,-0.713 -0.098,0.392 -0.326,-0.144 -0.505,-0.296 -0.199,-0.197 -0.07,-0.216 -0.007,-0.299 0.151,-0.049 0.382,-0.028 0.319,0.416 0.092,0.064 0.261,0.357 z m -43.942,3.348 -0.289,0.039 0.126,-0.331 0.108,-0.16 0.119,-0.102 0.24,-0.038 0.16,0.133 -0.143,0.241 -0.321,0.218 z m -0.62,0.815 -0.09,0.017 -0.021,-0.067 0.072,-0.227 0.119,-0.027 0.131,-0.253 0.12,0.088 -0.044,0.141 -0.162,0.214 -0.125,0.114 z m 31.223,3.207 -0.17,0.395 -0.227,-0.049 -0.082,0.082 -0.062,0.004 0.103,-0.371 0.014,-0.25 -0.052,-0.253 0.075,-0.129 0.303,-0.007 0.003,0.291 0.037,0.109 0.071,0.05 -0.013,0.128 z m -29.627,8.125 -0.044,0.042 -0.121,-0.037 -0.047,0.343 -0.046,0.032 -0.083,-0.211 0.063,-0.181 -0.009,-0.125 0.023,-0.092 0.121,-0.206 0.071,-0.048 0.045,0.018 0.037,0.259 -0.01,0.206 z m 50.441,-0.204 0.236,0.154 0.062,0.567 -0.443,-0.033 -0.506,-0.38 -0.1,-0.277 0.011,-0.048 0.067,-0.048 0.128,0.066 0.125,-0.1 0.125,-0.032 0.295,0.131 z m -50.863,4.029 -0.077,0.089 -0.138,-0.101 -0.006,-0.257 0.133,-0.196 0.105,0.009 0.095,0.104 -0.023,0.139 -0.089,0.213 z m 0.979,0.602 -0.099,0.065 -0.067,-0.005 0.075,-0.452 -0.087,-0.161 -0.005,-0.082 0.038,-0.075 0.048,-0.016 0.117,0.14 0.057,0.146 0.025,0.145 -0.007,0.143 -0.033,0.098 -0.062,0.054 z m 1.635,1.98 -0.231,0.509 -0.185,0.488 -0.257,0.915 -0.147,0.033 -0.128,-0.22 0.369,-1.072 0.017,-0.12 -0.017,-0.103 -0.112,-0.159 -0.111,0.183 -0.521,1.209 -0.135,0.193 -0.111,0.107 -0.089,0.021 -0.222,-0.025 -0.446,0.344 0.75,-1.433 0.008,-0.109 -0.14,-0.067 -0.056,0.037 -0.608,0.904 -0.347,0.347 -0.232,-0.105 -0.059,-0.095 0.021,-0.105 0.591,-0.913 0.544,-0.656 0.228,-0.414 0.092,-0.391 0.041,-0.287 -0.003,-0.315 0.028,-0.087 0.031,0.016 0.035,0.119 0.009,0.333 -0.124,0.681 -0.1,0.334 -0.119,0.275 0.05,0.06 0.219,-0.156 0.185,-0.33 0.149,-0.504 0.096,-0.439 0.092,-0.697 0.031,0.024 0.043,0.139 0.099,0.099 0.155,0.058 0.088,0.089 0.065,0.234 0.063,0.103 0.232,0.087 0.089,0.074 0.064,0.254 -0.006,0.134 0.032,0.086 0.069,0.038 -0.079,0.275 z m -2.924,0.298 -0.144,0.038 -0.169,-0.073 0.088,-0.371 0.147,-0.154 0.366,-0.154 0.063,-0.095 0.117,-0.047 0.172,0 0.191,-0.139 0.211,-0.278 0.073,-0.038 -0.148,0.404 -0.156,0.302 -0.811,0.605 z m 3.23,0.31 -0.143,0.069 -0.103,-0.007 0.019,-0.168 0.141,-0.331 0.08,-0.291 0.019,-0.252 0.062,-0.22 0.105,-0.189 0.105,-0.094 0.157,0.003 0.032,0.613 -0.044,0.287 -0.105,0.24 -0.144,0.193 -0.181,0.147 z m 50.046,0.532 0.033,0.122 -0.433,-0.087 -0.152,-0.077 -0.013,-0.081 0.021,-0.126 0.086,-0.147 0.198,-0.113 0.108,0.058 0.23,0.153 0.031,0.092 -0.109,0.206 z m -195.278,6.263 0.23,-0.313 0.507,-0.544 0.276,-0.39 0.029,0.385 -0.409,0.645 -0.522,0.32 -0.111,-0.103 z m -0.988,1.405 -0.064,0.006 -0.025,-0.101 0.016,-0.208 0.089,-0.353 0.042,-0.082 0.364,0.063 0.054,0.024 0.013,0.068 -0.028,0.111 -0.117,0.159 -0.344,0.313 z m -4.851,1.688 0.257,0.281 0.617,-0.179 0.115,0.035 0.117,0.107 0.128,0.229 0.14,0.349 0.031,0.38 -0.056,0.136 -0.111,0.15 -0.983,0.602 -0.026,0.058 0.02,0.054 0.091,0.058 0.197,-0.008 0.779,-0.149 0.042,-0.104 0.055,-0.474 0.107,-0.252 0.009,-0.19 -0.071,-0.455 0.004,-0.183 0.543,-0.037 0.34,-0.169 0.347,-0.314 0.079,0.009 -0.05,0.566 -0.048,0.173 -0.333,0.688 -0.191,0.604 -0.093,0.596 -0.016,0.982 -0.083,0.331 -0.151,0.204 -0.943,0.355 -0.486,-0.023 -0.433,-0.323 -0.204,-0.221 0.154,-0.269 0.106,-0.013 0.305,0.053 0.235,0.101 0.105,0.004 -0.018,-0.063 -0.67,-0.508 -0.491,-0.231 -0.148,-0.259 -0.004,-0.201 -0.039,-0.112 -0.39,-0.705 -0.076,-0.279 -0.051,-0.396 0,-0.406 0.095,-0.661 0.043,-0.071 0.16,0.005 0.276,0.082 0.668,0.063 z m 6.79,0.805 -0.086,0.171 -0.198,0.268 -0.131,0.106 -0.064,-0.055 -0.177,-0.029 -0.189,-0.267 -0.147,-0.106 -0.098,-0.006 -0.048,0.097 -0.012,0.129 0.023,0.161 -0.016,0.074 -0.056,-0.014 -0.056,-0.076 -0.055,-0.137 -0.012,-0.139 0.033,-0.142 0.137,-0.19 0.428,-0.395 0.131,-0.071 0.142,0.016 0.229,0.185 0.049,0.054 0.173,0.366 z m 1.088,3.728 -0.056,0.016 -0.185,-0.057 -0.609,-0.791 -0.433,-0.29 -0.295,-0.393 -0.3,-0.251 0.184,-0.41 0.16,0.051 0.561,0.333 0.448,0.323 0.254,0.21 0.533,0.898 -0.04,0.128 -0.222,0.233 z m 140.073,-0.637 -0.003,0.14 -0.182,-0.027 -0.099,-0.08 -0.08,-0.126 -0.018,-0.095 0.068,-0.094 0.211,0.057 0.103,0.225 z m -138.162,0.87 -0.016,0.033 -0.291,0 -0.081,-0.048 -0.051,-0.098 -0.021,-0.148 0.047,-0.179 0.172,-0.342 0.005,-0.146 0.036,-0.063 0.121,0.172 0.051,0.16 0.028,0.659 z m 1.727,0.829 0.128,1.477 -0.009,0.471 -0.188,0.307 -0.133,0.513 -0.154,0.23 -0.146,-0.306 -0.013,-0.51 -0.039,-0.406 -0.047,-0.195 0.056,-0.762 -0.065,0.056 -0.173,0.334 -0.192,0.023 -0.345,-0.379 -0.174,-0.308 -0.028,-0.322 -0.228,-0.339 -0.023,-0.12 0.019,-0.126 0.187,-0.339 0.076,-0.229 0.066,-0.471 0.076,-0.184 0.177,0.026 0.316,0.214 0.329,0.232 0.302,0.31 0.225,0.803 z m -8.984,-1.192 0.285,0.433 0.084,0.386 -0.035,0.455 -0.451,0.172 -0.237,-0.137 -0.103,0.025 -0.156,0.136 0.189,0.061 0.265,0.222 0.232,0.289 0.327,0.052 0.436,0.201 -0.33,0.362 -0.05,0.208 0.412,0.574 0.039,0.144 0.132,0.029 0.307,-0.046 0.039,0.045 0,0.119 -0.188,0.333 0.02,0.066 0.17,0.053 0.327,0.002 0.074,0.33 -0.296,0.299 -0.562,-0.385 -0.25,-0.385 -0.143,-0.357 -0.173,-0.202 -0.522,-0.449 -0.793,-0.974 -0.205,-0.141 -0.206,-0.387 -0.06,-0.187 0.005,-0.125 0.08,-0.066 0.237,-0.044 0.003,-0.194 -0.912,-0.338 -0.102,-0.069 -0.118,-0.236 0.063,-0.035 0.502,0.041 0.538,-0.114 0.331,-0.087 0.13,-0.106 0.27,-0.138 0.112,0.008 0.283,0.157 z m 143.192,2.084 -0.198,0.062 -0.583,-0.123 -0.243,-0.089 -0.717,-0.334 -1.366,-0.492 -0.466,-0.244 -0.096,-0.184 0.247,-0.384 0.14,-0.156 0.152,-0.097 1.437,-0.177 0.561,0.086 0.66,0.787 0.379,0.53 0.154,0.425 0.003,0.205 -0.064,0.185 z m -136.345,-1.135 -0.042,0.037 -0.116,-0.062 -0.111,-0.122 -0.191,-0.345 -0.063,-0.145 -0.041,-0.236 0.038,-0.042 0.083,0.025 0.058,0.039 0.301,0.568 0.084,0.283 z m 1.058,2.23 -0.089,0.21 -0.375,-0.506 -0.137,-0.143 -0.279,-0.54 -0.048,-0.232 0.012,-0.131 0.049,-0.048 0.086,0.034 0.081,0.059 0.54,0.599 0.15,0.281 0.01,0.417 z m 1.594,0.501 -0.215,0.062 0.072,-0.246 0.021,-0.146 -0.039,-0.137 -0.027,-0.265 -0.011,-0.627 0.21,-0.396 0.33,-0.011 -0.003,0.2 -0.14,0.89 -0.072,0.411 -0.056,0.151 -0.07,0.114 z m -7.467,2.005 -0.05,0.009 -0.093,-0.094 -0.064,-0.152 -0.039,-0.396 0.028,-0.162 0.025,-0.064 0.246,0.252 -0.053,0.607 z m 144.942,0.044 -0.116,0.032 -0.267,-0.037 -0.214,-0.114 -0.132,-0.146 0.867,-0.401 0.178,0.052 0.003,0.072 -0.13,0.215 -0.035,0.144 -0.063,0.109 -0.091,0.074 z m 67.42,0.284 -0.134,0.003 -0.03,-0.051 0.056,-0.174 0.149,-0.202 0.204,-0.056 -0.055,0.296 -0.19,0.184 z m -203.648,1.876 -0.047,0.075 -0.112,0 -0.178,-0.075 -0.133,-0.167 -0.16,-0.521 0.018,-0.09 0.055,-0.091 0.256,-0.188 0.092,0.021 0.034,0.137 0.152,0.307 0.045,0.09 0,0.356 -0.022,0.146 z m 203.374,-0.281 -0.207,0.447 -0.143,0.217 -0.133,0.07 -0.28,0.064 -0.591,0.07 -0.252,0.065 -0.036,0.298 0.037,0.156 0.086,0.124 0.109,0.035 0.245,-0.073 0.091,0.013 0.073,0.062 0.055,0.111 0.028,0.155 0.002,0.198 -0.043,0.239 -0.201,0.56 -0.254,0.31 -0.326,0.251 -0.08,0.096 -0.041,0.113 -0.041,0.366 -0.169,0.292 -0.524,0.738 -0.202,0.163 -0.001,0.129 -0.082,0.349 -0.156,0.28 -0.434,0.642 -0.107,0.227 -0.048,0.179 0.007,0.252 -0.02,0.111 -0.1,0.213 -0.138,0.199 -0.027,0.097 0.054,0.176 0.056,0.062 0.007,0.16 -0.043,0.259 0.183,-0.165 0.41,-0.589 0.308,-0.355 0.206,-0.12 0.144,-0.158 0.153,-0.349 0.21,-0.333 0.19,-0.109 0.087,0.064 0.074,0.164 -0.015,0.208 -0.103,0.252 0.008,0.074 0.242,-0.185 0.416,-0.153 0.15,0.021 0.305,0.229 0.253,-0.026 0.405,-0.133 0.076,0.061 -0.067,0.202 -0.159,0.193 -0.376,0.275 -0.905,0.539 -0.281,0.37 0.053,-0.011 0.195,-0.159 0.205,-0.085 0.215,-0.012 0.09,0.046 -0.035,0.104 -0.027,0.284 -0.548,0.553 0.129,-0.021 0.634,-0.252 0.385,0.348 0.529,-0.12 0.319,-0.117 -0.009,0.072 0.069,0.151 -0.002,0.245 0.032,0.034 0.151,-0.082 0.028,-0.09 -0.008,-0.435 0.047,-0.043 0.104,0.068 0.063,0.113 0.019,0.316 -0.069,0.317 -0.096,0.291 -0.234,0.423 0.03,0.182 -0.06,0.197 0.052,0.006 0.231,-0.184 0.014,-0.076 -0.018,-0.176 0.026,-0.086 0.192,-0.191 0.317,-0.227 0.104,-0.035 0.044,0.053 -0.016,0.14 0.094,-0.033 0.202,-0.207 0.188,-0.125 0.173,-0.043 0.18,-0.142 0.188,-0.241 0.202,-0.199 0.215,-0.157 0.093,-0.011 -0.032,0.261 0.042,0.296 0.006,0.253 0.042,0.053 0.166,-0.27 0.093,-0.099 0.11,-0.039 0.129,0.021 0.879,-0.097 0.267,0.067 0.302,0.176 0.38,0.273 0.14,0.247 0.026,0.311 -0.037,0.216 -0.274,0.272 -0.244,0.18 -0.144,0.179 -0.044,0.179 -0.057,0.11 -0.163,0.154 -0.724,0.432 0.173,0.012 0.417,-0.093 0.274,-0.02 0.015,0.063 -0.11,0.123 -0.209,0.123 -0.022,0.06 0.01,0.077 0.224,0.093 0.287,-0.045 0.241,0.066 -0.023,0.103 -0.192,0.335 -0.056,0.211 -0.255,0.177 -0.512,0.277 -0.131,0.106 0.029,0.022 0.469,-0.204 0.236,-0.052 0.15,-10e-4 0.169,-0.197 0.265,-0.065 0.259,0.124 0.395,-0.339 0.141,-0.044 0.24,0.039 0.155,-0.062 0.261,-0.231 0.197,-0.112 0.041,0.01 0.042,0.093 0.019,0.267 -0.046,0.236 -0.064,0.15 -0.212,0.331 -0.13,0.116 -0.121,0.044 -0.213,-0.018 -0.093,0.051 -0.2,0.259 -0.353,0.263 -0.22,0.102 0.139,0.142 0.051,0.274 -0.077,0.085 -0.379,0.084 -0.016,0.046 -0.135,0.061 -0.313,0.095 0.213,0.042 0.395,-0.067 0.042,0.046 -0.054,0.192 -0.105,0.198 -0.468,0.509 -0.006,0.051 0.073,0.249 0.091,0.188 0.113,0.133 0.26,0.007 0.192,-0.058 0.281,-0.339 0.62,-1.059 0.554,-0.296 0.461,-0.329 0.106,0.066 0.049,0.077 -0.017,0.08 -0.233,0.271 -0.122,0.223 -0.316,0.685 -0.121,0.322 -0.061,0.339 0.016,0.584 0.034,0.101 0.099,0.135 0.184,-0.116 0.313,-0.289 0.202,-0.276 0.158,-0.451 0.097,-0.173 0.105,0.002 0.094,0.099 0.023,0.217 0.087,0.296 0.052,0.3 -0.042,0.33 -0.042,0.18 -0.642,1.332 0.068,0.236 0.017,0.143 -0.02,0.151 -0.204,0.634 -0.197,0.395 -0.106,0.169 -0.126,0.104 -0.146,0.038 -0.131,-0.057 -0.116,-0.152 -0.102,-0.079 -0.089,-0.005 -0.165,0.028 -0.433,0.322 -0.089,0.017 -0.062,-0.043 -0.074,-0.169 0.059,-0.851 0.039,-0.282 -0.086,-0.218 0.091,-0.366 0.003,-0.139 -0.053,-0.052 -0.109,0.034 -0.166,0.184 -0.222,0.333 -0.241,0.296 -0.42,0.409 -0.186,0.081 -0.074,-0.02 -0.085,-0.056 -0.115,-0.171 10e-4,-0.151 0.05,-0.206 0.176,-0.487 0.343,-0.723 0.285,-0.516 0.055,-0.221 -0.08,-0.096 -0.064,-0.189 -0.109,-0.562 -0.138,-0.463 -0.164,-0.206 -0.406,-0.226 -0.075,0.055 -0.043,0.313 -0.479,0.896 -0.084,0.388 -0.06,0.144 -0.09,0.098 -0.209,0.119 0.057,-0.207 0.222,-0.46 -0.03,-0.045 -0.282,0.37 -0.215,0.205 -0.262,0.053 -0.16,-0.013 -0.155,0.057 -0.656,0.87 -0.024,0.29 -0.114,0.237 -0.323,0.427 -0.171,0.148 -0.24,0.026 -0.219,-0.074 -0.144,0.014 -0.341,0.133 -0.382,0.058 -0.158,-0.027 -0.101,-0.055 -0.194,-0.166 -0.023,-0.118 0.01,-0.069 0.099,-0.179 0.227,-0.225 0.187,-0.084 0.454,-0.113 0.333,-0.169 0.253,-0.25 0.113,-0.153 0.477,-0.786 0.604,-0.278 0.298,-0.227 0.208,-0.288 0.03,-0.102 -0.299,0.146 -0.154,0.036 -0.25,-0.054 -0.111,-0.098 -0.342,0.031 -0.476,-0.046 -0.069,0.076 -0.062,0.384 -0.062,0.203 -0.073,0.069 -0.106,0.04 -0.218,0.041 -0.557,-0.137 -0.103,-0.075 -0.142,-0.057 -0.615,0.125 -0.129,-0.012 0.122,-0.089 0.608,-0.281 0.064,-0.813 -0.038,-0.13 -0.17,0.114 -0.286,0.117 -0.195,-0.034 -0.089,-0.072 -0.082,0.061 -0.199,0.429 -0.117,0.054 -0.176,0.016 -0.375,0.156 -0.737,0.103 -0.146,0.113 -0.5,-0.04 -1.462,-0.235 -0.523,0.023 -0.629,-0.144 -0.116,-0.062 -0.881,0.025 -0.263,-0.033 0.018,-0.179 -0.028,-0.046 -0.256,0.197 -0.227,0.128 -0.292,0.109 -0.92,0.19 -0.494,0.041 -0.287,-0.132 -0.114,-0.131 -0.171,-0.427 -0.117,-0.537 0.001,-0.097 0.06,-0.187 0.193,-0.259 0.873,-0.686 0.703,-0.696 0.296,-0.363 0.287,-0.13 0.469,-0.302 0.015,-0.036 -0.455,0.038 -0.32,-0.083 -0.327,-0.033 -0.621,0.08 -0.626,0 -0.002,-0.155 0.293,-0.292 0.622,-0.503 0.063,-0.002 -0.19,0.234 -0.054,0.175 0.082,0.116 0.095,0.074 0.356,0.031 0.082,-0.102 0.128,-0.54 0.27,-0.626 0.146,-0.453 0.253,-0.346 0.126,-0.052 0.112,0.065 0.372,0.083 0.383,0.317 0.124,0.027 0.042,-0.029 -0.14,-0.093 -0.116,-0.149 -0.048,-0.14 0.14,-0.438 0.164,-0.126 0.029,-0.087 -0.328,-10e-4 -0.264,-0.123 -0.078,-0.199 0.015,-0.351 0.086,-0.209 0.211,-0.277 0.257,-0.185 0.153,0.047 0.295,0.249 0.182,-0.07 -0.021,-0.08 -0.277,-0.396 -0.088,-0.294 0.008,-0.14 0.6,-1.407 0.293,-0.759 0.4,-1.161 0.092,-0.186 0.203,-0.344 0.084,-0.094 0.261,-10e-4 0.162,-0.042 -0.237,-0.152 -0.085,-0.106 -0.01,-0.112 0.065,-0.117 0.092,-0.087 0.31,-0.188 0.22,-0.31 0.134,-0.366 -0.02,-0.125 -0.069,-0.124 0.004,-0.067 0.167,-0.076 0.425,-0.436 0.055,-0.083 0.155,-0.583 0.19,-0.259 0.178,-0.133 0.284,-0.165 0.872,-0.401 0.51,-0.359 0.347,0.02 0.102,0.25 0.493,0.166 0.086,-0.178 -0.115,-0.218 0.096,-0.088 0.406,-0.079 0.07,0.029 0.122,0.124 -0.014,0.119 z m -201.333,3.993 1.393,0.55 1.395,0.271 1.024,0.321 0.628,0.098 0.227,0.07 0.146,0.113 0.173,0.272 0.299,0.646 0.227,0.412 0.468,0.713 0.37,0.505 0.084,0.2 -0.078,0.064 0.005,0.118 0.281,0.488 0.527,0.437 0.412,0.208 0.87,0.342 0.534,0.329 0.165,0.228 0.232,0.221 0.097,0.152 0.19,0.564 0.353,0.542 0.364,1.025 0.068,-0.085 0.042,-0.305 0.042,-0.068 0.077,-0.032 0.072,0.118 0.066,0.27 0.231,0.639 -0.075,0.187 -0.067,0.019 -0.313,-0.087 -0.108,0.114 -0.146,0.232 -0.103,0.093 -0.06,-0.045 -0.905,-0.223 -0.557,-0.21 -0.732,-0.333 -0.879,-0.347 -0.502,-0.238 -0.418,-0.246 -0.291,-0.209 -0.055,-0.178 0.013,-0.084 0.564,-0.57 0.239,-0.307 0.092,-0.235 0.047,-0.249 -0.035,-0.304 -0.023,0.023 -0.05,0.292 -0.083,0.259 -0.102,0.203 -0.064,0.072 -0.676,0.099 -0.546,-0.031 -0.274,0.244 -0.082,0.031 -0.151,-0.081 -0.329,-0.326 -0.472,-0.268 0.046,-0.066 0.308,-0.136 0.163,-0.2 -0.029,-0.032 -0.109,0.012 -0.097,-0.041 -0.192,-0.259 -0.109,-0.071 -0.232,0.117 -0.094,0.006 -0.09,-0.171 0.129,-0.395 0.007,-0.093 -0.238,0.144 -0.079,-0.047 -0.075,-0.128 -0.07,-0.054 -0.193,0.026 -0.21,-0.118 -0.073,0.046 -0.028,0.171 -0.07,0.043 -0.32,-0.288 -0.073,-0.009 -0.155,0.22 -0.054,0.014 -0.083,-0.095 -0.042,-0.536 0.018,-0.152 0.044,-0.051 0.278,-0.125 0.8,-0.133 0.067,-0.096 -0.6,0.049 -0.156,-0.073 -0.167,-0.184 -0.175,0.003 -0.092,-0.06 -0.097,-0.133 -0.253,-0.487 -0.173,-0.124 -0.294,-0.078 -0.151,-0.092 -0.064,0.041 -0.061,0.139 -0.082,0.087 -0.201,0.049 -0.184,-0.036 -0.144,-0.133 -0.085,-0.168 -0.033,-0.188 0.08,-0.252 -0.001,-0.1 -0.036,-0.117 -0.065,-0.094 -0.096,-0.072 -0.052,0.038 -0.009,0.147 -0.052,0.108 -0.167,0.082 -0.136,-0.144 -0.09,-0.2 -0.104,-0.142 -0.583,0 -0.269,0.184 -0.128,0.015 -0.134,-0.044 -0.025,-0.098 0.126,-0.268 -0.031,-0.358 -0.033,-0.09 -0.269,-0.055 -0.045,-0.086 0.16,-0.436 0.089,-0.083 0.119,-0.031 0.534,-0.036 0.178,0.063 0.257,0.265 -0.008,-0.1 -0.097,-0.301 -0.014,-0.181 0.177,-0.204 -0.169,-0.06 -0.632,-0.047 0.005,0.13 0.052,0.186 -0.375,0.162 -0.278,0.027 -0.266,-0.025 -0.217,-0.097 -0.37,-0.391 -0.231,-0.386 0.011,-0.21 0.127,-0.221 0.166,-0.15 0.394,-0.131 0.514,-0.012 0.575,0.176 1.444,0.801 z m 201.116,-0.35 -0.094,0.049 -0.087,-10e-4 -0.08,-0.052 -0.013,-0.085 0.082,-0.18 0.217,-0.091 0.163,0.021 -0.01,0.091 -0.087,0.149 -0.091,0.099 z m -195.466,2.734 -0.031,0.23 -0.181,-0.374 -0.277,-0.794 0.037,-0.186 0.124,-0.264 0.113,-0.016 0.182,0.123 0.159,0.22 0.037,0.085 0.098,0.23 0.049,0.207 -0.11,0.25 -0.2,0.289 z m 0.579,0.295 -0.067,0.038 -0.068,-0.494 0.085,-0.179 0.024,-0.09 -0.011,-0.093 0.148,0.224 0.06,0.15 0.025,0.208 -0.003,0.055 -0.193,0.181 z m 177.304,4.037 -1.174,0.063 -0.935,-0.264 -0.693,-0.127 -0.679,-0.232 -1.472,-0.749 -0.168,-0.26 -0.141,-0.321 -0.282,-0.292 -0.304,-0.241 -1.558,-0.736 -0.127,-0.257 0.315,-0.169 0.363,-0.081 0.315,0.012 1.042,0.289 1.314,0.253 0.57,0.191 0.646,0.291 0.631,0.353 1.405,0.935 0.252,0.074 0.634,0.457 0.229,0.342 0.111,0.277 -0.139,0.142 -0.155,0.05 z m -181.972,-2.199 -0.11,0.02 -0.177,-0.052 -0.199,-0.124 -0.349,-0.33 -0.036,-0.075 0.031,-0.064 0.099,-0.053 0.022,-0.087 -0.081,-0.238 0.28,-0.15 0.247,0.125 0.112,0.153 0.135,0.271 0.061,0.306 0.006,0.209 -0.041,0.089 z m 6.981,0.322 0.039,0.09 -0.625,-0.336 -0.266,-0.199 -0.104,-0.144 -0.067,-0.082 -0.317,-0.214 -0.053,-0.098 0.075,-0.073 0.214,0.046 0.353,0.161 0.315,0.262 0.436,0.587 z m 196.622,-0.922 0.207,0.281 0.11,0.076 -0.723,0.304 -0.087,0.02 -0.047,-0.036 -0.007,-0.283 0.031,-0.219 0.052,-0.033 0.167,0.132 0.173,-0.271 0.124,0.029 z m -1.293,0.673 -0.433,0.251 -0.099,0.099 -0.12,0.05 -0.09,-0.079 -0.126,-0.266 0.023,-0.088 0.119,-0.012 0.068,0.035 0.017,0.083 0.052,0.042 0.087,10e-4 0.321,-0.259 0.167,-0.041 0.06,0.05 -0.046,0.134 z m -200.769,1.011 0.079,0.388 -0.344,-0.062 -0.121,-0.075 -0.005,-0.187 0.064,-0.175 0.262,0.063 0.065,0.048 z m 165.49,17.265 -0.129,-0.05 -0.119,-0.042 -0.102,-0.033 -0.059,0.056 -0.056,0.075 -0.069,0.056 -0.145,-0.079 -0.092,-0.144 -0.148,-0.149 -0.056,-0.112 0.029,-0.13 0.066,-0.126 0.03,-0.15 -0.072,-0.172 -0.066,-0.098 -0.046,-0.112 0.017,-0.108 0.092,-0.051 0.085,-0.066 0.03,-0.141 -0.053,-0.15 -0.151,-0.061 -0.125,0.023 -0.181,-0.033 -0.175,-0.094 -0.115,-0.108 -0.089,-0.061 -0.069,0 -0.082,-0.061 -0.049,-0.104 0.006,-0.169 0.023,-0.104 0.046,-0.089 0.003,-0.099 -0.02,-0.071 -0.003,-0.057 0.013,-0.071 0.03,-0.141 -0.049,-0.104 -0.005,-0.36 -0.009,-0.675 -0.007,-0.518 -0.009,-0.654 -0.005,-0.477 -0.007,-0.67 -0.007,-0.638 -0.011,-0.604 -0.359,-0.349 -0.455,-0.442 -0.39,-0.293 -0.211,-0.035 -0.132,0.041 -0.053,0.117 -0.291,0.125 -0.528,0.134 -0.45,0.207 -0.165,0.002 -0.14,-0.035 -0.185,-0.104 -0.128,-0.153 -0.044,-0.266 0.04,-0.366 -0.27,-0.075 -0.271,-0.076 -0.166,0.252 -0.159,0.212 -0.316,0.462 -0.444,0.647 -0.247,0.355 -0.433,0.623 -0.382,0.547 -0.085,0.56 -0.082,0.53 -0.315,0.402 -0.192,0.368 -0.086,0.408 -0.072,0.374 -0.005,0.313 0.054,0.164 -0.025,0.133 -0.104,0.153 -0.209,0.265 -0.037,0.255 -0.127,0.126 -0.364,0.251 -0.297,0.371 -0.015,0.209 0.042,0.174 0.007,0.107 -0.06,0.075 -0.119,-0.005 -0.129,0.023 -0.108,0.154 0.003,0.221 -0.079,0.159 -0.093,0.033 -0.079,-0.112 -0.095,-0.168 -0.111,-0.017 -0.169,0.112 -0.209,0.184 -0.188,0.01 -0.353,-0.118 -0.257,0.357 -0.277,0.764 -1.167,0.002 -1.168,0.002 -1.168,0.002 -1.167,0.002 -1.168,0.002 -1.168,10e-4 -1.168,0.002 -0.653,10e-4 -0.128,0 0.4,-0.149 0.834,-0.582 0.615,-0.211 0.8,-0.613 0.58,-0.118 0.11,-0.135 0.097,-0.51 0.053,-0.182 0.271,-0.502 0.325,-0.425 0.262,-0.589 0.476,-0.377 0.72,-0.316 0.666,-0.691 0.365,-0.211 0.354,-0.151 0.148,-0.282 0.219,-0.161 0.585,-0.329 0.645,-0.089 0.651,-0.273 0.5,-0.145 0.306,-0.257 0.446,-0.135 1.33,-0.739 0.369,-0.347 0.478,-0.712 0.416,-0.363 0.147,-0.387 0.603,-0.63 0.621,-0.833 0.309,-0.599 0.462,-0.333 0.896,-0.956 0.481,-0.383 0.195,-0.044 0.544,-0.341 0.338,-0.356 0.542,-0.358 0.98,-0.442 0.921,-0.531 1.244,-0.461 1.458,-0.692 1.178,-0.372 0.829,-0.054 1.009,-0.173 0.357,0.018 1.571,0.301 0.754,0.372 0.858,0.78 0.128,0.205 0.021,0.287 -0.455,-0.139 -0.401,-0.009 0.278,0.159 0.473,0.478 -0.021,0.596 -0.267,0.537 -0.798,0.264 -0.204,0.21 -0.165,0.347 -0.162,0.133 -0.387,0.154 -0.214,0.225 -0.627,0.356 -0.282,0.042 -0.325,-0.085 -0.783,-0.335 -0.482,-0.324 -0.241,0.177 -0.198,0.185 -0.465,-0.062 -0.212,0.082 -0.35,-0.091 -0.717,0.407 0.204,0.047 0.569,-0.234 0.194,0.026 0.419,0.302 1.013,0.324 0.263,0.214 0.251,0.681 0.166,0.109 0.347,-0.071 0.392,-0.336 0.325,-0.18 0.635,-0.148 -0.125,0.224 0.484,-0.018 0.479,0.301 -0.177,0.214 -0.241,0.43 -0.168,0.833 -0.488,0.556 -0.653,0.546 0.165,0.131 0.191,0.081 0.42,-0.161 0.281,0.011 0.312,0.104 -0.097,0.422 -0.112,0.286 0.065,0.267 0.185,0.507 0.255,0.111 0.102,0.648 0.135,0.352 -0.019,0.282 0.255,0.181 0.043,0.288 0.925,0.082 0.188,0.11 0.643,0.109 0.122,0.079 0.114,0.158 -0.63,0.346 0.51,0.25 0.482,0.407 0.379,-0.08 0.164,0.013 0.424,0.255 0.118,0.126 0.065,0.112 0.213,-0.024 0.306,-0.098 0.553,0.024 0.59,0.144 -0.05,0.219 -0.089,0.151 0.461,-0.05 0.288,0.155 0.1,-0.075 0.071,-0.097 0.573,-0.265 0.736,-0.551 0.089,0.068 0.034,0.209 0.097,0.34 0.283,0.234 0.335,0.054 0.462,-0.179 0.182,0.155 0.216,0.298 0.206,0.39 -0.014,0.139 -0.264,0.122 -0.238,0.175 0.994,0.072 0.101,0.074 0.11,0.153 -0.102,0.154 -0.094,0.077 -0.18,-0.09 -0.333,0.082 -0.291,0.2 -0.311,0.111 -0.199,0.012 -0.221,0.093 -0.202,0.143 -0.209,0.04 -0.654,0.356 -0.668,0.229 -0.699,0.366 -0.713,0.231 -0.74,0.277 -0.161,0.024 -0.187,-0.011 -0.422,0.271 -0.209,-0.037 -0.213,0.047 -0.246,-0.06 -0.167,-0.111 0.128,0.286 0.038,0.263 -0.064,0.115 -0.118,0.135 -0.425,-0.025 -0.167,-0.095 -0.198,-0.14 -0.091,-0.226 -0.213,-0.162 -0.126,0.224 0,0.167 -0.158,0.227 -0.186,-0.389 -0.334,0.143 -0.147,0.414 0.074,0.118 0.103,0.316 -0.165,0.165 -0.123,-0.045 -0.254,0.462 -0.308,0.168 -0.317,0.47 -0.376,0.358 -0.103,0.239 -0.63,0.545 -0.239,-0.017 -0.176,0.018 -0.266,0.227 -0.042,0.458 -0.117,-0.061 -0.119,0.015 -0.062,0.144 -0.087,0.023 -0.232,-0.136 -0.273,0.074 -0.214,-0.103 -0.272,-0.671 -0.145,-0.236 -0.257,-0.076 -0.067,0.143 -0.1,0.139 -0.247,-0.278 -0.188,-1.032 -10e-4,-0.25 0.262,-0.874 0.65,-0.789 -0.208,-0.026 -0.574,0.547 0.059,-0.132 0.097,-0.138 0.194,-0.223 0.293,-0.209 0.391,-0.123 0.269,-0.018 0.186,-0.116 0.269,-0.206 0.05,-0.109 -0.238,0.126 -0.396,0.123 0.101,-0.162 0.1,-0.086 2.115,-1.424 0.426,-0.236 0.849,-0.301 0.118,-0.197 -0.116,-0.126 0.33,0.111 -0.027,0.164 -0.052,0.119 -0.019,0.203 0.032,0.194 0.334,0.095 0.279,0.361 -0.132,-0.491 0.251,-0.278 0.968,-0.373 0.809,-0.041 0.259,-0.174 -0.691,-0.117 -0.82,0.064 -0.507,-0.13 -0.7,0.085 -0.74,-0.082 -0.227,0.108 -0.184,0.233 -0.239,-0.103 -0.116,-0.017 -0.111,-0.081 0.24,-0.401 0.75,-0.599 0.457,-0.522 0.129,-0.11 0.102,-0.21 -0.251,0.035 -0.219,0.083 -0.152,-0.242 -0.271,-0.321 -0.026,0.134 0.136,0.4 -0.519,0.702 -0.335,0.05 -0.447,0.327 -0.632,0.284 -0.737,0.541 -0.953,0.455 -0.199,0.002 -0.433,-0.375 0.121,-0.17 0.113,-0.231 -0.108,0.066 -0.069,0.101 -0.261,0.161 0.211,0.311 -0.102,0.117 -0.302,0.153 -0.282,0.222 -0.247,0.148 -0.199,-0.188 -0.551,0.237 -0.464,0.064 -0.101,-0.12 -0.029,-0.19 -0.163,-0.046 -0.301,0.053 -0.117,-0.108 z m -157.857,-15.264 -0.035,0.046 -0.438,-0.301 -0.294,-0.395 -0.122,-0.241 0.581,0.599 0.293,0.198 0.015,0.094 z m -0.177,0.56 -0.118,0.109 -0.063,-0.015 -0.05,-0.076 -0.182,-0.747 0.078,0.016 0.244,0.233 -0.055,0.092 0.182,0.223 0.044,0.158 -0.08,0.007 z m 99.362,0.156 -0.072,0.003 -0.054,-0.102 -0.03,-0.286 0.083,-0.122 0.17,-0.087 0.228,-0.031 0.285,0.024 0.135,0.076 -0.014,0.128 -0.034,0.066 -0.084,0.042 -0.011,0.074 -0.121,0.041 -0.23,0.006 -0.161,0.058 -0.09,0.11 z m 1.149,-0.167 -0.192,0.029 -0.113,-0.02 -0.037,-0.041 0.039,-0.061 -0.003,-0.065 -0.061,-0.128 0.013,-0.045 0.047,-0.024 0.083,-0.004 0.098,0.085 0.115,0.174 0.011,0.1 z m 64.957,3.361 -0.323,0.216 0.142,-0.325 0.059,-0.084 0.055,-0.037 0.053,0.029 0.014,0.201 z m -0.091,0.301 -0.071,0.304 -0.245,0.258 -0.122,0.018 -0.056,-0.025 0.067,-0.167 -0.008,-0.289 0.203,-0.04 0.074,0.026 0.158,-0.085 z m -59.378,0.639 -0.54,0.059 -0.235,-0.061 -0.024,-0.057 0.056,-0.08 0.135,-0.103 0.155,-0.056 0.175,-0.01 0.348,0.104 0.126,0.103 -0.027,0.062 -0.169,0.039 z m 88.233,1.211 -0.137,0.144 -0.14,-0.006 0.017,-0.126 0.172,-0.245 0.088,-0.175 0.003,-0.106 0.032,-0.081 0.131,-0.091 0.113,-0.165 -0.054,0.306 -0.225,0.545 z m -21.574,0.648 0.099,0.079 0.178,-0.009 0.12,0.032 -0.171,0.153 -0.329,0.015 -0.161,-0.063 0.234,-0.788 0.273,-0.182 0.56,-0.517 0.224,-0.158 0.208,-0.062 0.22,0.038 -0.224,0.306 -0.3,0.017 -0.286,0.254 -0.188,0.281 -0.226,0.16 -0.155,0.196 -0.076,0.248 z m -5.324,3.339 0.076,0.057 0.132,-0.104 0.156,-0.331 0.413,0.086 0.219,0.149 0.122,-0.033 0.125,0.015 0.231,0.195 0.44,0.154 0.464,-0.022 0.708,-0.091 0.084,-0.037 0.726,-0.077 0.729,-0.036 0.25,0.087 0.094,0.082 0.048,0.098 -0.416,0.268 -0.416,0.312 -0.578,0.306 -0.073,0.149 0.036,0.274 -0.011,0.279 0.114,0.023 0.069,0.093 -0.149,0.09 -0.595,0.042 -0.173,-0.025 -0.206,-0.114 -0.071,-0.27 -0.255,0.04 -0.077,-0.033 0.358,-0.23 -0.163,-0.289 -0.175,0.021 -0.116,-0.137 0.009,-0.186 0.162,-0.09 0.047,-0.098 -0.22,0.085 -0.169,0.172 -0.218,0.065 -0.213,0.148 0.331,0.047 -0.17,0.115 -0.177,0.026 -0.82,-0.226 -0.203,-0.086 -0.255,-0.237 -0.193,-0.317 0.105,-0.012 0.036,-0.057 -0.023,-0.054 -0.286,-0.043 -0.446,0.014 -0.256,-0.084 0.012,-0.555 -0.083,-0.153 -0.28,-0.129 -0.428,-0.039 -0.042,-0.207 0.136,-0.316 0.209,-0.272 0.16,-0.268 0.186,-0.22 0.458,-0.438 -0.011,0.328 0.044,0.281 -0.298,0.563 0.519,0.556 0.066,0.123 0.044,0.149 -0.033,0.137 -0.084,0.122 0.202,0.061 0.062,0.104 z m 7.594,2.118 0.095,0.031 0.378,-0.195 0.2,0.008 -0.009,0.14 -0.325,0.153 -0.149,0.114 0.188,0.106 -0.002,0.072 -0.226,0.172 -0.113,0.187 0.093,0.181 0.361,-0.178 0.148,-0.002 0.201,0.041 0.191,-0.054 0.109,-0.088 0.636,-0.696 0.033,-0.089 -0.686,0.144 -0.08,-0.095 0.449,-0.422 -0.035,-0.223 0.227,-0.352 0.208,-0.209 0.152,-0.117 0.221,-0.108 0.152,0.167 0.049,0.301 0.376,-0.042 0.368,0.061 0.271,0.127 0.042,0.073 0.003,0.115 -0.09,0.207 -0.149,0.17 0.297,0.218 -0.04,0.095 -0.487,0.246 -0.277,0.247 -0.254,0.304 -0.508,0.354 -0.805,0.255 -0.255,0 -0.303,-0.08 -0.3,0.018 -0.295,0.095 -0.289,-0.011 -0.14,0.05 -0.133,-0.005 -0.111,-0.099 -0.238,-0.282 -0.116,-0.189 -0.128,-0.904 0.041,-0.477 0.202,-0.446 0.299,-0.297 0.173,-0.237 0.724,-1.414 0.142,-0.322 0.173,-0.275 0.31,-0.272 0.401,-0.46 0.128,-0.094 0.23,-0.045 0.227,0.025 -0.065,0.167 0.017,0.163 0.263,0.635 -0.003,0.126 -0.144,0.504 -0.276,0.812 -0.071,0.447 0.037,0.134 -0.112,0.226 -0.119,0.171 -0.471,0.321 -0.241,0.075 -0.229,0.119 -0.541,0.402 z m -27.841,-3.766 -0.255,0.033 0.061,-0.142 0.348,-0.253 0.256,-0.142 0.151,0.003 -0.246,0.311 -0.315,0.19 z m -35.874,2.872 -0.058,0.076 -0.077,-0.04 -0.055,0.039 -0.032,0.117 -0.055,0.087 -0.066,0.022 -0.136,-0.072 -0.169,-0.273 -0.111,-0.24 -0.052,-0.207 0.101,-0.09 0.253,0.027 0.224,0.076 0.193,0.124 0.078,0.159 -0.038,0.195 z m 1.337,1.153 -0.153,0.047 -0.188,-0.063 -0.075,-0.09 0.038,-0.118 0.082,-0.109 0.126,-0.101 0.132,-0.018 0.137,0.064 0.071,0.062 0.005,0.06 -0.175,0.266 z m 1.434,-0.387 -0.031,0.163 0.026,0.106 0.083,0.049 0.055,0.069 0.026,0.089 0.078,0.023 0.129,-0.042 0.086,0.013 0.043,0.068 0.049,0.016 0.055,-0.036 0.068,0.042 0.082,0.12 0.064,0.005 0.046,-0.111 -0.016,-0.063 -0.111,-0.043 0.01,-0.042 -0.068,-0.103 0.034,-0.076 0.116,-0.097 0.082,-0.021 0.049,0.055 0.05,-0.014 0.052,-0.084 0.122,-0.064 0.192,-0.045 0.105,0.035 0.018,0.114 0.055,0.037 0.092,-0.04 0.087,0.087 0.082,0.213 0.092,0.007 0.102,-0.2 0.146,-0.144 0.188,-0.089 0.136,-0.009 0.083,0.07 0.039,0.093 -0.005,0.114 0.051,0.072 0.108,0.028 0.035,0.093 -0.039,0.158 0.01,0.138 0.097,0.182 0.022,0.011 0.092,-0.324 0.079,-0.17 0.104,-0.121 0.066,-0.011 0.028,0.099 -0.022,0.109 -0.072,0.12 0.038,0.054 0.234,10e-4 0.024,0.038 -0.26,0.541 -0.194,0.263 -0.206,0.177 -0.149,0.044 -0.093,-0.087 -0.089,-0.035 -0.087,0.019 0.001,-0.034 0.152,-0.135 0.057,0.003 0.106,-0.03 0.294,-0.298 0,-0.05 -0.172,0.024 -0.583,0.502 -0.074,0.019 -0.058,-0.033 -0.042,-0.084 -0.328,-0.146 -0.135,-0.131 -0.188,-0.094 -0.242,-0.058 -0.283,-0.118 -0.325,-0.179 -0.308,-0.099 -0.563,-0.057 -0.072,-0.09 -0.555,-0.167 -0.173,-0.108 0.017,-0.123 0.043,-0.089 0.068,-0.057 0.071,0.023 0.074,0.102 0.076,0.012 0.079,-0.079 0.095,-0.011 0.111,0.056 0.085,-0.007 0.058,-0.07 0.112,-0.061 0.167,-0.051 0.067,0.054 z m 25.972,2.033 -0.216,0.08 -0.37,-0.074 -0.407,0.103 -0.113,0.002 0.302,-0.296 0.464,-0.182 0.463,-0.56 0.13,-0.014 -0.176,0.633 -0.036,0.226 -0.041,0.082 z m -0.361,-0.464 -0.338,0.082 -0.117,-0.035 0.374,-0.393 0.427,-0.091 -0.346,0.437 z m 35.737,0.381 -0.116,0.033 -0.027,-0.057 -0.179,-0.165 -0.016,-0.082 0.156,-0.078 0.319,0.04 -0.114,0.207 -0.023,0.102 z m -58.45,0.096 -0.075,0.01 -0.05,-0.037 -0.013,-0.045 0.024,-0.055 0.263,-0.131 0.063,0.017 -0.041,0.103 -0.171,0.138 z m 4.529,2.605 0.003,0.05 -0.12,-0.104 -0.048,-0.082 -0.01,-0.083 0.058,-0.028 0.124,0.027 0.039,0.067 -0.046,0.153 z m 37.641,0.501 -0.377,0.208 0.146,-0.531 0.12,-0.164 0.159,0.055 -0.022,0.321 -0.026,0.111 z m 1.371,1.527 -0.141,0.137 0.034,-0.134 0.173,-0.342 0.112,-0.051 -0.178,0.39 z m -28.321,0.531 -0.162,0.136 -0.131,-0.012 -0.042,-0.013 0.028,-0.053 -0.006,-0.044 -0.042,-0.036 0.023,-0.064 0.09,-0.093 0.059,-0.096 0.286,-0.048 0.139,-0.029 0.146,-0.029 -0.028,0.084 -0.26,0.097 -0.065,0.126 -0.035,0.074 z m -0.905,0.073 -0.122,0.042 -0.156,-0.014 -0.064,-0.037 0.028,-0.059 0.108,-0.066 0.332,-0.106 0.008,0.07 -0.134,0.17 z m 47.429,0.77 -0.378,0.139 -0.324,-0.01 -0.215,-0.126 -0.009,-0.055 0.509,0.053 0.196,-0.029 0.391,-0.216 -0.17,0.244 z m -64.13,8.364 -0.13,0.041 -0.002,-0.08 0.031,-0.184 0.056,-0.08 0.032,0.045 0.044,0.166 -0.031,0.092 z",
                        title: "Canada",
                        id: "CA",
                    },
                    {
                        d:
                            "m 746.67575,497.1434 0.033,0.015 0.043,-0.015 0.018,0.018 -0.067,0.028 -0.042,-0.051 -0.02,-0.083 -0.005,-0.07 0.019,0 0,0.028 0.005,0.023 0.015,0.046 -0.011,0.031 0.012,0.03 z m 0.219,0.035 -0.032,0.016 -0.028,-0.012 -0.008,-0.009 -0.003,-0.015 0.032,-0.002 0.025,-0.014 0.016,-0.024 0.005,-0.034 0.013,0.033 -0.002,0.033 -0.018,0.028 z",
                        title: "Cocos  (Keeling)  Islands",
                        id: "CC",
                    },
                    {
                        d:
                            "m 551.80175,448.6594 0.102,0.196 0.145,0.201 0.486,0.34 0.154,0.189 0.119,0.21 0.075,0.164 0.15,0.131 0.21,0.084 0.18,0.1 0.11,0.147 0.165,0.153 0.318,0.208 0.155,0.005 0.179,0.029 0.158,0.055 0.169,-0.016 0.273,-0.136 0.322,-0.228 0.246,-0.141 0.595,0.05 0.332,0.115 0.264,0.161 0.206,-0.01 0.449,-0.298 0.238,-0.317 0.231,-0.068 0.35,0.138 0.289,0.296 0.254,0.43 0.179,0.164 0.245,0.254 0.487,0.547 0.634,0.274 0.246,0.135 0.08,0.135 0.047,0.18 0.016,0.195 0.077,0.081 0.171,-0.028 0.146,-0.028 0.161,0.056 0.112,0.142 0.056,0.111 0.061,0.119 0.159,0.076 0.031,0.153 -0.109,0.186 -0.112,0.167 -0.136,0.332 -0.071,0.34 0.092,0.113 0.097,0.094 0.052,0.095 0.031,0.111 -0.012,0.13 -0.216,0.472 -0.111,0.412 -0.004,0.209 0.285,0.154 0.37,-0.008 0.117,0.094 0.117,0.15 0.103,0.077 0.156,-0.002 0.108,0.052 0.043,0.106 0.126,0.114 0.106,0.126 -0.051,0.161 -0.009,0.123 -0.264,0.342 -0.606,0.667 -1.304,1.237 -10e-4,10e-4 -0.44,0.149 -0.227,0.23 -0.161,0.361 -0.38,0.306 -0.293,0.124 -0.031,0.073 -0.023,0.332 0.03,0.487 -0.137,0.223 -0.199,0.434 -0.103,0.271 -0.08,0.053 -0.089,0.136 -0.056,0.442 -0.038,0.149 -0.143,0.915 0.041,0.261 -0.111,0.435 -0.005,0.256 -0.046,0.29 -0.079,0.251 0.005,0.402 0.045,0.656 -0.008,0.087 -0.11,0.061 -0.196,0.163 -0.185,0.109 -0.141,0.028 -0.235,0.29 -0.2,0.275 -0.15,0.268 -0.039,0.123 0.031,0.347 0.021,0.411 -0.046,0.177 -0.07,0.105 -0.328,0.223 -0.216,0.16 -0.102,0.084 -0.053,0.129 0.095,0.304 0.007,0.222 0.078,0.131 0.26,0.106 -10e-4,0.107 0.007,0.115 0.136,0.143 0.248,0.292 0.199,0.274 0.005,0.238 -0.038,0.398 -0.007,0.229 0.02,0.314 -10e-4,0.584 -0.014,0.416 0.032,0.216 0.304,0.515 0.134,0.571 0.067,0.418 0.003,0.133 -0.103,0.481 -0.117,0.467 -0.007,0.177 0.055,0.236 0.217,0.54 0.158,0.393 0.076,0.237 0.109,0.276 0.145,0.423 0.036,0.201 -0.03,0.15 -0.296,0.531 -0.03,0.167 0.073,0.412 0.097,0.398 0.14,0.226 0.334,0.624 0.249,0.211 0.459,0.312 0.405,0.314 0.156,0.163 0.143,0.182 0.282,0.466 0.172,0.379 0.091,0.343 0.221,0.469 0.206,0.435 0.266,0.532 0.188,0.376 0.085,0.251 -0.486,0.075 -0.703,0.107 -0.775,0.119 -0.8,0.122 -0.793,0.122 -0.752,0.115 -0.683,0.104 -0.208,0.058 0.102,0.296 -0.047,0.311 -0.135,0.241 -0.214,0.296 -0.097,0.118 -0.218,0.231 -0.182,0.163 -0.371,0.274 -0.234,0.157 -0.002,0.142 0.394,0.664 0.179,0.477 0.073,0.431 -0.004,0.248 -0.015,0.51 -0.018,0.607 -0.027,0.239 0.107,0.433 -0.019,0.338 -0.265,0.378 -0.074,0.371 -0.134,0.501 -0.185,0.696 -0.132,0.366 0.073,0.238 0.066,0.16 0.07,0.215 0.142,0.324 0.166,0.191 0.093,0.082 0.546,0.409 0.227,0.197 0.346,0.392 0.256,0.26 0.356,0.061 0.427,0.098 0.236,0.076 0.162,-0.037 0.055,-0.092 -0.008,-0.196 -0.028,-0.144 0.045,-0.111 0.145,-0.073 0.371,-0.012 0.161,-0.098 0.128,-0.024 10e-4,0.43 0,0.412 10e-4,0.501 0,0.575 10e-4,0.472 0,0.502 10e-4,0.58 -0.003,0.065 -0.057,0.131 -0.147,0.045 -0.199,-0.113 -0.012,-0.119 -0.049,-0.213 -0.092,-0.109 -0.121,-0.034 -0.204,0.055 -0.28,0.157 -0.359,0.138 -0.146,0.079 -0.253,-0.01 -0.274,-0.075 -0.201,-0.177 -0.058,-0.265 -0.177,-0.272 -0.24,-0.394 -0.121,-0.161 -0.16,-0.184 -0.162,-0.021 -0.181,-0.051 -0.111,-0.269 -0.104,-0.34 -0.064,-0.131 -0.108,-0.169 -0.155,-0.103 -0.338,-0.136 -0.472,-0.189 -0.594,-0.238 -0.282,-0.012 -0.316,-0.04 -0.198,-0.113 -0.113,-0.09 -0.13,-0.33 -0.178,-0.386 -0.521,-0.459 -0.117,-0.508 -0.105,-0.073 -0.179,0.041 -0.138,0.063 -0.055,0.137 -0.139,0.458 -0.077,0.211 -0.052,0.059 -0.114,0.068 -0.186,0.062 -0.265,0.031 -0.374,-0.012 -0.468,-0.068 -0.252,-0.051 -0.683,-0.076 -0.198,-0.037 -0.279,-0.1 -0.201,-0.1 -0.662,-0.216 -0.301,0.026 -0.145,-0.153 -0.131,-0.075 -0.18,-0.144 -0.08,-0.197 -0.107,-0.423 0.026,-0.226 0.077,-0.252 -0.086,-0.07 -0.12,0 -0.172,0.087 -0.305,0.049 -0.559,0.111 -0.198,0.062 -0.219,0.048 -0.168,0.043 -0.42,0.243 -0.146,0.026 -0.249,-0.087 -0.12,-0.13 0.12,-0.147 0.051,-0.183 -0.085,-0.357 -0.129,-0.165 -0.372,-0.118 -0.143,-0.011 -0.06,-0.2 -0.103,-0.182 -0.212,-0.035 -0.102,-0.021 -0.106,0.056 -0.06,0.147 -0.017,0.113 -0.189,0.086 -0.386,-0.017 -0.383,-0.082 -0.269,-0.027 -0.179,0.021 -0.684,0.279 -0.225,0.037 -0.734,-0.021 -0.416,-0.059 -0.296,-0.01 -0.21,0.087 -0.262,0.207 -0.219,0.111 -0.101,-0.012 -0.062,-0.087 -0.086,-0.118 -0.027,-0.312 -0.109,-0.341 0.072,-0.179 0.216,-0.128 0.075,-0.264 -0.067,-0.396 -0.004,-0.278 0.058,-0.161 -0.078,-0.39 -0.216,-0.619 -0.305,-0.503 -0.394,-0.389 -0.258,-0.371 -0.122,-0.355 0.046,-0.849 0.119,-0.747 0.094,-0.593 -0.027,-0.993 -0.267,-0.646 -0.058,-0.694 0.151,-0.742 0.022,-0.508 -0.1,-0.26 -0.068,-0.039 -0.086,-0.026 -0.675,-0.025 -0.899,-0.033 -0.784,-0.01 -0.851,-0.01 -0.139,-0.094 -0.063,-0.173 0.003,-0.171 0.174,-0.524 -0.025,-0.043 -0.302,-0.011 -0.82,0.085 -0.541,0.084 -0.343,0.028 -0.603,0.143 -0.373,0.302 -0.122,0.379 0.01,0.313 -0.021,0.229 -0.17,0.239 -0.134,0.275 -0.005,0.145 -0.082,0.732 -0.556,0.098 -0.556,0 -0.13,-0.009 -0.687,-0.175 -0.255,-10e-4 -0.218,0.092 -0.421,0.09 -0.402,0.066 -0.405,0.217 -0.108,0.019 -0.269,-0.113 -0.376,0.011 -0.381,0.054 -0.178,0.024 -0.123,-0.066 -0.35,-0.546 -0.466,-0.727 -0.253,-0.456 -0.094,-0.119 -0.162,-0.157 -0.222,-0.297 -0.092,-0.282 0.039,-0.267 -0.13,-0.36 -0.299,-0.453 -0.197,-0.432 -0.094,-0.413 -0.023,-0.352 0.047,-0.294 -0.057,-0.216 -0.163,-0.139 -0.088,-0.177 -0.064,-0.073 -0.135,-0.167 -0.297,-0.184 -0.326,-0.097 -0.716,-0.002 -0.935,-0.003 -0.847,0.014 -0.942,0.016 -0.954,0.016 -0.257,0.024 -0.728,0.011 -0.583,-0.047 -0.216,-0.03 -0.38,-0.023 -0.6,-0.005 -0.325,0.018 -0.778,10e-4 -0.071,0.004 -0.123,0.052 -0.332,-0.072 -0.326,0.024 -0.182,-0.08 -0.4,0.05 -0.194,0.066 -0.311,0.233 -0.467,0.121 -0.173,-0.01 -0.115,-0.039 -0.271,-0.256 -0.21,-0.246 -0.075,-0.137 0.117,-0.034 0.367,-0.052 0.276,-0.025 0.054,-0.065 0.042,-0.76 0.01,-0.771 -0.098,-0.102 -0.096,-0.062 -0.004,-0.053 0.143,-0.097 0.199,-0.113 0.064,-0.051 0.22,-0.204 0.435,-0.472 0.331,-0.116 0.308,-0.124 0.043,-0.045 0.041,-0.092 0.138,0.007 0.044,0.044 0.068,0.1 0.121,0.14 0.219,0.166 0.22,0.179 0.11,0.023 0.177,-0.091 0.206,-0.135 0.303,-0.098 0.072,-0.092 0.039,-0.197 0.024,-0.21 0.026,-0.248 0.062,-0.034 0.109,-0.024 0.201,0.07 0.092,0.073 0.165,0 0.105,-0.066 0.192,-0.122 0.244,-0.049 0.261,-0.118 0.251,-0.15 0.118,-0.014 0.125,0.197 0.112,0.137 0.02,0.086 -0.112,0.164 -0.125,0.216 0.105,0.269 0.025,0.261 -0.003,0.158 0.085,0.064 0.058,0.03 0.09,-0.037 0.179,0.011 0.215,0.082 0.207,-0.009 0.2,-0.101 0.373,-0.392 0.545,-0.684 0.452,-0.429 0.357,-0.175 0.242,-0.204 0.127,-0.235 0.208,-0.159 0.434,-0.127 0.33,-0.144 0.33,-0.469 0.44,-0.844 0.123,-0.753 0.075,-0.458 -0.043,-1.579 -0.029,-0.518 0.067,-0.282 0.164,-0.194 0.448,-0.411 0.301,-0.337 0.23,-0.394 0.441,-0.899 0.194,-0.29 0.087,-0.13 0.266,-0.239 0.373,-0.211 0.48,-0.181 0.741,-0.626 0.589,-0.63 -0.08,-0.757 0.138,-0.628 0.321,-0.798 0.105,-0.845 -0.11,-0.891 0.046,-0.729 0.308,-0.847 0.128,-0.315 0.043,-0.515 -0.002,-0.819 0.391,-1.12 0.37,-0.672 0.414,-0.75 0.158,-0.454 0.21,-0.606 -0.033,-0.487 -0.038,-0.56 0.104,-0.77 -0.039,-0.453 -0.147,-0.394 0.075,-0.249 0.297,-0.101 0.37,-0.394 0.664,-1.029 0.716,-0.502 0.498,-0.159 0.519,0.017 0.339,0.09 0.156,0.162 0.393,0.243 0.628,0.321 0.47,0.402 0.26,0.405 0.202,0.22 0.25,0.076 0.409,-0.033 0.457,0.095 0.476,0.227 0.293,0.084 0.108,-0.059 0.23,0.033 0.526,0.186 0.419,-0.102 0.621,0.077 1.442,0.332 0.077,-0.056 0.034,-0.013 0.123,-0.134 0.313,-0.665 0.265,-0.409 0.124,-0.154 0.306,-0.216 0.36,-0.055 0.345,0.019 0.289,0.095 0.264,0.11 0.292,10e-4 0.299,-0.106 0.444,-0.195 0.468,-0.127 0.402,-0.14 0.662,-0.245 0.259,-0.113 0.329,-0.044 0.922,0.224 0.597,-0.148 0.244,0.043 0.517,-0.159 0.094,-0.107 0.329,-0.541 0.35,-0.158 0.53,0.08 0.298,0.084 0.992,0.231 1.288,0.241 0.379,0.037 0.154,0.027 0.134,-0.038 0.423,-0.304 0.143,-0.043 0.121,0.005 z",
                        title: "Democratic Republic of Congo",
                        id: "CD",
                    },
                    {
                        d:
                            "m 539.05175,432.2924 0.198,0.353 0.095,0.124 0.818,0.834 0.158,0.198 0.405,0.605 0.248,0.408 0.285,0.587 0.027,0.319 -0.037,0.272 -0.057,0.773 -0.074,0.222 -0.359,0.416 -0.016,0.187 0.075,0.156 0.108,0.064 0.068,0.077 -0.041,0.36 0.129,0.141 0.269,0.094 0.681,0.064 0.354,0.052 0.279,0.072 0.133,0.035 0.073,0.127 -0.114,0.415 0.079,0.259 0.233,0.219 0.236,0.093 0.226,0.054 0.788,0.135 0.327,0.152 0.432,0.486 0.542,0.442 0.132,0.234 -0.024,0.213 -0.161,0.258 0.025,0.106 0.249,0.259 0.285,0.264 0.522,0.294 0.904,0.461 0.415,0.308 0.141,0.233 0.232,0.254 0.323,0.232 0.217,0.179 -0.15,0.505 0.045,0.166 0.081,0.144 0.189,0.199 0.075,0.255 0.187,0.319 0.223,0.145 0.373,0.054 0.196,0.148 0.41,0.254 0.396,0.219 0.169,0.15 0.105,0.134 0.09,0.158 0.045,0.158 0.009,0.341 0.068,0.423 0.213,0.289 0.198,0.216 -0.809,-0.248 -0.121,-0.005 -0.143,0.043 -0.423,0.304 -0.134,0.038 -0.154,-0.027 -0.379,-0.037 -1.288,-0.241 -0.992,-0.231 -0.298,-0.084 -0.53,-0.08 -0.35,0.158 -0.329,0.541 -0.094,0.107 -0.517,0.159 -0.244,-0.043 -0.597,0.148 -0.922,-0.224 -0.329,0.044 -0.259,0.113 -0.662,0.245 -0.402,0.14 -0.468,0.127 -0.444,0.195 -0.299,0.106 -0.292,-10e-4 -0.264,-0.11 -0.289,-0.095 -0.345,-0.019 -0.36,0.055 -0.306,0.216 -0.124,0.154 -0.265,0.409 -0.313,0.665 -0.123,0.134 -0.034,0.013 -0.077,0.056 -1.442,-0.332 -0.621,-0.077 -0.419,0.102 -0.526,-0.186 -0.23,-0.033 -0.108,0.059 -0.293,-0.084 -0.476,-0.227 -0.457,-0.095 -0.409,0.033 -0.25,-0.076 -0.202,-0.22 -0.26,-0.405 -0.47,-0.402 -0.628,-0.321 -0.393,-0.243 -0.156,-0.162 -0.339,-0.09 -0.519,-0.017 -0.498,0.159 -0.716,0.502 -0.664,1.029 -0.37,0.394 -0.297,0.101 -0.075,0.249 0.147,0.394 0.039,0.453 -0.104,0.77 0.038,0.56 -0.158,-0.089 -0.152,-0.262 -0.071,-0.053 -0.439,0.118 -0.227,0.106 -0.121,0.104 -0.093,0.016 -0.139,-0.143 -0.11,-0.026 -0.172,0.026 -0.177,-0.002 -0.114,-0.019 -0.076,0.013 -0.207,-0.085 -0.754,-0.216 -0.129,-0.072 -0.151,0.008 -0.391,0.188 -0.207,0.052 -0.624,0.117 -0.668,0.057 -0.256,0.003 -0.176,0.084 -0.113,0.117 -0.077,0.261 -0.131,0.45 -0.055,0.121 0.01,0.179 -0.039,0.301 -0.019,0.27 0.025,0.181 -0.189,0.365 -0.229,0.442 -0.19,0.379 -0.192,0.381 -0.133,-0.261 -0.082,-0.306 -0.032,-0.351 0.018,-0.093 -0.051,-0.104 -0.004,-0.023 -0.064,-0.265 0.065,-0.185 -0.053,-0.193 -0.156,-0.19 -0.141,-0.146 -0.082,-0.131 -0.067,-0.056 -0.155,-0.02 -0.209,-0.068 -0.277,-0.286 -0.268,-0.278 -0.344,-0.356 -0.275,-0.308 -0.338,-0.377 -0.312,-0.349 -0.187,-0.336 -0.076,-0.193 0.091,-0.019 0.135,-0.004 0.057,-0.035 0.003,-0.09 -0.139,-0.265 -0.066,-0.338 -0.115,-0.206 -0.363,-0.317 -0.346,-0.241 -0.11,-0.124 -0.062,-0.177 -0.133,-1.118 -0.059,-0.318 -0.109,-0.139 -0.079,-0.065 -0.03,-0.079 0.014,-0.199 0.046,-0.178 -0.002,-0.07 0.094,-0.156 0,-1.036 -0.051,-0.053 -0.061,-0.09 -0.097,0.007 -0.111,-0.009 -0.11,-0.151 -0.092,-0.19 0.027,-0.135 0.096,-0.112 0.105,-0.099 0.133,-0.082 0.393,-0.166 0.111,-0.083 0.07,-0.102 0.046,-0.138 0.228,-0.534 0.34,-0.532 0.145,-0.11 0.145,-0.352 0.199,-0.431 0.08,-0.201 0.059,-0.2 0.11,-0.161 0.374,-0.266 0.283,-0.466 0.307,0.025 0.314,0.074 0.403,0.037 0.316,-0.09 0.205,-0.182 0.451,-0.145 0.527,-0.168 0.071,-0.25 0.155,-0.131 0.179,-0.116 0.062,-0.015 0.013,0.083 0.109,0.261 0.223,0.257 0.327,0.284 0.093,-0.018 0.203,-0.215 0.51,-0.133 0.129,-0.059 0.362,-0.313 0.436,-0.201 0.096,-0.018 0.157,-0.053 0.44,-0.208 0.313,0.028 0.503,-0.033 0.839,-0.098 0.606,-0.033 0.307,-0.039 0.076,-0.042 0.119,-0.301 0.091,-0.085 0.228,-0.13 0.446,-0.454 0.293,-0.384 0.082,-0.128 0.007,-0.01 0.06,-0.024 0.126,-0.162 -0.125,-0.167 -0.5,-0.341 0.007,-0.046 -0.028,-0.058 0.027,-0.047 0.191,-0.139 0.257,-0.158 0.274,-0.059 0.715,0.012 0.61,-0.034 0.142,0.008 0.476,-0.081 0.325,-0.072 0.334,-0.164 0.757,0.017 0.63,-0.418 0.182,-0.074 0.079,-0.065 0.024,-0.064 0.295,-0.166 0.33,-0.343 0.261,-0.309 0.071,-0.218 0.714,-0.739 0.249,0.015 0.122,-0.091 0.283,-0.494 0.088,-0.09 0.133,-0.031 0.161,-0.056 0.14,-0.146 0.121,-0.218 10e-4,-0.269 -0.055,-0.216 0,-0.105 0.068,-0.096 0.114,-0.097 0.542,-0.266 0.138,-0.129 0.082,-0.116 0.152,-0.021 0.166,0.012 0.105,-0.072 0.118,-0.121 0.376,-0.163 0.348,-0.127 0.366,0.053 0.298,0.066 0.244,0.077 z",
                        title: "Central African Republic",
                        id: "CF",
                    },
                    {
                        d:
                            "m 527.12475,453.2194 0.033,0.487 -0.21,0.606 -0.158,0.454 -0.414,0.75 -0.37,0.672 -0.391,1.12 0.002,0.819 -0.043,0.515 -0.128,0.315 -0.308,0.847 -0.046,0.729 0.11,0.891 -0.105,0.845 -0.321,0.798 -0.138,0.628 0.08,0.757 -0.589,0.63 -0.741,0.626 -0.48,0.181 -0.373,0.211 -0.266,0.239 -0.087,0.13 -0.194,0.29 -0.441,0.899 -0.23,0.394 -0.301,0.337 -0.448,0.411 -0.164,0.194 -0.067,0.282 0.029,0.518 0.043,1.579 -0.075,0.458 -0.123,0.753 -0.44,0.844 -0.33,0.469 -0.33,0.144 -0.434,0.127 -0.208,0.159 -0.127,0.235 -0.242,0.204 -0.357,0.175 -0.452,0.429 -0.545,0.684 -0.373,0.392 -0.2,0.101 -0.207,0.009 -0.215,-0.082 -0.179,-0.011 -0.09,0.037 -0.058,-0.03 -0.085,-0.064 0.003,-0.158 -0.025,-0.261 -0.105,-0.269 0.125,-0.216 0.112,-0.164 -0.02,-0.086 -0.112,-0.137 -0.125,-0.197 -0.118,0.014 -0.251,0.15 -0.261,0.118 -0.244,0.049 -0.192,0.122 -0.105,0.066 -0.165,0 -0.092,-0.073 -0.201,-0.07 -0.109,0.024 -0.062,0.034 -0.026,0.248 -0.024,0.21 -0.039,0.197 -0.072,0.092 -0.303,0.098 -0.206,0.135 -0.177,0.091 -0.11,-0.023 -0.22,-0.179 -0.219,-0.166 -0.121,-0.14 -0.068,-0.1 -0.044,-0.044 -0.138,-0.007 -0.041,0.092 -0.069,-0.043 -0.215,-0.189 -0.254,-0.298 -0.092,-0.046 -0.14,0.005 -0.222,0.11 -0.218,0.171 -0.393,0.158 -0.328,0.088 -0.03,0.108 -0.077,0.186 -0.108,0.116 -0.291,0.036 -0.105,0.166 -0.251,0.32 -0.166,0.146 -0.044,-0.062 -0.101,-0.078 -0.206,-0.248 -0.204,-0.309 -0.054,-0.14 -0.058,-0.08 -0.009,-0.31 -0.307,-0.368 -0.77,-0.654 -0.082,-0.195 -0.658,-0.598 0.168,-0.431 0.125,-0.2 0.151,-0.138 0.606,-0.338 0.092,0.013 0.418,0.439 0.133,0.035 0.149,-0.012 0.176,0.018 0.087,-0.086 0.013,-0.113 -0.127,-0.127 -0.019,-0.136 0.09,-0.147 0.05,-0.164 0.131,-0.192 0.014,-0.091 -0.138,-0.099 -0.283,-0.151 -0.193,-0.146 -0.074,-0.139 0.053,-0.178 0.155,-0.145 -0.009,-0.079 -0.137,-0.13 -0.1,-0.139 -0.102,-0.087 -0.285,-0.052 0.055,-0.187 0.104,-0.276 0.026,-0.211 -0.079,-0.554 0.006,-0.1 0.078,-0.051 0.169,0.061 0.171,0.084 0.466,-0.12 0.162,-0.019 0.135,0.106 0.185,0.083 1.072,-0.231 0.021,-0.235 0.061,-0.213 0.008,-0.159 -0.044,-0.103 -0.053,-0.077 -0.032,-0.16 -10e-4,-0.171 0.103,-0.081 0.342,-0.204 0.106,0.007 0.239,0.112 0.224,0.174 0.2,0.366 0.137,0.316 0.221,0.382 0.467,0.156 0.558,0.099 0.302,-0.026 0.431,-0.326 0.244,-0.254 0.079,-0.137 0.142,0.071 0.161,0.334 0.103,0.13 0.026,0.124 -0.072,0.154 0.07,0.099 0.3,0.071 0.263,-0.067 0.118,-0.136 0.197,-0.178 0.002,-0.15 -0.106,-0.097 0,-0.134 0.11,-0.105 0.106,-0.288 0.033,-0.21 0.104,-0.134 0.197,-0.093 0.071,-0.084 0.11,-0.498 -0.057,-0.18 0,-0.149 0.125,-0.191 0.023,-0.312 -0.053,-0.511 -0.035,-0.351 -0.038,-0.368 0.096,-0.483 0.1,-0.503 -0.018,-0.125 -0.139,-0.153 -0.171,-0.139 -0.44,-0.115 -0.164,-0.183 -0.128,-0.194 -0.093,-0.062 -0.482,-0.076 -0.106,-0.11 0.043,-0.314 0.043,-0.463 -0.017,-0.321 0.085,-0.26 0.097,-0.195 0.213,-0.206 0.112,-0.243 0.062,-0.06 0.403,-0.041 0.146,-0.101 0.115,-0.103 0.049,-0.138 0.138,-0.229 0.122,-0.155 0.014,-0.105 -0.026,-0.146 -0.122,-0.287 -0.146,-0.239 -0.088,-0.086 -0.178,-0.562 -0.165,-0.132 -0.322,-0.072 -0.603,-0.064 -0.365,0.101 -0.555,0.189 -0.424,0.131 -0.276,0.074 -0.162,-0.02 -0.074,-0.086 0.108,-0.073 0.053,-0.171 -0.069,-0.245 -0.107,-0.224 -0.061,-0.316 0.026,-0.391 0.104,-0.368 0.223,-0.478 0.014,-0.195 0.673,0.006 0.672,0.006 0.734,-0.005 0.709,-0.004 0.553,0.016 0.266,-0.124 0.253,0.188 0.124,0.041 0.042,-0.015 0.097,0.132 0.315,-0.014 0.05,0.03 0.027,0.16 0.292,-0.004 0.144,0.035 0.117,-0.004 0.17,-0.092 0.122,0.03 0.222,0.12 0.158,0.103 0.221,-0.034 0.512,0.018 0.397,0.099 0.393,0.274 0.263,0.158 0.236,0.234 0.087,-0.042 0.082,-0.064 0.046,-0.028 -0.003,-0.2 -0.132,-0.341 -0.051,-0.289 0.029,-0.237 0.1,-0.171 0.171,-0.103 0.017,-0.16 0.002,-0.022 0.192,-0.381 0.19,-0.379 0.229,-0.442 0.189,-0.365 -0.025,-0.181 0.019,-0.27 0.039,-0.301 -0.01,-0.179 0.055,-0.121 0.131,-0.45 0.077,-0.261 0.113,-0.117 0.176,-0.084 0.256,-0.003 0.668,-0.057 0.624,-0.117 0.207,-0.052 0.391,-0.188 0.151,-0.008 0.129,0.072 0.754,0.216 0.207,0.085 0.076,-0.013 0.114,0.019 0.177,0.002 0.172,-0.026 0.11,0.026 0.139,0.143 0.093,-0.016 0.121,-0.104 0.227,-0.106 0.439,-0.118 0.071,0.053 0.152,0.262 z",
                        title: "Republic of Congo",
                        id: "CG",
                    },
                    {
                        d:
                            "m 501.62475,311.7424 0.085,0.054 0.2,0.183 -0.047,0.311 -0.229,0.5 -0.121,0.404 -0.013,0.309 0.023,0.145 0.041,-0.002 0.218,0.022 0.112,0 0.351,0.083 0.281,0.122 0.055,0.129 0.036,0.157 0.335,0.214 0.383,0.139 0.13,-0.045 0.476,-0.501 0.184,0.083 0.111,0.266 -0.005,0.142 -0.131,0.531 -0.023,0.285 0.113,0.188 0.012,0.147 -0.033,0.133 -0.19,0.012 -0.255,-0.072 -0.215,-0.229 -0.163,0.028 -0.141,0.059 -0.073,0.216 -0.064,0.258 0.021,0.143 0.101,0.111 0.078,0.234 0.057,0.304 0.043,0.139 -0.047,0.062 -0.134,0.042 -0.112,-0.041 -0.194,-0.363 -0.091,-0.138 -0.154,-0.025 -0.271,0.089 -0.416,0.203 -0.169,-10e-4 -0.142,-0.041 -0.134,-0.172 -0.114,-0.333 -0.036,-0.209 -0.079,0.006 -0.267,-0.06 -0.124,0.083 -0.001,0.34 -0.024,0.424 -0.134,0.273 -0.372,0.472 -0.136,0.205 -0.055,0.148 -0.011,0.128 0.057,0.221 0.077,0.211 -0.065,0.12 -0.196,0.063 -0.139,-0.128 -0.053,-0.228 -0.301,-0.312 0.137,-0.261 -0.023,-0.065 -0.497,-0.136 -0.214,-0.198 -0.3,-0.348 -0.056,-0.149 0.013,-0.486 -0.018,-0.118 -0.04,-0.058 -0.145,0.004 -0.203,0.169 -0.187,0.252 -0.382,0.285 -0.04,0.06 0.129,0.277 -0.006,0.107 -0.312,0.441 -0.059,0.145 -0.395,0.275 -0.181,0.103 -0.548,-0.202 -0.152,-0.024 -0.244,0.135 -0.346,0.129 -0.559,0.129 -0.206,-0.094 -0.097,-0.088 -0.048,-0.134 -0.141,-0.235 -0.158,-0.139 -0.11,-0.152 -0.147,-0.166 -0.095,-0.139 0.126,-0.446 -0.092,-0.156 -0.047,-0.224 0.024,-0.152 -0.05,-0.037 -0.505,-0.088 -0.419,0.028 -0.3,0.149 -0.245,0.248 -0.03,0.054 0.016,0.044 0.122,0.227 -0.207,0.24 -0.317,0.186 -0.224,0.019 -0.099,-0.036 -0.004,-0.256 0.186,-0.095 0.168,-0.167 0.056,-0.236 0.02,-0.166 -0.176,-0.201 0.021,-0.124 0.11,-0.234 0.063,-0.207 0.088,-0.179 0.349,-0.293 0.35,-0.296 0.053,-0.314 0.028,-0.383 0.049,-0.092 0.473,-0.23 0.118,-0.091 0.06,-0.13 0.372,-0.431 0.368,-0.428 0.075,-0.144 0.062,-0.085 0,-0.07 -0.047,-0.054 -0.175,-0.035 -0.06,-0.137 0.191,-0.244 0.239,-0.149 0.232,-0.003 0.093,0.069 -0.005,0.081 0.1,0.087 0.176,0.028 0.217,-0.03 0.216,-0.091 0.133,-0.217 0.077,-0.165 0.339,-0.188 0.231,0.095 0.643,0.025 0.468,-0.051 0.293,-0.128 0.363,0 0.244,0.072 0.043,-0.011 0.068,-0.016 0.066,-0.069 0.23,-0.047 0.03,-0.057 -0.009,-0.059 -0.041,-0.029 -0.283,0.03 -0.107,-0.045 -0.028,-0.104 0.091,-0.182 0.208,-0.148 0.176,-0.036 0.127,0.04 0.309,0.274 0.075,0.009 0.043,-0.049 0.064,-0.028 0.107,0.054 0.12,0.17 0.021,0.026 0.691,-0.06 0.155,0 0.469,0.299 z",
                        title: "Switzerland",
                        id: "CH",
                    },
                    {
                        d:
                            "m 459.39375,433.6934 0.175,0.188 0.222,0.129 0.337,-0.016 0.244,0.077 0.211,0.145 0.142,0.321 0.155,0.231 0.067,0.33 0.245,0.173 0.192,0.079 0.26,0.239 0.269,0.122 0.278,-0.028 0.13,0.125 0.208,0.088 0.208,0.006 0.183,-0.276 0.242,-0.109 0.611,-0.22 0.241,-0.1 0.244,-0.063 0.588,-0.02 0.547,0.068 0.271,0.051 0.186,-0.038 0.176,0.131 0.182,0.275 0.149,0.088 0.152,0.095 0.113,0.217 0.132,0.215 0.072,0.095 0.164,0.212 0.141,0.003 0.139,-0.092 0.06,-0.068 0.027,0.14 -0.055,0.227 0.011,0.141 0.077,0.054 -0.042,0.181 -0.161,0.308 -0.001,0.182 0.16,0.057 0.114,0.193 0.068,0.33 0.069,0.11 0.007,0.068 0.116,0.799 0.143,0.801 -0.091,0.104 -0.125,0.031 -0.081,0.037 -0.023,0.075 0.053,0.109 -0.035,0.1 -0.156,0.069 -0.339,0.254 -0.023,0.101 -0.09,0.216 -0.075,0.132 -0.111,0.245 -0.176,0.648 -0.065,0.537 -0.01,0.166 -0.068,0.115 -0.077,0.167 -0.368,0.459 -0.188,0.375 0.024,0.163 0.009,0.164 -0.056,0.118 0.01,0.317 0.045,0.265 0.066,0.26 0.267,0.736 0.139,0.447 0.086,0.36 0.076,0.242 0.071,0.098 0.029,0.093 0.396,0.067 0.078,0.053 0.108,0.469 -0.02,0.212 -0.078,0.081 0.002,0.179 -0.018,0.223 -0.058,0.088 -0.222,0.011 -0.151,0.084 -0.198,-0.034 -0.019,-0.055 -0.107,-0.02 -0.294,-0.127 0.048,-0.407 -0.136,-0.017 -0.105,0.054 -0.209,0.488 -0.1,0.084 -1.468,-0.252 -0.319,-0.203 -0.382,-0.046 -0.666,0.023 -0.549,0.061 -0.157,0.123 1.386,-0.072 0.149,0.014 0.07,0.074 -1.752,0.161 -0.668,0.096 -0.198,-0.026 -0.15,-0.156 -0.726,-0.019 -0.149,0.051 -0.09,0.115 0.286,-0.025 0.451,-0.006 0.121,0.088 -1.412,0.115 -0.979,0.22 -0.415,0.163 -1.366,0.535 -0.833,0.252 -0.218,0.093 -0.379,0.262 -0.487,0.165 -0.546,0.308 -0.333,0.069 -0.075,-0.098 -0.009,-0.52 -0.046,-0.697 0.017,-0.267 0.044,-0.251 0.001,-0.208 0.166,-0.078 0.044,-0.087 0.025,-0.271 0.155,-0.247 0.003,-0.43 0.046,-0.089 0.035,-0.114 -0.066,-0.282 -0.086,-0.532 -0.042,-0.035 -0.038,0.023 -0.087,0.01 -0.343,-0.184 -0.265,-0.032 -0.186,-0.157 -0.013,-0.179 -0.09,-0.105 -0.063,-0.207 -0.093,-0.237 -0.261,-0.144 -0.245,-0.035 -0.174,0.031 -0.204,-0.009 -0.234,-0.08 -0.162,-0.09 -0.153,-0.174 -0.142,-0.138 -0.113,0.017 -0.138,-0.033 -0.136,-0.063 -0.044,-0.049 0.568,-0.554 0.193,-0.271 0.021,-0.166 0.002,-0.167 0.062,-0.171 0.016,-0.261 -0.314,-0.95 -0.08,-0.294 -0.084,-0.086 -0.054,-0.033 0.159,-0.122 0.219,0.032 0.336,0.095 0.073,-0.094 0.254,-0.48 -0.007,-0.178 -0.025,-0.123 0.149,-0.329 0.118,-0.127 0.061,-0.137 -0.019,-0.188 -0.089,-0.07 -0.118,0.013 -0.141,-0.046 -0.215,-0.108 -0.109,-0.096 0.034,-0.435 0.02,-0.135 0.076,-0.078 0.118,-0.021 0.333,-0.013 0.27,0.05 0.237,0.029 0.126,0 0.102,0.129 0.136,0.132 0.12,-10e-4 0.042,-0.098 -0.028,-0.429 -0.08,-0.227 -0.181,-0.219 -0.468,-0.187 -0.011,-0.261 0.047,-0.283 0.101,-0.105 0.348,-0.18 -0.061,-0.097 -0.111,-0.103 -0.221,-0.104 0.051,-0.339 0.011,-0.303 -0.187,0.034 -0.192,0.018 -0.162,-0.093 -0.136,-0.184 -0.025,-0.506 0,-0.585 -0.026,-0.259 0.052,-0.138 0.165,-0.127 0.18,-0.165 0.064,-0.105 0.083,-0.002 0.216,-0.063 0.196,-0.144 0.183,-0.3 0.247,-0.241 0.278,0.018 0.082,-0.044 0.098,-0.008 0.116,0.159 0.117,0.121 0.083,0.003 0.062,0.229 0.507,0.096 0.217,0.063 0.183,0.167 0.064,0.004 0.077,-0.035 0.06,-0.058 0.012,-0.064 -0.079,-0.15 0.035,-0.135 0.082,-0.121 0.131,-0.008 0.197,-0.034 0.226,0 0.168,0.022 0.067,-0.121 -0.064,-0.34 0.017,-0.188 0.027,-0.158 0.063,-0.064 0.251,0.199 0.23,0.072 0.165,0.006 0.046,-0.038 -0.07,-0.217 0.019,-0.065 0.061,-0.038 0.108,-0.022 0.293,-0.088 0.03,0.017 0.055,0.342 -0.025,0.112 0.062,0.232 0.076,0.215 -0.006,0.088 -0.063,0.133 -0.074,0.122 0.008,0.05 0.117,0.083 0.224,0.086 0.232,0.02 0.129,-0.125 0.134,-0.102 0.093,-0.091 0.032,-0.135 0.147,-0.099 0.42,-0.124 0.386,-0.019 0.096,0.039 z m 6.839,14.913 -0.077,0.111 -0.372,-0.071 0.088,-0.093 0.361,0.053 z",
                        title: "Côte d'Ivoire",
                        id: "CI",
                    },
                    { d: "m 26.585748,523.5834 -0.09,10e-4 -0.114,-0.022 -0.074,-0.012 -0.008,-0.028 0.029,-0.085 0.06,-0.042 0.119,0.006 0.081,0.059 0.007,0.097 z", title: "Cook Islands", id: "CK" },
                    {
                        d:
                            "m 286.31375,528.3164 0.522,0.544 -0.227,0.74 -0.363,1.183 -0.28,0.917 -0.046,0.123 -0.058,0.18 -0.605,0.261 -0.882,0.38 -0.452,0.199 -0.569,0.256 -0.138,0.209 -0.165,0.113 -0.181,0.146 -0.069,0.16 -0.169,0.101 -0.153,0.361 0,0.277 0.098,0.189 0.17,0.08 0.054,0.228 0.054,0.16 0.123,0.126 -0.031,0.101 -0.1,0.076 -0.184,0.042 -0.125,0.228 -0.144,0.566 -0.023,0.203 0.164,0.513 0.087,0.277 0.236,1.007 0.035,0.274 -0.324,0.384 -0.129,0.233 -0.046,0.206 0.002,0.163 0.029,0.149 0.27,0.475 0.313,0.425 0.154,0.222 0,0.3 -0.077,0.171 -0.167,0.063 -0.37,0.117 -0.154,0.171 -0.169,0.026 -0.161,-0.137 -0.168,0.034 -0.215,0.12 -0.081,0.292 -0.188,0.498 -0.161,0.137 -0.12,0.381 -0.214,0.547 -0.103,0.33 -0.054,0.242 -0.216,0.155 -0.251,0.307 -0.193,0.299 -0.077,0.087 -0.146,0.026 -0.107,0.269 -0.364,0.406 -0.087,0.472 -0.132,0.251 -0.023,0.455 -0.201,0.834 -0.037,0.185 -0.203,0.146 -0.268,0.324 -0.087,0.237 0.124,0.71 0.154,0.719 0.01,0.337 -0.06,0.459 -0.041,0.2 0.102,0.083 0.169,0.053 0.054,0.176 -0.123,0.124 -0.054,0.221 -0.138,0.248 -0.409,0.098 -0.144,-0.089 -0.046,0.08 0.023,0.177 -0.091,0.209 -0.212,0.56 -0.14,0.509 -0.081,0.223 0.033,0.187 0.069,0.106 0.007,0.098 -0.116,0.124 -0.106,0.197 -0.115,0.027 -0.123,-0.053 -0.13,0.116 -0.026,0.243 -0.072,0.309 -0.033,0.361 -0.053,0.463 0.167,0.318 0.211,0.577 0.158,0.138 0.176,-0.009 0.138,0.117 0.077,0.135 -0.103,0.242 -0.182,0.038 -0.023,0.135 0.054,0.307 0.069,0.298 0.174,0.143 0.079,0.399 0.169,0.136 -0.021,0.512 0.17,0.602 0.18,0.175 0.084,0.082 -0.056,0.264 -0.143,0.21 -0.031,0.337 0.054,0.247 0.183,0.233 0.143,0.026 0.204,-0.095 0.215,0.11 0.031,0.201 0.031,0.183 -0.115,0.238 -0.123,0.439 -0.033,0.438 0.036,0.667 0.056,0.519 0.012,0.327 0.014,0.148 -0.077,0.102 -0.187,0.052 -0.159,0.021 -0.138,0.083 -0.031,0.167 -0.108,0.277 -0.111,0.206 -0.195,0.3 -0.124,0.311 -0.099,0.205 0.009,0.142 -0.071,0.273 -0.073,0.228 -0.154,0.768 -0.206,0.16 -0.164,0.079 -0.084,0.103 0.064,0.209 0.174,0.063 0.062,0.168 -0.023,0.263 0.115,0.244 -0.011,0.296 0.111,0.56 -0.1,0.367 0.034,0.318 -0.003,0.315 -0.146,0.246 -0.299,0.047 -0.165,0.227 -0.281,0.247 -0.031,0.199 -0.046,0.18 -0.115,0.066 -0.176,0 -0.146,0.028 -0.204,0.234 -0.218,0.126 -0.05,0.189 0.019,0.23 -0.115,0.143 -0.146,0.267 -0.092,0.286 0.092,0.268 0.1,0.479 0.015,0.201 -0.126,0.397 -0.104,0.256 0.1,0.327 0.084,0.183 -0.079,0.402 -0.067,0.253 0.054,0.464 0.2,0.522 0.191,0.465 0.028,0.542 0.049,0.431 0.091,0.467 0.192,0.186 0.146,0.156 -0.03,0.225 -0.107,0.274 -0.154,0.206 -0.38,0.068 -0.309,0.186 -0.249,0.129 -0.189,0.156 -0.136,0.166 -0.067,0.182 0.045,0.793 -0.03,0.293 -0.127,0.416 -0.119,0.336 -0.051,0.101 -0.015,0.149 -0.023,0.139 -0.133,0.032 -0.189,-0.062 -0.107,0.04 -0.077,0.109 0.065,0.26 0.069,0.459 0.096,0.195 -0.026,0.155 -0.036,0.334 -0.124,0.266 -0.166,-10e-4 -0.107,0.11 -0.046,0.19 0.05,0.248 0.218,0.203 0.077,0.13 -0.039,0.171 -0.169,0.07 -0.1,0.141 -0.095,0.313 -0.127,0.354 -0.135,0.262 -0.026,0.359 0.192,0.384 -0.021,0.376 -0.014,1.105 -0.019,0.376 0.059,0.624 -0.074,0.172 -0.039,0.164 0.188,0.455 0.209,0.738 0.056,0.294 -0.03,0.206 -0.281,0.175 -0.233,0.073 -0.138,-0.124 -0.092,0.051 -0.107,0.217 -0.123,0.176 -0.046,0.175 0.13,0.228 0.069,0.435 -0.146,0.187 -0.107,0.208 0.039,0.27 0.046,0.489 -0.092,0.813 0.124,0.29 0.134,0.139 0.438,0.166 0.329,0.083 0.087,0.271 -0.037,0.22 -0.158,0.109 -0.238,0.095 0,0.356 0.203,0.335 0.23,0.243 0.05,0.219 -0.013,0.224 -0.161,0.188 0.221,0.407 0.101,0.276 -0.101,0.213 -0.144,0.32 -0.126,0.153 0,0.174 -0.052,0.354 -0.012,0.347 0.042,0.207 1.387,0.164 0.317,0.064 0.173,0.207 -0.025,0.26 -0.173,0.277 -0.111,0.521 -0.272,0.087 -0.272,-0.139 -0.295,0.048 -0.256,0.034 -0.368,0.015 -0.489,0.067 -0.299,-0.077 -0.025,0.191 0.087,0.331 0.644,0.104 0.606,0.192 0.182,0.351 0.247,0.398 0.252,0.247 0.012,0.403 -0.396,0.422 -0.049,0.299 -0.52,0.088 -0.148,0.176 -0.074,0.583 0.062,0.46 0.198,0.159 0.136,0.301 -0.148,0.355 -0.35,0.245 -0.187,0.234 0.117,0.187 0.158,0.296 0.044,0.161 0.086,0.438 0.101,0.612 -0.012,0.297 -0.093,0.222 -0.348,0.35 -0.235,0.162 -0.046,0.433 -0.018,0.324 0.024,0.293 0.151,0.234 -0.012,0.236 -0.207,0.05 -0.177,0.113 -0.173,0.418 -0.504,0.428 -0.177,0.192 0.012,0.329 -0.199,0.471 -0.167,0.411 -0.128,0.384 0.025,0.405 0.284,0.178 0.223,0.395 0.099,0.499 -0.173,0.575 -0.402,0.217 -0.238,0.245 -0.072,0.186 0.063,0.605 -0.017,0.285 -0.063,0.268 -0.104,0.208 -0.217,0.232 -0.384,0.203 -0.326,0.14 -0.146,0.16 -0.171,0.353 -0.152,0.39 0.038,0.483 -0.916,0.057 -0.062,0.36 -0.198,0.284 -0.062,0.514 0.201,0.497 0.096,0.418 -0.164,0.505 0.06,0.52 0.018,0.415 0.322,0.462 0.21,0.573 0.105,0.485 0.063,0.379 0.084,0.23 0.132,0.261 0.061,0.302 0.198,0.098 0.356,-0.282 0.251,-0.191 0.175,-0.068 0.514,0.045 0.31,-0.178 0.14,0.019 0.189,0.1 0.147,0.21 0.111,0.477 0.068,0.535 -0.087,0.547 -0.145,0.119 -0.049,0.157 0.049,0.335 0.161,0.236 -0.003,0.338 -0.178,0.769 -0.116,0.317 0.206,0.358 0.184,0.319 0.371,0.238 0.305,0.338 0.21,0.28 -0.05,0.38 0.147,0.115 0.567,0.008 0.847,0.013 1.324,0.019 1.292,0.019 1.467,0.027 0.695,0.306 0.629,0.277 0.792,0 0.791,0.328 0.587,0.217 0.352,0.081 0.361,0.079 0.05,0.303 -1.583,-0.43 -0.355,-0.234 -0.301,-0.027 -0.578,0.292 -0.319,0.697 -0.167,0.198 -0.401,0.188 -0.404,0.037 -1.357,0.679 -0.483,0.058 -0.33,0.181 -0.322,0.26 -0.124,0.561 0.05,0.342 -0.367,1.229 -0.091,0.688 -0.002,0.351 0.105,0.575 -0.135,0.987 -0.244,0.216 -0.603,0.277 -0.41,-0.201 -0.702,-0.18 -0.5,-0.381 -0.643,-0.269 -0.206,-0.158 -0.568,-0.76 -0.061,-0.251 -0.041,-0.317 0.3,-0.451 0.161,-0.033 0.47,0.014 0.391,-0.073 0.25,0.242 0.069,0.528 -0.11,0.282 -0.1,0.174 0.031,0.133 0.281,-0.185 0.143,-1.182 0.955,-0.586 0.313,-0.342 0.305,-0.526 0.047,-0.15 0.023,-0.197 -0.203,-0.162 -0.451,-0.215 -1.432,1.103 -0.649,0.291 -0.418,0.317 -0.506,0.57 -0.096,0.169 -0.107,0.38 -0.051,0.419 -0.499,-0.191 -0.762,-0.606 -0.153,-0.222 0.153,-0.31 0.232,-0.258 0.016,-0.863 0.059,-0.302 0.161,-0.241 0.292,-0.265 0.145,-0.062 0.123,0.115 0.016,0.202 0.486,-0.015 0.943,-0.761 0.388,-0.018 0.512,0.17 0.578,-0.103 0.104,-0.077 0.12,-0.178 -0.431,-0.209 -0.413,-0.106 -1.161,-0.073 -0.251,0.081 -0.344,0.401 -0.114,-0.1 -0.073,-0.203 -0.394,-0.143 -0.189,0.029 -0.181,0.193 0.029,0.301 -0.101,0.322 -0.365,0.32 -0.248,0.51 0.012,0.398 -0.02,0.207 -0.091,0.11 -0.188,0.132 -0.605,-0.09 -0.342,-0.418 -0.133,-0.285 -0.387,-0.309 0.84,-0.383 0.295,-0.218 0.27,-0.485 0.201,-0.309 -0.143,-0.216 -0.168,-10e-4 0.016,0.345 -0.185,0.282 -0.387,-0.134 -0.571,0.419 -0.351,-0.112 -0.572,0.123 -0.28,-0.226 -0.06,-0.286 0.101,-0.298 -0.105,-0.504 -0.158,-0.122 -0.161,0.028 -0.072,-0.299 -0.174,-0.525 -0.077,-0.142 -0.083,-0.243 0.086,-0.06 0.197,0.069 0.172,0.158 0.262,0.02 0.577,0.342 0.24,-0.082 0.13,-0.078 0.049,-0.284 0.003,-0.269 0.099,0 0.328,0.344 0.208,-0.032 0.368,0.091 0.187,-0.037 0.345,-0.128 0.543,-0.378 0.282,-0.39 0.135,-0.053 0.167,0.05 0.112,0.112 0.002,0.271 0.127,0.252 0.173,0.205 0.048,0.252 -0.035,0.247 -0.309,0.348 -0.058,0.121 0.104,0.129 0.128,-0.061 0.176,-0.172 0.1,-0.236 0.027,-0.123 0.011,-0.176 -0.013,-0.214 -0.251,-0.607 -0.032,-0.137 0,-0.274 0.286,-0.253 0.081,-0.196 0.013,-0.379 -0.148,-0.261 -0.614,-0.6 -1.026,-0.6 -0.118,0.063 -0.08,0.109 0.095,0.078 0.136,0.04 0.914,0.495 0.238,0.287 0.156,0.077 0.185,0.19 -0.047,0.28 -0.921,0.274 -0.73,0.594 -0.546,0.361 -0.379,-0.132 -0.18,-0.366 -0.191,-0.473 -0.287,-0.275 -0.163,0.025 -0.131,-0.051 -0.104,-0.146 -0.221,0.121 -0.486,-0.327 -0.141,-0.143 0.356,-0.46 0.392,0.177 0.095,-1.287 -0.122,-0.291 -0.51,-0.317 -0.25,0.041 -0.342,-0.043 -0.23,-0.145 -0.262,-0.058 -0.222,-0.085 -0.29,-0.196 -0.35,-0.105 -0.473,-0.809 -0.203,-0.423 -0.11,-0.462 0.724,-0.01 0.424,-0.075 0.103,-0.191 -0.149,-0.367 -0.208,-0.287 0.152,-0.271 0.217,-0.209 0.226,0.093 0.557,0.466 0.096,0.315 0.396,0.964 0.096,0.087 0.047,0.09 0.819,0.542 0.115,-0.008 -0.051,-0.454 0.236,-0.616 0.229,-0.203 0.115,0.002 0.012,-0.103 -0.223,-0.255 0.109,-0.341 -0.071,-0.011 -0.197,0.219 -0.396,1.072 -0.243,0.196 -0.333,-0.486 -0.189,-0.351 -0.093,-0.124 0.033,-0.548 0.66,0.111 -0.227,-0.18 -0.77,-0.315 -0.192,-0.153 -0.143,-0.057 -0.256,-0.37 -0.318,-0.313 0.548,-0.563 0.282,-0.395 0.882,0.21 0.171,-0.122 -0.148,-0.289 -0.174,0.088 -0.275,-0.18 -0.428,-0.538 0.015,-0.273 0.078,-0.502 0.17,-0.106 0.36,-0.104 0.411,0.163 0.179,0.132 0.155,-0.063 -0.157,-0.37 -0.268,-0.141 -0.299,-0.264 0.031,-0.292 0.096,-0.241 0.072,-0.263 0.05,-0.369 -0.027,-0.287 0.085,-0.132 0.132,-0.06 0.008,-0.107 -0.26,0.022 -0.094,0.362 -0.036,0.331 -0.185,0.266 -0.079,0.301 -0.047,0.36 -0.103,0.414 -0.225,-0.158 -0.132,-0.162 -0.051,-0.11 0.023,-0.211 -0.061,-1.301 -0.006,-1.082 0.115,-0.839 0.318,-0.333 0.145,-0.097 0.132,0.043 0.203,-0.003 0.134,-0.121 -0.456,-0.2 -0.276,0.114 -0.205,0.16 -0.369,-0.12 -0.07,-0.429 -0.218,-0.37 -0.038,-0.473 0.017,-0.682 0.517,0.059 0.421,0.133 1.113,-0.011 0.914,0.653 0.403,-0.087 -0.019,-0.132 -0.309,-0.165 -0.192,-0.365 -0.113,-0.106 -0.053,-0.219 -0.018,-0.256 -0.227,-0.936 -0.091,0.024 -0.087,0.32 -0.189,0.535 -0.264,0.261 -0.404,0.105 -0.399,0.06 -0.347,-0.103 -0.081,-0.222 0.009,-0.257 -0.15,-0.126 -0.392,-0.11 -0.111,-0.063 -0.129,-0.231 0.187,-0.351 0.153,-0.209 0.188,0.042 0.178,0.095 0.228,0.274 0.224,0.053 0.255,-0.219 0.05,-0.148 -0.16,-0.093 -0.146,-0.037 -0.227,-0.116 -0.446,-0.419 0.223,-0.425 0.526,-0.486 0.161,-0.111 -0.139,-0.409 0.158,-0.446 -0.162,-0.367 -0.292,-0.395 -0.395,-0.087 -0.084,0.115 -0.014,0.162 0.063,0.122 -0.037,0.088 -0.09,-0.003 -0.501,-0.087 -0.336,-0.263 -0.548,-0.239 -0.071,-0.187 -0.06,-0.274 0.192,-0.472 -0.097,-0.007 -0.356,0.365 -0.538,0.191 -0.396,0.063 -0.174,0.148 -0.069,0.123 0.105,0.072 0.229,0.018 0.167,0.458 -0.042,0.176 -0.082,0.118 -0.186,0.023 -0.389,-0.316 -0.205,-0.359 0.005,-0.284 0.139,-0.387 0.617,-0.519 0.171,-0.219 0.362,-0.242 0.483,-0.546 0.422,-0.303 -0.205,-0.25 -0.216,-0.376 0.022,-0.521 0.852,-0.206 0.369,0.093 0.471,-0.016 0.263,-0.124 0.191,-0.027 0.402,-0.143 0.173,-0.202 0.041,-0.154 -0.002,-0.134 -0.047,-0.166 -0.065,-0.428 0.066,-0.143 0.172,-0.17 0.226,-0.053 0.104,0.013 0.268,0.156 -0.054,0.222 -0.107,0.267 -0.219,1.065 -0.11,0.241 -0.173,0.209 0.115,0.437 -0.173,0.307 -0.772,0.327 -0.102,0.019 0.058,0.117 0.447,-0.028 0.346,-0.069 0.343,-0.276 0.108,-0.42 0.142,-0.817 0.186,-0.115 0.217,-0.026 0.113,0.192 -0.037,0.431 -10e-4,0.417 -0.288,1.241 -0.348,0.5 -0.039,0.132 0.014,0.156 0.276,-0.023 0.21,-0.269 0.152,-0.344 0.152,-0.478 -0.017,-0.345 0.046,-0.213 0.063,-0.697 0.105,-0.352 -0.007,-0.491 -0.19,-0.185 -0.266,-0.112 -0.067,-0.3 0.139,-0.591 0.508,0.015 0.481,-0.402 0.315,-0.146 0.179,0.03 0.629,0.388 0.125,0.005 -0.02,-0.14 -0.098,-0.099 -0.248,-0.131 -0.456,-0.416 -0.614,-0.068 0.113,-0.539 0.119,-0.491 0.298,-0.068 0.5,-0.161 0.953,-0.734 0.166,-0.551 0.045,-0.618 -0.459,-0.161 -0.487,-0.403 -0.393,-0.214 -0.348,-0.269 0.068,-0.401 0.045,-0.652 0.437,-0.14 0.203,-0.892 -0.293,-0.681 0.07,-0.506 0.382,-0.431 0.068,-0.298 0.105,-0.327 0.336,-0.033 0.008,-0.178 -0.03,-0.324 -0.221,-0.382 -0.009,-0.528 0.208,-0.623 0.334,0.043 0.064,-0.026 -0.237,-0.376 -0.193,-0.413 0.033,-0.165 0.185,-0.14 0.214,-0.078 0.232,0.211 0.332,0.674 0.05,-0.173 -0.134,-0.686 -0.11,-0.851 -0.35,0.111 -0.321,-0.06 -0.121,-0.131 -0.12,-0.191 0.113,-0.233 0.113,-0.173 0.235,-0.218 0.488,-0.077 0.353,-0.273 0.118,-0.561 -0.116,0.055 -0.191,0.494 -0.322,0.167 -0.164,-0.025 -0.193,-0.092 -0.38,-0.43 -0.21,-0.1 -0.204,-0.011 -0.175,0.109 -0.446,0.758 -0.19,0.128 -0.785,0.061 -0.288,-0.088 -0.312,-0.117 0.038,-0.187 0.095,-0.199 0.177,-0.103 0.003,-0.114 -0.244,-0.029 -0.281,-0.209 -0.125,-0.265 -0.059,-0.474 -0.252,-0.747 -0.05,-0.534 0.178,-0.38 0.382,-1.486 0.117,-0.754 0.205,-0.661 -0.004,-0.435 0.53,-0.397 0.202,-0.237 0.45,-1.331 0.066,-0.715 -0.714,-2.157 -0.11,-0.41 -0.035,-0.509 0.17,-0.842 0.02,-0.319 -0.146,-0.46 -0.407,-0.75 -0.008,-0.382 0.171,-0.392 -0.166,-0.486 0.081,-0.3 0.089,-0.235 0.638,0.126 0.29,-0.06 0.155,-0.142 0.121,-0.397 0.061,-0.62 0.038,-0.267 0.055,-0.389 0.313,-0.156 0.108,-0.368 0.262,-0.512 0.27,-1.426 0.267,-0.351 0.27,-0.404 -0.103,-0.598 0.174,-0.276 0.16,-0.201 0.141,-0.364 0.192,-0.344 0.457,-0.493 0.116,-0.601 0.355,-1.035 0.07,-0.662 0.11,-0.447 -0.032,-0.416 0.213,-0.505 0.205,-0.425 0.064,-0.236 0.467,-0.56 0.079,-0.447 -0.167,-0.303 -0.003,-0.468 -0.13,-0.647 0.301,-0.242 0.122,-0.177 0.392,-1.03 -0.025,-0.403 0.113,-0.5 -0.258,-0.591 -0.036,-1.324 -0.144,-1.015 -0.238,-1.069 0.022,-0.596 -0.145,-0.74 -0.009,-0.426 0.111,-0.964 0.755,-0.605 0.147,-0.677 0.09,-0.912 -0.031,-0.663 -0.074,-0.297 -0.372,-0.487 -0.094,-0.869 0.072,-0.227 0.308,-0.244 0.217,-0.338 0.112,-0.524 0.226,-0.412 0.089,-0.994 0.191,-0.789 0.095,-0.275 0.3,-0.345 0.056,-0.092 0.046,-0.263 -0.014,-0.62 0.046,-0.378 0.239,-0.743 0.028,-0.343 0.265,-0.762 0.06,-0.547 0.113,-0.288 -0.044,-0.324 0.075,-0.724 -0.18,-0.408 -0.04,-0.238 0.227,-0.739 0.154,-0.18 0.249,-0.343 0.105,-0.385 0.019,-0.244 -0.318,-1.213 -0.043,-0.413 0.078,-0.959 0.109,-0.618 -0.036,-0.492 0.036,-0.253 0.055,-0.317 0.218,-0.384 0.05,-0.273 -0.077,-0.114 -0.259,-0.139 -0.214,-0.348 -0.015,-0.343 0.069,-0.25 0.016,-0.353 0.318,-0.069 0.17,-0.196 0.161,-0.366 0.203,-0.885 0.087,-1.095 0.121,-0.658 0.085,-0.325 0.072,-0.678 0.118,-0.443 0.021,-0.408 -0.023,-0.311 -0.305,-1.577 0.01,-0.579 0.129,-0.897 -0.002,-1.261 -0.026,-0.294 -0.115,-0.275 -0.034,-0.374 -0.184,-0.648 -0.166,-1.299 -0.003,-0.685 -0.072,-0.58 -0.159,-0.154 0.114,-0.035 0.267,-0.024 0.276,-10e-4 0.35,-0.123 0.373,-0.228 0.243,-0.331 0.104,-0.302 0,-0.265 -0.109,-0.337 -0.03,-0.238 0.129,-0.114 0.341,-0.044 0.276,-0.225 0.212,-0.196 0.044,0.332 0.385,0.446 0.125,0.502 0.087,0.063 0.529,0.251 0.009,0.059 -0.077,0.094 -0.077,0.122 0.054,0.171 0.096,0.235 0.032,0.218 0.059,0.225 0.058,0.345 0.035,0.313 0.135,0.461 0.027,0.285 0.002,0.172 0.105,0.168 0.205,0.202 0.277,0.203 0.22,0.237 0.168,0.161 0.204,0.131 0.157,0.121 0.062,0.083 0.021,0.067 -0.068,0.064 -0.248,0.313 -0.346,0.477 0.006,0.058 0.331,0.343 0.053,0.136 -0.004,0.192 -0.111,0.231 -0.357,0.073 -0.08,0.063 -0.01,0.074 0.082,0.098 -0.013,0.228 0.129,0.252 -0.066,0.086 -0.132,0.116 -0.003,0.114 0.043,0.126 0.139,0.103 0.55,0.354 0.043,0.049 -0.008,0.037 -0.213,0.237 -0.022,0.146 0.006,0.241 0.03,0.156 0.069,0.065 0.276,0.073 0.341,0.542 0.328,0.511 -0.004,0.44 0.034,0.514 0.208,0.404 0.029,0.323 0.07,0.368 0.248,0.224 0.097,0.442 0.025,0.236 -0.015,0.155 0.193,0.482 0.022,0.415 -0.046,0.298 0.002,0.167 0.027,0.117 0.166,0.105 0.073,0.066 0.244,0.029 0.357,0.007 0.611,-0.11 0.477,-0.096 z m -118.111,13.303 -0.433,0.097 0.014,-0.173 0.109,-0.15 0.32,0.086 0.15,0.016 -0.16,0.124 z m 85.53,21.082 -0.503,0.072 -0.017,-0.021 0.029,-0.059 0.115,-0.103 0.14,-0.125 0.03,-0.004 0.052,0.01 0.058,0.023 0.15,0.084 0.044,0.058 -0.016,0.048 -0.082,0.017 z m 14.118,34.733 -0.211,0.081 -0.197,0.02 -0.2,-0.059 -0.35,0.005 -0.348,-0.15 -0.327,-0.212 -0.091,-0.123 0.04,-0.176 0.235,-0.407 0.224,-0.768 0.149,-1.097 -0.12,-0.415 0.015,-0.171 0.055,-0.207 0.027,-0.212 -0.017,-0.214 0.028,-0.198 0.247,-0.417 0.037,-0.187 0.007,-0.203 0.107,-0.419 -0.033,-0.139 -0.091,-0.117 0.074,-0.103 0.858,0.307 0.57,0.071 0.03,0.318 0.11,0.25 0.065,0.448 0.089,0.102 -0.046,0.321 -0.263,0.139 0.023,0.296 0.151,0.279 -0.22,0.1 -0.238,0.06 -0.055,0.078 -0.172,0.061 -0.209,0.155 0.063,0.138 0.263,0.313 0.294,0.218 0.161,0.326 0.209,0.341 -0.102,0.217 -0.191,0.308 -0.305,0.205 -0.281,0.123 0.033,0.507 -0.097,0.207 z m -2.512,1.009 -0.397,0.068 -0.09,-0.115 0.001,-0.098 0.068,-0.08 0.204,-0.053 0.133,0.066 0.07,0.094 0.022,0.086 -0.011,0.032 z m 2.408,0.849 0.059,0.191 -0.124,0.026 -0.198,-0.03 -0.096,0.151 -0.049,0.03 -0.455,-0.134 -0.071,-0.06 0.009,-0.199 0.485,-0.017 0.309,-0.127 0.043,0.02 0.088,0.149 z m 0.211,2.21 -0.138,0.168 -0.218,0.03 -0.339,0.195 -0.036,0.169 -0.017,0.208 0.234,0.251 0.116,0.292 0.139,0.438 0.101,0.418 -0.009,0.129 0.025,0.218 0.167,0.338 0.016,0.153 -0.019,0.152 -0.067,0.282 -0.053,0.038 -0.165,0.028 -0.013,0.171 -0.041,0.056 -0.47,0.018 -0.232,-0.078 0.028,-0.515 -0.297,-0.202 -0.204,-0.34 -0.23,-0.586 -0.193,-0.18 -0.225,-0.462 -0.334,-0.394 0.385,-0.25 -0.06,-0.436 0.225,-0.149 0.338,-0.156 0.249,0.123 0.224,-0.043 0.1,-0.104 -0.03,-0.444 0.071,-0.349 0.247,-0.18 0.266,-0.021 0.1,0.197 0.131,0.194 0.322,0.153 -0.001,0.2 -0.093,0.27 z m 2.103,1.514 -0.68,0.315 -0.341,-0.106 -0.132,-0.232 -0.064,-0.195 -0.07,-0.33 0.116,-0.177 0.25,-0.254 0.092,-0.164 0.045,-0.193 -0.016,-0.18 0.032,-0.172 0.147,-0.06 0.503,0.192 0.522,0.288 0.186,0.199 0.035,0.159 -0.228,0.351 -0.146,0.289 -0.251,0.27 z m -1.813,0.163 -0.092,0.045 -0.083,-0.007 -0.085,-0.135 -0.028,-0.178 -0.183,-0.266 -0.052,-0.125 0.004,-0.15 0.105,-0.215 0.156,-0.059 0.105,0.008 0.127,0.253 0.037,0.275 0.033,0.284 -0.044,0.27 z m -3.958,0.271 -0.07,0.064 -0.087,-0.019 -0.072,-0.125 -0.05,-0.214 0.098,-0.081 0.078,0 0.087,0.114 0.045,0.184 -0.029,0.077 z m 2.048,3.186 -0.156,0.178 -0.272,0.085 -0.27,-0.139 -0.326,0.065 -0.034,-0.305 0.122,-0.25 0.247,-0.297 0.179,-0.397 -0.021,-0.56 0.147,-0.128 0.079,-0.197 0.313,-0.121 0.071,0.416 -0.084,0.744 0.211,0.44 0.03,0.147 -0.041,0.169 -0.195,0.15 z m -2.244,8.767 -0.207,0.054 -0.024,-0.136 -0.187,-0.226 0.163,-0.149 0.318,-0.155 0.241,0.018 0.217,0.118 0.029,0.139 -0.379,0.183 -0.093,0.101 -0.078,0.053 z m 1.529,3.168 -0.053,0.101 -0.346,-0.062 -0.599,0.106 -0.252,-0.384 -0.11,-0.609 -0.075,-0.125 -0.149,-0.347 -0.075,-0.227 -0.152,-0.352 -0.059,-0.369 -0.038,-0.111 0.137,-0.219 0.627,-0.216 0.223,-0.349 0.191,0.046 -0.053,0.712 0.115,0.24 0.213,0.2 0.04,0.082 0.036,0.253 0.107,0.393 0.138,0.185 0.036,0.114 0.006,0.097 -0.05,0.135 0.142,0.706 z m -2.646,0.727 -0.316,0.005 -0.079,-0.756 0.372,-1.086 0.026,-0.413 -0.125,-0.311 -0.051,-0.255 0.031,-0.104 0.475,-0.215 0.148,0.228 0.177,0.605 0.336,0.87 -0.008,0.835 -0.187,0.206 -0.586,0.211 -0.213,0.18 z m 2.902,1.638 0.026,0.629 -0.047,0.633 -0.108,0.78 0.018,0.159 0.126,0.038 0.034,0.098 -0.037,0.412 -0.067,0.317 -0.131,0.26 -0.076,0.312 -0.07,0.069 -0.305,0.055 -0.167,-0.034 -0.134,-0.355 -0.039,-0.218 0.008,-0.285 -0.165,-0.382 -0.005,-0.146 0.064,-0.251 0.133,-0.124 0.02,-0.386 0.067,-0.115 0.151,-0.159 0.023,-0.065 -0.014,-0.057 -0.056,-0.006 -0.607,0.476 -0.059,0.135 -0.027,0.179 -0.007,0.632 -0.107,0.366 -0.097,0.07 -0.283,0.016 -0.374,-0.037 -0.424,-0.336 -0.277,0.093 -0.057,-0.408 0.139,-0.326 0.516,0.028 0.087,-0.579 -0.164,-0.136 -0.182,-0.232 -0.108,-0.213 0.097,-0.158 0.299,-0.229 0.16,-0.024 0.148,0.128 0.367,-0.097 -0.021,-0.363 -0.327,-0.16 0.073,-0.275 0.413,-0.263 0.247,-0.265 0.011,-0.301 -0.1,-0.3 0.031,-0.117 0.206,-0.247 0.288,-0.119 0.131,0.017 0.267,0.174 0.238,0.021 0.058,0.052 0.043,0.193 0.153,1.426 z m -1.769,-1.328 -0.023,0.338 -0.415,0.652 -0.357,0.386 -0.326,0.306 -0.208,-0.003 -0.171,-0.147 0.192,-0.242 0.239,-0.241 -0.076,-0.312 -0.072,-0.09 -0.101,-0.033 -0.173,-0.162 0.053,-0.241 0.101,-0.115 0.134,-0.088 0.125,0.052 0.542,-0.169 0.171,-0.137 0.33,-0.023 0.035,0.269 z m 0.145,6.298 -0.549,0.352 -0.161,-0.146 -0.396,0.002 0.104,-0.381 0.04,-0.279 0.06,-0.108 0.022,-0.241 0.119,-0.439 0.328,0.146 0.245,0.043 0.332,0.146 0.36,0.093 0.105,0.382 -0.35,0.175 -0.259,0.255 z m -0.694,1.69 -0.08,0.408 -0.227,-0.035 -0.076,-0.104 -0.04,-0.259 -0.07,-0.125 0.098,-0.259 0.064,-0.287 -0.022,-0.22 0.348,0.016 0.414,0.057 0.115,0.06 -0.127,0.194 -0.121,0.115 -0.25,0.071 -0.026,0.368 z m 2.087,2.654 -0.006,0.375 -0.089,0.12 -0.078,0.036 -0.197,-0.114 -0.113,-0.013 -0.187,0.199 -0.157,0.101 -0.234,-0.026 -0.311,-0.135 -0.277,0.566 -0.13,0.19 -0.271,0.265 -0.03,-0.311 0.172,-0.463 0.08,-0.315 0.158,-0.468 0.318,0.176 0.446,-0.173 0.406,-0.321 0.351,-0.002 0.115,0.171 0.034,0.142 z m -0.742,1.586 0.12,0.879 0.086,0.123 0.286,0.065 0.311,0.448 0.014,0.123 -0.376,0.765 -0.08,0.545 -0.441,-0.039 -0.185,-0.541 -0.279,-0.521 -0.094,-0.608 -0.153,-0.521 0.273,-0.294 0.261,0.065 0.015,-0.398 0.242,-0.091 z m 1.911,1.361 -0.084,0.05 -0.312,-0.105 -0.156,-0.095 -0.238,-0.239 -0.038,-0.247 -0.107,-0.293 0.069,-0.004 0.249,0.116 0.102,0.089 0.136,0.188 0.403,0.269 0.051,0.079 -0.01,0.103 -0.065,0.089 z m 15.469,3.303 -0.005,1.375 -0.005,1.363 -0.004,1.283 -0.004,1.292 -0.004,1.256 -0.004,1.297 -0.022,1.464 -0.016,1.096 -0.422,0 -0.111,0.112 -0.668,0.161 -1.136,-0.248 -0.284,-0.224 -0.381,-0.489 -0.136,0.132 -0.358,0.207 -0.368,0.164 -0.302,0.018 -0.28,-0.203 -0.06,-0.103 -0.064,-0.022 -0.604,0.281 -0.668,-0.287 -0.532,-0.175 -0.855,-0.099 -0.594,-0.36 -1.096,0.031 -0.197,-0.119 -0.073,-0.352 0.058,-0.163 0.234,-0.099 0.065,-0.195 0.237,0.047 0.307,0.258 0.094,-0.009 0.203,-0.243 0.3,-0.215 0.107,-0.022 0.551,0.265 0.222,-0.03 0.318,-0.119 0.057,-0.104 0.051,-0.182 0.084,-0.106 0.283,-0.052 0.276,0.104 0.032,0.317 -0.038,0.34 0.359,0.092 0.436,-0.011 0.3,0.127 0.038,-0.207 -0.479,-0.541 -0.201,-0.335 -0.27,-0.197 -0.347,-0.101 -0.29,-0.626 0.018,-0.547 -0.031,-0.531 0.626,-0.291 -0.144,-0.452 0.216,-0.342 0.246,-0.131 0.248,1.26 0.178,0.444 -0.227,0.09 -0.475,-10e-4 0.265,0.623 0.436,0.214 0.375,0.463 0.008,0.337 0.208,0.152 0.502,0.01 0.346,-0.066 0.163,-0.225 0.188,-0.071 0.337,0.279 0.568,0.207 0.153,0.146 0.111,0.244 0.007,0.263 0.029,0.14 0.165,-0.068 0.236,-0.357 0.116,-0.124 0.142,-0.061 0.09,-0.08 0.003,-0.104 -0.425,-0.252 -2.224,-1.175 -0.273,-0.467 -0.184,-0.586 0.006,-0.603 0.162,-0.186 0.397,-0.237 0.729,-0.334 0.841,-0.479 0.105,-0.092 -0.01,-0.299 -0.105,-0.201 -0.334,-0.147 -0.349,-0.037 -0.333,0.015 -0.333,0.063 -0.607,0.317 -0.344,-0.02 -0.327,-0.171 -0.242,-0.342 -0.125,-0.461 0.001,-0.294 0.046,-0.27 0.148,-0.275 0.199,-0.12 0.178,0.016 0.168,-0.064 0.1,-0.094 0.085,-0.126 -0.025,-0.109 -0.065,-0.094 -0.271,-0.194 -0.107,-0.187 -0.232,-0.301 0.127,-0.084 0.408,-0.047 0.285,0.207 0.266,0.245 0.163,-10e-4 0.146,-0.103 0.336,-0.313 0.281,-0.393 0.256,-0.446 0.207,-0.267 0.236,-0.024 0.693,0.836 0.245,0.031 0.814,-0.45 0.091,0.024 0.276,0.228 0.083,0.098 z m -16.153,1.249 0.046,0.042 0.111,-0.01 0.155,0.075 0.586,0.092 0.524,0.218 0.273,0.205 0.359,0.063 0.294,0.261 0.125,0.066 0.151,0.021 0.394,0.483 0.022,0.055 0.447,0.382 0.022,0.061 -0.254,0.021 -0.515,-0.178 -0.257,-0.01 -0.186,-0.055 -0.043,-0.031 -0.037,-0.221 -0.059,-0.109 -0.495,-0.509 -0.206,-0.111 -0.357,-0.099 -0.406,0.069 -0.274,-0.065 -0.095,0.023 -0.405,-0.403 -0.404,-0.34 -0.173,-0.403 -0.257,-0.309 -10e-4,-0.09 0.118,-0.069 0.276,0.174 0.272,0.298 0.147,0.113 0.102,0.29 z m 4.105,2.613 0.076,0.383 0.04,0.073 0.204,-0.062 0.348,-0.035 0.57,0.143 0.065,0.051 0.242,0.419 0.186,0.179 0.284,0.389 -0.283,0.26 -0.167,0.374 -0.009,0.189 -0.111,0.11 -0.174,0.114 -0.259,0.219 -0.319,0.024 -0.314,0.116 -0.146,0.105 -0.086,0.007 -0.102,-0.057 -0.109,-0.108 -0.035,-0.125 0.215,-0.116 0.281,-0.413 0.05,-0.428 -0.303,-0.077 -0.181,0.059 -0.135,-0.002 -0.155,-0.131 -0.094,0.201 -0.035,0.193 0.041,0.295 -0.028,0.096 -0.11,0.054 -0.254,-0.112 -0.264,-0.199 -0.021,-0.115 0.054,-0.398 -0.005,-0.207 -0.055,-0.298 -0.029,-0.031 -0.099,0.007 -0.311,0.057 -0.311,-0.381 -0.168,-0.402 -0.572,-0.115 0.446,-0.56 0.672,-0.079 0.228,0.283 0.748,0.195 -0.045,-0.3 0.012,-0.107 0.103,-0.134 0.058,-0.011 0.088,0.094 0.144,0.04 0.066,0.092 0.068,0.182 z m 4.301,2.611 0.622,0.381 0.412,-0.003 -0.002,0.238 0.05,0.406 -0.065,0.165 -0.154,0.169 -0.097,0.24 -0.072,0.037 -0.453,-0.29 -0.473,-0.396 -0.238,0.069 -0.315,-0.097 -0.254,0.021 -0.158,0.224 -0.368,0.117 -0.067,-0.448 -0.334,-0.424 -0.333,-0.339 0.181,-0.519 0.216,-0.083 0.204,-0.173 0.817,0.183 0.424,0.155 0.457,0.367 z m 1.119,4.023 0.13,0.308 0.048,0.057 0.346,0.121 0.156,-0.073 0.376,-0.034 0.226,-0.119 0.329,-0.061 0.377,0.767 -0.042,0.234 -0.298,0.254 -0.201,0.056 -0.19,-0.077 0.013,-0.129 -0.035,-0.112 -0.13,-0.146 -0.122,0.014 -0.197,0.108 -0.094,-0.014 -0.199,-0.119 -0.349,-0.088 -0.069,-0.108 -0.008,-0.16 -0.066,-0.08 -0.364,-0.257 -0.233,-0.219 -0.197,-0.029 -0.072,0.026 -0.073,0.104 -0.177,0.1 -0.051,-0.017 -0.057,-0.083 -0.029,-0.12 0.075,-0.242 0.102,-0.023 0.497,0.048 0.305,0.112 0.273,10e-4 z m 3.617,0.248 2.251,0.481 0.694,-0.292 0.549,0.009 0.163,0.401 -0.557,0.423 -0.042,0.134 0.078,0.108 0.572,0.068 0.145,0.136 0.133,0.176 -0.113,0.261 -0.011,0.121 0.06,0.117 0.429,0.396 0.176,0.204 0.089,0.196 0.036,0.344 -0.008,0.276 -0.096,0.037 -0.209,-0.084 -0.204,-0.16 -0.179,-0.396 -0.125,-0.079 -0.361,-0.08 -0.358,-0.193 -0.279,0.011 -0.257,-0.082 -0.23,0.072 -0.082,-0.13 -0.099,-0.263 -0.002,-0.114 0.121,-0.414 -0.003,-0.108 -0.063,-0.013 -0.268,0.084 -0.108,-0.056 -0.292,-0.3 -0.118,-0.057 -0.293,-0.029 -0.166,0.53 -0.009,0.132 0.169,0.338 0.332,0.521 -0.168,0.01 -0.48,-0.16 -0.123,-0.1 -0.148,-0.263 -0.285,-0.152 -0.1,-0.094 -0.029,-0.11 -0.003,-0.341 -0.063,-0.05 -0.405,0.087 -0.083,-0.083 -0.034,-0.144 -0.059,-0.08 -0.261,-0.131 -0.023,-0.082 0.116,-0.097 0.072,-0.243 0.102,-0.874 0.509,0.181 z m 7.361,1.148 -0.083,0.188 -0.177,0.248 -0.238,0.192 -0.231,0.053 -0.167,-0.1 -0.084,-0.176 -0.039,-0.174 -0.057,-0.095 -0.088,-0.021 -0.114,0.005 -0.14,0.065 -0.298,0.251 -0.128,0.065 -0.086,0.016 -0.848,-0.188 -0.083,-0.07 -0.1,-0.167 -0.11,-0.497 -0.356,-0.442 0.545,-0.25 0.654,10e-4 1.262,0.191 0.503,0.043 0.387,0.42 0.061,0.252 0.015,0.19 z m 1.706,0.369 -0.224,0.215 -0.167,-0.014 -0.054,-0.078 -0.018,-0.098 0.033,-0.104 0.07,-0.095 0.164,-0.119 0.051,-0.019 0.246,0.118 -0.101,0.194 z m -2.292,2.709 -0.103,0.039 -0.076,-0.094 -0.115,-0.066 -0.468,-0.139 -0.01,-0.084 0.049,-0.12 0.093,-0.107 0.18,-0.106 0.145,-0.275 0.065,0.021 0.066,0.112 0.112,0.38 0.135,0.274 -0.014,0.095 -0.059,0.07 z m -0.803,0.562 -0.102,0.01 -0.248,-0.093 -0.371,-0.041 -0.042,-0.038 -0.009,-0.073 0.044,-0.075 0.202,-0.057 0.609,0.049 0.078,0.034 0.021,0.058 -0.099,0.165 -0.083,0.061 z",
                        title: "Chile",
                        id: "CL",
                    },
                    {
                        d:
                            "m 518.33975,441.8864 -0.283,0.466 -0.374,0.266 -0.11,0.161 -0.059,0.2 -0.08,0.201 -0.199,0.431 -0.145,0.352 -0.145,0.11 -0.34,0.532 -0.228,0.534 -0.046,0.138 -0.07,0.102 -0.111,0.083 -0.393,0.166 -0.133,0.082 -0.105,0.099 -0.096,0.112 -0.027,0.135 0.092,0.19 0.11,0.151 0.111,0.009 0.097,-0.007 0.061,0.09 0.051,0.053 0,1.036 -0.094,0.156 0.002,0.07 -0.046,0.178 -0.014,0.199 0.03,0.079 0.079,0.065 0.109,0.139 0.059,0.318 0.133,1.118 0.062,0.177 0.11,0.124 0.346,0.241 0.363,0.317 0.115,0.206 0.066,0.338 0.139,0.265 -0.003,0.09 -0.057,0.035 -0.135,0.004 -0.091,0.019 0.076,0.193 0.187,0.336 0.312,0.349 0.338,0.377 0.275,0.308 0.344,0.356 0.268,0.278 0.277,0.286 0.209,0.068 0.155,0.02 0.067,0.056 0.082,0.131 0.141,0.146 0.156,0.19 0.053,0.193 -0.065,0.185 0.064,0.265 0.004,0.023 0.051,0.104 -0.018,0.093 0.032,0.351 0.082,0.306 0.133,0.261 -0.002,0.022 -0.017,0.16 -0.171,0.103 -0.1,0.171 -0.029,0.237 0.051,0.289 0.132,0.341 0.003,0.2 -0.046,0.028 -0.082,0.064 -0.087,0.042 -0.236,-0.234 -0.263,-0.158 -0.393,-0.274 -0.397,-0.099 -0.512,-0.018 -0.221,0.034 -0.158,-0.103 -0.222,-0.12 -0.122,-0.03 -0.17,0.092 -0.117,0.004 -0.144,-0.035 -0.292,0.004 -0.027,-0.16 -0.05,-0.03 -0.315,0.014 -0.097,-0.132 -0.042,0.015 -0.124,-0.041 -0.253,-0.188 -0.266,0.124 -0.553,-0.016 -0.709,0.004 -0.734,0.005 -0.672,-0.006 -0.673,-0.006 -0.067,-0.175 -0.139,-0.09 -0.251,-0.008 -0.739,0.035 -0.566,-0.028 -0.181,-0.023 -0.201,-0.045 -0.472,-0.041 -0.584,0.033 -0.133,-0.009 -0.467,0.006 -1.068,-0.047 -0.591,0.007 0.014,0.107 -0.038,0.076 -0.031,0.186 -0.652,-10e-4 -0.858,0 -0.81,0 -0.548,0 -0.918,0 -0.308,-0.127 -0.093,-0.082 -0.019,-0.092 -0.011,-0.062 -0.072,-0.018 0.059,-0.656 0.129,-0.546 0.05,-0.507 0.177,-0.453 -0.094,-0.449 -0.109,-0.196 -0.573,-0.636 0.263,-0.24 -0.346,0.033 -0.074,-0.237 -0.168,-0.283 0.103,-0.046 0.099,-0.155 0.313,0.047 -0.01,-0.076 -0.27,-0.238 0.026,-0.12 0.111,-0.134 -0.054,-0.057 -0.194,0.14 -0.14,-0.005 -0.108,-0.09 -0.08,-0.015 0.048,0.182 -0.109,0.163 -0.103,0.057 -0.176,-0.01 -0.144,-0.041 -0.039,-0.091 -0.135,-0.069 -0.38,-0.121 -0.319,-0.142 -0.064,-0.388 -0.127,-0.167 -0.052,-0.189 -0.03,-0.216 0.044,-0.332 -0.082,-0.053 -0.092,-0.018 -0.138,0.016 -0.127,-0.018 -0.152,-0.184 -0.133,-0.071 0.082,0.338 -0.094,0.095 -0.229,-0.027 -0.098,-0.128 -0.019,-0.096 0.105,-0.408 -0.041,-0.009 0.082,-0.217 0.156,-0.264 0.211,-0.335 0.239,-0.422 0.164,-0.745 0.111,-0.465 0.101,-0.424 0.175,-0.383 0.177,-0.256 0.501,-0.496 0.378,-0.375 0.193,-0.151 0.134,-0.127 0.236,-0.145 0.241,-0.173 0.185,-0.331 0.151,-0.309 0.115,-0.067 0.151,-0.054 0.462,-0.332 0.293,-0.211 0.068,0.105 0.05,0.13 0.056,0.06 0.246,0.041 0.337,-0.002 0.194,-0.038 0.103,-0.11 0.105,-0.301 0.061,-0.057 0.079,-0.015 0.368,0.21 0.306,0.299 0.302,0.296 0.153,0.105 0.067,0.116 0.132,0.539 0.076,0.134 0.131,0.056 0.236,-0.036 0.245,-0.095 0.216,-0.138 0.213,-0.179 0.145,-0.161 0.063,-0.119 0.032,-0.441 0.048,-0.097 0.217,-0.176 0.364,-0.294 0.208,-0.169 -0.018,-0.06 -0.13,-0.18 -0.115,-0.198 0.117,-0.204 0.121,-0.157 0.459,-0.531 0.002,-0.176 0.024,-0.213 0.367,-0.604 0.211,-0.802 0.006,-0.155 0.219,-0.387 0.259,-0.496 0.503,-0.08 0.193,-0.124 0.223,-0.219 0.144,-0.204 0.068,-0.194 0.05,-0.375 0.089,-0.427 0.055,-0.375 0.151,-0.347 0.252,-0.175 0.438,-0.146 0.066,-0.068 0.063,-0.23 0.049,-0.478 0.014,-0.288 0.017,-0.125 0.056,-0.216 0.406,-0.383 0.18,-0.6 0.16,-0.629 0.461,-0.761 0.54,-0.758 0.25,-0.204 0.211,-0.094 0.244,-0.01 0.166,-0.056 0.581,-0.378 0.243,-0.128 0.179,-0.131 0.043,-0.115 0.018,-0.167 -0.056,-0.392 0.1,-0.287 0.059,-0.447 0.024,-0.348 -0.021,-0.121 -0.091,-0.167 -0.017,-0.036 -0.174,-0.217 -0.291,-0.131 -0.4,-0.036 -0.212,-0.077 -0.035,-0.182 -0.02,-0.105 -0.021,-0.114 -0.029,-0.253 -0.269,-1.333 0.508,0.004 0.608,0.159 0.153,0.12 0.081,0.456 0.22,0.259 0.387,0.212 0.241,0.439 0.094,0.664 0.213,0.397 0.049,0.063 0.241,0.573 0.06,0.176 0.018,0.345 -0.027,0.233 0.123,0.288 -0.186,0.492 -0.056,0.301 -0.016,0.423 0.109,0.746 0.178,0.575 0.193,0.465 0.211,0.361 0.347,0.398 0.371,0.363 0.345,0.229 -0.32,0.134 -0.62,0.017 -0.356,-0.077 -0.17,-0.004 -0.171,0.048 -0.662,0.069 -0.668,-0.032 -0.619,-0.091 -0.376,0.015 -0.29,0.221 -0.236,0.332 -0.22,0.263 0.077,0.291 0.166,0.161 0.32,0.354 0.286,0.343 0.147,0.23 0.572,0.504 0.552,0.45 0.108,0.075 0.155,0.081 0.096,0.033 0.301,0.258 0.416,0.423 0.382,0.662 0.271,0.672 0.264,0.653 0.116,0.11 0.184,0.07 0.022,0.14 -0.014,0.207 -0.057,0.169 z",
                        title: "Cameroon",
                        id: "CM",
                    },
                    {
                        d:
                            "m 786.10275,406.0084 0.14,0.132 0.091,0.191 0.075,0.352 0.045,0.324 -0.283,0.206 -0.254,0.083 -0.509,0.789 -0.106,0.249 -0.086,0.104 -0.027,0.108 0.01,0.108 -0.132,0.378 -0.116,0.465 -0.074,0.19 -0.146,0.146 -0.185,0.074 -0.12,0.011 -0.109,0.04 -0.269,0.253 -0.303,0.19 0.051,0.087 0.003,0.083 -0.133,0.092 -0.147,-0.018 -0.427,0.075 -0.156,0.142 -0.16,0.262 -0.061,0.036 -0.258,0.061 -0.196,0.023 -0.335,-0.185 -0.166,-0.054 -0.442,-0.075 -0.431,-0.125 -0.302,-0.143 -0.619,-0.35 -0.072,-0.633 -0.106,-0.342 -0.007,-0.122 0.041,-1.055 0.043,-0.116 0.079,-0.101 0.273,-0.236 0.313,-0.187 0.449,-0.392 0.326,-0.179 0.273,-0.258 -0.16,0.011 -0.118,-0.033 0.116,-0.221 0.125,-0.118 0.145,-0.064 0.29,0.046 0.268,-0.046 0.198,-0.196 0.188,-0.042 0.716,0.064 0.496,-0.09 0.248,-0.181 0.117,-0.007 0.366,0.051 0.136,0.188 -0.012,-0.126 0.016,-0.123 0.067,0.013 0.479,0.233 0.001,-0.285 0.027,-0.075 0.149,-0.119 0.075,0.002 0.186,0.23 0.181,0.134 0.225,0.071 z m -1.413,-3.281 0.104,0.104 0.278,-0.073 0.051,0.132 -0.002,0.062 -0.099,0.152 -0.23,-0.117 -0.229,0.027 -0.166,-0.01 -0.045,-0.072 0.127,-0.148 0.211,-0.057 z m 6.339,-1.638 -0.275,0.063 -0.059,-0.013 0.096,-0.155 0.249,-0.107 -0.011,0.212 z m 0.411,0.114 -0.054,0.06 -0.082,-0.109 -0.023,-0.156 -0.059,-0.084 0.135,-0.106 0.06,-0.117 0.16,0.023 0.066,0.035 -0.141,0.122 -0.033,0.052 -0.029,0.28 z m 2.147,-3.624 0.023,0.14 -0.219,-0.213 -0.063,-0.012 -0.104,-0.08 -0.061,-0.134 0.17,-0.005 0.156,0.159 0.098,0.145 z m 12.988,-5.155 -0.094,0.185 -0.166,-0.031 -0.005,-0.131 -0.034,-0.038 0.046,-0.122 0.03,-0.034 0.188,0.104 0.035,0.067 z m 4.597,-2.958 -0.209,0.143 -0.13,-0.068 -0.002,-0.192 0.066,-0.173 -0.076,-0.125 0.074,-0.148 0.155,-0.044 0.056,0.093 0.087,0.049 0.027,0.051 10e-4,0.097 -0.083,0.16 0.065,0.087 -0.031,0.07 z m 4.014,-8.222 -0.245,0.076 -0.092,0 0.008,-0.23 0.2,-0.219 0.081,0.073 0.046,0.114 0.002,0.186 z m 2.585,-5.079 -0.01,0.06 -0.239,-0.209 -0.115,-0.034 0.055,-0.119 0.161,-0.03 0.128,0.262 0.02,0.07 z m 0.65,-0.686 -0.027,0.149 -0.075,-0.021 -0.1,-0.265 0.054,-0.065 0.142,0.016 0.006,0.186 z m -0.303,-0.229 -0.041,0.063 -0.347,-0.185 -0.376,-0.039 -0.13,-0.163 -0.023,-0.256 0.396,0.011 0.488,0.231 0.105,0.118 -0.072,0.22 z m -1.217,-4.968 -0.23,0.094 -0.73,-0.281 -0.516,-0.309 -0.308,-0.375 -0.044,-0.155 0.359,0.026 0.351,0.135 0.078,0.206 0.142,0.065 0.096,0.12 0.65,0.279 0.1,0.084 0.052,0.111 z m 4.566,-85.027 0.127,0.014 0.07,-0.001 0.135,-0.094 0.373,0.167 0.713,0.496 0.447,0.22 0.185,-0.054 0.2,0.137 0.219,0.328 0.271,0.193 0.488,0.089 0.484,0.358 0.195,0.02 0.068,-0.201 0.181,-0.115 0.292,-0.03 0.423,0.177 0.553,0.383 0.347,0.168 0.141,-0.046 0.148,0.071 0.119,0.179 0.011,0.221 -0.041,0.118 0.133,0.186 0.153,0 0.25,0.089 0.196,0.328 0.176,0.152 0.123,0.131 0.022,0.109 0.011,0.11 -0.036,0.085 -0.067,0.141 -0.021,0.151 0.085,0.17 0.311,0.123 0.105,0.127 0.024,0.162 0.097,0.179 0.212,0.207 0.08,0.173 -0.049,0.139 0.063,0.116 0.104,0.091 0.022,0.329 0.009,0.189 0.171,0.212 0.035,0.434 0.119,0.479 0.401,0.655 0.133,0.354 -0.034,0.42 0.058,0.197 0.183,0.095 0.087,0.177 -0.01,0.259 0.071,0.161 0.058,0.171 -0.039,0.266 0.058,0.239 0.094,0.14 0.066,0.258 0.037,0.322 0.269,0.508 0.499,0.694 0.306,0.538 0.111,0.382 10e-4,0.314 -0.109,0.246 -0.006,0.179 0.098,0.112 0.029,0.151 -0.039,0.191 0.162,0.226 0.548,0.392 -0.219,0.6 -0.058,0.421 0.029,0.442 0.136,0.311 0.241,0.18 0.15,0.188 0.059,0.196 0.29,0.213 0.52,0.231 0.667,0.041 0.813,-0.151 0.497,-0.025 0.183,0.1 0.063,0.152 -0.059,0.203 0.138,0.133 0.334,0.064 0.229,0.127 0.126,0.192 0.154,0.054 0.183,-0.083 0.178,0.012 0.173,0.106 0.112,-0.037 0.098,-0.116 0.157,0 0.161,0.002 0.1,0.281 0.162,0.158 0.224,0.035 0.341,0.341 0.686,0.969 0.446,0.343 0.447,0.107 0.556,0.022 0.18,0.374 -0.146,0.395 -0.037,0.329 0.126,0.118 0.174,0.386 0.246,0.224 0.047,0.177 0.114,0.198 -0.048,0.365 -0.211,0.533 0.058,0.454 0.326,0.375 0.188,0.361 0.049,0.346 0.081,0.21 0.115,0.074 0.334,-0.026 0.555,-0.125 0.406,0.021 0.26,0.169 0.641,0.006 1.023,-0.156 0.646,-0.048 0.27,0.06 0.24,-0.223 0.211,-0.507 0.197,-0.238 0.185,0.03 0.292,-0.163 0.401,-0.357 0.348,-0.173 0.441,0.018 0.47,0.018 0.294,-0.15 0.276,-0.313 0.479,-0.277 1.021,-0.363 0.245,-0.057 0.117,0.02 0.34,0.057 0.302,0.142 0.285,0.285 0.044,0.183 -0.032,0.24 -0.063,0.139 -0.117,0.156 -0.11,0.253 0.071,0.197 0.165,0.421 0.136,0.304 0.15,0.358 -0.067,0.128 -0.091,0.248 -0.279,0.419 -0.152,0.16 -0.164,0.156 -0.283,0.038 -0.121,0.036 -0.137,0.066 -0.086,0.148 -0.098,0.104 -0.162,0.208 -0.013,0.179 0.073,0.266 0.036,0.272 -0.183,0.243 -0.142,0.373 -0.043,0.112 -0.07,0.282 -0.021,0.098 -0.045,0.592 -0.183,0.403 -0.255,0.468 0.057,0.279 0.045,0.258 -0.063,0.125 -0.016,0.109 -0.037,0.248 -0.08,0.095 -0.232,0.155 -0.139,0.187 0.029,0.283 -0.071,0.245 -0.106,0.216 -0.111,0.141 -0.16,0.09 -0.106,0.076 -0.08,0.274 -0.024,0.212 -0.075,0.211 0.046,0.215 -0.081,0.186 -0.228,0.13 -0.129,0.077 -0.119,0.031 -0.228,0.202 -0.204,0.691 -0.046,0.401 0.047,0.356 -0.286,0.223 -0.212,0.177 -0.133,-0.064 -0.141,-0.06 -0.324,-0.077 -0.162,-0.052 -0.326,-0.116 -0.522,-0.147 -0.51,-0.171 -0.32,-0.09 -0.252,-0.072 -0.191,-0.118 -0.161,-0.211 -0.16,0.085 -0.148,0.25 -0.247,0.148 -0.112,0.273 -0.099,0.209 -0.256,0.279 -0.114,0.115 -0.501,0.189 -0.113,0.063 -0.409,0.04 -0.139,0.083 -0.144,0.176 -0.039,0.175 0.102,0.184 0.159,0.368 0.074,0.251 0.108,0.497 0.363,1.553 -0.117,0.267 -0.109,1.157 0.026,0.208 -0.011,0.324 0.007,0.237 0.075,0.059 0.098,0.083 0.05,0.138 -0.013,0.212 -0.05,0.155 -0.077,0.307 -0.102,0.443 -0.113,0.17 -0.074,0.135 -0.063,0.093 -0.008,0.313 -0.042,0.206 -0.177,0.073 -0.176,0.12 -0.209,-0.044 -0.184,0.024 -0.227,0.08 -0.407,0.093 -0.236,0.124 -0.113,0.09 -0.078,0.108 -0.014,0.104 0.054,0.055 0.229,0.042 0.157,0.194 0.022,0.212 -0.162,0.121 -0.08,-0.133 -0.135,-0.042 -0.251,-0.187 -0.184,-0.206 -0.137,-0.228 0.006,-0.487 -0.023,-0.073 -0.25,-0.1 -0.074,-0.146 -0.119,-0.069 -0.169,0.044 -0.127,-0.046 -0.101,-0.08 -0.12,-0.009 -0.104,0.126 -0.056,0.271 -0.175,0.449 -0.016,0.271 -0.075,0.386 -0.075,0.489 -0.063,0.102 -0.195,0.015 -0.067,0.032 -0.103,0.166 -0.123,0.028 -0.109,-0.097 -0.171,-0.097 -0.163,-0.013 -0.146,0.097 -0.172,0.211 -0.098,0.17 -0.035,0.16 -0.027,0.197 -0.174,0.188 -0.158,0.099 -0.327,0.277 -0.104,0.115 -0.234,0.001 -0.255,-0.011 -0.344,0.075 -0.56,0.038 -0.335,-0.057 -0.414,0.053 -0.323,0.09 -0.046,0.135 0.012,0.2 0.064,0.13 0.079,0.087 0.134,0.268 0.141,0.259 0.213,0.167 0.089,0.18 0.004,0.167 -0.101,0.21 -0.153,0.274 -0.143,0.169 -0.107,-0.006 -0.164,-0.098 -0.111,-0.124 -0.265,-0.046 -0.648,0.079 -0.324,-0.055 -0.155,-0.101 -0.271,-0.007 -0.419,-0.135 -0.256,-0.043 -0.121,-0.086 -0.023,-0.198 -0.12,-0.136 -0.068,-0.163 -0.152,-0.205 -0.146,-0.103 -0.144,-0.043 -0.157,0.124 -0.168,0.112 -0.125,-0.025 -0.061,0.031 -0.068,0.093 -0.27,0.19 -0.063,0.174 -0.107,0.369 -0.075,0.379 -0.064,0.134 -0.109,0.023 -0.111,0.114 -0.233,0.355 -0.211,0.327 -0.306,0.221 -0.145,0.202 -0.074,0.184 -0.218,0.257 -0.32,0.046 -0.255,0.075 -0.156,0.02 -0.112,0.104 -0.082,0.158 -0.039,0.063 -0.145,0 -0.144,0.134 -0.353,0.305 -0.288,0.057 -0.36,0.203 -0.317,0.154 -0.132,0.087 -0.035,0.096 -0.046,0.122 -0.153,0.024 -0.148,-0.006 -0.33,0.279 -0.167,0.237 -0.649,0.504 -0.265,0.283 -0.068,0.366 -0.034,-0.027 -0.231,0.319 -0.454,0.303 -0.97,0.068 -0.307,-0.215 -0.111,0.148 -0.086,0.199 -0.255,0.066 -0.397,0.018 -0.223,0.131 -0.119,0.146 -0.545,0.047 -0.2,0.195 -0.34,0.069 -1.417,0.85 -0.309,0.357 -0.293,0.417 -0.205,0.209 -0.184,0.146 -0.167,0.06 -0.164,0.144 -0.166,0.018 -0.169,-0.066 -0.189,0.023 -0.125,0.174 0.105,0.227 -0.058,0.096 -0.372,0.123 -0.554,0.081 -0.234,0.148 -0.082,0.084 -0.122,0.042 -0.118,-0.292 -0.042,-0.386 0.229,-0.093 0.211,-0.049 1.169,-0.534 -0.146,-0.402 0.104,-0.175 0.262,-0.285 0.17,-0.141 -0.092,-0.052 -0.767,0.094 -0.439,-0.007 -0.226,-0.029 0.068,-0.244 -0.038,-0.244 -0.053,-0.091 0.391,-0.278 0.177,-0.068 0.135,0.004 -0.01,-0.168 -0.112,-0.253 0.121,-0.327 0.796,-0.385 0.191,-0.35 0.319,-0.327 0.584,-0.814 0.035,-0.139 0.17,-0.383 0.03,-0.153 -0.27,-0.224 -0.107,-0.314 -0.79,-0.568 -0.067,-0.489 -0.074,0.021 -0.12,0.342 -0.103,0.11 -0.366,0.01 -0.173,-0.129 -1.018,-0.084 -0.249,0.221 -0.232,0.341 -0.227,0.244 -0.228,0.125 -0.198,0.222 -0.818,1.314 -0.309,0.1 -1.455,0.791 -0.729,0.31 -0.561,0.546 -0.193,0.33 -0.171,0.366 -0.104,0.553 -0.518,0.671 -0.178,0.144 -0.181,0.058 -0.241,-0.021 -0.208,0.042 -0.354,-0.059 -0.434,0.212 -0.488,0.183 -0.421,-0.461 -0.301,-0.114 -0.491,0.128 -0.228,0.205 -0.472,1.013 -0.177,0.579 0.012,0.237 0.275,0.718 0.311,0.401 0.697,0.457 1.482,0.314 0.348,-0.112 0.373,-10e-4 0.393,0.298 0.246,0.492 0.022,0.335 0.008,0.116 0.09,0.099 0.053,0.169 -0.156,0.14 -0.12,0.07 -0.101,0.519 -0.006,0.573 0.127,0.19 0.319,0.267 0.493,0.22 0.456,0.047 0.871,-0.106 0.356,-0.345 -0.021,-0.149 0.009,-0.193 0.767,-0.507 0.437,-0.45 -0.068,-0.119 -0.084,-0.079 0.077,-0.046 0.239,-0.032 1.066,-0.47 0.839,0.384 0.479,0.442 0.474,0.074 0.328,0.226 0.379,0.192 0.494,0.013 0.417,0.04 0.127,-0.178 0.131,-0.117 0.148,0.023 0.167,0.233 0.474,0.179 0.437,-0.009 0.306,-0.065 0.182,0.083 -0.263,0.298 0.039,0.48 -0.201,0.152 -0.193,0.244 0.114,0.161 0.101,0.068 -0.01,0.195 -0.176,0.111 -0.326,0.29 -0.188,-0.005 -0.089,-0.056 -0.063,-0.104 -0.047,-0.167 -0.114,-0.11 -0.316,-0.042 -0.328,0.04 -0.738,0.43 -0.721,0.342 -0.755,0.271 -0.253,0.171 -0.18,0.047 -0.313,-0.129 -0.189,0.008 -0.04,0.089 0.241,0.238 0.063,0.186 -0.025,0.143 -0.137,0.063 -0.199,-0.104 -0.182,0.149 -0.082,0.251 -0.004,0.597 -0.12,0.133 -0.333,0.073 -0.354,0.19 -0.126,-0.088 -0.05,-0.107 0.037,-0.274 -0.044,-0.134 -0.162,0.007 -0.244,0.082 -0.186,0.18 -0.064,0.109 0.245,0.351 0.233,0.036 0.057,0.079 -0.185,0.171 -0.461,0.254 -0.077,0.213 -0.137,0.204 -0.188,0.162 -0.128,0.171 -0.156,0.089 -0.255,0.1 -0.313,0.408 -0.229,0.381 -0.272,0.196 -0.215,0.642 -0.385,0.348 -0.142,0.556 0.1,0.341 0.423,-0.003 0.211,0.12 0.438,0.448 0.524,0.292 0.544,0.164 0.667,0.413 0.184,0.175 0.157,0.355 0.289,1.02 0.208,0.504 0.014,0.263 0.312,0.495 0.333,0.85 0.384,0.734 0.073,0.577 -0.124,0.263 0.001,0.341 0.383,0.313 0.852,0.363 0.136,0.107 0.167,0.176 0.008,0.547 0.132,0.174 0.111,0.106 0.516,0.231 0.216,0.192 0.229,0.306 0.066,0.274 0.028,0.371 -0.288,0.013 -0.232,-0.042 -0.923,-0.482 -0.24,-0.013 -0.339,0.067 -0.483,-0.089 -0.51,-0.535 -0.368,-0.162 -0.395,-0.082 -0.942,0.46 -0.24,-0.033 -0.069,0.052 -0.106,0.079 0.437,0.099 0.438,-0.151 0.42,-0.223 0.613,0.119 0.103,0.201 0.101,0.339 0.42,0.229 0.33,0.101 0.42,0.3 0.41,0.468 0.869,0.542 0.352,0.512 0.136,0.33 0.122,0.471 -0.304,0.152 -0.265,0.021 -0.415,0.074 -0.305,0.167 -0.306,0.292 -0.877,0.459 -0.166,0.287 -0.114,0.25 -0.214,0.123 -0.537,-0.117 -0.506,0.01 -0.573,0.337 -0.143,0.137 0.095,-0.027 0.09,-0.043 0.258,0.051 0.399,-0.18 0.39,0.549 0.761,-0.089 0.715,-0.456 0.277,-0.008 0.231,0.07 0.259,0.18 0.688,0.799 0.378,0.087 0.37,0.187 0.205,0.021 0.185,0.056 -0.498,0.292 -0.643,0.63 -0.286,0.15 -0.192,0.168 0.518,-0.084 0.368,-0.301 0.186,-0.074 0.149,0.07 0.076,0.371 -0.142,1.138 -0.181,0.02 -0.176,-0.309 -0.206,-0.098 -0.173,0.064 -0.343,-0.002 -0.131,0.14 -0.11,0.198 0.205,0.041 0.404,0.345 0.041,0.183 -0.108,0.119 -0.283,-0.051 0.344,0.257 -0.091,0.266 -0.111,0.105 -0.2,0.067 -0.123,0.23 0.177,0.383 0.179,0.49 0.022,0.236 -0.28,-0.102 -0.437,0.299 -0.23,0.025 -0.156,-0.394 -0.199,0.062 -0.133,0.114 -0.177,0.422 -0.216,0.381 -0.186,0.104 -0.223,-0.03 -0.184,0.011 0.045,0.103 0.194,0.125 0,0.146 -0.414,0.463 -0.067,0.179 0.01,0.152 -0.217,0.185 0.117,0.311 -0.061,0.219 -0.19,0.296 -0.2,0.195 -0.235,0.316 -0.298,0.183 -0.393,0.661 -0.116,0.33 -0.029,0.341 -0.123,0.118 -0.211,0.148 -0.24,-0.075 -0.008,-0.227 -0.104,-0.02 -0.059,-0.149 -0.018,-0.189 0.025,-0.153 -0.1,0.047 -0.062,0.177 -0.158,0.144 -0.165,-0.058 -0.178,-0.118 0.005,0.17 0.095,0.171 0.041,0.171 0.246,0.037 0.165,0.196 0.13,0.301 0.026,0.113 0.101,0.134 0.014,0.115 -0.235,0.106 -0.294,0.198 -0.353,0.339 -0.291,0.226 -0.263,0.002 -0.159,-0.026 -0.227,-0.13 -0.261,-0.054 0.35,0.457 0.191,0.081 0.24,-0.017 0.233,-0.17 0.331,0.018 0.083,0.263 -0.088,0.297 -0.181,0.385 -0.037,0.333 0.224,0.476 0.01,0.143 -0.084,0.071 -0.263,-0.125 -0.217,-0.158 -0.219,0.042 -0.227,-0.067 -0.233,0.056 -0.095,0.11 0.064,0.181 0.209,0.15 0.117,0.231 -0.14,0.081 -0.593,-0.054 -0.132,0.044 -0.177,0.254 0.115,0.376 -0.131,0.233 -0.244,0.055 -0.321,0.188 -0.198,0.044 0.01,0.082 0.145,0.082 0.077,0.111 -0.175,0.383 -0.271,0.126 -0.416,-0.063 -0.327,0.086 -0.283,-0.163 -0.302,-0.003 -0.205,0.206 -0.022,0.239 -0.199,0.024 -0.107,-0.018 -0.151,0.017 0.016,0.128 0.086,0.112 0.408,0.05 0.073,0.161 0.016,0.248 -0.427,0.427 -0.182,0.288 -0.274,-0.008 -0.207,0.231 -0.111,0.313 -0.137,-0.062 -0.317,0.05 -0.093,0.149 0.074,0.062 0.007,0.107 -0.127,0.351 -0.138,0.099 -0.06,-0.144 -0.045,-0.223 -0.111,-0.017 -0.185,0.205 -0.216,0.147 -0.185,0.061 -0.14,-0.136 -0.343,-0.071 -0.14,0.589 -0.284,0.214 -0.133,0.067 -0.232,0.02 0.148,0.081 0.046,0.151 -0.083,0.15 -0.232,0.03 -0.135,0.117 -0.052,0.525 -0.138,0.184 -0.352,0.015 -0.263,-0.122 -0.084,0.096 -0.044,0.094 -0.138,0.095 -0.266,0.025 -0.591,0.235 -0.271,-0.068 -0.323,-0.089 -0.223,0.087 -0.074,0.18 -0.103,0.14 -0.324,0 -0.26,-0.173 -0.265,-0.125 -0.293,0.108 -0.223,0.22 -0.274,0.074 -0.051,0.137 -0.119,0.068 -0.29,-0.029 -0.11,-0.34 -0.167,-0.05 -0.165,0.172 -0.059,0.134 -0.077,0.102 0.027,0.277 -0.163,0.006 -0.213,-0.17 -0.224,-0.03 -0.209,0.158 -0.106,-0.039 -0.112,-0.033 -0.183,0 -0.07,0.042 -0.134,0.025 -0.09,0.086 -0.008,0.007 -0.236,-0.058 -0.289,-0.23 -0.207,-0.382 -0.263,-0.206 -0.116,-0.181 -0.045,-0.325 -0.048,-0.155 0.016,-0.172 0.08,-0.153 -0.283,0.077 -0.209,0.143 0.043,0.18 -0.052,0.167 -0.312,0.087 0.019,0.07 0.021,0.074 0.244,0.228 0.05,0.191 0.099,0.102 0.191,0.297 -0.005,0.574 0.105,0.162 -0.035,0.161 -0.076,0.217 -0.007,0.003 -0.056,-0.066 -0.092,0.013 -0.037,0.073 -0.006,0.066 -0.016,0.003 -0.162,0.048 -0.136,0.041 -0.11,0.058 -0.173,0.171 -0.329,0.042 -0.169,-0.4 -0.227,0.267 -0.068,0.545 -0.084,0.093 -0.141,0.078 -0.267,-0.19 -0.233,0.127 -0.182,0.129 -0.075,0.119 -0.134,0.129 -0.257,-0.125 -0.207,-0.187 0.052,-0.141 -0.029,-0.092 -0.093,-0.07 -0.103,0.01 0.051,0.183 0.034,0.35 -0.094,0.101 -0.145,0.078 -0.313,-0.064 -0.213,-0.13 -0.259,-0.11 -0.228,-0.02 -0.05,0.221 -0.148,0.178 -0.137,0.022 -0.137,-0.028 -0.18,0.192 -0.085,0.14 -0.222,0.148 -0.59,0.072 -0.206,0.146 -0.276,-0.023 -0.214,0.035 -0.123,-0.008 -0.11,-0.079 -0.124,-0.002 -0.057,0.244 -0.334,0.103 -0.3,0.028 -0.334,0.322 -0.238,0.195 -0.177,0.02 -0.13,-0.069 -0.065,-0.288 -0.066,-0.034 -0.038,0.271 -0.063,0.225 -0.122,0.123 -0.386,0.28 -0.111,0.278 0.074,0.257 0.519,0.063 0.064,0.141 -0.05,0.115 -0.124,0.096 -0.037,0.144 0.557,0.458 0.017,0.173 -0.086,0.099 -0.104,0.213 -0.294,0.18 -0.622,0.092 -0.519,-0.093 -0.157,-0.205 0.01,-0.146 0.129,0.042 0.146,-0.013 -0.044,-0.134 -0.062,-0.078 -0.239,-0.119 -0.194,-0.321 0.037,-0.267 -0.105,-0.207 -0.116,-0.173 -0.116,-0.104 -0.063,-0.129 0.118,-0.406 -0.065,-0.236 0.222,-0.29 0.055,-0.327 0.396,-0.117 0.027,-0.312 -0.284,-0.009 -0.197,-0.229 -0.045,0.097 -0.158,0.01 -0.26,-0.442 -0.078,-0.056 -0.126,-0.008 0.063,0.466 -0.305,0.175 -0.25,0.077 -0.354,0.032 -0.202,0.054 -0.188,-0.044 0.046,-0.141 0.1,-0.168 -0.089,-0.141 -0.2,-0.108 -0.306,0.006 -0.211,-0.03 -0.21,0.012 -0.077,-0.063 -0.195,-0.221 -0.165,-0.137 -0.074,-0.137 0.074,-0.159 -0.062,-0.097 -0.319,-0.011 0.002,0.228 0.033,0.269 0.093,0.204 -0.066,0.114 -0.162,0.078 -0.173,-0.216 -0.079,-0.053 -0.083,0.01 -0.063,0.215 -0.157,0.191 -0.282,-0.021 -0.22,0.118 -0.266,0.054 -0.181,-0.158 -0.299,-0.254 -0.119,-0.029 -0.332,0.124 -0.477,0.046 -0.106,-0.132 -0.23,0.1 -0.222,-0.305 -0.263,-0.02 -0.328,-0.231 -0.118,-0.123 -0.037,-0.176 -0.1,-0.092 -0.128,0.012 -0.143,-0.094 -0.226,-0.093 -0.182,-0.055 -0.09,0.042 -0.095,0.022 -0.017,-0.118 0.007,-0.356 -0.017,-0.316 -0.05,-0.143 -0.122,-0.108 -0.11,-0.052 -0.049,-0.163 0.04,-0.32 0.09,-0.217 0.142,-0.039 0.192,-0.156 0.098,-0.222 0.123,-0.206 -0.438,-0.289 -0.23,-0.104 -0.255,0.044 -0.317,0.092 -0.165,0.018 -0.083,-0.036 -0.185,-0.26 -0.1,-0.045 -0.224,-0.017 -0.189,0.002 -0.108,0.113 -0.168,0.038 -0.168,0.006 -0.17,-0.141 -0.256,-0.184 -0.401,-0.13 -0.049,-0.149 -0.102,-0.179 -0.152,-0.166 -0.252,-0.22 -0.211,-0.114 -0.103,0.07 -0.14,0.125 -0.542,0.263 -0.24,0.103 -0.128,0.073 -0.107,0.11 -0.033,0.271 -0.053,0.302 -0.156,0.153 -0.148,0.116 -0.155,0.012 -0.152,-0.005 -0.143,0.048 -0.436,0.303 -0.205,-0.024 -0.169,-0.171 -0.072,-0.124 -0.195,0.028 -0.25,0.145 -0.116,0.26 -0.061,0.243 -0.055,0.108 -0.084,0.031 -0.074,0.005 -0.779,-0.701 -0.048,-0.036 -0.14,0.144 -0.127,0.372 -0.091,0.071 -0.062,-0.029 -0.322,-0.476 -0.083,-0.045 -0.073,0.016 -0.097,0.154 -0.204,0.227 -0.156,0.138 -0.004,0.153 -0.17,0.135 -0.197,0.135 -0.066,0.014 -0.131,-0.054 -0.171,-0.179 -0.124,-0.187 -0.307,-0.186 -0.344,-0.157 -0.228,-0.123 -0.13,-0.03 -0.121,0.055 -0.061,0.075 -0.086,0.186 -0.206,0.304 -0.184,0.242 -0.171,0.155 -0.136,0.107 -0.102,-0.1 -0.188,-0.082 -0.221,0 -0.291,0.154 -0.229,-0.308 -0.06,-0.015 -0.088,0.026 -0.102,0.073 -0.07,0.172 -0.074,0.235 -0.146,0.154 -0.121,0.068 0.035,0.132 0.069,0.143 -0.005,0.125 0.044,0.197 0.076,0.197 0.271,0.323 0.104,0.168 0.021,0.146 0.01,0.518 -0.011,0.216 -0.054,0.416 -0.004,0.24 0.113,0.108 0.109,0.129 -0.005,0.07 -0.048,0.025 -0.155,0.143 -0.065,0.019 -0.102,-0.059 -0.132,-0.044 -0.105,-0.057 -0.117,-0.092 -0.277,0.01 -0.455,0.14 -0.094,-0.04 -0.065,-0.079 -0.036,-0.164 0.022,-0.192 -0.04,-0.123 -0.085,-0.073 0.061,-0.343 -0.162,-0.136 0.023,-0.042 -0.054,-0.371 0.007,-0.092 -0.028,-0.031 -0.114,-0.029 -0.17,0.058 -0.517,0.244 -0.444,0.451 -0.203,0.1 -0.205,0.041 -0.241,-0.078 -0.267,-0.051 -0.381,0.114 -0.188,-0.053 -0.087,-0.092 -0.077,-0.14 0.047,-0.178 -0.029,-0.131 -0.152,-0.066 -0.177,-0.057 -0.105,-0.171 -0.042,-0.187 0.041,-0.243 0.021,-0.261 -0.085,-0.12 -0.259,-0.065 -0.653,-0.119 -0.572,-0.065 -0.24,0.031 -0.196,-0.029 -0.113,-0.048 -0.055,-0.082 -0.003,-0.118 0.093,-0.271 0.105,-0.265 0.266,-0.386 0.016,-0.268 -0.014,-0.309 0.132,-0.413 0.229,-0.309 0.113,-0.097 -0.027,-0.138 -0.092,-0.126 -0.131,-0.07 -0.217,-0.081 -0.338,-0.022 -0.464,-0.083 -0.537,-0.184 0.062,-0.353 -0.009,-0.221 -0.066,-0.182 -0.109,-0.129 -0.062,-0.115 0.097,-0.316 -0.125,-0.346 -0.147,-0.138 -0.152,-0.179 -0.012,-0.193 0.069,-0.18 0.372,-0.387 0.003,-0.094 -0.092,0.008 -0.106,0.008 -0.508,0.141 -0.055,-0.089 -0.182,-0.051 -0.371,-0.01 -0.434,0.026 -0.549,0.138 -0.504,0.242 -0.229,0.166 -0.195,0.103 -0.158,0.034 -0.183,-0.073 0.01,-0.237 0.344,-0.435 0.049,-0.299 -0.104,-0.257 -0.012,-0.206 -0.121,-0.131 -0.169,-0.064 -0.09,-0.146 -0.006,-0.428 0.151,-0.441 0.245,-0.139 0.149,-0.067 0.04,-0.086 -0.076,-0.31 0.012,-0.197 0.146,-0.381 0.146,-0.289 0.276,0.048 0.124,-0.072 0.137,-0.103 0.149,-0.174 0.1,-0.207 0.122,-0.48 0.083,-0.072 0.348,0.08 0.104,-0.056 0.19,-0.282 0.18,-0.344 0.261,-0.106 0.188,-0.011 0.087,-0.114 -0.005,-0.168 -0.179,-0.267 -0.075,-0.213 0.022,-0.13 0.256,-0.079 0.063,-0.155 -0.038,-0.34 0.105,-0.409 0.063,-0.479 0.021,-0.358 -0.003,-0.273 -0.025,-0.287 -0.036,-0.524 -0.117,-0.457 0.021,-0.172 -0.016,-0.555 -0.072,-0.474 -0.144,-0.083 -0.268,-0.154 -0.146,-0.03 -0.122,0.056 -0.046,0.165 -0.118,0.154 -0.145,-0.038 -0.069,-0.154 -0.093,-0.202 -0.311,-0.961 -0.034,-0.277 -0.055,-0.276 -0.104,-0.138 -0.11,-0.082 -0.248,-0.324 -0.13,-0.135 -0.063,-0.022 -0.136,0.023 -0.134,0 -0.109,-0.162 -0.1,-0.198 -0.1,-0.097 -0.168,-0.054 -0.172,0.021 -0.101,0.171 -0.068,0.097 -0.13,0.228 -0.21,0.315 -0.096,0.116 -0.093,-0.06 -0.405,-0.328 -0.195,-0.091 -0.266,0.099 -0.415,-0.078 -0.16,-0.015 -0.346,-0.262 -0.141,-0.032 -0.491,0.171 -0.108,0.121 -0.063,0.002 -0.131,-0.061 -0.107,-0.081 -0.007,-0.051 0.133,-0.128 0.01,-0.09 -0.007,-0.091 0.191,-0.258 0.521,-0.5 -0.087,-0.21 -0.205,-0.414 -0.027,-0.201 -0.089,-0.091 -0.249,0.074 -0.518,0.376 -0.071,-0.041 0.013,-0.13 -0.054,-0.379 0.164,-0.114 0.252,-0.139 0.194,-0.155 0.045,-0.125 -0.053,-0.039 -0.286,0.049 -0.113,-0.085 -0.187,-0.349 -0.137,-0.137 -0.124,-0.074 -0.422,0.18 -0.49,0.247 -0.546,0.344 0.003,0.176 -0.065,0.045 -0.104,0.111 -0.102,0.153 -0.087,0.054 -0.102,0.005 -0.208,-0.043 -0.377,-0.174 -0.409,-0.144 -0.088,0.016 -0.556,-0.102 -0.018,-0.082 -0.084,-0.161 -0.158,-0.146 -0.151,-0.049 -0.435,0.308 -0.491,0.229 -0.279,0.271 -0.23,0.269 -0.264,0.052 -0.012,0.166 -0.111,0.149 -0.2,0.184 -0.397,0.234 -0.269,0.126 -0.854,0.115 -0.305,0.078 -0.128,0.123 -0.137,0.312 -0.108,0.287 -0.236,0.237 -0.43,0.316 -0.505,0.256 -0.139,0.17 -0.025,0.101 0.063,0.037 0.062,0.077 0,0.116 -0.065,0.126 -0.33,0.22 -0.186,0.105 -0.185,0.067 -0.207,0.012 -0.199,-0.03 -0.055,-0.036 -0.079,0.046 -0.182,0.046 -0.158,0.015 -0.347,0.244 -0.191,0.002 -0.238,-0.053 -0.314,-0.042 -0.227,0 -0.007,-0.129 0.035,-0.387 -0.103,-0.09 -0.314,-0.095 -0.354,-0.126 -0.17,-0.134 -0.095,-0.045 -0.133,0.022 -0.213,0.141 -0.202,0.166 -0.16,0.014 -0.164,-0.077 -0.156,-0.102 -0.536,-0.143 -0.24,-0.021 -0.429,0.024 -0.35,-0.03 -0.055,-0.044 10e-4,-0.08 0.052,-0.155 0.03,-0.153 -0.041,-0.087 -0.357,-0.107 -0.326,-0.077 -0.347,-0.029 -0.233,0.054 -0.228,0.12 -0.188,0.216 -0.272,0.094 -0.325,0.161 -0.157,0.15 -0.238,0.322 -0.346,0.395 -0.314,0.385 -0.163,0.374 -0.216,0.235 -0.219,0.169 -0.158,0.465 -0.165,-0.147 -0.189,-0.211 -0.045,-0.289 0.224,-0.768 0.053,-0.32 -0.057,-0.122 -0.07,-0.315 -0.133,-0.104 -0.38,-0.165 -0.121,-0.005 -0.13,0.114 -0.127,0.072 -0.169,0.072 -0.424,0.135 -0.376,0.063 -0.09,0.05 -0.028,0.09 0.03,0.107 -0.242,-0.041 -0.253,-0.023 -0.204,0.015 -0.499,0.204 -0.169,0.02 -0.188,-0.021 -0.256,-0.006 -0.487,0.006 -0.419,-0.052 -0.341,-0.285 -0.241,-0.126 -0.257,-0.097 -0.259,-0.073 -0.086,-0.153 -0.082,-0.077 -0.213,-0.025 -0.169,0.056 -0.105,0.385 -0.09,0.076 -0.214,0.034 -0.225,-0.098 -0.311,-0.198 -0.122,-0.22 -0.104,-0.071 -0.164,0.097 -0.009,0.282 -0.032,0.189 -0.195,0.077 -0.113,-0.056 -0.091,-0.194 -0.229,-0.461 -0.227,-0.27 -0.229,-0.18 -0.751,0.005 -0.557,-0.053 -0.252,-0.074 -0.095,-0.178 0.092,-0.356 0.108,-0.278 -0.003,-0.065 -0.092,-0.033 -0.16,-0.022 -0.601,0.178 -0.164,-0.021 -0.104,-0.061 -0.127,-0.052 -0.105,-0.083 -0.073,-0.121 -0.52,-0.297 -0.153,-0.163 -0.277,-0.204 -0.234,-0.139 -0.148,-0.398 -0.135,-0.383 -0.074,-0.204 -0.223,-0.108 -0.241,-0.082 -0.408,0.167 -0.335,0.127 -0.246,0.013 -0.355,-0.393 -0.285,-0.425 -0.337,-0.371 -0.224,-0.187 -0.397,-0.018 -0.447,-0.209 -0.6,-0.476 -0.433,-0.355 -0.746,-0.395 -0.174,-0.166 -0.066,-0.141 -0.102,-0.278 -0.156,-0.264 -0.529,-0.115 -0.598,-0.082 -0.631,0.162 -0.454,0.79 -0.219,0.172 -0.188,0.01 -0.154,-0.201 -0.127,-0.211 -0.069,-0.234 -0.314,-0.173 -0.355,-0.226 -0.182,-0.176 -0.205,-0.11 -0.191,-0.047 -0.368,-0.149 -0.417,-0.168 -0.196,-0.023 -0.014,-0.12 0.059,-0.255 -0.036,-0.245 -0.126,-0.1 -0.19,0.026 -0.44,-0.348 -0.022,-0.018 -0.125,-0.099 -0.217,-0.142 -0.366,0.01 -0.277,0.052 -0.203,-0.145 -0.294,-0.23 -0.053,-0.051 -0.087,-0.084 -0.298,-0.444 -0.352,-0.526 -0.178,-0.077 -0.092,0.04 -0.104,0.279 -0.078,-0.028 -0.131,0.019 -0.154,0.098 -0.148,0.025 -0.095,-0.029 -0.04,-0.069 0.042,-0.369 -0.09,-0.115 0.08,-0.257 0.135,-0.222 -0.138,-0.165 -0.17,-0.236 -0.019,-0.214 0.092,-0.27 0.045,-0.231 -0.028,-0.085 -0.134,-0.129 -0.511,-0.636 -0.027,-0.067 -0.086,-0.212 -0.04,-0.32 -0.066,-0.229 -0.078,-0.176 0.006,-0.083 0.059,-0.043 0.319,-0.043 0.295,-0.027 0.194,-0.06 0.101,0.128 0.047,0.196 0.051,0.103 0.187,0.186 0.228,0.178 0.221,-0.023 0.195,-0.076 0.169,-0.29 0.119,-0.071 0.139,-0.013 0,-0.021 -0.008,-0.187 0.049,-0.461 -0.017,-0.185 -0.063,-0.167 0.011,-0.186 -0.021,-0.27 -0.159,-0.185 -0.104,-0.071 -0.017,-0.1 0.054,-0.185 0.037,-0.213 -0.055,-0.157 -0.009,-0.024 -0.129,-0.081 -0.151,-0.137 -0.18,-0.185 -0.089,-0.134 -0.146,-0.148 -0.178,-0.23 -0.033,-0.505 -0.018,-0.532 -0.062,-0.265 -0.099,-0.423 0.015,-0.142 0.06,-0.108 0.502,-0.342 0.109,-0.133 0.018,-0.101 -0.02,-0.15 -0.095,-0.167 -0.2,-0.13 -0.286,-0.212 -0.259,-0.221 -0.436,-0.135 -0.529,-0.165 -0.127,-0.161 -0.128,-0.394 -0.218,-0.602 -0.232,-0.643 -0.179,-0.397 -0.009,-0.191 0.107,-0.488 -0.013,-0.104 -0.094,-0.036 -0.179,0.064 -0.143,0.077 -0.122,-0.04 -0.113,-0.082 -0.023,-0.028 -0.009,-0.011 -0.212,0.053 -0.425,0.03 -0.147,-0.005 -0.206,-0.007 -0.426,-0.112 -0.575,-0.151 -0.593,-0.21 -0.314,-0.167 -0.11,-0.058 -0.269,-0.174 -0.191,-0.15 -0.034,-0.393 -0.139,0.03 -0.326,0.142 -0.376,0.09 -0.208,0.001 -0.084,-0.063 -0.125,-0.415 -0.091,-0.117 -0.169,-0.046 -0.184,-0.073 -0.093,-0.108 -0.021,-0.137 0.082,-0.157 0.097,-0.121 0.017,-0.74 -0.063,-0.263 -0.053,-0.221 -0.135,-0.275 -0.126,-0.17 -0.19,-0.158 -0.295,-0.164 -0.263,-0.061 -0.318,0.12 -0.101,-0.046 -0.133,-0.508 -0.085,-0.104 -0.565,-0.209 -0.256,-0.048 -0.295,0.065 -0.168,0.056 -0.135,-0.093 -0.211,-0.118 -0.207,-0.081 -0.257,-0.003 -0.166,0.05 -0.042,-0.029 -0.08,-0.093 -0.342,-0.281 -0.012,-0.071 0.524,-0.277 0.309,-0.105 0.162,-0.084 0.034,0.018 0.08,0.128 0.204,0.084 0.144,-0.023 0.075,-0.064 0.254,-0.153 0.198,-0.178 0.111,-0.146 -0.06,-0.23 -0.312,-0.279 -0.198,-0.149 -0.061,-0.101 0.051,-0.303 0.072,-0.301 -0.048,-0.115 -0.059,-0.098 -0.026,-0.329 -0.136,-0.398 -0.148,-0.232 -0.041,-0.314 -0.008,-0.294 0.179,-0.462 -0.066,-0.2 -0.188,-0.178 -0.648,-0.322 -0.664,-0.213 -0.253,0.008 -0.157,-0.013 -0.186,0.188 -0.111,0.246 -0.155,0.022 -0.283,-0.104 -0.189,-0.158 -0.134,-0.329 -0.104,-0.424 -0.059,-0.133 0.03,-0.115 0.065,-0.102 0.181,-0.096 0.03,-0.098 -0.027,-0.121 -0.146,-0.153 -0.149,-0.216 -0.233,-0.449 0.045,-0.248 0.037,-0.357 -0.014,-0.188 0.236,-0.049 0.301,-0.097 0.14,-0.161 0.097,-0.164 0.021,-0.102 -0.091,-0.393 -0.12,-0.175 -0.012,-0.136 0.059,-0.104 0.079,-0.179 0.152,-0.368 0.148,-0.235 0.081,-0.059 0.181,-0.055 0.442,-0.065 0.475,-0.165 0.564,-0.494 0.188,-0.141 0.246,-0.071 0.176,0.005 0.032,-0.06 -0.114,-0.307 0.028,-0.111 0.067,-0.087 0.085,-0.04 0.391,0.162 0.299,-0.017 0.364,-0.096 0.785,-0.542 0.098,0.008 0.079,0.073 0.095,0.327 0.108,0.688 0.06,0.086 0.546,0.009 0.372,-0.25 0.163,-0.059 0.264,0.041 0.14,-0.117 0.146,-0.082 0.169,0.288 0.218,-0.138 0.235,-0.219 0.115,-0.227 0.159,-0.245 0.124,-0.311 0.05,-0.294 0.061,-0.138 0.132,-0.142 0.325,-0.607 0.234,-0.155 0.222,-0.055 0.549,0.105 0.285,-0.013 0.836,0.08 0.386,-0.117 0.27,-0.116 0.396,0.018 0.469,-0.092 0.625,-0.765 0.008,-0.163 0.038,-0.173 0.226,-0.171 0.281,-0.157 0.56,-0.375 1.139,-0.595 0.408,-0.239 0.17,0.006 0.42,-0.15 0.736,-0.292 0.208,-0.364 0.194,-0.073 0.86,-0.065 0.054,-0.042 0.03,-0.062 -0.048,-0.264 -0.056,-0.227 0.067,-0.067 0.072,-0.104 -0.011,-0.146 -0.139,-0.474 -0.074,-0.45 -0.049,-0.407 0.009,-0.152 0.104,-0.263 0.135,-0.239 0.487,-0.223 0.323,-0.067 0.013,-0.146 -0.261,-0.091 -0.189,-0.146 -0.033,-0.083 0.009,-0.095 0.044,-0.087 0.328,-0.164 0.309,-0.163 0.377,0.099 0.074,-0.063 0.022,-0.163 -0.081,-0.164 -0.076,-0.269 -0.174,-0.138 -0.007,-0.165 0.107,-0.285 -0.148,-0.528 -0.161,-0.467 -0.273,-0.802 -0.181,-0.232 -0.101,-0.371 -0.113,-0.195 0.01,-0.289 0.019,-0.203 -0.029,-0.403 -0.053,-0.438 0.053,-0.445 0.102,-0.294 -0.027,-0.113 0.054,-0.084 0.154,-0.028 0.073,-0.121 -0.073,-0.124 -0.266,-0.096 -0.297,-0.149 -0.357,0.017 -0.366,0.026 -0.183,-0.11 -0.16,-0.141 -0.009,-0.09 0.22,-0.238 0.306,-0.247 0.475,-0.109 0.523,-0.163 0.265,-0.118 0.353,-0.085 0.408,-0.036 0.205,0.024 0.525,-0.158 0.826,-0.306 0.75,-0.257 0.252,-0.153 0.188,0.153 0.087,0.337 0.219,0.174 0.217,0.084 0.125,-0.004 0.374,-0.131 0.404,-0.096 0.159,0.052 0.205,0.172 0.23,0.154 0.12,-0.007 0.105,-0.119 0.106,-0.24 0.067,-0.306 0.014,-0.324 -0.04,-0.198 -0.081,-0.073 -0.368,-0.117 -0.351,-0.191 -0.04,-0.175 0.008,-0.125 0.093,-0.306 0.229,-0.563 0.23,-0.779 0.122,-0.617 0.385,-0.923 0.303,-0.966 0.49,-1.396 0.082,-0.277 0.045,-0.443 0.026,-0.183 0.171,-0.096 0.288,0.094 0.703,0.32 0.535,0.269 0.224,0.091 0.333,0.095 0.515,0.112 0.298,-0.033 0.261,-0.066 0.348,-0.006 0.543,0.083 0.168,0.003 0.209,0.011 0.148,0.136 0.074,0.307 0.112,0.138 0.203,-0.051 0.432,-0.271 0.276,-0.213 0.345,-0.309 0.342,-0.042 0.363,-0.069 0.126,-0.153 0.134,-0.36 0.223,-0.272 0.037,-0.346 -0.078,-0.244 -0.155,-0.398 0.005,-0.269 -0.075,-0.781 -0.1,-0.705 0.102,-0.569 0.18,-0.638 0.07,-0.196 0.114,-0.257 0.161,-0.309 0.226,-0.097 0.635,-0.066 0.588,-0.13 0.3,-0.134 0.312,-0.081 0.186,-0.098 0.32,-0.453 0.152,-0.261 0.112,-0.694 -0.082,-0.334 0.068,-0.296 0.155,-0.174 0.218,-0.175 0.146,-0.03 0.311,-0.053 0.51,0.018 0.26,0.085 0.264,0.04 0.167,-0.063 0.111,-0.133 0.171,-0.042 0.257,-0.064 0.265,-0.08 0.146,0.015 0.03,0.197 -0.024,0.154 0.051,0.206 0.105,0.136 -0.034,0.147 -0.148,0.085 -0.146,0.115 -0.032,0.157 0.185,0.195 0.063,0.187 0.31,0.112 0.241,0.126 0.09,0.121 -0.027,0.136 -0.111,0.146 -0.107,0.157 -0.014,0.094 0.034,0.11 0.232,0.073 0.269,0.121 0.426,0.156 0.292,0.29 0.29,0.08 0.14,0.282 0.025,0.409 0.297,0.208 0.439,0.289 0.223,0.053 0.149,0.164 0.215,0.198 0.191,0.062 0.227,0.029 0.374,-0.184 0.42,-0.018 0.229,0.105 0.218,0.396 0.154,0.125 0.091,0.111 0.147,0.106 0.149,0.016 0.222,-0.088 0.135,-0.175 0.194,0.036 0.073,0.114 0.036,0.195 0.103,0.242 0.246,0.18 0.344,0.107 0.048,0.088 0.048,0.241 0.093,0.167 0.125,0.218 0.119,0.397 0.025,0.328 0.055,0.18 0.159,0.293 0.254,0.468 0.202,0.396 0.234,0.077 0.199,0.125 0.114,0.292 0.211,0.549 0.034,0.358 0.018,0.267 0.069,0.121 0.015,0.151 -0.176,0.573 -0.149,0.258 -0.019,0.217 0.101,0.377 0.139,0.292 0.014,0.279 -0.118,0.204 -0.203,0.255 -0.098,0.146 -0.158,0.128 -0.242,0.492 -0.109,0.543 -0.025,0.279 0.092,0.202 0.154,0.222 0.038,0.192 0.253,0.429 0.067,0.265 0.104,0.009 0.111,-0.087 0.271,-0.006 0.246,0.094 0.236,0.196 0.253,0.104 0.362,-0.026 0.193,0.105 0.208,0.086 0.431,0.03 0.323,-10e-4 0.496,0.003 0.401,0.132 0.705,0.104 0.436,-0.008 0.586,-0.098 0.359,0.062 1.063,0.146 0.622,0.153 0.394,0.172 0.277,0.272 0.317,0.424 0.252,0.194 0.677,0.117 0.465,0.494 0.363,0.184 0.611,0.477 0.432,0.186 0.517,0.171 0.843,-0.073 0.047,0.064 -0.065,0.258 -0.051,0.353 0,0.255 0.087,0.13 0.322,0.077 0.152,0.125 0.116,0.24 0.067,0.149 0.271,0.734 0.434,1.081 0.05,0.415 0.148,0.267 0.471,0.423 0.247,0.313 0.368,0.328 0.121,0.303 0.027,0.391 0.093,0.101 0.673,-0.09 0.583,-0.063 1.046,-0.112 1.44,0.204 1.485,0.197 1.313,0.174 0.647,0.085 1.462,0.183 0.813,-0.233 0.635,-0.182 0.288,0.025 1.214,0.205 0.712,0.11 0.896,0.138 0.622,0.051 0.51,-0.003 0.235,0.058 0.227,0.089 0.151,0.13 0.466,0.656 0.261,0.289 0.517,0.218 1.174,0.249 0.65,0.151 0.746,0.173 0.492,0.261 0.566,0.303 0.733,0.392 0.803,-0.171 0.864,-0.185 0.542,-0.116 0,0.818 0.773,0.065 0.242,-0.009 0.342,0.18 0.192,-0.076 0.183,-0.177 0.229,-0.28 0.329,-0.123 0.569,-0.314 0.139,-0.076 0.845,-0.447 1.262,-0.552 0.566,-0.268 0.169,-0.06 0.32,-0.137 0.216,-0.095 0.382,-0.076 0.518,-0.048 0.566,-0.104 1.28,-0.196 0.161,-0.018 0.719,-0.081 0.306,-0.076 0.457,0.04 0.597,0.028 0.396,0.05 0.525,-0.039 0.722,-0.053 0.584,0.008 0.29,-0.066 0.428,-0.207 0.287,-0.164 0.451,-0.199 0.56,-0.207 0.39,-0.188 0.258,-0.125 0.313,-0.118 0.082,-0.152 0.09,-0.117 0.166,-0.195 0.299,-0.364 0.228,-0.319 0.112,-0.142 0.256,-0.319 0.207,-0.241 0.264,-0.325 0.222,-0.105 0.282,-0.089 0.741,-0.319 0.147,-0.069 0.123,-0.014 0.262,-0.258 0.222,-0.224 0.145,-0.167 0.301,-0.061 0.154,-0.121 0.027,-0.158 -0.031,-0.242 -0.145,-0.248 -0.122,-0.217 -0.43,-0.414 -0.228,-0.257 -0.232,-0.331 -0.095,-0.311 -0.159,-0.198 -0.076,-0.176 0.024,-0.203 0.221,-0.362 0.07,-0.229 0.092,-0.405 0.207,-0.607 0.169,-0.285 0.195,-0.278 0.413,-0.374 0.378,-0.069 0.225,0.074 0.503,0 0.335,0.02 0.247,0.187 0.273,0.369 0.309,0.135 0.962,0.289 0.411,0.061 0.294,0.013 0.435,0.095 0.146,0.021 0.223,0.065 0.184,-0.07 0.279,-0.247 0.351,-0.277 0.151,-0.064 0.279,-0.12 0.14,-0.113 0.245,-0.312 0.318,-0.242 0.388,-0.364 0.191,-0.274 0.042,-0.177 0.042,-0.192 0.12,-0.101 0.236,-0.093 0.266,-0.025 0.506,0.165 0.684,-0.047 0.153,-0.024 0.623,-0.095 0.281,-0.078 0.396,-0.075 0.304,-0.306 0.407,-0.365 0.296,-0.203 0.197,-0.039 0.246,-0.211 0.121,-0.227 -0.032,-0.2 -0.046,-0.165 0.145,-0.307 0.262,-0.538 0.244,-0.251 0.202,-0.203 0.129,-0.327 0.159,-0.094 0.195,-0.036 0.275,-0.222 0.202,-0.045 0.336,0.106 0.497,0.027 0.317,0.011 0.181,-0.04 0.066,-0.119 -0.002,-0.184 0.101,-0.41 0.038,-0.135 0.091,-0.063 0.306,-0.008 0.206,0.147 0.142,0.122 0.197,0.016 0.203,-0.08 0.271,-0.332 0.452,-0.193 0.24,-0.049 0.426,-0.157 0.269,0.057 0.494,0.046 0.191,-0.04 0.208,0.04 0.189,-0.225 0.15,-0.054 0.318,0.104 0.2,0.174 0.374,0.218 0.477,0.102 0.399,-0.052 0.41,0.092 0.242,-0.008 0.115,-0.086 0.336,-0.183 0.08,-0.248 -0.033,-0.239 0.039,-0.271 -0.099,-0.2 -0.208,-0.296 -0.081,-0.198 -0.007,-0.259 -0.13,-0.247 -0.312,-0.298 -0.205,-0.138 -0.422,-0.516 -0.143,-0.121 -0.049,-0.085 -0.049,-0.173 -0.156,-0.083 -0.205,-0.135 -0.11,-0.138 -0.072,-0.24 -0.043,-0.157 -0.181,-0.13 -0.181,-0.073 -0.204,-0.092 -0.338,-0.135 -0.195,-0.269 -0.344,-0.505 -0.195,-0.17 -0.726,-0.065 -0.261,-0.123 -0.295,0.042 -0.176,0.081 -0.39,-10e-4 -0.202,0.05 -0.257,0.333 -0.341,0.432 -0.281,0.263 -0.2,0.273 -0.093,0.098 -0.182,-0.059 -0.25,-0.307 -0.357,-0.275 -0.331,-0.125 -0.142,-0.069 -0.395,-0.07 -0.305,0.022 -0.389,0.104 -0.38,-0.019 -0.171,-0.066 -0.242,0.007 -0.438,0.286 -0.227,0.325 -0.269,0.102 -0.243,-0.213 -0.28,-0.252 -0.268,-0.316 -0.165,-0.293 -0.092,-0.778 0.321,-0.232 0.41,-0.261 0.031,-0.413 -0.015,-0.461 0.081,-0.514 0.374,-0.475 0.201,-0.394 0.025,-0.246 0.18,-0.409 0.172,-0.432 0.235,-0.568 0.445,-1.012 0.526,-1.202 0.263,-0.602 0.577,0.373 0.372,0.194 0.629,0.294 0.649,0.066 0.621,0.318 0.32,0.096 0.171,0 0.879,-0.774 0.743,-0.657 0.854,-0.514 0.628,-0.07 0.472,-0.15 0.314,-0.231 0.187,-0.386 0.057,-0.542 -0.126,-0.329 -0.308,-0.114 -0.079,-0.115 0.148,-0.117 0.11,-0.227 0.069,-0.338 0.178,-0.322 0.285,-0.304 0.158,-0.338 0.029,-0.372 0.172,-0.372 0.313,-0.371 0.172,-0.346 0.029,-0.32 0.159,-0.392 0.432,-0.695 0.28,-0.803 0.478,-0.552 0.768,-0.568 0.479,-0.565 0.191,-0.562 -0.015,-0.498 -0.222,-0.432 -0.043,-0.44 0.138,-0.449 -0.121,-0.336 -0.379,-0.223 -0.452,-0.055 -0.525,0.113 -0.295,-0.141 -0.065,-0.394 0.141,-0.319 0.347,-0.244 0.57,-0.595 0.794,-0.95 0.79,-0.527 1.178,-0.152 0.95,-0.313 0.968,-0.318 0.699,-0.158 0.119,0.106 0.381,0.026 0.643,-0.054 0.597,-0.137 0.552,-0.221 0.437,-0.052 0.321,0.117 0.189,0.014 z",
                        title: "China",
                        id: "CN",
                    },
                    {
                        d:
                            "m 274.73775,429.6124 -0.101,0.035 -0.125,0.075 -0.381,0.141 -0.515,0.134 -0.67,0.172 -0.152,0.184 -0.663,1.153 -0.555,0.233 -0.202,0.172 -0.152,0.218 -0.331,0.401 -0.138,0.308 -0.365,0.669 -0.2,0.838 -0.076,0.47 -0.11,0.681 -0.162,0.342 -0.216,0.321 -0.233,0.313 -0.2,0.344 -0.17,0.269 -0.028,0.092 0.083,0.074 0.403,-0.074 0.159,-0.081 0.22,-0.104 0.138,0.056 0.138,0.296 0.156,0.037 0.147,-0.037 0.156,0.074 0.199,0.736 0.169,0.623 0.392,0.389 0.306,0.303 0.074,0.268 0.073,0.378 0.019,0.185 -0.096,0.111 -0.152,0.23 -0.038,0.439 -0.026,0.146 -0.028,0.407 0.02,0.25 0.082,0.195 0.136,0.112 0.276,0.058 0.249,0.068 0.143,0.338 0.203,0.43 0.218,0.181 0.32,0.119 0.229,-0.043 0.534,-0.076 0.459,0.019 0.672,0.115 0.25,-0.004 0.323,-0.022 0.569,-0.233 0.207,-0.035 0.23,0.021 0.336,0.119 0.182,0.094 0.233,0.097 0.34,0.069 0.219,-0.012 0.166,-0.004 0.096,0.044 0.535,0.667 0.464,0.578 0.404,0.485 0.437,0.523 0.034,0.031 0.197,-0.067 0.13,0.029 0.12,0.106 0.207,-0.044 0.294,-0.194 0.428,-0.039 0.563,0.116 0.743,0 0.922,-0.115 0.573,-0.125 0.224,-0.135 0.37,0.014 0.447,0.121 0.241,0.172 0.029,0.169 0.09,0.265 -0.097,0.268 -0.284,0.271 -0.158,0.347 -0.031,0.422 -0.147,0.312 -0.263,0.202 -0.103,0.294 0.058,0.386 -0.028,0.564 -0.115,0.742 0,0.443 0.115,0.145 0.053,0.208 -0.009,0.271 0.043,0.24 0.143,0.312 0.199,0.621 0.166,0.267 0.145,0.098 0.147,0.12 0.424,0.635 0.103,0.134 -0.031,0.117 -0.04,0.087 -0.049,0.056 -0.452,0.378 -0.898,0.822 -0.074,0.104 0.006,0.172 0.26,-0.111 0.279,0.093 0.136,0.018 0.062,0.068 0.081,0.222 0.093,0.037 0.136,0.092 0.266,0.234 0.223,0.246 0.167,0.118 0.118,0.11 0.037,0.16 -0.049,0.16 0.14,0.371 0.095,0.115 0.05,0.141 -0.05,0.142 0.118,0.166 0.128,0.327 0.156,0.399 0.019,0.222 0.065,0.102 0.077,0.296 0.131,0.278 -0.031,0.19 0.055,0.187 -0.531,0.125 -0.048,-0.02 -0.032,-0.069 0.015,-0.531 -0.005,-0.6 -0.082,-0.246 -0.243,-0.394 -0.322,-0.522 -0.088,-0.15 -0.136,-0.086 -0.161,-0.012 -0.118,0.037 -0.158,0.097 -0.149,0.106 -0.288,0.315 -0.29,0.368 -0.17,0.083 -0.17,0.034 -0.15,-0.011 -0.121,-0.099 -0.124,-0.201 -0.149,-0.267 -0.178,-0.087 -0.069,0.082 -0.059,0.157 -0.046,0.156 0.12,0.198 0.103,0.153 -0.177,-0.005 -0.572,0 -0.66,0 -0.659,0 -0.592,0 -0.548,0 -0.209,-0.013 -0.213,-0.09 -0.204,-0.042 -0.108,0.007 -0.193,0.087 -0.251,0.013 -0.169,0.083 -0.136,-0.01 -0.002,0.46 -0.004,0.655 -0.004,0.695 0.152,-0.053 0.131,0.005 0.096,0.049 0.27,-0.04 0.149,0.021 0.142,0.018 0.131,0.002 0.081,0.055 0.108,-0.01 0.116,-0.061 0.139,0.038 0.149,0.098 0.096,0.146 0.086,0.181 0.086,0.096 -0.005,0.173 -0.003,0.136 -0.03,0.113 0.038,0.073 0.028,0.078 -0.008,0.045 -0.05,0.021 -0.109,0.015 -0.116,0.013 -0.081,-0.005 -0.063,-0.07 -0.061,-0.008 -0.088,0.01 -0.094,-0.042 -0.081,-0.088 -0.144,-0.088 -0.154,0.038 -0.106,0.045 -0.109,0.055 -0.099,0.058 -0.099,-0.015 -0.126,0.042 -0.106,0.065 -0.142,0.053 -0.154,0.025 -0.177,0.025 -0.169,0.01 -0.192,0.021 -0.011,0.366 -0.022,0.719 -0.015,0.476 10e-4,0.439 0.074,0.16 0.34,0.338 0.267,0.178 0.226,0.199 0.225,0.083 0.094,0.075 0.062,0.123 0.031,0.129 0.024,0.11 -0.024,0.117 -0.056,0.111 0.024,0.117 0.081,0.092 0.025,0.117 0.056,0.111 0.031,0.111 0.068,0.08 0.086,0.055 0.111,0.092 0.012,0.086 -0.012,0.098 -10e-4,0.074 0.106,0.169 0.031,0.119 -0.049,0.141 -0.048,0.491 -0.122,0.559 -0.079,0.427 -0.127,0.695 -0.148,0.809 -0.181,0.986 -0.179,0.974 -0.172,0.943 -0.156,0.853 -0.172,0.941 -0.104,0.57 -0.05,0.099 -0.144,-0.207 -0.218,-0.195 -0.204,-0.117 -0.087,-0.154 -0.117,-0.314 -0.164,-0.107 -0.115,-0.083 -0.111,0.012 -0.118,0.086 -0.182,0.055 -0.123,-0.008 -0.495,-0.216 -0.081,-0.021 0.318,-0.494 0.569,-0.883 0.362,-0.562 0.401,-0.623 0.205,-0.318 0.027,-0.054 0,-0.082 -0.087,-0.121 -0.193,-0.051 -0.224,-0.093 -0.141,-0.151 -0.195,-0.065 -0.152,-0.107 -0.277,-0.105 -0.166,-0.097 -0.203,-0.035 -0.161,-0.178 -0.587,-0.345 -0.151,-0.032 -0.165,0.053 -0.242,0.055 -0.233,0.188 -0.291,0.061 -0.272,-0.002 -0.142,-0.112 -0.136,-0.041 -0.178,-0.153 -0.314,-0.118 -0.228,-0.082 -0.141,0.038 -0.181,0.171 -0.183,0.17 -0.145,0.106 -0.195,-0.006 -0.233,0.156 -0.229,0.056 -0.231,0.024 -0.266,0.055 -0.295,-0.094 -0.242,-0.083 -0.108,-0.038 -0.098,0.026 -0.152,0.087 -0.272,0.037 -0.213,0.009 -0.151,-0.041 -0.136,-0.151 -0.22,-0.077 -0.242,-0.094 -0.051,-0.195 0.035,-0.146 0.094,-0.21 -0.052,-0.217 -0.102,-0.342 -0.043,-0.14 -0.076,-0.119 -0.119,-0.043 -0.233,0.032 -0.255,-0.129 -0.157,-0.124 -0.081,-0.151 0.086,-0.285 -0.076,-0.243 -0.152,-0.134 -0.098,-0.237 -0.152,-0.188 -0.2,-0.097 -0.201,0.011 -0.157,-0.059 -0.179,-0.2 -0.168,-0.075 -0.19,-0.194 -0.354,-0.086 -0.184,-0.076 -0.105,-0.12 -0.142,-0.214 0.016,-0.118 -0.069,-0.117 -0.061,-0.209 -0.121,-0.309 -0.133,-0.176 -0.137,-0.132 -0.116,-0.112 -0.172,-0.167 -0.211,-0.097 -0.179,-0.102 -0.07,-0.151 -0.06,-0.124 -0.101,0.009 -0.144,-0.011 -0.158,-0.032 -0.167,-0.09 -0.14,-0.109 -0.235,-0.185 -0.128,-0.024 -0.114,0 -0.168,0.181 -0.503,-0.19 -0.431,-0.282 -0.447,-0.073 -0.289,-0.172 -0.267,-0.27 -0.144,-0.183 -0.117,-0.09 -0.569,-0.262 -0.113,-0.025 -0.217,0.122 -0.07,0.073 -0.013,0.209 -0.026,0.119 -0.189,0.072 -0.305,-0.016 -0.211,-0.076 -0.142,-0.011 -0.029,0.06 -0.08,0.025 -0.173,-0.017 -0.255,-0.058 -0.231,-0.077 -0.313,-0.164 -0.145,0.021 -0.356,-0.035 -0.291,-0.094 -0.074,-0.086 -0.126,-0.59 -0.039,-0.041 -0.125,-0.025 -0.211,-0.082 -0.133,-0.095 -0.069,-0.164 -0.083,-0.155 -0.355,0.035 -0.582,-0.205 -0.403,-0.195 -0.369,-0.216 -0.56,-0.426 -0.213,-0.105 -0.264,-0.13 -0.156,-0.21 -0.257,-0.212 -0.086,-0.058 -0.081,-0.191 -0.384,-0.278 0.19,-0.358 0.462,-0.27 0.606,0.209 0.074,-0.418 -0.219,-0.37 0.033,-0.699 0.071,-0.14 0.16,-0.187 0.208,-0.13 0.122,-0.037 0.208,0.064 0.131,-0.14 0.494,0.063 0.15,-0.059 0.103,-0.095 0.121,-0.072 0.154,-0.168 0.089,-0.194 0.074,-0.076 0.171,0.027 0.016,-0.084 0.088,-0.114 0.299,-0.255 -0.003,-0.113 -0.084,-0.246 0.021,-0.09 0.173,-0.031 0.205,-0.069 0.109,-0.235 0.135,-0.205 0.154,-0.302 0.17,-0.019 0.09,-0.353 0.229,-0.309 0.466,-0.916 -0.141,0.02 -0.112,0.123 -0.127,-0.015 -0.145,-0.072 0.042,-0.413 -0.083,-0.049 -0.225,0.318 -0.194,-0.324 -0.018,-0.197 0.082,-0.195 -0.012,-0.131 -0.314,0.098 0.015,-0.122 0.195,-0.125 0.089,-0.13 0.17,-0.142 0.071,-0.214 0.041,-0.333 0.077,-0.357 -0.057,-0.176 -0.092,-0.15 -0.077,-0.666 0.021,-0.388 -0.04,-0.305 -0.08,-0.258 -0.373,-0.339 0.589,-0.388 0.211,-0.293 -0.268,-0.603 -0.35,-0.509 -0.01,-0.305 0.092,0.039 0.118,-0.009 0.107,-0.644 -0.025,-0.199 -0.197,-0.322 -0.244,-0.008 -0.214,-0.405 -0.123,-0.091 -0.099,-0.255 -0.345,-0.497 -0.273,-0.259 0.205,-0.6 0.179,-0.115 0.058,-0.149 -0.07,-0.369 0.02,-0.086 0.042,-0.037 0.042,0.002 0.072,0.056 0.134,0.159 0.112,0.197 0.09,0.06 0.136,-0.065 0.526,-0.393 -0.034,-0.122 0.048,-0.246 0.176,-0.201 0.188,-0.069 0.056,-0.112 -0.045,-0.173 -0.198,-0.431 -0.176,-0.232 -0.113,-0.231 -0.06,-0.213 -0.2,-0.201 0.084,-0.19 0.155,-0.222 0.053,-0.039 0.084,0.061 0.232,0.403 0.369,0.262 0.387,0.423 0.159,0.292 0.126,0.053 0.109,0.105 -0.048,0.079 -0.121,0.083 -0.035,0.169 0.079,0.095 0.083,0.061 0.226,-0.039 0.124,-0.198 -0.083,-0.869 -0.13,-0.435 -0.151,-0.135 -0.135,-0.172 0.091,-0.13 0.241,-0.059 0.316,-0.152 1.158,-0.831 0.397,-0.781 0.304,-0.283 0.343,-0.184 0.42,0.043 0.326,-0.098 0.101,-0.249 -0.089,-0.337 -0.125,-0.204 0.12,-0.295 0.125,-0.449 -0.009,-0.377 0.161,-0.225 -0.056,-0.088 -0.235,0.182 -0.186,0.082 0.105,-0.15 0.329,-0.372 0.171,-0.567 0.131,-0.236 0.464,-0.33 0.092,-0.159 0.351,-0.248 0.565,-0.532 0.216,-0.148 1.095,0.343 0.348,-0.022 -0.062,0.063 -0.161,0.021 -0.232,0.093 -0.067,0.205 0.157,0.214 0.167,0.062 0.142,-0.138 0.141,-0.393 0.227,-0.435 0.053,-0.456 0.161,-0.157 0.235,-0.057 0.42,0.09 0.319,0.094 0.333,0.012 1.021,-0.069 1.66,-1.185 0.771,-0.255 0.483,-0.25 0.308,-0.487 0.083,-0.366 0.227,-0.142 0.238,0 0.109,-0.089 0.034,-0.113 0.574,-0.317 0.329,-0.041 0.291,0.006 0.65,0.276 0.301,0.488 0.05,0.336 -0.412,0.365 -0.108,0.16 z m -19.067,26.222 -0.076,0.062 -0.145,-0.11 -0.049,-0.14 0.089,-0.104 0.114,0.034 0.052,0.085 0.015,0.173 z",
                        title: "Colombia",
                        id: "CO",
                    },
                    {
                        d:
                            "m 240.15475,432.2994 0.07,0.113 0.081,0.177 0.036,0.228 0.357,0.763 0.285,0.426 0.624,0.776 0.269,0.143 0.455,0.623 0.157,0.103 0.09,0.184 0.472,0.151 0.131,0.112 -0.016,0.052 -0.049,0.055 -0.069,0.055 -0.092,0.038 -0.222,-0.114 -0.219,-0.129 -0.12,0.059 -0.045,0.168 -0.081,0.086 -0.101,0.034 -0.042,0.056 -0.009,0.566 0.008,0.533 0.165,0.012 0.276,0.185 0.118,0.109 0.037,0.101 -0.034,0.049 -0.202,0.116 -0.197,0.147 -0.098,0.183 0.172,0.297 0.037,0.201 -0.006,0.211 -0.048,0.101 -0.381,0.241 -0.083,0.085 0.01,0.061 0.211,0.167 0.099,0.161 0.083,0.194 0.012,0.169 -0.191,-0.313 -0.264,-0.299 -0.23,-0.184 -0.018,-0.429 -0.092,-0.233 -0.346,-0.215 -0.296,-0.151 -0.22,0.031 0.135,0.247 0.347,0.317 0.023,0.121 -0.005,0.163 -0.239,-0.025 -0.212,-0.066 -0.257,-0.021 -0.171,-0.097 -0.363,-0.379 0.258,-0.322 0.08,-0.212 -0.007,-0.44 -0.059,-0.213 -0.28,-0.324 -0.445,-0.357 -0.624,-0.291 -0.293,-0.235 -0.731,-0.18 -0.278,-0.119 -0.217,-0.221 -0.032,-0.159 0.077,-0.245 -0.202,-0.311 -0.87,-0.613 -0.487,-0.225 -0.104,-0.133 -0.077,-0.041 0.074,0.423 0.213,0.255 0.555,0.237 0.153,0.139 0.062,0.18 -0.322,0.344 -0.165,0.087 -0.048,0.188 -0.105,0.057 -0.111,-0.108 -0.45,-0.54 -0.871,-0.259 -0.158,-0.159 -0.324,-0.494 -0.149,-0.45 0.053,-0.301 0.358,-0.469 0.112,-0.204 -0.023,-0.126 0.011,-0.185 -0.133,-0.129 -0.331,-0.169 -0.211,-0.135 0.058,-0.067 0.379,-0.182 0.024,-0.164 -0.002,-0.054 0.062,-0.012 0.055,-0.043 0.034,-0.046 0.103,-0.158 0.091,-0.089 0.105,-0.014 0.127,0.065 0.478,0.171 0.532,0.189 0.757,0.268 0.314,-0.172 0.27,-0.131 0.188,0.019 0.407,0.153 0.245,0.049 0.15,-0.016 0.26,0.225 0.142,0.169 0.024,0.112 0.079,0.061 0.203,0.013 0.496,0.114 0.303,-0.022 0.276,-0.121 0.152,-0.145 z",
                        title: "Costa Rica",
                        id: "CR",
                    },
                    {
                        d:
                            "m 245.21975,396.4924 0.735,0.141 0.594,-0.04 0.284,-0.083 -0.026,0.085 0.261,0.209 0.095,0.014 0.384,-0.106 1.003,-0.04 0.103,0.059 0.177,0.204 0.256,0.126 0.265,0.096 0.277,0.025 0.276,-0.043 0.259,0.021 0.324,0.198 0.102,0.023 0.29,-0.054 -0.085,0.182 0.488,0.254 0.358,0.5 0.26,0.205 0.275,0.184 0.232,0.125 0.26,0.06 0.789,-0.024 0.187,0.015 0.167,0.071 0.159,0.028 0.092,-0.027 1.524,0.776 0.485,0.414 0.296,0.215 0.641,0.31 0.257,0.068 0.135,-0.041 -0.026,-0.068 -0.188,-0.172 -0.028,-0.063 0.241,0.053 0.435,0.35 0.12,0.129 0.217,0.12 0.219,0.086 -0.104,0.138 -0.178,0.012 -0.341,-0.057 0.271,0.225 0.046,0.163 0.126,0.014 0.188,-0.179 0.119,-0.151 0.479,0.39 0.258,0.178 -0.066,0.104 -0.021,0.103 0.288,-0.096 0.109,0.011 0.105,0.055 0.115,0.167 0.269,0.037 0.271,-0.004 0.55,0.138 0.521,0.281 0.49,0.057 0.494,0.01 0.25,0.148 0.106,0.2 -0.12,0.141 -0.068,0.147 0.184,0.181 -0.401,0.077 -0.057,0.109 0.021,0.117 0.08,0.064 0.229,-0.056 0.332,0.05 0.523,0.044 0.35,-0.036 0.712,0.123 0.216,0.066 0.422,0.231 0.195,0.152 0.419,0.41 0.361,0.161 0.313,0.039 0.109,-0.027 0.099,0.045 0.087,0.057 0.086,0.179 -0.048,0.188 -0.179,0.153 -0.099,0.111 -0.447,0.013 -0.625,0.051 -0.604,0.166 -0.295,0.132 -0.135,0.087 -0.318,0.081 -0.021,-0.069 0.006,-0.087 -0.083,-0.161 -0.072,0.145 -0.118,0.106 -0.199,0.09 -0.734,0.006 -0.295,-0.122 -0.303,-0.083 -1.104,-0.087 -0.265,0.007 -0.737,0.091 -0.741,0.049 -0.31,0.056 -0.307,0.084 -0.597,-0.003 -0.705,0.096 -0.707,0.018 0.453,-0.673 0.955,-0.649 0.18,-0.14 0.128,-0.179 0.03,-0.135 -0.042,-0.115 -0.228,-0.204 -0.046,-0.151 -0.068,-0.098 -0.331,-0.085 -0.335,-0.051 -0.353,-0.001 -0.741,-0.07 -0.394,-0.005 -0.334,-0.139 -0.554,-0.494 -0.259,-0.139 -0.133,-0.111 -0.104,-0.128 -0.13,-0.728 -0.11,-0.35 -0.168,-0.305 -0.256,-0.231 -0.268,-0.079 -1.028,0.198 -0.239,-0.03 -0.233,-0.067 -1.552,-0.473 -0.64,-0.26 -0.261,-0.129 -0.223,-0.184 -0.231,-0.302 -0.259,-0.27 0.001,0.109 -0.04,0.071 -1.299,0.032 -0.207,-0.062 -0.133,-0.074 -0.094,-0.109 -0.07,-0.219 -0.124,-0.184 -0.04,0.196 -0.064,0.181 -0.174,0.101 -0.199,0.017 -0.241,-0.24 -1.053,-0.05 -0.093,-0.041 -0.346,-0.233 -0.295,-0.292 0.293,-0.103 0.606,-0.135 0.131,-0.09 0.076,-0.116 -0.055,-0.172 -0.121,-0.125 -0.124,-0.073 -0.137,-0.046 -0.181,-0.02 -2.343,-0.031 -0.135,0.094 -0.21,0.191 -0.416,0.245 -0.274,0.254 -0.103,0.131 -0.128,0.094 -0.288,0.157 -0.246,0.242 -0.298,0.108 -0.163,-0.066 -0.161,10e-4 -0.117,0.06 -0.123,0.027 -0.601,0.029 -0.09,0.062 -0.086,0.173 -0.098,0.337 -0.092,0.111 -0.301,0.042 -0.287,0.092 -0.584,0.32 -0.151,0.047 0.033,-0.235 -0.029,-0.229 -0.165,-0.008 -0.188,0.038 -0.157,0.064 -0.29,0.171 -0.147,0.043 -0.137,-0.087 0.028,-0.112 0.967,-0.412 0.108,-0.031 0.172,0.031 0.168,-0.014 0.131,-0.116 -0.159,-0.546 0.061,-0.372 0.224,-0.288 0.448,-0.437 0.216,-0.144 2.209,-0.913 0.226,-0.047 1.436,-0.184 0.219,-0.064 0.666,-0.271 0.699,-0.111 0.749,0.087 z m 6.982,1.511 0.005,0.08 -0.491,-0.222 -0.211,-0.231 -0.085,-0.053 0.138,-0.005 0.553,0.379 0.091,0.052 z m 2.019,0.338 0.385,0.064 0.134,-0.039 0.128,-0.011 0.135,0.027 0.189,0.251 -0.166,0.031 -0.132,0 -0.097,-0.045 -0.346,-0.011 -0.228,-0.073 -0.125,-0.063 -0.061,-0.076 0.184,-0.055 z m 1.692,0.806 -0.057,0.05 -0.152,-0.112 -0.22,-0.049 -0.129,-0.175 -0.124,-0.067 -0.01,-0.064 0.204,-0.042 0.142,0.019 0.158,0.133 0.091,0.246 0.097,0.061 z m 0.415,0.476 -0.092,0.008 -0.279,-0.125 -0.083,-0.105 0.098,-0.141 0.021,-0.153 0.038,-0.01 0.045,0.186 0.213,0.079 0.013,0.041 0.131,0.157 -0.105,0.063 z m 0.591,0.528 -0.115,0.092 -0.126,-0.133 -0.08,-0.014 -0.111,-0.053 -0.215,-0.148 -0.052,-0.153 0.179,-0.012 0.226,0.027 0.395,0.087 -0.035,0.173 -0.066,0.134 z m -13.732,1.142 -0.261,0.159 -0.557,0.224 -0.299,0.008 -0.302,-0.084 -0.208,-0.187 -0.119,-0.185 0.01,-0.089 0.189,0.148 0.163,0.073 0.134,-0.049 0.095,-0.08 -0.306,-0.598 0.014,-0.126 0.243,-0.329 0.661,0.1 0.115,0.058 0.092,0.208 0.147,0.163 0.173,0.436 0.016,0.15 z",
                        title: "Cuba",
                        id: "CU",
                    },
                    {
                        d:
                            "m 404.25675,414.9664 -0.273,0.06 -0.116,-0.029 -0.038,-0.232 -0.055,-0.153 0.013,-0.068 0.627,-0.299 0.221,0.05 0.154,0.239 -0.105,0.132 -0.428,0.3 z m 0.793,0.374 -0.23,0.07 -0.143,-0.009 -0.205,-0.103 0.064,-0.111 0.222,-0.124 0.153,-0.026 0.125,0.221 0.014,0.082 z m 5.61,0.464 -0.09,0.149 -0.11,-0.219 -0.06,-0.052 -0.029,-0.314 0.163,-0.094 0.079,-0.008 0.002,0.325 0.045,0.213 z m -3.366,0.106 0.116,0.085 0.038,0.062 -0.172,0.032 -0.418,-0.112 -0.111,0.068 -0.111,0.241 -0.213,-0.365 0.015,-0.134 0.045,-0.039 0.296,0.096 0.515,0.066 z m 3.283,1.12 0.234,0.053 0.089,-0.019 0.149,0.012 0.16,0.152 0.03,0.162 -0.079,0.203 -0.31,0.167 -0.179,-0.02 -0.211,-0.152 0.121,-0.3 -0.004,-0.258 z m -1.478,3.56 -0.169,0.265 -0.372,-0.021 -0.191,-0.109 -0.224,-0.333 0.007,-0.258 0.079,-0.224 -0.014,-0.194 0.032,-0.051 0.115,0.034 0.019,0.131 0.338,0.32 0.125,0.062 0.255,0.378 z m 0.736,-0.372 -0.078,0.011 -0.117,-0.13 0.026,-0.18 -0.013,-0.047 0.104,-0.192 0.204,0.017 0.052,0.143 0.01,0.294 -0.188,0.084 z m -3.16,0.81 -0.218,0.11 -0.153,-0.048 -0.145,-0.114 -0.07,-0.165 0.057,-0.142 0.294,-0.167 0.176,0.054 0.094,0.26 -0.035,0.212 z",
                        title: "Cape Verde",
                        id: "CV",
                    },
                    { d: "m 281.94575,429.0484 -0.146,0.041 -0.539,-0.275 -0.445,-0.447 -0.014,-0.233 0.114,0.02 0.116,0.089 0.179,0.316 0.521,0.208 z", title: "Curaçao", id: "CW" },
                    { d: "m 771.61175,492.3404 -0.08,0.202 -0.147,-0.111 -0.169,-0.036 0.033,-0.15 0.139,-0.021 0.069,-0.008 0.099,-0.053 z", title: "Christmas Island", id: "CX" },
                    {
                        d:
                            "m 571.61575,356.5314 -1.463,1.034 -0.095,0.307 0.065,0.212 0.206,0.257 0.054,0.067 0.074,0.195 -0.319,0.058 -0.32,0.019 -0.178,-0.026 -0.168,0.012 -0.519,0.557 -0.279,0.189 -0.332,0.112 -0.338,0.067 -0.17,0.009 -0.15,0.07 -0.105,0.129 -0.002,0.125 -0.045,0.103 -0.186,-0.021 -0.077,-0.202 -0.132,-0.087 -0.329,0.045 -0.16,-0.006 -0.526,-0.192 -0.159,-0.08 -0.099,-0.165 -0.271,-0.596 -0.045,-0.443 0.252,0.114 0.236,-0.138 0.227,-0.225 0.271,-0.092 0.169,0.04 0.168,0.04 0.302,-0.072 0.13,-0.334 0.043,-0.384 0.51,0.11 0.518,0.057 0.423,0.019 0.418,-0.062 1.279,-0.411 0.362,-0.246 0.225,-0.084 0.389,-0.203 0.407,-0.113 z",
                        title: "Cyprus",
                        id: "CY",
                    },
                    {
                        d:
                            "m 516.45775,297.4554 0.242,-0.011 0.245,-0.111 0.02,-0.181 -0.016,-0.338 0.026,-0.049 0.371,0.096 0.372,0.152 0.052,0.336 0.1,0.165 0.118,0.151 0.112,0.068 0.195,0.011 0.505,0.199 0.243,0.04 0.249,0.138 0.21,0.14 0.153,0.03 0.071,0.153 0.094,0.105 0.166,-0.081 0.606,-0.113 0.218,0.151 0.147,0.16 0.02,0.05 -0.077,0.141 -0.037,0.109 -0.063,0.073 -0.208,0.077 -0.117,0.124 -0.086,0.136 0.058,0.13 0.17,0.098 0.12,0.022 0.046,0.095 0.385,0.424 0.306,0.553 0.119,0.086 0.112,0.021 0.13,-0.081 0.15,-0.18 0.177,-0.129 0.15,-0.067 0.265,-0.153 0.011,-0.099 -0.222,-0.375 -0.127,-0.304 0.03,-0.055 0.283,0.048 0.48,0.166 0.739,0.541 0.133,0 0.258,-0.041 0.281,-0.088 0.134,-0.1 0.05,0.037 0.043,0.297 -0.074,0.163 -0.336,0.158 0.019,0.078 0.087,0.101 0.151,0.068 0.184,0.192 0.127,0.219 0.111,0.101 0.122,0.048 0.306,-0.117 0.086,-0.092 0.039,-0.065 0.059,0.014 0.107,0.108 0.033,0.063 0.297,0.122 0.172,0.15 0.109,0.07 0.121,-0.068 0.471,0.119 0.13,0.1 0.041,0.166 -0.023,0.101 0.072,0.26 0.596,0.623 0.062,0.318 0.009,0.127 -0.071,0.006 -0.161,0.066 -0.206,0.024 -0.223,-0.013 -0.174,0.115 -0.164,0.188 -0.17,0.13 -0.091,0.115 -0.052,0.12 -0.572,0.338 -0.08,0.141 -0.063,0.192 -0.027,0.258 -0.04,0.232 -0.099,0.122 -0.309,0.105 -0.077,0.056 -0.058,0.118 -0.173,0.181 -0.203,0.172 -0.374,0.197 -0.401,0.06 -0.521,-0.064 -0.305,-0.077 -0.147,0.085 -0.204,0.256 -0.218,0.44 -0.091,0.331 -0.07,-0.094 -0.125,-0.35 -0.141,-0.045 -0.193,-0.033 -0.145,-0.052 -0.314,-0.202 -0.161,-0.061 -0.185,-0.016 -0.176,0.119 -0.134,0.14 -0.415,-0.002 -0.455,-0.065 -0.651,-0.466 -0.169,-0.004 -0.18,0.021 -0.285,-0.111 -0.551,-0.302 -0.259,-0.071 -0.163,0.043 -0.149,0.068 -0.107,0.008 -0.061,-0.099 -0.205,-0.121 -0.206,-0.014 -0.059,0.073 -0.07,0.665 -0.069,0.24 -0.283,-0.011 -0.101,0.112 -0.222,0.321 -0.043,0.307 -0.386,-0.059 -0.183,-0.052 -0.162,0.039 -0.178,0.17 -0.499,-0.01 -0.395,-0.101 -0.169,-0.381 -0.181,-0.152 -0.228,-0.134 -0.079,-0.031 -0.126,-0.208 -0.239,-0.258 -0.385,-0.354 -0.3,0.018 -0.111,-0.094 -0.049,-0.13 -0.125,-0.225 -0.142,-0.156 -0.171,-0.061 -0.245,-0.2 -0.328,-0.436 -0.3,-0.302 -0.29,0.005 -0.183,-0.158 -0.188,-0.208 -0.138,-0.201 -0.214,-0.49 -0.156,-0.28 -0.121,-0.173 -0.137,-0.144 -0.05,-0.115 0.168,-0.262 0.061,-0.13 0.072,-0.1 0.042,-0.106 -0.002,-0.079 -0.152,-0.26 -0.206,-0.188 -0.303,-0.19 -0.193,-0.241 -0.07,-0.22 -0.021,-0.122 -0.133,-0.164 -0.107,-0.241 0,-0.145 0.027,-0.041 0.1,0 0.112,0.099 0.158,0.19 0.13,0.278 0.079,-0.106 0.149,-0.296 0.264,-0.335 0.27,-0.192 0.243,-0.016 0.199,-0.053 0.165,-0.096 0.289,0.039 0.209,0.069 0.068,-0.043 0.085,-0.175 0.054,-0.151 0.462,-0.088 0.159,-0.292 0.089,0.001 0.103,-0.043 0.098,-0.111 0.094,-0.046 0.075,0.056 0.098,0.036 0.102,-0.07 0.152,-0.336 0.084,-0.052 0.406,-0.052 0.554,-0.198 0.28,-0.176 0.275,-0.096 0.296,-0.171 0.469,-0.166 0.022,-0.068 -0.217,-0.171 -0.073,-0.108 -0.05,-0.111 0.077,-0.123 0.103,-0.037 0.133,0.051 0.393,0.073 0.108,0.071 0.039,0.173 0.1,0.161 0.08,0.018 -0.029,0.262 0.125,0.102 0.184,0.079 0.121,-0.016 0.087,-0.106 z",
                        title: "Czech Republic",
                        id: "CZ",
                    },
                    {
                        d:
                            "m 498.21075,279.2414 -0.065,0.096 0.031,-0.687 0.307,-0.734 0.13,0.017 -0.133,0.199 -0.039,0.139 -0.054,0.277 0.024,0.144 0.701,0.04 -0.082,0.128 -0.711,0.086 -0.109,0.295 z m 4.019,-0.187 0.017,0.089 0.411,0.129 0.173,0.206 0.192,0.312 0.019,0.448 -0.246,0.322 -0.204,0.204 0.771,-0.077 0.077,0.184 0.117,0.199 0.415,-0.142 1.042,0.587 0.63,-0.286 0.161,-0.017 0.143,0.474 -0.157,0.476 -0.555,0.506 0.123,0.312 0.178,0.069 0.523,-0.066 0.829,0.307 0.173,-0.096 0.672,-0.709 0.269,-0.153 0.884,-0.109 0.161,-0.276 0.358,-0.277 0.23,-0.303 0.553,-0.579 0.572,0.104 0.334,0.111 0.366,0.056 0.333,0.617 0.844,0.679 0.775,-0.059 0.275,0.641 0.122,0.788 0.238,0.247 0.209,0.161 0.631,0.168 0.025,0.01 0.021,0.106 0.039,0.39 0.053,0.322 0.325,1.282 -0.006,0.312 -0.004,0.083 -0.119,0.437 -0.211,0.367 -0.279,0.207 -0.154,0.23 -0.028,0.253 0.351,0.443 0.731,0.633 0.295,0.54 -0.139,0.448 -0.042,0.328 0.054,0.208 0.117,0.167 0.18,0.126 0.072,0.194 -0.037,0.262 0.034,0.182 0.135,0.129 -0.013,0.05 -0.065,0.182 -0.089,0.331 -0.051,0.242 -0.206,0.328 0.063,0.279 0.161,0.328 0.123,0.165 0.039,0.156 -0.078,0.37 0.039,0.095 0.509,0.272 0.083,0.125 0.049,0.261 0.179,0.557 -0.148,0.704 -0.13,0.385 -0.29,0.609 -0.014,0.056 -0.033,0.074 -0.087,0.106 -0.121,0.016 -0.183,-0.079 -0.125,-0.102 0.029,-0.262 -0.081,-0.018 -0.1,-0.161 -0.039,-0.173 -0.108,-0.071 -0.393,-0.073 -0.134,-0.051 -0.103,0.037 -0.077,0.123 0.049,0.111 0.073,0.108 0.218,0.171 -0.022,0.068 -0.47,0.167 -0.295,0.17 -0.275,0.096 -0.28,0.176 -0.553,0.198 -0.406,0.052 -0.084,0.052 -0.151,0.335 -0.102,0.07 -0.099,-0.036 -0.074,-0.055 -0.094,0.045 -0.098,0.111 -0.103,0.043 -0.089,-10e-4 -0.159,0.292 -0.462,0.088 -0.054,0.151 -0.085,0.175 -0.068,0.043 -0.208,-0.069 -0.289,-0.039 -0.166,0.096 -0.199,0.053 -0.243,0.016 -0.271,0.191 -0.264,0.335 -0.148,0.296 -0.08,0.106 -0.129,-0.278 -0.158,-0.19 -0.112,-0.099 -0.1,0 -0.026,0.041 0,0.145 0.107,0.241 0.132,0.165 0.021,0.122 0.071,0.22 0.193,0.241 0.302,0.19 0.206,0.188 0.153,0.26 10e-4,0.08 -0.042,0.106 -0.072,0.1 -0.061,0.13 -0.168,0.262 0.05,0.115 0.137,0.144 0.121,0.173 0.156,0.28 0.214,0.49 0.138,0.201 0.188,0.208 0.184,0.158 0.29,-0.005 0.3,0.302 0.328,0.436 0.245,0.199 0.171,0.061 0.142,0.157 0.125,0.225 0.049,0.13 0.111,0.094 0.3,-0.018 0.386,0.354 0.238,0.258 0.126,0.208 -0.033,0.083 -0.016,0.259 0.004,0.274 -0.038,0.145 -0.172,0.191 -0.089,0.041 -0.048,0.041 -0.529,-0.249 -0.042,0.042 -0.033,0.031 -0.142,0.719 -0.097,0.138 -0.146,0.127 -0.302,0.124 -0.21,0.05 -0.164,0.063 -0.519,0.3 -0.233,0.18 -0.151,0.226 -0.001,0.13 0.252,0.381 0.291,0.394 10e-4,0.345 -0.128,0.258 -0.03,0.099 0.086,0.038 0.161,0.014 0.135,0.044 0.057,0.182 -0.017,0.315 -0.046,0.295 -0.048,0.124 -0.13,0.01 -0.25,-0.127 -0.195,-0.148 -0.075,-0.091 -0.004,-0.109 0.042,-0.069 -0.069,-0.134 -0.24,-0.125 -0.257,0.054 -0.189,0.083 -0.123,-0.005 -0.132,-0.12 -0.204,-0.092 -0.266,-0.061 -0.166,-0.064 -0.035,0.038 0.019,0.259 -0.051,0.113 -1.316,0.15 -0.401,0.14 -0.292,0.181 -0.216,0.078 -0.053,0.111 -0.214,0.146 -0.241,0.046 -0.059,-0.047 -0.155,0.067 -0.264,0.065 -0.171,-0.021 -0.081,-0.118 -0.163,-0.181 -0.066,-0.125 0.007,-0.081 -0.369,-0.016 -0.232,-0.096 -0.494,0.022 -0.122,-0.041 -0.025,0.043 -0.074,0.514 -0.098,0.21 -0.158,0.217 -0.203,0.121 -0.161,0.022 0.007,-0.158 0.041,-0.191 -0.117,-0.045 -0.175,-0.021 -0.084,-0.057 0.022,-0.146 -0.041,-0.085 -0.072,-0.102 -0.176,-0.131 -0.372,-0.194 -0.253,-0.097 -0.095,0.103 -0.181,0.103 -0.285,-0.034 -0.07,0.041 -0.489,-0.31 -0.469,-0.298 -0.155,0 -0.691,0.06 -0.02,-0.026 -0.121,-0.17 -0.106,-0.054 -0.064,0.028 -0.043,0.049 -0.074,-0.008 -0.31,-0.274 -0.127,-0.04 -0.176,0.037 -0.208,0.148 -0.091,0.181 0.028,0.104 0.107,0.045 0.283,-0.03 0.041,0.03 0.01,0.059 -0.031,0.057 -0.229,0.047 -0.066,0.069 -0.067,0.017 -0.043,0.011 -0.244,-0.072 -0.363,0 -0.293,0.127 -0.468,0.051 -0.643,-0.025 -0.231,-0.095 -0.141,-0.057 -0.102,-0.28 0.026,-0.415 0.153,-0.551 0.043,-0.405 -0.068,-0.258 0.091,-0.388 0.25,-0.518 0.167,-0.547 0.083,-0.578 0.121,-0.377 0.238,-0.265 0.565,-0.742 0.046,-0.056 -0.016,-0.371 -0.152,-0.053 -0.223,-0.107 -0.567,-0.132 -0.528,-0.085 -0.24,-0.105 -0.21,-0.281 -0.13,-0.004 -0.255,0.101 -0.318,0.068 -0.232,-0.059 -0.145,0.011 -0.081,0.052 -0.041,-0.046 -0.058,-0.241 -0.121,-0.063 -0.188,-0.056 -0.117,0.024 -0.081,0.12 -0.125,0.084 -0.114,-0.027 -0.359,-0.558 -0.092,-0.124 -0.023,-0.114 -0.09,-0.208 -0.214,-0.208 -0.213,-0.066 -0.106,0.023 0.012,-0.258 0.083,-0.375 0.08,-0.196 0.106,-0.16 0.113,-0.112 0.025,-0.202 -0.018,-0.191 -0.13,-0.03 -0.326,-0.141 -0.193,-0.149 -0.143,-0.187 -0.188,-0.257 -0.08,-0.262 -0.004,-0.261 0.022,-0.117 0.014,-0.081 0.151,-0.408 0.532,-0.366 -0.059,-0.369 -0.008,-0.227 -0.129,-0.148 -0.258,-0.06 -0.068,-0.103 -0.029,-0.101 0.189,-0.227 -0.229,-0.179 -0.104,-0.177 -0.318,-0.234 -0.034,-0.081 0.153,-0.685 -0.117,-0.2 -0.145,-0.102 -0.169,-0.05 -0.078,-0.095 -0.027,-0.109 0.03,-0.067 0.199,0.02 0.062,-0.071 0.474,-0.404 0.02,-0.078 -0.066,-0.044 -0.086,-0.023 -0.022,-0.085 0.003,-0.112 0.253,-0.585 0.075,-0.25 0.017,-0.177 -0.016,-0.175 -0.146,-0.275 -0.141,-0.22 -0.005,-0.175 -0.103,-0.092 -0.292,-0.471 0,-0.182 0.165,-0.142 0.231,-0.09 0.077,-0.075 0.138,-0.047 0.367,0.136 0.164,0.118 0.046,-0.024 0.148,-0.128 0.26,0.02 0.629,-0.258 0.094,-0.124 0.07,-0.132 0.006,-0.058 -0.244,-0.255 -0.007,-0.094 0.032,-0.106 0.069,-0.084 0.144,-0.057 0.153,-0.112 0.343,-0.318 0.119,-0.276 0.037,-0.3 0.007,-0.224 -0.094,-0.178 -0.095,-0.115 -0.129,0.018 -0.251,-0.009 -0.235,-0.1 -0.129,-0.162 -0.032,-0.142 0.059,-0.09 0.018,-0.11 -0.038,-0.111 0.015,-0.093 0.106,-0.075 0.743,0.002 0.056,-0.082 0.05,-0.432 0.186,-0.659 0.175,-0.368 0.029,-0.155 -0.003,-0.875 0.024,-0.445 -0.127,-0.209 -0.277,-0.229 0.059,-0.478 0.092,-0.374 0.279,-0.46 0.221,-0.126 0.965,-0.075 1.066,0.031 0.443,0.695 -0.164,0.356 0.259,0.166 0.125,-0.061 0.095,-0.31 0.063,-0.344 0.091,-0.104 0.33,0.257 0.116,0.176 0.007,0.564 0.122,-0.765 -0.091,-0.537 0.062,-0.522 0.133,-0.272 0.122,-0.173 0.782,0.187 0.864,-0.096 0.327,0.202 0.739,1.007 0.247,0.165 0.311,0.052 -0.429,-0.215 -0.896,-1.226 -0.268,-0.152 -0.412,-0.046 -0.257,-0.12 -0.162,-0.186 -0.047,-0.167 0.009,-1.245 -0.154,-0.186 -0.2,-0.064 -0.125,0.085 -0.256,0.001 -0.054,-0.283 0.063,-0.21 0.514,-0.144 0.339,-0.193 0.015,-0.341 -0.214,-0.269 -0.256,-0.494 -0.301,-0.465 -0.034,-0.542 10e-4,0 0.524,0.01 0.128,0.021 0.794,0.254 0.194,0.178 0.244,0.008 0.44,-0.166 0.329,-0.073 0.127,0.103 0.179,0.043 0.04,0 z m -3.233,0.548 -0.109,0.119 -0.268,-0.014 -0.15,-0.112 0.049,-0.119 0.142,-0.091 0.118,-0.014 0.178,0.056 0.04,0.175 z m 14.373,1.592 0.07,0.323 -0.075,0.165 -0.315,-0.274 -0.317,0.004 -0.189,0.421 -0.141,0.018 -0.489,-0.383 -0.079,-0.187 -0.016,-0.156 0.07,-0.54 -0.013,-0.17 0.154,-0.186 0.024,-0.27 0.271,-0.284 0.242,-0.011 0.076,0.241 0.116,0.166 0.406,0.186 0.061,0.084 0.037,0.117 -0.189,0.228 -0.064,0.117 0.06,0.187 0.3,0.204 z m -6.809,-0.169 -0.431,0.009 -0.165,-0.192 -0.165,-0.049 0.089,-0.237 0.116,-0.087 0.417,0.155 0.131,0.303 0.008,0.098 z m 8.218,2.237 -0.037,0.149 0.043,0.229 -0.116,-0.017 -0.348,0.054 -0.344,-0.076 -0.066,-0.285 0.055,-0.274 -0.138,-0.189 -0.127,-0.111 -0.019,-0.158 0.021,-0.165 0.593,0.442 0.483,0.401 z",
                        title: "Germany",
                        id: "DE",
                    },
                    {
                        d:
                            "m 596.26475,430.6434 -0.243,0.381 -0.311,0.488 -0.353,0.554 -0.221,0.004 -0.171,-0.032 -0.118,-0.094 -0.242,-0.103 -0.273,-0.007 -0.26,0.096 -0.44,0.119 -0.398,0.039 -0.321,0.066 -0.265,0.077 -0.24,-0.042 -0.207,-0.069 -0.046,-0.59 -0.048,-0.64 0.005,-0.501 0.073,-0.276 0.065,-0.108 0.376,-0.381 0.13,-0.156 0.429,-0.632 0.369,-0.543 0.275,-0.405 0.085,-0.08 0.116,-0.078 0.082,0.023 0.536,0.391 0.094,-0.011 0.179,-0.121 0.162,-0.418 0.114,-0.153 0.049,0.004 0.344,-0.117 0.311,-0.133 0.04,0.138 0.47,0.562 0.155,0.276 0.157,0.506 -0.082,0.281 -0.123,0.184 -0.181,0.163 -0.629,0.401 -0.699,0.255 -0.446,0.511 -0.332,-0.035 0.051,0.193 0.123,0.022 0.194,-0.037 0.385,-0.148 0.341,-0.071 0.369,-0.005 0.334,0.064 z",
                        title: "Djibouti",
                        id: "DJ",
                    },
                    {
                        d:
                            "m 502.22975,279.0544 -0.042,0 -0.179,-0.043 -0.127,-0.103 -0.329,0.073 -0.44,0.166 -0.244,-0.008 -0.194,-0.178 -0.794,-0.254 -0.128,-0.021 -0.524,-0.01 -10e-4,0 -0.025,-0.402 -0.065,-0.291 -0.184,-0.434 0.272,-0.105 -0.053,-0.85 -0.099,-0.441 -0.759,-0.455 -0.598,-0.443 0.138,-1.5 0.059,-0.406 -0.227,-0.79 0.024,-0.914 0.096,-1.448 0.19,-0.057 0.14,0.007 0.538,0.261 0.224,0.026 0.154,0.233 0.18,0.096 0.13,-0.247 0.051,-0.423 0.426,-0.549 0.299,-0.203 0.204,-0.097 0.206,0.222 0.157,0.249 0.037,-0.545 0.127,-1.043 -0.405,-0.164 -0.331,0.142 -0.327,0.662 -0.292,0.829 -0.474,0.076 -0.378,0.234 -0.341,-0.243 -0.22,-0.214 -0.005,-0.313 0.05,-0.189 0.401,-0.678 0.538,-0.653 0.542,0.006 0.395,-0.209 0.236,-0.025 0.737,0.045 0.378,-0.144 0.339,-0.3 0.732,-1.277 0.413,-0.535 0.833,-0.188 0.77,-0.62 0.215,-0.008 -0.362,0.462 -0.058,0.179 -0.044,0.273 0.259,0.592 -0.055,0.36 0.019,0.706 -0.245,0.367 -0.276,0.778 -0.119,0.114 -0.026,0.904 0.027,0.215 -0.04,0.818 0.283,0.334 0.299,0.174 0.998,-0.006 0.104,0.146 0.122,0.251 -0.089,0.426 -0.107,0.321 -0.289,0.27 -0.371,0.201 -0.231,0.009 -0.314,-0.382 -0.149,0.124 -0.154,0.195 -0.259,1.042 -0.123,0.701 -0.066,0.057 -0.146,-0.104 -0.252,-0.008 -0.319,0.166 0.164,0.148 0.173,0.257 -0.069,0.129 -0.281,0.139 -0.249,0.281 -0.104,0.212 -0.313,0.251 -0.198,0.318 0.097,0.393 0.041,0.345 0.086,0.38 -0.078,0.303 -0.389,0.434 -0.143,0.375 0.333,-0.005 0.205,0.086 0.12,0.111 0.124,0.157 -0.076,0.194 0.094,0.5 z m 3.683,-12.173 -0.114,0.121 -0.386,-0.171 0.17,-0.24 0.424,-0.111 0.249,0.037 -0.274,0.238 -0.069,0.126 z m 4.257,7.452 0.007,0.498 -0.073,0.145 -0.107,0.096 -0.28,0.101 -0.243,0.141 -0.217,0.247 -0.08,0.353 0.169,0.258 0.308,0.141 0.079,0.49 -0.254,0.241 -0.652,0.24 -0.068,0.579 0.021,0.455 -0.012,0.33 -0.052,0.456 -0.527,0.207 -0.341,-0.694 -0.003,-0.279 -0.102,-0.326 -0.019,-0.278 -0.121,-0.445 -0.499,-0.121 -0.194,-0.016 -0.271,0.083 -0.067,-0.032 -0.325,-0.61 0.054,-0.676 -0.173,-0.342 -0.024,-0.155 0.004,-0.172 -0.143,-0.142 -0.172,-0.075 -0.084,-0.383 0.198,-0.093 0.491,0.045 0.144,-0.026 0.131,-0.08 0.397,-0.632 -0.012,-0.14 0.042,-0.181 0.429,-0.067 0.191,0.245 -0.039,0.392 0.024,0.5 0.26,0.136 0.101,0.02 0.109,-0.369 0.076,-0.18 0.103,-0.101 0.035,-0.338 -0.061,-0.207 -0.13,-0.155 0.486,-0.42 0.503,-0.334 0.293,-0.018 0.294,0.082 0.274,0.112 0.148,0.097 0.083,0.156 -0.184,0.371 -0.051,0.202 0.126,0.668 z m -5.505,0.01 -0.048,0.089 -0.178,-0.093 -0.019,-0.322 0.067,-0.29 -0.079,-0.26 0.087,-0.167 0.25,0.389 0.071,0.183 -0.097,0.218 -0.054,0.253 z m 5.777,0.926 -0.264,0.211 -0.058,-0.011 -0.086,-0.289 0.14,-0.176 0.082,-0.149 0.059,0.004 0.08,0.162 0.047,0.248 z m -5.671,-0.065 0.117,0.258 0.144,0.55 0.228,0.614 -0.095,0.256 0.065,0.328 -0.065,0.341 -0.453,0.396 -0.508,0.018 -0.528,-0.191 -0.746,-0.369 -0.06,-0.207 -0.104,-0.115 -0.2,-0.631 0.004,-0.781 0.375,-0.099 0.819,-0.374 0.189,0.059 0.198,0.191 0.228,0.011 0.33,-0.271 0.062,0.016 z m 12.468,2.893 -0.104,0.083 -0.464,-0.137 -0.565,-0.339 0.083,-0.666 0.145,-0.289 1.031,0.747 0.013,0.281 -0.139,0.32 z m -12.218,1.32 -0.125,0.027 -0.169,-0.393 -0.022,-0.124 0.199,-0.252 0.128,-0.286 0.333,-0.44 0.191,-0.517 0.073,0.008 -0.085,0.461 -0.437,1.279 -0.086,0.237 z m -1.889,-0.659 -0.292,0.067 -0.149,-0.118 -0.274,-0.045 -0.098,-0.751 0.028,-0.045 0.138,0.053 0.473,0.351 0.165,0.383 0.009,0.105 z m 6.983,-0.387 -0.107,0.073 -0.431,-0.053 -0.486,0.338 -0.184,-0.107 0.07,-0.216 0.051,-0.079 0.163,-0.092 0.109,-0.134 0.043,-0.21 0.101,0.113 0.301,0.047 0.147,0.067 0.123,0.099 0.1,0.154 z m -5.795,0.575 -0.188,0.051 -0.215,-0.106 -0.351,-0.399 -0.044,-0.106 0.184,0.067 0.229,0.209 0.187,0.045 0.256,0.176 -0.058,0.063 z m 2.461,-0.214 0.497,0.302 0.336,-0.018 0.229,0.125 0.055,0.193 0.02,0.428 -0.24,0.125 -0.265,-0.042 -0.361,0.163 -1.184,-0.699 0.017,-0.585 0.047,-0.23 0.561,-0.055 0.288,0.293 z",
                        title: "Denmark",
                        id: "DK",
                    },
                    { d: "m 302.90875,419.8944 -0.263,0.063 -0.113,-0.499 -0.184,-0.363 0.032,-0.226 0.033,-0.086 0.387,0.139 0.121,0.169 0.073,0.444 z", title: "Dominica", id: "DM" },
                    {
                        d:
                            "m 273.47875,411.7714 0.012,-0.484 0.075,-0.197 -0.069,-0.207 -0.311,-0.22 -0.19,-0.284 -0.169,-0.251 0.038,-0.036 0.338,-0.011 0.119,-0.093 0.227,-0.257 0.045,-0.207 -0.018,-0.157 -0.148,-0.187 -0.058,-0.198 0.182,-0.172 0.239,-0.252 0.033,-0.097 -0.005,-0.096 -0.279,-0.265 -0.019,-0.115 0.13,-0.288 -0.013,-0.191 -0.129,-0.597 -0.061,-0.089 0.124,-0.05 0.082,-0.178 0.108,-0.159 0.144,-0.085 0.164,-0.054 0.325,0.005 0.45,0.138 0.128,-0.002 0.432,-0.126 0.358,-0.07 0.338,0.08 0.137,0.108 0.278,0.171 0.14,0.051 0.44,-0.003 0.121,0.017 0.369,0.282 0.311,0.113 0.181,0.005 0.324,-0.109 0.161,0.003 0.184,0.243 0.036,0.345 0.154,0.314 0.236,0.201 1.163,-0.084 0.259,0.165 -0.088,0.136 -0.165,0.073 -0.553,-0.032 -0.241,0.016 -0.049,0.136 -10e-4,0.126 0.323,0.03 0.317,0.063 0.324,0.102 0.328,0.069 0.37,0.045 0.365,0.073 0.608,0.247 0.671,0.56 0.18,0.128 0.119,0.175 -0.057,0.217 -0.24,0.354 -0.136,0.113 -0.198,0.07 -0.136,0.144 -0.131,0.247 -0.08,0.021 -0.094,-0.01 -0.161,-0.14 -0.115,-0.215 -0.325,-0.202 -0.385,0.026 -0.568,-0.119 -0.343,0.057 -0.344,0.014 -0.351,-0.061 -0.354,-0.021 -0.353,0.076 -0.342,0.129 -0.126,0.083 -0.22,0.201 -0.117,0.075 -0.833,0.101 -0.239,-0.148 -0.223,-0.202 -0.32,-0.027 -0.465,0.156 -0.29,0.057 -0.118,0.066 -0.035,0.077 -10e-4,0.282 -0.065,0.171 -0.453,0.646 -0.255,0.456 -0.105,0.14 -0.122,0.031 -0.223,-0.262 -0.142,-0.094 -0.176,-0.048 -0.075,-0.139 0.003,-0.198 -0.046,-0.192 -0.109,-0.151 z",
                        title: "Dominican Republic",
                        id: "DO",
                    },
                    {
                        d:
                            "m 498.96575,351.8754 0.059,0.186 0.01,0.174 -0.266,0.162 -0.175,0.094 -0.21,0.447 -0.389,0.303 -0.065,0.092 0.003,0.083 0.264,0.137 0.088,0.13 0.041,0.174 -0.118,0.622 -0.074,0.476 -0.097,0.623 0.004,0.237 0.1,0.284 0.099,0.221 0.031,0.25 -0.035,0.615 0.121,0.355 0.097,0.327 -0.231,0.407 -0.099,0.359 -0.062,0.513 -0.025,0.323 -0.149,0.298 -0.194,0.279 -0.219,0.174 -0.27,0.15 -0.311,0.197 -0.252,0.527 -0.545,0.438 -0.114,0.15 -0.051,0.35 0.013,0.485 0.096,0.385 0.261,0.568 0.229,0.624 0.062,0.313 0.088,0.119 0.322,0.204 0.557,0.276 0.103,0.113 0.276,0.428 0.262,0.766 0.082,0.506 0.51,0.402 0.471,0.37 0.452,0.325 0.491,0.352 0.071,0.108 0.163,0.745 0.163,0.738 0.178,0.811 0.18,0.812 0.212,0.953 0.12,0.539 0.145,0.653 0.171,0.764 -0.275,0.162 -0.31,0.207 0.226,0.392 0.436,0.637 0.263,0.513 0.092,0.223 0.205,0.635 0.167,0.614 0.043,0.199 0.061,0.472 -0.075,1.296 0.12,1.639 0.162,0.814 -0.255,0.733 -0.218,0.699 0.014,0.351 0.12,0.547 0.118,0.404 0.16,0.212 -0.031,0.679 -0.067,0.246 -0.49,0.355 -0.543,0.325 -0.15,0.275 -0.043,0.306 0.072,0.249 0.373,0.55 0.561,0.823 0.617,0.904 0.051,0.227 0.025,0.64 0.257,0.803 0.278,0.35 0.104,0.261 0.197,0.187 0.196,0.137 0.122,0.016 0.693,-0.218 1.185,0.36 1.121,0.366 0.082,0.072 0.245,0.463 0.401,0.755 0.297,0.603 0.266,0.539 -1.453,0.928 -1.454,0.926 -1.453,0.924 -1.453,0.921 -1.453,0.92 -1.454,0.918 -1.453,0.916 -1.453,0.913 -0.964,0.605 -0.613,0.534 -0.769,0.667 -0.726,0.662 -0.571,0.521 -0.74,0.672 -0.373,0.339 -0.825,0.749 -0.248,0.133 -1.093,0.221 -1.003,0.202 -0.926,0.187 -0.633,0.128 -0.613,0.123 -0.891,0.174 -0.636,0.125 -0.686,0.134 -0.107,0.023 -0.124,0.005 -0.093,-0.005 -0.19,-0.074 -0.229,-0.175 -0.153,-0.09 -0.038,-0.138 0.089,-0.184 0.111,-0.165 0.042,-0.13 0.076,-0.099 0.098,-0.08 0.004,-0.113 -0.081,-0.186 -0.071,-0.257 0.003,-0.467 0.002,-0.156 0,-0.056 -0.205,-0.179 -0.387,-0.198 -0.356,-0.116 -0.162,-0.04 -0.393,-0.07 -0.543,-0.125 -0.191,-0.086 -0.352,-0.435 -0.173,-0.111 -0.815,-0.074 -0.271,-0.072 -0.222,-0.103 -0.19,-0.14 -0.107,-0.239 -0.032,-0.195 -0.071,-0.093 -0.899,-0.472 -0.229,-0.16 -0.121,-0.149 -0.004,-0.221 0.024,-0.271 -0.038,-0.241 -0.038,-0.118 -0.411,-0.286 -0.919,-0.642 -0.919,-0.642 -0.919,-0.643 -0.919,-0.644 -0.919,-0.645 -0.919,-0.646 -0.919,-0.647 -0.919,-0.648 -0.919,-0.65 -0.92,-0.649 -0.918,-0.652 -0.919,-0.652 -0.919,-0.653 -0.92,-0.655 -0.919,-0.656 -0.919,-0.657 -0.777,-0.555 -0.857,-0.588 -0.637,-0.431 -0.632,-0.43 -0.68,-0.461 -0.442,-0.286 -0.527,-0.342 -0.528,-0.343 -0.528,-0.343 -0.528,-0.343 -0.528,-0.343 -0.528,-0.344 -0.527,-0.344 -0.528,-0.345 -0.528,-0.345 -0.527,-0.345 -0.528,-0.345 -0.528,-0.346 -0.528,-0.346 -0.528,-0.347 -0.528,-0.347 -0.527,-0.347 0,-0.642 0,-0.523 0,-0.77 0,-0.67 0,-0.67 0,-0.462 0,-0.482 0.014,-0.218 0.052,-0.093 0.285,-0.157 0.446,-0.358 0.165,-0.159 0.211,-0.161 0.747,-0.485 0.155,-0.136 0.726,-0.559 0.17,-0.082 0.39,-0.055 0.163,-0.105 0.219,-0.224 0.322,-0.256 0.209,-0.122 0.05,-0.022 0.134,-0.018 0.671,0.076 0.282,0.057 0.337,0.048 0.105,-0.033 0.09,-0.08 0.127,-0.179 0.027,-0.213 0.008,-0.186 0.02,-0.081 0.059,-0.037 0.147,0.014 0.196,0.025 0.401,-0.008 0.136,-0.026 0.455,-0.04 0.643,-0.121 0.51,-0.158 0.406,-0.125 0.435,-0.329 0.319,-0.347 0.331,-0.518 0.263,-0.45 0.533,-0.281 0.445,-0.171 0.255,-0.067 0.578,-0.238 0.489,-0.36 0.459,-0.338 0.351,-0.045 0.444,-0.056 0.099,-0.063 0.112,-0.12 0.006,-0.212 -0.134,-0.149 -0.162,-0.078 -0.115,-0.086 -0.114,-0.016 -0.061,-0.102 0.034,-0.188 0.017,-0.174 0.073,-0.174 -0.02,-0.246 -0.114,-0.246 -0.035,-0.177 0.008,-0.176 0.056,-0.137 0.164,-0.091 0.191,-0.035 0.268,0.044 0.463,-0.059 1.185,-0.426 0.082,-0.131 0.076,-0.295 0.085,-0.259 0.123,-0.087 0.067,-0.019 0.395,-0.07 0.559,-0.098 0.21,-0.014 0.61,0.028 0.444,0.021 0.718,0.034 0.51,0.017 0.444,0.015 0.566,0.02 0.139,-0.06 0,-0.189 -0.102,-0.352 0.062,-0.22 0.218,-0.204 0.272,-0.228 -0.127,-0.278 -0.217,-0.186 -0.303,-0.224 -0.157,-0.091 -0.275,-0.271 -0.168,-0.309 -0.114,-0.652 -0.209,-0.366 -0.152,-0.452 0.135,-0.831 -0.202,-0.503 -0.031,-0.218 -0.002,-0.257 0.062,-0.445 -0.04,-0.627 -0.238,-0.648 0.112,-0.221 0.052,-0.115 -0.017,-0.099 -0.217,-0.206 -0.092,-0.171 0.048,-0.16 0.113,-0.233 -0.01,-0.098 -0.351,-0.284 -0.592,-0.461 -0.166,-0.202 -0.081,-0.253 0.567,0.065 0.293,-0.031 0.672,-0.304 0.534,-0.411 0.415,-0.209 0.365,-0.451 0.331,-0.285 0.478,-0.308 1.379,-0.665 0.211,-0.005 0.454,0.151 0.395,-0.047 0.27,-0.233 0.291,-0.562 0.451,-0.343 0.569,-0.344 0.774,-0.329 0.507,-0.303 0.802,-0.263 2.013,-0.167 1.034,-0.149 0.703,0.034 0.71,-0.482 0.355,-0.159 1.537,-0.037 0.725,-0.353 2.748,0 0.336,0.118 0.33,0.19 0.562,0.457 0.28,0.1 0.363,-0.095 0.844,-0.433 0.952,-0.226 0.518,-0.258 0.22,-0.377 0.446,-0.139 0.251,0.29 0.987,0.292 0.606,-0.084 0.266,-0.088 -0.096,-0.433 0.641,0.115 0.492,0.209 0.515,0.418 0.334,0.083 0.608,-0.188 z",
                        title: "Algeria",
                        id: "DZ",
                    },
                    {
                        d:
                            "m 263.61075,463.2184 -0.157,0.1 -0.163,0.011 -0.217,0.031 -0.303,-0.096 -0.119,0 -0.017,0.097 0.201,0.118 0.195,0.135 0.07,0.205 0.116,0.243 0.279,0.272 0.174,0.136 0.011,0.097 -0.055,0.178 -0.014,0.148 0.096,0.683 -0.064,0.042 -0.103,0.003 -0.109,-0.003 -0.09,-0.074 -0.078,-0.044 -0.035,0.105 -0.081,0.304 -0.182,0.684 -0.159,0.599 -0.2,0.212 -0.289,0.337 -0.396,0.461 -0.574,0.668 -0.424,0.31 -0.334,0.244 -0.391,0.282 -0.504,0.364 -0.566,0.204 -0.788,0.284 -0.558,0.201 -0.411,0.14 -0.428,0.146 -0.566,0.193 -0.218,0.182 -0.363,0.446 -0.169,0.215 -0.154,0.185 -0.032,0.084 0.021,0.054 0.074,0.09 0.007,0.093 -0.102,0.058 -0.088,0.009 -0.039,-0.046 -0.029,-0.102 -0.094,-0.104 -0.109,-0.03 -0.063,0.025 -0.005,0.095 -0.143,0.457 -0.005,0.222 -0.06,0.088 0.004,0.199 -0.144,0.185 -0.063,0.165 -0.044,0.14 -0.116,0.097 -0.042,0.152 -0.107,0.324 -0.125,0.254 -0.088,0.217 -0.016,0.163 0.067,0.115 0.023,0.093 -0.06,0.167 -0.033,0.125 -0.16,0.085 -0.332,0.202 -0.129,0.139 -0.051,0.157 0.033,0.134 -0.014,0.111 -0.158,0.042 -0.056,0.095 -0.107,0.171 -0.121,0.06 -0.31,-0.091 -0.229,-10e-4 -0.177,-0.083 -0.192,-0.246 -0.158,-0.207 -0.129,-0.268 -0.04,-0.367 -0.173,-0.108 -0.17,-0.128 -0.204,0.036 -0.242,0.024 -0.134,-0.085 -0.331,-0.155 -0.282,-0.176 -0.213,-0.088 -0.163,0.042 -0.098,0.106 -0.171,0.189 -0.253,0.131 -0.114,-0.006 -0.153,-0.087 -0.028,-0.102 0.125,-0.162 0.255,-0.356 -0.283,-0.009 -0.098,-0.111 -0.014,-0.129 -0.046,-0.139 0.056,-0.167 0.148,-0.088 0.223,0.069 0.153,0.005 0.102,-0.157 0.102,-0.069 0.102,-0.051 0.042,-0.079 -0.108,-0.251 -0.032,-0.137 0.033,-0.079 -0.005,-0.157 -0.004,-0.116 -0.065,-0.102 -0.005,-0.152 -0.056,-0.083 -0.019,-0.088 -0.004,-0.102 -0.07,-0.051 -0.074,-0.052 0.061,-0.036 0.402,-0.141 0.167,-0.141 0.207,-0.128 0.178,-0.197 0.117,-0.188 0.277,-0.875 0.261,-0.552 -0.044,-0.264 -0.216,-0.357 -0.049,-0.526 0.02,-0.16 -0.027,-0.121 -0.144,0.218 0.037,0.775 -0.127,0.349 -0.178,0.084 -0.116,-0.061 0.066,-0.566 -0.13,0.103 -0.208,0.384 -0.341,0.285 -0.019,0.095 -0.083,0.117 -0.263,-0.108 -0.201,-0.117 -0.659,-0.639 -0.433,-0.134 -0.261,-0.223 -0.055,-0.094 -0.031,-0.129 0.267,-0.134 0.273,-0.18 0.027,-0.396 -0.007,-0.311 -0.202,-0.532 0.095,-0.694 -0.052,-0.272 -0.231,-0.577 0.171,-0.291 0.611,-0.212 0.196,-0.142 0.137,-0.458 0.139,-0.274 0.272,0.11 0.213,-0.013 -0.288,-0.102 -0.234,-0.413 -0.039,-0.188 0.452,-0.564 0.237,-0.147 0.291,-0.298 0.245,-0.45 0.059,-0.71 -0.101,-0.507 -0.076,-0.537 0.146,-0.139 0.372,-0.071 0.302,-0.173 0.153,-0.16 0.359,0.024 0.415,-0.248 0.663,-0.125 0.924,-0.283 0.204,-0.25 -0.092,-0.445 0.086,0.058 0.257,0.212 0.156,0.21 0.264,0.13 0.213,0.105 0.56,0.426 0.369,0.216 0.403,0.195 0.582,0.205 0.355,-0.035 0.083,0.155 0.069,0.164 0.133,0.095 0.211,0.082 0.125,0.025 0.039,0.041 0.126,0.59 0.074,0.086 0.291,0.094 0.356,0.035 0.145,-0.021 0.313,0.164 0.231,0.077 0.255,0.058 0.173,0.017 0.08,-0.025 0.029,-0.06 0.142,0.011 0.211,0.076 0.305,0.016 0.189,-0.072 0.026,-0.119 0.013,-0.209 0.07,-0.073 0.217,-0.122 0.113,0.025 0.569,0.262 0.117,0.09 0.144,0.183 0.267,0.27 0.289,0.172 0.447,0.073 0.431,0.282 0.512,0.195 z m -10.173,-3.789 -0.158,0.021 -0.073,-0.133 0.192,-0.155 0.066,-0.03 -0.027,0.297 z m -34.697,3.422 0.174,0.18 0.095,0.512 0.563,0.54 0.07,0.302 -0.05,0.14 0.026,0.055 0.271,0.213 0.177,0.224 -0.297,0.525 -0.633,0.221 -0.675,-0.007 -0.133,-0.057 -0.181,-0.201 -0.033,-0.177 0.104,-0.171 0.349,-0.26 0.532,-0.232 0.066,-0.178 -0.213,-0.173 -0.147,-0.344 -0.336,-0.241 -0.167,-0.735 -0.112,-0.037 -0.228,0.101 -0.112,-0.089 -0.019,-0.047 0.246,-0.167 0.051,-0.12 0.364,-0.058 0.156,0.096 0.092,0.185 z m 1.96,1.002 -0.13,0.084 -0.529,-0.097 -0.165,-0.162 0.133,-0.221 0.112,-0.088 0.316,0.082 0.321,0.247 -0.058,0.155 z m -2.391,0.353 -0.282,0.049 -0.237,-0.096 -0.101,-0.148 -0.021,-0.223 0.021,-0.074 0.523,-0.081 0.171,0.187 -0.002,0.274 -0.072,0.112 z m 3.062,0.866 -0.146,0.005 -0.435,-0.27 0.029,-0.265 0.174,-0.178 0.563,-0.091 0.236,0.168 -0.021,0.317 -0.192,0.232 -0.152,0.042 -0.056,0.04 z m 2.571,0.389 -0.331,0.115 -0.114,-0.052 -0.071,-0.057 -0.017,-0.069 0.183,-0.172 0.178,-0.093 0.16,-0.198 0.293,-0.118 0.086,0.027 0.058,0.041 0.022,0.066 -0.1,0.16 -0.178,0.112 -0.169,0.238 z m -2.821,1.196 -0.113,0.005 -0.155,-0.12 0.119,-0.218 0.127,0.053 0.093,0.063 0.055,0.084 -0.126,0.133 z m 28.886,4.556 -0.054,0.108 -0.267,-0.01 -0.077,-0.035 0.002,-0.123 0.063,-0.391 0.073,-0.164 0.219,-0.159 0.183,-0.077 0.234,0.014 0.248,0.145 -0.292,0.262 -0.163,0.04 -0.063,0.034 -0.106,0.356 z",
                        title: "Ecuador",
                        id: "EC",
                    },
                    {
                        d:
                            "m 570.87175,370.8384 0.041,0.099 0.092,0.274 0.233,0.696 0.204,0.544 0.249,0.752 0.078,0.288 0.033,0.199 0.362,0.824 0.215,0.675 0.157,0.548 0.222,0.798 0.096,0.278 -0.157,0.145 -0.314,0.517 -0.335,1.637 -0.479,1.273 -0.054,0.795 -0.077,0.286 -0.228,0.402 -0.276,0.393 -0.491,-0.203 -0.8,-0.692 -0.466,-0.658 -0.5,-0.426 -0.472,-0.565 -0.129,-0.407 0.005,-0.262 -0.206,-0.639 -0.153,-0.303 -0.576,-0.681 -0.165,-0.364 -0.126,-0.161 -0.127,-0.23 -0.209,-0.889 -0.228,-0.566 -0.26,0.157 0.046,0.238 -0.227,0.329 -0.137,0.381 0.105,0.311 0.471,0.473 0.095,0.207 0.11,0.447 -0.018,0.607 0.076,0.205 0.353,0.45 0.126,0.267 0.076,0.23 0.117,0.208 0.35,0.39 0.503,0.742 0.477,0.5 0.345,0.241 0.146,0.241 0.033,0.621 -0.026,0.296 0.303,0.557 0.112,0.281 0.292,0.229 0.134,0.261 0.123,0.425 0.185,1.253 0.254,0.307 0.785,1.639 0.662,1.033 0.32,0.77 0.489,0.934 0.957,2.044 0.569,0.628 0.227,0.353 0.412,0.271 0.446,0.392 -0.425,-0.038 -0.108,0.023 -0.149,0.067 -0.071,0.238 -0.031,0.194 0.052,1.025 0.117,0.522 0.374,0.985 0.279,0.295 0.136,0.191 0.19,0.139 0.887,0.336 0.519,0.708 1.166,0.894 0.114,0.247 0.003,0.057 -0.921,0.001 -0.921,0 -0.921,0 -0.921,0 -0.92,0 -0.922,10e-4 -0.92,0 -0.921,0 -0.921,0 -0.921,0 -0.921,0 -0.92,0 -0.921,0.001 -0.921,0 -0.921,0 -0.921,0 -0.525,0 0.09,-0.268 0.055,-0.189 -0.062,-0.132 -0.179,-0.033 -0.117,0.042 -0.275,0.561 -0.144,0.022 -0.327,0 -1.072,0 -1.073,0 -1.072,0 -1.072,-10e-4 -1.072,0 -1.072,0 -1.072,0 -1.072,0 -1.072,-0.001 -1.073,0 -1.072,0 -1.072,0 -1.072,0 -1.072,0 -1.073,-10e-4 -1.072,0 0,-0.676 0,-0.678 0,-0.679 0,-0.679 0,-0.681 0,-0.682 0,-0.683 0,-0.684 0,-0.686 0,-0.686 0,-0.688 0,-0.69 0,-0.69 0,-0.692 0,-0.693 0,-0.694 0,-0.696 0,-0.697 0,-0.698 0,-0.699 0,-0.702 0,-0.702 0,-0.704 0,-0.705 0,-0.707 0,-0.708 0,-0.71 0,-0.711 0,-0.713 0,-0.714 0,-0.716 0,-0.717 -0.024,-0.134 -0.156,-0.489 -0.141,-0.622 -0.154,-0.766 -0.02,-0.249 -0.258,-0.792 -0.024,-0.225 0.065,-0.16 0.424,-0.669 0.128,-0.326 0.107,-0.391 0.036,-0.318 -0.125,-0.488 -0.146,-0.439 -0.049,-0.45 -0.021,-0.443 0.217,-0.303 0.26,-0.284 0.097,-0.174 0.154,-0.196 0.108,-0.092 0.211,0.398 0.44,0.068 1.434,-0.354 1.583,0.357 0.873,0.136 1.346,0.303 0.819,0.54 0.225,0.068 0.589,-0.011 0.386,0.319 1.536,0.153 0.82,0.351 0.465,0.28 0.279,0.086 0.247,-0.014 0.333,-0.105 0.421,-0.197 0.457,-0.274 0.949,-0.705 0.336,-0.124 0.219,0.033 0.267,-0.01 0.111,-0.191 0.141,-0.131 0.088,-0.149 0.144,-0.18 0.494,-0.05 0.989,-0.308 -0.111,0.146 -0.901,0.345 0.386,0.043 0.395,-0.118 0.451,-0.075 0.082,-0.147 0.059,-0.275 0.086,-0.039 0.312,0.052 0.927,0.424 0.231,0.008 0.653,-0.231 0.139,-0.049 0.212,0.128 0.482,0.527 -0.168,-0.011 -0.516,-0.452 -0.046,0.226 -0.294,0.396 0.367,0.171 0.299,0.064 0.16,0.221 0.101,0.196 0.295,-0.086 0.211,-0.267 -0.11,-0.149 -0.074,-0.154 0.096,-0.004 0.205,0.127 0.587,0.507 0.198,0.105 0.228,-0.018 0.477,-0.142 0.133,0.022 0.64,-0.187 0.075,0.137 0.106,0.136 0.516,-0.152 0.809,0.002 0.663,-0.165 0.768,-0.402 z",
                        title: "Egypt",
                        id: "EG",
                    },
                    {
                        d:
                            "m 553.51175,254.9564 0.149,0.171 0.188,0.276 0.051,0.158 -0.064,0.093 -0.188,0.079 -0.043,0.085 -0.083,0.143 -0.22,0.026 -0.113,0.106 -0.135,0.465 -0.258,0.768 -0.381,0.582 -0.305,0.318 -0.136,0.244 -0.085,0.292 -0.02,0.293 0.292,1.6 -0.003,0.288 -0.069,0.295 -0.05,0.299 0.041,0.259 0.193,0.442 0.205,0.658 0.083,0.419 0.136,0.153 0.131,0.113 0.027,0.071 -0.004,0.073 -0.068,0.083 -0.591,0.219 -0.077,0.185 -0.064,0.207 -0.258,0.305 -0.079,0.284 -0.049,0.325 -0.006,0.116 -0.071,0.014 -0.392,-0.067 -0.432,-0.211 -0.189,-0.159 -0.186,0.002 -0.225,0.104 -0.806,0.301 -0.198,-0.07 -0.46,-0.296 -0.233,-0.323 -0.519,-0.644 -0.042,-0.154 -0.068,-0.123 -0.554,-0.16 -0.205,-0.239 -0.17,-0.033 -0.25,-0.12 -0.649,-0.511 -0.161,-0.048 -0.039,0.086 0.011,0.121 -0.041,0.07 -0.083,-0.002 -0.15,-0.188 -0.18,-0.166 -0.561,0.312 -0.203,0.083 -0.178,0.019 -0.889,0.408 -0.271,0.22 -0.112,-0.023 0.026,-0.207 0.37,-1.037 0.066,-0.827 0.135,-0.114 0.04,-0.115 -0.058,-0.265 -0.384,-0.17 -0.155,0.025 -0.14,0.285 -0.145,0.205 -0.339,0.125 -0.292,-0.216 -0.683,-0.289 -0.172,-0.386 -0.041,-0.389 -0.361,-0.376 -0.15,-0.445 0.06,-0.311 0.328,-0.205 0.093,-0.178 -0.413,0.028 -0.084,-0.043 -0.018,-0.16 -0.183,-0.548 0.162,-0.216 0.071,-0.21 -0.133,-0.179 0.035,-0.205 0.104,-0.207 -0.063,-0.481 0.41,-0.255 0.398,-0.18 0.845,-0.092 -0.083,-0.442 0.341,-0.02 0.575,-0.533 0.57,0.094 0.825,-0.366 1.589,0.005 0.217,-0.212 -0.038,-0.213 0.005,-0.227 0.299,0.063 0.5,-0.04 1.872,0.447 0.461,0 0.637,0.453 0.344,0.117 1.013,0 1.563,0.2 0.307,-0.306 0.033,-0.078 z m -14.281,3.592 -0.23,0.267 -0.137,-0.106 -0.072,-0.128 -0.297,0.604 -0.334,0.103 -0.195,-0.119 0.018,-0.225 -0.19,-0.593 -0.291,-0.174 -0.409,-0.016 -0.296,-0.245 1.141,-0.167 0.118,-0.284 0.232,-0.298 0.174,-0.032 0.148,0.069 0.028,0.231 0.037,0.092 0.517,0.13 0.202,0.388 0.076,0.465 -0.24,0.038 z m 1.178,1.491 -0.233,0.056 -0.553,-0.382 0.128,-0.259 0.158,-0.102 0.47,0.159 0.066,0.393 -0.036,0.135 z m -2.038,-0.381 0.199,0.13 0.184,-0.041 0.187,-0.091 0.404,0.085 0.922,0.656 0.085,0.175 -0.551,0.08 -0.125,0.2 -0.132,0.14 -0.156,0.045 -0.266,0.281 -0.359,0.269 -0.075,0.161 -0.651,-0.03 -0.355,0.102 -0.287,0.3 -0.118,0.578 -0.21,0.45 -0.214,0.162 -0.223,0.025 -0.053,-0.168 0.021,-0.168 0.469,-0.636 0.098,-0.207 -0.234,-0.092 -0.196,-0.222 -0.428,-0.26 -0.077,-0.209 0.102,-0.016 0.094,-0.06 0.114,-0.176 0.053,-0.202 -0.342,-0.592 0.174,-0.092 0.218,0.021 0.223,0.172 0.245,-0.202 0.104,-0.03 0.171,0.072 0.173,-0.392 0.411,-0.129 0.204,-0.121 0.197,0.032 z",
                        title: "Estonia",
                        id: "EE",
                    },
                    {
                        d:
                            "m 450.52575,383.7674 10e-4,0.523 0,0.621 0.001,0.619 10e-4,0.704 0,0.7 0,0.509 0,0.354 -0.571,0 -0.523,0 -0.523,0 -0.522,0 -0.523,0 -0.523,0 -0.523,0 -0.523,0 -0.523,0 -0.523,0 -0.523,0 -0.523,0 -0.523,0 -0.523,0 -0.523,0 -0.522,0 -0.523,0 -0.42,0 0,0.371 0,0.421 0,0.422 0,0.421 0,0.421 0,0.42 0,0.42 0,0.419 0,0.419 0,0.418 0,0.418 0,0.418 0,0.416 0,0.417 0,0.416 0,0.416 0,0.415 0,0.37 -0.02,0.331 -0.168,0.098 -0.401,0.176 -0.412,0.181 -0.523,0.083 -0.172,0.059 -0.334,0.238 -0.439,0.313 -0.38,0.271 -0.251,0.352 -0.091,0.193 -0.037,0.203 0.029,0.194 0.137,0.388 0.037,0.196 0.021,0.341 0.023,0.37 0.025,0.399 0.025,0.399 0.026,0.423 0.027,0.424 0.027,0.425 0.02,0.316 0.025,0.398 -0.425,0.001 -0.643,0 -0.644,10e-4 -0.644,0.001 -0.643,10e-4 -0.643,10e-4 -0.644,0.001 -0.644,0 -0.643,10e-4 -0.644,0.001 -0.643,10e-4 -0.643,10e-4 -0.644,0.001 -0.644,10e-4 -0.643,0 -0.644,0.001 -0.643,10e-4 -0.36,0.001 -0.116,0.559 -0.103,0.401 -0.06,0.327 0.044,0.276 -0.142,-0.151 0.25,-1.556 0.018,-0.131 0.204,-1.439 0.385,-0.782 0.307,-0.345 0.476,-0.179 0.437,-0.788 0.153,-0.727 0.287,-0.335 0.09,-0.262 -0.113,-0.2 0.271,-0.393 0.328,-0.602 0.152,-0.387 0.383,-0.599 0.047,-0.133 -0.034,-0.15 -0.151,0.127 -0.161,0.222 -0.191,0.175 0.078,-0.215 0.15,-0.316 0.341,-0.332 0.538,-0.365 1.116,-1.243 0.42,-0.215 0.378,-0.525 0.135,-0.467 0.037,-1.074 0.135,-0.568 0.246,-0.443 0.294,-0.809 0.224,-0.361 0.146,-0.74 0.159,-0.281 0.285,-0.135 0.404,-0.369 0.607,-0.229 0.719,-0.481 0.337,-0.288 0.225,-0.43 0.241,-0.858 0.431,-0.905 0.221,-0.684 12.234,-0.014 0.002,0.001 0,-0.001 0.377,0 0,0.523 z",
                        title: "Western Sahara",
                        id: "EH",
                    },
                    {
                        d:
                            "m 595.90175,427.1954 -0.312,0.133 -0.344,0.117 -0.049,-0.004 -0.114,0.153 -0.163,0.418 -0.179,0.122 -0.094,0.011 -0.535,-0.391 -0.083,-0.022 -0.116,0.077 -0.084,0.08 -0.249,-0.297 -0.182,-0.262 -0.254,-0.313 -0.247,-0.141 -0.265,-0.177 -0.26,-0.411 -0.265,-0.453 -0.393,-0.371 -0.735,-0.535 -0.675,-0.678 -0.516,-0.709 -0.333,-0.37 -0.142,-0.094 -0.688,-0.232 -0.48,-0.325 -0.37,-0.268 -0.227,-0.072 -0.22,-0.009 -0.469,0.053 -0.39,-0.168 -0.164,0 -0.261,-0.049 -0.205,-0.06 -0.241,0.072 -0.494,0.12 -0.203,-0.026 -0.11,-0.167 -0.065,-0.128 -0.172,-0.133 -0.142,0 -0.079,0.119 -0.516,0.301 -0.863,0.167 -0.205,-0.012 -0.153,-0.121 -0.436,-0.517 -0.125,-0.084 -0.099,-0.008 -0.202,-0.061 -0.189,-0.099 -0.166,-0.212 -0.167,-0.121 -0.179,0.415 -0.314,0.724 -0.168,0.388 -0.217,0.499 -0.068,0.015 -0.111,-0.036 -0.431,-0.622 -0.271,-0.234 -0.202,0.022 -0.147,0.115 -0.093,0.208 -0.101,0.128 -0.109,0.05 -0.235,-0.025 -0.361,-0.099 -0.373,0.021 -0.384,0.142 -0.051,0.004 -0.09,-0.828 -0.06,-0.554 -0.064,-0.587 -0.06,-0.555 0.267,-0.341 0.124,-0.324 0.318,-1.054 0.127,-0.21 0.25,-0.565 0.035,-0.164 0.247,-0.714 -0.023,-0.475 -0.05,-0.48 0.135,-0.285 0.12,-0.228 -0.008,-0.192 0.054,-0.449 0.039,-0.112 0.147,-0.007 0.303,0.058 0.223,-0.045 0.257,0 0.198,-0.014 0.117,-0.137 0.161,-0.524 0.104,-0.105 0.081,-0.032 0.227,-0.097 0.194,-0.153 0.158,-0.109 0.059,-0.022 0.167,-0.014 0.167,-0.064 0.077,-0.074 0.211,-0.059 0.207,0.033 0.139,-0.065 0.093,-0.042 0.105,-0.003 0.097,-0.061 0.039,-0.093 0.063,-0.06 0.161,-0.136 0.074,-0.099 0.033,-0.1 0.033,-0.079 0.071,-0.134 0.282,-0.336 0.243,-0.195 0.848,1.692 0.344,0.998 0.304,1.039 0.225,1.557 0.214,0.792 0.346,0.39 0.237,0.737 0.203,0.028 0.147,0.202 0.252,0.691 0.181,0.257 0.095,-0.221 -0.011,-0.127 -0.071,-0.213 0.065,-0.274 0.141,-0.164 0.322,0.224 0.176,0.169 0.047,0.339 0.074,0.188 0.336,0.398 0.284,0.116 0.368,0.029 0.308,0.087 0.247,0.146 0.463,0.404 1.059,0.354 0.851,1.084 0.501,0.75 1.647,1.135 0.285,0.543 0.148,0.532 0.346,-0.025 0.594,0.581 0.173,0.441 0.486,0.16 0.083,-0.261 0.235,0.214 0.1,0.335 z m -8.532,-9.715 0.094,0.28 -0.274,-0.107 -0.045,-0.058 0.12,-0.111 0.026,-0.068 0.079,0.064 z m 0.181,1.12 0.116,0.154 0.081,-0.015 0.064,-0.051 0.045,-0.109 0.443,0.215 -0.025,0.143 -0.265,0.007 -0.305,-0.061 -0.283,0.021 -0.337,-0.062 -0.078,-0.243 0.215,0.117 0.111,-0.029 0.02,-0.031 -0.152,-0.164 -0.214,-0.033 0.015,-0.129 0.096,-0.051 0.059,-0.063 -0.123,-0.177 0.241,0.04 0.152,0.107 0.1,0.125 0.024,0.289 z",
                        title: "Eritrea",
                        id: "ER",
                    },
                    {
                        d:
                            "m 469.86075,328.1734 0.004,0.134 0.11,0.184 0.114,0.068 0.24,0.094 0.185,0.013 0.252,0.044 0.171,0.106 0.01,0.165 -0.043,0.184 -0.104,0.169 -0.059,0.129 0.055,0.074 0.09,0.058 0.097,0.016 0.066,-0.019 0.05,-0.102 0.095,-0.125 0.053,-0.016 -0.004,0.071 0.045,0.088 0.309,0.147 0.678,0.274 0.266,0.005 0.215,0.032 0.063,0.115 0.432,0.422 0.103,-0.011 0.192,0.01 0.232,-0.034 0.168,-0.079 0.11,0.013 0.122,0.082 0.142,0.071 0.184,0.139 0.164,0.171 0.113,0.056 0.681,-0.115 0.152,0.101 0.161,-10e-4 0.181,-0.026 0.394,0.053 0.32,-0.013 0.029,-0.042 0.027,-0.38 0.051,-0.135 0.076,-0.036 0.189,0.027 0.689,0.225 0.284,0.141 0.273,0.11 0.238,0.012 0.158,0.074 0.221,0.36 -0.038,0.181 0.02,0.067 0.023,0.125 -0.006,0.139 0.058,0.091 0.105,0.011 0.134,-0.027 0.147,-0.054 0.258,-0.154 0.077,-0.025 0.432,0.175 0.191,0.117 0.066,0.127 0.099,0.13 0.129,0.019 0.184,-0.123 0.287,-0.132 0.488,0.116 0.543,0.168 0.235,0.02 0.008,-0.082 0.043,-0.117 0.089,-0.059 0.134,-0.017 0.186,-0.062 0.212,-0.102 0.221,-0.042 0.231,0.076 0.279,0.062 0.167,-0.001 0.08,0.24 0.135,0.091 0.053,0.208 -0.248,0.108 -0.146,0.015 -0.045,0.355 0.07,0.1 0.139,0.094 0.038,0.109 0.028,0.52 -0.284,0.313 -0.398,0.351 -1.948,1.125 -0.464,0.543 -0.177,0.125 -1.448,0.341 -1.012,0.364 -0.485,0.132 -0.606,0.631 -0.287,0.254 0.229,0.07 0.267,0.301 -0.09,0.133 -0.389,0.206 -0.17,0.063 -0.092,-0.033 -0.087,0.028 -0.652,1.085 -0.576,0.778 -0.324,0.338 -0.332,0.503 -0.707,1.293 -0.005,0.372 0.348,1.279 0.2,0.335 0.28,0.281 0.53,0.239 0.131,0.235 -0.183,0.224 -0.53,0.397 -0.922,0.536 -0.392,0.422 -0.083,0.406 -0.27,0.183 -0.102,0.567 -0.164,0.375 -0.031,0.127 -0.174,0.284 -0.023,0.207 0.285,0.284 -0.141,0.123 -0.141,0.054 -0.325,0.033 -1.093,0.036 -0.879,0.613 -0.439,0.542 -0.398,1.005 -0.483,0.591 -0.213,0.109 -0.331,-0.259 -0.414,-0.04 -0.401,0.086 -0.21,0.206 -0.328,0.115 -0.321,-0.099 -0.694,-0.054 -0.309,0.01 -0.483,0.167 -0.414,-0.111 -0.699,-0.057 -1.513,0.133 -0.191,0.062 -0.189,0.248 -0.482,0.427 -0.733,0.015 -0.663,0.272 -0.166,0.174 -0.278,0.479 -0.087,0.349 -0.058,0.003 -0.072,-0.086 -0.102,0.028 -0.053,0.266 -0.249,0.121 -0.208,0.044 -0.513,-0.215 -0.428,-0.323 -0.224,-0.023 -0.364,-0.504 -0.157,-0.321 -0.111,-0.348 0.023,-0.133 -0.031,-0.111 -0.323,-0.141 -0.079,-0.32 0.236,-0.417 0.193,-0.177 0.12,-0.051 -0.292,0.018 -0.211,0.268 -0.27,-0.43 -1.101,-0.839 0.071,-0.193 -0.012,-0.104 -0.185,0.225 -0.126,0.058 -0.563,-0.036 -0.648,0.103 -0.171,-0.874 -0.081,-0.336 -0.021,-0.218 0.167,-0.504 0.183,-0.206 0.243,-0.425 0.3,-0.354 0.317,-0.084 0.14,-0.052 0.117,-0.274 0.066,-0.234 -0.048,-0.023 -0.37,0.048 -0.664,-0.985 0.021,-0.157 0.083,-0.233 0.055,-0.295 0.014,-0.233 0.173,-0.201 0.265,-0.202 0.223,-0.288 0.112,-0.281 0.023,-0.256 -0.126,-0.183 -0.363,-0.101 -0.375,-0.732 -0.083,-0.459 -0.077,-0.048 -0.231,-0.209 -0.222,-0.394 -0.032,-0.062 0.229,-0.069 0.944,-0.003 0.197,-0.087 0.03,-0.03 0.172,-0.307 0.18,-0.505 0.042,-0.309 -0.057,-0.128 -0.313,-0.313 -0.014,-0.092 0.05,-0.148 0.186,-0.158 0.251,-0.18 0.137,-0.155 -0.033,-0.122 -0.073,-0.127 -0.012,-0.119 0.046,-0.146 0.017,-0.5 0.032,-0.128 -0.049,-0.456 -0.061,-0.373 -0.199,-0.484 0.036,-0.107 0.092,-0.09 0.301,-0.168 0.24,-0.396 0.349,-0.332 0.457,-0.267 0.32,-0.297 0.126,-0.228 0.089,-0.06 -0.026,-0.106 -0.06,-0.154 -0.182,-0.151 -0.235,-0.086 -0.261,0.004 -0.162,-0.031 -0.047,-0.118 0.018,-0.32 -0.014,-0.317 -0.05,-0.146 -0.121,-0.11 -0.239,0.029 -0.207,-0.09 -0.157,-0.021 -0.091,0.071 -0.463,-0.021 -0.193,-0.051 -0.135,-0.063 -0.086,0.035 -0.049,0.062 -0.008,0.097 -0.032,0.128 -0.166,0.116 -0.379,0.115 -0.306,-0.009 -0.281,-0.082 -0.09,-0.061 -0.135,-0.054 -0.571,0.067 -0.069,-0.049 -0.197,0.119 -0.29,0.142 -0.163,0.008 -0.059,-0.03 -0.021,-0.063 -0.122,-0.221 0.032,-0.117 0.234,-0.343 -0.026,-0.082 -0.096,-0.111 -0.086,-0.16 -0.025,-0.083 -0.149,-0.014 -0.159,0.084 -0.605,0.173 -0.145,0.063 -0.262,0.166 -0.265,0.254 -0.211,0.053 -0.073,-0.075 -0.025,-0.596 0.322,-0.397 0.229,-0.24 -0.107,-0.049 -0.243,0.007 0.017,-0.186 0.114,-0.09 0.11,-0.203 -0.129,-0.087 -0.101,-0.134 0.006,-0.35 0.028,-0.142 -0.033,-0.154 -0.495,0.208 -0.127,-0.031 -0.005,-0.26 0.274,-0.397 0.028,-0.122 -0.321,-0.059 -0.24,-0.195 -0.146,-0.175 -0.156,-0.251 -10e-4,-0.226 0.162,-0.529 0.231,-0.154 0.2,-0.095 0.423,-0.367 0.583,0.068 0.361,-0.079 0.324,-0.188 0.186,-0.042 0.299,-0.164 -0.01,-0.222 -0.103,-0.165 0.09,-0.155 0.335,-0.19 0.372,-0.252 0.427,-0.049 0.434,-0.223 0.291,0.144 0.255,-0.049 0.293,0.171 0.385,0.391 0.564,0.157 0.45,-0.123 0.795,-0.026 0.397,0.052 0.706,-0.097 0.404,0.035 0.655,-0.194 0.507,0.242 0.983,0.113 0.59,0.198 1.634,0.332 0.59,0.004 0.835,-0.187 0.354,-0.14 0.324,0.083 0.475,-0.161 0.228,0.033 0.297,0.229 1.045,0.309 0.274,-0.262 0.204,-0.057 0.752,0.16 0.758,0.326 0.394,0.023 0.576,-0.089 0.457,-0.214 0.092,-0.034 z m 17.085,13.342 -0.051,0.042 -0.863,-0.421 -0.282,-0.047 -0.069,-0.064 0.008,-0.219 0.022,-0.097 0.578,-0.044 0.467,0.156 0.251,0.42 0.019,0.072 -0.08,0.202 z m -3.223,0.188 0.269,0.121 0.284,-0.109 0.151,0.034 0.149,0.059 0.036,0.23 -0.132,0.256 -0.185,0.26 -0.156,0.285 -0.136,0.327 -0.253,0.193 -0.229,0.116 -0.484,-0.243 -0.282,-0.061 -0.084,-0.091 -0.067,-0.362 -0.127,-0.115 -0.187,-0.051 -0.164,0.093 -0.214,0.191 -0.114,-0.191 -0.181,-0.036 -0.068,-0.115 0.003,-0.148 1.161,-0.879 0.336,-0.195 0.713,-0.227 0.109,0.034 -0.093,0.134 0.007,0.061 0.089,0.065 -0.021,0.104 -0.09,0.09 -0.04,0.17 z m -4.772,3.15 -0.102,0.221 -0.427,-0.078 -0.094,-0.089 0.092,-0.25 0.123,-0.03 0.008,-0.178 0.129,-0.179 0.606,-0.145 0.137,0.122 0.029,0.175 -0.362,0.382 -0.139,0.049 z m 0.418,0.885 -0.063,0.047 -0.186,-0.043 -0.279,0 -0.011,-0.145 0.043,-0.101 0.054,-0.103 0.17,0.202 0.269,0.038 0.003,0.105 z m -42.967,32.885 -0.191,0.21 -0.213,-0.076 0.102,-0.46 0.099,-0.137 0.388,-0.201 0.323,-0.081 0.095,-0.214 0.106,-0.083 0.114,0.127 -0.086,0.148 -0.068,0.462 -0.215,0.148 -0.454,0.157 z m -11.558,1.331 -0.07,0.024 -0.064,-0.251 -0.333,-0.616 0.202,-0.275 0.368,-0.007 0.149,0.192 0.05,0.198 -0.07,0.114 0.021,0.231 -0.039,0.149 -0.214,0.241 z m 10.208,1.027 -0.381,0.359 -0.381,-0.083 -0.065,-0.059 0.382,-0.091 0.347,-0.273 0.223,-0.605 0.349,-0.67 0.07,-0.284 0.138,-0.111 0.19,-0.01 0.082,0.021 0.084,0.149 -10e-4,0.337 -0.099,0.559 -0.183,0.494 -0.755,0.267 z m -5.999,-0.667 -0.235,0.724 -0.219,0.283 -0.13,0.095 -0.323,0.079 -0.384,-0.449 -0.2,-0.457 -0.11,-0.147 0.175,-0.116 0.255,0.02 0.548,-0.097 0.111,-0.039 0.557,-0.462 0.548,-0.057 0.013,0.152 -0.606,0.471 z m -2.386,1.133 -0.115,0.027 -0.136,-0.079 -0.144,-0.251 0.097,-0.186 0.089,-0.085 0.124,0.013 0.238,0.137 0.073,0.142 0.007,0.088 -0.233,0.194 z m 5.007,-0.397 -0.017,0.244 0.066,0.246 -0.017,0.373 -0.134,0.202 -0.344,0.201 -0.271,-0.036 -0.153,-0.081 -0.272,-0.327 -0.006,-0.338 0.249,-0.22 0.107,-0.285 0.646,0.054 0.056,-0.055 0.048,-0.016 0.042,0.038 z m -6.981,1.068 -0.271,0.515 -0.342,-0.192 -0.083,-0.064 -0.069,-0.106 0.329,-0.021 0.333,-0.259 0.103,0.127 z",
                        title: "Spain",
                        id: "ES",
                    },
                    {
                        d:
                            "m 582.75275,422.2614 0.205,0.012 0.863,-0.167 0.516,-0.301 0.078,-0.119 0.142,0 0.172,0.133 0.065,0.128 0.11,0.168 0.203,0.026 0.493,-0.119 0.242,-0.072 0.204,0.059 0.261,0.049 0.164,0 0.39,0.169 0.468,-0.054 0.221,0.009 0.227,0.072 0.369,0.268 0.481,0.325 0.688,0.232 0.142,0.094 0.332,0.37 0.516,0.709 0.675,0.678 0.736,0.535 0.393,0.37 0.265,0.453 0.26,0.411 0.265,0.177 0.246,0.14 0.255,0.313 0.182,0.262 0.248,0.297 -0.275,0.405 -0.369,0.543 -0.429,0.632 -0.13,0.156 -0.376,0.381 -0.065,0.108 -0.073,0.276 -0.005,0.501 0.048,0.64 0.046,0.59 0.207,0.069 0.24,0.042 0.265,-0.077 0.321,-0.066 0.398,-0.039 0.44,-0.119 0.26,-0.096 0.273,0.007 0.242,0.103 0.118,0.094 0.171,0.032 0.221,-0.004 -0.047,0.111 -0.121,0.162 -0.149,0.162 -0.131,0.168 -0.291,0.47 -0.009,0.06 0.036,0.093 0.157,0.214 0.164,0.347 0.092,0.318 0.071,0.154 0.199,0.176 0.287,0.363 0.152,0.245 0.317,0.131 0.103,0.31 0.237,0.456 0.256,0.364 0.248,0.285 0.276,0.11 0.111,0.009 0.579,0.527 0.441,0.401 0.109,0.064 0.795,0.263 0.915,0.302 0.734,0.242 0.935,0.308 0.922,0.305 0.865,0.29 1.214,0.408 0.978,0.329 0.772,0.26 0.164,0.081 0.919,0 0.933,0 0.955,0 -0.692,0.669 -0.783,0.757 -0.822,0.794 -0.53,0.511 -0.839,0.811 -0.699,0.674 -0.719,0.736 -0.65,0.666 -0.846,0.922 -0.548,0.596 -0.858,0.935 -0.539,0.586 -0.082,0.034 -0.771,-0.044 -0.75,-0.044 -0.958,-0.055 -0.11,0.002 -0.279,0.055 -0.169,0.054 -0.69,0.158 -0.127,0.041 -0.573,0.251 -0.585,0.296 -0.308,0.228 -0.238,0.33 -0.102,0.235 -0.107,0.103 -0.182,0.09 -1.225,0.223 -0.356,0.03 -0.573,0.178 -0.306,0.298 -0.087,0.15 -0.411,-0.004 -0.718,0.044 -0.307,0.048 -0.15,0.008 -0.275,-10e-4 -0.226,-0.054 -0.15,-0.081 -0.186,-0.183 -0.416,-0.371 -0.302,-0.232 -0.663,0.267 -0.597,0.265 -0.847,0.377 -0.483,0.27 -0.145,0.271 -0.373,0.493 -0.333,0.303 -0.125,0.037 -0.755,-0.063 -0.272,-0.062 -0.45,-0.055 -0.605,-0.107 -0.405,-0.115 -0.44,-0.014 -0.634,-0.039 -0.391,-0.083 -0.397,-0.274 -0.51,-0.329 -0.526,-0.339 -0.542,-0.349 -0.64,-0.402 -0.699,-0.439 -0.16,-0.044 -0.07,-0.008 -0.759,-0.02 -0.789,-0.021 -0.533,-0.014 -0.168,-0.051 -0.122,-0.1 -0.165,-0.325 -0.208,-0.231 -0.232,-0.295 -0.019,-0.398 0.064,-0.435 0.06,-0.144 -0.034,-0.143 0.009,-0.197 -0.13,-0.183 -0.776,-0.21 -0.126,0.016 -0.129,0.079 -0.147,0.056 -0.106,-0.053 -0.065,-0.078 -0.002,-0.129 0.013,-0.096 -0.045,-0.053 -0.247,-0.196 -0.232,-0.258 -0.14,-0.285 -0.136,-0.234 -0.068,-0.523 -0.172,-0.322 -0.168,-0.394 -0.249,-0.751 -0.108,-0.259 -0.202,-0.174 -0.213,-0.161 -0.221,-0.333 -0.575,-0.294 -0.221,-0.229 -0.383,-0.397 -0.095,-0.201 -0.028,-0.199 -0.119,-0.187 -0.212,-0.211 -0.663,-0.454 -0.183,-0.054 -0.237,-0.049 -0.348,-0.045 -0.467,-0.104 -0.408,-0.178 -0.185,-0.126 -0.044,-0.087 0.038,-0.146 0.148,-0.251 0.28,-0.593 0.194,-0.409 0.132,-0.116 0.359,-0.029 0.382,0.012 0.279,0.03 0.394,0.005 0.472,-0.035 0.187,-0.137 0.148,-0.15 0.062,-0.105 0.02,-0.265 -0.001,-0.213 -0.03,-0.817 -0.018,-0.5 -0.021,-0.572 0.003,-0.115 0.004,-0.147 0.115,-0.611 0.108,-0.35 0.074,-0.185 0.298,-0.584 0.056,-0.187 0.01,-0.171 -0.11,-0.785 0.191,-0.37 0.246,-0.366 0.215,-0.157 0.179,-0.106 0.084,0.045 0.206,0.169 0.27,0.167 0.126,-0.037 0.185,-0.146 0.138,-0.154 -0.018,-0.276 0.124,-0.567 -0.024,-0.328 0.133,-0.406 0.145,-0.573 0.065,-0.362 0.083,-0.195 0.393,-0.4 0.338,-0.566 0.215,-0.414 0.412,-0.676 0.208,-0.247 0.169,-0.106 0.252,-0.068 0.469,-0.062 0.337,-0.057 0.049,-0.088 0.029,-0.138 0.005,-0.303 0.065,-0.521 0.146,-0.509 0.172,-0.386 0.093,-0.176 0.111,-0.169 0.125,-0.287 0.158,-0.62 -0.009,-0.421 0.226,-0.772 0.05,-0.004 0.384,-0.142 0.373,-0.021 0.361,0.099 0.235,0.025 0.11,-0.05 0.101,-0.128 0.093,-0.208 0.148,-0.115 0.202,-0.022 0.27,0.234 0.431,0.621 0.111,0.037 0.069,-0.016 0.216,-0.499 0.169,-0.387 0.314,-0.724 0.179,-0.415 0.167,0.12 0.166,0.212 0.188,0.099 0.203,0.061 0.098,0.008 0.125,0.084 0.436,0.517 z",
                        title: "Ethiopia",
                        id: "ET",
                    },
                    {
                        d:
                            "m 556.18775,192.7174 -0.188,0.097 -0.58,0.38 -0.354,0.256 -0.426,0.188 0.11,0.249 0.708,0.052 0.109,0.071 0.079,0.127 0.013,0.204 -0.071,0.329 -0.766,1.801 -0.024,0.377 0.25,1.044 0.351,1.224 1.061,0.541 0.788,0.421 0.506,0.994 0.835,1.301 0.442,0.484 0.025,0.15 -0.131,0.889 -0.535,0.886 -0.5,0.744 -0.518,0.892 -0.405,0.757 -0.439,0.903 -0.051,0.292 -0.008,0.275 0.076,0.303 0.562,1.093 0.219,0.555 0.261,0.598 0.225,0.65 0.13,0.581 0.225,0.563 0.14,0.287 0.232,0.402 0.28,0.596 0.093,0.471 0.423,1.624 0.043,0.411 -0.021,0.304 -0.186,0.074 -0.411,0.048 -0.446,0.199 -0.022,0.067 0.291,0.378 -0.257,0.645 -0.037,0.919 -0.274,0.48 -0.026,0.111 0.012,0.093 0.049,0.073 0.507,0.128 0.044,0.13 0.002,0.269 -0.045,0.248 -0.255,0.184 -0.273,0.271 -0.061,0.25 0.009,0.222 0.093,0.375 0.181,0.436 0.229,0.273 0.813,0.259 0.105,0.213 0.044,0.292 -0.017,0.285 -0.378,0.568 0.003,0.218 0.155,0.526 0.186,0.501 0.793,0.542 0.273,0.296 0.072,0.235 0.04,0.379 -0.005,0.41 -0.062,0.363 -0.249,0.467 -0.575,0.918 -0.579,0.355 -0.035,0.077 0.179,0.292 1.019,1.166 0.665,0.543 0.896,0.73 0.578,0.575 0.187,0.412 0.25,0.458 0.281,0.373 0.203,0.323 0.077,0.208 -0.007,0.223 -0.271,0.671 -0.154,0.517 -0.271,0.755 -0.278,0.524 -0.704,0.954 -1.039,1.18 -0.241,0.355 -0.486,0.617 -0.833,1.233 -0.215,0.271 -0.682,0.976 -0.311,0.31 -0.245,0.289 -0.675,0.915 -0.726,0.691 -0.712,0.64 -0.214,0.323 -0.266,0.247 -0.317,0.234 -0.133,0.131 -0.717,0.869 -0.995,1.198 -0.101,0.019 -0.259,0.193 -0.405,0.047 -0.176,0.147 -0.619,-0.42 -0.103,-0.027 -0.364,0.104 -0.349,0.305 -0.645,0.093 -0.32,0.099 -0.204,0.141 -0.042,-0.333 0.088,-0.423 0.142,-0.283 0.013,-0.184 -0.104,0.019 -0.207,0.415 -0.11,0.484 -0.221,0.243 -0.486,0.099 -0.473,-0.388 -0.225,0.003 0.141,0.278 0.095,0.305 -0.012,0.17 -0.252,-0.03 -0.281,0.182 -0.246,0.266 -0.12,0.001 -0.166,-0.372 -0.304,0.174 -0.26,0.233 -0.527,0.072 -0.314,0.306 -0.556,0.207 -0.305,-0.005 -0.697,0.248 -0.232,0.382 -0.203,0.14 -0.289,-0.118 -0.891,0.186 -0.852,0.244 -0.362,-0.014 -0.362,-0.101 -0.384,0.338 -0.408,0.452 -0.449,0.161 -0.161,-0.058 0.129,-0.237 0.297,-0.245 0.204,-0.333 0.028,-0.278 -0.14,-0.109 -0.192,-0.034 -0.241,-0.288 -0.231,-0.626 -0.125,-0.035 -0.063,0.165 -0.071,0.479 -0.072,0.138 -0.122,0.11 -0.147,0.11 -0.144,0.054 -0.515,-0.007 -0.068,-0.242 0,-0.101 0.092,-0.319 -0.08,-0.056 0.076,-0.25 0.121,0.014 0.144,-0.038 0.072,-0.128 -0.005,-0.154 -0.2,-0.04 -0.012,-0.105 0.178,-0.44 0.025,-0.122 -0.069,-0.025 -0.111,0.048 -0.737,-0.138 -0.909,-0.564 -0.224,-0.029 -0.137,-0.505 -0.219,0.064 -0.32,0.296 -0.24,-0.225 -0.258,-0.148 -0.071,-0.231 0.004,-0.342 -0.022,-0.405 -0.07,-0.475 -0.051,-0.677 0.048,-0.531 0.206,-0.394 0.079,-0.252 0.096,-0.645 0.022,-0.757 -0.055,-0.258 0.014,-0.172 0.164,0 -0.036,-0.148 -0.072,-0.081 -0.08,-0.168 0.068,-0.089 0.196,-0.006 0.016,-0.057 0.022,-0.08 -0.152,-0.444 -0.018,-0.212 -0.21,-0.645 -0.241,-0.614 -0.361,-0.445 0.128,-0.735 0.146,-0.667 -0.029,-0.322 -0.056,-0.393 -0.443,-0.432 -0.065,-0.61 -0.108,-0.658 0.041,-0.404 0.072,-0.311 0.146,-0.31 0.735,-0.98 0.045,-0.514 0.498,-0.038 -0.231,-0.46 -0.054,-0.259 -0.012,-0.303 0.716,-0.208 0.268,0.171 0.63,-0.211 0.56,-0.413 -0.01,-0.22 -0.086,-0.197 -0.119,-0.38 0.084,-0.106 0.204,0.078 -0.094,-0.189 0.017,-0.2 0.223,0.083 0.363,-0.559 0.013,-0.428 0.628,-0.224 0.725,-0.878 0.334,-0.274 0.323,-0.199 0.688,-0.883 0.294,-0.041 0.151,-0.598 0.585,-0.799 0.178,-0.102 0.273,-0.724 0.719,-0.84 0.456,-1.077 0.251,-0.384 0.078,-0.41 0.28,-0.035 0.252,-0.302 0.546,-0.21 0.54,0.058 0.225,0.144 0.207,-0.045 -0.021,-0.37 -0.148,-0.229 0.121,-0.221 0.285,-0.167 -0.029,-0.37 -0.062,-0.223 -0.237,-0.297 0.118,-0.668 0.028,-0.735 0.112,-0.853 -0.297,-0.453 -1.13,-0.774 -0.21,0.027 -0.251,-0.098 -0.262,-0.589 0.117,-0.51 0.014,-0.188 -0.102,0.006 -0.166,0.249 -0.36,0.284 -0.468,-0.218 -0.23,0.048 -0.299,-1.267 -0.153,-0.487 -0.245,-0.608 -0.437,-0.297 -0.086,-0.169 -0.058,-0.259 -0.019,-0.36 -0.056,-0.534 0.023,-0.439 0.054,-0.262 0.189,-0.176 0.272,-0.499 0.057,-0.363 0.023,-0.558 0.125,-0.489 0.139,-0.248 -0.035,-0.198 -0.096,-0.282 -0.204,-0.402 -0.31,-0.491 -0.229,-0.471 -0.101,-0.441 -0.052,-0.396 0.008,-0.36 0.086,-0.246 0.292,-0.31 0.039,-0.132 -0.116,-0.687 -0.204,-0.125 -0.347,-0.067 -0.194,-0.006 -0.037,-0.076 -0.01,-0.138 0.04,-0.283 0.109,-0.325 0.091,-0.208 0.012,-0.176 -0.116,-0.604 -0.035,-0.743 0.04,-0.584 0.368,-0.432 0.017,-0.158 -0.462,-0.471 -0.333,-0.535 -0.104,-0.313 -0.381,-0.047 -0.238,-0.914 -0.344,-0.446 -0.34,-0.387 -0.201,-0.18 -1.18,-0.557 -0.468,-0.106 -0.555,-0.326 -0.413,-0.41 -0.354,-0.264 -0.303,-0.327 -0.423,-0.306 -0.121,-0.262 -0.457,-0.486 -0.214,-0.321 -0.743,-0.607 -0.027,-0.24 -0.005,-0.232 -0.034,-0.097 -0.766,-0.446 0.151,-0.256 0.599,-0.016 0.495,0.233 0.109,-0.1 0.065,-0.207 -0.211,-0.832 0.038,-0.218 0.218,-0.262 0.346,-0.209 0.545,-0.03 0.372,0.031 0.079,0.023 0.555,0.918 0.477,0.891 0.253,0.378 0.619,1.068 0.232,0.615 0.079,0.439 0.252,-0.002 0.871,0.192 0.732,0.162 0.204,0.245 0.504,-0.049 0.389,-0.221 0.686,-0.279 0.184,-0.344 0.229,-0.369 0.402,0.058 0.44,0.291 0.499,0.382 0.445,0.176 0.597,0.276 0.278,0.356 0.39,0.102 0.408,-0.356 0.241,-0.971 0.214,-0.435 0.303,-0.319 0.347,-0.141 0.265,-0.051 0.201,-0.249 0.285,-0.554 0.056,-0.674 -0.055,-1.224 0.052,-0.406 0.233,-0.666 0.313,-1.776 0.14,-0.516 0.171,-0.314 0.235,-0.187 0.427,-0.544 0.61,-1.084 0.165,-0.092 0.438,-0.055 0.544,0.04 0.49,0.191 0.053,-0.015 0.22,-0.1 0.399,-0.338 0.684,-0.674 0.438,-0.186 0.398,0.026 0.441,0.738 0.623,0.819 0.4,0.396 1.091,0.741 0.958,0.485 0.538,1.594 -0.266,0.631 -0.132,0.217 -0.469,0.625 -0.501,0.878 -0.038,0.456 0.166,0.459 0.212,0.297 z m -11.556,29.004 -0.419,0.22 -0.337,-0.137 -0.006,-0.427 0.209,-0.207 0.378,-0.083 0.518,0.207 0.076,0.11 -0.297,0.083 -0.122,0.234 z m -10.189,11.238 0.03,0.116 0.164,-0.032 0.222,-0.212 0.157,0.099 -0.018,0.302 -0.106,-0.012 -0.029,-0.05 -0.137,0.172 -0.024,0.104 -0.158,0.066 -0.292,-0.295 -0.184,-0.486 0.428,-0.001 -0.041,0.116 -0.012,0.113 z m 0.654,16.138 -0.039,0.265 -0.191,-0.029 -0.194,0.048 -0.156,-0.263 -0.083,-0.444 0.029,-0.096 0.122,-0.101 0.093,0.244 0.419,0.376 z m 1.525,1.095 -0.205,0.025 -0.289,-0.281 -0.036,-0.11 0.113,-0.064 -0.075,-0.226 0.022,-0.1 0.223,0.179 0.122,0.208 -0.119,0.048 0.202,0.215 0.042,0.106 z m 0.508,-0.192 0.355,0.131 0.149,-0.047 0.17,0.297 -0.288,0.188 -0.02,0.234 0.114,0.145 0.04,0.21 -0.287,0 -0.137,-0.177 -0.06,-0.225 -0.134,-0.159 -0.178,-0.121 0.087,-0.162 0.05,-0.232 0.139,-0.082 z m -0.96,1.299 -0.281,0.193 -0.107,-0.046 0.027,-0.326 0.167,-0.149 0.281,-0.017 -0.087,0.345 z m -0.575,0.184 -0.246,0.056 -0.153,-0.163 0.058,-0.121 0.171,-0.135 0.186,0.019 0.04,0.158 -0.056,0.186 z",
                        title: "Finland",
                        id: "FI",
                    },
                    {
                        d:
                            "m 971.98475,498.0674 -0.11,0.029 -0.177,-0.024 -0.036,-0.046 0.056,-0.01 0.116,-0.03 0.142,0.015 0.025,0.03 -0.016,0.036 z m 8.201,10.49 -0.123,0.056 0,-0.036 0,-0.009 0.086,-0.078 0.069,0 -0.032,0.067 z m 0.075,1.027 -0.198,0.108 0,-0.149 0.158,-0.138 0.12,-0.029 -0.074,0.139 -0.006,0.069 z m 2.731,2.245 -0.071,0.1 -0.062,-0.036 0.079,-0.168 0.012,-0.072 -0.122,-0.088 -0.008,-0.062 0.036,-0.038 0.146,0.099 0.089,0.077 0.018,0.042 -0.027,0.075 -0.09,0.071 z m 1.979,1.99 -0.156,0.031 -0.142,-0.125 0.09,-0.132 0.126,0.031 0.072,0.128 0.01,0.067 z m -2.068,0.07 -0.085,0.044 -0.059,-0.01 -0.069,-0.047 -0.042,-0.083 0.088,-0.07 0.136,0.079 0.031,0.087 z m 0.635,0.755 -0.033,0.054 -0.15,-0.088 -0.058,-0.06 0.16,-0.046 0.078,0.015 0.003,0.125 z m -2.913,2.079 0.007,0.087 -0.042,-0.005 -0.05,-0.037 -0.025,0.018 -0.018,0.027 -0.009,0.061 -0.007,0.034 -0.039,-0.012 -0.007,-0.06 0.013,-0.042 0.019,-0.062 0.07,-0.056 0.088,0.047 z m 3.55,0.666 -0.031,0.027 -0.077,-0.03 -0.063,-0.041 -0.008,-0.042 0.026,-0.054 0.061,-0.028 0.031,0.011 -0.018,0.018 -0.037,0.019 0.006,0.053 0.048,0.032 0.046,0.009 0.016,0.026 z m -0.496,4.457 0.006,0.008 -0.016,-0.001 -0.022,-0.01 -0.018,-0.02 -0.004,-0.022 0.009,-0.022 0.009,10e-4 0.015,0.02 0.014,0.022 0.007,0.024 z m -3.618,-13.233 -0.424,0.387 -0.152,0.2 -0.129,0.221 -0.361,0.237 -0.154,0.318 0.011,0.321 0.362,-0.336 0.403,-0.274 0.124,-0.056 0.127,0.003 -0.011,0.094 -0.058,0.093 -0.045,0.243 0.106,0.226 -0.301,-0.022 -0.298,0.019 -0.353,0.126 -0.347,0.056 -0.13,10e-4 -0.124,-0.042 -0.081,-0.065 -0.063,-0.15 -0.064,-0.022 -0.275,0.007 -0.412,0.294 -0.137,0.252 -0.158,0.011 -0.188,-0.052 -0.227,0.193 -0.271,0.069 -0.116,-0.164 -0.076,-0.2 -0.097,-0.147 -0.298,-0.037 0.046,-0.18 0.079,-0.074 0.072,-0.107 0.044,-0.122 0.143,0.077 0.146,0.05 0.163,-0.091 0.17,-0.008 0.17,-0.266 0.267,-0.167 0.367,-0.132 0.374,-0.094 0.193,-0.019 0.185,-0.054 0.325,-0.25 0.215,-0.128 0.234,-0.077 0.224,-0.045 0.207,0.04 0.167,-0.021 0.426,-0.178 0,0.042 z m 0.002,1.08 -0.036,0.003 -0.007,-0.056 0.043,-0.097 0,0.15 z m 0.391,0.431 -0.092,0.036 -0.299,0.248 0,0 -0.193,0.263 -0.096,0.256 0.081,0.106 0.208,-0.109 0.07,-0.111 0.301,-0.217 0.128,-0.248 -0.108,-0.224 z m -8.153,1.338 -0.145,0.049 0.077,-0.232 0.081,-0.073 0.052,-0.015 0.083,-0.016 -0.032,0.164 -0.116,0.123 z m 6.141,0.642 -0.094,0.079 -0.044,-0.402 0.097,0.003 0.07,0.042 0.04,0.102 -0.069,0.176 z m -3.205,0.015 0,0.129 0.082,0.056 0.082,0.009 0.202,0.248 0.315,0.213 0.192,0.163 0.011,0.139 -0.059,0.147 0.082,0.264 0.039,0.273 0.14,0.434 -0.197,0.083 -0.311,0.01 -0.072,0.078 -0.105,-0.043 -0.258,0.033 -0.246,0.143 -0.234,0.194 -0.271,0 -0.305,0.04 -0.304,-0.027 -0.214,-0.104 -0.377,-0.113 -0.503,-0.096 -0.208,-0.081 -0.174,-0.126 -0.162,-0.319 -0.024,-0.158 0.025,-0.151 0.147,-0.051 0.123,-0.076 0.017,-0.1 0.055,-0.07 0.07,-0.025 0.035,-0.048 -0.05,-0.162 -0.014,-0.147 0.292,-0.27 0.317,-0.23 0.562,-0.212 0.343,0.02 0.526,-0.163 0.169,-0.077 0.167,0.047 0.095,0.126 z m 1.536,1.044 -0.145,0.052 -0.08,-0.179 0.11,-0.18 0.124,-0.016 0.061,0.183 -0.07,0.14 z m 1.464,1.095 -0.025,0.024 -0.243,-0.234 0.008,-0.093 0.043,-0.083 0.098,-0.078 0.088,0.133 0.069,0.222 -0.038,0.109 z m -2.417,2.565 -10e-4,0.127 -0.361,0.084 -0.121,-0.104 -0.078,-0.019 -0.215,0.186 -0.063,0.076 -0.021,0.057 -0.056,0.029 -0.396,0.089 -0.174,-0.089 0.117,-0.06 0.145,-0.121 0.146,0.018 0.146,-0.113 0.146,-0.172 0.207,-0.037 0.146,-0.066 0.241,0.048 0.192,0.067 z m -10.829,8.096 -0.021,0.033 -0.081,-0.011 -0.016,-0.067 0.047,-0.038 0.066,0.025 0.005,0.058 z",
                        title: "Fiji",
                        id: "FJ",
                    },
                    {
                        d:
                            "m 309.73275,630.2184 0.429,0.263 0.537,-0.092 0.226,0.072 0.132,0.219 -0.079,0.203 -0.17,-0.029 -0.146,0.055 0.029,0.268 0.099,0.115 0.567,0.295 0.104,0.018 -0.019,-0.124 -0.099,-0.203 -0.037,-0.218 0.084,-0.181 0.148,-0.057 0.646,-0.091 0.151,0.086 0.32,0.514 -0.3,0.071 -0.126,0.223 0.264,0.097 0.209,0.143 -0.111,0.219 -0.02,0.11 -0.465,0.155 -0.412,0.1 -0.188,0.258 -0.332,0.188 -0.976,0.328 0.114,0.267 0.015,0.128 -0.042,0.347 -1.343,-0.415 -0.182,0.044 0.359,0.708 -0.266,0.131 -0.263,-0.085 -0.239,0.059 -0.152,0.513 -0.383,-0.328 -0.327,-0.466 -10e-4,-0.26 0.316,-0.485 -0.096,-0.205 0.735,-0.657 0.132,-0.195 0.229,-0.111 0.238,-0.038 0.101,-0.084 -0.017,-0.16 -0.095,-0.272 0.008,-0.442 0.589,-0.599 -0.086,-0.385 0.191,-0.015 z m -3.54,0.564 -0.385,0 -0.076,-0.146 0.001,-0.37 0.292,-0.032 0.285,0.154 -0.019,0.155 -0.098,0.239 z m -0.49,0.297 0.406,0.085 0.373,-0.316 0.257,-0.101 0.212,0.068 0.149,0.191 0.216,-0.03 0.611,-0.195 0.08,0.066 0.218,-0.227 0.187,0.105 0.148,0.198 -0.072,0.229 -0.169,0.146 -0.107,0.204 -0.125,0.164 -0.216,0.153 -0.166,0.244 -0.398,0.573 -0.58,0.734 -0.192,0.066 -0.4,0.044 -0.172,-0.051 -0.147,0.017 -0.118,0.398 -0.183,0.302 -0.086,0.063 -0.19,0.028 -0.09,0.046 -0.068,0.112 -0.5,-0.029 -0.353,-0.186 -0.418,-0.412 0.558,-0.504 0.481,0.023 0.397,-0.338 0.323,-0.171 0.128,-0.173 0.141,-0.133 10e-4,-0.173 -0.108,-0.077 -0.146,0.008 -0.144,0.075 -0.338,0.098 -0.231,-0.198 0.152,-0.074 0.171,0.004 0.523,-0.186 0.1,-0.078 -0.161,-0.263 -0.315,-0.16 -0.255,-0.268 -0.047,-0.1 0.013,-0.159 -0.141,-0.314 0.148,-0.016 0.197,0.202 0.446,0.286 z m -2.056,1.46 0.201,0.062 0.2,-0.023 -0.113,0.466 -0.088,0.224 -0.237,-0.018 -0.235,-0.305 -0.082,-0.162 0.262,-0.116 0.092,-0.128 z m 7.241,1.022 0.017,0.4 -0.225,-0.127 -0.08,-0.194 0.125,-0.132 0.103,0.01 0.06,0.043 z m -3.491,1.005 -0.18,0.088 -0.05,-0.039 -0.057,-0.172 -0.003,-0.222 -0.021,-0.1 0.112,0.032 0.203,0.177 -0.004,0.236 z",
                        title: "Falkland Islands",
                        id: "FK",
                    },
                    {
                        d:
                            "m 862.59175,436.3134 -0.213,0.23 -0.014,-0.075 0.064,-0.138 0.09,-0.157 0.084,-0.094 0.109,-0.027 0.078,0.13 -0.088,0.113 -0.11,0.018 z m 38.557,5.831 -0.049,0.015 -0.022,-0.014 0.011,-0.072 0.016,-0.025 0.046,-0.002 0.08,0.02 0.006,0.018 -0.088,0.06 z m -0.656,0.241 -0.023,0.037 -0.171,-0.014 -0.024,-0.021 0.015,-0.016 0.082,-0.017 0.01,-0.051 -0.042,-0.011 0.036,-0.027 0.067,-0.005 0.038,0.032 0.021,0.046 -0.009,0.047 z m 18.711,1.496 -0.163,0.063 -0.205,-0.029 -0.063,-0.229 -0.094,-0.061 0.021,-0.113 0.144,-0.092 0.305,0.075 0.113,0.163 -0.072,0.108 0.014,0.115 z m 13.101,4.172 0.029,0.136 -0.179,-0.066 -0.024,-0.048 0.104,-0.048 0.07,0.026 z",
                        title: "Federated States of Micronesia",
                        id: "FM",
                    },
                    {
                        d:
                            "m 456.91675,238.9744 -0.134,0.434 -0.199,-0.068 -0.055,-0.047 -0.043,-0.113 0.021,-0.323 -0.007,-0.468 0.229,0.385 0.188,0.2 z m -0.631,0.185 -0.07,0.806 -0.114,-0.004 -0.204,-0.223 -0.153,-0.046 -0.048,0.119 0.008,0.143 0.079,0.09 0.244,0.538 0.022,0.157 -0.03,0.076 -0.237,-0.155 -0.572,-0.696 -0.445,-1.151 0.6,-0.185 0.435,0.303 0.485,0.228 z m -1.56,0.532 0.252,0.232 0.089,0.164 -0.145,0.158 -0.175,0.041 -0.212,-0.037 -0.349,-0.171 -0.122,-0.392 0.241,0.009 0.285,-0.075 0.136,0.071 z m 1.582,1.988 -0.055,0.223 -0.077,-0.002 -0.264,-0.276 -0.21,-0.151 -0.07,-0.128 -0.059,-0.219 0.121,-0.027 0.144,0.05 0.361,0.2 0.102,0.208 0.007,0.122 z m -0.215,2.131 0.056,0.178 -0.065,-0.02 -0.189,-0.203 -0.33,-0.484 -0.115,-0.401 -0.016,-0.186 0.082,0.021 0.068,0.165 0.313,0.108 0.083,0.082 -0.001,0.201 0.105,0.238 0.009,0.301 z",
                        title: "Faroe Islands",
                        id: "FO",
                    },
                    {
                        d:
                            "m 482.92875,298.0884 0.167,-0.049 0.283,-0.176 0.236,-0.056 0.135,0.135 0.076,0.077 0.148,0.304 0.042,0.316 0.066,0.263 0.12,0.106 0.451,0.035 0.333,0.097 0.088,0.088 0.114,0.582 0.062,0.082 0.083,-0.068 0.082,-0.096 0.114,-0.015 0.195,0.037 0.257,0.012 0.265,0.064 0.366,0.328 -0.014,0.108 -0.071,0.189 -0.025,0.151 0.063,0.061 0.097,0.156 -0.023,0.18 -0.094,0.126 -0.038,0.104 0,0.067 0.035,0.056 0.075,0.049 0.541,0.066 0.495,-0.066 0.312,-0.184 0.053,-0.194 0.088,-0.218 0.186,-0.184 0.128,-0.062 0.118,0.075 -0.198,0.769 0.145,0.196 0.021,0.292 0.052,0.256 0.177,-0.005 0.214,0.047 0.152,0.094 0.177,0.152 0.255,0.14 0.179,0.049 0.065,0.116 0.145,0.135 0.228,0.282 0.204,0.188 0.099,0 0.19,-0.074 0.282,-0.047 0.222,0.004 0.095,0.143 0.219,0.066 0.077,0.053 0.086,0.099 0.146,0.04 0.176,-0.04 0.128,-0.131 0.171,-0.06 0.172,0.02 0.099,0.072 0.188,0.107 0.106,-0.023 0.213,0.066 0.214,0.208 0.09,0.208 0.023,0.114 0.092,0.124 0.359,0.558 0.114,0.027 0.125,-0.084 0.081,-0.12 0.117,-0.024 0.188,0.056 0.121,0.063 0.058,0.241 0.041,0.046 0.081,-0.052 0.145,-0.011 0.232,0.059 0.318,-0.068 0.255,-0.101 0.13,0.004 0.21,0.281 0.24,0.105 0.528,0.085 0.567,0.132 0.223,0.107 0.152,0.053 0.016,0.371 -0.046,0.056 -0.565,0.742 -0.238,0.265 -0.121,0.377 -0.083,0.578 -0.167,0.547 -0.25,0.518 -0.091,0.388 0.068,0.258 -0.043,0.405 -0.153,0.551 -0.026,0.415 0.102,0.28 0.141,0.057 -0.339,0.188 -0.077,0.165 -0.133,0.217 -0.216,0.091 -0.217,0.03 -0.176,-0.028 -0.1,-0.087 0.005,-0.081 -0.093,-0.069 -0.231,0.002 -0.239,0.149 -0.191,0.244 0.059,0.136 0.176,0.036 0.046,0.054 0,0.07 -0.062,0.084 -0.074,0.144 -0.369,0.428 -0.372,0.431 -0.06,0.13 -0.118,0.091 -0.473,0.23 -0.049,0.092 -0.027,0.383 -0.053,0.314 -0.351,0.295 -0.349,0.293 -0.087,0.179 -0.063,0.207 -0.109,0.234 -0.022,0.124 0.177,0.201 -0.021,0.166 -0.056,0.236 -0.167,0.167 -0.186,0.095 0.004,0.256 0.099,0.036 0.224,-0.019 0.317,-0.186 0.207,-0.24 -0.122,-0.227 -0.015,-0.044 0.03,-0.054 0.245,-0.248 0.3,-0.149 0.419,-0.028 0.505,0.088 0.05,0.037 -0.024,0.152 0.047,0.224 0.091,0.157 -0.125,0.445 0.095,0.139 0.147,0.167 0.11,0.152 0.158,0.139 0.141,0.235 0.048,0.133 -0.226,0.23 -0.382,0.216 -0.043,0.139 0.005,0.157 0.043,0.124 0.211,0.159 0.227,0.359 0.144,0.32 0.315,0.306 0.077,0.091 -0.02,0.076 -0.083,0.13 -0.108,0.434 -0.129,0.068 -0.144,0.028 -0.39,0.317 -0.174,-0.039 -0.247,0.004 -0.181,0.104 0.02,0.197 0.159,0.18 0.093,0.196 0.038,0.204 0.176,0.151 0.248,0.09 0.142,0.006 0.092,0.054 0.056,0.07 0.107,0.436 -0.064,0.109 -0.134,0.046 -0.08,0.179 -0.159,0.263 -0.09,0.211 0.1,0.186 0.042,0.138 -0.053,0.142 0.071,0.22 0.188,0.218 0.511,0.306 0.475,0.249 0.147,0.041 0.642,-0.16 0.106,0.014 0.078,0.19 0.034,0.128 -0.072,0.192 -0.177,0.271 -0.188,0.211 -0.114,0.179 0.024,0.163 0.007,0.216 -0.153,0.064 -0.005,-0.042 -0.063,-0.037 -0.054,0.021 -0.042,0.047 -0.006,0.083 -0.326,0.138 -0.225,0.143 -0.889,0.852 -0.416,0.249 -0.082,0.15 -0.085,0.28 -0.244,0.24 -0.214,0.114 -0.529,0.117 -0.532,0.254 -0.24,-0.11 -0.62,0.012 -0.387,-0.306 -0.744,-0.194 -0.242,-0.447 -0.339,-0.029 -0.222,0.014 -0.133,-0.068 -0.034,-0.153 -0.003,-0.147 -0.235,0.068 -0.18,0 -0.107,0.059 -0.084,0.068 -0.1,-0.043 -0.058,0.015 0.005,0.086 -0.216,0.022 -0.235,-0.053 -0.615,-0.231 -0.094,-0.036 -0.427,-0.089 -0.172,-0.093 -0.14,-0.229 -0.106,-0.072 -0.063,-0.043 -0.398,0.116 -0.138,0.18 -0.215,0.211 -1.476,1.032 -0.27,0.431 -0.312,0.633 -0.024,0.295 0.134,0.94 0.3,0.492 0.038,0.114 -0.167,10e-4 -0.279,-0.062 -0.231,-0.076 -0.221,0.042 -0.212,0.102 -0.186,0.062 -0.134,0.017 -0.089,0.059 -0.043,0.117 -0.008,0.082 -0.235,-0.02 -0.543,-0.168 -0.488,-0.116 -0.287,0.132 -0.184,0.123 -0.129,-0.019 -0.099,-0.13 -0.066,-0.127 -0.191,-0.117 -0.432,-0.175 0.022,-0.084 0.074,-0.118 -0.002,-0.073 -0.083,-0.108 -0.398,-0.116 -0.188,-0.029 -0.119,0.08 -0.086,0.098 -0.221,-0.36 -0.158,-0.074 -0.238,-0.012 -0.273,-0.11 -0.284,-0.141 -0.689,-0.225 -0.189,-0.027 -0.076,0.036 -0.051,0.135 -0.027,0.38 -0.029,0.042 -0.32,0.013 -0.394,-0.053 -0.181,0.026 -0.161,10e-4 -0.152,-0.101 -0.681,0.115 -0.113,-0.056 -0.164,-0.171 -0.184,-0.139 -0.142,-0.071 -0.122,-0.082 -0.11,-0.013 -0.168,0.079 -0.232,0.034 -0.192,-0.01 -0.103,0.011 -0.432,-0.422 -0.063,-0.115 -0.215,-0.032 -0.266,-0.005 -0.678,-0.274 -0.309,-0.147 -0.045,-0.088 0.004,-0.071 -0.053,0.016 -0.095,0.125 -0.05,0.102 -0.066,0.019 -0.097,-0.016 -0.09,-0.058 -0.055,-0.074 0.059,-0.129 0.104,-0.169 0.043,-0.184 -0.01,-0.165 -0.171,-0.106 -0.252,-0.044 -0.185,-0.013 -0.24,-0.094 -0.114,-0.068 -0.11,-0.184 -0.004,-0.134 0.457,-0.118 0.411,-0.485 0.39,-1.768 0.282,-2.109 0.209,-0.4 0.264,-0.11 -0.213,-0.292 -0.133,0.148 -0.056,0.157 -0.07,0.079 0.157,-1.955 0.112,-0.72 0.191,-0.756 0.391,0.3 0.324,0.305 0.167,0.264 0.212,0.876 0.161,0.184 0.24,0.184 -0.095,-0.201 -0.165,-0.154 -0.258,-1.169 -0.162,-0.333 -0.252,-0.28 -0.812,-0.591 -0.073,-0.115 -0.04,-0.226 0.269,0.01 0.232,0.11 -0.027,-0.126 -0.069,-0.132 -0.108,-0.481 -0.09,-1.127 0.012,-0.193 -0.04,-0.238 -0.26,-0.053 -0.208,-0.009 -0.224,-0.094 -1.106,-0.668 -0.378,-0.692 -0.387,-0.512 -0.093,-0.224 0.006,-0.227 0.201,-0.48 -0.177,-0.304 -0.173,-0.06 -0.15,-0.151 0.136,-0.251 0.113,-0.161 0.227,-0.043 0.297,0.053 0.282,0.146 0.221,0.039 -0.653,-0.391 -1.06,0.132 -0.229,-0.05 -0.192,-0.087 -0.076,-0.288 0.151,-0.129 0.136,-0.24 -0.154,-0.168 -0.2,-0.064 -0.314,0.003 -0.293,0.051 -0.074,-0.097 0.179,-0.268 -0.152,-0.098 -0.203,0.046 -0.294,0.055 -0.281,-0.084 -0.266,-0.305 -0.176,0.002 -0.121,0.038 -0.179,-0.118 -0.189,-0.029 -0.135,0.039 -0.179,-0.175 -1.104,-0.352 -0.476,-0.043 -0.437,0.159 -0.241,-0.055 -0.177,-0.228 -0.148,-0.382 -0.704,-0.295 0.139,-0.194 0.328,-0.046 0.377,-0.134 0.136,-0.173 -0.295,-0.201 -0.218,-0.05 -0.09,-0.072 -0.092,-0.181 0.13,-0.083 0.092,0.044 0.266,0.026 0.454,-0.044 -0.169,-0.183 -0.176,-0.041 -0.081,-0.046 -0.37,-0.02 -0.168,0.063 -0.378,-0.024 -0.082,-0.197 -0.04,-0.17 0.117,-0.378 0.532,-0.339 1.326,-0.371 0.57,0.054 0.395,-0.067 0.474,-0.234 0.209,-0.201 0.674,-0.118 0.64,0.213 0.59,0.804 0.282,0.272 0.691,-0.472 1.029,0.014 0.212,0.266 0.086,-0.224 0.189,-0.263 0.151,0.12 0.077,0.163 1.086,-0.046 0.171,-0.047 -0.292,-0.191 -0.238,-0.458 -0.05,-1.693 -0.301,-0.475 -0.345,-0.761 -0.159,-0.453 -0.015,-0.157 0.053,-0.227 0.424,0.012 0.328,0.058 0.625,-0.171 0.3,0.117 -0.018,0.354 0.092,0.446 0.104,0.216 0.159,0.245 0.503,-0.022 0.543,0.144 0.687,0.022 1.003,0.248 0.427,-0.144 0.414,-0.307 0.788,-0.202 0.063,-0.106 -0.454,0.042 -0.416,-0.195 -0.056,-0.211 0.048,-0.19 0.169,-0.438 1.206,-0.693 0.864,-0.205 0.902,-0.383 0.454,-0.393 0.3,-0.509 0.097,-0.112 0.125,-0.094 -0.116,-0.183 0.078,-1.96 0.084,-0.355 0.176,-0.291 0.268,-0.225 0.406,-0.244 1.497,-0.337 0.222,-0.137 0.031,0.212 0.109,0.271 0.075,0.148 -0.063,0.193 0.049,0.159 0.203,0.286 0.253,0.269 0.226,0.172 0.069,-0.026 z m -11.34,20.266 -0.099,0.352 -0.188,-0.324 -0.248,-0.284 -0.057,-0.263 0,-0.07 0.291,0.192 0.301,0.397 z m 29.913,12.125 -0.073,0.559 0.053,0.163 0.102,0.114 0.047,0.125 0.085,1.482 -0.016,0.118 -0.343,0.593 -0.077,0.173 -0.017,0.732 -0.058,0.196 -0.122,0.193 -0.217,0.624 -0.188,0.28 -0.514,-0.342 -0.303,-0.148 -0.148,-0.159 -0.097,-0.11 0.063,-0.147 0.138,-0.153 0.022,-0.121 -0.325,-0.136 -0.149,-0.091 0.002,-0.16 0.112,-0.249 -0.051,-0.206 -0.188,0.01 -0.146,-0.031 -0.019,-0.107 0.107,-0.137 0.138,-0.179 -0.004,-0.198 -0.167,-0.085 -0.151,-0.161 -0.061,-0.219 0.117,-0.15 0.19,-0.096 -0.14,-0.225 -0.094,-0.005 -0.075,-0.049 0.062,-0.104 0.147,-0.156 0.205,-0.467 0.285,-0.221 0.506,-0.142 0.137,-0.063 0.125,-0.165 0.139,-0.106 0.169,0.014 0.156,0.063 0.096,0.068 0.072,-0.071 0.07,-0.205 -0.043,-0.18 0.022,-0.495 0.09,-0.281 0.146,-0.016 0.134,0.155 -0.006,0.137 0.05,0.324 0.005,0.213 z",
                        title: "France",
                        id: "FR",
                    },
                    {
                        d:
                            "m 512.20375,456.8944 -0.014,0.195 -0.223,0.478 -0.104,0.368 -0.026,0.391 0.061,0.316 0.107,0.224 0.069,0.245 -0.053,0.171 -0.108,0.073 0.074,0.086 0.162,0.02 0.276,-0.074 0.424,-0.131 0.555,-0.189 0.365,-0.101 0.603,0.064 0.322,0.072 0.165,0.132 0.178,0.562 0.088,0.086 0.146,0.239 0.122,0.287 0.026,0.146 -0.014,0.105 -0.122,0.155 -0.138,0.229 -0.049,0.138 -0.115,0.103 -0.146,0.101 -0.403,0.041 -0.062,0.06 -0.112,0.243 -0.213,0.206 -0.097,0.195 -0.085,0.26 0.017,0.321 -0.043,0.463 -0.043,0.314 0.106,0.11 0.482,0.076 0.093,0.062 0.128,0.194 0.164,0.183 0.44,0.115 0.171,0.139 0.139,0.153 0.018,0.125 -0.1,0.503 -0.096,0.483 0.038,0.368 0.035,0.351 0.053,0.511 -0.023,0.312 -0.125,0.191 0,0.149 0.057,0.18 -0.11,0.498 -0.071,0.084 -0.197,0.093 -0.104,0.134 -0.033,0.21 -0.106,0.288 -0.11,0.105 0,0.134 0.106,0.097 -0.002,0.15 -0.197,0.178 -0.118,0.136 -0.263,0.067 -0.3,-0.071 -0.07,-0.099 0.072,-0.154 -0.026,-0.124 -0.103,-0.13 -0.161,-0.334 -0.142,-0.071 -0.079,0.137 -0.244,0.254 -0.431,0.326 -0.302,0.026 -0.558,-0.099 -0.467,-0.156 -0.221,-0.382 -0.137,-0.316 -0.2,-0.366 -0.224,-0.174 -0.239,-0.112 -0.106,-0.007 -0.342,0.204 -0.103,0.081 10e-4,0.171 0.032,0.16 0.053,0.077 0.044,0.103 -0.008,0.159 -0.061,0.213 -0.021,0.235 -1.072,0.231 -0.185,-0.083 -0.135,-0.106 -0.162,0.019 -0.466,0.12 -0.171,-0.084 -0.169,-0.061 -0.078,0.051 -0.006,0.1 0.079,0.554 -0.026,0.211 -0.104,0.276 -0.055,0.187 0.285,0.052 0.102,0.087 0.1,0.139 0.137,0.13 0.009,0.079 -0.155,0.145 -0.053,0.178 0.074,0.139 0.193,0.146 0.283,0.151 0.138,0.099 -0.014,0.091 -0.131,0.192 -0.05,0.164 -0.09,0.147 0.019,0.136 0.127,0.127 -0.013,0.113 -0.087,0.086 -0.176,-0.018 -0.149,0.012 -0.133,-0.035 -0.418,-0.439 -0.092,-0.013 -0.606,0.338 -0.151,0.138 -0.125,0.2 -0.168,0.431 -0.275,-0.251 -0.238,-0.459 -0.277,-0.283 -0.583,-0.455 -0.156,-0.336 -0.667,-0.739 -0.958,-0.739 -0.693,-0.641 -0.105,-0.142 0.117,0.017 0.669,0.32 0.091,-0.036 0.077,-0.072 -0.288,-0.168 -0.276,-0.132 -0.259,-0.082 -0.259,0.007 -0.145,-0.135 -0.094,-0.206 -0.048,-0.176 -0.115,-0.185 -0.367,-0.38 -0.089,-0.147 -0.201,-0.2 0.122,-0.027 0.394,0.192 0.035,-0.077 -0.034,-0.112 -0.396,-0.182 -0.214,-0.012 -0.05,-0.128 0.029,-0.148 -0.283,-0.553 -0.294,-0.415 -0.046,-0.196 0.793,0.902 0.106,0.015 0.14,-0.008 0.328,-0.101 -0.063,-0.121 -0.148,-0.129 -0.143,0.06 -0.187,0.012 -0.098,-0.054 -0.044,-0.093 0.187,-0.438 -0.081,0.023 -0.059,0.077 -0.103,0.038 -0.158,0.022 -0.391,-0.234 -0.344,-0.632 -0.091,-0.13 -0.092,-0.22 -0.091,-0.091 -0.396,-0.899 0.151,0.067 0.181,0.26 0.351,-0.055 0.137,-0.15 0.119,0.005 0.123,-0.034 0.154,-0.142 0.45,-0.62 0.119,-0.816 -0.039,-0.485 -0.066,-0.482 0.149,-0.154 0.059,0.102 0.029,0.171 0.07,0.127 0.16,0.113 0.298,0.03 0.46,0.179 0.164,0.113 0.045,-0.227 0.53,-0.193 -0.161,-0.069 -0.47,0.076 -0.646,-0.289 -0.215,-0.183 -0.2,-0.349 -0.207,-0.182 0.014,-0.163 0.464,-0.151 0.123,0.017 0.049,0.18 0.125,0.074 0.047,-0.025 0.021,-0.153 10e-4,-0.412 -0.141,-0.591 0.043,-0.114 0.127,-0.041 0.113,-0.078 0.079,-0.014 0.157,0.014 0.079,0.137 0.043,0.075 0.159,0.035 0.13,0.073 0.112,-0.02 0.093,-0.085 0.136,-0.018 0.423,0.002 0.383,0.001 0.762,0.002 0.763,0.003 0.763,0.002 0.574,0.002 -0.002,-0.337 -0.003,-0.521 -0.003,-0.616 -0.004,-0.591 -0.003,-0.546 -0.003,-0.645 0.031,-0.186 0.038,-0.076 -0.014,-0.107 0.591,-0.007 1.068,0.047 0.467,-0.006 0.133,0.009 0.584,-0.033 0.472,0.041 0.201,0.045 0.181,0.023 0.566,0.028 0.739,-0.035 0.251,0.008 0.139,0.09 z",
                        title: "Gabon",
                        id: "GA",
                    },
                    {
                        d:
                            "m 471.90475,298.2024 -0.235,0.152 -0.074,0.179 -0.057,0.07 -0.155,0.046 -0.154,10e-4 -0.586,-0.358 -0.135,0.016 0.134,-0.164 0.364,-0.134 0.205,-0.177 0.473,0.171 0.22,0.198 z m -8.788,-11.97 0.118,0.087 0.296,-0.014 -0.098,0.194 -0.326,0.216 -0.219,0.213 -0.265,0.178 -0.128,-0.205 -0.149,0.008 -0.228,-0.394 -0.041,-0.59 0.298,-0.154 0.412,0.009 0.33,0.452 z m -6.113,-9.212 0.396,0.123 0.295,-0.002 0.262,0.357 0.14,0.562 0.327,0.554 0.428,0.48 0.017,0.293 -0.153,0.157 -0.319,0.195 10e-4,0.209 0.211,-0.105 0.182,-0.048 0.438,0.046 0.153,0.212 0.106,0.317 0.056,0.26 -0.038,0.282 -0.118,-0.09 -0.12,-0.252 -0.133,-0.116 -0.155,-0.063 0.07,0.347 -0.028,0.463 0.067,0.043 0.208,0.008 -0.137,0.472 -0.285,0.128 -0.331,0.048 -0.08,0.167 -0.06,0.215 -0.173,0.32 -0.228,0.181 -0.282,-0.037 -0.276,-0.143 -0.241,-0.029 -0.168,0.085 -0.109,0.079 -0.106,-0.014 -0.303,0.03 -0.285,-0.006 -0.041,-0.125 0.049,-0.376 -0.064,-0.102 -0.272,-0.052 -0.101,-0.09 -0.157,-0.26 -0.031,-0.122 -0.022,-0.168 -0.166,-0.217 -0.201,-0.156 -0.118,-0.008 -0.235,0.254 -0.194,0.257 0.068,0.129 0.063,0.169 -0.105,0.122 -0.319,0.278 -0.05,0.108 -0.086,0.059 -0.152,-0.077 -0.379,0.018 -0.174,-0.049 -0.203,-0.205 -0.495,-0.137 -0.083,-0.329 -0.095,-0.062 -0.561,-0.565 -0.075,-0.189 0.073,-0.113 0.209,-0.171 0.703,-0.284 0.111,-0.114 0.023,-0.101 -0.207,-0.115 -0.186,-0.128 -0.063,-0.083 -0.005,-0.073 0.106,-0.095 0.212,-0.007 0.168,0.043 0.133,-0.085 0.234,-0.086 0.157,-0.108 0.135,-0.279 0.143,-0.251 0.015,-0.136 0.125,-0.479 0.069,-0.119 0.444,-0.314 0.112,0.172 0.219,0.042 0.196,-0.158 0.235,-0.499 0.163,-0.031 0.18,0.041 0.354,-0.063 0.628,-0.233 0.284,-0.006 z m 3.563,-1.02 -0.354,0.004 -0.128,-0.043 -0.153,-0.12 -0.172,-0.68 0.062,-0.241 0.07,-0.118 0.078,-0.092 0.187,-0.038 0.186,0.129 0.07,0.12 0.156,0.46 0.029,0.394 -0.031,0.225 z m -2.872,-2.394 0.101,0.641 0.099,0.396 0.007,0.135 -0.093,0.188 -0.463,0.25 -0.146,10e-4 -0.006,-0.061 0.104,-0.254 -0.09,-0.289 0.044,-0.22 -0.043,-0.04 -0.09,0.031 -0.332,0.349 -0.111,0.034 -0.012,-0.071 0.082,-0.286 0.01,-0.196 0.049,-0.12 0.09,-0.111 0.107,-0.083 0.087,-0.012 0.092,0.086 0.268,-0.24 0.246,-0.128 z m 0.446,0.58 -0.059,0.053 -0.142,-0.015 -0.053,-0.081 -0.029,-0.124 -0.003,-0.227 0.086,-0.163 0.364,-0.246 -0.165,-0.087 -0.006,-0.062 0.094,-0.205 0.391,-0.319 0.105,-0.058 0.104,0.009 -0.202,0.566 -0.485,0.959 z m 0.539,-2.659 -1.118,0.281 -0.385,-0.025 -0.035,-0.138 0.077,-0.092 0.319,-0.089 0.129,-0.677 -0.482,-0.313 -0.025,-0.087 0.038,-0.149 0.056,-0.067 0.292,-0.158 0.123,-0.035 0.1,0.021 0.206,0.183 0.232,0.383 0.311,0.061 0.211,0.162 -0.049,0.739 z m -2.329,-1.22 -0.159,0.028 -0.012,-0.072 0.277,-0.344 0.179,-0.057 0.063,0.034 -0.13,0.2 -0.218,0.211 z m -2.271,-1.945 -0.247,0.07 -0.091,-0.041 -0.016,-0.065 0.056,-0.177 0.189,-0.063 0.137,0.096 0.022,0.087 -0.05,0.093 z m 3.194,0.004 -0.083,0.066 -0.105,-0.013 -0.104,-0.085 -0.138,-0.242 0.31,-0.168 0.124,0.099 0.047,0.113 0.002,0.125 -0.053,0.105 z m -2.725,-0.776 -0.119,0.029 -0.155,-0.028 -0.096,-0.08 -0.097,-0.317 -0.018,-0.192 0.043,-0.358 -0.01,-0.429 0.32,-0.013 0.083,0.062 0.055,1.271 -0.006,0.055 z m 3.102,-2.02 -0.004,0.23 -0.05,0.271 0.064,0.287 0.015,0.205 0.118,0.065 0.072,0.094 0.526,0.105 0.489,-0.03 0.094,0.084 0.011,0.134 -0.077,0.147 -0.279,0.268 -0.332,0.433 -0.099,0.09 -0.107,0.004 -0.077,-0.039 -0.055,-0.77 -0.36,0.099 -0.29,-0.011 -0.159,-0.094 -0.111,-0.181 -0.225,-0.466 -0.654,-0.184 -0.185,-0.258 -0.056,-0.156 0.023,-0.086 0.136,-0.192 0.17,0.068 0.105,-0.042 0.064,-0.086 -0.001,-0.071 -0.089,-0.167 -0.004,-0.052 0.669,-0.212 0.059,-0.332 0.145,-0.027 0.166,0.109 0.227,0.345 0.061,0.418 z m -2.978,-0.93 0.317,0.294 -0.252,0.488 -0.387,-0.002 -0.545,-0.356 -0.002,-0.073 0.045,-0.107 0.082,-0.085 0.085,-0.02 0.135,0.058 0.188,-0.094 0.15,0.03 0.184,-0.133 z m 2.826,-3.599 -0.357,0.929 -0.14,0.023 -0.123,0.232 -0.38,0.255 0.332,0.005 0.093,0.085 0.002,0.183 -0.063,0.106 -0.429,0.422 -0.295,0.16 -0.318,0.44 -0.161,0.005 -0.159,0.279 -0.13,0.123 -0.074,0 -0.084,-0.062 -0.197,-0.273 0.358,-0.269 0.033,-0.151 0.245,-0.158 -0.021,-0.049 -0.389,-0.222 -0.153,-0.149 0.014,-0.078 0.187,-0.172 -0.088,-0.022 -0.06,-0.093 -0.108,-0.036 -0.033,-0.086 -0.02,-0.228 0.029,-0.233 0.113,-0.103 0.046,-0.11 0.046,-0.034 0.175,0.059 0.178,0.187 0.208,-0.072 0.241,0.035 0.005,-0.043 -0.177,-0.459 0.032,-0.094 0.096,-0.107 0.556,-0.329 0.693,-0.554 0.168,-0.087 0.051,0.076 0.07,0.287 -0.012,0.382 z m 8.669,-0.815 0.024,0.438 -0.033,0.133 -0.067,0.164 -0.212,0.305 -0.558,0.435 -1.021,0.996 -0.604,0.492 -0.083,0.236 -0.045,0.328 0.361,0.065 0.14,0.111 -0.086,0.166 -0.535,0.577 -0.157,0.52 0.41,-0.019 0.338,-0.1 0.673,-0.324 0.633,-0.241 0.304,-0.01 0.591,0.192 0.134,0.006 0.251,-0.089 0.254,-0.016 1.718,0.06 0.478,-0.113 0.316,0.135 0.264,0.336 0.251,0.619 -0.008,0.103 -0.152,0.281 -0.28,0.352 -0.241,0.484 -0.07,0.26 -0.047,0.285 -0.076,0.263 -0.479,1.23 -0.467,0.678 -0.208,0.48 -0.257,0.381 -0.248,0.24 -0.264,0.16 -0.764,0.17 -0.214,0.122 -0.255,0.209 -0.268,0.104 0.314,-0.013 0.311,-0.116 0.567,-0.042 0.652,0.4 -0.061,0.327 -0.262,0.258 -0.596,0.041 -0.557,0.573 -0.251,0.176 -0.266,0.087 -0.332,-0.026 -0.603,-0.153 -0.264,-0.16 0.238,0.261 0.271,0.136 1.569,0.321 0.095,-0.034 0.5,-0.338 0.667,-0.005 1.269,0.622 0.365,0.475 0.524,0.677 0.285,0.264 0.206,0.239 0.127,0.357 0.246,1.176 0.281,1.142 0.367,1.23 0.167,0.34 0.219,0.238 1.108,0.546 0.247,0.181 0.43,0.524 0.415,0.557 0.386,0.427 0.417,0.345 -0.202,0.179 -0.138,0.281 0.104,0.381 0.169,0.363 0.333,0.58 0.294,0.631 -0.108,-0.095 -0.114,-0.052 -0.156,0.016 -0.152,-0.03 -0.281,-0.198 -0.27,-0.243 -0.537,0.098 -0.298,-0.044 -0.259,0.007 0.491,0.14 0.537,0.01 1.184,1.057 0.4,0.624 0.238,0.821 -0.162,0.368 -0.252,0.238 -0.235,0.271 -0.221,0.307 0.657,0.449 0.142,-0.013 0.145,-0.063 0.14,-0.153 0.235,-0.373 0.121,-0.132 0.409,-0.048 0.343,0.029 0.341,0.083 0.301,-0.026 0.605,0.16 0.311,0.144 0.771,0.647 0.167,0.354 0.077,0.456 0.009,0.504 -0.13,0.459 -0.149,0.414 -0.092,0.533 -0.065,0.192 -0.091,0.15 -0.408,0.419 -0.271,0.172 -0.114,-0.075 -0.123,0.01 -0.013,0.101 0.129,0.213 0.001,0.257 -0.241,0.19 -0.245,0.081 -0.41,-0.101 -0.569,0.354 0.409,0.182 0.083,0.193 -0.102,0.339 -0.257,0.151 -0.286,0.067 -0.292,0.016 -0.242,0.083 -0.232,0.16 0.291,-0.084 0.202,0.074 0.127,0.284 0.115,0.082 0.57,0.121 0.352,-0.001 0.68,-0.069 0.327,0.001 0.116,0.052 0.002,0.235 -0.05,0.576 -0.09,0.119 -0.901,0.482 -0.185,0.336 -0.051,0.203 -0.527,-0.036 -0.247,0.215 -0.427,0.143 -0.33,0.151 -0.323,0.191 -0.266,0.057 -1.147,-0.227 -0.693,0.019 -0.939,0.198 -0.242,-0.033 -0.362,-0.189 -0.372,-0.128 -0.427,-0.056 -0.369,-0.176 0.23,0.337 -0.511,0.325 -0.236,0.064 -0.245,-0.01 -0.5,0.088 -0.465,-0.048 0.07,0.23 0.124,0.201 -0.101,0.087 -0.106,0.022 -0.882,-0.151 -0.125,0.028 -0.109,0.14 -0.321,-0.075 -0.312,-0.235 -0.331,-0.159 -0.348,-0.075 -0.276,0.026 -1.137,0.372 -0.227,0.372 -0.114,0.527 -0.164,0.467 -0.268,0.359 -0.319,0.047 -0.3,-0.249 -0.57,-0.274 -0.194,-0.186 -0.062,-0.011 -0.064,0.066 -0.224,0.084 -0.231,0.004 -0.357,0.074 -0.621,0.223 -0.251,0.151 -0.539,0.417 -0.11,0.115 -0.196,0.419 -0.299,0.074 -0.274,-0.268 -0.312,-0.094 -0.329,0.091 -0.199,0.143 -0.093,-0.116 -0.003,-0.238 0.24,-0.284 0.641,-0.215 0.563,-0.559 0.276,-0.341 0.11,-0.193 0.135,-0.123 0.176,-0.046 0.091,-0.213 0.781,-0.858 0.064,-0.197 0.039,-0.354 0.064,-0.341 0.636,-0.221 0.304,-0.719 0.084,-0.057 0.887,-0.132 0.658,0.011 0.654,0.141 0.335,0.013 0.336,-0.049 0.264,-0.195 0.451,-0.704 0.254,-0.311 0.291,-0.281 0.272,-0.321 0.441,-0.596 -0.298,0.206 -0.36,0.326 -0.209,0.189 -0.664,0.19 -0.286,0.194 -0.501,0.437 -0.096,0.036 -0.756,-0.105 -0.562,-0.567 -0.359,-0.232 -0.148,-0.027 -0.154,0.069 -0.328,0.071 -0.334,-0.012 0.171,-0.263 0.232,-0.147 -0.52,-0.102 -0.145,-0.08 -0.165,-0.185 -0.408,-0.031 -0.194,0.047 -0.328,0.244 -0.518,0.259 -0.625,-0.359 -0.122,-0.157 0.003,-0.305 -0.094,-0.242 -0.173,-0.085 0.221,-0.315 0.268,-0.21 0.588,-0.209 0.891,-0.497 0.5,-0.212 0.464,-0.366 0.192,-0.224 0.139,-0.307 0.138,-0.376 0.197,-0.307 -0.191,-0.073 -0.086,-0.231 0.023,-0.235 0.088,-0.209 -0.079,-0.262 -0.141,-0.274 0.008,-0.214 0.038,-0.229 -0.358,0.012 -0.357,0.072 -0.324,0.162 -0.314,0.22 -0.279,0.041 0.004,-0.176 0.121,-0.218 0.316,-0.312 0.338,-0.259 0.12,-0.197 0.095,-0.229 0.168,-0.184 0.442,-0.348 0.847,-0.392 0.126,-0.023 0.332,0.046 0.327,-0.06 0.286,-0.141 0.285,-0.03 0.642,0.407 -0.191,-0.63 0.283,-0.151 0.41,0.57 0.152,0.06 0.322,-0.083 -0.124,-0.096 -0.145,-0.006 -0.19,-0.086 -0.16,-0.183 -0.266,-0.582 0.015,-0.346 0.179,-0.36 0.198,-0.332 -0.166,-0.066 -0.133,-0.127 -0.038,-0.333 0.052,-0.295 0.356,-0.26 0.105,-0.396 0.044,-0.437 -0.059,-0.201 -0.354,0.032 -0.172,0.082 -0.154,0.129 -0.158,-0.008 -0.437,-0.484 -0.249,-0.367 -0.447,-0.778 -0.063,-0.467 0.357,-1.01 0.552,-0.649 0.65,-0.227 -0.126,-0.043 -0.991,-0.009 -0.327,0.08 -0.303,0.266 -0.171,0.082 -0.18,0.03 -0.164,0.132 -0.16,0.183 -0.167,0.118 -0.331,-0.031 -0.16,0.039 -0.115,-0.106 -0.097,-0.175 -0.126,-0.047 -0.141,0.054 -0.298,0.236 -0.302,0.139 -0.365,-0.149 -0.479,-0.278 -0.094,0.102 -0.106,0.258 -0.061,0.401 -0.34,-0.349 -0.289,-0.467 -0.098,-0.294 -0.007,-0.332 0.157,-0.129 0.171,0.118 0.254,-0.789 0.506,-1.032 0.179,-0.303 0.125,-0.397 -0.021,-0.26 -0.111,-0.22 -0.471,-0.5 0.006,-0.409 0.05,-0.462 0.128,-0.278 0.054,-0.053 0.625,0.007 -0.244,-0.144 -0.486,-0.419 0.009,-0.149 0.114,-0.389 -0.053,0.039 -0.104,0.18 -0.199,0.435 -0.121,0.101 -0.344,0.103 -0.063,0.213 -0.055,0.056 -0.171,0.024 -0.053,0.199 -0.038,0.013 -0.049,-0.214 -0.005,-0.356 0.068,-0.328 0.13,-0.257 0.504,-0.585 -0.245,0.181 -0.556,0.541 -0.284,0.355 -0.076,0.12 -0.023,0.101 10e-4,0.116 0.127,0.621 -0.037,0.287 -0.479,1.885 -0.091,0.188 -0.083,0.098 -0.079,0.023 -0.236,-0.036 -0.105,-0.141 0.001,-0.159 0.044,-0.239 0.199,-0.893 0.086,-0.249 0.128,-0.232 0.282,-0.406 -0.007,-0.027 -0.188,0.08 -0.08,-0.026 -0.058,-0.081 0.037,-1.211 0.153,-0.4 0.057,-0.583 0.132,-0.501 0.153,-0.366 0.117,-0.469 0.175,-0.209 0.047,-0.32 0.197,-0.347 0.152,-0.363 -0.082,0.036 -0.973,0.944 -0.248,0.171 -0.338,-0.046 -0.258,-0.106 -0.202,-0.223 -0.09,-0.429 -0.249,-0.011 -0.213,-0.074 0.002,-0.058 0.275,-0.234 0.441,-0.08 0.413,-0.376 -0.367,-0.254 0.031,-0.081 0.32,-0.217 0.407,-0.729 0.082,-0.673 -0.194,-0.317 -0.07,-0.208 -0.389,-0.232 -0.065,-0.297 0.045,-0.167 0.127,-0.163 0.191,-0.126 0.3,-0.122 -0.272,-0.13 -0.102,-0.154 -0.077,-0.223 -0.007,-0.129 0.141,-0.576 0.082,-0.238 0.161,-0.304 0.728,0.017 0.084,-0.134 0.083,-0.005 0.372,0.123 -0.055,-0.132 -0.609,-0.725 -0.055,-0.138 0.174,-0.392 0.012,-0.175 -0.025,-0.187 0.05,-0.143 0.193,-0.067 0.588,0.006 0.145,-0.066 -0.066,-0.19 -0.137,-0.25 -0.027,-0.21 0.032,-0.186 0.007,-0.375 0.027,-0.166 0.14,-0.249 0.115,-0.074 0.143,-0.043 0.323,0.083 0.123,0.1 0.142,0.237 0.104,-0.019 0.402,-0.258 0.121,-0.037 0.165,0.299 0.687,-0.238 0.923,-0.106 0.555,-0.157 0.584,-0.057 0.545,-0.179 0.578,0.082 0.02,0.104 -0.03,0.144 -0.142,0.389 z m 0.507,-1.217 -0.027,0.016 -0.103,-0.099 -0.168,-0.355 0.265,-0.071 0.125,0.044 -0.047,0.151 -0.045,0.314 z m -0.662,-0.284 -0.161,0.072 -0.159,-0.005 -0.248,-0.313 -0.094,-0.228 0.017,-0.151 0.104,-0.051 0.24,0.074 0.124,0.261 0.016,0.169 0.029,0.066 0.149,0.067 -0.017,0.039 z m 0.302,-1.277 -0.038,0.134 0.213,-0.003 0.309,0.114 0.187,0.014 0.156,0.142 -0.086,0.265 -0.093,0.075 -0.105,0.015 -0.368,-0.265 -0.482,0.11 -0.096,-0.034 -0.063,-0.073 -0.026,-0.091 0,-0.186 -0.026,-0.055 -0.175,0.176 -0.076,-0.021 -0.043,-0.084 -0.019,-0.174 0.019,-0.251 0.103,-0.359 0.173,-0.072 0.258,0.042 0.296,0.203 0.089,0.125 -0.002,0.1 -0.105,0.153 z m 1.427,-1.102 -0.317,0.006 0.164,-0.324 0.191,-0.082 0.361,0.036 -0.064,0.146 -0.335,0.218 z m -0.506,0.244 -0.241,0.136 -0.103,-0.112 -0.027,-0.352 -0.287,-0.151 -0.14,-0.094 -0.108,-0.178 0.027,-0.055 0.187,-0.073 0.32,0.323 0.131,0.26 0.237,0.077 0.03,0.04 -0.026,0.179 z m 3.988,-7.538 0.058,0.401 0.145,-0.104 0.219,0.384 0.112,0 0.184,-0.152 -0.037,0.357 -0.191,0.987 -0.054,0.167 -0.036,0.299 -0.038,0.059 -0.056,0.603 -0.129,0.198 -0.108,0.472 -0.044,0.046 -0.158,-0.181 0.158,-0.721 0.065,-0.42 -0.042,-0.218 -0.089,-0.197 -0.242,-0.006 -0.204,0.091 -0.043,-0.116 -0.006,-0.156 -0.049,-0.052 -0.271,0.011 -0.08,-0.043 -0.053,-0.144 -0.01,-0.115 0.245,-0.09 0.23,0.034 0.336,-0.229 -0.21,-0.769 -0.279,-0.073 -0.064,-0.075 0.054,-0.131 0.153,-0.071 0.235,-0.393 0.141,-0.062 0.175,0.011 -0.017,0.398 z m 0.746,0.135 -0.071,0.065 -0.274,-0.579 0.203,-0.665 0.246,0.021 0.039,0.174 -0.024,0.161 -0.125,0.014 -0.011,0.049 0.039,0.309 0.002,0.358 -0.024,0.093 z m 0.752,-1.706 0,0.066 -0.146,0.484 0.002,0.185 -0.235,-0.018 -0.037,-0.059 -0.044,-0.277 0.03,-0.295 0.033,-0.077 0.068,-0.031 0.074,0.058 0.117,-0.15 0.061,0.003 0.077,0.111 z",
                        title: "United Kingdom",
                        id: "GB",
                    },
                    {
                        d:
                            "m 605.19975,333.9394 -0.068,0.134 -0.161,0.243 -0.128,0.124 -0.142,0.02 -0.141,0.057 -0.049,0.13 -0.006,0.168 0.024,0.121 0.036,0.045 0.144,0.04 0.142,0.353 0.223,0.178 0.348,0.202 0.309,0.231 0.151,0.212 -0.029,0.154 -0.101,0.318 -0.258,0.265 -0.215,0.067 -0.076,-0.025 -0.14,-0.082 -0.283,-0.205 -0.307,-0.162 -0.236,0.053 -0.155,0.061 -0.307,-0.072 -0.363,-0.14 -0.189,-0.138 -0.083,-0.102 0.056,-0.181 -0.823,-0.327 -0.397,-0.091 -0.179,0.099 -0.605,0.492 -0.072,0.05 -0.462,0.068 -10e-4,0.04 0.105,0.106 -0.02,0.033 -0.775,0.011 -0.258,0.064 -0.69,-0.083 -0.227,0.037 -0.194,0.077 -0.472,0.088 -0.326,0.103 -0.416,0.054 -0.429,0.005 -0.147,0.031 0.006,-0.071 -0.023,-0.109 -0.087,-0.079 -0.122,-0.05 -0.224,0.019 -0.207,-0.053 -0.147,-0.138 -0.034,-0.106 0.085,-0.086 -0.062,-0.071 -0.258,-0.17 -0.422,-0.425 -0.239,-0.095 -0.095,-0.267 -0.095,-0.057 -0.201,-0.025 -0.212,0.026 -0.046,0.03 -0.065,0.043 -0.166,0.333 -0.117,0.113 -0.286,-0.053 -0.237,-0.078 -0.193,-0.044 -0.375,-0.028 -0.426,-0.006 -0.287,0.237 -0.124,-0.031 -0.218,-0.116 -0.352,-0.096 -0.186,-0.075 0.538,-0.703 0.16,-0.419 0.005,-0.254 0.007,-0.32 -0.28,-0.666 -0.24,-0.948 -0.25,-0.992 -0.195,-0.298 -0.815,-0.345 -0.189,-0.392 -0.631,-0.507 -0.877,-0.221 -0.174,-0.094 -0.762,-0.64 -0.596,-0.413 0.128,-0.25 0.17,-0.264 0.184,-0.064 0.539,0.104 0.497,0.119 0.362,-0.085 0.431,0.208 0.394,0.238 0.396,0.168 0.772,0.159 0.288,0.219 0.336,0.219 1.317,0.111 0.106,-0.034 0.097,-0.032 0.442,-0.079 0.391,0.014 0.413,0.266 0.264,-0.016 0.282,-0.04 0.363,0.142 0.285,0.158 0.024,0.159 0.25,0.232 0.726,0.353 0.589,0.2 0.183,0.14 0.448,0.231 0.045,0.073 -0.009,0.095 -0.128,0.173 -0.032,0.153 0.06,0.089 0.186,0.084 0.368,0.019 0.133,-0.11 0.275,-0.079 0.273,-0.142 0.364,-0.189 0.495,-0.172 0.198,0 0.19,0.053 0.133,0.095 0.223,0.353 0.223,-0.494 0.057,-0.037 0.204,0.1 0.359,0.137 0.249,0.073 0.135,0.102 0.38,0.45 0.615,-0.023 0.26,0.069 0.14,0.074 0.062,0.087 -0.11,0.446 -0.152,0.464 0.013,0.111 0.246,0.175 0.336,0.184 0.18,0.148 0.123,0.133 0.265,0.101 0.313,0.062 0.148,0.008 0.155,0.112 0.403,0.209 z",
                        title: "Georgia",
                        id: "GE",
                    },
                    { d: "m 301.69175,429.1834 -0.187,0.011 0.074,-0.105 0.016,-0.18 0.098,-0.219 0.153,-0.147 0.15,0.039 -0.056,0.482 z", title: "Grenada", id: "GD" },
                    {
                        d:
                            "m 329.93275,451.5904 -0.087,0.06 -0.234,0.132 -0.107,0.175 -0.063,0.169 -0.145,0.114 -0.139,0.145 -0.044,0.116 -0.129,0.093 -0.025,0.154 -0.327,0.544 -0.131,0.244 -0.188,0.26 -0.117,0.097 -0.159,0.154 -0.081,0.179 0,0.185 -0.111,0.221 -0.062,0.191 -0.105,0.111 -0.277,0.604 -0.014,0.208 -0.066,0.123 -0.197,0.288 -0.133,0.173 -0.233,0.13 -0.244,0.141 -0.092,0.154 -0.173,0.078 -0.126,0.005 -0.203,-0.056 -0.275,-0.027 -0.139,0.018 -0.063,-0.076 -0.094,-0.175 -0.137,-0.125 -0.088,0.043 -0.185,0.125 -0.217,0.074 -0.154,-0.025 -0.336,-0.086 -0.143,-0.044 -0.043,-0.074 -0.05,-0.055 -0.074,0.024 -0.099,0.093 -0.132,0.096 -0.196,0.128 -0.403,0.229 -0.113,0.082 -0.104,-0.045 -0.171,-0.045 -0.182,-0.002 -0.393,-0.149 -0.23,-0.106 -0.1,-0.133 -0.116,-0.057 -0.068,-0.037 0.032,-0.025 0.102,-0.019 0.091,-0.002 0.142,-0.203 0.234,-0.127 0.408,-0.703 0.172,-0.291 0.021,-0.159 0.048,-0.332 -0.091,-0.404 0.043,-0.113 0.35,-0.487 0.151,-0.266 0.009,-0.229 0.044,-0.165 -0.043,-0.086 -0.08,-0.025 -0.134,-0.214 -0.086,-0.177 -0.238,-0.182 -0.163,-0.186 -0.267,-0.428 0.024,-0.24 -0.076,-0.086 -0.082,-0.089 0.006,-0.108 -0.056,-0.27 -0.068,-0.252 -0.026,-0.16 0.067,-0.274 -0.04,-0.304 -0.087,-0.16 -0.024,-0.245 0.018,-0.218 0.074,-0.124 -0.015,-0.153 0.338,-0.487 0.257,-0.282 0.236,-0.198 0.199,-0.148 0.269,-0.74 0.195,-0.26 0.204,-0.038 1.102,0.613 0.517,0.057 1.041,0.331 0.377,0.424 0.873,0.706 0.459,0.222 0.004,0.185 -0.1,0.294 0.294,-0.257 0.454,0.407 0.129,0.199 0.141,0.368 -0.049,0.237 -0.063,0.122 -0.003,0.095 0.135,-0.131 0.076,-0.103 0.023,-0.247 0.11,-0.306 0.148,-0.006 0.118,0.183 0.244,0.793 0.092,0.162 0.035,0.252 -0.013,0.112 z",
                        title: "French Guiana",
                        id: "GF",
                    },
                    { d: "m 467.84475,303.4184 -0.099,0.284 -0.257,-0.096 -0.02,-0.074 0.292,-0.165 0.06,0.001 z", title: "Guernsey", id: "GG" },
                    {
                        d:
                            "m 474.70275,431.7354 0.179,0.171 0.04,0.098 -0.065,0.369 -0.132,0.257 -0.083,0.242 0.012,0.12 0.08,0.121 0.273,0.189 0.139,0.123 0.166,0.186 0.19,0.182 0.325,0.237 0.138,0.043 -0.007,0.066 -0.045,0.091 -0.03,0.882 -0.025,0.228 -0.023,0.115 -0.031,0.329 -0.034,0.047 -0.061,-0.004 -0.057,0.013 -0.014,0.065 0.023,0.068 0.196,0.047 -0.043,0.05 -0.145,0.045 -0.068,0.099 0.03,0.113 -0.081,0.091 0.023,0.061 0.052,0.044 0.083,-0.016 0.229,-0.152 0.096,-0.016 0.119,0.031 0.219,0.232 0.009,0.113 -0.089,0.387 -0.087,0.299 -0.016,0.399 0.092,0.223 -0.013,0.123 -0.1,0.106 -0.226,0.154 0.017,0.105 0.103,0.196 0.191,0.218 0.373,0.27 0.196,0.351 0.005,0.143 -0.114,0.143 -0.135,0.124 -0.044,0.179 0.061,1.176 -0.295,0.51 -0.003,0.146 0.03,0.168 0.078,0.103 0.15,0.028 0.123,0.098 -0.043,0.358 -0.065,0.364 -0.011,0.177 -0.036,0.084 -0.117,0.068 -0.042,0.115 0.03,0.142 -0.022,0.105 0.062,0.136 0.135,0.169 0.216,0.42 0.082,0.033 0.038,0.089 -0.024,0.085 0.084,0.186 0.24,0.186 0.252,0.162 0.204,0.023 0.048,0.145 0.134,0.185 0.097,0.081 0.155,0.053 0.127,0.028 0.007,0.156 -0.23,0.106 -0.155,0.161 -0.118,0.245 -0.164,0.27 -0.564,0.14 -0.216,10e-4 -1.157,0.007 -1.083,0.53 -0.624,0.189 -0.384,0.298 -0.516,0.212 -0.36,0.258 -0.749,0.123 -1.227,0.404 -0.384,0.161 -0.388,0.281 -0.631,0.329 -0.249,-0.004 -0.494,-0.308 -0.372,-0.154 -0.91,-0.236 -0.679,-0.092 -0.328,-0.101 -0.09,-0.017 0.077,-0.111 0.19,-0.007 0.198,0.033 0.151,-0.084 0.221,-0.011 0.058,-0.089 0.018,-0.222 -0.002,-0.18 0.077,-0.08 0.02,-0.212 -0.109,-0.469 -0.077,-0.054 -0.396,-0.066 -0.03,-0.094 -0.071,-0.098 -0.076,-0.242 -0.086,-0.36 -0.139,-0.447 -0.267,-0.736 -0.066,-0.261 -0.045,-0.265 -0.01,-0.317 0.055,-0.118 -0.008,-0.164 -0.025,-0.164 0.188,-0.375 0.368,-0.46 0.077,-0.166 0.069,-0.115 0.01,-0.166 0.065,-0.536 0.176,-0.648 0.111,-0.245 0.075,-0.133 0.09,-0.216 0.023,-0.101 0.339,-0.255 0.156,-0.068 0.035,-0.101 -0.053,-0.109 0.023,-0.075 0.081,-0.037 0.125,-0.03 0.091,-0.105 -0.143,-0.801 -0.116,-0.799 -0.007,-0.068 -0.068,-0.11 -0.068,-0.33 -0.115,-0.194 -0.16,-0.056 0.001,-0.182 0.161,-0.309 0.042,-0.18 -0.077,-0.054 -0.011,-0.141 0.055,-0.227 -0.027,-0.14 -0.03,-0.148 -0.167,-0.351 -0.041,-0.249 0.086,-0.145 -0.003,-0.318 -0.09,-0.491 -0.015,-0.31 0.062,-0.129 -0.03,-0.124 -0.122,-0.117 -0.009,-0.113 0.104,-0.111 -0.013,-0.086 -0.129,-0.063 -0.115,-0.152 -0.103,-0.239 0.021,-0.385 0.193,-0.708 0.024,-0.059 0.219,0.004 0.001,0.03 0.681,-0.007 0.778,-0.008 0.929,-0.009 0.845,-0.008 0.037,-0.032 0.14,-0.039 0.853,0.072 0.534,-0.036 0.226,0.023 0.166,0.048 0.368,-0.029 0.197,0.018 0.148,0.176 0.06,-10e-4 0.083,-0.075 0.147,-0.086 0.15,-0.067 0.108,-0.139 0.065,-0.105 0.097,0.021 0.14,-0.006 0.093,-0.088 0.037,-0.136 z",
                        title: "Ghana",
                        id: "GH",
                    },
                    { d: "m 459.92475,354.5694 -0.009,0.047 0.005,0.034 -0.007,0.094 -0.019,-0.002 -0.032,-0.048 0.003,-0.065 0.031,-0.017 -0.021,-0.04 z", title: "Gibraltar", id: "GI" },
                    {
                        d:
                            "m 390.83275,1.1244015 2.697,1.497 1.426,1.724 0.299,-0.057 1.933,0.657 1.835,0.817 3.051,2.11 0.428,0.687 -0.33,0.56 -0.758,0.384 -3.899,0.6819995 -7.073,0.833 -4.047,1.605 -1.287,0.082 -0.112,2.358 0.55,0.128 0.901,-0.315 3.17,-2.365 1.186,-0.392 2.213,0.198 2.873,0.892 1.159,-0.313 2.067,0.233 2.417,-0.682 2.855,-1.481 0.781,3.29 1.052,3.227 0.833,-0.354 0.713,0.18 0.241,1.046 0.39,0.441 0.808,-0.236 2.475,0.907 1.699,1.619 0.64,0.749 0.307,1.062 0.174,0.846 -0.267,1.035 -1.062,1.828 -1.343,1.661 -1.812,1.267 -2.088,0.789 -16.045,2.611 -0.543,0.615 -0.322,1.559 0.214,2.004 0.75,0.311 1.752,-1.123 3.031,-1.072 2.227,0.051 5.324,0.915 1.571,2.369 0.831,3.574 1.842,-0.796 0.394,-0.611 0.29,-1.065 0.231,-1.151 0.173,-1.236 0.193,-0.847 0.214,-0.451 0.459,-0.378 1.057,-0.457 2.772,-0.445 0.667,0.127 0.479,1.717 0.104,0.995 0.035,1.287 -0.015,1.574 -0.065,1.852 -0.236,1.812 -0.767,3.118 -0.617,1.673 -0.666,1.196 -1.275,2.696 -0.442,0.713 -1.402,3.075 -0.348,1.406 -0.021,1.021 0.241,0.194 0.407,-0.959 0.151,-0.688 0.262,-0.724 2.066,-1.923 0.443,-0.54 1.352,-2.326 0.863,-0.879 0.709,-0.927 0.376,-0.66 2.077,-4.757 1.083,-1.451 1.137,-0.003 0.201,2.449 1.363,0.375 0.592,-0.105 0.951,0.59 0.417,0.484 0.709,0.246 0.731,0.572 0.645,-0.615 0.188,-0.387 0.623,-1.765 0.842,-1.579 0.78,-1.993 0.259,-0.487 0.41,-0.443 0.426,-0.175 1.16,-0.947 0.294,-0.066 0.626,0.3 2.766,0.156 1.509,0.488 2.101,1.347 1.464,0.733 0.678,0.646 0.987,1.377 0.796,1.429 0.37,0.417 -0.014,0.45 -0.275,0.619 -1.972,2.146 -0.646,1.419 -1.866,2.642 -0.912,0.898 -0.991,0.351 -1.103,0.084 -0.716,0.374 -0.106,0.355 0.51,1.07 0.224,0.758 -0.032,0.671 -0.537,0.99 -0.203,0.223 -1.938,0.73 -0.978,1.232 -1.276,0.149 -0.902,-0.14 -1.24,1.315 0.485,1.062 0.444,0.458 1.381,0.958 0.013,0.548 -0.66,1.101 -0.901,1.289 -1.065,0.888 -0.4,0.132 -0.505,-0.223 -0.466,0.048 -1.026,0.408 -0.977,0.065 -1.745,-0.577 -0.944,-0.67 -0.497,-0.232 -0.626,0.064 -0.241,0.271 -0.987,1.593 -0.484,1.078 -0.311,1.096 -0.133,1.186 0.045,1.274 0.12,0.868 0.195,0.468 0.234,0.283 0.41,0.148 0.902,-0.14 0.354,0.08 0.108,0.254 0.195,0.802 -0.034,0.752 -0.164,1.052 -0.126,1.219 -0.09,1.382 0.048,0.75 0.365,0.164 0.171,-0.054 0.199,0.246 0.226,0.543 0.17,0.573 0.113,0.602 -0.059,0.495 -0.233,0.388 -0.525,0.437 -1.293,0.859 -0.131,0.261 -0.102,0.52 -0.072,0.778 -0.156,0.705 -0.24,0.63 -0.218,0.375 -0.419,0.166 -0.549,0.022 -0.617,0.36 -1.454,2.085 -0.022,0.23 0.544,0.663 -0.023,0.578 -0.671,2.459 -0.184,1.205 -0.146,1.638 -0.239,1.368999 -0.333,1.106 -0.328,1.268 -0.322,1.424 0.05,1.085 0.423,0.751 0.559,-0.607 0.695,-1.982 0.756,-0.864 0.816,0.271 0.711,0.396 0.908,0.779 0.76,0.484 0.656,0.635 0.271,0.533 0.272,0.749 0.002,0.471 -0.481,0.253 -0.159,-0.081 -1.204,-1.235 -0.586,-0.309 -0.778,0.372 -0.678,0.559 0.609,2.231 0.651,1.016 1.188,0.461 0.62,0.484 0.453,0.617 0.354,0.3 0.475,-0.132 0.639,-0.606 0.891,-0.033 0.402,0.301 0.291,0.56 0.131,1.042 -0.029,1.514 -0.097,1.131 -0.165,0.756 -0.321,1.008 -0.268,0.183 -0.377,-0.055 -0.351,-0.206 -0.325,-0.359 -0.492,-0.28 -0.989,-0.303 -1,-0.66 -0.56,-0.163 -1.185,0.084 -1.278,0.418 -0.05,0.547 -1.838,1.897 -0.377,-0.026 -0.51,-0.649 -0.714,-0.624 -0.418,0.004 -0.618,0.79 -0.154,0.305 0.008,0.287 0.455,0.677 0.185,0.155 0.235,0.13 0.817,0.162 0.355,0.177 0.334,2.076 0.53,1.27 0.227,0.258 0.2,0.093 0.65,-0.046 0.836,-0.427 0.292,0.342 0.616,0.417 0.36,0.104 0.438,-0.017 0.493,0.158 0.676,1.155 -0.266,1.444 0.423,1.147 0.676,1.175 0.16,0.428 0.065,0.772 0.015,0.507 0.051,0.463 0.086,0.416 0.089,0.814 0.093,1.206 -0.024,0.978 -0.143,0.754 -0.282,0.545 -0.42,0.338 -0.343,-0.089 -0.266,-0.516 -0.375,-0.552 -0.483,-0.588 -0.803,-0.069 -1.182,1.732 -0.527,0.086 -0.429,0.171 -0.457,0.749 -0.673,0.449 -0.594,-0.178 -1.043,-0.87 0.379,0.582 0.542,0.679 0.338,0.351 0.249,0.076 0.273,-0.081 0.394,-0.277 0.889,-0.771 0.235,-0.118 0.199,0.055 0.163,0.228 0.188,0.661 0.211,1.088 -0.027,0.921 -0.266,0.755 -0.228,0.483 -0.189,0.212 0,0.167 0.497,0.192 0.703,-0.979 0.223,-1.226 0.322,-1.425 0.569,-0.477 0.644,0.477 0.52,1.331 0.735,2.421 0.31,0.25 0.394,0.575 0.174,0.703 -0.046,0.829 -0.084,0.6 -0.122,0.372 -0.152,0.236 -0.274,0.15 -0.504,0.12 -1.126,-0.251 -0.586,-0.006 0.073,0.808 -1.186,0.692 -1.337,0.271 -1.266,-0.54 -1.051,-0.833 0.345,-1.171 0.197,-1.31 -0.508,-0.873 -0.111,-0.019 0.175,1.347 -0.147,0.513 -0.574,0.623 -0.405,0.287 -0.036,0.167 0.199,0.145 0.129,0.278 0.061,0.411 -0.068,0.414 -0.198,0.417 -0.108,0.349 -0.018,0.282 0.181,0.342 0.381,0.401 0.413,0.198 1.935,0.086 0.775,0.215 1.838,0.941 0.082,0.288 -0.311,1.669 -0.17,1.588 -0.357,0.289 -1.934,0.068 -0.623,0.246 -0.912,0.722 -0.876,0.862 -0.454,0.006 -1.798,-0.752 -0.689,-0.504 -1.48,-1.434 -1.114,-2.206 -0.511,0.921 -0.313,0.438 -0.323,0.227 -0.311,0.035 -0.3,-0.157 -0.34,-0.347 -0.571,-0.808 -0.681,-0.803 -0.477,-0.383 -0.018,0.109 0.282,0.473 0.412,0.544 1.043,1.589 0.367,0.399 -0.037,0.283 -0.658,0.251 -0.8,0.54 -0.391,0.396 -0.604,0.958 -0.21,0.148 -0.904,0.24 -0.298,-0.058 -0.668,-0.526 -1.007,-0.345 -0.593,-0.307 -0.824,-0.558 0.284,0.61 1.587,0.925 0.174,0.297 -0.325,0.552 -0.199,0.201 -0.378,0.042 -0.557,-0.115 -0.57,0.023 -0.583,0.162 -0.25,0.206 0.082,0.251 0.139,0.228 0.196,0.206 0.184,-0.002 0.444,-0.623 0.336,-0.044 0.889,0.154 0.899,-0.487 0.648,-0.211 0.486,-0.054 1.767,-0.749 0.367,-0.842 0.593,-0.339 1.318,-0.26 1.276,0.133 0.656,0.109 0.531,0.798 0.712,0.563 0.594,0.64 0.696,0.21 0.403,0.847 1.128,0.941 0.718,0.202 0.443,0.446 0.036,1.877 0.047,0.804 -0.191,2.206 -0.577,0.504 0.115,1.148 -0.151,0.922 -0.573,-0.349 -0.587,-0.607 -1.407,-0.946 -1.309,-0.611 -0.509,-0.556 -0.599,-0.432 -0.813,-1.768 -0.529,-2.225 -0.232,-1.111 -0.445,-0.062 -0.572,0.298 -0.5,0.315 -0.239,0.537 -1.698,0.736 -0.617,0.502 -0.352,-0.015 -1.268,0.754 0.508,0.36 0.237,0.045 0.513,-0.203 0.308,-0.26 1.156,-0.714 0.928,-0.123 0.337,-0.309 0.709,-0.442 0.481,-0.117 0.067,0.112 0.052,0.202 0.339,2.703 -0.142,0.712 -0.382,0.308 -0.817,0.503 -0.212,0.244 0.241,0.426 0.768,-0.401 0.498,-0.437 0.266,0.159 0.435,0.667 0.491,0.341 1.248,1.018 0.591,0.558 0.832,0.537 0.94,0.742 0.245,0.261 0.859,0.383 0.184,0.131 0.355,1.296 0.296,0.144 0.855,0.082 -0.15,0.5 -0.835,1.105 -0.432,0.352 -0.107,0.216 0.041,0.386 0.025,0.645 0.174,1.18 0.196,-1.092 0.137,-0.518 0.183,-0.155 0.18,-0.023 0.584,-0.492 0.587,0.264 0.152,1.239 0.075,1.148 -0.051,0.986 0.064,1.521 -0.022,0.511 0.139,0.441 0.144,1.816 0.144,0.542 -0.289,0.484 -0.893,0.21 -0.353,-0.238 -0.883,0.08 -10e-4,-0.426 -0.043,-0.49 -0.003,-0.343 -0.059,-0.311 -0.042,-1.798 -0.25,0.446 -0.015,0.365 -0.066,0.371 -0.153,1.927 -0.228,0.47 -0.707,-0.113 -0.696,0.069 -0.385,-0.071 -1.302,-0.875 -0.504,-0.796 -0.446,-1.203 -0.275,-1.131 -0.104,-1.059 -0.313,-0.866 -0.52,-0.671 -0.614,-0.545 -0.708,-0.419 -0.622,-0.542 -0.536,-0.666 -0.589,-0.52 -0.644,-0.372 -0.916,-0.16 -1.339,0.059 -0.904,-0.42 -0.215,0.036 -0.211,0.217 0.155,0.617 1.038,0.282 0.8,0.064 1.061,-0.04 0.649,0.158 0.238,0.355 0.164,0.63 0.09,0.902 -0.21,0.712 -0.763,0.787 -0.402,0.368 -1.175,0.704 -0.398,0.156 -0.98,0.048 -0.753,-0.067 -0.991,-0.35 -0.562,-0.071 -1.163,-0.047 -0.267,0.117 0.3,0.375 0.493,0.212 0.347,0.252 0.036,0.477 -0.125,0.705 -0.129,0.491 -0.213,0.368 -0.763,0.694 -0.316,0.219 -1.422,0.723 -0.099,0.139 0.333,-0.019 0.899,-0.256 0.259,0.007 1.476,0.625 1.176,-0.037 2.382,-0.577 0.196,0.011 0.156,0.091 0.158,0.216 0.16,0.342 -0.192,0.331 -0.544,0.318 -0.847,0.313 -0.367,0.211 -0.351,0.32 -0.653,0.767 -0.191,0.792 0.687,0.3 0.309,-0.38 0.364,-0.847 0.328,-0.499 0.773,-0.339 0.944,0.172 0.729,-0.201 1.49,-0.843 0.267,-0.052 2.192,0.483 1.987,0.945 1.048,0.346 1.387,0.204 2.494,-0.093 0.219,0.148 -0.081,0.333 -0.145,0.281 -0.416,0.391 -0.505,0.258 -0.312,0.073 -0.266,0.184 -0.597,0.18 -0.153,0.146 0.207,0.636 -0.098,0.098 -0.526,0.011 -0.886,0.413 -0.727,-0.029 -0.152,0.06 0.138,0.153 0.146,0.295 0.155,0.436 -0.085,0.311 -0.326,0.185 -0.247,0.06 -0.853,-0.259 -0.138,0.039 0.125,0.187 0.071,0.284 0.017,0.382 -0.209,0.319 -0.436,0.257 -0.813,0.706 -0.354,0.201 -0.746,0.166 -0.157,0.092 0.303,0.538 -0.034,0.215 -0.504,0.579 -0.763,0.36 -0.104,0.194 -0.07,0.52 -0.056,0.207 -0.202,0.297 -0.724,0.564 -0.513,0.28 -0.254,0.229 -0.315,0.382 -0.397,0.202 -0.479,0.023 -0.454,0.143 -0.746,0.405 -0.52,0.134 -1.642,0.696 -0.772,0.111 -0.668,0.248 -1.375,0.661 -0.655,0.212 -0.454,0.251 -0.496,0.072 -0.807,-0.163 -0.435,-0.006 -0.268,0.099 -0.245,0.202 -0.405,0.552 -0.344,0.042 -1.128,-0.437 0.023,0.198 0.298,0.473 -0.014,0.334 -0.671,0.339 -0.361,0.086 -0.533,-0.139 -0.705,-0.366 -0.905,-0.766 -1.109,-1.175 -0.534,-0.399 0.039,0.379 0.124,0.37 0.209,0.359 0.042,0.26 -0.124,0.161 -0.163,0.081 -0.203,0.001 -0.035,0.091 0.331,0.558 0.261,0.571 -0.024,0.54 -0.31,0.51 -0.266,0.298 -0.222,0.088 -1.317,1.262 -0.367,0.159 -0.167,0.155 -0.137,0.232 -0.383,1.035 -0.155,0.315 -0.308,0.409 -0.129,0.071 -0.037,0.167 0.056,0.262 -0.085,0.436 -0.225,0.608 -0.767,1.668 -0.618,1.542 -0.271,0.502 -0.198,0.212 -0.125,-0.076 -0.307,0.039 -0.149,0.269 -0.135,0.485 -0.147,0.369 -0.159,0.253 -1.24,1.088 -0.319,0.201 -0.287,-0.127 -0.339,0.049 -0.703,-0.573 -0.122,-0.211 -0.454,-0.473 0.015,0.247 0.076,0.136 0.063,0.199 0.159,0.244 0.352,1.277 -0.278,0.261 -0.249,0.297 -0.635,0.501 -0.687,0.836 -0.253,0.233 -0.057,-0.681 0.029,-0.204 -0.388,-0.331 0.012,0.238 -0.04,0.222 -0.281,0.882 -0.078,0.152 -0.139,-0.034 -0.302,0.162 -0.309,-0.077 -0.263,-0.4 -0.104,-0.208 -0.478,0.571 -0.232,-0.015 -0.039,0.478 -0.225,0.435 -0.297,0.188 -0.415,-0.015 -0.254,0.257 -0.563,-0.275 -0.13,-0.517 0.446,-0.711 0.126,-0.294 -0.082,-0.363 0.108,-0.47 0.852,-1.499 0.577,-0.764 -0.033,-0.137 -0.784,-0.167 -0.685,-0.263 -0.667,-0.09 -0.295,0.089 0.47,0.44 0.665,0.426 -0.327,0.406 -0.282,0.43 -0.292,1.165 -0.187,0.475 -0.725,-0.545 -0.343,-0.185 0.218,0.605 0.635,0.572 0.041,0.188 -0.004,0.677 -1.216,0.595 -1.269,0.09 -0.911,0.168 -1.537,0.204 -0.597,0 -0.051,0.228 1.503,1.036 0.219,0.189 -0.209,0.355 -0.311,0.22 -0.488,0.757 -0.255,0.26 -0.632,0.357 -1.163,-0.398 -0.598,0.178 -0.572,-0.125 -0.012,0.435 0.171,0.317 0.173,0.785 0.384,-0.061 0.488,-0.247 0.377,0.593 0.248,1 0.433,0.505 0.192,0.39 0.078,0.367 -0.27,0.365 -0.559,0.514 -0.62,0.096 0.034,0.406 -0.268,0.291 -0.569,-0.085 -0.266,-0.204 -0.276,-0.096 -1.132,-0.109 1.14,0.78 0.405,0.362 0.18,-0.214 0.395,-0.052 0.583,0.198 -0.097,1.306 0.255,1.051 0.031,0.235 -0.621,0.626 -0.01,0.583 -0.37,0.162 -0.398,-0.037 -0.021,0.637 -0.27,0.396 0.048,0.248 0.077,0.221 -0.246,0.402 -0.222,0.488 -0.318,0.426 -0.168,-0.044 -0.505,0.028 -0.607,-0.036 -0.492,-0.554 -0.204,-0.185 -0.23,-0.121 0.088,0.357 0.138,0.214 0.454,0.4 0.836,0.493 -0.026,0.349 -0.223,0.151 -0.521,0.945 -0.185,0.021 -0.234,0.243 -0.722,-0.082 -0.303,-0.097 -0.891,0.062 -0.303,-0.083 -0.26,0.04 0.242,0.266 0.51,0.239 0.58,0.24 0.882,0.181 -0.032,0.342 -0.221,0.28 0.127,0.417 -0.099,0.298 -0.042,0.354 -0.206,0.82 0.24,0.56 0.261,0.273 -0.03,0.359 0.123,0.572 -0.392,0.509 -0.325,-0.019 -0.463,0.114 -0.154,0.224 0.734,0.211 -0.067,0.379 -0.2,0.474 -0.21,1.021 -0.427,1.738 -0.2,1.71 -0.917,1.394 -0.325,0.039 -0.082,0.055 -0.447,-0.071 -0.702,-0.321 -0.543,-0.106 -0.367,-0.004 -0.047,0.16 0.304,0.258 0.465,0.108 0.372,0.171 0.667,0.159 0.232,0.308 0.159,0.328 -0.023,0.18 -10e-4,0.212 0.119,1.139 -0.314,0.392 -0.24,0.354 -0.833,-0.049 -0.145,-0.124 -0.804,-0.373 0.049,0.175 0.582,0.506 0.203,0.252 -0.136,0.052 -0.235,0.019 -0.327,0.17 -0.591,-0.092 0.033,-0.255 0.112,-0.263 -0.27,0.045 -0.301,0.133 -0.175,-0.049 -0.146,0.015 -0.083,-0.132 -0.114,-0.515 0.136,-0.259 0.487,-0.672 0.155,-0.362 -0.135,-0.165 -0.348,0.388 -0.359,0.615 -0.16,0.371 -0.225,0.072 -0.559,-0.187 -1.591,-0.861 0.047,-0.525 -0.015,-0.436 0.464,-0.055 0.337,-0.19 0.302,-0.233 0.34,-0.425 0.312,-0.704 -0.04,-0.054 -0.915,0.898 -0.563,0.299 -0.272,0.055 -0.136,-0.132 -0.453,-0.288 -0.294,-0.131 -0.671,-0.214 -0.119,-0.115 -0.197,-0.092 -0.268,-0.92 0.346,-1.124 0.238,-0.328 0.151,-0.38 0.085,-0.505 -0.059,-0.216 -0.202,0.074 -0.094,0.173 0.015,0.271 -0.116,0.188 -0.8,0.431 -0.802,0.349 -0.38,0.33 -0.247,0.257 -0.193,0.252 -0.295,-0.022 -0.407,0.051 -0.279,0.164 -0.408,-0.101 -0.266,-0.243 -0.321,-0.028 -0.36,0.117 -0.249,-0.01 0.021,0.165 0.166,0.405 -0.275,0.027 -0.522,0.016 -0.263,-0.118 -0.206,-0.154 -0.171,-0.215 0.103,-0.282 0.84,-0.518 0.381,-0.301 -0.249,-0.103 -0.806,0.093 -0.134,-0.078 -0.54,0.047 0.023,-0.775 -0.131,-0.193 -0.009,-0.091 -0.187,-0.217 -0.177,-0.054 -0.11,-0.078 -0.912,-0.175 -0.119,-0.435 -0.063,-0.449 -0.174,-0.559 -0.437,-0.146 -0.236,-0.243 0.188,-0.249 0.082,-0.316 -0.202,-0.145 -0.129,-0.223 0.019,-0.145 -0.164,-0.393 -0.049,-0.307 0.188,-0.289 0.516,-0.327 0.167,-0.132 0.086,-0.143 0.592,-0.241 -0.504,-0.17 -0.315,-0.026 -0.23,0.08 -0.212,0.32 -0.198,0.212 -0.772,0.069 -0.114,-0.11 -0.054,-0.452 0.044,-0.349 0.321,-0.492 -0.37,-0.244 -0.339,-0.08 -0.385,-0.229 -0.356,-0.242 -0.306,-0.282 -0.298,-0.333 -0.095,-0.042 0.107,-0.349 0.061,-0.288 0.009,-0.62 -0.12,-0.258 0.267,-0.532 0.359,-0.583 0.794,-0.869 -0.84,0.419 -0.69,0.911 -0.146,0.042 -0.051,-0.165 -0.262,-0.591 -0.197,-0.162 -0.088,-0.178 -0.393,-0.317 -0.17,-0.244 -0.242,-0.472 -0.344,-0.564 -0.489,-1.117 -0.79,-1.295 -0.195,-0.732 0.245,-0.933 -0.271,-0.646 0.75,-0.3 1.073,-0.337 0.557,-0.281 0.321,-0.084 0.682,-0.052 0.228,-0.283 -0.379,0.072 -0.255,-0.037 -0.016,-0.132 0.094,-0.235 0.061,-0.304 -0.13,0.055 -0.667,0.523 -0.986,0.414 -0.77,0.23 -0.125,-0.012 -0.27,0.139 -0.155,0.04 -0.12,-0.04 -0.272,-0.396 -0.073,-0.259 0.489,-0.705 0.365,-0.966 0.483,-0.635 0.341,-0.08 0.571,0.034 0.201,0.056 -0.064,-0.377 0.024,-0.183 0.463,-0.22 0.54,-0.098 0.384,0.069 0.242,0.444 0.311,0.816 0.419,0.275 -0.019,-0.391 -0.217,-0.505 -0.081,-0.778 -0.276,-0.329 -0.221,-0.162 -0.612,0.079 -0.368,-0.572 -0.083,-0.21 -0.009,-0.28 -0.368,-0.824 -0.118,-0.414 -0.195,-0.552 -0.104,-0.03 0.132,0.695 0.172,0.487 0.246,1.066 0.122,0.428 -0.165,0.338 -0.311,0.334 -0.275,0.199 -0.65,0.238 0.14,-0.52 0.089,-0.512 -0.327,0.182 -0.304,0.372 -0.105,0.514 -0.195,0.465 -0.579,1.137 -0.228,0.628 -0.216,0.309 -0.246,0.085 -0.213,-0.245 -0.181,-0.577 -0.085,-0.453 -0.01,-1.18 0.023,-0.553 -0.099,-0.748 -0.313,-1.753 -0.066,-0.629 -0.529,-0.335 -0.008,-0.108 -0.138,-0.36 -0.107,-0.361 0.088,-0.132 0.126,-0.095 0.791,-0.534 0.586,-0.6 0.701,-0.945 0.286,-0.294 1.028,-0.227 0.456,-0.031 -0.004,-0.169 -0.153,-0.067 -0.694,0.044 -0.925,0.38 -0.159,0.137 -0.405,0.589 -0.312,0.321 -0.878,0.731 -0.57,0 -0.588,-0.876 -0.657,0.168 -0.443,-0.058 -0.129,-0.132 -0.098,-1.204 0.357,-1.415 -0.386,-0.014 -0.08,-0.057 -0.204,-0.324 -0.133,-0.097 0.099,-0.172 0.951,-0.676 1.423,-1.334 0.612,-0.527 0.378,-0.228 0.286,-0.261 0.348,-0.568 0.115,-0.249 0.194,-0.201 0.409,-0.227 0.447,-0.344 0.725,-0.776 0.095,-0.288 -0.158,-0.067 -0.339,0.266 -0.689,0.71 -0.492,0.398 -1.679,1.771 -0.715,0.64 -0.389,0.408 -0.302,0.388 -0.319,0.276 -0.338,0.165 -0.72,0.123 -0.354,0.143 -0.213,-0.104 -0.094,-0.828 0.072,-0.492 -0.034,-0.487 0.18,-0.7 0.267,-0.497 0.112,-0.271 0.047,-0.186 0.55,-0.517 0.303,-0.229 0.214,-0.52 1.221,-0.185 0.315,0.019 0.167,-0.07 0.125,-0.151 -0.121,-0.117 -0.366,-0.083 -0.973,0.016 -0.899,-0.089 -0.41,-0.09 -0.198,0.052 -0.327,-0.152 -0.357,-0.291 -0.554,-1.072 0.222,-1.386 0.019,-0.666 0.704,-0.585 0.376,-0.194 0.534,-0.442 0.713,-0.754 0.851,-0.462 0.434,-0.086 0.36,0.066 1.332,0.655 0.685,0.128 0.602,-0.157 0.755,0.229 1.336,0.938 0.258,-0.139 -0.075,-0.227 -1.49,-0.993 0.008,-0.298 0.381,-0.078 0.407,-0.29 -0.229,-0.172 -0.99,0.149 -0.286,0.238 -0.96,0.123 -0.501,-0.202 -0.45,-0.101 -0.675,-0.432 -0.565,0.141 -0.357,0.17 -0.631,0.161 -0.228,0.115 -1.233,1.352 -0.519,0.28 -0.369,-0.092 0.259,-0.878 0.075,-0.348 0,-0.379 0.107,-0.521 0.632,-0.997 0.397,-1.098 0.168,-0.685 0.311,-0.077 0.424,0.101 1.274,0.444 1.06,0.528 0.782,0.141 0.514,0.015 0.22,-0.168 0.174,-0.293 0.067,-0.203 0.05,-0.416 0.059,-0.148 0.172,-0.182 0.351,-0.635 0.107,-0.453 -0.115,-0.265 -0.234,0.027 -0.457,0.174 -0.062,0.072 0.008,0.142 -0.441,0.701 -0.481,0.161 -1.107,0.234 -0.505,0.017 -0.898,-0.325 -0.136,-0.127 -0.093,-0.239 -1.102,0.054 -0.329,0.072 -0.262,-0.031 0.128,-0.416 0.348,-0.463 0.488,-1.515 0.409,-0.39 0.812,-0.364 0.847,0.059 1.465,1.177 0.442,0.102 0.405,-0.095 0.969,-0.393 0.178,-0.16 0.349,-0.489 0.407,-0.84 -0.02,-0.199 -0.625,0.47 -0.333,0.126 -0.282,0 0.262,-1.542 0.102,-1.19 0.098,-0.297 0.821,0.089 1.122,-0.162 0.267,-0.262 -0.004,-0.116 -0.45,-0.159 -0.217,-0.335 -0.377,0.106 -0.505,0.223 -0.634,-0.025 0.053,-0.517 0.465,-1.089 0.048,-0.499 0.181,-1.001 0.019,-0.516 0.235,-0.503 0.733,-0.359 0.308,-0.215 0.017,-0.236 -0.439,-0.901 0.111,-0.25 0.345,-0.228 0.128,-0.167 -0.088,-0.104 -0.317,-0.1 -0.488,0.2 -0.54,0.096 -0.478,-0.301 -0.374,-0.145 -0.236,0.045 -0.643,0.515 -0.225,0.017 -0.278,-0.143 -1.842,-0.446 -0.229,-0.158 -0.66,-0.775 -0.544,-0.514 -0.724,-0.563 -0.939,-0.429 -1.153,-0.294 -0.69,-0.277 -0.34,-0.392 -0.583,-0.865 -0.443,-0.724 -0.083,-0.359 0.26,-0.445 0.265,-0.32 0.499,-0.263 0.861,0.087 0.462,0.117 0.509,0.251 0.385,0.047 0.799,-0.071 0.813,0.16 0.481,0.176 0.632,0.366 1.744,1.549 0.728,0.535 0.316,0.064 1.305,0.57 0.209,-0.011 0.534,-0.267 0.053,-0.173 -0.18,-0.171 -0.576,-0.133 -0.676,-0.632 -0.419,-0.503 -0.048,-0.835 0.055,-0.47 0.105,-0.214 0.074,-0.723 -0.392,-0.431 -0.273,-0.136 -0.727,-0.631 -0.061,-0.157 0.349,-0.074 0.342,0.043 0.733,0.32 0.384,0.044 0.28,-0.125 0.032,-0.129 -0.446,-0.364 -0.558,-0.653 -1.166,-0.097 -0.756,0.074 -0.483,-0.225 -0.514,-0.366 -0.331,-0.094 -0.675,0.23 -0.341,0.029 -0.311,-0.081 -0.307,-1.16 0.082,-0.349 0.241,-0.151 0.182,-0.377 0.127,-0.395 0.4,-0.387 2.195,-0.865 0.554,-0.646 -0.024,-0.1 -0.374,0.12 -0.478,0.292 -0.319,0.06 -1.292,-0.377 -0.202,0.086 -0.523,0.541 -0.71,0.585 -0.327,-0.036 -0.438,-0.346 -0.069,-0.247 -0.032,-0.297 0.481,-0.408 0.154,-0.216 0.311,-0.583 -0.016,-0.289 -0.531,0.159 -0.069,-0.269 0.008,-0.461 -0.051,-0.585 -0.13,-0.58 -0.436,-0.895 -0.181,-0.23 -0.149,-0.333 -0.329,-1.221 0.095,-0.307 0.292,-0.233 0.056,-0.107 -0.697,0.193 -0.076,0.212 0.131,0.313 0.094,0.416 0.056,0.518 0.097,0.452 0.252,0.494 0.202,0.259 0.329,0.684 0.144,0.749 -0.042,0.393 -0.255,0.399 -0.412,0.429 -0.125,0.355 -0.056,0.353 -0.321,0.326 -0.197,-0.122 -0.156,-0.019 0.184,0.58 0.119,0.592 -0.143,0.591 -0.381,0.357 -0.207,0.011 -0.407,0.289 -1.042,0.151 -0.363,-0.071 -0.665,-0.293 -0.789,-0.16 -0.313,-0.396 -0.41,-0.723 -0.207,-0.65 -0.004,-0.577 0.111,-0.421 0.226,-0.266 0.272,-1.707 0.384,-1.391 0.967,-1.446 0.276,-0.526 0.091,-0.283 -0.001,-0.216 -0.156,-0.137 -1.189,1.795 -0.733,0.19 -0.219,-0.402 0.066,-0.716 0.131,-0.167 0.593,0.068 0.23,-0.4 -0.371,-0.606 -0.395,-0.16 -0.092,-0.153 0.406,-0.464 0.94,0.034 0.212,-0.325 0.34,-0.351 0.378,-0.654 0.141,-0.552 0.032,-0.475 -0.082,-0.384 -0.008,-0.386 0.064,-0.388 -0.099,-0.43 -0.261,-0.472 -0.581,-0.462 -0.171,0.522 -0.181,0.214 -0.254,0.048 -0.234,-0.22 -0.245,-0.079 -0.24,-0.196 -0.25,-0.063 -0.097,-0.158 -0.063,-0.444 -0.005,-0.566 0.282,-0.266 0.393,-0.209 0.263,-0.397 0.173,-0.577 0.025,-0.633 -0.123,-0.688 -0.319,-0.621 -0.591,0.604 -0.232,0.148 -0.053,-0.432 -0.082,-0.32 -0.248,-0.436 -0.327,-0.318 -0.314,-0.212 -0.014,-0.323 0.074,-0.365 0.14,-0.426 0.181,-0.893 0.199,0.08 0.166,-0.082 -0.096,-0.741 -0.16,-0.625 -0.188,-0.357 -0.007,-0.155 -0.043,-0.182 -0.145,-0.441 -0.163,-0.324 -0.284,-0.921 -0.205,-0.353 -0.263,-0.183 -0.283,-0.01 -0.455,0.244 -0.839,0.28 -0.665,0.133 -0.111,-0.073 0.333,-0.351 0.49,-0.366 0.648,-0.249 0.189,-0.612 -0.07,-0.531 0.027,-0.505 -0.178,-0.533 0.173,-0.296 0.59,-0.299 0.268,-0.046 0.266,-0.381 -0.748,-0.923 -0.784,-0.607 -0.196,-0.248 -0.172,-0.408 -0.148,-0.57 -0.242,-0.572 -0.334,-0.576 -0.488,-0.557 -1.258,-1.024 -0.432,-0.71 -0.398,-1.092 -0.199,-0.468 -0.207,-0.347 -0.876,-0.816 -0.106,-0.362 0.905,-0.968 0.088,-0.388 -0.37,-1.185 -0.378,-0.872 -0.412,-0.311 -0.613,-0.16 -0.562,-0.39 -0.511,-0.62 -0.51,-0.455 -0.764,-0.434 -1.278,-1.121 -1.97,-1.208 -0.88,-0.71 -0.524,-0.259 -0.69,-0.066 -1.335,-0.667 -1.122,-0.214 -0.692,0.098 -0.226,-0.111 -0.512,-0.681 -0.801,-0.392 -0.414,0.149 -0.514,0.73 -0.62,0.717 -0.33,0.097 -0.49,-0.655 -0.247,-0.459 -0.236,-0.157 -0.225,0.148 -0.438,0.603 -0.417,0.434 -0.617,0.514 -0.493,0.246 -0.633,0.06 -0.159,0.186 -0.244,0.008 -0.328,-0.168 -0.308,-0.334 -0.287,-0.501 -0.253,-0.271 -0.22,-0.04 -0.505,0.26 -0.639,0.762 -0.292,0.183 -0.245,-0.079 -0.3,-0.237 -0.601,-0.608 -0.333,0.059 -0.242,0.213 0.067,0.504 0.563,1.19 0.503,0.843 -0.425,0.099 -3.712,-1.141 -0.473,-0.276 -0.683,-0.695 -0.568,-0.428 -0.967,-1.111 -0.745,-0.604 -0.247,-0.474 -0.065,-0.327 0.237,-0.443 1.5,-1.503 0.573,-0.305 1.166,-0.365 0.275,-0.229 0.092,-0.182 -0.306,-0.329 -1.527,0.118 -1.36,-0.22 -1.184,-0.607 -0.206,-0.202 -0.201,-0.373 -0.195,-0.544 0.044,-0.611 0.284,-0.679 0.167,-0.468 0.049,-0.254 -1.488,1.672 -0.608,0.582 -0.482,-0.178 -0.338,-0.275 -0.166,-0.307 0.006,-0.339 0.055,-0.248 0.103,-0.155 -0.787,-0.694 -0.354,-0.547 -0.038,-0.566 0.279,-0.586 0.273,-0.426 0.267,-0.267 0.728,-0.232 2.658,-0.445 1.903,0.427 0.648,-1.419 0.438,-0.455 1.28,-0.475 1.97,-0.066 1.391,0.263 0.652,0.335 0.888,0.737 0.051,-0.222 -0.214,-0.666 -0.015,-0.555 0.359,-0.969 0.165,-0.611 -0.112,-0.639 -0.39,-0.667 -0.69,-0.86 -0.372,-0.071 -0.413,0.208 -0.496,0.477 -1.031,1.196 -0.487,0.249 -0.812,0.063 -0.449,-0.15 -0.434,-0.179 -0.678,-0.633 -0.247,-0.119 -0.3,0.278 -0.352,0.673 -0.339,0.47 -0.327,0.268 -0.305,0.116 -0.426,-0.055 -1.755,-1.044 -0.396,-0.467 -0.023,-0.71 -0.539,-0.691 -0.609,-0.121 -0.074,-0.232 0.772,-1.073 0.576,-0.44 -0.092,-0.133 -0.836,-0.023 -0.564,0.573 -0.323,0.097 -0.743,0.016 -0.78,-0.287 -0.332,-0.251 -0.344,-0.578 -0.386,-0.326 -1.165,-0.496 -0.263,-0.271 -0.249,-0.451 -0.952,-1.283 -0.576,-0.948999 -0.075,-0.541 0.665,-1.167 0.029,-0.271 -0.285,-0.507 -0.119,-0.375 0.098,-0.519 0.582,-1.155 0.216,-0.314 1.043,-0.683 1.045,-0.998 0.38,-0.225 0.339,-0.052 1.373,0.06 0.425,-0.247 0.361,-0.49 0.593,-0.498 1.237,-0.759 2.75,-1.154 0.179,-0.137 0.016,-0.22 -0.247,-0.599 -0.052,-0.29 0.563,-0.54 1.271,-0.855 0.869,-0.413 0.559,-0.03 0.451,-0.185 0.633,-0.542 0.358,-0.096 2.163,-0.213 0.957,0.296 0.47,-0.006 0.302,-0.21 0.399,-0.617 0.746,-1.542 0.393,-0.965 0.371,-1.479 0.479,-2.338 0.358,-2.313 0.237,-2.289 0.185,-1.41 0.131,-0.508 0.449,-0.646 0.468,-0.506 0.804,-0.449 -0.073,-0.21 -0.341,-0.352 -0.317,-0.135 -0.293,0.081 -0.535,0.531 -0.693,0.359 -0.673,-0.056 -0.485,0.133 -0.445,0.484 -0.721,0.388 -0.481,-0.088 -0.869,-0.695 -0.438,-0.13 -1.111,0.066 -0.325,-0.259 -0.284,-0.507 -0.226,-0.71 -0.169,-0.918 0.023,-0.959 0.4,-1.746 0.153,-0.479 1.083,-1.977 0.667,-0.933 0.664,-0.702 0.483,-0.414 0.456,-0.186 0.438,-0.438 0.805,-1.418 0.831,-1.225 1.034,-2.301 0.5,-0.609 1.751,-1.016 0.476,-0.016 0.404,0.253 0.383,0.529 1.075,2.288 0.084,-0.07 -0.188,-0.863 -0.392,-2.609 0.063,-1.085 0.615,-1.168 0.252,-0.209 0.649,0.078 1.047,0.362 0.7,0.396 0.531,0.642 0.631,0.397 0.327,-0.02 0.233,-0.306 0.334,-1.002 0.435,-1.713 0.174,-2.136 -0.086,-2.576 -0.126,-1.908 -0.168,-1.214 0.092,-1.019 0.527,-1.231 0.483,-0.905 1.152,-1.288 0.935,-0.344 0.554,0.087 0.729,0.606 1.011,0.371 0.913,1.165 1.479,2.645 0.981,1.312 0.813,0.586 0.801,0.993 1.184,2.084 0.62,0.886 0.368,0.32 0.325,0.051 -0.121,-0.588 -0.566,-1.235 -0.866,-1.371 -1.921,-2.493 -1.059,-1.784 -0.949,-2.058 -0.698,-1.237 -1.266,-1.236 0.017,-0.495 1.528,-1.754 2.808,-1.542 3.165,-1.216 1.059,0.125 1.861,-0.511 0.175,-0.775 0.4,-0.349 1.733,-1.088 0.497,0.015 0.763,0.517 0.813,0.981 0.376,0.883 0.511,1.505 0.25,2.096 -0.038,6.444 0.014,1.19 0.098,0.457 0.353,-0.681 0.421,-1.271 0.379,-0.905 0.291,-1.407 0.204,-1.92 0.121,-1.438 -0.495,-1.64 -0.024,-2.73 0.248,-1.474 0.693,0 2.867,5.035 1.128,1.067 1.284,2.617 1.5,-0.276 1.384,0.319 0.612,-0.095 0.302,-0.404 -0.43,-1.083 -1.966,-3.014 -0.893,-2.405 -0.625,-3.051 -0.152,-1.645 0.478,-0.298 2.196,0.035 3.3,1.429 4.22,4.848 2.077,1.573 3.722,5.382 1.123,0.798 0.453,0.167 0.342,-0.651 0.211,-0.71 0.016,-0.951 -0.18,-1.196 -0.104,-1.394 -0.026,-1.597 0.252,-3.21 0.6,-1.061 0.265,-1.208 -0.247,-2.203 -0.703,-1.526 -2.737,-3.997 -0.011,-0.483 0.553,-0.533 0.82,-0.313 6.783,0.969 1.172,0.354 0.5,0.347 0.219,0.457 0.281,0.195 1.457,-0.544 -0.035,-0.998 -0.182,-0.638 -7.872,-1.755 -1.467,-0.604 -0.747,-0.046 -0.772,0.464 -1.601,0.229 -0.739,-0.088 -0.958,-2.115 0.867,-2.582 0.73,0.059 1.387,1.011 0.822,-1.414 1.304,-1.178 1.29,-0.417 2.814,-2.5669995 0.52,-0.226 0.656,0.138 1.454,0.666 0.575,0.637 0.659,1.3549995 0.382,0.417 0.454,0.077 0.622,0.608 0.9,-1.977 0.813,-2.1489995 0.934,-1.373 1.321,0.802 0.836,1.039 0.764,1.23 1.081,0.6759995 1.832,4.115 0.342,0.004 0.162,-0.344 0.173,-0.756 0.062,-1.129 0.225,-1.546 -0.163,-0.575 -1.535,-1.7369995 -0.29,-0.673 -0.294,-1.115 -0.005,-0.927 0.285,-0.735 0.3,-0.337 0.992,0.306 0.328,-0.24 0.31,-0.626 0.373,-1.181 0.294,-0.302 0.664,-0.035 1.021,0.76 0.894,0.064 0.322,-0.349 0.049,-0.742 0.078,-0.474 0.106,-0.2 3.24,-0.041 0.804,-0.178 0.628,-0.567 0.769,-0.067 0.672,0.339 0.832,0.722 0.827,-0.034 1.232,-1.18 1.16,-0.562 6.403,0.156 2.105,0.717 z m -41.849,33.3939995 -0.569,0.358 -1.188,-2.166 -1.881,-2.195 -1.659,-1.48 -1.559,-3.951 -0.123,-1.427 0.221,-1.262 1.361,-0.193 1.089,-0.583 2.772,2.509 1.386,2.095 0.47,1.693 -0.073,3.335 -0.247,3.267 z m 73.529,4.761 -0.289,0.635 -0.74,-0.254 -0.948,-1.789 -0.632,-1.483 -0.045,-1.759 0.325,-0.788 0.506,-0.132 0.695,1.508 0.713,2.011 0.415,2.051 z m 2.954,35.746 -1.188,1.811 -1.757,-0.139 -1.04,-0.834 -0.297,-1.259 0.396,-1.41 1.262,-1.138 1.584,-0.715 1.436,0.43 0.198,1.423 -0.594,1.831 z m -3.887,27.054999 -0.372,0.474 -0.247,-1.427 -0.223,-1.921999 -0.05,-2.19 0.569,-1.106 0.297,-0.247 0.198,0.247 -0.05,0.984 0,1.949 0.198,1.327999 -0.32,1.91 z m 2.929,4.403 -0.545,0 -0.202,-0.341 0.129,-0.605 0.759,-1.966 0.253,-0.161 0.371,0.214 0.113,1.012 -0.248,1.005 -0.63,0.842 z m -150.747,4.105 -1,0.113 -0.985,-0.499 -0.338,-0.387 0.015,-0.593 0.149,-0.206 0.532,-0.206 0.442,-0.046 0.298,0.092 0.701,0.366 0.507,0.365 0.333,0.114 -0.095,0.523 -0.559,0.364 z m 148.982,15.639 -0.322,0.307 -1.089,-4.883 0,-1.803 0.074,-1.392 0.495,-0.108 0.421,0.751 0.198,2.867 0.223,4.261 z m 1.633,7.226 0.223,1.174 0.099,1.069 0.347,0.676 0.743,-0.096 0.297,1.25 -0.544,0.479 -2.153,-0.191 -0.891,0.095 -0.619,-0.766 0.025,-1.35 0.074,-1.361 0.619,-0.782 0.52,0.685 0.619,-0.489 0.641,-0.393 z m -103.886,26.846 -0.397,0.642 -0.323,0.367 -0.702,1.089 -0.121,0.038 -0.189,-0.141 -0.147,-0.286 -0.265,-0.069 -0.092,-0.181 -0.037,-0.147 -0.118,-0.094 -0.187,-0.059 -0.3,0.112 -0.275,-0.112 -0.208,-0.479 0.384,-0.322 0.237,-0.275 0.917,-0.108 0.259,0.126 0.163,-0.003 0.248,-0.075 0.542,-0.343 0.081,-0.16 0.485,0.201 0.045,0.279 z m 4.159,15.826 -0.263,0.057 -0.754,-0.439 -0.123,-0.166 -0.047,-0.203 0.029,-0.241 0.24,-0.45 0.451,-0.661 0.327,-0.124 0.203,0.415 0.199,0.556 0.026,0.281 -0.013,0.331 -0.052,0.28 -0.091,0.23 -0.132,0.134 z m 78.87,1.028 0.099,0.505 0.01,0.238 -0.021,0.199 -0.055,0.143 -0.132,0.126 0.246,0.333 0.08,0.224 0.015,0.178 -0.157,0.344 -1.118,0.454 -0.311,0.218 -0.388,0.539 -0.472,0.462 -0.157,-0.002 -0.183,-0.479 -0.746,-0.353 -1.403,0.184 -1.643,0.444 -0.583,0.207 -0.295,-0.11 -0.09,-0.166 -0.004,-0.231 0.194,-0.678 0.079,-0.173 0.377,-0.226 0.255,-0.6 -0.083,-0.655 0.098,-0.917 0.258,-0.143 0.645,0.327 0.417,0.069 0.739,0.042 0.993,-0.11 0.798,-0.374 1.456,-1.07 0.258,0.014 0.185,0.38 0.136,0.186 0.433,0.291 0.07,0.18 z m -73.65,0.567 -0.375,0.023 -0.872,-0.155 -0.07,-0.1 -0.011,-0.189 0.116,-0.546 0.384,-0.073 0.457,0.299 0.493,0.425 0.068,0.2 -0.19,0.116 z m -2.964,7.613 0.935,0.664 0.991,0.457 0.097,0.208 0.077,0.315 0.018,0.164 -0.022,0.152 -0.063,0.14 0.072,0.18 0.208,0.22 0.021,0.257 -0.248,0.44 -0.349,0.488 -1.846,0.999 -0.653,0.169 -1.614,0.682 -0.494,-0.028 -0.109,-0.032 -0.305,-0.3 -0.418,-0.279 -0.196,-0.217 -0.173,-0.312 0.069,-0.193 0.311,-0.076 0.442,0.005 0.649,-0.227 -0.18,-0.205 -0.17,-0.125 -0.118,-0.272 -0.271,0.053 -0.203,-0.156 -0.391,-0.099 -1.021,-0.094 -0.666,-0.268 -0.196,-0.161 -0.173,-0.278 -0.15,-0.392 0.218,-1.53 0.15,-0.392 0.346,-0.129 0.846,0.342 0.114,-0.147 -0.926,-0.568 -0.34,-0.339 -0.1,-0.268 -0.06,-0.395 0,-0.232 0.042,-0.234 0.083,-0.235 0.225,-0.318 0.938,-0.508 1.022,0.174 1.774,0.624 0.22,0.132 0.544,0.533 1.043,1.611 z m 4.82,3.178 -0.44,0.283 -0.089,-0.063 -0.089,-0.216 -0.227,-0.984 -0.067,-0.468 0.056,-0.584 -0.088,-0.413 0.397,-0.482 0.321,-0.083 0.433,0.126 0.733,0.49 -0.053,0.159 -0.159,0.255 -0.441,0.333 -0.156,0.748 -0.03,0.374 0.021,0.28 -0.122,0.245 z m 39.242,29.586 -0.437,0.004 -0.145,-0.532 0.043,-0.582 0.492,-0.183 0.265,0.401 -0.095,0.596 -0.123,0.296 z m -25.919,29.56 -0.322,0.694 -0.322,-0.151 -0.159,-0.31 -0.317,-0.144 -0.342,0.043 -0.005,-0.123 1.111,-0.742 0.53,-0.2 -0.038,0.313 -0.101,0.274 -0.035,0.346 z",
                        title: "Greenland",
                        id: "GL",
                    },
                    {
                        d:
                            "m 427.84875,426.1794 -0.016,-0.242 -0.156,-0.552 0.209,-0.241 0.227,-0.143 0.153,0.114 0.046,0.225 0.118,0.154 0.402,0.096 0.397,-0.069 0.243,0.032 -0.007,-0.125 0.082,-0.166 0.483,-0.071 0.51,-0.047 0.525,-0.1 0.411,0.004 0.122,-0.027 -0.029,-0.043 -0.369,-0.048 -0.787,0.114 -0.801,0.034 -0.607,0.301 -0.249,-0.028 -0.252,-0.301 -0.09,-0.371 0.711,-0.027 0.862,0.012 0.939,0.012 0.442,0.006 0.232,-0.404 0.442,-0.178 0.452,-0.066 0.236,0.017 0.248,0.06 0.477,0.333 0.297,0.077 0.251,0.075 0.179,0.162 0.285,0.161 0.224,0.043 0.133,-0.024 0.222,-0.062 0.146,-0.05 0.476,-0.021 0.35,0.186 0.073,0.203 -0.058,0.208 -0.47,0.111 -0.651,0.174 -0.538,-0.095 -0.655,-0.237 -0.383,-0.17 -0.159,-0.069 -0.239,-0.108 -0.209,-0.116 -0.201,-0.076 -0.154,-0.048 -0.114,0.061 -0.057,0.144 -0.091,0.16 -0.117,0.095 -0.549,0.056 -0.493,0.059 -0.264,0.05 -0.177,0.038 -0.055,0.483 -0.558,-0.005 -0.548,-0.006 -0.569,0.009 -0.611,0.009 -0.157,0.099 z",
                        title: "Gambia",
                        id: "GM",
                    },
                    {
                        d:
                            "m 442.93075,428.0644 -0.08,0.077 -0.083,0.167 -0.076,0.206 -0.077,0.138 0.027,0.09 0.219,0.18 0.307,0.252 0.125,0.033 0.143,-0.06 0.225,-0.2 0.179,-0.216 0.171,-0.105 0.201,0.007 0.16,0.152 0.195,0.336 0.178,0.305 0.023,0.031 0.072,0.05 0.09,-0.002 0.094,-0.074 0.069,-0.045 0.083,-0.14 0.347,-0.423 0.261,-0.116 0.093,-0.031 0.182,-0.064 0.303,0.1 0.439,0.174 0.533,0.211 0.187,0.036 0.11,-0.036 0.159,-0.286 0.198,-0.113 0.283,-0.132 0.23,-0.067 0.131,-0.009 0.05,-0.078 0.025,-0.117 -0.027,-0.121 -0.148,-0.217 -0.004,-0.064 0.085,-0.042 0.182,-0.032 0.237,0.022 0.267,0.094 0.217,0.135 0.124,0.161 0.135,0.344 0.104,0.334 0.268,0.53 -0.005,0.329 -0.006,0.381 0.12,0.072 0.13,0.03 0.061,0.056 0.13,0.293 0.123,0.085 0.147,0.02 0.276,0.187 0.177,0.074 0.025,0.056 -0.006,0.078 -0.069,0.098 -0.107,0.068 -0.159,0.128 -0.132,0.167 -0.272,0.401 -0.008,0.075 0.058,0.054 0.112,0.01 0.12,-0.028 0.25,-0.146 0.196,0.052 0.189,0.112 0.069,0.116 0.018,0.152 -0.043,0.197 -0.007,0.219 0.063,0.374 0.099,0.374 0.098,0.136 0.629,0.329 0.061,0.123 0.031,0.139 -0.045,0.189 -0.065,0.106 -0.18,0.165 -0.165,0.127 -0.052,0.139 0.026,0.259 0,0.585 0.025,0.507 0.136,0.183 0.162,0.094 0.192,-0.018 0.186,-0.034 -0.011,0.303 -0.05,0.339 0.22,0.105 0.112,0.103 0.061,0.097 -0.349,0.18 -0.101,0.105 -0.047,0.283 0.011,0.262 0.469,0.186 0.181,0.219 0.08,0.227 0.028,0.429 -0.042,0.098 -0.121,10e-4 -0.136,-0.132 -0.101,-0.128 -0.127,0 -0.237,-0.029 -0.269,-0.05 -0.333,0.014 -0.118,0.021 -0.076,0.077 -0.02,0.135 -0.034,0.435 0.109,0.095 0.215,0.108 0.141,0.046 0.117,-0.013 0.09,0.07 0.019,0.187 -0.061,0.137 -0.118,0.128 -0.149,0.328 0.025,0.124 0.007,0.177 -0.255,0.48 -0.072,0.094 -0.337,-0.095 -0.219,-0.031 -0.159,0.121 -0.1,-0.076 -0.118,-0.111 -0.041,-0.146 -0.08,-0.031 -0.147,-10e-4 -0.136,0.083 -0.06,0.151 -0.009,0.174 -0.021,0.134 -0.081,0.081 -0.165,0.211 -0.077,0.194 -0.096,0.169 -0.137,-0.01 -0.063,-0.024 -0.044,0.045 -0.213,0.094 -0.183,0.026 -0.048,-0.097 -0.107,-0.078 -0.119,-0.155 -0.135,-0.124 -0.258,-0.088 -0.102,0.04 -0.122,-0.011 -0.08,-0.049 0.011,-0.075 0.135,-0.189 0.077,-0.174 0.043,-0.19 -10e-4,-0.182 -0.072,-0.255 -0.116,-0.203 -0.029,-0.117 0.014,-0.168 -0.027,-0.156 -0.038,-0.081 -0.018,-0.154 -0.036,-0.141 -0.069,-0.054 -0.038,-0.236 0.011,-0.243 -0.1,-0.091 -0.158,-0.067 -0.093,-0.096 -0.057,-0.105 -0.057,-0.031 -0.049,0.007 -0.044,0.065 -0.052,0.014 -0.092,-0.227 -0.038,-0.009 -0.064,0.052 -0.729,0.252 -0.032,-0.098 -0.061,-0.116 -0.14,-0.039 -0.241,0.087 -0.14,0.01 -0.216,-0.029 -0.096,0.041 -0.287,0.335 -0.172,0.131 -0.13,-0.011 -0.136,-0.03 -0.096,0.024 -0.071,-0.038 0.028,-0.082 0.07,-0.102 0.137,-0.365 0.352,-0.367 0.007,-0.078 -0.144,-0.214 -0.151,-0.293 0,-0.314 -0.029,-0.227 -0.311,-0.064 -0.057,-0.038 -0.008,-0.077 0.08,-0.203 0.095,-0.189 0.014,-0.079 -0.022,-0.071 -0.191,-0.2 -0.298,-0.371 -0.276,-0.411 -0.237,-0.352 -0.192,-0.161 -0.183,-0.233 -0.069,-0.148 -0.191,-0.053 -0.556,0.003 -0.669,0.004 -0.564,0.002 -0.033,0.2 -0.616,0.133 -0.38,-0.153 -0.422,0.09 -0.206,0.101 -0.064,0.212 -0.094,0.233 -0.09,0.096 -0.038,0.104 -0.052,0.095 -0.083,0.11 -0.092,0.219 -0.201,0.313 -0.211,0.202 -0.358,0.109 -0.112,0.329 -0.082,0.123 -0.138,0.095 -0.148,0.063 -0.136,-0.038 -0.157,-0.026 -0.164,0.059 -0.028,-0.082 0.093,-0.261 -0.074,-0.135 -0.281,-0.271 -0.027,-0.13 -0.086,-0.169 -0.371,-0.349 -0.345,0.022 0.096,-0.292 -0.004,-0.388 -0.118,-0.212 0.03,-0.216 -0.064,0.013 -0.115,0.149 -0.186,-0.048 -0.378,-0.231 -0.189,-0.223 -0.022,-0.191 -0.043,-0.074 -0.115,0.04 -0.236,-0.004 -0.721,-0.34 -0.512,-0.854 -0.011,-0.193 0.073,-0.332 -0.017,-0.09 -0.235,0.22 -0.045,-0.148 -0.18,-0.343 -0.052,-0.198 -0.172,-0.088 -0.139,-0.015 -0.107,0.066 -0.141,0.401 -0.105,-0.002 -0.109,-0.086 0.023,-0.3 0.124,-0.148 0.153,-0.227 0.464,-0.948 0.165,-0.217 0.105,-0.076 0.219,-0.009 0.428,-0.127 0.35,-0.209 0.175,-0.085 0.401,0.022 0.475,-0.036 0.619,-0.203 0.011,-0.28 -0.005,-0.358 -0.021,-0.142 -0.22,-0.128 -0.128,-0.111 -0.11,-0.141 -0.134,-0.101 0.005,-0.105 0.168,-0.091 0.106,-0.046 0.252,0.002 0.083,-0.052 0.063,-0.091 0.071,-0.231 0.025,-0.243 -0.166,-0.327 0.009,-0.231 0.909,0.033 0.092,0.025 0.406,0.04 0.252,0 0.155,0.017 0.065,0.053 -0.012,0.097 -0.044,0.128 0.052,0.132 0.139,0.035 0.073,-0.04 0.071,-0.064 0.084,-0.051 0.119,0.034 0.255,0.195 0.237,0.053 0.258,0.106 0.243,0.059 0.216,-0.008 0.164,0.109 0.303,0.035 0.39,-0.139 0.308,-0.061 0.431,-0.015 0.227,0.045 0.657,-0.111 0.328,0.025 z",
                        title: "Guinea",
                        id: "GN",
                    },
                    { d: "m 607.65075,495.4144 -0.02,0.008 -0.039,-0.009 -0.008,-0.049 0.05,-0.009 z", title: "Glorioso Islands", id: "GO" },
                    {
                        d:
                            "m 302.78075,417.0504 -0.33,0.032 -0.217,-0.025 -0.05,-0.208 0.111,-0.176 -0.08,-0.214 0.051,-0.127 0.111,-0.084 0.182,0.112 0.029,0.16 0.114,0.146 0.513,0.312 -0.434,0.072 z m -0.736,0.649 -0.227,0.13 -0.111,-0.04 -0.138,-0.25 -0.097,-0.694 0.075,-0.115 0.054,-0.043 0.299,0.085 0.125,0.098 0.125,0.062 -0.063,0.127 0.031,0.521 -0.073,0.119 z m 1.008,0.34 -0.156,0.011 -0.069,-0.025 -0.021,-0.174 0.121,-0.12 0.071,-0.029 0.105,0.135 0.025,0.112 -0.076,0.09 z",
                        title: "Guadeloupe",
                        id: "GP",
                    },
                    {
                        d:
                            "m 499.41175,452.4374 0.069,0.011 0.42,-0.011 0.114,0.148 -0.013,0.217 -0.432,0.634 -0.081,0.267 -0.167,0.227 -0.145,0.018 -0.498,-0.133 -0.084,-0.081 -0.03,-0.108 0.049,-0.253 0.037,-0.077 0.239,-0.048 0.077,-0.041 0.128,-0.272 0.042,-0.249 0.107,-0.188 0.168,-0.061 z m 7.278,4.441 0.003,0.646 0.003,0.546 0.003,0.591 0.003,0.616 0.003,0.521 0.002,0.337 -0.575,-0.002 -0.763,-0.002 -0.763,-0.002 -0.762,-0.002 -0.383,-0.001 -0.422,-10e-4 -0.137,0.018 -0.093,0.085 -0.112,0.02 -0.13,-0.073 -0.159,-0.035 -0.042,-0.075 -0.079,-0.137 -0.157,-0.015 -0.079,0.015 -0.113,0.078 -0.127,0.041 0.024,-0.063 -0.251,-0.168 -0.181,-0.017 -0.167,-0.052 0.135,-0.438 0.169,-0.387 0.252,-0.293 0.134,-0.07 0.043,-0.145 0.2,-0.478 0.248,-0.387 -0.077,-0.392 0.059,-0.659 0.072,0.019 0.011,0.062 0.019,0.092 0.093,0.082 0.308,0.127 0.918,0 0.548,0 0.811,0 0.858,0 0.653,-0.002 z",
                        title: "Equatorial Guinea",
                        id: "GQ",
                    },
                    {
                        d:
                            "m 548.76475,334.5924 0.251,0.076 0.146,0.123 0.091,0.113 0.139,0.097 0.104,0.022 0.08,0.333 0.042,0.412 -0.063,0.178 -0.185,0.041 -0.578,0.388 -0.014,0.355 0.008,0.171 0.012,0.122 0.061,0.102 0,0.147 -0.064,0.158 -0.252,0.264 -0.175,0.209 -0.196,0.284 -0.11,0.035 -0.087,0.05 -0.079,-0.156 -0.435,-0.277 -1.007,-0.162 -0.481,-0.205 -0.211,0.038 -0.409,-0.229 -0.28,0.101 -0.594,0.407 -0.321,-0.044 -0.343,-0.245 -0.223,-0.045 -0.262,0.129 -0.419,0.468 -0.427,0.229 -0.382,-0.089 -0.514,0.002 -0.055,0.261 0.099,0.181 0.281,0.308 -0.132,0.231 0.098,0.231 0.183,0.047 0.277,-0.013 0.511,0.299 0.224,0.315 0.143,0.344 -0.312,-0.247 -0.207,-0.238 -0.289,-0.086 -0.401,-0.203 -0.252,-0.034 -0.268,0.141 -0.021,0.159 0.289,0.297 0.264,0.183 0.14,0.148 0.093,0.329 -0.053,0.111 -0.098,0.104 -0.313,-0.207 -0.479,-0.737 -0.668,-0.147 -0.112,0.154 0.132,0.39 0.095,0.151 0.581,0.42 -0.046,0.089 -0.085,0.038 -0.65,-0.24 -0.189,-0.365 -0.045,-0.463 -0.6,-0.322 -0.566,-0.351 -0.127,-0.333 0.117,-0.124 0.083,-0.245 -0.311,0.045 -0.195,0.155 -0.315,0.15 -0.013,0.246 0.05,0.228 -0.104,0.331 -0.102,0.575 0.064,0.301 0.684,0.861 0.234,0.624 0.168,0.236 0.35,0.26 0.365,0.483 0.154,0.251 0.11,0.411 -0.307,0.254 -0.178,0.01 -0.099,-0.112 0.138,-0.28 -0.02,-0.171 -0.474,-0.265 -0.2,0.089 -0.231,0.172 0.132,0.32 0.148,0.211 0.075,0.29 0.284,-0.025 -0.382,0.325 -0.359,0.166 -0.353,0.01 -0.225,0.03 -0.078,0.083 0.183,0.06 0.149,0.006 0.243,0.175 0.691,0.209 0.33,0.265 0.324,0.024 0.325,0.485 0.563,0.129 0.321,0.489 0.426,0.096 0.368,0.18 0.107,0.171 0.054,0.31 0.024,0.655 0.08,0.486 0.003,0.153 -0.02,0.229 -0.1,0.112 -0.135,0.004 -0.265,-0.357 -0.405,-0.376 -0.428,-0.448 -0.122,-0.079 -0.1,-0.007 -0.229,0.151 -0.636,0.117 -0.298,0.164 -0.112,0.036 -0.031,0.086 0.14,0.089 0.171,0.205 0,0.279 0.142,0.339 0.183,0.087 0.238,-0.007 0.137,0.063 0.035,0.135 0.139,0.157 0.091,0.117 -0.003,0.083 -0.665,0.221 -0.139,0.101 -0.117,0.052 -0.173,-0.105 -0.01,-0.27 -0.228,-0.145 -0.209,-0.125 -0.251,-0.053 -0.213,-0.187 -0.139,0.151 0.111,0.524 0.241,0.36 0.404,0.964 0.183,0.567 0.037,0.274 -0.091,0.455 0.199,0.337 0.136,0.346 -0.149,-0.013 -0.13,-0.122 -0.218,-0.144 -0.422,-0.553 -0.147,-0.345 -0.176,-0.027 -0.306,0.05 -0.334,0.737 10e-4,0.421 -0.173,-0.1 -0.148,-0.131 0.018,-0.461 -0.015,-0.194 -0.406,-0.63 -0.186,-0.071 -0.087,-0.213 -0.15,-0.228 -0.193,0.043 -0.158,0.092 -0.043,0.344 -0.016,0.308 -0.118,0.231 -0.433,-0.439 -0.436,-0.762 -0.011,-0.418 0.319,-0.383 -0.038,-0.274 -0.302,-0.542 -0.436,-0.349 -0.244,-0.104 -0.115,-0.372 -0.233,-0.192 -0.189,-0.09 -0.037,-0.132 0.057,-0.098 0.458,-0.383 0.268,-0.602 0.133,-0.028 0.274,0.143 0.308,-0.037 0.252,-0.353 0.214,-0.192 0.361,0.025 0.815,0.471 0.876,0.269 0.437,0.235 0.248,0.233 0.131,0.048 0.208,0.033 -0.009,-0.174 -0.066,-0.154 0.173,-0.084 0.469,0.004 0.085,-0.082 0.087,-0.132 -0.097,-0.151 -0.155,-0.072 -0.166,-0.02 -0.109,-0.048 -0.177,0.048 -0.275,-0.117 -0.143,-0.096 -0.083,-0.099 -0.479,-0.197 -0.454,-0.334 -0.103,0.189 -0.184,0.102 -0.261,0.015 -0.734,-0.212 -0.451,0.162 -0.246,0.042 -0.188,0.004 -0.231,0.072 -0.267,0.043 -0.231,-0.308 -0.097,-0.239 -0.068,-0.045 -0.003,0.225 -0.074,0.18 -0.339,0.101 -0.195,-0.14 -0.15,-0.423 -0.189,-0.539 -0.333,-0.436 -0.271,-0.114 -0.023,-0.24 0.024,-0.192 0.325,-0.048 0.508,0.201 0.105,-0.04 0.114,-0.093 -0.022,-0.205 -0.074,-0.183 -0.14,-0.008 -0.097,0.021 -0.313,-0.038 -0.401,0.102 -0.186,-0.096 -0.062,-0.117 -0.336,-0.289 -0.29,-0.388 -0.47,-0.259 -0.307,-0.792 -0.258,-0.346 -0.275,-0.248 0.06,-0.004 0.104,0.042 0.2,0.136 0.212,0.029 0.116,-0.09 0.067,-0.083 0.043,-0.136 0.018,-0.159 0.035,-0.053 0.163,0.019 0.052,-0.04 -0.002,-0.143 -0.105,-0.178 -0.092,-0.219 0,-0.104 0.077,-0.042 0.127,-0.095 0.068,-0.118 0.135,-0.059 0.199,-0.011 0.222,-0.052 0.144,-0.127 0.021,-0.125 0.09,-0.346 0.059,-0.17 0.095,-0.155 0.051,-0.209 0.102,-0.197 0.212,-0.083 0.192,-0.097 0.145,-0.254 0.082,-0.217 0,-0.133 -0.122,-0.218 -0.09,-0.212 0.024,-0.276 0.381,-0.023 0.133,-0.026 0.495,-0.015 0.226,-0.148 0.156,0.014 0.326,0.128 0.146,-0.101 0.426,-0.2 0.421,-0.582 0.179,-0.087 0.409,-0.036 0.128,-0.067 0.149,0.013 0.458,0.118 0.26,0.018 0.309,-0.081 0.34,-0.142 0.085,-0.499 0.081,-0.072 0.211,-0.02 0.16,0.004 0.308,0.04 0.366,0.013 0.235,-0.234 0.371,-0.017 0.172,-0.034 0.287,0.047 0.279,-0.002 0.357,-0.098 0.333,-0.161 0.26,0.014 0.106,-0.029 0.06,-0.034 0.065,-0.217 0.489,-0.014 0.166,0.021 0.273,0.006 0.284,-0.119 0.085,0.01 0.143,0.318 0.075,0.092 0.154,0.085 0.344,0.238 0.062,-0.063 0.144,-0.08 0.412,0.109 0.393,0.183 0.33,0.269 0.367,-0.078 0.407,-0.132 0.265,-0.038 0.288,-0.019 0.171,-0.057 0.389,0.069 0.401,-0.145 0.193,-0.13 0.056,-0.184 -0.032,-0.323 -0.091,-0.324 -0.096,-0.12 -0.031,-0.124 0.055,-0.116 0.062,-0.08 0.262,-0.068 0.327,0.114 z m -4.341,4.091 -0.36,0.131 -0.366,-0.249 0.003,-0.148 0.193,-0.301 0.106,-0.089 0.269,0.024 0.153,0.207 0.036,0.098 -0.05,0.166 0.016,0.161 z m 2.559,0.694 -0.318,0.096 -0.35,-0.303 0.338,-0.122 0.157,0.088 0.112,0.104 0.061,0.137 z m -0.697,1.622 -0.106,0.123 -0.079,0.212 -0.042,0.303 -0.164,0.007 -0.099,-0.061 -0.033,-0.115 -0.006,-0.145 -0.072,0.006 -0.058,0.157 -0.051,0.071 -0.165,0.015 -0.181,-0.097 0.009,-0.209 -0.036,-0.243 0.016,-0.085 0.495,-0.021 0.145,0.179 0.175,-0.104 0.072,-0.112 0.212,-0.07 -0.032,0.189 z m -15.042,2.001 0.061,0.203 -0.35,-0.126 -0.255,-0.181 -0.211,-0.449 -0.449,-0.511 -0.007,-0.149 0.171,-0.113 0.369,-0.08 0.149,0.083 0.096,0.086 0.03,0.098 -0.209,0.196 -0.043,0.089 0.161,0.176 -0.002,0.071 0.067,0.341 0.079,0.128 0.203,0.103 0.14,0.035 z m 17.771,0.373 -0.049,0.214 0.388,0.355 0.132,0.225 0.049,0.218 -0.033,0.063 -0.147,-0.118 -0.121,-0.038 0.041,0.156 0.124,0.134 -0.22,0.077 -0.22,-0.004 -0.644,-0.187 -0.148,-0.199 0.385,-0.299 0.078,-0.121 -0.272,0.012 -0.291,0.355 -0.466,-0.156 -0.143,-0.143 -0.032,-0.077 0.184,-0.316 0.328,0.011 0.173,-0.071 0.215,-0.1 0.002,-0.15 0.512,-0.034 0.175,0.193 z m -7.078,0.618 -0.131,0.042 0.131,-0.288 0.232,-0.149 -0.087,0.242 -0.145,0.153 z m -0.304,0.158 -0.125,0.122 -0.194,-0.053 -0.203,-0.408 0.522,0.339 z m -1.022,0.56 0.159,0.39 0.149,0.131 0.312,0.155 0.147,0.02 0.533,0.28 0.619,0.056 0.08,0.081 0.076,0.215 0.126,0.169 0.032,0.131 -0.066,0.146 0.091,0.445 0.156,0.422 0.235,0.204 0.293,0.062 0.279,-0.009 0.07,0.084 -0.028,0.368 -0.118,0.144 -0.096,0.035 -0.083,-0.038 -0.076,-0.086 -0.082,-0.041 -0.16,-0.007 -0.117,-0.148 -0.297,-0.203 -0.055,-0.122 -0.01,-0.187 -0.126,-0.138 -0.116,-0.262 -0.11,-0.073 -0.061,-0.132 -0.005,-0.056 -0.432,-0.039 -0.357,-10e-4 -0.303,-0.149 -0.094,-0.391 -0.18,-0.105 -0.135,-0.111 -0.112,-0.154 -0.284,-0.283 -0.314,-0.237 -0.304,-0.157 -0.322,-0.103 -0.262,0.121 -0.153,-0.028 -0.031,-0.082 0.326,-0.163 0.448,-0.312 0.315,-0.103 0.153,-0.013 0.29,0.274 z m 3.534,0.537 -0.296,0.087 -0.079,-0.014 0.066,-0.11 0.005,-0.046 -0.296,-0.202 0.035,-0.262 0.035,-0.067 0.22,0.137 0.048,0.228 0.262,0.249 z m -11.192,0.718 -0.109,0.028 -0.094,-0.019 -0.085,0.016 -0.083,0.068 0.009,-0.283 0.097,-0.353 0.118,-0.206 0.167,-0.096 0.071,0.162 -0.013,0.576 -0.078,0.107 z m 15.175,1.393 -0.268,0.201 -0.299,-0.291 -0.049,-0.094 0.22,-0.118 0.109,-0.181 -0.088,-0.223 -0.305,-0.33 -0.015,-0.234 0.467,-0.099 0.275,0.204 0.14,0.014 -0.054,0.195 0.024,0.063 0.021,0.59 -0.13,0.083 -0.021,0.162 -0.027,0.058 z m -14.974,-0.396 -0.139,0.039 -0.176,-0.341 -0.064,-0.236 0.074,-0.013 0.07,0.027 0.074,0.089 0,0.091 0.03,0.098 0.077,0.117 0.054,0.129 z m -0.41,-0.192 0.035,0.412 0.198,0.077 0.263,0.37 -0.022,0.189 -0.055,0.065 -0.436,-0.175 -0.104,0.079 -0.127,-0.032 -0.079,-0.205 0.009,-0.072 -0.071,-0.123 -0.06,-0.055 -0.171,0.163 -0.108,0.03 0,-0.149 0.159,-0.41 0.074,-0.069 0.13,0.135 0.107,-0.05 0.081,-0.222 0.005,-0.221 0.037,-0.065 0.135,0.328 z m 8.247,1.626 -0.111,0.087 -0.125,-0.004 -0.089,-0.032 -0.044,-0.07 0.055,-0.033 0.065,-0.141 0.06,-0.038 0.089,0.018 0.055,0.057 0.045,0.156 z m 4.043,0.588 -0.083,0.237 -0.219,-0.276 -0.24,-0.189 -0.09,-0.166 -0.146,-0.1 -0.04,-0.223 0.177,-0.091 0.076,-0.009 0.182,0.271 0.284,0.031 -0.022,0.167 0.09,0.215 0.031,0.133 z m -11.515,-0.161 0.296,0.344 -0.239,-0.085 -0.254,0.238 -0.322,-0.278 -0.193,-0.282 -0.043,-0.113 0.202,-0.264 0.188,0.271 0.228,0.043 0.137,0.126 z m 16.659,-0.022 0.345,0.117 0.096,-0.013 0.163,0.042 0.043,0.214 -0.216,0.031 -0.374,0.197 -0.159,-0.043 -0.19,-0.171 -0.302,-0.018 -0.089,-0.047 0.162,-0.202 0.294,-0.102 0.227,-0.005 z m -6.928,0.828 -0.188,0.171 -0.032,-0.257 0.121,-0.271 0.165,-0.017 0.061,0.119 -0.127,0.255 z m 2.526,-0.08 -0.104,0.228 -0.175,-0.035 -0.293,-0.245 -0.1,-0.111 -0.055,-0.109 0.12,-0.013 0.147,0.116 0.375,0.061 0.085,0.108 z m 2.17,0.248 -0.131,0.014 0.04,-0.141 0.251,-0.245 0.352,-0.012 0.32,-0.123 0.072,-0.004 -0.153,0.193 -0.258,0.18 -0.493,0.138 z m -1.758,0.388 -0.269,0.022 0.016,-0.269 0.1,-0.07 0.322,0.134 -0.016,0.084 -0.153,0.099 z m -1.29,-0.262 -0.014,0.365 -0.074,-0.003 -0.043,-0.056 -0.002,-0.14 0.032,-0.22 0.101,0.054 z m -1.424,0.525 -0.16,0.107 0.053,-0.244 -0.079,-0.127 0.07,-0.108 0.103,-0.087 0.048,0.09 0.092,0.146 -0.127,0.223 z m 0.246,0.77 -0.104,0.053 -0.173,-0.077 0.046,-0.192 0.12,-0.082 0.127,0.063 0.019,0.087 -0.035,0.148 z m 2.87,0.552 -0.25,0.132 -0.171,-0.191 -0.095,-0.301 0.458,-0.442 0.11,0.04 0.066,0.114 -0.01,0.397 -0.108,0.251 z m -0.749,-0.353 -0.223,0.27 -0.186,-0.029 -0.078,-0.124 0.115,-0.254 0.249,-0.144 0.113,0.038 -0.011,0.188 0.021,0.055 z m 4.885,0.382 -0.28,0.048 0.05,-0.278 -0.137,-0.219 0.218,0.123 0.139,0.148 0.068,0.028 -0.016,0.089 -0.042,0.061 z m -6.451,0.132 -0.051,0.015 -0.074,-0.147 -0.015,-0.137 0.029,-0.081 0.097,-0.008 0.132,0.261 -0.118,0.097 z m 3.194,0.457 -0.248,0.029 -0.079,-0.026 0.151,-0.06 0.105,-0.064 0.051,-0.077 0.251,-0.136 0.165,-0.178 0.179,0.121 -0.224,0.081 -0.351,0.31 z m 3.06,0.221 -0.087,0.004 0.104,-0.168 0.296,-0.231 0.431,-0.204 0.143,-0.022 0.243,0.126 -0.446,0.209 -0.119,0.11 -0.329,0.024 -0.236,0.152 z m -4.4,0.185 -0.049,0.055 -0.212,-0.22 -0.081,-0.128 0.101,-0.107 0.312,0.25 -0.071,0.15 z m -2.374,-0.313 0.005,0.205 -0.02,0.073 -0.574,0.099 0.053,-0.235 0.035,-0.074 0.19,0.109 0.07,-0.056 0.028,-0.064 0.213,-0.057 z m 9.33,0.731 -0.061,0.055 -0.141,-0.159 -0.007,-0.083 0.144,-0.095 0.072,-0.022 0.021,0.065 -0.002,0.139 -0.026,0.1 z m -3.928,-0.109 -0.222,0.083 -0.141,0.175 -0.172,-0.124 0,-0.168 0.188,0.052 0.132,-0.095 -0.04,-0.107 0.144,0.05 0.111,0.134 z m -2.745,0.67 -0.13,0.183 -0.184,-0.065 0.075,-0.069 0.044,-0.09 0.005,-0.13 -0.05,-0.08 0.034,-0.029 0.164,0.134 0.042,0.146 z m 6.624,1.603 -0.202,0.073 -0.07,-0.009 -0.084,-0.16 0.117,-0.386 -0.108,-0.249 -0.007,-0.105 0.164,-0.146 0.114,-0.219 0.278,-0.237 0.721,-0.281 0.169,-0.026 -0.005,0.22 -0.241,0.556 -0.214,0.278 0.057,0.222 -0.343,0.062 -0.346,0.407 z m -13.44,-0.9 -0.033,0.15 -0.289,-0.103 -0.08,-0.155 -0.015,-0.344 0.076,-0.168 0.05,-0.053 0.133,0.194 0.279,0.283 -0.121,0.196 z m 11.569,2.497 -0.107,0.193 -0.109,-0.163 0.047,-0.188 -0.126,-0.297 0.239,-0.442 0.005,-0.215 0.183,-0.11 -0.045,0.365 -0.14,0.292 0.145,0.243 0.069,0.276 -0.161,0.046 z m -9.328,-0.241 0.192,0.025 0.26,-0.004 0.059,-0.021 0.166,-0.201 0.204,-0.004 0.089,0.198 -0.207,0.091 -0.042,0.052 0.04,0.042 0.155,0.083 0.216,-0.031 0.006,0.156 0.048,0.127 0.106,0.076 0.116,0.015 0.255,-0.022 0.251,-0.05 0.259,-0.1 0.265,-0.051 0.791,0.051 0.284,0.216 0.541,0.026 0.502,0.114 0.264,-0.075 0.451,-0.07 0.072,0.076 -0.058,0.487 0.028,0.142 0.13,0.068 0.128,-0.033 0.158,-0.16 0.378,-0.123 0.392,0 0.331,-0.324 0.097,-0.019 -0.061,0.159 -0.05,0.374 -0.07,0.219 -0.032,0.172 -0.221,0.089 -0.333,0.015 -0.609,-0.038 -0.614,0.061 -1.137,0.164 -1.139,0.084 -0.153,-0.055 -0.003,-0.217 -0.024,-0.15 -0.074,-0.105 -0.352,-0.09 -0.336,-0.154 -1.317,-0.21 -0.311,-0.083 -0.504,0.043 -0.185,-0.006 -0.127,-0.075 -0.088,-0.13 -0.04,-0.413 0.063,-0.409 0.109,-0.108 0.05,0.123 0.129,0.057 0.12,-0.124 -10e-4,-0.188 0.061,-0.174 0.095,0.073 0.063,0.268 0.164,0.071 z",
                        title: "Greece",
                        id: "GR",
                    },
                    {
                        d:
                            "m 370.76475,643.1304 0.273,0.232 0.217,-0.158 0.225,0.019 0.123,0.078 0.126,0.03 0.158,10e-4 0.272,0.392 -0.114,0.347 0.298,-0.068 0.259,0.289 0.118,-0.023 0.059,-0.117 0.167,-0.134 0.115,0.18 0.14,0.345 0.177,0.105 0.156,0.365 0.123,0.462 0.112,0.066 0.192,0.001 0.195,-0.063 -0.074,0.4 0.023,0.354 0.322,0.255 -0.192,0.141 -0.202,0.204 -0.411,0.157 -0.107,-0.066 -0.359,-0.355 -0.167,-0.418 -0.377,-0.596 -0.074,-0.175 -0.097,-0.112 -0.341,-0.072 -0.3,-0.143 -0.25,-0.3 -0.078,-0.184 -0.096,-0.128 -0.339,0.007 -0.214,-0.141 -0.211,-0.192 -0.953,-0.554 -0.374,0.056 -0.172,-0.156 0.009,-0.277 0.197,-0.165 -0.825,-0.063 -0.293,-0.099 0.202,-0.06 1.15,-0.009 0.431,-0.046 0.038,0.119 0.381,0.245 0.362,0.024 z m 30.421,22.057 0.012,0.306 -0.436,-0.28 -0.101,-0.132 0.14,-0.171 0.274,-0.006 0.067,0.104 0.044,0.179 z",
                        title: "South Georgia and South Sandwich Islands",
                        id: "GS",
                    },
                    {
                        d:
                            "m 224.66475,412.4284 -0.027,0.71 -0.031,0.822 -0.023,0.603 -0.031,0.804 -0.031,0.821 -0.043,1.117 -0.027,0.72 0.013,0.017 0.335,-0.035 0.495,0.032 0.121,-0.002 0.151,0.062 0.117,0.019 0.252,0.162 0.295,0.123 0.189,-0.248 -0.099,-0.149 -0.075,-0.076 0.012,-0.067 1.026,0.642 -0.121,0.099 -0.261,0.228 -0.474,0.391 -0.424,0.349 -0.409,0.316 -0.367,0.285 -0.044,0.028 -0.466,0.204 -0.078,0.093 -0.1,0.402 -0.046,0.1 0.085,0.223 0.084,0.344 -0.027,0.181 -0.322,0.221 -0.148,0.199 -0.065,0.129 -0.058,-0.033 -0.1,-0.01 -0.23,0.05 -0.112,0.011 -0.092,0.057 -0.01,0.124 0.062,0.201 0.022,0.103 -0.065,0.048 -0.284,0.121 -0.112,0.119 -0.107,0.184 -0.124,0.078 -0.13,-0.014 -0.092,0.027 -0.197,0.139 -0.296,0.268 -0.158,0.199 -0.004,0.148 0.031,0.134 -1.078,-0.472 -0.358,-0.081 -1.514,0.01 -0.649,-0.186 -0.739,-0.358 -0.501,-0.326 -1.167,-0.913 0.073,-0.074 0.062,-0.17 0.076,-0.176 -0.047,-0.203 -0.028,-0.164 0.087,-0.24 -0.008,-0.179 0.04,-0.111 0.128,-0.072 0.067,-0.137 -0.364,-0.472 0.001,-0.108 0.048,-0.133 0.294,-0.505 0.351,-0.601 0.386,-0.664 0.233,-0.4 0.849,-10e-4 0.562,-10e-4 0.714,0 0.775,-0.001 0.509,0 0.21,-0.005 -0.036,-0.26 0.028,-0.288 0.092,-0.261 0,-0.115 -0.152,-0.142 -0.293,-0.082 -0.164,-0.125 -10e-4,-0.158 -0.071,-0.191 -0.143,-0.225 -0.295,-0.23 -0.449,-0.236 -0.382,-0.316 -0.315,-0.397 -0.266,-0.255 -0.206,-0.107 -0.048,-0.056 0.601,0.004 0.568,0.005 0.004,-0.57 0.003,-0.506 0.004,-0.574 1.03,10e-4 1.231,0.001 1.276,0.002 1.002,0.001 z",
                        title: "Guatemala",
                        id: "GT",
                    },
                    { d: "m 881.11175,425.6204 -0.119,0.005 -0.103,-0.096 -0.036,-0.065 -0.002,-0.33 0.396,-0.281 0.13,-0.274 0.109,0.022 0.096,0.045 0.088,0.082 -0.453,0.457 z", title: "Guam", id: "GU" },
                    {
                        d:
                            "m 436.36375,427.2954 -0.009,0.231 0.166,0.327 -0.024,0.243 -0.072,0.23 -0.063,0.091 -0.083,0.053 -0.252,-0.002 -0.106,0.046 -0.168,0.09 -0.004,0.106 0.134,0.101 0.11,0.141 0.128,0.111 0.22,0.128 0.021,0.142 0.006,0.358 -0.012,0.28 -0.619,0.203 -0.475,0.036 -0.402,-0.022 -0.175,0.085 -0.35,0.209 -0.427,0.127 -0.219,0.009 -0.105,0.076 -0.166,0.217 -0.463,0.948 -0.153,0.227 -0.124,0.148 -0.142,-0.201 0.11,-0.372 -0.119,0.005 -0.236,0.301 -0.115,0.009 0.015,-0.356 -0.131,-0.013 -0.152,0.025 -0.212,-0.186 -0.021,-0.139 0.017,-0.194 0.129,-0.124 -0.018,-0.052 -0.125,-0.015 -0.14,0.033 -0.086,-0.059 0.142,-0.252 0.496,-0.211 0.249,-0.022 0.256,-0.048 -0.14,-0.182 -0.303,-0.072 -0.242,0.05 -0.121,0.131 -0.149,0.022 -0.25,-0.309 0.004,-0.155 0.093,-0.184 0.145,-0.083 0.575,0.002 0.218,-0.104 0.088,-0.019 0.083,-0.094 -0.018,-0.063 -0.094,-0.003 -0.215,0.123 -0.692,-0.046 -0.221,0.074 -0.385,0.283 -0.474,0.156 -0.344,-0.066 0.11,-0.379 -0.049,-0.051 -0.108,-0.063 -0.504,0.121 -0.381,-0.173 -0.151,-0.209 0.026,-0.263 0.18,-0.178 0.028,-0.089 -0.19,-0.017 -0.35,0.111 -0.771,-0.43 0.154,-0.027 0.38,0.045 0.295,-0.054 0.208,-0.091 0.283,-0.125 0.273,-0.041 0.855,0.056 0.743,-0.15 0.552,-0.282 0.51,-0.26 0.661,0.003 0.708,0.003 1.007,0.004 0.798,0.003 0.944,0.007 z m -6.334,2.26 -0.146,0.349 -0.18,-0.039 -0.126,-0.208 -0.014,-0.088 0.366,-0.028 0.1,0.014 z m 1.215,0.982 -0.026,0.066 -0.16,-0.056 0.233,-0.24 0.152,-0.042 -0.005,0.184 -0.117,0.039 -0.077,0.049 z m -0.978,0.203 -0.132,0.089 -0.136,-0.042 -0.073,-0.08 0.011,-0.143 0.154,-0.202 0.138,0.026 0.038,0.352 z m 0.496,0.712 0,0.117 -0.119,-0.022 -0.035,-0.035 0.071,-0.211 0.104,-0.094 0.128,0.015 0.038,0.028 -0.025,0.081 -0.056,0.067 -0.106,0.054 z m -1.092,0.444 -0.225,0.042 -0.102,-0.141 -0.015,-0.055 0.117,-0.047 0.053,-0.002 0.089,-0.103 0.11,-0.068 0.049,-0.022 0.057,0.005 0.041,0.226 -0.054,0.095 -0.12,0.07 z m 0.613,-0.066 -0.026,0.079 -0.165,-0.012 0.037,-0.08 -0.036,-0.023 0.047,-0.24 0.025,-0.037 0.08,0.089 0.011,0.037 0.027,0.187 z",
                        title: "Guinea-Bissau",
                        id: "GW",
                    },
                    {
                        d:
                            "m 314.37875,447.4304 -0.149,0.176 -0.027,0.113 -0.096,0.199 -0.075,0.108 0.109,0.248 0.124,0.011 0.048,0.032 0.031,0.048 -0.007,0.053 -0.048,0.047 -0.119,0.06 -0.113,0.143 0.011,0.158 -0.071,0.082 -0.228,0.044 -0.446,0 -0.218,0.011 -0.175,0.027 -0.115,0.102 -0.146,0.072 -0.115,0.016 -0.101,0.119 -0.101,0.168 0.034,0.116 0.104,0.153 0.061,0.157 -0.08,0.255 -0.088,0.197 -0.052,0.15 -0.071,0.288 -0.171,0.318 -0.122,0.18 0,0.197 0.062,0.278 0.349,0.406 0.116,0.194 0.095,0.311 0.315,0.245 0.199,0.198 -0.019,0.261 0.027,0.082 0.123,0.066 0.15,0.05 0.165,-0.004 0.148,-0.022 0.034,-0.037 0.342,-0.005 0.039,0.066 0.02,0.376 0.014,0.153 0.081,0.061 0.049,0.094 0.003,0.084 0.015,0.211 0.051,0.111 -0.008,0.224 0.035,0.083 0.095,0.056 0.119,0.161 0.045,0.02 0.023,0.057 0.102,0.229 0.052,0.069 0.036,0.01 0.016,0.08 0.074,0.214 0.05,0.053 0.095,0.157 0.039,0.172 0.126,0.194 0.129,0.136 0.058,0.141 0.165,0.311 0.16,0.219 0.216,0.057 0.181,0.031 0.113,0.084 0.111,0.091 -0.119,0.042 -0.107,0.056 -0.149,-0.043 -0.206,0.023 -0.214,0.062 -0.198,0.03 -0.373,-0.098 -0.113,-0.014 -0.078,-0.042 -0.154,-0.193 -0.074,-0.023 -0.198,0.09 -0.241,0.063 -0.118,-0.012 -0.139,0.065 -0.129,0.087 -0.246,0.377 -0.127,0.133 -0.136,0.061 -0.273,-0.002 -0.292,0.014 -0.219,0.091 -0.204,0.046 -0.102,0.006 -0.035,0.207 -0.047,0.096 -0.064,0.055 -0.159,0.016 -0.143,-0.007 -0.086,-0.086 -0.161,-0.043 -0.143,-0.031 -0.092,-0.049 -0.075,0.012 -0.062,0.086 -0.049,0.074 -0.043,0.136 -0.217,0.043 -0.093,0.077 0.054,0.253 -0.025,0.099 -0.045,0.077 -0.262,0.015 -0.223,-0.005 -0.128,0.093 -0.16,0.109 -0.097,0.02 -0.115,-0.006 -0.151,-0.127 -0.146,-0.155 -0.37,-0.109 -0.367,-0.09 -0.241,-0.247 -0.057,-0.121 -0.113,-0.054 -0.286,-0.293 -0.158,-0.188 -0.171,-0.051 -0.196,-0.078 0.008,-0.137 -0.013,-0.131 -0.085,-0.054 -0.118,-0.035 -0.043,-0.074 0.012,-0.172 0.023,-0.445 -0.033,-0.425 -0.263,-0.147 -0.114,-0.101 -0.2,-0.629 -0.094,-0.283 -0.004,-0.211 0.066,-0.628 0.075,-0.272 0.204,-0.545 0.117,-0.185 0.007,-0.138 -0.012,-0.177 -0.06,-0.35 0.344,-0.221 0.148,-0.093 0.025,-0.148 0.184,-0.187 0.082,-0.178 0.068,-0.14 -0.019,-0.074 -0.08,-0.043 -0.095,-0.133 -0.199,-0.384 -0.072,-0.078 -0.061,-0.108 0.031,-0.169 0.078,-0.185 -0.01,-0.077 -0.119,-0.099 -0.246,-0.166 -0.204,-0.012 -0.158,-0.06 -0.232,-0.008 -0.185,-0.018 -0.106,-0.062 0.022,-0.102 0.046,-0.078 0.156,-0.194 0.104,-0.206 0.014,-0.202 0.032,-0.265 0.045,-0.231 0.024,-0.26 -0.245,-0.171 -0.078,-0.141 -0.101,-0.125 -0.112,0 -0.168,-0.053 -0.262,0.164 -0.207,-0.03 -0.142,0.062 -0.328,-0.013 -0.211,-0.08 -0.254,0.053 -0.595,-0.659 -0.598,-0.663 -0.589,-0.652 -0.039,-0.089 0.246,-0.311 0.22,-0.223 0.183,-0.127 0.087,-0.111 -0.067,-0.48 0.004,-0.172 -0.086,-0.188 -0.061,-0.21 0.073,-0.176 0.089,-0.122 0.115,-0.048 0.274,-0.042 0.194,-0.018 0.069,-0.07 0.112,-0.081 0.148,-0.005 0.288,0.057 0.132,-0.106 0.239,-0.144 0.536,-0.247 0.12,-0.162 0.084,-0.25 -0.009,-0.119 -0.055,-0.044 -0.133,-0.041 -0.204,-0.006 -0.163,0.065 -0.169,-0.036 -0.14,-0.154 -0.008,-0.128 0.083,-0.18 -0.048,-0.12 -0.268,-0.38 10e-4,-0.105 0.195,-0.171 0.11,-0.145 0.151,-0.348 0.12,-0.116 0.373,-0.041 0.095,-0.074 0.19,-0.184 0.284,-0.21 0.408,-0.168 0.117,-0.305 0.073,-0.084 0.325,-0.16 0.057,-0.086 -0.008,-0.076 -0.522,-0.685 0.104,0.046 0.404,0.448 0.224,0.097 0.047,0.002 0.002,-0.116 0.206,0.048 0.53,0.307 0.777,0.505 1.091,0.954 0.31,0.363 0.209,0.171 0.324,0.416 0.095,0.202 -0.009,0.809 -0.288,0.546 -0.07,0.411 -0.015,0.547 -0.167,0.313 0.221,-0.17 0.069,-0.493 0.189,-0.3 0.245,-0.329 0.327,-0.079 0.352,0.14 0.284,0.025 0.25,0.097 0.532,0.526 0.52,0.416 0.19,0.333 0.551,0.167 0.326,0.263 0.105,0.228 0.064,0.594 -0.106,0.898 z",
                        title: "Guyana",
                        id: "GY",
                    },
                    {
                        d:
                            "m 795.58175,398.3754 0.01,0.013 0.061,0.113 -0.019,0.126 0.114,0.061 0.028,0.125 -0.126,0.067 -0.007,0.146 -0.056,0.09 -0.362,-0.16 -0.298,-0.083 -0.269,0.033 -0.098,-0.094 -0.017,-0.097 0.31,-0.168 0.024,-0.084 0.008,-0.007 0.09,-0.086 0.134,-0.025 0.07,-0.042 0.183,0 0.112,0.033 0.108,0.039 z m -0.753,0.998 -0.338,0 -0.072,-0.03 -0.036,-0.064 0.12,-0.116 0.456,-0.16 -0.114,0.168 -0.016,0.202 z m 0.657,0 -0.069,0.046 -0.192,-0.22 -0.012,-0.072 0.148,-0.013 0.167,0.1 -0.01,0.091 -0.032,0.068 z",
                        title: "Hong Kong",
                        id: "HK",
                    },
                    {
                        d: "m 681.75475,638.7484 -0.335,0.222 -0.345,-0.002 -0.147,-0.174 -0.215,-0.545 -0.143,-0.039 -0.089,-0.15 -0.007,-0.063 0.152,-0.044 0.232,0.156 0.555,0.126 0.408,0.299 0.3,0.101 -0.12,0.08 z",
                        title: "Heard Island and McDonald Islands",
                        id: "HM",
                    },
                    {
                        d:
                            "m 233.89975,416.3784 -0.214,0.168 -0.039,-0.076 0.103,-0.156 0.129,-0.089 0.125,0.009 -0.03,0.067 -0.074,0.077 z m -1.541,0.242 -0.45,0.227 -0.141,-0.004 0.206,-0.175 0.333,-0.15 0.282,-0.074 0.231,0.032 -0.461,0.144 z m 9.156,4.013 -0.723,-0.043 -0.341,0.089 -0.149,0.201 -0.128,0.09 -0.107,-0.021 -0.217,0.079 -0.327,0.178 -0.294,0.067 -0.263,-0.043 -0.076,0.043 -0.021,0.059 -0.04,0.057 -0.102,0.03 -0.117,-0.016 -0.131,-0.063 -0.069,0.027 -0.008,0.116 -0.071,0.031 -0.134,-0.055 -0.151,0.042 -0.168,0.139 -0.236,0.029 -0.304,-0.08 -0.235,-0.151 -0.167,-0.222 -0.2,-0.056 -0.35,0.165 -0.146,0.193 -0.032,0.118 0.034,0.107 -0.064,0.071 -0.163,0.036 -0.124,0.131 -0.084,0.226 -0.017,0.175 0.051,0.123 -0.081,0.09 -0.213,0.058 -0.251,0.195 -0.29,0.332 -0.288,0.231 -0.287,0.131 -0.138,0.146 0.01,0.16 -0.018,0.05 -0.055,0.019 -0.093,0.022 -0.553,-0.348 -0.159,-0.243 -0.137,0.037 -0.174,0.123 -0.245,0.273 -0.262,0.372 -0.127,0.042 -0.655,-0.056 -0.346,0.033 -0.071,0.049 -0.032,0.136 0.02,0.182 0.095,0.654 0.053,0.269 -0.052,0.083 -0.176,0.013 -0.229,0.038 -0.125,0.123 -0.03,0.127 -0.012,0.177 -0.072,0.183 -0.141,0.131 -0.14,0.047 -0.781,0.035 0.014,-0.302 -0.225,-0.123 -0.128,-0.252 -0.112,-0.17 0.037,-0.102 -0.011,-0.121 -0.318,-0.094 -0.297,0.073 -0.171,-0.048 -0.126,-0.064 0.217,-0.149 0.015,-0.091 -0.07,-0.065 -0.071,-0.044 0.021,-0.169 0.044,-0.2 0.122,-0.467 -0.045,-0.082 -0.199,-0.141 -0.252,-0.014 -0.278,0.044 -0.134,-0.072 -0.117,-0.161 -0.198,-0.077 -0.351,0.128 -0.372,0.193 -0.114,0.07 -0.094,-0.009 -0.042,-0.145 -0.019,-0.171 -0.023,-0.042 -0.198,-0.061 -0.231,-0.044 -0.118,-0.047 -0.111,-0.116 -0.277,-0.151 -0.063,-0.112 -0.37,-0.256 -0.075,-0.127 -0.085,-0.093 -0.178,-0.118 -0.139,0.028 -0.469,-0.147 -0.071,-0.013 0.065,-0.129 0.148,-0.199 0.322,-0.222 0.027,-0.18 -0.084,-0.344 -0.085,-0.223 0.046,-0.1 0.101,-0.402 0.078,-0.093 0.466,-0.204 0.043,-0.028 0.368,-0.285 0.408,-0.316 0.424,-0.349 0.474,-0.391 0.261,-0.229 0.121,-0.099 0.273,0.081 0.215,-0.185 0.124,-0.062 0.291,-0.221 0.09,-0.048 0.486,-0.091 0.235,0.002 0.206,0.225 0.163,0.123 0.307,-0.105 0.257,-0.023 1.063,0.209 0.422,-0.092 0.775,-0.02 0.349,0.052 0.492,-0.295 0.316,-0.06 0.371,-0.138 -0.049,-0.142 -0.089,-0.064 0.566,0.062 0.843,0.3 0.898,-0.054 0.324,-0.162 0.209,-0.046 0.92,0.308 0.242,0.237 0.189,0.023 0.147,-0.054 0.04,-0.049 -0.181,-0.052 -0.083,-0.074 0.725,0.146 1.364,1.117 0.028,0.091 -0.583,-0.33 -0.308,0.025 -0.081,0.053 0.018,0.18 0.028,0.084 0.132,0.01 0.098,-0.049 0.241,0.059 0.16,0.12 0.193,0.184 0.116,0.199 0.125,0.003 0.123,-0.12 0.232,-0.015 0.15,0.134 0.107,-0.008 -0.149,-0.208 -0.351,-0.207 0.083,-0.009 0.778,0.371 0.22,0.466 0.183,0.105 0.185,0.145 z",
                        title: "Honduras",
                        id: "HN",
                    },
                    {
                        d:
                            "m 521.24775,315.9454 0.151,0.061 0.5,0.278 0.346,0.313 0.192,0.347 0.26,0.268 0.328,0.19 0.26,0.257 0.192,0.324 0.269,0.182 0.345,0.039 0.218,0.111 0.092,0.183 0.188,0.165 0.283,0.148 0.439,0.081 0.842,0.02 0.075,0.004 0.19,0.046 0.222,-0.058 0.271,-0.115 0.087,-0.069 0.284,-0.378 0.157,0.033 0.312,-0.046 0.189,-0.084 0.014,0 -0.012,0.097 -0.021,0.169 -0.153,0.119 0.155,0.275 0.148,0.446 -0.083,0.22 0.101,0.171 0.284,0.123 0.026,0.049 -0.087,0.051 -0.072,0.145 -0.008,0.264 0.248,0.25 0.504,0.234 0.161,0.039 0.062,0.09 0.084,0.059 0.05,0.072 0.003,0.093 -0.037,0.064 -0.239,0.022 -0.272,-0.002 -0.194,-0.113 -0.018,0.083 -0.003,0.094 -0.188,0.057 0.104,0.647 -0.042,0.186 -0.069,0.063 -0.064,-0.026 -0.079,-0.007 -0.039,0.061 0.033,0.138 -0.185,0.016 -0.294,-0.071 -0.135,-0.125 -0.023,-0.127 -0.002,-0.119 -0.094,-0.195 -0.234,-0.202 -0.489,-0.033 -0.181,-0.064 -0.187,-0.073 -0.204,-0.055 -0.188,0.005 -0.227,0.054 -0.396,-0.089 -0.134,0.119 -0.208,0.137 -0.173,-0.003 -0.344,-0.318 -0.103,-0.02 -0.301,0.162 -0.123,0.009 -0.094,-0.051 -0.407,-0.122 -0.184,-0.026 -0.135,0.058 -0.239,-0.062 -0.58,-0.417 -0.359,0.317 -0.73,-0.079 -0.217,0.217 -0.248,0.411 -0.201,0.196 -0.175,-0.07 -0.207,-0.181 -0.362,-0.465 -0.183,-0.084 -0.21,-0.02 -0.183,0.052 -0.098,0.094 -0.075,0.679 -0.066,0.597 -0.004,0.357 0.402,0.33 0.475,0.567 0.152,0.065 0.076,0.185 0.111,0.477 0.125,0.535 0.241,0.354 0.217,0.252 0.265,0.222 0.333,0.347 0.272,0.381 0.072,0.14 0.529,0.502 0.513,0.511 0.458,0.179 0.072,0.094 0.004,0.392 0.05,0.147 0.306,0.41 0.625,0.599 0.072,0.138 0.021,0.102 -0.04,0.078 -0.164,0.082 -0.134,-0.091 -0.582,-0.584 -0.563,-0.369 -0.635,-0.696 -0.85,-0.276 -0.579,-0.306 -0.351,0.046 -0.387,0.096 -0.239,0.003 -0.17,-0.055 -0.12,-0.19 0.018,-0.147 -0.021,-0.191 -0.339,-0.307 -0.463,-0.292 -0.438,-0.378 -0.88,-1.024 -0.177,-0.331 0.173,-0.063 0.131,0.006 0.148,-0.068 0.24,-0.001 0.284,0.067 -0.251,-0.22 -0.313,-0.216 -0.81,-0.86 -0.242,-0.408 -0.028,-0.44 0.06,-0.604 -0.146,-0.434 -0.625,-0.563 -0.229,-0.297 -0.461,-0.177 -0.207,0.017 -0.124,0.22 -0.09,0.488 -0.409,0.642 -0.136,0.278 -0.214,0.361 -0.186,0.025 -0.109,-0.032 -0.332,-0.608 -0.317,-0.462 -0.044,-0.219 -0.029,-0.27 -0.242,-0.997 0.17,-0.14 0.105,0.16 0.739,0.193 0.16,-0.085 0.097,-0.131 0,-0.083 0.063,-0.024 0.26,0.126 0.212,-0.029 0.342,-0.006 0.244,0.021 0.162,-0.097 0.218,-0.357 0.081,-0.2 0.098,-0.048 0.064,0.024 0.047,0.165 0.115,0.154 0.236,0.251 0.167,0.121 0.151,0.043 0.148,-0.101 0.153,-0.029 0.438,0.196 0.37,0.037 0.273,-0.102 -0.036,-0.141 -0.1,-0.157 -0.021,-0.152 0.018,-0.132 0.188,-0.131 -0.009,-0.058 -0.227,-0.231 0.011,-0.06 0.497,-0.261 0.479,-0.146 0.077,-0.113 0.044,-0.17 0.021,-0.319 -0.026,-0.261 -0.194,-0.245 -0.012,-0.124 0.046,-0.129 0.076,-0.117 0.192,-0.05 0.225,-0.084 0.178,-0.097 0.24,-0.08 0.189,-0.112 0.185,-0.267 0.112,-0.044 0.339,0.038 0.073,-0.066 -0.047,-0.384 0.061,-0.098 0.12,-0.055 0.056,-0.054 0.299,0.042 0.257,0.095 z m -4.787,6.104 -0.346,0.085 -0.165,-0.152 -0.043,-0.125 -0.285,-0.04 -0.172,-0.173 -0.035,-0.077 0.244,-0.191 0.13,-0.309 0.165,0.186 0.2,0.349 0.107,0.097 0.2,0.35 z m -0.905,1.25 -0.022,0.152 -0.17,-0.193 -0.086,-0.346 -0.215,-0.561 -0.028,-0.158 0.111,-0.156 -0.006,-0.159 -0.152,-0.494 0.127,-0.081 0.076,-0.01 0.031,0.343 0.069,0.197 0.207,0.242 -0.042,0.399 0.042,0.567 0.042,0.126 0.016,0.132 z m 0.964,-0.389 0.071,0.174 -0.264,-0.157 -0.237,-0.06 -0.05,-0.118 0.034,-0.097 0.051,-0.094 0.179,0.013 0.027,0.092 0.189,0.247 z m 1.002,1.661 -0.072,0.104 -0.182,-0.191 -0.167,-0.136 -0.119,-0.162 -0.234,-0.202 -0.079,-0.231 -0.349,-0.472 -0.052,-0.128 0.174,0.191 0.145,0.12 0.12,0.029 0.304,0.301 0.299,0.386 0.356,0.335 -0.074,0.01 -0.07,0.046 z m 10e-4,1.611 0.04,0.057 -0.004,0.039 -0.146,-0.055 -0.039,0.018 -0.687,-0.849 -0.074,-0.166 0.246,0.198 0.664,0.758 z m 0.118,-0.544 0.044,0.137 -0.35,-0.258 -0.133,-0.173 -0.024,-0.078 0.463,0.372 z m 0.394,0.344 0.185,0.289 -0.177,-0.06 -0.184,-0.178 -0.108,-0.194 0.284,0.143 z m 3.968,2.716 -0.443,0.01 -0.385,-0.07 -0.188,-0.119 0.014,-0.101 0.058,-0.168 0.429,0.02 0.653,0.119 0.16,0.139 -0.05,0.064 -0.248,0.106 z m 1.147,0.556 -0.196,0.04 -1.249,-0.03 -0.363,-0.08 -0.404,-0.205 -0.082,-0.063 0.406,-0.06 0.378,0.06 0.116,0.149 1.021,0.119 0.373,0.07 z m 1.329,0.875 0.204,-0.07 0.173,0.051 0.11,0.218 0.217,0.144 0.353,0.252 0.223,0.193 0.505,0.346 0.12,0.048 0.252,0.103 0.005,0.14 0.108,0.159 0.114,0.183 -0.518,-0.36 -0.483,-0.403 -0.945,-0.622 -0.67,-0.151 -0.917,-0.501 -0.597,-0.178 0.228,-0.041 0.262,-10e-4 1.414,0.669 -0.158,-0.179 z m -2.853,-0.38 0.519,0.107 0.38,-0.049 0.344,0.066 0.214,0.121 0.051,0.06 -0.277,0.008 -0.314,-0.049 -0.356,0.123 -0.314,-0.065 -0.119,-0.081 -0.084,-0.1 -0.044,-0.141 z m 2.686,0.868 0.383,0.261 -1.123,-0.343 0.127,-0.031 0.119,-0.007 0.494,0.12 z",
                        title: "Croatia",
                        id: "HR",
                    },
                    {
                        d:
                            "m 270.96475,405.8734 0.114,0.069 -0.043,0.084 -0.283,-0.052 -0.293,-0.095 -0.096,0.023 -0.059,-0.012 -0.171,-0.091 0.15,-0.07 0.155,-0.023 0.17,0.005 0.356,0.162 z m 2.483,0.947 0.062,0.088 0.129,0.597 0.013,0.191 -0.13,0.288 0.019,0.114 0.279,0.266 0.005,0.096 -0.033,0.097 -0.238,0.252 -0.183,0.172 0.058,0.198 0.148,0.188 0.019,0.157 -0.045,0.207 -0.227,0.257 -0.119,0.092 -0.338,0.011 -0.038,0.037 0.168,0.251 0.19,0.284 0.311,0.22 0.069,0.207 -0.075,0.196 -0.013,0.484 -0.238,-0.235 -0.261,-0.196 -0.157,-0.076 -0.163,-0.049 -1.245,0.025 -0.14,0.034 -0.108,0.063 -0.116,0.031 -0.342,0.059 -0.34,0.013 -0.795,-0.158 -0.315,-0.082 -0.317,-0.052 -0.364,0.017 -0.362,0.048 -0.29,0.114 -0.217,0.201 -0.041,0.187 -0.128,0.048 -0.293,-0.297 -0.27,-0.211 -0.307,-0.159 -0.629,-0.227 -0.115,-0.138 -0.051,-0.167 0.254,-0.514 0.289,-0.094 0.159,-0.018 0.357,0.063 0.349,0.117 0.318,0.076 0.493,0.03 0.268,0.126 1.893,0.196 0.359,0.062 0.14,-0.021 0.122,-0.077 0.102,-0.139 0.117,-0.104 0.561,-0.023 0.118,-0.047 0.082,-0.145 -0.002,-0.151 -0.33,-0.202 -0.516,-0.444 -0.454,-0.523 0.196,-0.177 -0.075,-0.323 0.074,-0.299 0.108,-0.293 -0.45,-0.251 -0.532,-0.251 -0.737,-0.079 -0.227,-0.063 -0.118,-0.188 0.106,-0.252 0.239,-0.14 0.274,-0.086 0.281,-0.06 0.677,-0.072 0.672,0.081 0.581,0.26 0.59,0.204 0.745,0.068 0.335,0.074 0.155,-0.064 z m -2.877,2.779 -0.049,0.208 -0.718,-0.247 -0.582,-0.312 0.025,-0.169 0.297,-0.039 0.285,0.104 0.421,0.208 0.321,0.247 z",
                        title: "Haiti",
                        id: "HT",
                    },
                    {
                        d:
                            "m 537.00875,308.0604 0.267,-0.034 0.011,0.005 0.063,0.02 0.045,0.196 0.007,0.013 0.065,0.129 0.06,0.171 0.094,0.129 0.207,0.053 0.27,0.159 0.175,0.3 0.263,0.124 0.019,0.003 0.052,-0.014 0.19,-0.011 0.037,0.06 0.151,0.147 0.059,0.128 -0.03,0.136 0.027,0.154 0.057,0.054 -0.069,0.103 -0.491,0.516 -0.193,0.136 -0.127,0.028 -0.201,-0.054 -0.207,0.041 -0.185,0.11 -0.171,0.035 -0.129,0.131 -0.167,0.28 -0.206,0.236 -0.207,0.147 -0.108,0.131 -0.012,0.452 -0.115,0.13 -0.154,0.131 -0.085,0.115 -0.235,0.686 -0.178,0.219 -0.17,0.168 -0.028,0.153 0.003,0.176 -0.192,0.35 -0.252,0.362 -0.048,0.149 0.056,0.2 -0.242,0.23 -0.139,0.111 -0.116,0.052 -0.072,0.144 -0.118,0.351 0.031,0.156 0.003,0.144 -0.204,0.084 -0.06,0.158 -0.052,0.196 -0.085,0.088 -0.229,0.163 -0.57,-0.071 -0.215,0.055 -0.064,0.116 -0.013,0.093 -0.072,0.088 -0.129,0.109 -0.133,0.049 -0.297,-0.135 -0.637,0.138 -0.11,0.098 -0.089,-0.071 -0.137,-0.063 -0.637,-0.08 -0.252,0.063 -0.337,-0.024 -0.311,-0.07 -0.233,0.057 -0.205,0.274 -0.102,0.092 -0.08,0.059 -0.175,0.086 -0.147,0.103 -0.195,0.074 -0.175,-0.01 -0.165,-0.118 -0.059,0.027 -0.052,0.109 -0.09,0.092 -0.247,0.114 -0.063,-0.002 -0.014,0 -0.189,0.084 -0.312,0.047 -0.157,-0.033 -0.284,0.378 -0.087,0.069 -0.271,0.115 -0.221,0.058 -0.19,-0.046 -0.075,-0.004 -0.842,-0.019 -0.44,-0.081 -0.282,-0.148 -0.188,-0.165 -0.092,-0.183 -0.218,-0.11 -0.345,-0.039 -0.268,-0.182 -0.193,-0.324 -0.259,-0.257 -0.329,-0.19 -0.26,-0.268 -0.192,-0.347 -0.346,-0.313 -0.5,-0.278 -0.151,-0.061 -0.03,-0.09 -0.244,-0.346 -0.105,-0.128 0.01,-0.172 -0.049,-0.098 -0.089,-0.068 -0.048,-0.249 -0.028,-0.186 -0.07,-0.12 -0.535,-0.025 0.448,-0.444 0.223,-0.124 0.258,0.021 0.083,-0.04 0.022,-0.065 0.044,-0.145 0.022,-0.137 0.022,-0.13 -0.028,-0.072 -0.125,-0.023 -0.06,-0.319 0.064,-0.121 0.064,-0.084 -0.079,-0.389 0.024,-0.133 0.202,-0.021 0.167,-0.083 0.137,-0.094 0.038,-0.121 0.112,-0.246 -0.103,-0.302 -0.583,-0.197 -0.03,-0.075 0.135,-0.086 0.145,-0.122 0.084,-0.096 0.112,-0.013 0.158,0.049 0.282,0.219 0.107,0.032 0.104,-0.064 0.111,-0.014 0.311,0.008 0.262,-0.051 -0.059,-0.233 10e-4,-0.17 -0.045,-0.136 0.028,-0.149 0.106,-0.117 0.032,-0.262 0.163,-0.177 0.077,-0.026 0.288,0.033 0.068,0.046 0.044,0.01 0.459,0.431 0.434,0.324 0.355,0.166 0.522,0.013 0.555,0.015 0.928,-0.057 0.696,-0.042 0.046,-0.081 0.105,-0.193 -0.084,-0.166 0.005,-0.195 0.117,-0.254 0.344,-0.212 0.985,-0.093 0.566,-0.158 0.086,-0.215 0.187,-0.213 0.172,-0.043 0.235,0.098 0.283,0.187 0.249,0.1 0.145,-0.064 0.5,-0.316 0.576,-0.31 0.396,-0.84 0.043,-0.135 0.429,-0.096 0.627,0.017 0.322,0.11 0.242,0.058 0.362,-0.02 0.522,-0.181 0.193,0.005 0.15,0.128 0.164,0.111 0.111,0.135 0.084,0.191 0.045,0.071 0.073,0.098 0.132,0.134 0.127,0.035 0.967,-0.233 z",
                        title: "Hungary",
                        id: "HU",
                    },
                    {
                        d:
                            "m 819.94975,493.5214 -0.261,10e-4 -0.084,-0.03 -0.021,-0.25 0.077,-0.14 0.605,-0.18 0.236,-0.166 0.336,-0.345 0.208,-0.09 0.053,-0.039 0.036,0.007 0.033,0.263 0.084,0.156 0.015,0.082 -0.302,0.133 -0.27,0.306 -0.588,0.2 -0.157,0.092 z m -2.991,-0.905 -0.14,0.034 -0.301,-0.082 -0.061,-0.05 0.258,-0.137 0.198,-0.194 0.231,-0.017 0.137,0.04 -0.047,0.231 -0.275,0.175 z m 4.302,-0.816 -0.253,0.099 -10e-4,-0.208 0.195,-0.263 0.178,-0.089 0.099,0.105 0.009,0.048 -0.258,0.094 0.031,0.214 z m -9.552,-2.626 0.127,0.127 0.459,0.245 0.075,0.103 0.029,0.17 0.092,0.126 0.207,0.02 0.221,-0.026 0.169,0.081 0.146,0.127 0.216,0.247 0.19,0.273 0.236,0.153 0.135,0.228 -0.079,0.201 -0.299,0.278 -0.161,0.06 -0.221,0.022 -0.344,0.166 -0.126,-0.086 -0.39,-0.06 -0.311,-0.12 -0.261,-0.219 -0.15,-0.235 -0.19,-0.208 -0.331,-0.139 -0.594,-0.408 -0.367,-0.037 -0.15,0.03 -0.151,0.002 -0.778,-0.183 -0.121,-0.107 -0.095,-0.137 -0.087,-0.135 -0.053,-0.151 0.1,-0.134 0.104,-0.09 0.433,-0.158 0.31,-0.048 0.359,0.007 0.535,-0.049 0.507,0.079 0.156,-0.059 0.256,-0.164 0.089,0.057 0.108,0.151 z m 13.82,-0.907 0.103,0.031 0.356,-0.17 0.067,0.032 0.069,0.077 10e-4,0.227 -0.137,0.189 -0.346,0.015 -0.049,0.053 -0.004,0.115 0.027,0.112 0.08,0.09 0.103,0.158 0.097,0.368 -0.196,0.151 -0.099,0.284 -0.34,0.267 -0.374,0.437 -0.3,0.223 -0.263,0.264 -0.226,0.177 -0.283,0.06 -0.423,0.038 -0.575,0.316 -0.318,0.138 -0.31,0.01 -0.29,-0.103 -0.11,-0.116 0.026,-0.156 0.096,-0.134 0.117,-0.11 0.074,-0.142 -0.328,-0.18 -0.028,-0.137 0.13,-0.365 0.085,-0.375 0.122,-0.256 0.47,-0.457 0.281,-0.227 0.166,-0.088 0.046,0.096 0.105,0.116 0.071,0.019 0.054,-0.026 0.414,0.04 0.104,-0.04 0.158,-0.181 0.104,-0.101 0.07,-0.214 0.018,-0.136 0.368,-0.099 0.197,-0.109 0.175,-0.155 0.51,-0.264 0.091,-0.073 -0.02,0.251 0.064,0.06 z m -26.176,-0.801 -0.078,0.097 -0.228,-0.173 -0.058,-0.078 0.169,-0.112 0.059,-0.016 0.146,0.122 -0.01,0.16 z m 20.677,-0.633 -0.09,0.166 -0.161,-0.047 0.044,-0.16 0.082,-0.095 0.218,-0.138 0.222,-0.024 0.136,0.048 0.043,0.053 -0.346,0.054 -0.148,0.143 z m -9.86,0.552 -0.109,0.027 -0.11,-0.041 0.045,-0.251 -0.063,-0.171 0.114,-0.134 0.029,-0.237 0.046,-0.072 0.067,0.075 0.031,0.049 0.058,0.023 0.126,0.004 0.028,0.103 -0.005,0.097 -0.054,0.102 -0.15,0.109 -0.108,0.123 0.055,0.194 z m 10.814,-1.089 -0.057,0.124 -0.764,-0.008 0.021,-0.163 0.212,-0.178 0.071,-0.059 0.234,-0.052 0.334,0.094 -0.051,0.242 z m -18.737,0.73 -0.355,0.584 0.127,0.094 0.076,0.089 -0.588,0.121 -0.245,-0.064 -0.142,0.017 -0.597,-0.11 -0.427,-0.134 -0.049,-0.106 0.034,-0.127 0.126,0.043 0.329,0.02 0.126,-0.057 0.003,-0.376 -0.046,-0.491 0.445,-0.4 0.237,-0.162 0.272,-0.095 0.688,0.221 0.114,0.06 0.088,0.09 0.043,0.144 -0.259,0.639 z m 21.458,-0.801 -0.171,0.174 -0.116,0.303 -0.106,0.092 -0.227,0.057 -0.137,-0.304 -0.251,0.014 0.123,-0.268 0.118,-0.1 0.154,-0.002 0.076,0.108 0.041,0.023 0.362,-0.453 0.073,-0.005 0.061,0.02 0.049,0.057 -0.049,0.284 z m -1.016,-0.161 -0.396,0.077 -0.242,0.352 -0.192,-0.005 -0.105,0.156 -0.024,0.067 0.014,0.063 -0.021,0.06 -0.076,0.062 -0.18,-0.097 -0.154,0.124 -0.065,0.03 -0.227,-0.144 -0.215,0.009 -0.065,-0.022 0.267,-0.258 0.364,-0.241 0.06,-0.089 -0.143,-0.024 -0.085,-0.036 -0.011,-0.057 0.23,-0.038 0.159,-0.005 0.121,0.074 0.077,0 0.492,-0.284 0.195,0.064 0.142,0.073 0.08,0.089 z m 42.014,0.328 -0.139,0.037 -0.706,-0.085 -0.075,-0.116 -0.011,-0.06 0.161,-0.115 0.156,-0.195 0.242,-0.073 0.094,0 0.284,0.462 -0.006,0.145 z m -59.887,-0.06 -0.063,0.002 -0.122,-0.055 0.044,-0.117 -0.066,-0.191 0.023,-0.157 0.156,-0.089 0.333,-0.01 0.012,0.115 -0.317,0.502 z m 4.259,-0.363 -0.123,0.003 -0.025,-0.113 0.044,-0.118 0.118,-0.05 0.054,-0.003 0.085,0.107 0.019,0.056 -0.079,0.074 -0.093,0.044 z m 15.44,-0.276 0.067,0.171 0.217,-0.095 0.212,-0.024 0.482,0.018 0.354,0.038 0.209,0.071 0.02,0.343 -0.098,0.074 -1.831,0.259 -0.179,-0.083 -0.07,-0.082 0.197,-0.254 -0.091,-0.121 0.104,-0.197 0.219,-0.134 0.188,0.016 z m 9.116,-0.118 0.491,0.113 0.281,-0.012 0.058,0.101 -0.269,0.239 -0.569,-0.184 -0.097,-0.197 0.105,-0.06 z m -14.147,1.446 -0.396,0.1 -0.246,0.095 -0.235,0.126 -0.148,0.026 -0.269,0.01 -0.381,-0.023 -0.257,0.041 -0.717,0.326 -0.282,0.028 -0.244,0.08 -0.084,-0.127 -0.104,-0.094 -0.238,-0.023 -0.238,0.007 -0.242,0.288 -0.386,-0.061 -0.149,0.025 -0.145,0.061 -0.143,0.027 -0.15,-0.02 -0.563,-0.224 -0.646,-0.133 -0.648,0.052 -0.558,-0.123 -0.306,0.094 -0.288,0.134 -0.085,-0.141 -0.105,-0.124 -0.094,-0.186 -0.003,-0.211 0.031,-0.147 0.083,-0.135 0.052,-0.14 0.024,-0.15 0.122,0.071 0.127,-0.027 0.38,-0.163 0.371,-0.247 0.345,-0.09 0.199,-0.025 0.17,0.049 0.173,-0.018 0.177,-0.055 0.279,0.189 0.117,0.039 0.378,0.015 0.344,0.109 0.308,0.164 0.444,0.153 0.268,0.206 0.204,0.076 0.151,0.021 0.139,-0.028 0.176,-0.138 0.205,-0.057 0.178,0.002 0.325,-0.036 0.138,-0.033 0.153,-0.076 0.15,0.047 0.132,0.07 0.55,0.361 0.169,0.01 0.31,-0.078 0.093,-0.097 0.048,-0.149 0.085,-0.124 0.118,-0.107 0.134,-0.082 0.411,-0.139 0.281,-0.137 0.193,-0.232 -0.451,-0.102 0.095,-0.167 0.15,-0.094 0.199,0.035 0.173,0.13 0.077,0.499 -0.142,0.07 -0.09,0.076 -0.06,0.1 -0.256,0.183 0.101,0.229 -0.075,0.095 -0.106,0.044 z m 22.675,-0.827 -0.244,0.088 0.163,-0.223 0.524,-0.506 0.188,0.094 0.25,0.018 -0.373,0.229 -0.38,0.095 -0.128,0.205 z m -35.418,-0.002 0.141,0.111 0.128,-0.01 0.268,-0.17 0.161,-0.062 0.173,-0.002 0.167,0.028 0.165,0.121 0.06,0.197 0.062,0.061 0.097,-0.236 0.129,-0.071 0.145,-0.036 0.227,0.013 0.173,0.113 0.157,0.335 -0.005,0.293 0.057,0.11 0.108,0.08 0.08,0.113 -0.071,0.118 -0.071,0.057 -0.203,0.054 -0.098,-0.023 -0.091,-0.08 -0.101,-0.029 -0.23,0.027 -0.212,0.066 0.029,0.107 0.174,0.048 0.052,0.051 -0.011,0.069 -0.068,0.014 -0.226,-0.093 -0.152,0.019 -0.548,0.126 -0.145,-0.003 -0.082,-0.119 0.006,-0.31 -0.059,-0.082 -0.407,0.376 -0.123,0.092 -0.164,0.043 -0.171,-0.015 -0.588,0.228 -0.185,-0.032 -0.179,0 -0.628,0.247 -0.337,0.069 -0.173,0.005 -0.172,-0.021 -0.154,0.022 -0.138,0.1 -0.28,0.084 -0.289,-0.064 -0.244,-0.085 -0.232,-0.112 -0.058,-0.144 0.012,-0.172 0.098,-0.235 -0.066,-0.413 0.051,-0.188 0.095,-0.185 0.144,-0.068 0.188,-0.014 0.311,-0.166 0.284,-0.218 0.164,0.021 0.374,0.152 0.219,0.018 0.372,-0.024 0.153,0.093 0.061,0.214 0.083,0.078 0.109,0.055 0.264,0.362 0.245,-0.019 0.214,0.066 0.378,-0.219 0.286,0.006 0.081,-0.17 -0.171,-0.182 -0.206,-0.147 -0.111,-0.031 -0.121,0.009 -0.108,-0.023 -0.461,-0.33 -0.137,-0.178 -0.078,-0.209 0.047,-0.155 0.317,-0.137 0.148,-0.033 0.551,0.094 0.094,0.078 0.146,0.33 0.106,0.142 z m -7.843,-0.458 0.285,0.149 0.397,0.438 0.037,0.123 -0.12,0.116 -0.284,0.186 -0.635,0.287 -0.109,0.135 -0.134,0.265 -0.031,0.113 -0.045,0.062 -0.073,0.045 -0.138,0.039 -0.15,-0.056 0.136,-0.17 0.005,-0.203 -0.101,-0.19 -0.143,-0.159 -0.288,-0.216 -0.309,-0.191 -0.312,-0.098 -0.331,-0.044 -0.119,-0.093 -0.194,-0.238 -0.063,-0.13 -0.032,-0.136 0.021,-0.132 0.082,-0.008 0.324,0.031 0.598,0.155 0.296,0.013 0.168,-0.036 0.438,-0.306 0.104,0.005 0.419,0.135 0.301,0.109 z m 40.389,-0.565 -0.166,0.259 -0.187,-0.017 -0.341,-0.347 0.02,-0.242 0.028,-0.079 0.131,-0.024 0.441,0.07 0.086,0.196 -0.012,0.184 z m -8.527,-0.807 0.038,0.137 -0.005,0.06 -0.336,0.044 -0.324,0.152 -0.166,0.175 -0.13,0.227 -0.446,-0.092 -0.398,-0.015 -0.176,-0.08 -0.191,0.005 -0.248,0.07 -0.353,0.192 -0.078,0.015 0.028,-0.292 0.098,-0.18 0.371,-0.431 0.309,0.095 0.359,0.027 0.409,-0.084 0.291,-0.194 0.411,-0.102 0.328,0.254 0.209,0.017 z m 1.737,-0.126 -0.181,0.066 0.056,-0.208 -0.012,-0.168 0.293,0.051 -0.003,0.134 -0.028,0.052 -0.125,0.073 z m 31.196,1.831 -0.671,0.371 -0.88,-0.065 -0.312,-0.006 -0.517,0.09 -0.104,-0.072 0.098,-0.349 0.413,-0.929 0.491,-0.818 0.209,-0.212 0.291,-0.199 0.309,-0.16 0.697,-0.166 0.634,0.03 0.091,0.068 0.273,0.272 0.177,0.215 0.074,0.304 -0.27,0.523 -0.301,0.499 -0.488,0.392 -0.214,0.212 z m -20.234,-0.772 -0.046,0.032 -0.349,-0.036 -0.199,-0.001 0.026,-0.213 -0.103,-0.16 0.141,-0.235 0.003,-0.272 0.146,-0.037 0.021,-0.155 0.176,-0.411 0.104,-0.091 0.146,-0.036 0.174,-0.24 0.099,-0.07 0.103,-0.182 0.147,-0.084 -0.012,-0.156 0.083,-0.082 0.232,-0.064 0.161,0.077 0.099,0.159 -0.259,0.196 0.133,0.483 -0.188,0.527 -0.123,0.158 -0.23,0.136 -0.069,0.129 -0.271,0.26 -0.082,0.222 -0.012,0.094 -0.051,0.052 z m 1.842,-2.243 -0.035,0.139 -0.12,-0.074 -0.118,-0.162 -0.173,-0.023 -0.128,-0.043 -0.075,-0.076 0.481,-0.035 0.168,0.274 z m -49.308,-0.193 -0.042,0.112 -0.143,-0.028 -0.135,-0.185 0.065,-0.048 0.075,-0.02 0.098,0.021 0.082,0.148 z m 40.014,0.141 -0.126,0.071 -0.21,-0.147 -0.058,-0.061 0.133,-0.144 0.142,-0.041 0.086,0.063 0.042,0.063 -0.018,0.069 0.009,0.127 z m -22.16,-0.181 -0.286,0.016 -0.089,-0.025 -0.021,-0.274 0.314,0.118 0.102,0.008 -0.02,0.157 z m -19.448,-0.038 -0.054,0.041 -0.477,-0.023 -0.307,0.229 -0.213,0.07 -0.764,0 -0.091,-0.031 -0.068,0 -0.041,0.046 -0.243,-0.035 -0.776,-0.203 -0.106,-0.188 0.12,-0.201 0.279,-0.285 0.559,-0.056 2.547,-0.02 0.277,0.245 0.026,0.083 -0.555,0.167 -0.113,0.161 z m 4.301,-0.379 -0.229,0.048 -0.212,-0.099 0.006,-0.133 0.052,-0.124 0.317,-0.064 0.17,0.004 0.182,0.085 0.127,0.089 0.062,0.104 -0.343,0.005 -0.132,0.085 z m 54.157,-0.62 -0.047,0.043 -0.073,-0.091 -0.007,-0.057 0.097,-0.155 0.096,-0.09 0.107,-0.007 -0.027,0.127 -0.146,0.23 z m -82.571,-0.307 -0.175,0.062 -0.134,-0.055 -0.06,-0.079 0.198,-0.194 0.094,-0.046 0.099,-0.015 0.047,0.105 -0.069,0.222 z m 82.688,-0.255 -0.155,0.026 -0.076,-0.229 0.128,-0.059 0.139,0.14 -0.036,0.122 z m 0.29,-0.324 -0.068,0.023 10e-4,-0.138 0.077,-0.122 0.081,-0.07 0.096,-0.003 -0.187,0.31 z m -0.793,0.023 -0.046,0.198 -0.046,0.221 -0.257,0.248 -0.159,0.379 -0.093,0.095 -0.345,0.169 -0.307,-0.211 -0.089,-0.181 0.135,-0.836 0.132,0.028 0.086,-0.006 0.028,-0.055 -0.197,-0.094 -0.037,-0.48 0.01,-0.181 0.149,-0.041 0.186,0.141 0.234,0.251 0.273,0.198 0.343,0.157 z m -76.232,-1.219 0.283,0.32 0.247,0.171 0.292,0.093 0.307,0.009 0.302,0.041 0.352,0.122 0.361,0.056 0.168,-0.021 0.16,-0.063 0.113,-0.004 0.099,0.059 0.25,0.271 0.271,0.248 0.063,0.126 0.184,0.598 0.208,0.172 0.286,0.05 0.336,0 0.334,0.025 0.774,0.14 0.307,-0.02 0.272,-0.14 0.242,0.091 0.657,0.168 0.323,0.038 0.367,-0.048 0.368,-0.01 0.176,0.049 0.169,0.073 0.145,0.026 0.15,-10e-4 0.266,-0.14 0.176,-0.257 0.143,-0.324 0.111,-0.338 0.075,-0.145 0.102,-0.128 0.133,-0.083 0.142,-0.052 0.386,0.032 0.08,0.082 0.432,0.573 0.076,0.05 0.45,0.036 0.125,-0.019 0.274,-0.115 0.157,-0.01 0.289,0.142 0.125,0.121 0.14,0.089 0.708,0.091 0.273,0.246 0.139,0.033 0.492,-0.03 0.341,0.024 0.296,0.066 0.135,0.349 0.109,0.358 0.063,0.122 0.29,0.123 0.118,0.111 -0.031,0.357 0.032,0.34 0.615,0.296 0.658,0.17 0.7,0.016 0.701,-0.059 0.361,-0.073 0.452,-0.126 0.094,0.002 0.875,0.389 0.075,0.06 0.098,0.291 -0.003,0.307 -0.163,0.729 -0.011,0.2 0.016,0.2 0.174,0.435 0.093,0.125 0.317,0.229 0.013,0.12 -0.044,0.12 -0.35,-0.082 -0.213,-0.099 -0.123,-0.164 -0.176,-0.093 -0.329,0.034 -0.615,-0.164 -0.695,-0.254 -1.232,-0.539 -0.336,0.004 -0.322,0.069 -0.34,0.137 -0.354,0.098 -0.26,0.037 -0.261,-0.027 -0.658,-0.129 -0.663,-0.084 -1.699,-0.053 -0.48,-0.123 -0.795,-0.062 -0.632,-0.106 -0.626,-0.148 -1.596,-0.729 -0.522,-0.183 -1.603,-0.348 -0.247,-0.028 -0.581,0.026 -0.366,-0.102 -0.322,-0.002 -0.479,0.113 -0.147,0.081 -0.186,0.171 -0.326,-0.008 -0.323,-0.033 -0.851,-0.164 -0.317,-0.101 -0.305,-0.149 -0.274,-0.194 -0.144,-0.069 -0.735,-0.198 -0.6,-0.068 -1.234,-0.09 -0.27,-0.06 -0.225,-0.072 -0.123,-0.16 0.016,-0.204 0.088,-0.176 0.121,-0.177 0.079,-0.169 -0.902,-0.354 -0.712,-0.193 -0.308,-0.037 -0.309,0 -0.348,0.04 -0.344,-0.019 -0.162,-0.058 -0.165,-0.02 -0.166,0.042 -0.133,-0.016 -0.034,-0.161 0.085,-0.137 0.174,-0.155 0.1,-0.027 0.045,0.243 0.05,0.048 0.154,0.053 0.067,-0.015 0.272,-0.31 0.076,-0.153 0.132,-0.413 0.144,0.08 0.144,-0.049 0.083,-0.066 0.229,-0.955 0.19,-0.279 0.26,-0.231 0.13,-0.057 0.255,0.142 0.517,0.054 0.307,0.094 0.308,0.012 0.301,0.046 0.419,0.168 0.148,-0.018 0.15,-0.052 0.225,-0.183 0.098,-0.292 0.324,0.148 0.477,0.059 0.116,0.088 z m 46.805,-0.095 -0.025,0.134 -0.103,-0.154 -0.094,-0.076 0.01,-0.166 0.133,0.062 0.079,0.2 z m -9.887,0.911 -0.115,0.467 -0.054,-0.165 -0.021,-0.427 -0.071,-0.208 0.045,-0.239 -0.015,-0.613 0.087,-0.283 0.16,0.36 0.042,0.183 -0.058,0.925 z m -21.916,-1.367 -0.06,0.1 -0.27,-0.008 -0.045,-0.112 0.176,-0.204 0.116,-0.013 0.104,0.075 -0.021,0.162 z m 56.376,0.111 -0.171,0.27 -0.116,-0.095 -0.065,-0.001 -0.04,-0.159 0.04,-0.328 -0.144,-0.369 0.189,0.005 0.053,0.11 0.06,0.037 0.187,0.356 0.007,0.174 z m 5.444,-0.403 -0.022,0.108 -0.002,0.199 0.047,0.185 -0.12,0.188 0.112,0.281 0.017,0.14 -0.007,0.198 -0.031,0.089 -0.085,0.26 -0.085,0.093 -0.064,0.026 -0.065,0.079 -0.552,-0.085 -0.238,-0.181 -0.213,-0.195 -0.045,-0.082 -0.25,-0.228 -0.058,-0.077 -0.005,-0.122 0.202,-0.031 0.216,0.004 -0.01,-0.109 0.125,-0.386 -0.328,-0.248 -0.058,-0.104 0.117,-0.07 0.264,0.086 0.323,-0.435 0.095,-0.091 0.046,-0.242 0.181,-0.031 0.128,0.031 0.083,0.151 0.033,0.131 -0.035,0.118 0.155,0.061 0.129,0.289 z m -5.109,0.547 -0.229,0.241 0.215,-0.568 0.045,-0.288 0.2,-0.171 0.297,-0.87 0.066,0.02 0.097,0.085 -0.149,0.638 -0.417,0.448 -0.125,0.465 z m -85.764,-1.186 -0.229,0.014 -0.422,-0.344 -0.069,-0.106 0.119,-0.102 0.127,0.007 0.486,0.217 0.095,0.107 -0.107,0.207 z m 59.664,-0.58 -0.011,0.284 -0.112,-0.016 -0.092,-0.1 -0.025,-0.094 0.005,-0.076 0.05,-0.06 0.185,0.062 z m -4.444,0.466 -0.179,0.075 -0.337,-0.32 -0.143,-0.264 0.034,-0.149 0.101,-0.13 0.048,-0.033 -0.021,-0.136 0.133,-0.066 0.146,0.009 0.096,0.183 0.115,0.05 0.059,0.175 -0.052,0.606 z m 1.689,-0.472 -0.072,0.186 -0.155,0.145 -0.124,0.011 -0.13,-0.03 -0.229,-0.126 -0.059,0.133 -0.181,-0.006 -0.066,-0.172 0.129,-0.509 0.188,-0.19 -0.018,-0.2 -0.156,-0.425 0.097,-0.222 0.437,-0.168 0.381,-0.205 0.117,-0.042 0.106,0.158 0.057,0.724 -0.409,0.573 0.087,0.365 z m 1.501,-2.01 0.065,0.602 -0.021,0.158 -0.158,-0.231 -0.057,-0.046 -0.044,0.046 -0.056,0.025 -0.08,-0.002 -0.104,0.233 -0.01,0.22 -0.079,0.147 -0.041,0.491 0.026,0.132 0.122,-0.065 0.075,-0.017 0.276,0.189 0.146,0.138 -0.041,0.167 -0.187,0.168 -0.217,0.073 -0.162,-0.072 -0.048,0.034 -0.096,0.086 -0.072,0.114 0.021,0.117 -0.185,0.333 -0.107,0.094 -0.222,-0.102 -0.137,0.087 -0.11,-0.008 -0.169,-0.333 0.005,-0.156 0.156,-0.175 10e-4,-0.126 0.077,-0.141 0.172,-0.193 0.099,-0.146 0.003,-0.092 0.073,-0.35 0.028,-0.146 0.05,-0.155 0.078,-0.317 0.011,-0.596 0.263,-0.491 0.257,-0.134 0.102,-0.022 -0.016,0.131 0.313,0.331 z m 29.162,-0.853 0.144,0.149 -0.334,-0.117 -0.478,-0.245 -0.033,-0.164 0.402,0.248 0.299,0.129 z m -28.987,-0.372 -0.274,0.336 -0.191,-0.017 -0.229,-0.221 -0.066,-0.242 -0.006,-0.088 0.156,-0.137 0.525,0.046 0.099,0.122 -0.014,0.201 z m 14.932,-1.474 -0.479,0.146 0.103,-0.272 0.065,-0.072 0.237,0.074 0.074,0.124 z m -0.806,0.249 -0.072,0.102 -0.163,0.067 -0.136,-0.007 0.044,-0.098 -0.034,-0.057 -0.101,0.025 -0.165,0.079 -0.208,0.158 -0.122,-0.078 -0.026,-0.122 0.007,-0.056 0.249,-0.219 0.289,-0.038 0.407,-0.21 0.182,0.01 -0.043,0.133 -0.063,0.095 -0.038,0.1 -0.007,0.116 z m 1.254,-0.357 -0.006,0.118 -0.02,0.037 -0.153,-0.041 -0.109,0.002 -0.097,-0.213 0.027,-0.049 0.201,0.062 0.075,0.021 0.082,0.063 z m -34.515,-0.23 -0.103,0.481 -0.171,-0.273 0.192,-0.323 0.089,-0.065 -0.007,0.18 z m 31.383,-0.417 0.064,0.124 -0.275,-0.078 -0.122,-0.12 0.12,-0.075 0.067,-0.02 0.146,0.169 z m -31.721,1.545 -0.589,0.52 -0.098,-0.132 0.051,-0.529 -0.164,-0.329 0.011,-0.244 0.116,-0.432 0.151,-0.331 0.342,-0.221 0.085,-0.026 -0.021,0.401 0.068,0.151 0.024,0.129 -0.036,0.111 0.064,0.514 0.038,0.125 -0.083,0.162 0.041,0.131 z m 29.629,-2.179 0.462,0.218 0.104,0.142 0.083,0.169 0.091,0.093 0.108,0.076 0.18,0.147 0.047,0.224 -0.041,0.452 -0.209,0.04 -0.196,0.066 -0.404,0.262 -0.199,0.051 -0.213,0.018 -0.151,0.069 -0.151,0.027 -0.393,-0.145 -0.38,-0.17 -0.552,-0.295 -0.102,-0.072 -0.089,-0.158 -0.253,-0.284 -0.063,-0.182 -0.021,-0.518 0.066,-0.119 0.106,-0.063 0.369,0.12 0.243,-0.125 0.698,-0.106 0.711,0.011 0.149,0.052 z m 3.163,-0.423 -0.141,0.233 -0.247,-0.01 -0.043,-0.033 0.292,-0.146 0.139,-0.044 z m -59.221,0.192 -0.047,0.056 -0.155,-0.03 -0.113,-0.078 -0.07,-0.074 -0.018,-0.077 0.151,-0.095 0.319,0.098 -0.067,0.2 z m 1.647,-0.295 -0.113,0.072 -0.066,-0.069 -0.02,-0.077 0.048,-0.097 0.154,-0.009 0.071,0.029 -0.074,0.151 z m 62.532,-0.094 0.645,0.309 0.334,0.045 0.562,-0.04 0.212,0.03 0.536,0.395 0.156,0.271 0.045,0.234 0.083,0.222 0.132,0.056 0.155,0.021 0.202,0.32 0.04,0.104 -0.153,0.803 -0.631,-0.304 -0.609,-0.345 -0.263,-0.128 -0.702,-0.292 -0.107,-0.1 -0.079,-0.132 -0.306,-0.18 -0.61,-0.028 -0.229,0.005 -0.093,0.027 0.024,0.097 0.003,0.197 -0.151,0.054 -0.379,-0.124 -0.338,-0.045 -0.294,-0.122 -0.393,-0.064 -0.044,-0.061 0.034,-0.091 -0.018,-0.085 -0.091,-0.033 -0.177,0.016 -0.171,0.086 -0.142,0.097 -0.208,0.268 -0.106,0.103 -0.344,0.044 -0.143,-0.026 -0.131,-0.066 -0.391,-0.49 -0.132,-0.106 -0.147,-0.086 -0.136,-0.04 -0.141,0.075 -0.073,0.152 -0.033,0.181 -0.039,0.104 -0.169,0.29 -0.14,0.172 -0.05,-0.027 0.071,-0.276 0,-0.156 -0.086,-0.165 -0.055,-0.168 0.661,-0.803 0.239,-0.191 1.042,-0.066 0.619,0.041 0.338,-0.02 0.226,-0.059 0.187,0.028 0.047,0.158 0.117,0.117 0.163,-0.01 0.296,-0.124 0.257,-0.191 0.157,-0.083 0.16,-0.014 0.165,0.013 0.161,0.044 0.435,0.162 z m -82.313,0.885 0.112,0.407 -0.334,-0.277 0.007,-0.196 -0.046,-0.128 -0.202,-0.157 -0.156,-0.197 -0.07,-0.465 0.054,-0.097 0.132,-0.006 0.587,0.61 0.04,0.103 -0.013,0.218 -0.085,0.068 -0.026,0.117 z m 21.841,-0.517 -0.044,0.294 -0.068,0.111 -0.234,0.146 -0.08,0.089 -0.219,-0.014 -0.028,-0.154 -0.073,-0.104 -0.232,-0.12 -0.061,0.029 -0.042,0.179 -0.455,0.125 -0.127,0.011 0.063,-0.236 -0.118,-0.186 -0.009,-0.228 -0.022,-0.1 -0.057,-0.058 0.116,-0.159 -0.02,-0.177 0.123,-0.19 0.068,-0.461 0.481,-0.101 0.104,0.083 0.561,0.104 0.396,0.279 0.211,0.371 -0.234,0.467 z m -22.461,-0.717 -0.2,0.225 -0.33,-0.005 -0.065,-0.139 0.015,-0.336 -0.081,-0.11 0.003,-0.044 0.053,-0.191 0.067,-0.042 0.533,0.473 0.005,0.169 z m 95.898,-1.722 -0.082,0.042 -0.028,-0.121 0.044,-0.163 0.053,-0.026 0.061,0.008 0.079,0.059 -0.127,0.201 z m -96.911,0.612 0.014,0.074 -0.457,-0.245 -0.22,-0.068 -0.195,-0.268 0.061,-0.128 0.008,-0.18 0.029,-0.071 0.14,-0.026 0.182,0.131 0.136,0.319 0.227,0.297 0.075,0.165 z m 73.564,0.302 -0.048,0.051 -0.169,-0.151 -0.113,-0.426 -0.097,-0.113 -0.113,-0.405 0.029,-0.115 0.14,-0.17 0.112,0.002 0.083,0.101 -0.046,0.436 0.251,0.552 -0.029,0.238 z m -6.194,-1.383 0.05,0.112 -0.176,-0.003 -0.073,-0.211 0.018,-0.113 0.181,0.215 z m 6.107,-0.463 0.863,0.093 -0.122,0.101 -0.931,0.161 -0.33,-0.029 -1.01,0.095 -0.131,-0.006 -0.019,-0.156 -0.108,-0.109 0.161,-0.095 0.214,-0.022 0.56,0.036 0.853,-0.069 z m -8.06,0.075 -0.206,0.23 -0.022,-0.123 0.042,-0.112 0.058,-0.079 0.087,-0.039 0.041,0.123 z m 20.209,-0.351 0.034,0.166 0.167,0.153 -0.058,0.238 -0.066,0.036 0.035,0.108 0.072,0.083 -0.13,0.057 -0.095,-0.028 -0.153,0.077 -0.102,0.107 -0.321,0.045 -0.113,-0.099 -0.58,-0.117 -0.371,-0.256 -0.047,-0.077 0.719,-0.301 0.314,-0.08 0.264,0.005 0.332,-0.112 0.099,-0.005 z m -15.109,0.041 0.263,0.099 0.092,0 0.087,-0.116 0.054,-0.019 0.118,0.057 0.027,0.188 0.17,-0.026 0.132,0.064 0.042,0.045 -0.018,0.187 -0.503,0.033 -0.359,0.151 -0.483,-0.136 -0.548,0.233 -0.333,0.081 -0.289,-0.005 -0.247,-0.408 0.144,-0.478 0.104,-0.079 0.184,-0.042 0.508,-0.023 0.855,0.194 z m 29.481,-0.317 1.108,0.14 0.3,-0.018 0.633,0.054 0.528,0.186 0.923,0.034 0.275,0.056 0.213,0.128 -0.517,0.105 -0.243,0.099 -0.452,0.049 -0.378,-0.05 -0.275,0.059 -0.1,-0.096 -0.402,-0.098 -0.515,-0.201 -1.062,-0.233 -0.05,-0.146 0.014,-0.068 z m -74.431,0.078 -0.322,0.117 -0.097,-0.262 0.206,-0.078 0.224,0.068 -0.011,0.155 z m -8.16,0.139 0.097,0.192 0.132,0.173 0.097,0.187 0.133,0.897 0.44,0.771 1.271,0.303 -0.208,0.125 -0.106,0.112 -0.078,0.128 -0.187,0.535 0.018,0.114 0.11,0.181 0.026,0.197 -0.159,-10e-4 -0.179,-0.044 -0.143,-0.074 -0.133,-0.097 -0.144,-0.077 -0.156,-0.05 -0.258,-0.153 -0.349,-0.108 -0.356,-0.085 -0.173,-0.227 -0.082,-0.28 0.088,-0.418 -0.089,-0.116 -0.127,-0.102 -0.156,-0.301 -0.059,-0.352 -0.226,-0.136 -0.298,-0.083 -0.131,-0.067 -0.589,0.129 -0.142,-0.03 -0.125,-0.098 -0.321,-0.103 0.013,-0.195 0.149,-0.156 0.351,-0.157 0.165,-0.132 0.032,-0.174 -0.062,-0.127 0.024,-0.133 0.111,-0.129 0.131,-0.101 0.354,-0.134 0.154,0.233 0.076,0.195 0.094,0.141 0.15,-0.202 -0.096,-0.348 0.269,-0.078 0.264,-0.003 0.199,0.096 0.13,0.15 0.054,0.212 z m 49.259,0.097 -0.193,0.018 -0.129,-0.082 0.012,-0.409 0.117,-0.089 0.057,0.015 0.035,0.122 0.059,0.109 0.096,0.102 -0.054,0.214 z m 12.785,-0.122 -0.172,0.113 -0.086,0.031 -0.414,-0.076 -0.484,0.016 -0.504,0.105 -0.291,-0.089 -0.185,-0.145 0.009,-0.153 0.173,-0.379 0.379,-0.287 0.154,-0.052 0.271,0.078 0.455,0.22 0.358,0.258 0.325,0.201 0.012,0.159 z m -13.866,-1.364 0.062,0.174 -0.102,0.151 0.111,0.283 0.283,-0.377 0.27,-0.048 0.153,0.063 0.105,0.075 0.058,0.143 -0.1,0.307 -0.177,0.144 -0.229,0.023 -0.108,-0.179 -0.15,-0.017 -0.105,0.39 -0.047,0.06 -0.134,0.049 -0.119,-0.107 -0.021,-0.06 0.169,-0.177 -0.092,-0.525 -0.127,0.099 -0.339,0.477 -0.264,0.213 -0.09,-0.108 -0.134,-0.324 0.061,-0.416 0.213,-0.281 0.181,0.019 0.521,-0.088 0.151,0.037 z m -37.893,0.026 -0.56,0.285 -0.132,-0.015 -0.1,-0.101 0.062,-0.55 0.072,-0.164 0.39,-0.018 0.237,0.079 0.124,0.089 0.048,0.184 -0.027,0.111 -0.114,0.1 z m 70.879,-0.18 -0.135,0.051 -0.156,-0.056 -0.148,-0.214 0.053,-0.164 0.173,-0.113 0.145,0.113 0.045,0.144 0.11,0.01 -0.087,0.229 z m -100.477,1.846 -0.259,0.015 -0.554,-0.334 -0.131,-0.15 -0.032,-0.2 -0.531,-0.772 -0.071,-0.177 0.209,-0.634 0.541,-0.153 0.179,0.107 0.063,0.285 0.31,0.514 0.102,0.277 0.077,0.123 0.032,0.096 -0.027,0.066 0.224,0.326 0.16,0.191 0.012,0.309 -0.304,0.111 z m 89.352,-1.29 -0.099,0.078 -0.341,-0.073 -0.177,-0.172 -0.12,-0.231 -0.077,-0.19 -0.021,-0.151 -0.102,-0.185 0.014,-0.067 0.629,-0.195 0.119,0.071 0.263,0.006 0.114,0.141 -0.078,0.613 -0.124,0.355 z m -0.27,-1.5 -0.072,0.142 -0.133,0.096 -1.207,0.17 0.104,-0.102 0.051,-0.101 0.076,-0.052 0.119,0.014 0.06,-0.031 0.061,-0.012 0.067,0.013 0.117,-0.042 0.246,0.03 0.254,-0.024 -0.019,-0.136 0.276,0.035 z m 12.566,-0.352 0.597,0.109 0.218,-0.006 0.213,0.123 0.259,-0.058 0.146,0.04 0.491,0.423 0.242,0.28 0.358,0.241 0.26,0.082 -0.195,0.22 -0.396,0.116 -0.152,0.006 -0.303,-0.131 -0.245,0.024 -0.214,-0.164 -0.037,-0.254 -0.221,-0.572 -0.284,0.164 -0.342,-0.264 -0.093,-0.006 -0.021,0.044 -0.145,-0.089 -0.124,-0.178 -0.012,-0.15 z m -22.683,0.362 -0.032,0.057 -0.293,-0.073 -0.079,-0.04 0.147,-0.395 0.138,0.012 0.121,0.376 -0.002,0.063 z m 9.335,-0.703 -0.161,0.003 -0.291,-0.121 0.169,-0.105 0.107,-0.022 0.094,-0.063 0.052,-0.003 0.115,0.054 0.076,0.091 -0.161,0.166 z m -24.592,-0.34 0.119,0.124 -0.071,0.143 -0.097,-0.036 -0.255,0.002 -0.096,0.011 -0.115,0.084 -0.072,0.003 0.049,-0.132 0.216,-0.2 0.135,0.03 0.187,-0.029 z m 32.579,0.89 0.704,0.042 0.355,-0.028 0.349,0.036 0.142,0.071 0.243,0.215 -0.069,0.141 -0.042,0.292 0.124,0.28 0.202,0.281 0.166,0.3 0.034,0.146 -0.063,0.31 -0.057,0.153 -0.201,0.256 -0.11,0.279 0.071,0.344 0.039,0.347 -0.007,0.318 0.036,0.313 0.109,0.318 0.47,0.87 0.274,0.59 0.088,-0.33 -0.022,-0.366 0.098,-0.132 0.137,-0.07 0.171,0.073 0.048,0.148 0.013,0.324 0.148,0.636 0.19,0.029 0.206,-0.097 0.034,0.194 -0.008,0.36 0.096,0.286 0.085,0.112 0.338,0.232 0.153,0.043 0.447,0.056 0.337,0.018 0.323,-0.083 0.208,-0.213 0.188,-0.231 0.649,-0.532 0.188,-0.255 0.181,-0.39 0.063,-0.083 0.646,-0.422 0.074,-0.15 0.092,-0.29 0.141,-0.28 0.105,-0.145 0.624,-0.137 0.647,-0.074 0.643,-0.258 0.277,-0.222 0.014,-0.146 -0.141,-0.256 -0.006,-0.113 0.148,-0.108 0.573,-0.325 0.662,-0.334 0.532,-0.23 0.294,0.002 0.271,0.203 0.289,0.166 1.513,0.488 0.242,0.152 0.211,0.202 0.303,0.14 0.338,0.067 0.307,0.131 0.291,0.168 0.644,0.314 0.864,0.381 0.221,0.022 0.804,-0.018 0.139,0.072 0.132,0.102 0.122,0.023 0.921,0.071 0.141,0.073 0.134,0.101 0.075,0.276 0.635,0.007 0,0.541 0,0.567 10e-4,0.567 0,0.568 0,0.568 10e-4,0.568 0,0.568 0,0.568 0,0.568 0,0.568 10e-4,0.569 0,0.569 0,0.569 0,0.569 0,0.569 0.001,0.57 0,0.57 0,0.57 0,0.243 -0.087,0.298 -0.194,0.446 -0.034,0.361 0.16,0.281 0.156,0.183 0,0.47 0,0.571 10e-4,0.572 0,0.572 0,0.572 0,0.572 0,0.573 10e-4,0.573 0,0.573 0,0.573 0,0.574 10e-4,0.037 -0.146,-0.095 -0.387,-0.314 -0.351,-0.358 -0.227,-0.334 -0.256,-0.304 -1.09,-0.901 -0.276,-0.296 -0.056,-0.082 0.026,-0.077 0.126,-0.156 0.223,-0.451 -0.233,0.279 -0.277,0.221 -0.404,0.014 -0.396,0.054 -0.367,0.133 -0.373,0.046 -0.187,-0.065 -0.112,-0.166 -0.059,-0.17 -0.026,-0.181 -0.157,0.292 -0.308,0.16 -0.421,0.337 -0.12,-0.07 -0.072,-0.128 -0.024,-0.133 0.081,-0.142 0.058,-0.15 0.085,-0.361 0.188,-0.213 0.12,-0.411 0.078,-0.146 0.04,-0.146 -0.109,-0.166 -0.185,-0.056 -0.127,-0.101 -0.146,-0.279 -0.092,-0.094 -0.167,-0.115 -0.128,-0.133 0.142,-0.101 0.187,-0.041 0.153,0.006 0.276,0.063 0.125,0.003 0.321,-0.103 -0.181,0.032 -0.179,-0.004 -0.57,-0.18 -0.353,-0.187 -0.333,-0.375 -0.004,-0.072 0.235,-0.068 0.507,-0.079 -0.157,-0.191 -0.229,-0.167 -0.08,-0.296 -0.156,-0.183 -0.338,-0.299 -0.233,-0.31 -0.197,-0.63 -0.202,-0.476 0.05,-0.172 0.17,-0.123 -0.258,-0.014 -0.233,-0.088 0.124,-0.231 0.27,-0.137 -0.246,0.035 -0.24,0.067 -0.109,0.013 -0.113,-0.021 -0.06,-0.093 -0.008,-0.132 0.035,-0.233 -0.041,-0.226 -0.213,-0.105 -0.177,-0.161 -0.1,-0.06 -0.13,0.004 -0.127,-0.108 -0.102,-0.156 -1.27,-0.677 -0.075,-0.193 -0.118,0.084 -0.117,0.042 -0.146,-0.111 -0.153,-0.074 -0.167,0.012 -0.154,-0.06 -0.162,-0.034 -0.169,-0.005 -0.667,-0.208 -0.632,-0.329 -0.515,-0.142 -0.317,-0.185 -0.33,-0.15 -0.738,-0.146 -0.748,-0.099 -0.271,-0.003 -0.227,0.032 -0.218,-0.007 -1.238,-0.714 -0.209,-0.325 0.02,-0.19 0.056,-0.157 0.505,-0.045 -0.355,-0.046 -0.146,0.021 -0.293,0.129 -0.158,0.009 -0.224,-0.086 -0.214,-0.108 -0.351,0.1 -0.179,-0.164 -0.062,-0.173 -0.094,-0.079 -0.132,0.008 -0.178,0.063 -0.177,-0.011 -0.114,-0.119 -0.082,-0.155 -0.121,-0.111 -0.146,-0.085 -0.24,-0.201 -0.125,-0.275 0.015,-0.475 0.038,-0.17 0.237,-0.277 0.168,-0.263 -0.208,-0.029 -0.188,0.121 -0.079,0.124 -0.032,0.15 -0.021,0.499 -0.151,0.145 -0.228,-0.012 0.067,0.292 -0.093,0.277 -0.265,0.326 -0.021,0.148 0.042,0.161 -0.06,0.158 -0.428,0.456 -0.143,0.022 -0.316,-0.003 -0.327,0.072 -0.152,-0.106 -0.124,-0.138 -0.093,-0.164 -0.13,-0.337 -0.104,-0.348 0.325,-0.426 -0.112,-0.385 -0.22,-0.331 -0.556,-0.458 -0.576,-0.435 -0.262,-0.088 -0.429,-0.039 -0.136,-0.042 -0.133,-0.163 -0.099,-0.188 0.269,-0.081 0.459,-0.221 0.261,0.011 0.708,0.12 0.217,0.109 0.202,0.064 0.483,-0.365 0.383,-0.477 0.239,-0.104 0.203,-0.035 0.207,0.046 0.411,0.166 0.323,0.078 0.23,0.015 0.12,0.149 0.136,0.067 0.031,-0.225 0.118,-0.26 0.229,-0.081 0.121,-0.019 0.076,-0.067 -0.017,-0.241 -0.303,-0.03 0.165,-0.207 0.147,-0.101 0.051,-0.101 0.003,-0.126 -0.593,0.243 -0.625,0.102 -0.369,-0.028 -0.368,-0.003 -0.736,0.162 -0.279,-0.006 -0.651,-0.066 -0.36,-0.079 -0.278,0.061 -0.269,0.005 -0.281,-0.186 -0.239,-0.232 -0.119,-0.165 -0.158,-0.12 -0.07,-0.161 -0.175,-0.606 -0.016,-0.434 -0.283,-0.008 -0.275,-0.043 -1.229,-0.412 -0.148,0.101 -0.173,0.052 -0.173,0.019 -0.171,-0.021 -0.171,-0.064 0.015,-0.114 0.126,-0.278 0.125,-0.103 0.172,-0.08 0.109,-0.148 0.178,-0.443 0.014,-0.151 -0.02,-0.154 0.015,-0.117 0.11,-0.061 0.463,-0.144 0.962,-0.218 0.243,-0.13 0.201,-0.208 0.234,-0.126 0.107,-0.128 0.124,-0.103 0.744,-0.275 0.321,-0.022 0.328,0.032 0.649,0.163 0.619,0.263 0.537,0.346 0.576,0.248 z m -81.384,-1.091 0.263,0.271 0.063,0.097 -0.13,0.15 -0.104,0.212 -0.06,0.045 -0.201,-0.081 -0.142,0.208 -0.094,-0.333 -0.204,-0.211 0.127,-0.216 0.046,-0.016 0.062,0.007 0.064,0.057 0.31,-0.19 z m 64.81,-0.044 0.324,0.417 -0.218,0.395 0.15,0.221 0.409,0.014 0.094,0.083 0.072,0.1 0.047,0.136 -0.106,0.109 -0.228,0.1 -0.263,-0.144 -0.069,-0.134 -0.054,-0.05 -0.354,0.102 -0.099,0.01 -0.068,-0.187 0.085,-0.268 -0.247,-0.121 -0.227,-0.277 -0.008,-0.111 0.091,-0.193 -0.012,-0.154 0.129,-0.012 0.236,0.208 0.102,-0.196 0.101,-0.082 0.113,0.034 z m -0.89,0.491 -0.176,0.072 -0.191,-10e-4 -0.042,-0.297 0.063,-0.377 0.178,-0.064 0.281,0.08 -0.104,0.095 0.077,0.202 -0.086,0.29 z m -65.99,-0.41 -0.365,0.097 -0.407,-0.07 0.05,-0.167 0.196,-0.195 0.174,0.008 0.317,0.128 0.112,0.115 -0.077,0.084 z m 75.99,-0.959 0.486,0.119 0.11,-0.019 0.705,0.306 0.111,0.152 -0.039,0.103 0.104,0.138 -0.23,0.21 -0.111,0.023 -0.112,-0.079 -0.225,-0.044 -0.26,0.086 -0.165,-0.065 -0.14,-0.192 -0.248,-0.117 -0.351,-0.406 -0.172,0.015 0.045,0.159 0.149,0.105 0.196,0.309 0.113,0.03 0.116,-0.011 0.157,0.129 -0.008,0.199 -0.41,0.078 -0.142,-0.146 -0.031,-0.265 -0.23,0.089 -0.089,0.092 -0.067,0.013 -0.153,-0.276 -0.438,-0.015 -0.291,-0.146 0.144,-0.153 0.021,-0.148 0.189,-0.08 0.191,0.071 0.193,-0.107 0.137,0.027 0.101,-0.068 0.388,-0.043 0.256,-0.073 z m -90.801,1.467 -0.167,0.129 -0.253,-0.125 0.085,-0.179 0.041,-0.247 0.152,-0.196 0.051,-0.23 -0.292,-0.629 0.145,-0.021 0.115,0.068 0.193,0.418 0.168,0.251 -0.067,0.34 -0.171,0.421 z m 17.736,-0.988 0.081,0.046 0.1,-0.145 0.185,0.198 0.114,0.099 0.156,0.099 -0.153,0.004 -0.063,0.091 -0.04,0.018 -0.595,-0.319 -0.381,0.103 -0.261,-0.093 -0.074,-0.064 0.14,-0.175 0.129,-0.401 0.261,0.101 0.063,0.124 -0.016,0.037 0.171,0.075 0.183,0.202 z m 69.517,0.031 -0.122,0.008 -0.102,-0.163 -0.278,-0.181 -0.172,-0.312 0.654,0.515 0.02,0.133 z m -5.881,-0.505 -0.014,0.086 -0.087,-0.12 -0.059,-0.029 0.063,-0.3 0.033,-0.051 0.051,0.205 0.013,0.209 z m -63.887,-0.183 0.024,0.069 -0.132,-0.078 -0.08,-0.047 -0.054,-0.043 -0.292,-0.381 0.125,0.024 0.325,0.335 0.084,0.121 z m -3.943,-1.344 -0.315,0.016 -0.092,-0.036 0.039,-0.262 0.096,-0.158 0.143,0.003 0.159,0.236 -0.03,0.201 z m 67.736,-0.28 -0.101,0.031 -0.029,-0.011 -0.03,-0.112 0.056,-0.19 0.118,-0.002 0.05,0.031 0.01,0.14 -0.074,0.113 z m -0.133,-0.416 -0.096,0.092 -0.091,-0.031 -0.055,-0.118 0.018,-0.085 0.076,-0.055 0.095,0.041 0.053,0.156 z m -67.138,0.354 -0.058,0.038 -0.239,-0.354 0.06,-0.204 0.058,-0.052 0.132,0.125 0.104,0.13 0.076,0.155 -0.133,0.162 z m 1.063,-0.38 0.015,0.08 -0.257,-0.161 -0.007,-0.117 0.033,-0.054 0.153,0.125 0.063,0.127 z m 1.152,-0.093 -0.176,0.082 -0.221,-0.255 0.008,-0.059 0.021,-0.045 0.041,-0.029 0.134,0.132 0.159,0.047 0.034,0.127 z m -3.401,0.244 -0.053,0.107 -0.104,-0.079 -0.548,-0.12 -0.185,-0.013 -0.474,-0.132 -0.144,-0.07 -0.103,-0.092 0.035,-0.169 0.07,-0.102 0.042,-0.284 0.12,-0.116 0.235,0.211 0.261,0.182 0.151,0.083 0.461,0.186 0.163,0.093 0.073,0.315 z m 1.112,-0.841 0.017,0.153 -0.187,-0.037 -0.135,-0.18 0.111,-0.128 0.07,-0.046 0.07,0.17 0.054,0.068 z m -0.723,0.497 -0.082,0.08 -0.142,-0.019 -0.149,-0.094 -0.194,-0.169 -0.218,-0.151 -0.276,-0.095 -0.173,-0.029 -0.069,-0.035 0.066,-0.293 0.182,-0.018 0.588,0.272 0.19,0.148 0.277,0.403 z m 2.41,-0.866 0.178,0.122 0.146,-0.08 -0.006,0.104 -0.029,0.1 -0.172,0.287 -0.288,-0.066 -0.066,-0.093 -0.021,-0.069 0.042,-0.043 0.023,-0.141 0.124,0 0.069,-0.121 z m 1.573,-0.099 0.017,0.209 0.16,0.102 0.041,0.154 -0.028,0.247 -0.15,0.285 -0.067,0.075 -0.199,-0.058 -0.066,-0.095 -0.026,-0.074 0.028,-0.053 -0.147,-0.067 0.095,-0.109 -0.065,-0.153 -0.407,0.096 -0.118,0.003 -0.021,-0.174 0.017,-0.07 0.313,-0.22 0.187,-0.041 0.201,0.044 0.235,-0.101 z m -6.057,0.63 -0.13,0.084 -0.156,-0.132 -0.128,-0.191 -0.067,-0.199 -0.061,-0.326 -0.016,-0.234 0.078,-0.137 0.057,0.005 0.23,0.139 0.152,0.236 0.084,0.074 0.017,0.217 -0.056,0.248 -0.004,0.216 z m -13.88,-1.324 0.608,0.784 0.247,0.105 0.328,0.356 0.08,0.124 -0.083,0.25 -0.072,0.714 -0.157,0.178 -0.383,-0.088 -0.004,-0.125 -0.221,-0.538 -0.4,-0.3 -0.157,-0.016 -0.103,-0.307 -0.202,-0.363 -0.61,-0.664 0.463,0.005 0.225,-0.162 0.052,-0.129 0.037,-0.033 0.352,0.209 z m 14.062,0.016 0.021,0.358 -0.209,-0.094 -0.163,-0.142 -0.261,-0.105 -0.316,-0.034 -0.232,-0.093 -0.162,-0.166 -0.007,-0.077 0.016,-0.062 0.052,-0.049 1.199,0.322 0.062,0.142 z m 62.856,1.294 -0.535,0.473 -0.163,0.229 -0.143,0.246 -0.211,0.273 -0.242,0.241 -0.121,0.071 -0.299,0.13 -0.172,0.05 -0.324,0.017 -0.976,0.192 -0.32,0.022 -0.319,-0.008 -0.604,-0.048 -0.126,-0.025 -0.241,-0.248 -0.272,-0.196 -0.24,-0.021 -0.245,0.021 -1.765,0.014 -0.617,0.037 -0.614,0.087 -0.335,-0.04 -0.331,-0.098 -0.25,-0.035 -0.252,0.01 -1.158,0.148 -0.292,-0.014 -0.586,-0.189 -0.34,-0.038 -0.335,0.051 -0.311,0.17 -0.118,0.114 -0.322,0.39 -0.182,0.284 -0.139,0.354 -0.118,0.361 -0.063,0.296 -0.004,0.31 0.056,0.348 0.087,0.344 0.097,0.263 0.402,0.608 0.082,0.086 0.437,0.171 0.259,0.22 0.245,0.61 0.176,0.312 0.171,0.004 0.192,-0.022 0.334,0.04 0.33,0.08 0.322,-0.187 0.18,-0.354 0.181,-0.263 0.434,-0.5 0.247,-0.231 0.157,-0.076 0.161,0.033 0.136,0.132 0.158,0.105 0.324,0.057 0.327,-0.035 0.348,-0.163 0.125,-0.1 0.104,-0.126 0.295,-0.103 0.701,-0.001 0.361,0.037 0.646,-0.041 -0.009,-0.092 -0.125,-0.098 -0.032,-0.079 0.12,-0.051 0.416,-0.114 0.424,-0.081 0.309,0.058 0.275,0.159 0.106,0.164 0.047,0.197 -0.106,0.511 -0.052,0.119 -0.22,0.061 -0.207,-0.068 -0.205,-0.264 -0.29,-0.097 -0.411,0.08 -0.142,0.076 -0.126,0.105 -0.232,0.274 -0.193,0.309 -0.419,0.481 -0.483,0.418 -0.234,0.16 -0.262,0.107 -0.839,0.277 -0.221,0.206 -0.172,0.267 -0.19,0.091 -0.22,0.029 -0.165,-0.05 -0.334,-0.151 -0.11,0.124 -0.019,0.189 0.164,0.067 0.266,0.209 0.205,0.295 0.131,0.063 0.293,0.096 0.123,0.092 0.22,0.253 0.347,0.588 0.118,0.318 0.193,0.26 0.586,0.441 0.033,0.125 -0.036,0.146 0.045,0.132 0.21,0.253 0.05,0.164 -0.229,0.208 -0.013,0.3 -0.141,0.404 -0.031,0.136 0.004,0.124 0.099,0.115 0.115,0.091 0.158,0.048 0.138,0.079 0.266,0.315 0.139,0.083 0.088,0.115 -0.009,0.171 0.121,0.1 0.111,0.179 0.171,0.043 0.079,-0.051 0.055,-0.077 0.14,0.029 0.082,0.125 0.048,0.16 0.016,0.176 -0.007,0.334 -0.07,0.12 -0.153,-0.006 -0.275,-0.138 -0.013,0.1 0.019,0.096 -0.14,0.032 -0.16,-0.014 -0.402,0.013 -0.742,0.208 -0.26,0.123 -0.169,0.223 -0.012,0.155 0.065,0.325 -0.099,0.114 -0.34,0.043 -0.475,-0.087 -0.287,-0.087 -0.16,-0.073 -0.208,-0.219 -0.079,-0.28 0.154,-0.833 0.043,-0.107 0.075,-0.095 0.079,-0.151 0.019,-0.178 -0.227,-0.217 -0.342,-0.086 -0.289,-0.181 -1.118,-1.016 -0.063,-0.098 -0.002,-0.168 0.045,-0.157 0.367,-0.555 0.047,-0.106 0.045,-0.438 -0.011,-0.361 -0.041,-0.361 -0.174,-0.227 -0.311,-0.069 -0.321,-0.011 -0.313,0.072 -0.308,0.182 -0.568,0.382 -0.226,0.223 -0.02,0.289 0.13,0.283 0.168,0.258 0.09,0.283 0.124,1.003 -0.004,0.113 -0.146,0.292 -0.058,0.652 0.063,0.921 0.1,0.565 -0.043,0.307 -0.266,0.66 -0.081,0.362 -0.006,0.149 0.313,0.69 0.072,0.273 0.038,0.283 -0.333,-0.139 -0.154,0.007 -0.157,0.042 -0.347,0.045 -0.353,0.006 -0.123,0.052 -0.25,0.184 -0.152,0.074 -0.132,0.014 -0.448,-0.23 -0.265,-0.25 -0.244,-0.271 -0.045,-0.31 0.085,-0.318 0.121,-0.34 0.241,-0.565 -0.012,-0.379 0.083,-0.311 0.138,-0.301 0.05,-0.278 0.033,-1.088 -0.034,-0.097 -0.331,-0.646 -0.038,-0.108 -0.002,-0.174 0.036,-0.167 0.007,-0.149 -0.076,-0.115 -0.134,-0.105 -0.162,-0.046 -0.343,0.045 -0.688,0.174 -0.203,-0.153 -0.152,-0.236 -0.099,-0.33 -0.057,-0.345 0.026,-0.324 0.102,-0.313 -0.082,-0.219 -0.127,-0.238 -10e-4,-0.123 0.072,-0.107 0.124,-0.09 0.152,-0.052 0.142,-0.095 0.377,-0.319 0.12,-0.281 0.009,-0.346 0.096,-0.33 0.192,-0.305 0.228,-0.282 0.073,-0.291 -0.111,-0.462 0.044,-0.21 -0.038,-0.247 -0.004,-0.244 0.141,-0.459 0.418,-0.939 0.408,-0.499 0.162,-0.131 0.212,0.232 0.161,0.273 0.003,-0.247 -0.048,-0.237 -0.162,-0.565 -0.141,-1.102 0.039,-0.104 0.143,0.017 0.146,-0.097 0.076,-0.173 -0.151,-0.409 -0.007,-0.145 0.292,-0.575 0.238,-0.209 0.104,-0.129 0.06,-0.351 0.124,-0.132 0.156,-0.095 0.206,-0.243 0.111,-0.306 0.068,-0.023 0.08,-0.011 0.124,0.267 0.139,0.108 0.282,0.087 0.241,-0.103 0.067,-0.134 0.091,-0.115 0.146,-0.12 0.123,-0.137 0.137,-0.317 0.181,-0.289 0.124,-0.101 0.149,-0.063 0.166,-0.039 0.16,-0.005 0.355,0.181 0.206,0.036 0.211,-0.013 0.133,0.03 0.101,0.082 0.092,0.164 0.113,0.142 0.105,0.07 0.115,0.033 0.773,-0.058 0.676,0.16 0.922,0.036 0.316,0.094 0.304,0.123 0.371,0.216 0.136,0.048 0.152,-0.012 0.189,-0.204 0.148,-0.044 0.15,-0.008 0.594,0.038 1.596,0.25 0.236,-0.034 0.962,-0.479 0.386,-0.454 0.345,-0.126 0.116,-0.206 0.07,-0.246 0.122,-0.066 0.289,-0.07 0.114,-0.073 0.205,-0.303 0.242,-0.268 0.119,-0.081 0.342,0.043 0.151,0.117 0.192,0.394 -0.033,0.066 -0.227,0.196 -0.066,0.083 -0.251,0.554 -0.172,0.272 -0.214,0.243 z m -65.055,-3.021 0.151,0.229 0.032,0.148 -0.111,0.17 -0.041,0.261 -0.327,0.205 -0.286,-0.049 -0.093,-0.073 -0.181,-0.396 0.018,-0.336 0.113,-0.128 0.266,0.02 0.27,-0.184 0.189,0.133 z m 73.037,3.431 0.204,0.062 0.212,-0.017 0.105,-0.125 0.029,-0.162 0.107,-0.301 0.247,-0.204 0.173,-0.032 0.123,-0.086 -0.021,-0.223 0.013,-0.219 0.183,-0.234 0.565,-0.326 0.323,-0.116 0.419,-0.037 0.047,0.125 -0.048,0.178 0.081,0.269 -0.04,0.728 -0.096,0.103 -0.433,0.251 -0.473,0.201 -0.133,0.084 -0.117,0.2 0.01,0.199 0.386,0.265 0.599,0.248 0.123,0.116 0.08,0.195 0.022,0.218 0.145,0.104 0.203,0.05 0.134,0.103 0.102,0.145 -1.008,-0.339 -0.264,-0.149 -0.318,-0.018 -0.315,-0.045 -0.321,-0.13 -0.345,-0.031 -0.165,0.094 -0.064,0.184 -0.039,0.206 0.076,0.256 -0.007,0.156 -0.065,0.281 0.25,0.831 0.313,0.66 0.461,0.687 0.228,0.236 0.255,0.213 -0.414,-0.063 -0.125,-0.229 -0.524,-0.228 -0.101,-0.136 -0.342,-0.652 -0.1,-0.122 -0.315,-0.222 -0.139,-0.163 -0.047,-0.22 0.035,-0.231 -0.018,-0.32 0.012,-0.318 0.065,-0.388 -0.113,-0.137 -0.147,-0.128 -0.171,-0.297 -0.051,-0.338 0.014,-0.194 0.07,-0.172 0.095,-0.149 0.021,-0.146 -0.246,-0.211 -0.258,-0.602 -0.023,-0.312 0.328,-0.601 -0.007,-0.292 0.065,-0.173 0.035,-0.184 0.172,-0.4 0.279,-0.341 0.474,-0.478 0.18,-0.104 0.203,-0.068 0.018,0.117 -0.032,0.104 -0.35,0.486 -0.047,0.11 -0.009,0.204 0.167,0.121 0.182,0.247 0.035,0.328 0.007,0.35 -0.04,0.352 -0.067,0.118 -0.287,0.354 -0.653,0.415 -0.056,0.103 0.005,0.114 0.12,0.138 0.154,0.104 z m -85.314,-3.423 -0.016,0.063 -0.29,-0.293 -0.328,-0.163 0.136,-0.042 0.271,0.045 0.108,0.042 0.104,0.146 0.015,0.202 z m 87.338,0.066 -0.444,0.048 -0.101,-0.133 -0.117,-0.6 0.315,-0.48 0.397,-0.282 0.271,-0.071 0.095,-0.004 0.242,0.346 -0.184,0.695 -0.212,0.355 -0.262,0.126 z m -8.55,-1.673 -0.029,0.062 -0.104,-0.327 0.087,-0.164 0.125,0.06 0.031,0.058 -0.119,0.156 0.009,0.155 z m -81.23,0.813 -0.176,0.026 -0.17,-0.06 -0.141,-0.16 -0.754,-0.464 -0.234,-0.007 -0.164,-0.119 -0.2,-0.041 -0.212,-0.31 -0.045,-0.166 0.154,-0.081 0.097,-0.17 0.251,0.075 0.286,0.3 0.291,0.112 0.079,0.057 0.142,0.166 0.665,0.408 0.072,0.139 0.046,0.139 0.013,0.156 z m 34.867,-1.522 -0.137,0.146 -0.146,-0.091 0.226,-0.296 0.053,-0.02 0.004,0.261 z m -8.776,0.119 -0.117,0.011 -0.035,-0.083 0.005,-0.143 -0.01,-0.114 -0.034,-0.085 0,-0.143 0.108,0.071 0.083,0.067 0.096,0.048 0.078,0.032 0.041,0.022 -0.077,0.202 -0.138,0.115 z m 1.472,-0.821 -0.004,0.192 -0.194,-0.113 -0.038,-0.213 0.064,-0.069 0.133,0.037 0.039,0.166 z m 31.919,-0.345 -0.035,0.092 -0.24,-0.225 -0.063,-0.163 0.029,-0.127 0.249,-0.011 0.124,0.08 -0.064,0.354 z m 22.451,-0.434 -0.07,0.085 -0.341,-0.156 0.017,-0.247 -0.046,-0.122 -0.092,-0.128 -0.037,-0.125 0.038,-0.137 0.21,0.175 0.118,0.278 0.162,0.264 0.041,0.113 z m 3.351,-0.929 -0.046,0.032 -0.101,-0.075 -0.063,-0.083 0.004,-0.083 0.072,-0.042 0.146,0.127 0.003,0.07 -0.015,0.054 z m -0.372,-0.296 0.007,0.118 -0.17,-0.268 -0.066,-0.317 0.135,0.113 0.151,0.234 -0.057,0.12 z m -24.795,-0.871 0.094,0.267 0.014,0.102 -0.521,0.14 -0.314,-0.328 0.067,-0.133 0.271,0.006 0.389,-0.054 z m -26.853,1.387 -0.384,0.103 -0.222,-0.144 0.24,-0.177 0.085,-0.012 0.056,-0.035 0.02,-0.072 -0.434,-0.117 -0.124,-0.103 -0.118,-0.262 0.003,-0.167 0.558,-0.441 0.13,-0.047 0.021,0.183 0.385,0.462 0.017,0.308 -0.015,0.111 -0.218,0.41 z m 23.117,-1.873 0.101,0.06 0.14,-0.002 0.166,-0.044 0.408,0.042 0.722,0.009 0.497,0.105 0.486,0.297 0.242,0.06 0.104,0.002 -0.023,0.023 -0.192,0.081 -0.091,0.16 0.265,0.245 0.018,0.163 0.205,0.146 0.251,0.227 0.01,0.074 0.085,0.102 0.043,0.125 -0.177,0.124 -0.237,0.023 -0.176,-0.117 -0.161,-0.146 -0.042,0.181 -0.125,0.104 -0.456,-0.03 -0.326,10e-4 -0.324,0.045 0.162,0.028 0.147,0.058 0.505,0.462 0.108,0.171 -0.177,0.34 0.086,0.139 0.195,0.08 0.238,0.169 0.169,0.017 0.122,0.096 0.005,0.166 0.071,0.15 -0.192,0.061 0.19,0.04 0.17,0.077 -0.093,0.078 -0.072,0.095 0.078,0.051 0.233,0.087 0.102,0.081 0.053,0.217 0.228,0.355 0.416,0.458 0.091,0.167 -10e-4,0.154 -0.069,0.132 -0.237,0.154 -0.189,0.204 -0.023,0.074 -0.258,0.094 0.118,0.069 0.094,0.094 0.179,0.283 0.427,0.46 0.215,0.172 0.883,0.624 0.47,0.272 0.6,0.622 0.311,0.144 0.061,0.173 -0.26,0.266 -0.378,0.133 -0.625,0.071 -0.627,-0.093 -0.324,-0.076 -0.282,-0.153 -0.222,-0.307 -0.294,-0.166 0.113,0.186 0.071,0.19 -0.037,0.207 -0.115,0.162 -0.198,0.119 -0.212,0.097 -0.09,0.068 -0.538,1.083 -0.087,0.293 -0.164,1.216 -0.003,0.344 0.242,0.643 0.021,0.337 0.048,0.146 -0.032,0.121 -0.114,0.072 -0.462,0.196 -0.326,0.163 -0.265,0.232 -0.214,0.289 -0.188,0.209 -0.25,0.1 -0.182,-0.015 -0.146,-0.096 -0.103,-0.186 -0.059,-0.203 -0.038,0.15 0.007,0.147 0.086,0.157 0.033,0.166 -0.05,0.169 -0.107,0.135 -0.29,0.147 -0.16,0.126 -0.031,0.223 -0.077,0.125 -0.111,0.097 -0.409,0.222 -0.092,0.089 -0.067,0.113 0.218,-0.018 0.2,0.018 0.015,0.221 0.063,0.165 -0.08,0.361 -0.308,0.244 0.154,0.051 0.139,0.08 0.309,0.059 0.104,0.256 -0.046,0.31 -0.056,0.278 -0.222,0.077 -0.138,-0.051 -0.137,0.005 -0.101,0.084 -0.026,0.144 0.191,-0.071 -0.011,0.36 -0.052,0.351 -0.063,0.194 -0.117,0.158 -0.177,0.051 -0.167,-0.119 -0.034,0.138 0.051,0.116 0.238,0.282 -0.146,0.062 -0.106,0.096 -0.048,0.14 -0.259,0.321 -0.115,0.236 -0.049,0.252 -0.121,0.2 -1.959,0.872 -1.585,0.734 -0.114,-0.05 -0.077,-0.112 -0.054,-1.141 -0.196,-0.583 -0.029,-0.329 -0.224,0.293 -0.137,-0.03 -0.148,-0.075 -0.111,-0.096 -0.009,-0.126 0.12,-0.362 -0.145,0.199 -0.158,0.153 -0.164,-0.019 -0.142,-0.076 -0.052,-0.118 -0.075,-0.018 -0.347,0.322 -0.457,0.173 -0.255,-0.003 -0.2,-0.099 0.01,-0.246 -0.021,-0.24 -0.056,-0.141 -0.123,-0.051 -0.113,0.018 -0.328,0.125 -0.117,-0.015 -0.067,0.063 -0.868,-0.874 -0.175,0.708 -0.6,0.376 -0.442,0.219 -0.439,-0.082 -0.445,-0.14 -0.444,0.169 -0.482,0.414 -0.133,0.063 -0.139,-10e-4 -0.102,-0.054 0.035,-0.314 0.004,-0.314 -0.036,-0.699 -0.038,-0.138 -0.139,-0.192 -0.184,-0.139 -0.102,0.101 -0.093,0.139 -0.366,-0.006 -0.357,-0.111 -0.304,0.063 -0.604,0.277 -0.32,0.043 -0.172,-0.063 -0.11,-0.149 0.063,-0.137 0.133,-0.105 -0.248,0.083 -0.211,0.14 -0.092,0.09 -0.099,-0.045 -0.264,-0.316 -0.552,0.118 -0.074,0.036 -0.136,0.108 -0.131,-0.054 -0.065,-0.115 -0.023,-0.66 -0.281,-1.269 -0.077,-0.648 -0.062,-0.153 -0.322,-0.233 0.011,-0.334 0.168,-0.28 0.035,-0.326 -0.048,-0.354 -0.101,-0.346 -0.127,-0.261 -0.182,-0.223 -0.241,-0.25 -0.297,-0.187 -0.64,-0.21 -0.337,0.019 -0.126,-0.083 -0.084,-0.107 0.034,-0.21 0.114,-0.144 0.153,-0.036 0.019,-0.082 -0.325,-0.169 -0.271,-0.23 -0.085,-0.138 -0.026,-0.152 0.002,-0.351 0.078,-0.222 0.043,-0.12 0.083,-0.371 0.177,-0.113 -0.028,-0.068 -0.076,-0.051 -0.11,-0.122 -0.091,-0.14 -0.207,-0.238 -0.365,-0.286 -0.062,-0.494 -0.047,-0.728 0.03,-0.331 0.117,-0.619 0.203,-0.195 0.161,-0.054 0.121,-0.083 -0.1,-0.012 -0.086,0.031 -0.154,0.021 0.127,-0.554 0.057,-0.16 0.255,-0.31 0.299,-0.274 0.126,-0.323 0.17,-0.283 0.703,-0.292 -0.253,0.366 0.028,0.133 0.062,0.118 0.182,0.083 0.052,0.451 0.229,0.256 0.23,0.234 0.17,0.115 0.187,0.167 0.131,0.155 0.138,0.13 0.208,0.127 0.563,0.541 0.235,0.159 0.175,0.159 0.124,0.056 0.307,-0.045 0.907,-0.388 0.163,-0.025 0.295,-0.067 0.521,0.021 0.551,0.132 0.179,0.004 0.17,-0.079 0.236,0.023 0.22,0.041 0.11,-0.034 0.32,-0.283 0.436,-0.084 0.141,-0.28 0.109,-0.264 0.052,-0.281 0.182,-0.113 0.255,-0.098 0.378,-0.124 1.311,-0.022 0.127,0.054 0.027,0.144 -0.027,0.109 0.052,0.065 0.174,0.006 0.161,0.066 0.653,0.226 0.278,0.07 0.155,-0.018 0.306,0.202 0.167,-0.069 0.221,-0.142 0.21,-0.191 0.188,-0.151 0.273,-0.059 0.354,0.008 0.418,-0.052 0.315,-0.081 0.352,0.134 0.094,-0.042 0.061,-0.131 0.182,-0.287 0.081,-0.193 0.07,-0.37 0.049,-0.088 0.134,-0.051 0.137,-0.07 0.036,-0.111 0.05,-0.129 -0.041,-0.108 -0.078,-0.091 -0.082,-0.309 0.026,-0.141 0.051,-0.105 0.141,-0.053 0.372,-0.227 0.33,-0.266 0.181,-0.13 0.079,-0.084 0.005,-0.122 -0.144,-0.127 -0.138,-0.061 -0.01,-0.147 0.005,-0.102 0.042,-0.096 -0.021,-0.093 -10e-4,-0.139 0.088,-0.15 0.203,-0.222 0.16,-0.144 0.178,0.089 0.207,-0.041 0.197,-0.072 0.109,-0.262 0.017,-0.125 -0.026,-0.1 0.068,-0.373 0.017,-0.054 0.129,-0.235 0.013,-0.158 -0.073,-0.367 0.046,-0.278 0.021,-0.575 0.077,-0.103 0.089,-0.298 0.144,-0.311 0.291,-0.169 0.152,-0.222 0.067,-0.042 0.1,-0.002 0.352,0.162 0.316,-0.18 0.286,-0.021 0.236,0.024 0.133,0.074 0.131,0.053 0.282,-0.175 0.106,0.039 z m 28.803,0.913 -0.113,0.058 -0.182,-0.021 -0.02,-0.142 0.185,-0.255 0.122,-0.269 -0.13,-0.067 -0.127,-0.172 -0.005,-0.2 0.104,-0.37 0.154,0.03 0.148,0.16 0.061,0.3 0.097,0.228 -0.206,0.31 -0.088,0.41 z m -85.103,-3.345 0.344,0.025 0.639,-0.152 0.351,0.015 0.331,0.11 0.294,0.063 0.732,-0.081 0.138,0.021 0.132,0.063 0.112,0.1 0.335,0.364 0.566,0.448 0.163,0.287 0.093,0.323 0.059,0.075 0.64,0.617 0.069,0.258 -0.09,0.357 0.186,0.284 0.62,0.267 0.366,0.194 0.078,0.119 0.054,0.142 0.203,0.21 0.254,0.137 0.793,0.361 1.04,0.754 0.591,0.358 0.489,0.544 0.177,0.26 0.146,0.281 0.297,0.409 0.505,0.505 0.128,0.154 0.136,0.223 0.157,0.207 0.188,0.19 0.224,0.146 0.229,0.047 0.369,0.365 0.199,0.114 -0.031,-0.286 -0.168,-0.25 0.003,-0.15 0.029,-0.135 0.137,-0.113 0.165,-0.032 0.31,0.104 0.503,0.433 0.212,0.252 0.159,0.348 0.134,0.361 0.2,0.18 0.276,0.063 0.307,0.026 0.282,0.111 0.66,0.5 0.219,0.235 0.166,0.276 0.114,0.327 0.071,0.343 0.044,0.079 0.424,0.414 0.223,0.175 0.272,0.085 0.795,0.093 0.279,0.143 0.232,0.238 0.097,0.242 -0.165,0.214 -0.621,0.328 -0.663,0.227 0.645,-0.078 0.326,-0.095 0.3,-0.148 0.297,-0.189 0.472,-0.264 0.175,-0.054 0.206,0.019 0.187,0.075 0.28,0.259 0.264,0.274 0.197,0.319 0.123,0.355 -0.226,0.186 -0.328,0.137 -0.451,0.343 -0.048,0.136 0.093,0.087 -0.11,0.252 0.253,0.156 0.038,0.132 -0.219,0.189 0.021,0.117 0.264,0.5 0.126,0.114 0.403,0.254 0.614,0.257 0.34,0.118 0.386,0.091 0.165,-0.002 0.289,-0.042 0.059,0.1 0.124,0.492 0.06,0.312 0.089,0.663 0.112,0.275 -0.007,0.336 0.147,0.286 0.303,0.183 0.321,0.149 0.152,0.146 -0.002,0.22 -0.052,0.174 -0.108,0.135 -0.334,0.287 -0.06,0.124 -0.047,0.316 0.057,0.145 0.134,0.008 0.104,-0.076 0.4,-0.424 0.108,-0.074 0.151,-0.06 0.154,-0.038 0.731,-0.003 0.311,0.067 0.275,0.138 0.243,0.173 0.891,1.105 0.407,0.61 0.032,0.152 0.007,0.158 -0.069,0.122 -0.37,0.417 -0.047,0.115 -0.115,0.454 0.021,0.327 0.123,0.137 0.099,0.149 -0.008,0.135 -0.244,0.672 -0.025,0.115 0.154,1.093 0.011,0.296 -0.031,0.375 0.022,0.604 -0.2,1.868 -0.037,0.111 -0.153,0.286 -0.201,-0.002 -0.163,-0.05 -0.113,-0.109 -0.063,-0.135 -0.092,-0.111 -0.486,-0.345 -0.127,0.057 -0.494,0.428 -0.131,0.063 -0.165,-0.052 -0.26,-0.128 -0.815,-0.45 -0.05,0.144 -0.011,0.195 0.162,0.49 0.023,0.214 -0.148,0.042 -0.083,-0.009 -0.339,-0.284 -0.313,-0.315 -0.355,-0.426 -0.26,-0.202 -0.234,-0.226 -0.66,-0.858 -0.172,-0.131 -1.023,-0.605 -0.206,-0.144 -0.262,-0.25 -0.281,-0.223 -0.617,-0.351 -1.07,-0.89 -0.465,-0.511 -0.517,-0.824 -0.169,-0.21 -0.869,-0.618 -0.474,-0.374 -0.198,-0.215 -0.461,-0.749 -0.135,-0.252 -0.17,-0.223 -0.279,-0.181 -0.246,-0.212 -0.488,-0.677 -0.154,-0.27 -0.116,-0.292 0.021,-0.585 -1.035,-1.771 -0.26,-0.552 -0.241,-0.766 -0.053,-0.077 -0.565,-0.686 -0.199,-0.22 -0.242,-0.206 -0.197,-0.241 -0.39,-0.783 -0.145,-0.217 -0.203,-0.16 -0.738,-0.296 -0.275,-0.165 -0.217,-0.234 -0.133,-0.299 -0.146,-0.634 -0.349,-0.963 -0.39,-1.29 -0.264,-0.578 -0.301,-0.454 -0.088,-0.105 -1.34,-0.817 -0.229,-0.121 -0.243,-0.072 -0.347,-0.052 -0.265,-0.211 -0.108,-0.379 -0.061,-0.508 -0.066,-0.303 -0.073,-0.172 -0.56,-0.359 -0.22,-0.284 -0.183,-0.313 -0.167,-0.242 -0.616,-0.836 -0.211,-0.219 -0.261,-0.153 -0.773,-0.162 -0.227,-0.139 -0.375,-0.475 -0.227,-0.242 -0.68,-0.533 -1.149,-1.115 -0.235,-0.278 -0.176,-0.29 -0.143,-0.311 -0.49,-0.862 0.04,-0.174 0.073,-0.181 -0.011,-0.15 -0.054,-0.148 0.011,-0.133 0.146,-0.079 0.327,-0.101 0.339,0.012 0.314,0.043 0.304,0.083 0.292,0.181 0.522,0.458 0.297,0.159 0.33,0.077 0.678,0.106 z m -3.173,-1.633 -0.055,0.079 -0.167,-0.041 -0.184,-0.255 0.068,-0.049 0.113,0.026 0.216,0.059 0.019,0.095 -0.01,0.086 z",
                        title: "Indonesia",
                        id: "ID",
                    },
                    {
                        d:
                            "m 454.63575,277.7544 -0.444,0.314 -0.069,0.119 -0.125,0.479 -0.015,0.136 -0.143,0.251 -0.135,0.279 -0.157,0.108 -0.234,0.086 -0.133,0.085 -0.168,-0.043 -0.212,0.007 -0.106,0.095 0.005,0.073 0.063,0.083 0.186,0.128 0.207,0.115 -0.023,0.101 -0.111,0.114 -0.703,0.284 -0.209,0.171 -0.073,0.113 0.075,0.189 0.561,0.565 0.095,0.062 0.083,0.329 0.495,0.137 0.203,0.205 0.174,0.049 0.379,-0.018 0.152,0.077 0.086,-0.059 0.05,-0.108 0.319,-0.278 0.105,-0.122 -0.063,-0.169 -0.068,-0.129 0.194,-0.257 0.235,-0.254 0.118,0.008 0.201,0.156 0.166,0.217 0.022,0.168 0.031,0.122 0.157,0.26 0.101,0.09 0.272,0.052 0.064,0.102 -0.049,0.376 0.041,0.125 0.285,0.006 0.303,-0.03 0.106,0.014 0.109,-0.079 0.168,-0.085 0.241,0.029 0.118,0.168 0.053,0.173 -0.207,0.065 -0.216,-0.035 -0.105,0.113 -0.007,0.218 0.073,0.281 0.145,0.199 0.115,0.448 0.096,0.496 0.148,0.299 0.031,0.37 -0.022,0.182 0.027,0.327 -0.063,0.115 0.047,0.306 0.175,0.631 0.077,0.351 0.049,0.764 -0.124,0.285 -0.166,0.271 -0.109,0.32 -0.083,0.345 -0.051,0.555 -0.36,0.648 -0.153,0.161 -0.178,0.099 0.388,0.452 -0.317,0.201 -0.345,0.063 -0.382,-0.113 -0.238,0.014 -0.218,0.146 -0.085,0.088 -0.069,-0.042 -0.143,-0.37 -0.105,0.382 -0.22,0.122 -0.377,-0.026 -0.63,0.102 -0.243,0.108 -0.101,0.17 -0.075,0.196 -0.099,0.115 -0.111,0.061 -0.487,0.144 -0.096,0.058 -0.226,0.315 -0.295,0.182 -0.245,0.055 -0.217,-0.183 -0.089,-0.11 -0.101,-0.056 -0.334,0.009 0.105,0.057 0.068,0.129 0.033,0.248 -0.038,0.243 -0.165,0.123 -0.196,0.023 -0.31,0.251 -0.41,0.068 -0.222,0.231 -1.356,0.39 -0.077,0.004 -0.187,-0.099 -0.203,-0.044 -0.202,0.031 -0.568,0.218 -0.275,-0.043 0.351,-0.542 0.471,-0.274 0.049,-0.075 -0.154,-0.037 -0.896,0.19 -0.311,0.162 -0.311,0.047 0.144,-0.248 0.401,-0.339 0.215,-0.16 0.131,-0.064 0.15,-0.2 0.423,-0.227 -1.362,0.468 -0.358,-0.057 -0.084,-0.13 -0.278,0.062 -0.106,-0.317 0.413,-0.479 0.241,-0.207 0.286,-0.112 0.275,-0.161 0.102,-0.196 -0.129,-0.063 -0.824,0.05 -0.395,-0.042 0.021,-0.156 0.073,-0.173 0.409,-0.296 0.222,-0.047 0.197,0.028 0.192,0.076 0.157,0.099 0.464,-0.057 -0.194,-0.189 -0.034,-0.385 -0.148,-0.129 0.189,-0.179 0.217,-0.108 0.362,-0.371 0.129,-0.057 0.716,-0.09 0.772,-0.195 0.765,-0.27 -0.393,-0.151 -0.188,-0.2 -0.302,0.403 -0.218,0.154 -0.614,0.083 -0.194,-0.045 -0.274,-0.125 -0.085,0.047 -0.079,0.096 -0.407,0.197 -0.427,0.047 0.497,-0.362 0.631,-0.615 0.14,-0.194 0.2,-0.339 -0.062,-0.151 -0.13,-0.086 0.457,-0.7 0.161,-0.127 0.292,-0.021 0.215,-0.111 0.095,0 0.085,-0.042 0.188,-0.21 -0.29,-0.134 -0.3,-0.069 -0.927,0.073 -0.122,-0.016 -0.115,-0.065 -0.075,-0.093 -0.056,-0.239 -0.068,-0.054 -0.209,0 -0.207,0.073 -0.144,-0.007 -0.141,-0.105 0.226,-0.245 -0.291,-0.058 -0.294,0.048 -0.245,-0.075 -0.007,-0.154 0.111,-0.154 -0.146,-0.146 -0.03,-0.185 0.155,-0.091 0.169,0.03 0.345,-0.137 0.443,-0.066 -0.38,-0.135 -0.151,-0.116 -0.007,-0.177 0.03,-0.152 0.439,-0.257 0.468,-0.113 -0.035,-0.169 0.033,-0.184 -0.473,-0.053 -0.467,0.129 0.05,-0.351 0.112,-0.318 0.022,-0.209 -0.022,-0.225 -0.219,0.096 -0.025,-0.317 -0.094,-0.217 -0.325,0.15 0.008,-0.288 0.094,-0.201 0.169,-0.087 0.168,0.038 0.313,-0.003 0.302,-0.152 0.435,-0.039 0.692,0.047 0.476,0.427 0.123,-0.076 0.19,-0.27 0.089,-0.03 0.718,0.118 0.445,0.155 0.119,-0.048 -0.064,-0.299 -0.153,-0.208 0.192,-0.272 0.234,-0.185 0.157,-0.092 0.361,-0.115 0.158,-0.108 0.105,-0.352 0.167,-0.293 -0.907,0.152 -0.863,-0.348 0.137,-0.246 0.182,-0.14 0.314,-0.107 0.03,-0.129 0.159,-0.107 0.263,-0.282 -0.097,-0.369 0.052,-0.27 0.189,-0.176 0.059,-0.253 0.084,-0.187 0.384,-0.067 0.369,-0.173 0.133,0.017 0.437,-0.04 0.147,0.07 -0.034,-0.307 0.268,-0.04 0.104,0.061 0.046,0.218 0.122,0.139 0.038,0.241 -0.082,0.186 -0.137,0.143 0.125,0.146 -0.193,0.265 0.208,-0.113 0.297,-0.259 -0.016,-0.211 -0.05,-0.267 -0.083,-0.241 0.038,-0.266 0.167,-0.166 0.439,-0.084 -0.18,-0.302 0.16,-0.027 0.174,0.063 0.256,0.235 0.267,0.185 0.276,0.146 -0.266,0.292 -0.327,0.203 -0.125,0.221 z m -7.66,5.685 -0.012,0.136 -0.208,-0.171 -0.101,-0.187 -0.57,-0.085 0.237,-0.187 0.116,0.055 0.403,0.008 0.113,0.078 0.022,0.353 z",
                        title: "Ireland",
                        id: "IE",
                    },
                    {
                        d:
                            "m 575.33175,366.1854 -0.148,0.02 -0.346,0.155 -0.047,0.047 -0.061,0.09 -0.011,0.069 -0.049,0.744 -0.188,-0.021 -0.229,-0.162 -0.045,-0.14 -0.069,-0.048 -0.164,-0.018 -0.31,-0.071 -0.36,0.245 -0.153,0.404 -0.031,0.189 -0.122,0.396 0.043,0.244 0.021,0.315 0.031,0.257 -0.032,0.155 -0.069,0.082 0.02,0.059 0.062,0.022 0.197,-0.07 0.207,0.07 0.199,0.133 0.016,0.086 -0.141,0.051 -0.333,0.201 -0.235,0.233 -0.061,0.215 -0.159,0.458 0.022,0.094 0.077,0.055 0.542,-0.049 0.493,-0.185 0.371,-0.197 0.117,0.012 -0.078,0.504 0.002,0.002 -0.064,0.308 0.025,0.052 0.084,0.268 -0.159,0.489 -0.176,0.398 -0.062,0.188 -0.172,0.419 -0.176,0.485 -0.094,0.334 0.021,0.118 -0.043,0.611 0.025,0.173 -0.206,0.529 -0.041,0.261 -0.083,0.353 -0.142,0.746 -0.194,0.25 -0.096,-0.278 -0.222,-0.798 -0.157,-0.548 -0.215,-0.675 -0.362,-0.824 -0.033,-0.199 -0.078,-0.288 -0.249,-0.752 -0.204,-0.544 -0.233,-0.696 0.289,-0.276 0.005,-0.228 0.492,-0.534 -0.004,-0.052 -0.131,-0.142 0.019,-0.024 0.545,-0.997 0.352,-0.99 0.331,-1.383 0.236,-0.705 0.2,-0.468 0.088,-0.388 0.322,-0.027 0.24,0.041 0.288,0.013 0.23,-0.146 0.11,-0.437 0.131,-0.071 0.067,0.104 0.068,-0.115 0.301,-0.193 0.149,-0.124 0.149,-0.153 0.08,-0.055 -0.05,0.205 -0.04,0.134 0,0.175 0.061,0.096 0.083,0.19 0.051,0.19 -0.108,0.157 0.01,0.164 0.029,0.138 0.088,0.161 -0.158,0.29 -0.156,0.266 z",
                        title: "Israel",
                        id: "IL",
                    },
                    {
                        d: "m 462.51275,282.1414 -0.567,0.605 -0.23,-0.108 -0.196,0.057 -0.054,-0.017 0.111,-0.219 0.132,-0.507 0.235,-0.201 0.298,-0.528 0.236,-0.146 0.081,0.02 0.052,0.05 0.11,0.593 -0.152,0.209 z",
                        title: "Isle of Man",
                        id: "IM",
                    },
                    {
                        d:
                            "m 738.39675,443.8334 -0.172,0.231 -0.336,-0.708 -0.144,-0.043 -0.005,-0.337 0.078,-0.133 0.389,-0.149 0.102,0.083 0.198,0.656 -0.11,0.4 z m -0.439,-1.477 -0.267,0.266 -0.116,-0.16 0.048,-0.111 0.113,-0.061 0.106,-0.086 0.116,0.152 z m -0.817,-1.466 -0.218,0.003 -0.064,-0.121 -0.092,-0.125 0.07,-0.121 0.115,-0.031 0.163,0.196 0.038,0.139 -0.012,0.06 z m 0.265,-0.503 -0.132,0.104 -0.033,-0.014 -0.019,-0.08 -0.005,-0.056 -0.024,-0.101 -0.013,-0.178 0.105,-0.149 0.105,0.031 -0.057,0.152 0.073,0.291 z m -57.447,-0.599 -0.04,0.035 -0.041,0.013 -0.028,-0.004 -0.015,-0.035 0.008,-0.026 0.036,0.03 0.048,-0.028 0.054,-0.089 0.013,-0.029 0.011,0.016 -0.011,0.051 -0.035,0.066 z m 56.335,0.055 0.084,0.105 -0.155,-0.018 -0.144,-0.159 0.038,-0.149 0.054,-0.061 0.123,0.282 z m -0.992,-2.502 -0.123,0.016 -0.076,-0.096 -0.009,-0.112 0.07,-0.073 0.066,-0.038 0.066,0.01 0.066,0.189 -0.06,0.104 z m -0.798,-4.013 -0.085,0.097 -0.289,-0.076 0.021,-0.292 -0.068,-0.286 0.05,-0.12 0.217,-0.205 0.176,-0.09 0.122,0.277 0.057,0.271 -0.201,0.424 z m -55.351,-1.839 -0.021,0.018 -0.002,-0.052 0.026,-0.083 0.03,-0.055 0.009,0.006 -0.008,0.054 -0.015,0.073 -0.019,0.039 z m 55.885,-0.509 -0.137,0.057 -0.137,-0.071 0.107,-0.115 0.018,-0.234 0.14,0.13 -0.008,0.148 0.017,0.085 z m 0.91,-1.867 0.125,0.392 -0.226,-0.171 -0.073,-0.123 0.113,-0.083 0.061,-0.015 z m -0.842,-2.364 -0.089,0.186 -0.018,-0.398 0.042,-0.05 0.045,-0.014 0.057,0.037 -0.037,0.239 z m 0.015,3.791 -0.062,0.067 -0.091,-0.075 -0.261,-0.511 -0.045,-0.328 -0.072,-0.114 0.092,-0.163 0.115,-0.054 0.068,-0.184 0.024,-0.28 0.101,-0.229 0.051,-0.064 0.21,-0.002 0.053,-0.029 -0.029,-0.219 -0.122,-0.095 -0.043,-0.061 0.005,-0.525 0.032,-0.212 0.076,-0.153 -0.054,-0.316 0.036,-0.118 0.151,-0.166 0.067,-0.354 -0.062,-0.106 0.144,-0.546 -0.008,-0.366 0.188,-0.366 0.294,-0.167 0.093,-0.004 0.012,0.313 0.028,0.103 -0.17,0.185 0.162,0.241 -0.021,0.087 -0.065,0.191 -0.107,0.188 -0.149,0.077 -0.116,0.25 -0.066,0.094 0.221,0.263 0.071,0.892 -0.162,0.244 -0.193,0.049 0.045,0.594 -0.035,0.133 -0.191,0.291 -0.036,0.127 -0.107,0.12 0.045,0.149 0.093,0.065 0.002,0.122 -0.086,0.313 -0.007,0.357 -0.119,0.292 z m -39.3,-61.555 -0.007,-0.011 -0.165,-0.245 0.172,0.256 -0.092,0.27 0.019,0.214 0.17,0.236 0.138,0.165 -0.135,0.222 -0.08,0.257 0.09,0.115 -0.042,0.369 0.04,0.069 0.095,0.029 0.148,-0.025 0.113,0.18 -0.102,-0.162 -0.012,-0.018 0.154,-0.098 0.131,-0.019 0.078,0.028 0.104,-0.279 0.092,-0.04 0.178,0.077 0.352,0.526 0.298,0.444 0.063,0.061 0.023,0.023 0.053,0.051 0.294,0.23 0.203,0.145 0.277,-0.052 0.366,-0.01 0.217,0.142 0.125,0.099 0.006,0.014 0.017,0.003 0,0 0.44,0.348 0.19,-0.026 0.126,0.1 0.036,0.245 -0.059,0.255 0.014,0.12 0.196,0.023 0.417,0.168 0.368,0.149 0.191,0.047 0.205,0.11 0.182,0.176 0.355,0.226 0.314,0.173 0.069,0.234 -0.124,-0.05 -0.164,0.026 -0.167,0.104 -0.079,0.066 -0.381,0.403 -0.2,0.124 -0.179,0.181 -0.413,0.545 -0.239,0.508 -0.174,0.477 0.003,0.337 -0.064,0.395 -0.178,0.225 -0.109,0.076 -0.129,0.339 -0.093,0.395 0.054,0.128 0.222,0.172 0.216,0.168 0.275,0.182 0.264,0.173 0.17,0.022 0.047,-0.098 0.062,-0.094 0.194,0.05 0.236,0.169 0.154,0.135 0.068,0.045 0.408,0.227 0.338,0.187 0.428,0.237 0.104,0.145 0.092,0.154 0.202,0.204 0.491,0.361 0.42,0.259 0.342,0.21 0.268,0.147 0.124,-0.023 0.136,-0.079 0.119,-0.045 0.139,0.042 0.21,0.112 0.493,0.342 0.46,0.267 0.501,-0.048 0.133,0.043 0.094,0.242 0.063,0.245 0.56,0.162 0.368,0.073 0.421,0.133 0.213,0.099 0.224,-0.124 0.041,-0.109 0.177,-0.064 0.294,0.028 0.548,0.19 0.229,0.057 0.192,-0.18 0.357,-0.083 0.187,-0.094 0.39,0.2 0.704,0.25 0.363,0.156 0.086,0.153 0.039,0.145 -0.003,0.352 0.089,0.159 0.706,0.357 0.233,0.151 0.188,0.049 0.106,0.006 0.073,0.045 0.063,0.203 0.05,0.047 0.136,0.05 0.148,0.029 0.459,-0.176 0.314,-0.133 0.224,0.034 0.145,0.148 0.021,0.216 0.084,0.228 0.16,0.111 0.172,0.012 0.426,-0.154 0.343,0.118 0.314,0.043 0.35,0.074 0.136,0.056 0.362,0.188 0.443,0.19 0.171,-0.021 0.713,-0.354 0.061,0.043 0.145,0.338 0.217,0.121 0.339,0.106 0.354,-0.195 0.279,0.056 0.338,0.018 0.324,-0.094 0.281,-0.024 0.409,0.17 0.09,-0.039 0.078,-0.109 0.159,-0.488 0.141,-0.432 -0.013,-0.258 -0.129,-0.379 -0.331,-0.494 -0.024,-0.15 0.111,-0.863 0.123,-0.499 0.105,-0.236 0.116,-0.337 0.021,-0.156 -0.012,-0.141 -0.113,-0.086 -0.03,-0.107 0.028,-0.09 0.09,-0.05 0.376,-0.063 0.424,-0.135 0.169,-0.072 0.127,-0.072 0.13,-0.114 0.121,0.005 0.38,0.165 0.133,0.104 0.07,0.315 0.057,0.122 -0.05,0.32 -0.228,0.774 0.045,0.289 0.189,0.211 0.165,0.147 -0.027,0.059 -0.34,0.249 -0.061,0.133 0.075,0.13 0.135,0.11 0.061,0.105 0.063,0.326 0.173,0.092 0.342,0.21 0.301,0.153 0.517,-0.102 0.146,0.069 0.254,0.072 0.198,0.022 0.115,0.054 0.064,0.052 -0.009,0.066 0.011,0.068 0.283,0.018 0.149,0.039 0.503,-0.07 0.505,-0.096 0.232,-0.291 0.103,-0.021 0.29,-0.113 0.286,0.124 0.314,0.169 0.17,0.051 0.335,0.027 0.326,-0.019 0.78,-0.081 0.429,0.042 0.394,-0.242 0.081,10e-4 0.173,0.187 0.433,0.017 0.23,-0.09 0.248,-0.069 0.158,-0.022 0.127,-0.002 0.153,0.018 0.145,-0.062 0.066,-0.125 -0.015,-0.189 -0.104,-0.206 -0.091,-0.121 -0.018,-0.064 0.028,-0.149 0.08,-0.21 0.147,-0.24 -0.108,-0.233 -0.151,-0.267 -0.111,-0.026 -0.28,0.062 -0.303,-0.012 -0.239,-0.161 -0.178,-0.202 -0.043,-0.169 0.052,-0.207 0.079,-0.19 0.017,-0.071 0.227,0 0.314,0.042 0.238,0.053 0.191,-0.002 0.347,-0.244 0.158,-0.015 0.182,-0.046 0.079,-0.046 0.055,0.036 0.199,0.03 0.207,-0.012 0.185,-0.067 0.186,-0.105 0.33,-0.22 0.065,-0.126 0,-0.116 -0.062,-0.077 -0.063,-0.037 0.025,-0.101 0.139,-0.17 0.505,-0.256 0.43,-0.316 0.236,-0.237 0.108,-0.287 0.137,-0.312 0.128,-0.123 0.305,-0.078 0.854,-0.115 0.269,-0.126 0.397,-0.234 0.2,-0.184 0.111,-0.149 0.012,-0.166 0.264,-0.052 0.23,-0.269 0.279,-0.271 0.491,-0.229 0.435,-0.308 0.151,0.049 0.158,0.146 0.084,0.161 0.018,0.082 0.556,0.102 0.088,-0.016 0.409,0.144 0.377,0.174 0.208,0.043 0.102,-0.005 0.087,-0.054 0.102,-0.153 0.104,-0.111 0.065,-0.045 -0.003,-0.176 0.546,-0.344 0.49,-0.247 0.422,-0.18 0.124,0.074 0.137,0.137 0.187,0.349 0.113,0.085 0.286,-0.049 0.053,0.039 -0.045,0.125 -0.194,0.155 -0.252,0.139 -0.164,0.114 0.054,0.379 -0.013,0.13 0.071,0.041 0.518,-0.376 0.249,-0.074 0.089,0.091 0.027,0.201 0.205,0.414 0.087,0.21 -0.521,0.5 -0.191,0.258 0.007,0.091 -0.01,0.09 -0.133,0.128 0.007,0.051 0.107,0.081 0.131,0.061 0.063,-0.002 0.108,-0.121 0.491,-0.171 0.141,0.032 0.346,0.262 0.16,0.015 0.415,0.078 0.266,-0.099 0.195,0.091 0.405,0.328 0.093,0.06 -0.034,0.199 -0.021,0.219 0.103,0.174 0.012,0.154 -0.023,0.141 -0.081,0.097 -0.225,0.054 -0.191,0.168 -0.304,0.243 -0.244,0.194 -0.177,0.172 -0.064,0.18 0.02,0.227 0.051,0.237 0.566,0.868 -0.005,0.15 -0.179,0.042 -0.238,-0.098 -0.205,-0.14 -0.231,-0.372 -0.186,-0.111 -0.185,-0.024 -1.1,0.191 -0.233,0.054 -0.363,0.139 -0.254,0.279 -0.185,0.255 -0.19,0.103 -0.278,0.198 -0.771,0.608 -0.445,0.262 -0.291,0.096 -0.204,0.138 -0.11,0.224 -0.083,0.161 -0.024,0.395 0.051,0.486 0.11,0.31 0.059,0.065 0.009,0.091 -0.111,0.167 -0.146,0.143 -0.071,0.088 -0.065,0.442 -0.129,0.217 -0.238,0.319 -0.211,0.241 -0.331,0.187 -0.126,0.151 -0.121,0.279 -0.071,0.236 -0.004,0.085 0.038,0.075 0.138,0.083 0.167,0.08 0.08,0.125 0.011,0.151 -0.124,0.363 -0.223,0.503 -0.255,0.398 -0.263,0.379 -0.063,0.124 -0.236,0.465 -0.206,0.639 -0.139,0.429 -0.12,0.294 -0.148,0.013 -0.179,-0.094 -0.437,-0.125 -0.279,-0.101 -0.203,-0.091 -0.141,0.004 -0.194,0.059 -0.197,0.041 -0.117,-0.044 -0.271,-0.265 -0.083,0.03 -0.053,0.129 0.183,0.756 0.119,0.281 -0.02,0.469 -0.047,0.575 -0.07,0.627 -0.047,0.145 -0.116,0.166 -0.153,0.045 -0.139,-0.065 -0.111,0.015 -0.037,0.105 0.032,0.271 -0.136,0.31 -0.1,0.265 0.026,0.257 0.048,0.261 0.159,0.564 0.001,0.206 -0.031,0.185 -0.083,0.077 -0.143,-0.013 -0.078,0.076 -0.059,0.116 -0.161,0.427 -0.154,0.045 -0.155,-0.064 -0.232,-0.285 -0.142,-0.083 -0.09,0.005 -0.04,0.075 -0.063,0.17 -0.063,0.114 -0.155,0.1 -0.038,-0.21 -0.083,-1.092 -0.063,-0.348 -0.051,-0.483 -0.075,-0.148 -0.096,-0.265 -0.106,-0.229 -0.089,-0.097 -0.057,-0.427 -0.021,-0.523 0.001,-0.248 -0.125,-0.513 -0.122,-0.582 -0.165,0.024 -0.098,-0.141 -0.071,0.003 -0.232,0.131 -0.185,-0.043 -0.137,0.018 -0.001,0.268 0.023,0.285 -0.052,0.103 -0.362,0.334 -0.101,0.224 0.01,0.235 0.045,0.314 -0.064,0.16 -0.157,0.147 -0.211,0.077 -0.186,-0.036 -0.119,-0.128 -0.111,-0.326 -0.099,-0.178 -0.104,-0.042 -0.081,0.048 -0.011,0.205 0.006,0.169 -0.026,0.019 -0.058,-0.026 -0.066,-0.083 -0.173,-0.818 -0.247,-0.631 -0.015,-0.242 0.09,-0.312 0.111,-0.481 0.293,-0.3 0.038,-0.127 0.048,-0.101 0.071,-0.02 0.376,0.028 0.126,-0.048 0.111,-0.142 0.162,-0.114 0.162,-0.046 0.129,-0.017 0.207,0.108 0.086,-0.062 0.063,-0.2 0.09,-0.198 0.058,-0.096 0.139,-0.043 0.177,-0.01 0.059,-0.037 0.048,-0.067 0.044,-0.263 0.226,-0.589 0.08,-0.262 0.012,-0.046 -0.007,-0.292 0.064,-0.042 0.375,0.143 0.164,-0.002 0.089,-0.059 0.029,-0.107 -0.048,-0.125 -0.267,-0.219 -0.474,-0.295 -0.435,-0.181 -0.804,0.027 -0.796,0.057 -0.233,-0.029 -0.291,-0.082 -0.715,0.012 -0.864,0.045 -0.329,-0.025 -0.162,0.003 -0.325,0.027 -0.53,-0.084 -0.367,-0.108 -0.325,-0.119 -0.386,-0.107 -0.093,10e-4 -0.054,-0.039 -0.037,-0.095 -0.013,-0.123 0.08,-0.57 -0.071,-0.866 0.065,-0.316 -0.316,-0.712 -0.108,-0.132 -0.146,-0.006 -0.093,0.092 -0.037,0.167 0.053,0.187 -0.116,0.208 -0.233,0.067 -0.272,-0.07 -0.226,-0.098 -0.291,-0.212 -0.219,-0.299 -0.019,-0.331 -0.099,-0.213 -0.135,-0.104 -0.099,-0.029 -0.089,0.023 -0.078,0.116 0.068,0.115 0.093,0.162 -0.031,0.11 -0.083,0.017 -0.124,-0.047 -0.192,0.025 -0.186,-0.084 -0.111,-0.007 -0.11,-0.031 -0.007,-0.191 -0.169,-0.242 -0.286,-0.271 -0.281,-0.168 -0.135,0.023 -0.068,0.185 0.016,0.069 0.099,0.034 0.142,0.107 0.03,0.112 -0.021,0.098 -0.175,0.179 -0.124,0.17 -0.277,0.247 -0.236,0.283 -0.062,0.214 -0.089,0.192 -0.035,0.211 0.062,0.146 0.114,0.092 0.296,0.067 0.31,0.284 0.25,0.383 0.141,0.116 0.256,0.129 0.493,0.015 0.073,0.105 0.07,0.281 0.097,0.099 0.251,0.132 0.021,0.097 -0.061,0.112 -0.111,0.088 -0.205,0.056 -0.195,0.022 -0.196,-0.036 -0.291,-0.022 -0.33,-0.002 -0.234,0.699 -0.167,0.245 -0.095,0 -0.255,-0.119 -0.109,0.019 -0.294,0.62 -0.041,0.149 -0.02,0.112 0.156,0.239 0.187,0.197 0.223,0.077 0.175,-0.059 0.142,0.079 0.166,0.198 0.285,0.131 0.403,0.063 0.229,0.156 0.028,0.135 -0.02,0.137 -0.036,0.356 -0.039,0.205 -0.217,0.538 -0.155,0.463 0.08,0.22 0.058,0.09 0.055,0.069 0.174,0.173 0.121,0.171 -0.104,0.437 0.057,0.115 0.233,0.077 0.251,0.059 0.088,0.072 -0.218,0.443 0.046,0.308 0.092,0.289 0.066,0.472 0.01,0.05 -0.018,0.118 0.143,0.366 0.221,0.713 0.017,0.266 -0.013,0.281 -0.065,0.469 -0.221,-0.002 0.197,0.313 0.063,0.225 0.027,0.314 -0.237,0.039 -0.168,-0.035 -0.14,-0.275 -0.065,0.25 -0.25,0.231 -0.09,-0.113 -0.052,-0.121 -0.01,-0.214 0.138,-0.817 -0.028,-0.092 -0.062,-0.061 -0.137,-0.033 -0.051,-0.166 -0.209,0.872 0.092,0.356 -0.042,0.162 -0.39,0.136 -0.395,-0.327 -0.05,-0.105 -0.023,0.184 -0.071,0.224 -0.37,-0.041 -0.183,-0.175 0.119,-0.298 0.229,-0.72 0.043,-0.321 -0.307,-0.236 -0.26,-0.145 -0.149,-0.328 0.057,0.36 0.139,0.128 0.202,0.09 0.214,0.184 -0.154,0.224 -0.15,0.139 -0.287,0.528 -0.35,0.295 -0.408,0.222 -1.34,0.326 -0.281,0.132 -0.411,0.406 -0.266,0.385 -0.049,0.39 0.15,0.421 0.122,0.658 0.102,0.134 -0.143,0.24 -0.249,0.255 -0.206,0.343 0.019,0.188 -0.053,0.127 -0.706,0.421 -0.148,0.246 -0.194,0.244 -0.232,-0.14 -0.136,0.002 0.187,0.194 -0.024,0.128 -0.066,0.075 -0.178,0.07 -1.02,0.309 -0.78,0.293 -0.219,-0.012 0.04,-0.089 0.137,-0.079 -0.014,-0.336 -0.143,-0.062 -0.124,-0.024 -0.594,0.41 -0.24,0.405 0.05,0.077 0.135,-0.019 0.399,-0.229 0.186,0.065 0.013,0.09 -0.606,0.35 -1.275,1.132 -0.06,0.223 -0.166,0.252 -0.229,0.237 -0.411,0.573 -0.788,0.851 -0.219,0.317 -1.262,0.654 -0.23,0.194 -0.518,0.636 -0.532,0.52 -0.621,0.431 -1.077,0.549 -0.655,0.519 -0.205,0.345 -0.013,0.123 0.07,0.167 0.12,0.156 0.027,0.124 -0.059,0.222 -0.032,0.123 -0.192,0.304 -0.329,0.217 -1.065,0.453 -0.141,-0.014 -0.869,-0.09 -0.325,0.082 -0.134,0.212 -0.299,0.877 -0.286,0.233 -0.103,0.211 -0.041,0.146 -0.172,-0.004 -0.148,-0.065 -0.108,0.047 -0.124,-0.294 -0.208,-0.06 -0.172,-0.021 -0.734,0.296 -0.257,0.238 -0.54,1.121 -0.134,0.722 0.127,0.796 0.188,0.635 0.037,0.287 -0.023,0.372 -0.096,0.181 -0.068,0.214 0.09,0.441 0.227,0.577 0.055,0.244 0.005,0.251 0.171,0.576 -0.115,-0.104 -0.091,-0.243 -0.216,-0.31 -0.265,0.309 0.146,0.222 0.494,0.264 0.146,0.216 -0.318,1.921 -0.241,0.681 -0.296,0.446 -0.157,0.172 -0.351,0.708 -0.244,0.851 -0.049,0.327 0.11,0.366 -0.125,0.216 -0.156,0.165 0.297,-0.074 0.102,0.198 0.038,0.205 0.004,1.216 -0.033,1.266 -0.229,0.052 -0.251,0.013 -0.222,-0.036 -0.159,-0.049 -0.396,0.067 -0.213,0.14 -0.171,0.232 0.012,0.396 -0.734,0.996 -0.158,0.332 -0.058,0.319 0.095,0.167 0.188,0.171 0.245,0.069 0.473,0.069 0.227,0.091 0.154,0.169 -0.557,-0.18 -0.655,-0.036 -1.566,0.462 -0.412,0.324 -0.23,0.281 -0.158,0.642 -0.027,0.429 -0.186,0.357 -0.813,0.548 -0.514,0.169 -0.195,0.146 -0.606,-0.189 -0.661,-0.48 -0.278,-0.258 -0.981,-1.24 -0.179,-0.157 -0.198,-0.531 -0.031,-0.198 -0.055,-0.079 -0.093,-0.054 -0.045,-0.082 -0.221,-0.608 -0.09,-0.634 -0.141,-0.709 0.118,0.049 0.164,0.233 0.082,0.339 0.01,0.474 0.123,0.055 0.11,-0.045 -0.315,-1.092 -0.274,-0.271 -0.072,-0.018 -0.077,-0.175 -0.008,-0.22 0.024,-0.104 -0.219,-0.358 -0.077,-0.213 -0.486,-1.083 -0.219,-0.777 -0.339,-0.865 -0.219,-0.303 -0.341,-0.668 -0.286,-0.311 -0.303,-0.417 -0.238,-0.185 -0.093,-0.097 -0.705,-1.447 -0.217,-0.801 -0.184,-0.378 -0.091,-0.288 -0.247,-1.231 -0.002,-0.22 -0.03,-0.241 -0.176,-0.522 -0.309,-0.565 -0.089,-0.352 10e-4,-0.137 -0.196,-0.55 -0.042,-0.251 -0.132,-0.232 -0.154,-0.213 -0.16,-0.171 -0.377,-0.558 -0.135,-0.136 -0.257,-0.362 -0.183,-0.669 -0.234,-0.262 0.368,0 -0.225,-0.248 -0.106,-0.162 -0.118,-0.1 0.171,-0.25 -0.28,0.007 -0.148,-0.15 -0.203,-0.47 -0.369,-0.532 -0.063,-0.284 -0.326,-0.895 -0.276,-2.153 -0.253,-0.961 0.02,-0.276 -0.306,-0.834 -0.149,-0.56 -0.061,-0.475 -0.081,-0.312 -0.073,-0.62 -0.117,-0.196 -0.013,-0.118 0.078,-0.283 0.219,-0.437 0.081,-0.277 -0.095,-0.39 -0.199,0.41 -0.186,0.115 -0.089,-0.306 -10e-4,-0.412 -0.023,-0.099 0.049,-0.138 0.492,0.063 -0.56,-0.253 -0.066,-0.148 -0.021,-0.111 0.12,-0.205 -0.204,-0.173 -0.082,-0.53 -0.06,-0.121 -0.023,-0.098 0.116,-0.733 0.482,-1.443 0.036,-0.327 -0.042,-0.465 -0.107,-0.37 -0.046,-0.392 -0.029,-0.101 -0.175,-0.036 -0.166,-0.145 -0.192,-0.582 0.176,-0.191 0.136,-0.105 -0.187,0.044 -0.154,-0.018 0.292,-0.269 0.261,-0.206 0.595,-0.239 0.253,-0.153 -0.374,0.138 -0.392,0.052 -0.832,-0.028 0.139,-0.544 0.145,-0.182 0.157,-0.102 -0.231,0.031 -0.268,-0.043 0.086,-0.553 0.211,-0.12 0.227,-0.023 0.282,-0.079 -0.302,-0.091 -0.313,-0.044 -0.377,0.091 -0.346,-0.067 -0.421,10e-4 0.168,0.074 0.18,0.168 -0.09,0.3 -0.085,0.187 -0.231,0.129 -0.189,0.195 -0.053,0.171 -0.107,0.12 0.185,0.085 0.19,0.061 0.11,0.139 0.13,0.201 -0.007,0.391 -0.498,0.919 -0.172,0.205 -1.247,0.554 -0.489,0.301 -1.044,0.391 -0.406,0.073 -0.45,-0.078 -0.658,-0.297 -1.004,-0.761 -0.261,-0.251 -0.803,-0.979 -0.579,-0.519 -0.439,-0.483 -0.544,-0.458 -0.513,-0.618 -0.109,-0.282 0.038,-0.287 0.191,-0.156 0.224,0.063 0.177,0.242 0.125,0.108 0.105,0.044 0.766,-0.371 0.297,0.015 0.203,-0.186 0.257,0.041 0.524,-0.29 0.22,-0.018 0.262,-0.058 0.422,-0.735 0.316,-0.468 0.205,-0.098 -0.012,-0.114 -0.057,-0.149 -0.153,0.038 -0.107,0.142 -0.079,0.172 -0.08,0.103 -0.248,-0.095 -0.167,0.016 -0.206,0.056 -0.753,0.274 -0.31,0.246 -0.21,0.049 -1.203,-0.271 -1.176,-0.622 -0.495,-0.414 -0.313,-0.529 -0.313,-0.631 0.103,-0.177 0.486,-0.38 0.42,-0.299 -0.377,0.133 -0.408,0.185 -0.202,0.129 -0.229,0.271 -0.304,0.061 -0.12,-0.402 -0.076,-0.392 0.194,-0.132 0.136,-0.083 0.276,-0.07 0.302,-0.05 0.274,0.002 0.387,0.006 0.011,-0.92 0.032,-0.081 0.055,-0.047 0.063,-0.02 0.053,0.014 0.079,0.138 0.099,-0.008 0.105,-0.08 0.234,0.06 0.188,-0.041 0.19,0.054 0.324,10e-4 0.585,-0.022 0.325,0.007 0.21,0.146 0.23,0.161 0.249,0.023 0.361,-0.019 0.245,-0.062 0.124,-0.15 0.093,-0.144 0.535,-0.21 0.562,-0.171 0.162,-0.019 0.051,0.1 -0.025,0.167 0.065,0.159 0.226,0.101 0.159,0.025 0.143,-0.023 0.106,-0.051 0.228,-0.25 0.118,-0.057 0.153,0.004 0.172,-0.12 0.003,-0.092 -0.109,-0.044 -0.093,-0.132 0.018,-0.107 -0.027,-0.152 0.019,-0.144 0.073,-0.108 0.128,-0.104 -0.076,-0.215 -0.196,-0.412 -0.205,-0.528 -0.217,-0.44 -0.275,-0.386 -0.142,-0.284 0.015,-0.627 -0.024,-0.127 -0.095,-0.078 -0.127,-0.043 -0.179,0.064 -0.161,0.012 -0.346,-0.014 -0.17,-0.064 -0.462,-0.631 -0.061,-0.248 -0.002,-0.255 0.153,-0.444 0.047,-0.414 0.021,-0.386 -0.025,-0.109 -0.093,-0.13 -0.155,-0.096 -0.415,-0.023 -0.493,-0.128 -0.379,-0.225 -0.264,-0.136 -0.071,-0.089 -0.032,-0.104 0.069,-0.469 0.119,-0.529 0.087,-0.162 0.15,-0.168 0.111,-0.114 0.178,-0.151 0.481,-0.506 0.431,-0.697 0.267,-0.487 0.139,-0.145 0.142,-0.124 0.207,-0.15 0.24,-0.137 0.238,0.006 0.226,0.125 0.168,0.146 0.057,0.323 0.119,0.209 0.128,0.126 0.17,0.061 0.217,-0.015 0.869,-0.37 0.296,-0.075 0.71,-0.046 0.487,-0.143 0.431,-0.15 0.053,-0.269 0.166,-0.411 0.506,-0.536 0.143,-0.239 0.153,-0.458 0.163,-0.418 0.141,-0.174 0.796,-0.46 0.779,-0.423 0.128,-0.192 0.504,-0.88 0.288,-0.599 0.075,-0.193 0.167,-0.521 0.181,-0.52 0.24,-0.121 0.535,-0.198 0.424,-0.194 0.218,-0.222 0.131,-0.194 -0.024,-0.192 -0.117,-0.228 0.024,-0.136 0.021,-0.134 0.309,-0.273 0.579,-0.809 0.348,-0.405 0.115,0 0.363,-0.216 0.345,-0.244 -0.02,-0.111 -0.043,-0.144 -0.198,-0.064 -0.063,-0.173 0.049,-0.248 0.166,-0.667 -0.034,-0.192 -0.202,-0.62 0.045,-0.171 0.083,-0.176 0.226,-0.234 0.291,-0.195 0.932,-0.462 0.189,-0.051 0.323,-0.117 0.198,-0.247 0.024,-0.211 -0.087,-0.131 -0.193,-0.176 -0.363,-0.159 -0.328,-0.139 -0.557,0.015 -0.289,-0.119 -0.079,-0.083 -0.04,-0.294 0.056,-0.498 -0.087,-0.044 -0.124,0.059 -0.294,-0.059 -0.361,0.007 -0.138,-0.139 0.068,-0.167 -0.021,-0.223 -0.054,-0.212 -0.056,-0.044 -0.173,-0.051 -0.269,-0.184 -0.217,-0.227 -0.127,-0.154 -0.039,-0.106 0.012,-0.07 0.158,-0.197 0.188,-0.277 0.069,-0.238 0.021,-0.173 -0.053,-0.127 -0.173,-0.156 -0.185,-0.137 -0.074,-0.119 -0.003,-0.18 0.069,-0.225 0.217,-0.17 0.385,-0.161 0.1,-0.2 -0.013,-0.148 -0.105,-0.044 -0.271,-10e-4 -0.456,-0.051 -0.077,-0.082 -0.052,-0.11 -10e-4,-0.109 0.097,-0.124 0.116,-0.157 -0.021,-0.153 -0.134,-0.173 -0.321,-0.126 -0.044,-0.179 0.05,-0.149 0.106,-0.213 0.093,-0.148 0.219,-0.422 0.266,-0.092 0.326,-0.137 0.36,-0.151 0.555,0.113 0.27,0.056 0.546,0.129 0.458,0.108 0.468,0.031 0.194,-0.008 0.214,0.128 0.529,0.219 0.43,0.115 0.291,-10e-4 0.429,-0.194 0.214,-0.178 0.288,-0.195 0.369,0.008 0.798,-0.301 0.149,0.052 0.237,0.017 0.286,-0.174 0.147,-0.206 0.023,-0.104 0.071,-0.076 0.306,-0.131 0.307,-0.182 0.083,-0.24 0.051,-0.163 0.336,-0.21 0.35,-0.219 0.366,-0.229 0.416,-0.261 0.352,-0.221 0.288,-0.181 0.032,0.039 0.113,0.082 0.122,0.04 0.143,-0.077 0.179,-0.064 0.094,0.036 0.013,0.104 -0.107,0.488 0.009,0.191 0.179,0.397 0.232,0.643 0.218,0.602 0.128,0.394 0.127,0.161 0.529,0.165 0.436,0.135 0.259,0.221 0.286,0.212 0.2,0.13 0.095,0.167 0.02,0.15 -0.018,0.101 -0.109,0.133 -0.502,0.342 -0.06,0.108 -0.015,0.142 0.099,0.423 0.062,0.265 0.018,0.532 0.033,0.505 0.178,0.23 0.146,0.148 0.089,0.134 0.18,0.185 0.151,0.137 0.129,0.081 0.063,0.181 -0.037,0.213 -0.054,0.185 0.017,0.1 0.104,0.071 0.159,0.185 0.021,0.27 -0.011,0.186 0.063,0.167 0.017,0.185 -0.049,0.461 0.008,0.208 -0.139,0.013 -0.119,0.071 -0.169,0.29 -0.195,0.076 -0.221,0.023 -0.228,-0.178 -0.187,-0.186 -0.051,-0.103 -0.047,-0.196 -0.101,-0.128 -0.194,0.06 -0.295,0.027 -0.319,0.043 -0.059,0.043 -0.006,0.083 0.078,0.176 0.066,0.229 0.04,0.32 0.086,0.212 0.027,0.067 0.511,0.636 0.134,0.129 0.028,0.085 -0.053,0.235 z",
                        title: "India",
                        id: "IN",
                    },
                    {
                        d: "m 678.34275,483.5454 -0.065,0.112 -0.111,0.051 -0.061,-0.283 -0.162,-0.2 0.065,0 0.153,0.102 0.055,0.27 0.057,-0.079 -0.015,-0.084 0.033,-0.079 -0.023,-0.088 -0.084,-0.135 0.029,-0.028 0.134,0.116 0.014,0.093 z",
                        title: "British Indian Ocean Territory",
                        id: "IO",
                    },
                    {
                        d:
                            "m 600.52875,351.1564 0,0.026 0.093,0.249 0.231,0.925 0.132,0.117 0.15,0.098 0.106,0.137 0.042,0.138 -0.013,0.214 0.005,0.248 0.062,0.19 0.086,0.144 0.08,0.072 0.12,0.007 0.144,0.035 0.097,0.143 0.309,1.043 0.029,0.136 0.13,0.044 0.213,-0.02 0.219,0.108 0.234,0.168 0.22,0.317 0.148,0.051 0.464,-0.047 0.634,0.051 0.297,0.163 -0.03,0.101 -0.229,0.112 -0.403,0.132 -0.119,0.223 -0.067,0.289 0.012,0.162 0.099,0.178 0.284,0.354 0.016,0.128 0.051,0.178 0.053,0.122 -0.059,0.235 -0.258,0.163 -0.339,0.176 -0.681,0.784 -0.051,0.169 0.004,0.462 -0.068,0.132 -0.215,-0.002 -0.168,-0.024 -0.009,0.161 -0.107,0.216 -0.061,0.187 0.25,0.441 0.045,0.234 -0.04,0.213 -0.232,0.366 -0.137,0.246 0.033,0.055 0.181,0.098 0.562,0.803 0.181,0.282 0.238,-0.074 0.089,0.005 0.069,0.045 0.043,0.095 0,0.12 -0.06,0.18 0.303,0.073 0.109,0.182 0.353,0.622 -0.013,0.185 -0.169,0.293 -0.002,0.194 0.036,0.174 0.055,0.061 0.521,0.025 0.221,0.07 0.541,0.316 0.616,0.485 0.503,0.397 0.429,0.337 0.46,-0.024 0.125,0.061 0.116,0.105 0.132,0.277 0.263,0.625 0.224,0.207 0.345,0.499 0.324,0.467 -0.213,0.634 -0.209,0.658 0,0.846 0,0.454 0.44,0.019 0.489,0.022 0.004,0.541 0.004,0.543 0.004,0.618 0.144,0.026 0.228,0.133 0.098,0.2 0.122,0.109 0.149,0.018 0.146,0.098 0.145,0.179 0.053,0.134 -0.039,0.093 0.031,0.162 0.101,0.232 0.123,0.109 0.191,0.134 -0.259,0.077 -0.28,-0.059 -0.597,-0.271 -0.194,-0.008 -0.253,0.103 -0.011,0.092 -0.631,-0.303 -0.227,-0.061 -0.082,-0.006 -0.362,0.003 -0.515,0.055 -0.303,0.123 -0.21,0.13 -0.096,0.128 -0.034,0.069 -0.164,0.377 -0.19,0.483 -0.197,0.434 -0.383,0.61 -0.212,0.281 -0.455,0.522 -0.492,0.105 -1.141,-0.103 -1.265,-0.115 -1.259,-0.113 -0.937,-0.085 -0.072,-0.028 -0.927,-0.746 -0.732,-0.591 -0.915,-0.739 -0.934,-0.757 -0.948,-0.769 -0.689,-0.56 -0.836,-0.722 -0.761,-0.659 -0.601,-0.522 -0.771,-0.456 -0.602,-0.358 -0.878,-0.521 -0.701,-0.417 -0.601,-0.358 -0.925,-0.552 -0.307,-0.15 -0.959,-0.185 -0.909,-0.156 -0.941,-0.162 -0.626,-0.108 0.413,-0.394 -0.127,-0.354 -0.301,0.065 -0.277,0.084 -0.168,-0.551 0.214,-0.069 -0.198,-0.721 -0.203,-0.744 -0.196,-0.721 -0.201,-0.739 0.795,-0.475 0.594,-0.355 0.831,-0.498 0.801,-0.481 0.763,-0.459 0.841,-0.507 0.752,-0.454 0.689,-0.185 0.146,-0.143 0.314,-0.622 0.269,-0.532 0.013,-0.123 10e-4,-0.757 0.047,-0.891 0.089,-0.477 0.155,-0.423 0.142,-0.309 0.015,-0.289 -0.019,-0.294 -0.147,-0.445 -0.153,-0.465 0.017,-0.448 0.028,-0.24 0.096,-0.385 0.164,-0.282 0.176,-0.174 0.654,-0.18 0.389,-0.107 0.52,-0.5 0.309,-0.298 0.43,-0.472 0.317,-0.348 0.025,-0.121 0,-0.047 0.272,-0.071 0.503,-0.423 0.297,-0.395 0.094,-0.035 0.265,0.129 0.19,0.036 0.437,-0.15 0.26,0.079 0.219,0.1 0.122,0.007 0.587,0.246 0.147,0.03 0.302,0.03 0.451,0.014 0.291,-0.161 0.205,-0.155 0.144,0.004 0.14,0.037 0.118,0.066 0.099,0.116 0.047,0.166 -0.019,0.529 0.044,0.139 0.08,0.1 0.101,0.019 0.123,-0.115 0.214,-0.167 0.264,-0.182 0.196,-0.167 0.113,-0.063 0.177,0.009 0.173,0.029 z",
                        title: "Iraq",
                        id: "IQ",
                    },
                    {
                        d:
                            "m 600.67475,342.2104 0.059,0.078 0.455,0.745 0.2,0.219 0.117,0.186 0.079,0.207 0.139,0.14 0.184,0.076 0.223,0.2 0.151,0.156 0.253,0.323 0.268,0.12 0.973,0.233 0.541,0.108 0.156,0.031 0.414,-0.156 0.485,0.021 0.18,0.008 0.641,-0.658 0.195,-0.22 0.382,-0.114 0.215,-0.263 0.345,-0.318 0.421,-0.3 0.387,-0.27 0.296,-0.163 0.536,-0.382 0.335,-0.132 0.291,0.004 0.436,0.448 0.367,0.407 0.113,0.178 -0.182,0.16 -0.34,0.154 -0.065,0.113 -0.023,0.145 0.013,0.138 0.046,0.113 0.417,0.261 0.047,0.144 0.003,0.146 -0.047,0.091 -0.093,0.053 -0.29,0.073 -0.249,0.085 -0.086,0.083 -0.075,0.099 0.011,0.11 0.075,0.125 0.509,0.34 0.058,0.125 0.101,0.168 0.125,0.103 0.212,0.028 0.102,0.069 0.492,0.626 0.12,0.044 0.575,-0.138 0.08,0.006 0.005,0.153 0.086,0.886 0.066,0.457 0.099,0.443 0.155,0.404 0.184,0.383 0.254,0.236 0.564,0.284 0.274,0.082 0.721,0.057 0.712,0.125 0.42,0.133 0.129,0.094 0.106,0.144 0.348,0.668 0.548,0.475 1.106,0.711 0.536,0.236 1.806,0.446 1.202,-0.025 3.322,-0.861 1.104,-0.215 0.415,0 -0.247,0.171 -0.415,0.098 0.25,0.121 0.387,0.02 0.179,-0.02 0.13,-0.109 0.021,-0.181 -0.019,-0.179 -0.183,-0.803 -0.106,-0.568 0.779,0.039 0.303,-0.074 0.446,-0.19 0.338,-0.115 0.17,-0.016 0.168,-0.089 0.129,-0.112 0.29,-0.779 0.145,-0.196 0.492,-0.44 0.418,-0.279 0.438,-0.248 0.555,-0.173 0.737,0.018 0.587,0.061 0.34,-0.003 0.161,0.018 0.121,-0.025 0.07,-0.051 0.076,-0.342 0.12,-0.112 0.207,-0.096 0.29,0 0.354,-0.025 0.294,0.023 0.37,0.131 0.483,0.011 0.322,-0.023 0.187,0.131 0.135,0.175 0.065,0.146 0.015,0.2 -0.003,0.152 0.051,0.059 0.196,0.091 0.273,0.068 0.531,0.082 0.499,0.158 0.259,0.107 0.36,0.167 0.429,0.415 0.159,0.065 0.192,0.042 0.137,-0.011 0.322,-0.175 0.28,0.129 0.142,-0.017 0.322,-0.096 0.342,0.12 0.852,0.454 0.094,-0.01 0.077,0.046 0.071,0.104 0.05,0.128 0.063,0.39 0.246,0.285 0.301,0.259 0.351,0.142 0.733,0.339 0.32,0.275 0.324,0.466 0.4,0.613 0.058,0.056 1.028,-0.019 1.156,10e-4 0.141,0.245 -0.026,0.485 0.041,0.497 0.104,0.343 0.001,0.316 -0.083,0.16 -0.065,0.183 -0.019,0.08 0.148,0.114 0.13,0.262 0.019,0.365 -0.064,0.193 0.009,0.16 0.065,0.136 0.056,0.227 -0.01,0.137 -0.093,0.136 -0.056,0.17 -0.074,0.215 -0.027,0.17 -0.14,0.079 -0.111,0.057 0.019,0.215 0.056,0.181 0.065,0.214 -0.074,0.147 -0.047,0.169 -0.103,0.271 0.028,0.225 -0.111,0.191 -0.14,0.169 -0.093,0.135 -0.019,0.191 -0.102,0.067 -0.195,0.157 -0.12,0.112 -0.177,0.034 -0.037,0.09 0.028,0.089 0.074,0.056 0.115,0.194 0.24,0.334 -0.692,0.042 -0.203,0.295 -0.237,0.422 0.116,0.852 -0.116,0.437 0.07,0.245 0.177,0.169 0.227,0.094 0.426,0.006 0.282,0.066 0.028,0.113 -0.162,0.165 -0.259,0.309 -0.138,0.135 -0.441,0.62 0.004,0.264 0.041,0.213 0.19,0.667 0.186,0.645 0.333,1.16 -0.006,0.269 -0.104,0.596 -0.007,0.362 0.047,0.469 -0.035,0.242 0.082,0.542 0.093,0.039 0.721,0.105 0.661,0.097 0.881,0.128 0.267,0.317 0.166,0.695 -0.01,0.519 -0.075,0.265 -0.63,0.755 -0.64,0.764 -0.639,0.761 -0.662,0.787 -0.069,0.083 0.535,0.628 0.331,0.388 0.467,0.545 0.059,0.131 -0.004,0.214 0.479,0.828 0.169,0.431 0.152,0.253 0.379,0.395 0.37,0.385 0.401,0.176 0.274,0.039 0.624,0.203 0.228,0.162 0.366,0.408 0.43,-0.056 0.089,0 0.024,0.029 0.013,0.131 -0.063,0.633 0.119,0.637 0.083,0.957 -0.031,0.165 -0.103,0.276 -0.005,0.177 -0.027,0.109 0.028,0.048 0.137,0.065 0.292,0.035 0.705,-0.107 0.082,0.027 0.169,0.113 0.127,0.177 0.011,0.084 -0.178,0.147 -0.029,0.249 0.053,0.373 -0.024,0.045 -0.156,0.084 -0.051,0.538 -0.028,0.049 -0.182,0.055 -0.86,-0.037 -0.098,0.015 -0.323,0.142 -0.554,0.102 -0.152,0.058 -0.204,0.162 -0.147,0.197 -0.028,0.182 -0.029,0.038 -0.317,-0.037 -0.104,0.158 -0.615,0.236 -0.076,0.051 -0.091,0.188 -0.082,0.527 -0.074,0.473 -0.047,0.069 -0.194,0.162 -0.019,0.055 0.026,0.183 -0.088,0.333 -0.069,0.923 -0.077,0.258 -0.153,0.021 -0.12,0.129 -0.22,0.159 -0.475,-0.123 -0.377,-0.129 -1.248,-0.303 -0.137,-0.147 -0.078,-0.259 -0.216,-0.073 -0.31,0.388 -1.054,-0.224 -0.358,0.069 -0.221,-0.121 -0.568,-0.007 -0.448,-0.242 -0.643,0.166 -0.508,0.032 -0.697,-0.424 -0.749,-0.117 -0.608,0.036 -0.313,-0.033 -0.507,-0.152 -0.24,-0.157 -0.395,0.12 -0.178,-0.223 -1.117,-0.207 -0.207,-0.395 -0.155,-0.367 -0.012,-0.378 -0.272,-0.662 -0.091,-0.963 -0.101,-0.377 -0.151,-0.328 -0.201,-0.279 -0.273,-0.299 -0.238,-0.119 -1.044,-0.228 -0.201,0.03 -0.467,0.149 -0.497,0.331 -0.816,0.188 -0.164,0.142 -0.205,0.32 -0.266,0.186 -0.364,-0.048 -0.392,0.189 -0.727,0.527 -0.383,0.161 -0.321,-0.012 -0.345,-0.25 -0.771,-0.336 -0.499,-0.112 -0.692,0.077 -0.328,-0.056 -0.557,-0.395 -0.146,-0.287 -0.318,-0.192 -1.008,-0.431 -0.816,-0.57 -0.15,-0.216 -0.1,-0.319 -0.355,-0.388 -0.797,-0.317 -0.452,-0.338 -0.53,-0.076 -0.493,0.011 -0.217,-0.061 -0.197,-0.145 -0.673,-0.7 -0.008,-0.277 -0.415,-0.686 -0.097,-0.245 -0.089,-0.681 -0.115,-0.178 -0.433,-0.281 -0.067,-0.184 0.092,-0.245 0,-0.186 -0.225,-0.175 -0.338,-0.093 -0.082,-0.21 0.062,-0.409 -0.051,-0.257 -0.298,-0.411 -0.44,-0.421 -0.439,-0.624 -0.172,-0.156 -0.112,-0.409 -0.161,-0.486 -0.248,-0.035 -1.202,0.583 -0.351,-0.328 -1.054,-0.57 -0.073,-0.086 -0.074,-0.131 0.133,-0.076 0.132,-0.031 0.265,0.102 0.159,-0.12 -0.063,-0.194 -0.265,-0.12 -0.36,0.009 0.099,0.182 -0.337,0.172 -0.072,0.225 0.049,0.279 0.029,0.39 -0.137,0.188 -0.106,0.087 -0.453,0.023 -0.212,0.172 -0.137,0.041 -0.191,-0.134 -0.123,-0.109 -0.101,-0.232 -0.031,-0.162 0.039,-0.092 -0.053,-0.135 -0.145,-0.179 -0.146,-0.098 -0.148,-0.018 -0.123,-0.109 -0.098,-0.2 -0.229,-0.132 -0.144,-0.026 -0.004,-0.619 -0.004,-0.543 -0.004,-0.541 -0.489,-0.022 -0.44,-0.019 0,-0.454 0,-0.847 0.209,-0.658 0.213,-0.634 -0.324,-0.467 -0.345,-0.499 -0.224,-0.208 -0.263,-0.625 -0.131,-0.277 -0.116,-0.105 -0.125,-0.061 -0.459,0.024 -0.429,-0.337 -0.503,-0.396 -0.615,-0.485 -0.542,-0.317 -0.221,-0.07 -0.521,-0.024 -0.055,-0.061 -0.036,-0.174 10e-4,-0.194 0.169,-0.293 0.013,-0.185 -0.353,-0.622 -0.109,-0.182 -0.302,-0.073 0.06,-0.18 0,-0.12 -0.043,-0.095 -0.07,-0.045 -0.089,-0.005 -0.237,0.074 -0.181,-0.282 -0.563,-0.803 -0.181,-0.098 -0.033,-0.055 0.137,-0.247 0.232,-0.366 0.04,-0.212 -0.044,-0.234 -0.25,-0.441 0.061,-0.187 0.107,-0.215 0.009,-0.162 0.168,0.024 0.215,0.002 0.068,-0.132 -0.004,-0.462 0.051,-0.169 0.682,-0.784 0.339,-0.176 0.258,-0.162 0.059,-0.236 -0.053,-0.122 -0.051,-0.178 -0.016,-0.128 -0.284,-0.354 -0.099,-0.178 -0.012,-0.163 0.067,-0.288 0.119,-0.224 0.403,-0.132 0.229,-0.112 0.031,-0.101 -0.297,-0.163 -0.634,-0.051 -0.464,0.047 -0.148,-0.051 -0.22,-0.316 -0.234,-0.168 -0.219,-0.108 -0.213,0.02 -0.129,-0.043 -0.03,-0.136 -0.308,-1.043 -0.097,-0.143 -0.144,-0.035 -0.121,-0.007 -0.08,-0.072 -0.086,-0.144 -0.062,-0.189 -0.004,-0.249 0.013,-0.214 -0.042,-0.138 -0.106,-0.137 -0.15,-0.099 -0.132,-0.116 -0.231,-0.925 -0.093,-0.249 0,-0.026 0.004,-0.049 -0.023,-0.213 0.107,-0.185 -0.007,-0.073 -0.222,-0.234 -0.312,-0.234 -0.084,-0.041 -0.002,-0.25 0.011,-0.189 -0.028,-0.171 -0.06,-0.098 -0.002,-0.077 0.125,-0.184 -0.081,-0.121 -0.459,-0.299 -0.172,-0.15 -0.318,-0.03 -0.033,-0.099 0.05,-0.209 0.109,-0.254 0.172,-0.25 0.055,-0.132 0.067,-0.225 0.023,-0.16 0.193,-0.225 10e-4,-0.059 -0.054,-0.081 -0.154,-0.045 -0.158,-0.019 -0.059,-0.041 -0.021,-0.121 0.02,-0.492 -0.05,-0.296 -0.065,-0.215 0.041,-0.485 -0.11,-0.098 -0.173,-0.255 -0.074,-0.216 0.04,-0.081 0.037,-0.142 0.024,-0.187 -0.007,-0.132 -0.159,-0.129 -0.118,-0.136 -0.014,-0.15 -0.047,-0.184 -0.067,-0.146 -0.03,-0.095 0.058,-0.056 0.225,-0.044 0.327,0.031 0.267,0.002 0.151,-0.094 0.187,-0.887 0.171,-0.234 0.198,-0.136 0.387,0.316 0.16,0.111 0.086,0.01 z m 31.912,42.701 -0.262,0.375 -0.395,0.313 -0.168,-0.097 -0.131,0.004 -0.282,0.12 -0.203,0.021 -0.369,0.213 -0.336,0.107 -0.233,-0.008 -0.081,-0.022 -0.046,-0.145 0.004,-0.058 0.142,0.03 0.519,-0.194 0.647,-0.318 0.062,-0.142 -0.104,-0.231 0.028,-0.052 0.42,0.118 0.469,-0.23 0.392,-0.063 0.184,0.16 -0.257,0.099 z",
                        title: "Iran",
                        id: "IR",
                    },
                    {
                        d:
                            "m 431.27375,213.3184 0.322,0.026 0.526,-0.239 0.22,-0.157 0.541,-0.545 0.319,-0.152 0.493,0.038 0.237,-0.038 0.006,0.053 -0.303,0.221 -0.242,0.076 -0.348,0.329 -0.331,0.74 -0.245,0.362 0.002,0.161 0.298,0.285 0.327,0.161 0.3,-0.146 0.131,0.057 0.118,0.211 0.067,0.209 0.015,0.207 -0.054,0.432 -0.18,0.433 -0.244,0.362 0.034,0.114 0.196,0.058 0.929,-0.234 0.097,0.017 0.053,0.117 0.011,0.216 0.051,0.195 0.092,0.175 -0.029,0.178 -0.407,0.563 0.481,-0.354 0.379,-0.1 0.65,0.178 0.266,0.204 0.155,0.359 0.225,-0.119 0.098,0.007 0.147,0.204 0.005,0.218 -0.108,0.309 -0.037,0.286 -0.113,0.117 -0.211,0.085 -0.06,0.095 0.093,0.217 0.137,0.212 0.194,0.009 0.035,0.098 0.004,0.117 -0.026,0.138 -0.063,0.094 -0.101,0.052 -0.133,0.151 0.488,0.33 0.062,0.123 0.007,0.179 -0.038,0.197 -0.083,0.214 -0.147,0.126 -0.352,0.021 -0.216,0.139 0.074,0.23 -0.006,0.291 -0.065,0.343 -0.277,0.517 -0.26,0.275 -0.255,0.178 -0.454,-0.063 -0.247,-0.137 0.027,0.445 -0.252,0.273 0.047,0.228 0.088,0.116 -0.043,0.292 -0.12,0.289 -0.201,0.312 -0.228,0.195 -0.453,0.235 -0.387,0.389 -0.264,0.154 -0.658,-0.007 -0.671,0.25 -0.948,0.526 -0.639,0.42 -0.493,0.475 -0.651,0.772 -0.483,0.324 -0.279,0.087 -0.543,0.069 -0.455,0.209 -1.511,0.39 -0.511,0.213 -0.066,0.193 -0.212,0.291 -0.013,0.105 0.092,0.081 0.018,0.105 -0.187,0.343 -0.374,0.247 -0.176,-0.004 -0.214,-0.213 -0.093,0.008 -0.037,0.033 -0.002,0.066 0.123,0.256 -0.226,0.118 -0.984,0.298 -1.675,-0.22 -0.663,-0.229 -0.819,-0.366 -0.487,-0.097 -0.691,-0.024 -0.568,-0.512 -0.263,-0.317 -0.021,-0.132 0.03,-0.151 0.059,-0.103 0.088,-0.055 0.187,-0.006 0.025,-0.045 -0.143,-0.255 -0.137,0.083 -0.365,0.36 -0.163,-0.013 -0.214,-0.18 -0.008,-0.175 -0.417,-0.067 -0.363,-0.219 -0.361,-0.315 -0.054,-0.12 0.174,-0.177 -0.034,-0.034 -0.131,-0.03 -0.263,0.058 -0.397,0.399 -0.171,0.092 -2.593,0.093 -0.658,0.041 -0.127,0.061 -0.114,-0.259 -0.102,-0.58 -0.038,-0.383 0.026,-0.186 0.091,-0.223 0.141,0.038 0.134,0.177 0.122,0.251 0.139,0.122 0.905,-0.306 0.368,-0.206 0.156,-0.195 0.184,-0.334 0.195,-0.171 0.093,-0.161 0.183,-0.513 0.126,-0.238 0.152,-0.177 0.176,-0.114 0.4,-0.081 -0.263,-0.121 -0.252,0 -0.854,0.543 -0.287,0 0.012,-0.085 0.121,-0.153 0.294,-0.265 -0.202,-0.02 -0.077,-0.12 -0.009,-0.253 0.15,-0.409 0.696,-0.54 0.241,-0.08 0.073,-0.107 -0.091,-0.087 -0.146,-0.053 -0.7,0.557 -0.51,0.192 -0.151,-0.037 -0.264,-0.215 -0.085,-0.097 -0.114,-0.247 0.014,-0.149 0.242,-0.438 -0.039,-0.085 -0.167,-0.043 -0.449,-0.404 -0.71,0.041 -1.759,-0.235 -0.364,0.1 -0.599,0.347 -0.362,0.114 -0.167,-0.075 -0.152,-0.184 -0.138,-0.247 -0.124,-0.313 0.053,-0.217 0.232,-0.124 0.17,-0.059 0.479,0.075 0.584,-0.219 0.372,-0.046 0.107,-0.035 0.219,-0.233 0.108,-0.059 0.168,0.082 0.082,0.158 0.587,-0.246 0.202,-0.123 0.023,-0.077 0.088,-0.088 0.292,0.133 0.237,0.004 0.295,-0.092 0.522,-0.04 1.169,-0.021 0.175,-0.201 0.082,-0.178 0.103,-0.453 -0.046,-0.093 -0.729,0.417 -0.167,-0.007 -0.845,-0.221 -0.305,-0.25 0.1,-0.201 0.448,-0.434 0.462,-0.348 0.68,-0.378 0.159,-0.147 0.017,-0.175 -0.454,-0.311 -0.857,0.086 -0.22,-0.369 -0.713,-0.219 -0.474,0.137 -0.252,-0.224 -0.616,0.31 -1.354,0.447 -0.539,0.309 -0.29,0.103 -0.334,-0.252 -0.576,-0.285 -0.648,-0.089 -0.058,-0.168 0.378,-0.515 0.259,-0.094 0.26,0.048 0.497,0.359 0.343,0.113 -0.43,-0.528 0.011,-0.203 -0.033,-0.305 -0.132,-0.131 -0.132,-0.338 0.054,-0.114 0.169,-0.041 0.346,0.115 0.823,0.586 0.404,-0.104 0.221,-0.216 0.303,-0.16 -0.086,-0.083 -0.711,-0.01 -0.381,-0.12 -0.192,-0.172 -0.167,-0.293 0.059,-0.135 0.198,-0.108 0.607,0.032 -0.4,-0.511 -0.278,-0.294 -0.03,-0.142 0.019,-0.178 0.037,-0.12 0.057,-0.06 0.696,0.3 0.153,0.012 -0.141,-0.193 -0.306,-0.285 -0.013,-0.107 0.129,-0.087 0.063,-0.163 0.006,-0.134 0.211,-0.116 0.214,-0.005 0.215,0.106 0.666,0.556 0.095,0.156 0.032,0.205 -0.033,0.255 0.028,0.102 0.26,-0.087 0.208,0.107 0.103,-0.029 0.259,-0.383 0.178,0.091 0.107,0.179 0.034,0.162 0.016,0.222 -0.046,0.462 0.012,0.065 0.181,-0.261 0.308,-0.02 0.04,-0.131 0.009,-0.486 -0.025,-0.412 -0.034,-0.084 -1.014,-0.572 -0.176,-0.136 -0.221,-0.282 0.045,-0.142 0.198,-0.127 0.297,-0.051 0.691,0.007 0.07,-0.06 -0.134,-0.149 -0.319,-0.096 -0.075,-0.087 -0.038,-0.166 -0.379,0.091 -0.423,0.004 -0.407,-0.102 -0.008,-0.129 0.16,-0.19 0.333,-0.315 0.154,-0.079 0.465,0.055 0.461,-0.089 0.374,0.108 0.297,0.312 0.421,0.548 0.57,0.349 0.053,0.11 0.303,0.285 0.604,0.766 0.613,0.443 0.028,0.113 -0.101,0.132 -0.236,0.155 0.054,0.085 0.308,0.113 0.222,0.298 0.015,0.13 -0.201,0.92 -0.107,0.195 -0.122,0.103 -0.566,-0.173 0.134,0.292 0.405,0.31 0.091,0.173 -0.06,0.17 0.044,0.039 0.148,-0.091 0.062,0.096 -0.026,0.283 -0.063,0.235 -0.101,0.186 0.03,0.081 0.158,-0.025 0.148,0.048 0.232,0.257 0.188,0.783 0.093,0.252 0.068,-0.224 0.084,-0.571 0.079,-0.292 0.075,-0.013 0.064,-0.096 0.054,-0.18 0.11,-0.636 0.38,-0.483 0.181,-0.149 0.171,-0.032 0.082,0.06 0.285,0.507 0.173,0.085 0.088,-0.027 0.122,-0.345 0.154,-0.662 0.035,-0.742 -0.083,-0.823 0.048,-0.59 0.181,-0.353 0.237,-0.109 0.295,0.136 0.215,0.216 0.424,0.82 0.343,0.429 0.294,0.458 0.152,0.149 0.292,0.075 0.078,-0.03 0.052,-0.105 0.027,-0.182 -0.063,-1.171 0.082,-0.365 0.124,-0.261 0.526,-0.153 0.287,-0.164 0.279,-0.269 0.231,-0.145 0.184,-0.019 0.191,0.105 0.201,0.229 0.312,0.446 0.393,0.737 0.5,0.548 0.261,0.868 0.056,0.146 0.062,0.017 0.066,-0.113 0.042,-0.159 0.012,-0.386 -0.14,-0.512 -0.467,-1.297 -0.008,-0.247 0.059,-0.198 0.329,-0.022 0.766,0.12 0.244,0.202 0.521,0.794 0.146,0.192 0.089,0.048 0.033,-0.096 0.202,-0.147 0.139,-0.178 0.233,-0.438 0.509,-0.79 0.106,-0.023 0.148,0.062 0.261,0.207 0.124,0.166 0.245,0.126 0.251,-0.044 0.347,-0.277 0.393,-0.17 0.134,-0.393 0.025,-0.18 -0.316,-1.177 0.133,-0.242 0.685,-0.293 0.599,-0.023 0.142,0.081 0.377,0.575 0.256,0.288 0.129,0.231 0.031,0.509 0.155,0.187 z",
                        title: "Iceland",
                        id: "IS",
                    },
                    {
                        d:
                            "m 513.34375,315.8624 -0.057,0.233 -0.119,0.058 -0.208,0.136 -0.238,0.186 -0.222,0.209 -0.06,0.227 0.061,0.148 0.06,0.051 0.081,-0.045 0.118,0.028 0.148,0.081 0.247,0.079 0.007,0.078 -0.052,0.1 -0.192,0.177 -0.173,0.2 -0.017,0.122 0.021,0.089 0.06,0.054 0.256,-0.024 0.038,0.073 -0.125,0.513 0.039,0.087 0.225,0.082 0.164,0.123 0.307,0.324 0.122,0.262 -0.084,0.088 -0.193,0.043 -0.157,-0.022 0.178,-0.158 -0.435,-0.576 -0.197,0.001 -0.261,0.244 -0.726,-0.247 -0.139,0.1 -0.103,0.195 -0.252,0.242 -0.357,0.106 -0.398,0.266 -0.419,0.188 -0.32,0.142 -0.184,-0.025 0.292,-0.307 -0.124,-0.006 -0.388,0.217 -0.223,0.183 -0.072,0.308 -0.065,0.506 0.17,0.134 0.298,0.666 0.367,0.284 -0.071,0.271 -0.097,0.214 -0.222,0.185 -0.184,-0.137 -0.113,0.003 -0.085,0.433 0.159,1.151 0.256,0.804 0.254,0.35 0.573,0.543 0.606,0.286 1.09,0.911 0.598,0.288 0.157,0.156 0.362,0.699 0.313,0.805 0.337,1.258 0.24,0.617 0.484,0.696 1.004,0.992 0.913,0.723 0.85,0.446 0.663,0.078 1.569,-0.098 0.273,0.042 0.29,0.12 0.069,0.309 -0.106,0.208 -0.33,0.216 -0.336,0.299 -0.037,0.407 0.314,0.286 1.514,0.757 1.548,0.631 0.482,0.321 0.559,0.499 1.349,0.684 0.228,0.332 0.82,0.713 0.371,0.549 0.071,0.425 -0.177,0.431 -0.082,0.303 -0.139,0.299 -0.349,-0.113 -0.397,-0.308 -0.598,-1.254 -1.091,-0.127 -0.226,-0.093 -0.388,-0.216 -0.023,-0.143 -0.096,-0.178 -0.099,-0.06 -0.417,-0.04 -0.289,0.204 -0.34,0.483 -0.386,0.693 -0.392,1.013 -0.022,0.408 0.213,0.395 0.636,0.22 0.491,0.351 0.324,0.366 0.023,0.881 0.145,0.499 -0.213,0.283 -0.413,-0.073 -0.55,0.18 -0.39,0.322 -0.162,0.306 0.042,0.792 -0.08,0.301 -0.739,0.568 -0.388,0.58 -0.097,0.24 -0.148,0.272 -0.933,0.01 -0.221,-0.337 -0.008,-0.501 0.16,-0.309 0.343,-0.145 0.231,-0.644 -0.073,-0.466 0.135,-0.207 0.127,-0.146 0.261,-0.086 0.369,-0.082 0.037,-0.653 -0.288,-0.297 -0.101,-0.417 -0.134,-0.772 -0.475,-0.989 -0.254,-0.885 -0.199,-0.438 -0.302,-0.229 -0.545,0.003 -0.271,-0.065 -0.964,-0.618 -0.067,-0.094 0.006,-0.165 0.16,-0.249 -0.108,-0.337 -0.114,-0.319 -0.189,-0.272 -0.207,-0.142 -0.434,0.087 -0.152,0.067 -0.274,-0.023 -0.215,0.121 -0.12,0.004 0.338,-0.479 -0.091,-0.113 -0.334,-0.197 -0.454,-0.03 -0.126,-0.024 -0.074,0.123 -0.088,-0.067 0.009,-0.214 -0.527,-0.962 -0.354,-0.393 -0.179,-0.07 -0.323,0.083 -0.541,-0.172 -0.323,-0.038 -0.178,0.042 -0.266,0.125 -0.134,-0.083 -0.047,-0.129 -0.491,-0.401 -0.613,-0.227 -1.193,-1.283 -0.366,-0.481 -0.753,-0.531 -0.476,-0.776 -0.39,-0.285 -0.567,-0.229 -0.131,0.029 -0.17,0.086 -0.134,0.012 -0.106,-0.101 0.108,-0.104 0.121,-0.047 -0.047,-0.298 -0.646,-0.774 -0.378,-0.25 -0.107,-0.154 -0.079,-0.211 -0.081,-0.139 -0.179,-0.08 -0.153,0.014 -0.211,-0.053 0.007,-0.374 0.042,-0.287 -0.032,-0.244 -0.206,-0.643 -0.356,-0.546 -0.21,-1.311 -0.162,-0.371 -0.394,-0.281 -0.889,-0.316 -1.239,-0.851 -0.262,-0.015 -0.745,-0.332 -0.462,-0.057 -0.6,0.298 -0.729,0.818 -0.591,0.847 -0.215,0.164 -0.763,0.288 -0.674,0.137 -0.007,-0.216 -0.024,-0.163 0.114,-0.179 0.188,-0.211 0.173,-0.266 0.072,-0.192 -0.034,-0.128 -0.078,-0.19 -0.106,-0.014 -0.642,0.16 -0.147,-0.041 -0.475,-0.249 -0.511,-0.306 -0.188,-0.218 -0.071,-0.22 0.053,-0.142 -0.042,-0.138 -0.1,-0.186 0.09,-0.211 0.159,-0.263 0.08,-0.179 0.134,-0.046 0.064,-0.109 -0.107,-0.436 -0.056,-0.07 -0.092,-0.054 -0.142,-0.006 -0.248,-0.09 -0.176,-0.151 -0.038,-0.204 -0.093,-0.196 -0.159,-0.18 -0.02,-0.197 0.181,-0.104 0.247,-0.004 0.174,0.039 0.39,-0.317 0.144,-0.028 0.129,-0.068 0.108,-0.434 0.083,-0.13 0.02,-0.076 -0.077,-0.091 -0.315,-0.306 -0.144,-0.32 -0.227,-0.359 -0.211,-0.159 -0.043,-0.124 -0.005,-0.157 0.043,-0.139 0.382,-0.216 0.226,-0.23 0.097,0.088 0.206,0.094 0.559,-0.128 0.347,-0.129 0.244,-0.136 0.151,0.024 0.548,0.203 0.181,-0.103 0.395,-0.275 0.059,-0.145 0.312,-0.44 0.006,-0.107 -0.128,-0.277 0.04,-0.061 0.382,-0.284 0.187,-0.252 0.203,-0.169 0.146,-0.004 0.04,0.058 0.017,0.118 -0.013,0.486 0.056,0.149 0.3,0.348 0.214,0.198 0.497,0.136 0.023,0.065 -0.137,0.261 0.301,0.312 0.054,0.228 0.139,0.128 0.196,-0.063 0.064,-0.121 -0.077,-0.211 -0.057,-0.221 0.011,-0.128 0.054,-0.147 0.137,-0.206 0.372,-0.472 0.134,-0.273 0.024,-0.423 0.001,-0.34 0.124,-0.083 0.267,0.061 0.08,-0.007 0.036,0.209 0.114,0.333 0.134,0.172 0.143,0.041 0.168,0.001 0.416,-0.203 0.271,-0.088 0.154,0.024 0.091,0.138 0.194,0.363 0.111,0.041 0.134,-0.042 0.047,-0.062 -0.043,-0.14 -0.057,-0.303 -0.078,-0.235 -0.102,-0.11 -0.021,-0.143 0.064,-0.258 0.073,-0.216 0.142,-0.059 0.163,-0.027 0.215,0.229 0.255,0.072 0.19,-0.012 0.033,-0.133 -0.012,-0.146 -0.113,-0.188 0.022,-0.285 0.131,-0.532 0.075,0.041 0.282,0.005 0.307,0.03 0.198,0.217 0.194,0.074 0.276,0.023 0.185,-0.03 0.09,-0.082 0.107,-0.254 0.198,-0.315 0.31,-0.162 0.53,-0.03 0.265,-0.059 0.275,0.003 0.207,0.049 0.214,-0.006 0.544,-0.22 0.561,-0.174 0.078,0.029 0.012,0.058 -0.101,0.134 -0.098,0.178 0.066,0.203 0.319,0.407 0.174,0.311 0.164,0.233 0.255,0.123 0.335,0.075 0.284,0.027 0.297,0.088 1.019,0.217 0.513,0.06 0.389,0.009 0.585,0.131 z m -3.409,10.401 0.083,-0.2 -0.031,-0.143 -0.176,0.029 -0.124,0.186 0.083,0.157 0.165,-0.029 z m -0.129,7.648 -0.002,-0.03 -0.021,0.003 -0.009,0.018 0.009,0.012 0.023,-0.003 z m -5.736,-3.634 0.093,0.148 0.011,0.086 -0.063,0.098 0.026,0.22 -0.235,-0.183 -0.355,0.092 -0.218,-0.02 -0.06,-0.164 0.05,-0.096 0.338,-0.021 0.105,-0.047 0.206,0.022 0.102,-0.135 z m -2.143,7.421 0.141,0.236 0.315,0.966 0.03,0.208 -0.063,0.213 -0.08,0.151 -0.313,0.484 0.046,0.399 0.116,0.247 0.017,0.273 -0.058,0.338 -0.194,2.069 -0.094,0.365 -0.059,0.315 -0.214,0.096 -0.276,-0.101 -0.348,-0.178 -0.161,0.011 -0.162,0.061 -0.133,-0.052 -0.127,-0.101 -0.095,0.706 -0.157,0.286 -0.239,0.183 -0.225,0.011 -0.232,-0.061 -0.196,0 -0.149,-0.135 -0.118,-0.238 -0.188,-0.289 -0.191,-0.343 -0.021,-0.311 -0.033,-0.687 0.055,-0.15 0.08,-0.144 0.039,-0.308 -0.027,-0.269 0.056,-0.096 0.111,0.096 0.083,-0.036 -0.005,-0.139 0.025,-0.253 -0.146,-0.212 -0.247,-0.072 -0.024,-0.222 0.026,-0.217 0.13,-0.146 0.044,-0.194 10e-4,-0.593 -0.174,-0.219 -0.067,-0.332 -0.09,-0.212 -0.162,-0.214 -0.184,-0.174 -0.113,-0.168 -0.025,-0.44 0.064,-0.368 0.058,-0.158 0.059,0.023 0.182,0.183 0.149,0.041 0.295,0.044 0.29,-0.059 0.356,-0.167 0.343,-0.202 0.497,-0.595 0.306,-0.121 0.157,-0.157 0.054,-0.212 0.13,-0.055 0.153,0.206 0.19,0.022 0.293,0.17 0.126,0.162 0.108,0.195 0.104,0.086 0.111,0.049 0.016,0.046 -0.088,0.046 -0.101,0.223 0.057,0.064 0.166,0.126 z m -3.777,-0.584 -0.093,0.169 -0.132,-0.012 0.052,-0.125 0.122,-0.251 0.148,-0.084 0.066,0.075 -0.07,0.144 -0.093,0.084 z m 15.863,1.236 -0.125,0.032 -0.073,-0.044 -0.04,-0.056 0.049,-0.139 0.255,0.083 -0.003,0.078 -0.063,0.046 z m -15.321,5.968 -0.162,0.356 -0.169,-0.252 -0.007,-0.216 0.023,-0.062 0.208,0.091 0.107,0.083 z m 19.919,3.032 -0.19,0.404 -0.093,0.155 -0.677,0.985 -0.078,0.227 -0.048,0.247 -0.07,0.216 -0.094,0.203 -0.089,0.258 0.017,0.292 0.032,0.143 0.082,0.094 0.134,0.088 0.103,0.136 -0.158,0.123 0.173,0.247 0.148,0.146 0.02,0.146 -0.003,0.146 -0.307,0.274 -0.12,0.151 -0.074,0.183 -0.032,0.188 0.033,0.17 -0.01,0.169 -0.309,-0.021 -0.316,-0.104 -0.319,0.045 -0.454,-0.196 -0.165,-0.035 -0.15,-0.077 -0.377,-0.608 -0.304,-0.257 -0.326,-0.201 -0.333,-0.012 -0.333,0.023 -0.294,-0.124 -0.599,-0.415 -0.635,-0.333 -0.269,-0.216 -0.123,-0.146 -0.144,-0.097 -0.363,-0.096 -0.327,-0.226 -0.148,-0.016 -0.319,0.027 -0.164,-0.016 -0.165,-0.08 -0.318,-0.265 -0.204,-0.368 -0.053,-0.163 0.144,-0.421 0.171,-0.405 0.151,-0.113 0.176,-0.082 0.106,-0.12 0.09,-0.147 0.327,0.424 0.146,0.103 0.148,-0.023 0.262,-0.152 0.022,-0.167 0.29,-0.211 0.368,-0.004 0.17,0.039 0.089,0.191 0.14,0.059 0.162,0.025 0.534,0.363 0.15,0.059 0.151,0.01 0.415,-0.152 0.318,-0.058 0.667,0.084 0.36,-0.091 0.252,-0.011 0.367,-0.14 0.282,-0.233 0.147,-0.058 0.158,-0.017 0.382,0.015 0.384,0.053 0.161,-0.055 0.135,-0.153 0.156,-0.069 0.171,0.046 0.443,-0.262 0.196,-0.018 0.186,0.101 -0.165,0.176 z m -9.894,5.154 -0.135,0.039 -0.176,-0.12 -0.012,-0.168 0.032,-0.05 0.214,0.077 0.067,0.156 0.01,0.066 z",
                        title: "Italy",
                        id: "IT",
                    },
                    { d: "m 469.22975,304.5504 0.025,0.216 -0.123,0.047 -0.105,-0.075 -0.209,0 -0.197,0.047 0.043,-0.386 0.388,0.047 z", title: "Jersey", id: "JE" },
                    {
                        d:
                            "m 258.06175,410.5424 0.342,0.105 0.354,0.055 0.152,0.003 0.143,0.034 0.323,0.253 0.26,0.138 0.985,0.309 0.328,0.533 0.062,0.167 -0.254,0.098 -0.321,0.035 -0.306,0.005 -0.283,-0.101 -0.123,-0.078 -0.295,-0.038 0.074,-0.072 -0.131,-0.033 -0.164,0.007 -0.121,0.205 -0.134,0.162 -0.258,-0.016 -0.099,-0.138 -0.135,0.062 -0.11,0.102 -0.13,0.382 -0.211,-0.19 -0.229,-0.158 -0.287,-0.066 -0.58,-0.011 -0.274,-0.051 -0.228,-0.323 -0.09,-0.092 -0.229,-0.084 -0.228,-0.371 -0.082,-0.051 -0.619,-0.079 -0.127,-0.203 0.038,-0.184 0.206,-0.225 0.101,-0.064 0.342,0.01 0.327,-0.068 0.144,-0.096 0.15,-0.064 1.184,0.163 0.273,10e-4 z",
                        title: "Jamaica",
                        id: "JM",
                    },
                    {
                        d:
                            "m 584.75675,368.2054 -0.416,0.385 -0.098,0.042 -0.541,0.159 -1.106,0.326 -0.741,0.218 -0.948,0.278 -0.787,0.232 -0.779,0.228 -0.722,0.212 0.412,0.446 0.629,0.681 0.42,0.453 0.495,0.582 0.442,0.519 0.469,0.549 -0.329,0.186 -0.542,0.306 -0.055,0.056 -0.047,0.057 -0.224,0.545 -0.176,0.429 -0.061,0.053 -0.756,0.158 -0.765,0.158 -0.482,0.101 -0.145,0.11 -0.314,0.533 -0.325,0.548 -0.542,0.448 -0.602,0.496 -0.149,0.032 -0.435,-0.076 -0.744,-0.13 -0.719,-0.126 -0.492,-0.085 -0.597,-0.105 0.087,-0.419 -0.024,-0.227 0.142,-0.746 0.083,-0.353 0.041,-0.261 0.206,-0.529 -0.025,-0.173 0.043,-0.611 -0.021,-0.118 0.094,-0.334 0.176,-0.485 0.172,-0.419 0.062,-0.188 0.176,-0.398 0.159,-0.489 -0.084,-0.268 -0.025,-0.052 0.064,-0.308 -0.002,-0.002 0.078,-0.504 0.042,-0.272 0.095,-0.361 0.168,-0.306 -0.078,-0.721 0.009,-0.39 0.105,-0.444 -0.058,-0.521 0.049,-0.744 0.011,-0.069 0.061,-0.09 0.047,-0.047 0.346,-0.155 0.148,-0.02 0.302,0.07 0.173,0.156 0.289,0.441 0.45,0.128 0.181,0.125 0.246,0.233 0.301,0.085 0.952,0.145 0.759,-0.49 0.642,-0.415 0.729,-0.472 0.496,-0.322 0.846,-0.549 0.558,-0.347 0.733,-0.459 0.724,-0.453 0.201,0.739 0.196,0.721 0.203,0.744 0.198,0.721 -0.214,0.069 0.168,0.551 0.277,-0.084 0.301,-0.065 0.127,0.354 z",
                        title: "Jordan",
                        id: "JO",
                    },
                    {
                        d:
                            "m 878.53675,325.4254 0.352,0.02 0.157,-0.018 0.269,0.059 1.067,0.591 0.322,0.075 0.333,0.009 0.234,-0.048 0.206,-0.162 0.644,-0.717 0.678,-0.655 0.075,0.025 0,0.181 -0.05,0.201 -0.3,0.599 -0.333,0.804 -0.071,0.406 0.108,0.395 0.209,0.326 0.165,0.445 0.19,0.617 0.268,0.078 0.146,0.009 0.268,-0.185 0.253,-0.235 0.218,-0.029 0.229,0.04 -0.301,0.164 -0.284,0.2 -0.244,0.378 -0.091,0.071 -0.281,-0.023 -0.161,0.014 -0.329,0.158 -0.289,0.179 -0.276,0.219 -0.301,0.117 -0.321,0.028 -0.495,0.179 -0.321,0.013 -0.603,-0.156 -0.293,0.042 -0.639,0.352 -0.582,0.508 -0.509,0.569 -0.425,0.682 -0.171,0.354 -0.103,0.396 -0.014,0.262 -0.038,0.251 -0.098,0.175 -0.118,0.142 -0.351,-0.083 -0.576,-0.362 -1.117,-0.527 -1.18,-0.809 -0.664,-0.407 -1.248,0.122 -1.181,0.776 -0.105,-0.066 -0.451,-0.532 -0.219,-0.211 -0.261,-0.06 -0.194,0.007 -0.188,0.039 -0.267,0.274 -0.098,0.197 -0.076,0.224 -0.023,0.158 0.032,0.155 0.253,0.35 0.312,0.26 0.141,0.049 0.299,-0.018 0.139,0.027 0.501,0.521 0.549,0.488 0.121,0.161 -0.203,0.169 -0.222,0.084 -0.259,-0.021 -0.256,-0.064 -0.438,-0.207 -0.188,0.176 -0.292,0.361 -0.161,0.392 -0.131,0.179 -0.322,0.236 -0.341,0.122 -0.179,-0.04 -0.136,-0.148 -0.077,-0.177 -0.039,-0.206 0.072,-0.446 0.177,-0.403 0.068,-0.412 -0.145,-0.581 -0.092,-0.122 -0.362,-0.341 -0.168,-0.333 -0.04,-0.415 0.021,-0.229 0.088,-0.507 0.088,-0.256 0.166,-0.084 0.182,-0.051 0.279,-0.184 0.307,-0.238 0.294,-0.272 0.291,-0.333 0.151,-0.366 -0.249,-0.45 -0.052,-0.268 0.037,-0.253 0.266,-0.135 0.273,0.102 0.551,0.372 0.107,0.037 0.378,0.017 0.518,0.081 0.3,-0.02 0.145,-0.056 0.218,-0.307 0.107,-0.392 -0.039,-0.505 -0.002,-0.502 0.138,-0.41 0.432,-0.661 0.124,-0.39 0.045,-0.952 0.156,-0.42 0.125,-0.437 0.06,-0.918 -0.177,-0.886 -0.178,-0.436 -0.204,-0.415 0.03,-0.397 0.165,-0.369 0.004,-0.111 0.039,-0.099 0.309,-0.07 0.145,-0.079 0.139,-0.178 0.165,-0.104 0.121,0.104 0.1,0.182 0.436,0.447 0.687,0.796 0.809,1.209 0.507,0.587 0.534,0.531 0.599,0.542 0.627,0.465 0.4,0.22 0.293,0.35 0.181,0.057 z m -7.723,-4.787 -0.108,0.252 -0.146,-0.375 -0.029,-0.405 0.084,0.002 0.154,0.061 0.037,0.197 0.008,0.268 z m 0.625,0.848 -0.194,0.028 -0.227,-0.166 -0.028,-0.208 0.164,-0.166 0.163,0.061 0.163,0.214 0.054,0.112 -0.095,0.125 z m -5.091,11.738 -0.064,0.02 -0.066,-0.032 -0.065,-0.285 0.056,-0.15 0.181,-0.105 0.176,-0.029 -0.149,0.524 -0.069,0.057 z m 4.906,2.653 0.11,0.07 0.524,-0.189 -0.1,0.571 -0.056,0.575 0.038,0.952 0.047,0.428 0.091,0.414 0.224,0.296 0.292,0.21 0.423,0.669 0.227,0.82 0.16,0.397 0.12,0.416 0.037,0.19 0.003,0.19 -0.036,0.26 0.04,0.21 -0.046,0.658 -0.189,0.759 -0.024,0.387 -0.165,0.077 -0.1,0.179 -0.085,0.083 -0.095,0.064 -0.137,0.016 -0.099,0.073 -0.039,0.205 -0.063,0.189 -0.12,0.175 -0.094,0.192 -0.077,0.468 -0.028,0.479 -0.115,0.334 -0.279,0.087 -0.319,-0.005 -0.409,0.154 -0.088,0.091 -0.323,0.582 -0.093,0.341 -0.003,0.366 0.09,0.45 0.122,0.439 0.092,0.815 -0.097,1.238 -0.094,0.395 -0.205,0.267 -0.156,0.124 -0.134,0.152 -0.174,0.401 -0.288,0.798 -0.023,0.2 10e-4,0.207 -0.078,0.27 -0.05,0.265 0.047,0.308 0.089,0.288 0.386,0.737 0.151,0.218 0.17,0.198 -0.659,0.219 -0.118,0.101 -0.392,0.418 -0.125,0.396 0.01,0.438 -0.065,0.157 -0.107,0.136 -0.112,0.09 -0.438,0.2 -0.28,0.199 -0.278,0.311 -0.11,0.162 -0.215,-0.052 -0.126,-0.144 0.124,-0.18 -0.038,-0.213 0.061,-0.547 -0.069,-0.22 0.224,-0.167 0.106,-0.266 0.232,-0.213 0.167,-0.189 0.029,-0.154 -0.149,-0.166 -0.158,-0.12 -0.218,0 -0.21,0.035 -0.137,0.158 -0.045,0.215 0.011,0.1 -0.018,0.087 -0.33,0.294 0.043,0.307 0.097,0.156 0.124,0.074 -0.037,0.105 -0.157,0.247 -0.109,0.024 -0.201,-0.346 -0.252,-0.189 -0.312,10e-4 -0.32,0.069 -0.243,0.23 -0.08,0.191 -0.052,0.197 0.018,0.479 -0.101,0.4 -0.198,0.351 -0.092,0.128 -0.241,0.238 -0.167,0.031 -0.118,-0.108 -0.096,-0.164 0.122,-0.6 -0.005,-0.338 0.282,-0.172 -0.231,-0.24 -0.284,-0.097 -0.399,0.128 -0.113,0.145 -0.077,0.194 -0.215,0.246 -0.236,0.229 -0.269,0.392 -0.18,0.463 -0.59,-0.151 -0.321,-0.034 -0.325,0.012 -0.576,-0.057 -0.632,0.095 -0.72,0.182 0.043,-0.131 0.592,-0.279 0.021,-0.082 -0.057,-0.153 -0.147,-0.007 -0.354,0.053 -0.181,-0.023 -0.073,-0.164 -0.12,-0.07 -0.08,0.067 0.026,0.318 -0.087,0.042 -0.117,-0.082 0.037,-0.248 -0.079,-0.363 -0.01,-0.226 0.124,-0.194 -0.127,-0.082 -0.134,0.031 -0.17,0.093 -0.15,0.132 -0.317,0.663 -0.123,0.378 0.232,0.303 0.634,0.423 0.108,0.104 0.002,0.18 -0.077,0.191 -0.172,0.083 -0.695,0.141 -0.603,0.273 -0.174,0.276 -0.548,1.066 -0.439,0.727 -0.62,0.25 -0.68,-0.223 -0.165,-0.253 -0.133,-0.313 -0.253,-0.283 -0.229,-0.309 -0.133,-0.367 0.021,-0.592 -0.099,-0.357 0.089,-0.095 0.375,-0.218 0.123,-0.122 0.212,-0.284 0.076,-0.158 0.011,-0.239 -0.17,-0.125 -0.44,0.004 -0.439,0.075 -0.313,-0.104 -0.407,-0.29 -0.126,-0.062 -0.438,-0.018 -0.313,0.054 -0.307,0.105 -0.325,0.034 -0.108,0.055 -0.375,0.355 -0.299,0.223 -0.258,0.111 -0.557,0.029 -0.279,0.072 -0.292,0.117 -0.082,-0.01 -0.308,0.162 -0.354,0.14 -0.188,0.14 -0.347,-0.092 -0.686,0.251 -0.332,0.031 -0.342,-0.139 -0.318,-0.225 -0.305,0.097 -0.209,0.331 -0.102,0.658 -0.119,0.296 -0.036,0.355 -0.158,-0.056 -0.918,-0.639 -0.063,-0.023 -0.742,0.11 -0.191,0.053 -0.239,0.129 -0.253,0.058 -0.23,-0.093 -0.221,-0.151 -0.212,0.045 -0.217,0.106 -0.084,-0.966 0.043,-0.127 0.133,-0.169 0.147,-0.145 0.359,-0.05 0.363,0.047 0.26,-0.066 0.22,-0.192 0.231,-0.272 0.261,-0.222 0.354,-0.175 0.342,-0.201 0.301,-0.282 0.285,-0.309 0.262,-0.227 0.285,-0.19 0.434,-0.458 0.575,-0.515 0.221,-0.382 0.137,-0.105 0.495,-0.213 0.657,-0.164 0.31,0.008 0.306,0.335 0.165,-0.046 0.168,-0.087 0.338,-0.048 0.348,0.056 0.34,0.001 0.34,-0.042 0.652,-0.11 0.344,-0.133 0.336,-0.172 1.196,-0.121 0.819,-0.289 0.13,0.021 0.126,0.066 0.01,0.214 -0.104,0.233 0.101,0.141 0.166,0.087 0.771,0.027 0.22,0.05 0.322,-0.159 0.304,-0.197 0.317,-0.26 0.222,-0.293 -0.205,-0.367 -0.045,-0.402 0.172,-0.437 0.249,-0.368 0.296,-0.223 0.273,-0.257 0.552,-0.73 0.399,-0.592 0.144,-0.73 -0.084,-0.866 0.349,-0.646 0.334,-0.111 0.663,-0.295 0.348,-0.086 0.052,0.129 -0.01,0.169 -0.521,0.542 -0.299,0.223 -0.178,0.069 -0.164,0.098 -0.067,0.191 0.266,0.318 0.067,0.235 -0.017,0.225 0.012,0.203 0.3,0.22 0.345,0.073 0.144,-0.002 0.126,-0.058 0.394,-0.539 0.088,-0.094 1.12,-0.396 0.551,-0.303 0.305,-0.079 0.286,-0.158 0.642,-0.61 0.236,-0.282 0.215,-0.312 0.172,-0.363 0.136,-0.393 0.186,-0.245 1.017,-0.585 0.327,-0.319 0.104,-0.155 0.126,-0.449 0.087,-0.467 0.123,-0.367 0.167,-0.344 0.223,-0.351 0.251,-0.327 0.148,-0.335 0.216,-0.803 0.094,-0.446 0.074,-0.161 0.108,-0.135 0.094,-0.172 0.072,-0.192 0.033,-0.19 0.046,-0.582 -0.028,-0.454 -0.168,-0.385 -0.139,-0.109 -0.151,-0.006 -0.228,0.033 -0.193,-0.157 0.04,-0.139 0.197,-0.026 0.134,-0.072 0.097,-0.131 0.181,-0.421 0.108,-0.452 0.01,-0.2 -0.142,-0.365 -0.112,-0.439 -0.003,-0.237 0.123,-0.274 0.176,-0.223 0.157,-0.052 0.17,-0.016 0.155,-0.086 0.144,-0.125 0.081,-0.138 0.126,-0.376 0.049,-0.214 -0.08,-0.576 0.082,-0.158 0.116,-0.098 0.155,0.074 0.16,0.015 0.186,-0.023 0.178,0.061 0.033,0.148 0.112,0.972 0.064,0.131 0.13,0.102 0.146,-0.015 0.126,-0.151 0.085,-0.201 0.168,-0.042 0.513,0.216 0.182,-0.154 0.118,-0.239 0.103,-0.423 -0.05,-0.382 -0.123,-0.142 -0.127,0.025 -0.112,0.105 -0.126,0.057 -0.757,0.201 0.004,-0.426 0.162,-0.64 0.089,-0.203 0.128,-0.096 0.318,0.112 0.155,0.074 0.339,0.318 z m -8.098,12.885 -0.267,0.009 -0.066,-0.035 0.161,-0.088 0.015,-0.147 0.097,-0.262 -0.002,-0.075 -0.212,-0.014 0.011,-0.297 0.158,-0.294 0.435,-0.463 0.119,-0.087 0.018,0.203 -0.132,0.479 -0.026,0.173 0.342,0.036 -0.22,0.573 -0.431,0.289 z m -13.958,5.664 -0.128,0.129 -0.24,-0.042 -0.139,-0.187 0.046,-0.211 0.251,-0.162 0.24,0.325 -0.03,0.148 z m 17.08,5.069 -0.03,0.16 -0.149,-0.035 -0.071,-0.104 0.009,-0.187 0.157,-0.001 0.084,0.167 z m -28.264,1.264 -0.057,0.163 -0.19,-0.115 -0.087,-0.104 0.177,-0.513 -0.021,-0.195 0.011,-0.095 0.351,-0.269 0.061,0.051 0.021,0.075 -0.031,0.115 0.018,0.254 -0.264,0.42 0.011,0.213 z m 15.569,0.221 -0.304,0.288 -0.264,-0.02 -0.132,-0.129 -0.044,-0.159 0.251,-0.25 0.216,-0.354 0.196,-0.157 0.158,-0.088 0.124,0.003 -0.278,0.494 0.077,0.372 z m -1.631,-0.661 -0.052,0.067 -0.05,-0.018 -0.179,0.155 -0.038,-0.149 -0.141,-0.099 -0.017,-0.078 0.403,-0.051 0.13,0.041 -0.056,0.132 z m 0.015,0.769 0.389,0.141 0.397,-0.04 -0.006,0.617 0.057,0.207 0.111,0.185 -0.057,0.269 0.18,0.092 -0.534,0.306 -0.481,0.406 -0.198,0.273 -0.179,0.293 -0.104,0.31 -0.067,0.333 -0.161,-0.132 -0.464,-0.541 -0.294,-0.148 -0.473,-0.079 -0.15,0.018 -0.972,0.505 -0.129,0.369 -0.265,0.555 -0.126,0.183 -0.14,0.053 -0.099,0.095 -0.108,0.472 -0.301,0.29 -0.185,0.009 -0.314,-0.08 -0.142,0.045 0.188,-0.465 -0.3,-0.057 -0.301,0.01 -0.007,-0.303 -0.182,-0.172 0.135,-0.224 0.004,-0.183 0.079,-0.101 0.027,-0.147 -0.011,-0.126 -0.185,-0.038 -0.113,-0.089 0.021,-0.332 -0.106,-0.012 -0.264,0.058 -0.548,0.256 -0.149,0 0.229,-0.183 0.487,-0.25 0.219,-0.144 0.478,-0.404 0.301,-0.191 0.156,-0.339 0.049,-0.206 0.102,-0.182 0.09,-0.291 0.154,-0.097 0.269,-0.25 0.154,0.024 0.172,0.307 0.231,0.235 0.166,-0.02 0.297,-0.121 0.144,-0.027 0.343,0.015 0.309,-0.149 0.126,-0.176 0.047,-0.22 -0.115,-0.369 0.148,0.037 0.143,-0.015 0.335,-0.235 0.345,-0.14 0.357,-0.035 0.402,0.133 0.389,0.212 z m -14.25,0.449 -0.183,0.137 -0.078,-0.209 0.08,-0.594 0.343,0.122 -0.006,0.182 -0.156,0.362 z m 9.258,0.028 -0.081,0.135 -0.249,-0.041 0.1,-0.117 0.076,-0.142 0.056,-0.029 0.047,0.154 0.051,0.04 z m -0.877,0.573 0.137,0.124 0.325,-0.05 0.04,0.035 -0.095,0.112 -0.144,0.111 -0.26,-0.083 -0.164,-0.004 -0.023,-0.185 0.021,-0.067 0.163,0.007 z m -3.062,1.151 0.377,0.1 0.16,0.006 0.147,-0.045 0.226,-0.131 0.235,-0.097 0.169,0.049 0.149,0.117 0.078,0.165 -0.038,0.172 -0.267,0.37 -0.22,0.394 0.504,0.074 0.504,-0.008 -0.117,0.243 -0.02,0.212 0.154,0.101 0.131,0.136 -0.034,0.123 -0.075,0.121 0.275,0.182 -0.018,0.122 -0.071,0.128 -0.687,0.834 -0.202,0.421 -0.14,0.463 -0.129,0.338 -0.094,0.351 -0.071,0.378 -0.128,0.39 0.043,0.345 -0.043,0.354 -0.345,0.872 -0.246,-0.016 -0.309,-0.105 -0.193,0.016 -0.1,0.193 0.177,0.397 -0.55,0.471 -0.608,0.316 -0.004,-0.144 0.058,-0.113 0.087,-0.091 0.063,-0.11 0.089,-0.37 -0.044,-0.373 -0.184,-0.468 -0.013,-0.168 0.127,-0.068 0.085,-0.02 0.046,-0.065 0.002,-0.155 -0.058,-0.115 -0.174,-0.037 -0.166,-0.002 -0.117,0.174 -0.161,0.335 -0.078,0.339 0.034,0.185 0.071,0.166 0.221,0.277 -0.064,0.164 -0.092,0.127 -0.78,-0.289 -0.169,-0.021 -0.14,-0.061 -0.15,-0.381 0.318,-0.092 0.094,-0.046 0.035,-0.122 0.043,-0.372 -0.148,-0.312 -0.126,-0.111 -0.102,-0.127 0.064,-0.263 -0.042,-0.332 -0.004,-0.464 0.055,-0.08 0.295,-0.094 0.213,-0.249 0.188,-0.284 0.275,-0.5 0.226,-0.541 -0.217,-0.023 -0.184,-0.102 0.2,-0.256 -0.062,-0.324 -0.3,-0.398 -0.165,-0.47 -0.265,-0.208 -0.14,-0.076 -0.171,0.11 -0.14,0.132 0.13,0.306 -0.016,0.271 0.021,0.268 0.132,0.015 0.163,-0.067 0.13,0.047 0.076,0.141 0.021,0.181 -0.058,0.179 -0.119,0.089 -0.146,-0.007 -0.147,-0.097 -0.115,-0.138 -0.275,-0.076 -0.29,0.163 -0.275,0.332 -0.235,0.168 0.11,-0.246 0.053,-0.266 -0.114,-0.187 -0.27,-0.311 -0.063,-0.18 -0.016,-0.218 0.048,-0.216 0.276,0.248 0.142,0.309 0.204,0.136 0.255,0.001 -0.196,-0.454 -0.07,-0.115 -0.274,-0.204 -0.376,-0.343 -0.238,-0.166 0.084,-0.359 0.141,-0.071 0.118,0.017 0.398,0.127 0.037,-0.179 -0.059,-0.096 -0.03,-0.111 0.263,-0.155 0.429,-0.128 0.088,-0.06 0.076,-0.129 0.105,-0.067 0.3,0.002 0.253,-0.124 0.209,-0.335 0.05,-0.184 0.074,-0.154 0.521,-0.272 0.129,-0.042 0.349,0.034 0.318,0.154 0.157,0.324 0.138,0.346 0.331,0.235 z m -3.87,-0.491 -0.194,0.139 -0.146,-0.108 0.071,-0.3 0.048,-0.1 0.166,0.099 0.055,0.27 z m -0.854,1.762 -0.197,0.157 -0.143,0 0.13,-0.184 0.018,-0.087 0.109,-0.247 0.213,-0.088 0.09,-0.011 -0.174,0.256 -0.046,0.204 z m -1.164,1.274 -0.07,0.036 -0.09,-0.3 -0.063,-0.107 0.105,-0.057 0.211,-0.545 0.038,0.216 0.082,0.214 0.082,0.034 -0.08,0.156 -0.117,0.058 -0.098,0.295 z m 30.21,-0.718 -0.049,0.035 -0.135,-0.109 -0.02,-0.097 0.024,-0.06 0.088,-0.013 0.182,0.119 -0.09,0.125 z m -31.365,0.906 0.109,0.09 0.159,-0.051 0.127,-0.012 0.091,0.043 0.115,0.231 0.042,0.137 -0.205,0.019 -0.087,0.032 -0.112,0.167 -0.161,-0.062 -0.101,-0.079 -0.022,-0.111 0.045,-0.404 z m 3.977,1.835 -0.222,0.118 -0.028,-0.113 -0.094,-0.052 0.161,-0.159 -0.006,-0.072 -0.102,-0.107 0.118,-0.406 -0.032,-0.175 0.443,-0.065 0.081,0.165 0.008,0.5 -0.327,0.366 z m 0.838,-0.641 -0.248,0.015 -0.103,-0.039 -0.041,-0.105 0.348,-0.213 0.27,0.038 -0.12,0.192 -0.106,0.112 z m -1.86,2.526 -0.088,0.057 0.056,-0.258 0.226,-0.226 0.019,0.146 -0.213,0.281 z m 3.484,4.107 -0.246,0.034 -0.005,-0.188 0.195,-0.424 0.021,-0.312 0.182,-0.394 0.077,-0.086 0.058,-0.031 0.063,0.123 -0.07,0.482 -0.183,0.365 -0.092,0.431 z m -0.945,0.433 -0.321,0.07 -0.176,-0.075 -0.162,-0.399 0.307,-0.25 0.41,0.248 0.084,0.071 -0.142,0.335 z m -3.284,6.573 -0.242,0.257 -0.257,-0.232 -0.31,-0.155 0.147,-0.042 0.086,-0.063 0.009,-0.098 0.201,-0.146 0.398,-0.113 0.127,-0.007 0.143,-0.106 0.047,-0.096 0.059,-0.046 0.257,-0.132 0.07,0.152 -0.012,0.119 -0.193,0.066 -0.188,0.159 -0.175,0.198 -0.156,0.084 -0.05,0.056 0.039,0.145 z m -0.361,0.33 0.019,0.074 -0.275,-0.062 -0.112,-0.289 0.183,0.052 0.056,0.099 0.129,0.126 z m -0.915,1.213 -0.118,0.058 -0.157,-0.08 -0.049,-0.362 0.07,-0.176 0.123,-0.039 0.107,0.313 0.074,0.129 -0.05,0.157 z m -2.075,3.352 -0.271,0.144 -0.1,0.171 -0.25,0.058 -0.243,0.24 -0.236,0.043 0.006,0.193 0.101,0.163 -0.157,0.029 -0.165,0.199 -0.013,0.145 0.059,0.116 -0.008,0.059 -0.208,0.172 -0.215,0.008 -0.009,-0.186 0.014,-0.139 0.203,-0.338 0.005,-0.393 0.188,-0.045 0.068,-0.055 0.297,-0.28 0.055,-0.119 -0.154,-0.116 0.012,-0.137 0.035,-0.058 0.244,0.044 0.099,0.102 0.049,0.011 0.143,-0.076 0.067,-0.136 0.266,-0.268 0.108,-0.266 0.215,0.218 -0.058,0.286 -0.147,0.211 z m 39.093,0.114 -0.052,0.002 -0.176,-0.331 0.051,-0.016 0.103,0.052 0.113,0.191 -0.039,0.102 z m -46.992,5.802 -0.237,0.08 -0.254,-0.047 0.041,-0.429 0.088,0.06 0.055,0.146 0.189,0.086 0.118,0.104 z m -3.231,0.698 -0.165,0.484 -0.137,0.07 -0.14,-0.039 -0.144,-0.27 0.101,-0.104 0.14,0.055 0.113,-0.021 0.257,-0.394 0.062,0.064 -0.087,0.155 z m -1.134,0.722 -0.177,0.043 -0.213,-0.053 -0.194,-0.015 -0.002,-0.091 0.203,-0.094 0.004,-0.131 0.05,-0.071 0.459,0.161 -0.02,0.118 -0.11,0.133 z",
                        title: "Japan",
                        id: "JP",
                    },
                    { d: "m 594.89475,511.2514 -0.017,0.004 -0.029,-0.006 -0.049,-0.047 0.039,-0.017 0.065,0.038 z", title: "Juan De Nova Island", id: "JU" },
                    {
                        d:
                            "m 592.44275,451.8244 -0.345,0.492 -0.414,0.59 -0.763,1.085 -0.58,0.571 -0.438,0.432 -0.041,0.078 0.002,0.481 0.005,1.176 0.009,2.351 0.009,2.35 0.009,2.35 0.004,1.175 0.002,0.395 0.385,0.494 0.376,0.483 0.497,0.638 0.267,0.342 0.044,0.114 -0.014,0.229 -0.409,0.479 -0.335,0.218 -0.451,0.104 -0.135,-0.02 -0.177,-0.068 -0.069,0.115 -0.052,0.179 -0.1,-0.038 -0.075,-0.053 0.045,0.318 0.046,0.157 -0.069,0.21 -0.219,0.185 -0.02,0.157 -0.474,0.41 -0.673,0.045 -0.354,0.204 -0.157,0.167 -0.12,0.365 0.042,0.559 -0.188,0.43 -0.035,0.216 -0.348,0.279 -0.154,0.256 -0.114,0.261 -0.099,0.114 -0.118,0.584 -0.162,0.355 -0.044,0.118 -0.04,0.106 -0.125,0.208 -0.082,0.144 -0.059,0.094 -0.41,0.91 -0.32,0.411 -0.251,-0.047 -0.167,0.159 -0.018,0.075 -0.089,-0.042 -0.209,-0.151 -0.431,-0.309 -0.431,-0.309 -0.431,-0.309 -0.431,-0.309 -0.431,-0.309 -0.431,-0.309 -0.431,-0.309 -0.431,-0.309 -0.253,-0.181 -0.111,-0.107 -0.088,-0.213 -0.042,-0.053 -0.115,-0.067 -0.135,-0.015 -0.039,-0.041 10e-4,-0.103 0.046,-0.148 0.159,-0.283 0.017,-0.167 -0.031,-0.189 -0.049,-0.303 -0.043,-0.069 -0.286,-0.159 -0.598,-0.332 -0.598,-0.332 -0.598,-0.332 -0.599,-0.332 -0.598,-0.332 -0.598,-0.332 -0.598,-0.332 -0.598,-0.332 -0.599,-0.332 -0.598,-0.332 -0.599,-0.332 -0.598,-0.332 -0.598,-0.332 -0.598,-0.332 -0.598,-0.332 -0.599,-0.332 -0.225,-0.125 -0.202,-0.105 -0.214,0 -0.009,-0.475 0.068,-1.209 -0.008,-1.062 0.061,-0.532 0.264,-0.337 0.122,-0.245 0.087,-0.342 0.138,-0.279 0.313,-0.227 0.056,-0.125 0.332,-0.379 0.199,-0.487 0.15,-0.166 0.188,-0.153 0.132,-0.081 0.218,-0.081 0.171,-0.046 0.031,-0.039 0.015,-0.079 -0.057,-0.302 0.073,-0.099 0.116,-0.202 0.133,-0.188 0.12,-0.12 0.067,-0.123 0.031,-0.212 0.005,-0.151 -10e-4,-0.246 -0.038,-0.559 -0.141,-0.468 -0.087,-0.524 0.064,-0.172 -0.111,-0.307 -0.055,-0.017 -0.09,-0.067 -0.116,-0.29 -0.087,-0.264 -0.054,-0.066 -0.376,-0.231 -0.187,-0.545 -0.21,-0.121 -0.114,-0.542 -0.022,-0.154 0.119,-0.541 -0.012,-0.124 -0.126,-0.114 -0.353,-0.117 -0.286,-0.223 0.037,-0.078 0.021,-0.081 -0.151,-0.054 -0.438,-0.925 0.563,-0.556 0.571,-0.563 0.729,-0.713 0.669,-0.655 0.578,-0.566 0.516,-0.505 -0.013,0.096 0.002,0.128 0.064,0.078 0.106,0.054 0.147,-0.057 0.129,-0.079 0.126,-0.017 0.775,0.21 0.13,0.183 -0.009,0.197 0.034,0.143 -0.06,0.144 -0.064,0.434 0.02,0.398 0.231,0.295 0.208,0.231 0.165,0.325 0.122,0.1 0.168,0.052 0.533,0.014 0.789,0.021 0.759,0.02 0.069,0.008 0.161,0.044 0.699,0.438 0.64,0.402 0.542,0.349 0.526,0.339 0.511,0.33 0.396,0.273 0.391,0.083 0.635,0.04 0.439,0.014 0.406,0.115 0.604,0.107 0.45,0.055 0.272,0.062 0.755,0.063 0.125,-0.037 0.333,-0.303 0.373,-0.493 0.146,-0.271 0.482,-0.27 0.847,-0.376 0.597,-0.266 0.664,-0.267 0.302,0.231 0.416,0.371 0.186,0.183 0.149,0.081 0.226,0.054 0.275,10e-4 0.15,-0.008 0.307,-0.048 0.718,-0.044 0.422,0.012 z m -2.497,17.116 -0.104,0.024 0.054,-0.16 0.308,-0.205 0.125,0.046 0.024,0.046 -0.007,0.043 -0.052,0.042 -0.348,0.164 z",
                        title: "Kenya",
                        id: "KE",
                    },
                    {
                        d:
                            "m 700.00175,332.8134 0.056,0.227 0.048,0.264 -0.03,0.062 -0.054,0.042 -0.86,0.065 -0.194,0.073 -0.208,0.364 -0.736,0.292 -0.42,0.15 -0.17,-0.006 -0.408,0.239 -1.139,0.595 -0.56,0.375 -0.281,0.157 -0.226,0.171 -0.038,0.173 -0.008,0.163 -0.625,0.765 -0.469,0.092 -0.396,-0.018 -0.27,0.116 -0.386,0.117 -0.836,-0.08 -0.285,0.013 -0.549,-0.105 -0.222,0.055 -0.234,0.155 -0.325,0.607 -0.132,0.142 -0.061,0.138 -0.05,0.294 -0.124,0.311 -0.159,0.245 -0.115,0.227 -0.235,0.219 -0.218,0.138 -0.169,-0.288 -0.146,0.082 -0.14,0.117 -0.264,-0.041 -0.163,0.059 -0.372,0.25 -0.546,-0.009 -0.06,-0.086 -0.108,-0.688 -0.095,-0.327 -0.079,-0.073 -0.098,-0.008 -0.785,0.542 -0.364,0.096 -0.299,0.017 -0.391,-0.162 -0.085,0.04 -0.067,0.087 -0.028,0.111 0.114,0.307 -0.032,0.06 -0.176,-0.005 -0.246,0.071 -0.188,0.141 -0.564,0.494 -0.475,0.165 -0.442,0.065 -0.181,0.055 -0.081,0.059 -0.148,0.235 -0.152,0.368 -0.079,0.179 -0.059,0.104 0.012,0.136 0.12,0.175 0.091,0.393 -0.021,0.102 -0.097,0.164 -0.14,0.161 -0.301,0.097 -0.236,0.049 -0.157,-0.032 -0.295,-0.011 -0.233,0.064 -0.144,0.11 -0.284,0.137 -0.353,0.046 -0.449,0.018 -0.216,-0.012 -0.652,-0.092 -0.215,0.032 -0.205,0.071 -0.372,0.075 -0.198,0.228 -0.104,0.209 -0.056,0.03 -0.232,-0.192 -0.177,-0.18 -0.116,-0.15 -0.146,0.004 -0.519,0.272 -0.077,-0.009 -0.148,-0.104 0.027,-0.257 -0.01,-0.164 -0.167,-0.087 -0.354,-0.022 -0.12,-0.093 0.007,-0.139 0.032,-0.133 -0.04,-0.103 -0.092,-0.078 -0.186,0.021 -0.213,0.106 -0.156,0.121 -0.196,0.057 -0.238,0.022 -0.148,0.073 -0.169,0.295 -0.577,0.062 -0.186,-0.067 -0.152,-0.209 -0.199,-0.338 -0.111,-0.042 -0.188,-0.042 -0.307,0.02 -0.413,0.142 -0.1,-0.117 -0.107,-0.034 -0.097,0.097 -0.099,-0.011 -0.408,0.027 -0.517,-0.013 -0.295,-0.066 -0.191,0.004 -0.38,0.151 -0.201,-10e-4 -0.264,0.027 -0.049,-0.511 -0.144,-0.346 0.044,-0.24 0.096,-0.33 0.08,-0.186 0.163,0.079 0.187,0.136 0.124,-0.036 0.033,-0.112 -0.048,-0.147 -0.007,-0.11 0.07,-0.145 0.103,-0.135 0.66,-0.222 0.565,-0.162 0.294,0.108 0.569,0.248 0.293,0.128 0.204,0.075 0.179,0.363 0.117,-0.017 0.118,-0.073 0.07,-0.089 0.057,-0.309 0.265,-0.174 0.583,-0.206 0.041,-0.121 -0.009,-0.067 0.092,-0.059 0.292,-0.06 0.59,-0.057 0.2,0.043 0.229,0.122 0.177,0.121 0.168,-0.004 0.139,-0.025 0.06,0.034 0.044,0.107 0.072,0.096 0.226,-0.131 0.204,-0.169 0.161,-0.024 0.148,-0.064 0.043,-0.113 0.116,-0.188 0.333,-0.359 0.173,-0.058 0.112,0 0.006,0.058 0.054,0.053 0.291,0.083 0.089,-0.095 0.047,-0.131 -0.102,-0.208 -0.002,-0.087 0.038,-0.08 0.054,-0.048 0.465,0.198 0.103,-0.004 0.212,-0.111 0.194,-0.195 0.07,-0.154 0.951,-0.5 0.067,-0.091 -0.013,-0.066 -0.399,-0.117 -0.18,0.065 -0.166,0 -0.101,-0.074 -0.484,-0.028 -0.106,-0.052 -0.321,-0.362 -0.221,-0.138 -0.178,-0.091 -0.193,0.013 -0.23,0.095 -0.071,-0.043 -0.02,-0.152 0.001,-0.191 -0.047,-0.205 -0.137,-0.048 -0.177,0.081 -0.264,-0.083 -0.225,-0.03 -0.058,-0.433 -0.091,-0.185 -0.093,-0.194 -0.098,-0.056 -0.16,-0.097 -0.01,-0.229 -0.034,-0.065 -0.057,-0.031 -0.077,0.026 -0.099,0.116 0.049,0.253 -0.038,0.253 -0.058,0.127 -0.112,0.094 -0.128,0.002 -0.222,-0.128 -0.035,0.766 -0.043,0.047 -0.265,-0.108 -0.212,0.046 -0.316,-0.047 -0.237,-0.126 -0.178,-0.035 -0.287,-0.107 -0.219,-0.14 -0.135,-0.514 -0.128,-0.184 -0.121,-0.039 -0.489,0.178 -0.179,-0.138 -0.33,-0.176 -0.25,-0.066 -0.067,-0.095 0.011,-0.117 0.77,-0.575 0.303,-0.396 0.19,-0.168 0.272,-0.111 0.212,-0.065 0.108,-0.365 0.041,-0.042 0.151,-0.027 0.342,-0.15 0.551,-0.321 0.011,-0.088 -0.056,-0.076 -0.231,-0.165 -0.264,-0.131 -0.16,0.068 -0.091,0.067 -0.151,-0.17 0,-0.175 0.167,-0.3 0.14,-0.15 0.059,-0.29 0.198,-0.194 0.207,-0.308 0.251,-0.252 0.464,-0.189 0.259,0.062 0.243,-0.044 0.376,-0.153 0.072,-0.01 0.158,-0.002 0.968,0.234 0.32,0.011 0.75,0.304 0.345,0.066 0.244,0.086 0.11,0.131 0.176,0.161 0.942,0.13 0.259,0.086 0.093,0.141 0.269,0.179 0.229,0.041 -0.2,-0.7 0.08,-0.417 0.298,-1.143 0.156,-0.173 0.299,-0.153 0.47,-0.171 0.178,-0.239 0.385,0.024 0.167,-0.021 0.115,-0.043 0.063,-0.134 0.434,0.233 0.726,0.472 0.548,0.299 0.646,0.282 0.894,0.257 0.756,0.085 0.13,-0.061 0.303,-0.391 0.143,-0.017 0.258,0.034 0.802,0.018 0.817,0.019 0.385,-0.038 0.836,-0.163 0.123,-0.008 0.194,0.011 0.5,0.222 0.374,0.031 0.254,-0.001 0.148,0.018 0.31,-0.008 0.503,0.026 0.622,0.144 0.749,-0.026 0.24,-0.027 0.417,0.026 0.331,0.137 0.419,0.145 0.263,0.061 0.176,0.031 0.314,0.011 0.188,-0.045 0.107,0.063 0.106,0.354 0.26,0.232 0.203,0.219 0.17,0.242 0.173,0.099 0.305,0.003 0.575,0.069 0.33,0.096 0.422,0.417 0.384,0.424 z m -25.267,8.517 0.026,-0.052 -0.103,-0.267 0.139,-0.25 -0.275,-0.042 -0.141,-0.074 -0.158,-0.253 -0.052,-0.012 -0.082,0.069 -0.044,0.166 0.039,0.179 0.112,0.121 0.074,0.04 0.011,0.008 -0.003,0.059 -0.09,0.296 0.147,0.038 0.258,0.005 0.142,-0.031 z m 1.609,-0.21 0.028,-0.165 -0.068,0.008 -0.081,0.045 -0.155,0.045 -0.034,0.082 0.104,0.104 0.132,0.038 0.074,-0.157 z m -3.025,0.455 -0.01,-0.075 -0.096,-0.035 -0.272,-0.04 -0.194,-0.058 -0.042,-10e-4 0.018,0.072 0.083,0.127 0.114,0.136 0.147,0.015 0.252,-0.141 z",
                        title: "Kyrgyzstan",
                        id: "KG",
                    },
                    {
                        d:
                            "m 767.96675,433.7354 -0.46,-0.369 -0.913,-0.129 -0.099,-0.163 -0.088,-0.032 -0.084,0.212 -0.502,0.203 -0.21,-0.123 -0.153,-0.148 0.022,-0.182 0.146,-0.148 0.249,-0.106 0.115,-0.374 -0.19,-0.479 -0.166,-0.14 -0.176,-0.11 -0.185,0.178 -0.155,0.305 -0.162,0.157 -0.229,0.035 -0.335,-0.013 -0.13,-0.455 -0.043,-0.39 0.046,-0.446 0.051,-0.264 -0.322,-0.364 -0.019,-0.347 -0.155,-0.179 -0.046,0.091 0.004,0.1 -0.044,-0.072 -0.51,-1.02 -0.085,-0.473 0.088,-0.365 0.051,-0.122 -0.147,-0.192 -0.206,-0.218 -0.365,-0.286 -0.024,-0.453 -0.082,-0.534 -0.109,-0.181 -0.167,-0.329 -0.091,-0.273 -0.031,-0.722 0.047,-0.058 0.259,-0.021 0.332,-0.052 0.053,-0.116 -0.059,-0.097 0.212,-0.164 0.305,-0.359 0.235,-0.375 0.17,-0.237 0.101,-0.235 0.342,-0.333 0.473,-0.23 0.32,-0.054 0.334,-0.078 0.319,-0.112 0.152,-0.011 0.396,0.135 0.215,0.034 0.226,-0.002 0.233,0.015 0.203,-0.014 0.486,-0.094 0.517,0.075 0.461,-0.059 0.57,-0.109 0.28,0.069 0.255,0.109 0.035,0.221 0.06,0.101 0.085,0.078 0.113,0 0.146,-0.154 0.121,-0.159 0.04,-0.029 0.006,0.078 0.061,0.172 0.108,0.169 0.11,0.112 0.183,0.149 0.119,0.007 0.391,-0.141 0.584,0.205 0.068,0.103 0.189,0.208 0.204,0.149 0.456,0.01 0.162,-0.368 -0.078,-0.224 -0.26,-0.391 -0.071,-0.231 0.083,-0.041 0.44,-0.044 0.071,-0.045 0.097,-0.253 0.12,0.029 0.244,0.033 0.258,-0.173 0.153,-0.182 0.083,0.083 0.092,0.128 0.1,0.074 0.186,0.11 0.204,0.154 0.127,0.151 0.103,0.059 0.262,-0.042 0.07,0.006 0.151,-0.184 0.106,-0.1 0.091,0.028 0.132,-0.002 0.272,-0.234 0.156,-0.214 0.086,-0.059 0.244,0.107 0.098,-0.022 0.142,-0.294 0.152,-0.116 0.045,0.159 -0.118,0.301 -0.126,0.272 -0.235,0.238 -0.012,0.175 -0.081,0.521 0.031,0.166 0.055,0.142 0.077,0.076 0.204,0.51 0.187,0.463 0.184,0.38 0.032,0.24 -0.169,0.609 -0.196,0.559 0.017,0.278 0.085,0.278 0.09,0.371 0.033,0.474 -0.049,0.309 -0.089,0.192 -0.17,0.196 -0.147,0.101 -0.178,-0.167 -0.142,-0.007 -0.189,0.05 -0.149,0.077 -0.304,0.289 -0.337,0.281 -0.466,0.072 -0.181,0.208 -0.194,0.029 -0.368,0.011 -0.241,0.048 0.011,0.105 -0.02,0.494 0.005,0.116 -0.037,0.031 -0.167,0.015 -0.282,-0.076 -0.382,-0.122 -0.272,-0.019 -0.14,0.215 -0.083,0.084 -0.104,0.013 -0.107,0.038 -0.036,0.096 -0.009,0.12 0.052,0.205 0.02,0.326 -0.014,0.222 0.1,0.141 0.584,0.472 0.172,0.118 0.02,0.07 -0.102,0.257 0.091,0.361 -0.183,-0.007 -0.306,-0.155 -0.146,-0.095 -0.177,0.076 -0.062,-0.014 -0.119,-0.178 -0.156,-0.181 -0.161,-0.012 -0.34,0.071 -0.348,0.05 -0.132,-0.001 -0.055,0.033 -0.201,0.27 -0.085,-0.046 -0.351,-0.103 -0.319,-0.039 -0.065,0.069 0.039,0.22 0.07,0.214 -0.042,0.091 -0.176,0.113 -0.231,0.203 -0.143,0.158 -0.099,0.039 -0.353,-0.007 -0.352,0.021 -0.142,0.149 -0.132,0.116 -0.113,0.033 z m -3.876,-2.481 -0.05,0.027 -0.048,-0.001 -0.048,-0.042 0.005,-0.164 0.035,-0.1 0.082,-0.019 0.024,0.299 z m 0.764,1.609 -0.103,0.11 -0.163,-0.227 10e-4,-0.063 0.265,0.18 z",
                        title: "Cambodia",
                        id: "KH",
                    },
                    {
                        d:
                            "m 1003.3637,470.6364 0.092,0.053 0.07,0.072 0.034,0.1 0,0.025 -0.054,-10e-4 -0.065,-0.031 -0.047,-0.042 -0.024,-0.011 -0.01,-0.009 0.056,0.006 0.064,0.042 0.048,0.019 0,-0.049 -0.058,-0.085 -0.034,-0.029 -0.044,-0.025 -0.05,-0.017 -0.034,0.015 -0.019,0.007 -0.01,-0.02 0.01,-0.018 0.018,-0.018 0.06,0.016 z m 1.719,1.031 -0.013,0.021 -0.02,-0.018 0.014,-0.033 0.012,-0.028 0.019,0.015 -0.012,0.043 z m -0.416,3.71 -0.027,0.013 -0.032,-0.004 -0.021,-0.019 0,-0.03 0.026,-0.021 0.037,0.007 0.021,0.027 0,0.027 z m -2.754,0.133 0.018,0.019 0.041,-0.005 0.036,-0.003 -0.022,0.019 -0.074,0.008 -0.036,-0.048 0.045,-0.037 0.04,-0.006 0,0.01 0,0.011 -0.019,0 -0.03,0.009 0,0.023 z m -6.44995,0.459 0.033,0.037 0,0.018 -0.016,-0.003 -0.048,-0.011 -0.016,-0.022 0.035,0.015 0.015,-0.003 -0.032,-0.033 -0.028,-0.024 -0.021,-0.01 0,-0.012 0.026,0.006 0.052,0.042 z m -967.750002,-23.994 0.224,0.236 -0.043,0.119 -0.162,-0.011 -0.074,-0.042 0.126,-0.021 0.021,-0.044 -0.058,-0.069 -0.077,-0.048 -0.053,0 -0.013,0.095 -0.087,-0.074 0.051,-0.074 0.062,-0.049 0.083,-0.018 z m 932.620002,2.219 -0.178,0.093 -0.054,-0.015 0.211,-0.132 -10e-4,0.016 0.022,0.038 z m -0.352,0.217 -0.208,0.108 -0.056,-0.058 0.075,-0.002 0.14,-0.104 0.169,-0.008 -0.02,0.058 -0.1,0.006 z m -926.664002,3.337 0.467,0.323 -0.198,0.023 -0.488,-0.156 -0.446,-0.319 0.133,-0.069 0.065,0.115 0.203,0.107 0.12,-0.225 0.079,-0.051 -0.356,-0.232 0.141,0.012 0.337,0.158 -0.057,0.314 z m 927.153002,0.027 0.014,0.064 -0.16,-0.175 -0.095,-0.113 0.006,-0.049 0.043,0.031 0.053,0.055 0.035,0.044 0.104,0.143 z m 0.031,0.358 -0.102,0.012 0.076,-0.04 0.021,-0.055 -0.012,-0.173 0.04,0.014 0.014,0.071 0.007,0.104 -0.044,0.067 z m 0.024,1.047 -0.075,0.01 0.049,-0.057 0.321,-0.063 0.028,-0.018 0.052,0.035 -0.001,0.033 -0.023,0.017 -0.159,10e-4 -0.125,0.03 -0.067,0.012 z m -0.016,0.917 0.151,0.11 -0.02,0.076 -0.051,0.087 -0.197,0.222 -0.06,-0.021 0.192,-0.201 0.074,-0.133 -0.11,-0.102 -0.044,0.022 -0.018,0 -0.038,-0.095 0.038,0 0.083,0.035 z m 4.143,5.06 -0.091,0.076 -0.035,-0.069 0.045,-0.085 -0.076,-0.353 -0.126,-0.048 -0.075,-0.106 0.036,0 0.126,0.097 0.101,0.044 0.059,0.232 0.036,0.212 z m -13.913,0.2 -0.026,0.006 -0.053,-0.029 0.007,-0.036 0.037,-0.016 0.047,0.027 -0.012,0.048 z m 14.655,0.943 0.017,0.144 -0.064,-0.019 -0.021,-0.056 -0.021,-0.145 -0.067,-0.142 0.076,0.038 0.063,0.111 0.017,0.069 z m -925.381002,8.027 -0.008,0.017 -0.034,-0.022 -0.066,-0.041 -0.056,-0.045 -10e-4,-0.019 0.079,-0.027 0.101,-0.021 0.022,0.029 -0.019,0.041 -0.018,0.088 z m -2.547,4.305 -0.065,0.015 -0.076,0 -0.038,-0.037 -0.002,-0.03 0.026,0 0.024,0.005 0.108,0.005 0.028,0.022 -0.005,0.02 z m 11.454,16.4 -0.023,0.045 -0.044,-0.016 -0.026,-0.057 -0.009,-0.062 0.017,-0.05 0.029,0.002 0.033,0.062 0.023,0.076 z",
                        title: "Kiribati",
                        id: "KI",
                    },
                    {
                        d:
                            "m 596.88175,496.3434 -0.053,0.038 -0.256,-0.163 -0.146,-0.038 -0.215,-0.263 0.083,-0.91 0.069,-0.117 0.052,-0.047 0.119,-0.017 0.145,0.114 -0.038,0.585 0.191,0.394 0.123,0.313 -0.074,0.111 z m 2.836,0.514 0.141,0.394 -10e-4,0.297 -0.06,0.094 -0.126,-0.062 -0.232,-0.236 -0.441,-0.23 0.203,-0.019 0.118,0.023 0.125,-0.021 0.078,-0.13 0.016,-0.077 0.11,-0.062 0.069,0.029 z m -1.93,0.643 0.197,0.175 -0.548,-0.072 -0.086,-0.158 -0.004,-0.116 0.205,0.025 0.236,0.146 z",
                        title: "Comoros",
                        id: "KM",
                    },
                    {
                        d:
                            "m 299.12275,414.1094 -0.072,0.046 -0.128,-0.18 -0.206,-0.049 -0.178,-0.106 -0.004,-0.023 0.003,-0.053 0.035,-0.062 0.091,-0.047 0.227,0.145 0.106,0.182 0.099,0.083 0.027,0.064 z m 0.277,0.346 -0.141,0.062 -0.12,-0.084 0.027,-0.203 0.114,-0.006 0.114,0.09 0.006,0.141 z",
                        title: "Saint Kitts and Nevis",
                        id: "KN",
                    },
                    {
                        d:
                            "m 841.21675,331.5054 0.076,0.23 0.18,0.224 0.094,0.163 0.019,0.169 0.082,0.095 -0.143,0.105 -0.188,-0.064 -0.313,-0.038 -0.401,0.331 -0.222,0.116 -0.156,0.325 -0.313,0.193 -0.171,0.205 -0.222,0.355 -0.146,0.342 -0.337,0.35 -0.197,0.439 -0.011,0.376 0.215,0.384 0.02,0.326 -0.15,0.67 0.083,0.709 -0.093,0.277 -1.032,0.484 -0.27,0.241 -0.379,0.625 -0.462,0.232 -0.287,0.254 -0.397,0.15 -0.254,0.438 -0.279,0.248 -0.332,0.151 -0.249,0.194 -0.556,0.012 -0.393,0.135 -0.279,0.363 -0.839,0.415 -0.114,0.313 0.056,0.482 0.005,0.369 -0.073,0.303 -0.184,-0.085 -0.099,0.099 -0.109,0.28 0.031,0.318 0.288,0.103 0.235,0.13 0.331,0.066 0.245,0.147 0.521,0.67 0.425,0.292 0.11,0.108 0.244,0.147 0.225,0.23 0.127,0.206 -0.099,0.056 -0.169,0.301 -0.158,0.381 -0.152,0.206 -0.175,0.114 -0.189,0.067 -0.375,0.029 -0.339,-0.026 -0.109,-0.041 -0.466,0.024 -0.132,0.027 -0.669,-0.029 -0.35,0.031 -0.223,0.074 -0.227,0.154 -0.195,0.231 -0.172,0.247 -0.35,0.451 -0.245,0.219 -0.001,0.316 -0.006,0.096 -0.086,0.067 -0.029,-0.029 -0.142,-0.023 -0.569,-0.289 -0.469,0.176 -0.118,0.229 -0.124,0.074 -0.187,-0.449 -0.305,-0.014 -0.484,-0.396 -0.208,0.081 -0.053,0.159 -0.266,0.364 -0.371,0.3 -0.12,0.04 -0.137,-0.021 0.02,-0.083 -0.151,-0.337 -0.586,-0.136 -0.211,-0.144 -0.107,-0.031 0.574,-0.377 0.15,-0.067 -0.112,-0.088 -0.124,-0.043 -0.471,0.056 -0.246,-0.124 -0.358,0.04 -0.249,-0.098 0.516,-0.371 0.023,-0.219 -0.006,-0.167 0.261,-0.494 0.263,-0.273 0.681,-0.389 0.296,-0.054 0.215,0.016 0.176,-0.036 -0.185,-0.149 -0.181,-0.068 -0.352,0.014 -0.365,-0.224 -0.032,-0.237 0.708,-1.501 0.01,-0.137 -0.11,-0.367 -0.036,-0.358 -0.508,-0.206 -0.225,-0.025 -0.651,-0.405 -0.26,-0.205 -0.103,0.061 -0.019,0.324 -0.093,0.072 -0.171,0.063 -0.086,-0.37 -0.141,-0.268 -0.432,-0.273 -0.154,-0.15 0.074,-0.326 -0.036,-0.029 0.068,-0.366 0.265,-0.283 0.649,-0.504 0.167,-0.237 0.33,-0.279 0.148,0.006 0.153,-0.024 0.046,-0.122 0.035,-0.096 0.132,-0.087 0.317,-0.154 0.36,-0.203 0.288,-0.057 0.353,-0.305 0.144,-0.134 0.145,0 0.039,-0.063 0.082,-0.158 0.112,-0.104 0.156,-0.02 0.255,-0.075 0.32,-0.046 0.218,-0.257 0.074,-0.184 0.145,-0.202 0.306,-0.221 0.211,-0.327 0.233,-0.355 0.111,-0.114 0.109,-0.023 0.064,-0.134 0.075,-0.379 0.107,-0.369 0.063,-0.174 0.27,-0.19 0.068,-0.093 0.061,-0.031 0.125,0.025 0.168,-0.112 0.157,-0.124 0.144,0.043 0.146,0.103 0.152,0.205 0.068,0.163 0.12,0.136 0.023,0.198 0.121,0.086 0.256,0.043 0.419,0.135 0.271,0.007 0.155,0.101 0.324,0.055 0.648,-0.079 0.265,0.046 0.111,0.124 0.164,0.098 0.107,0.006 0.143,-0.169 0.153,-0.274 0.101,-0.21 -0.004,-0.167 -0.089,-0.18 -0.213,-0.167 -0.141,-0.259 -0.134,-0.268 -0.079,-0.087 -0.064,-0.13 -0.012,-0.2 0.046,-0.135 0.323,-0.09 0.414,-0.053 0.335,0.057 0.56,-0.038 0.344,-0.075 0.255,0.011 0.234,-0.001 0.104,-0.115 0.327,-0.277 0.158,-0.099 0.174,-0.188 0.027,-0.197 0.035,-0.16 0.098,-0.17 0.172,-0.211 0.146,-0.097 0.163,0.013 0.171,0.097 0.109,0.097 0.123,-0.028 0.103,-0.166 0.067,-0.032 0.195,-0.015 0.063,-0.102 0.075,-0.489 0.075,-0.386 0.016,-0.271 0.175,-0.449 0.056,-0.271 0.104,-0.126 0.12,0.009 0.101,0.08 0.127,0.046 0.169,-0.044 0.119,0.069 0.074,0.146 0.25,0.1 0.023,0.073 -0.006,0.487 0.137,0.228 0.184,0.206 0.251,0.187 0.135,0.042 0.086,0.137 z m -15.777,11.12 -0.157,0.104 -0.009,-0.186 0.122,-0.157 0.127,-0.021 -0.083,0.26 z",
                        title: "North Korea",
                        id: "KP",
                    },
                    {
                        d:
                            "m 830.29175,348.9054 0.086,-0.067 0.006,-0.096 0.001,-0.316 0.245,-0.219 0.35,-0.451 0.172,-0.247 0.195,-0.231 0.227,-0.154 0.223,-0.074 0.35,-0.031 0.669,0.029 0.132,-0.027 0.466,-0.024 0.109,0.041 0.339,0.026 0.375,-0.029 0.189,-0.067 0.175,-0.114 0.152,-0.206 0.158,-0.381 0.169,-0.301 0.099,-0.056 0.686,1.595 0.655,1.026 0.559,0.74 0.796,1.419 0.233,0.756 0.022,0.467 0.133,0.641 -0.113,0.367 0.033,0.577 -0.05,0.296 -0.098,0.218 -0.003,0.418 0.031,0.223 0.003,0.296 0.063,0.115 0.091,0.042 0.145,-0.107 0.177,-0.045 -0.031,0.355 -0.214,0.897 -0.186,0.651 -0.253,0.566 -0.322,0.517 -0.386,0.202 -0.271,0.072 -0.518,0.026 -0.43,-0.087 -0.369,0.063 -0.148,0.107 -0.11,0.184 0.081,0.285 -0.011,0.21 -0.158,-0.016 -0.313,-0.122 -0.347,-0.017 -0.162,-0.061 -0.164,-0.301 -0.167,0.011 -0.29,0.179 -0.444,0.04 -0.156,0.097 -0.056,0.125 0.064,0.158 0.224,0.207 -0.075,0.209 -0.232,0.104 -0.188,-0.257 -0.117,-0.252 -0.131,-0.014 -0.204,0.072 -0.041,0.272 0.095,0.185 0.156,0.215 -0.219,0.247 -0.058,0.176 -0.157,0.126 -0.424,-0.281 0.061,-0.2 0.184,-0.192 0.022,-0.2 -0.061,-0.118 -0.606,0.504 -0.374,0.57 -0.2,-0.042 -0.083,-0.146 -0.117,-0.06 -0.404,0.367 -0.074,0.291 -0.148,0.011 -0.065,-0.123 -0.005,-0.264 -0.069,-0.222 -0.419,-0.324 -0.19,-0.284 0.103,-0.159 0.35,0.086 0.277,-0.011 -0.055,-0.135 -0.091,-0.064 0.185,-0.076 0.154,-0.155 -0.128,-0.042 -0.194,0.09 -0.162,-0.044 -0.064,-0.373 -0.197,-0.383 -0.103,-0.372 0.195,-0.214 0.099,-0.334 0.182,-0.484 0.091,-0.157 0.251,-0.114 0.089,-0.125 -0.138,-0.064 -0.22,-0.057 0.005,-0.14 0.15,-0.076 0.168,-0.155 0.324,-0.188 0.101,-0.355 -0.094,-0.09 -0.203,-0.084 0.046,-0.18 0.084,-0.137 -0.032,-0.082 -0.239,-0.232 -0.158,-0.211 0.047,-0.241 -0.036,-0.365 0.021,-0.307 -0.011,-0.167 -0.117,-0.375 -0.053,-0.377 -0.153,0.055 -0.124,0.094 -0.443,-0.133 -0.141,-0.008 -0.057,-0.28 0.159,-0.345 0.377,-0.305 0.217,-0.038 0.163,-0.134 0.255,-0.042 0.306,0.208 0.274,0.042 0.152,0.357 0.094,0.076 0.02,-0.131 0.222,-0.154 0.053,-0.116 -0.048,-0.064 -0.255,-0.063 -0.229,-0.444 -0.032,-0.195 -0.083,-0.124 0.123,-0.356 -0.265,-0.407 -0.129,-0.128 0.019,-0.367 -0.138,-0.233 -0.077,-0.128 -0.047,-0.222 0.04,-0.1 0.12,-0.038 0.03,-0.095 z m -0.318,0.159 -0.013,0.467 -0.155,-0.02 -0.105,-0.047 -0.045,-0.091 -0.106,-0.433 0.119,-0.179 0.229,0.142 0.076,0.161 z m 12.336,0.912 -0.128,0.104 -0.151,-0.104 -0.019,-0.111 0.079,-0.096 0.184,-0.058 0.086,0.084 -0.051,0.181 z m -12.626,3.448 -0.038,0.225 -0.186,-0.148 -0.054,-0.494 0.191,0.144 0.087,0.273 z m 6.522,5.826 -0.265,0.21 -0.357,-0.282 -0.085,-0.155 0.271,-0.229 0.23,-0.261 0.151,-0.016 0.055,0.733 z m -1.896,-0.025 -0.031,0.333 -0.198,0.017 -0.118,-0.214 -0.126,0.104 -0.065,0.002 -0.1,-0.267 -0.017,-0.208 0.233,-0.159 0.142,0.095 0.202,0.049 0.078,0.248 z m -5.314,0.254 -0.037,0.082 -0.122,-0.024 -0.126,-0.234 -0.052,-0.186 -0.125,-0.102 0.199,-0.161 0.253,0.29 0.01,0.335 z m 4.566,0.394 -0.032,0.105 -0.142,-0.159 0.141,-0.174 0.033,0.228 z m -4.393,0.829 -0.18,0.052 -0.101,-0.117 -0.07,-0.031 0.04,-0.153 0.292,-0.301 0.058,-0.104 0.271,0.063 0.101,0.16 -0.124,0.242 -0.287,0.189 z m 1.458,0.09 0.047,0.161 -0.227,-0.03 -0.12,-0.155 0.016,-0.133 0.135,-0.019 0.149,0.176 z m -1.197,3.765 -0.126,0.074 -0.117,-0.044 -0.031,-0.035 -0.142,-0.191 -0.036,-0.098 0.095,-0.188 0.388,-0.309 1.004,-0.298 0.181,-0.013 0.396,0.128 0.085,0.239 -0.073,0.206 -0.091,0.138 -0.459,0.232 -0.358,0.111 -0.716,0.048 z",
                        title: "South Korea",
                        id: "KR",
                    },
                    {
                        d:
                            "m 535.40975,332.5954 -0.004,0 -0.481,0.105 -0.162,0.123 -0.096,0.216 -0.031,0.111 -0.085,0.004 -0.141,-0.111 -0.178,-0.174 -0.233,0.014 -0.79,0.378 -0.078,0.198 -0.017,0.429 -0.054,0.116 -0.085,0.074 -0.326,-0.047 -0.035,-0.028 0.043,-0.164 -0.017,-0.36 -0.148,-0.597 -0.104,-0.195 -0.217,-0.195 -0.168,-0.128 -0.303,-0.114 -0.153,-0.33 -0.231,-0.374 -0.111,-0.086 0.018,-0.037 0.053,-0.283 -0.066,-0.206 -0.102,-0.176 0.069,-0.107 0.213,10e-4 0.176,0.02 0.063,-0.169 0.363,-0.11 0.349,-0.115 0.051,-0.08 -0.08,-0.174 0.047,-0.109 0.418,-0.31 0.068,-0.141 0.026,-0.11 -0.056,-0.118 -0.079,-0.183 0.038,-0.078 0.217,-0.106 0.177,-0.124 0.104,-0.01 0.065,0.089 0,0.092 0.058,0.155 0.13,0.084 0.216,0.137 0.251,0.093 0.196,0.186 0.269,0.332 0.04,0.164 0.242,0.147 0.224,0.165 -0.035,0.305 0.763,0.266 0.172,-0.002 0.082,0.047 -0.002,0.069 -0.06,0.213 -0.314,0.654 -0.025,0.135 -0.225,0.142 -0.031,0.082 0.064,0.179 z",
                        title: "Kosovo",
                        id: "XK",
                    },
                    {
                        d:
                            "m 609.54675,375.1874 -0.014,0.119 0.09,0.355 0.201,0.387 0.165,0.313 0.021,0.147 -0.151,-0.021 -0.115,-0.059 -0.221,-0.062 -0.427,0.415 -0.258,0.226 -0.007,0.077 0.344,0.087 0.253,-0.002 0.176,-0.061 0.149,0.097 0.098,0.256 0.039,0.208 0.234,0.739 0.194,0.249 0.242,0.44 0.09,0.228 0.052,0.191 0.148,0.282 -0.488,0.007 -0.615,0.01 -0.499,0.006 -0.563,0.007 -0.248,-0.301 -0.083,-0.33 -0.09,-0.339 -0.247,-0.484 -0.826,-0.117 -0.439,-0.063 -0.723,-0.092 -0.542,-0.069 0.456,-0.522 0.212,-0.281 0.383,-0.609 0.197,-0.435 0.19,-0.483 0.164,-0.376 0.034,-0.069 0.095,-0.128 0.21,-0.131 0.303,-0.123 0.515,-0.054 0.362,-0.003 0.082,0.006 0.228,0.061 0.629,0.301 z m 0.833,1.153 -0.161,0.072 -0.108,-0.031 -0.104,-0.173 -0.171,-0.43 0.093,-0.161 -0.003,-0.069 0.019,-0.052 0.053,-0.033 0.055,-0.203 0.074,-0.062 0.12,0.137 0.338,0.495 -0.002,0.202 -0.02,0.081 -0.183,0.227 z",
                        title: "Kuwait",
                        id: "KW",
                    },
                    {
                        d:
                            "m 250.87175,406.8394 -0.131,0.045 -0.102,-0.018 0.23,-0.123 0.059,-0.042 0.051,-0.022 0.053,0 0.067,0.025 0,0.019 -0.227,0.116 z m -0.436,0.011 -0.028,0.017 -0.09,-0.013 -0.206,0.121 -0.089,-0.007 0.027,-0.042 0.043,-0.04 0.048,-0.029 0.045,-0.012 0.144,-0.024 0.068,-0.003 0.047,0.027 -0.009,0.005 z m -3.903,1.063 0.091,0.057 0.114,-0.035 0.033,-0.063 0.433,0.046 0.065,0.123 -0.33,0.003 -0.148,0.079 -0.074,0.016 -0.283,-0.019 -0.041,-0.285 0.079,-0.03 0.061,0.108 z",
                        title: "Cayman Islands",
                        id: "KY",
                    },
                    {
                        d:
                            "m 719.96575,305.1724 -0.26,-0.085 -0.51,-0.018 -0.311,0.053 -0.146,0.03 -0.218,0.175 -0.155,0.174 -0.068,0.296 0.082,0.334 -0.112,0.694 -0.152,0.261 -0.32,0.453 -0.186,0.098 -0.312,0.081 -0.3,0.134 -0.588,0.13 -0.635,0.066 -0.226,0.097 -0.161,0.309 -0.114,0.257 -0.07,0.196 -0.18,0.638 -0.102,0.569 0.1,0.705 0.075,0.781 -0.005,0.269 0.155,0.398 0.078,0.244 -0.037,0.346 -0.223,0.272 -0.134,0.36 -0.126,0.153 -0.363,0.069 -0.342,0.042 -0.345,0.309 -0.276,0.213 -0.432,0.271 -0.203,0.051 -0.112,-0.138 -0.074,-0.307 -0.148,-0.136 -0.209,-0.011 -0.168,-0.003 -0.543,-0.083 -0.348,0.006 -0.261,0.066 -0.298,0.033 -0.515,-0.112 -0.333,-0.095 -0.224,-0.091 -0.535,-0.269 -0.703,-0.32 -0.288,-0.094 -0.171,0.096 -0.026,0.183 -0.045,0.443 -0.082,0.277 -0.49,1.396 -0.303,0.966 -0.385,0.923 -0.122,0.617 -0.23,0.779 -0.229,0.563 -0.093,0.306 -0.008,0.125 0.04,0.175 0.351,0.191 0.368,0.117 0.081,0.073 0.04,0.198 -0.014,0.324 -0.067,0.306 -0.106,0.24 -0.105,0.119 -0.12,0.007 -0.23,-0.154 -0.205,-0.172 -0.159,-0.052 -0.404,0.096 -0.374,0.131 -0.125,0.004 -0.217,-0.084 -0.219,-0.174 -0.087,-0.337 -0.188,-0.153 -0.252,0.153 -0.75,0.257 -0.826,0.306 -0.525,0.158 -0.205,-0.024 -0.407,0.036 -0.353,0.085 -0.265,0.118 -0.523,0.163 -0.475,0.109 -0.306,0.247 -0.22,0.238 0.009,0.09 0.16,0.141 0.183,0.11 0.366,-0.026 0.357,-0.017 0.297,0.149 0.266,0.096 0.073,0.124 -0.073,0.121 -0.154,0.028 -0.054,0.084 0.027,0.113 -0.102,0.294 -0.053,0.445 0.053,0.438 0.029,0.403 -0.019,0.203 -0.01,0.289 0.113,0.195 0.101,0.371 0.181,0.232 0.273,0.802 0.161,0.467 0.148,0.528 -0.107,0.285 0.007,0.165 0.174,0.138 0.076,0.269 0.081,0.164 -0.022,0.163 -0.074,0.063 -0.377,-0.099 -0.309,0.163 -0.328,0.164 -0.044,0.087 -0.009,0.095 0.033,0.083 0.189,0.146 0.261,0.091 -0.013,0.146 -0.323,0.067 -0.487,0.223 -0.135,0.239 -0.104,0.263 -0.009,0.152 0.049,0.407 0.074,0.45 0.139,0.474 0.011,0.146 -0.072,0.104 -0.067,0.067 -0.387,-0.427 -0.422,-0.417 -0.33,-0.096 -0.575,-0.069 -0.305,-0.003 -0.173,-0.099 -0.17,-0.242 -0.203,-0.219 -0.26,-0.232 -0.106,-0.354 -0.107,-0.063 -0.188,0.045 -0.314,-0.011 -0.176,-0.031 -0.263,-0.061 -0.419,-0.145 -0.331,-0.137 -0.417,-0.026 -0.24,0.027 -0.749,0.026 -0.622,-0.144 -0.503,-0.026 -0.31,0.008 -0.148,-0.018 -0.254,10e-4 -0.374,-0.031 -0.5,-0.222 -0.194,-0.011 -0.123,0.008 -0.836,0.163 -0.385,0.038 -0.817,-0.019 -0.802,-0.018 -0.258,-0.034 -0.143,0.017 -0.303,0.391 -0.13,0.061 -0.756,-0.085 -0.894,-0.257 -0.646,-0.282 -0.548,-0.299 -0.726,-0.472 -0.434,-0.233 -0.063,0.134 -0.115,0.043 -0.167,0.021 -0.385,-0.024 -0.178,0.239 -0.47,0.171 -0.299,0.153 -0.156,0.173 -0.298,1.143 -0.08,0.417 0.2,0.7 -0.229,-0.041 -0.269,-0.179 -0.093,-0.141 -0.259,-0.086 -0.942,-0.13 -0.176,-0.161 -0.11,-0.131 -0.244,-0.086 -0.345,-0.066 -0.75,-0.304 -0.32,-0.011 -0.968,-0.234 -0.158,0.002 -0.072,0.01 -0.376,0.153 -0.243,0.044 -0.259,-0.062 -0.464,0.189 -0.251,0.252 -0.207,0.308 -0.198,0.194 -0.059,0.29 -0.14,0.15 -0.167,0.3 0,0.175 0.151,0.17 -0.242,0.157 -0.269,0.049 -0.139,0.096 -0.148,0.231 -0.138,0.198 -0.081,0.07 -0.124,-0.013 -0.144,-0.154 -0.205,0.007 -0.244,0.19 -0.29,0.309 -0.365,0.471 -0.381,0.25 -0.482,0.212 -0.349,0.094 -0.276,0.161 -0.461,0.326 -0.092,0.192 -0.334,0.113 -0.269,0.13 -0.249,0.217 -0.061,0.383 -0.158,0.22 -0.381,0.301 -0.32,0.304 -0.209,0.298 -0.221,0.315 -0.069,0.173 -0.008,0.237 0.104,0.199 0.02,0.189 -0.079,0.137 -0.216,0.052 -0.226,-0.04 -0.347,-0.135 -0.369,-0.242 -0.135,-0.119 -0.181,-0.204 0.026,-0.189 0.093,-0.369 0.063,-0.253 -0.15,-0.121 -0.111,-0.13 -0.079,-0.125 -0.156,-0.247 -0.196,0.061 -0.17,0.061 -0.197,-0.087 -0.581,0.038 -0.438,0.028 -0.412,0.026 -0.522,0.034 -0.63,0.041 -0.181,-0.054 -0.113,-0.082 -0.114,-0.341 -0.066,-0.29 -0.122,-0.543 -0.082,-0.421 -0.097,-0.502 -0.064,-0.556 -0.046,-0.396 -0.477,-0.013 -0.381,-0.01 -0.515,-0.014 0.004,-0.316 0.006,-0.399 0.007,-0.455 0.096,-0.598 0.036,-0.502 0.045,-0.615 0.028,-0.407 0.032,-0.449 -0.266,0.139 -0.293,0.153 -0.275,0.143 -0.189,-0.363 -0.184,-0.354 -0.279,-0.539 -0.209,-0.404 -0.363,-0.237 -0.271,-0.175 -0.279,-0.295 -0.241,-0.307 -0.229,-0.292 -0.274,-0.253 -0.263,0.08 -0.297,0.159 -0.286,0.152 -0.303,0.162 -0.148,0.079 -0.352,-0.03 -0.307,-0.026 -0.549,-0.047 -0.463,-0.04 -0.473,-0.041 -0.659,-0.057 -0.668,-0.057 -0.446,0.076 -0.566,0.095 -0.594,0.1 -0.491,0.083 -0.622,0.104 -0.465,0.078 -0.229,-0.011 -0.288,-0.328 -0.462,-0.527 -0.279,-0.32 -0.274,-0.314 -0.396,-0.453 -0.318,-0.344 -0.311,-0.336 -0.179,-0.311 -0.089,-0.392 -0.162,-0.178 -0.36,-0.24 -0.388,-0.258 -0.388,-0.258 -0.388,-0.258 -0.388,-0.259 -0.388,-0.259 -0.388,-0.259 -0.388,-0.26 -0.388,-0.26 -0.388,-0.26 -0.388,-0.261 -0.379,-0.258 -0.388,-0.261 -0.388,-0.262 -0.388,-0.262 -0.388,-0.262 -0.388,-0.262 -0.319,-0.191 -0.297,0.05 -0.444,0.134 -0.466,0.14 -0.461,0.139 -0.826,0.248 -0.531,0.16 -0.415,0.134 -0.442,0.143 -0.58,0.187 -0.486,0.157 -0.569,0.184 -0.505,0.163 -0.424,0.136 -0.442,0.143 -0.35,0.112 0,0.906 0,0.902 10e-4,0.899 0,0.896 0,0.892 10e-4,0.888 0,0.885 0,0.881 0,0.878 10e-4,0.875 0,0.872 0,0.869 10e-4,0.865 0,0.862 0,0.859 0.001,0.856 -0.12,-0.007 -0.269,0.05 -0.45,0.119 -0.374,0.06 -0.164,-0.037 -0.147,-0.089 -0.129,-0.188 -0.192,-0.229 -0.197,-0.186 -0.245,-0.381 -0.17,-0.293 -0.419,-0.642 -0.059,-0.203 -0.078,-0.207 -0.14,-0.173 -0.494,-0.425 -0.575,-0.384 -0.564,-0.377 -0.159,-0.092 -0.264,-0.117 -0.325,-0.002 -0.222,0.023 -0.676,0.125 -0.519,0.146 -0.703,0.198 -0.545,0.219 -0.122,0.064 -0.398,0.264 -0.487,0.438 -0.569,0.616 -0.074,-0.396 -0.025,-0.611 0.01,-0.197 0.155,-0.515 0.157,-0.354 0.126,-0.369 0.057,-0.483 -0.117,-0.778 -0.131,-0.173 -0.157,-0.056 -0.168,-0.016 -0.309,0.032 -0.144,0.063 -0.251,-0.263 -0.303,-0.042 -0.16,0.073 -0.162,0.038 -0.176,-0.073 -0.152,-0.156 -0.093,-0.168 -0.072,-0.19 -0.238,-0.382 -0.236,-0.208 -0.286,-0.046 -0.467,0.012 -0.147,-0.026 -0.008,-0.217 0.059,-0.48 10e-4,-0.251 -0.033,-0.237 -0.078,-0.195 -0.099,-0.169 -0.278,-0.278 -0.21,-0.392 -0.351,-0.809 -0.307,-0.912 -0.135,-0.138 -0.274,-0.145 -0.599,-0.116 -0.395,-0.12 -0.155,-0.116 -0.065,-0.201 0.002,-0.216 0.032,-0.255 0.092,-0.216 0.314,-0.167 0.683,-0.037 0.583,0.018 0.529,0.386 0.173,0.088 0.188,0.025 0.374,-0.122 0.186,-0.035 0.468,0.04 -0.14,-0.183 -0.176,-0.096 -0.182,0.008 -0.157,-0.075 -0.259,-0.354 -0.449,-0.404 -0.104,-0.167 -0.032,-0.268 0.087,-0.231 0.318,-0.237 0.271,-0.323 0.123,-0.429 0.111,-0.198 0.23,-0.311 0.348,0.06 0.542,-0.225 0.887,0.044 1.062,-0.064 0.292,0.023 0.677,0.22 0.389,0.095 0.473,0.048 0.341,-0.097 -0.321,-0.3 -0.697,-0.356 -0.179,-0.304 0.319,-0.828 0.432,-0.757 0.264,-0.902 -0.074,-0.9 -0.126,-0.249 0.041,-0.293 0.15,-0.248 0.106,-0.247 -0.092,-0.298 -0.19,-0.466 -0.098,-0.151 -0.333,-0.252 -0.669,-0.011 -0.546,-0.138 -0.177,0.111 -0.1,0.17 -0.125,0.112 -0.425,0.226 -0.142,0.045 -0.148,-0.045 -0.209,-0.254 -0.186,0.028 -0.563,-0.159 -0.265,-0.346 -0.099,-0.048 -0.91,-0.277 -0.316,-0.053 -0.725,0.285 -0.525,0.365 -0.148,0.053 -0.271,0.231 -0.153,0.037 -0.157,-0.04 -0.149,0.014 -0.317,0.346 -0.574,0.402 -0.285,0.253 -0.318,0.157 -0.354,0.099 -0.361,0.016 -0.133,0.091 -0.413,0.032 -0.252,0.074 -0.009,0.137 0.05,0.306 -0.214,-0.108 -0.225,0.208 0.074,0.196 -0.135,-0.047 -0.632,-0.378 -0.519,-0.268 -0.461,-0.238 -0.067,-0.043 -0.126,-0.116 -0.09,-0.181 -0.019,-0.198 0.045,-0.146 0.112,-0.093 0.132,-0.036 0.117,0.03 0.13,0.089 0.232,0.108 0.301,0.02 0.188,-0.083 0.025,-0.199 -0.358,-0.738 -0.33,-0.597 -0.319,-0.666 -0.135,-0.242 -0.391,-0.56 -0.386,-0.553 -0.305,-0.494 -0.16,-0.152 -0.492,-0.063 -0.938,-0.122 -0.332,-0.058 -0.266,0.147 -0.267,0.115 -0.253,-0.214 -0.2,-0.352 -0.105,-0.296 0.051,-0.303 0.021,-0.448 -0.153,-0.442 -0.169,-0.219 -0.424,-0.165 -0.54,-0.373 -0.145,-0.683 0.262,-0.982 0.422,-0.698 0.307,-0.293 0.146,-0.256 0.048,-0.222 -0.037,-0.212 -0.182,-0.226 -0.282,-0.22 -0.143,-0.271 0.059,-0.582 0.187,-0.841 0.288,-0.675 0.386,-0.375 0.333,-0.269 0.131,-0.251 0.007,-0.357 -0.008,-0.337 0.089,-0.245 0.14,-0.195 0.148,-0.175 0.208,-0.196 0.27,-0.048 0.297,0.156 0.404,0.419 0.592,0.825 0.338,0.539 0.122,0.166 0.309,0.32 0.279,0.129 0.465,-0.2 0.446,-0.233 0.144,-0.148 0.092,-0.221 -0.071,-0.378 -0.093,-0.247 -0.099,-0.315 -0.137,-0.549 -0.097,-0.864 -0.115,-0.275 0.084,-0.032 0.224,0.057 0.207,0.025 0.296,-0.191 0.406,-0.36 0.743,-0.557 0.157,-0.368 0.127,-0.41 0.206,-0.252 0.473,-0.083 0.438,-0.132 0.309,-0.292 0.484,-0.257 0.398,-0.156 0.175,-0.144 0.125,-0.216 0.456,-0.61 0.358,-0.376 0.315,-0.388 0.105,-0.244 0.249,0.045 0.38,0.169 0.408,0.154 0.299,0.239 0.059,0.244 0.029,0.192 0.121,0.099 0.145,0.019 0.218,-0.048 0.381,-0.009 0.467,-0.316 0.65,-0.534 0.595,-0.166 0.313,0.127 0.259,0.393 0.205,0.369 0.211,0.137 0.131,0.004 0.048,0.006 0.262,-0.084 0.02,0.001 0.239,0.015 0.23,0.125 0.381,0.014 0.531,-0.095 0.056,-0.039 0.255,0.051 0.31,0.17 0.241,0.202 0.432,0.662 0.248,0.17 0.506,0.235 0.237,0.205 0.276,0.332 0.144,0.201 0.3,0.363 0.347,0.593 0.062,0.471 0.079,0.397 0.129,0.188 0.106,0.023 0.114,-0.065 0.112,-0.181 0.039,-0.302 -0.034,-0.535 -0.089,-0.438 -0.114,-0.139 -0.055,-0.154 0.075,-0.196 0.193,-0.095 0.24,0.06 0.395,0.252 0.412,0.317 0.507,0.554 0.465,0.351 0.509,0.28 0.404,0.083 0.313,-0.084 0.369,-0.228 0.338,-0.264 0.154,-0.277 0.11,-0.303 0.51,-0.405 0.466,-0.371 0.212,0.067 0.149,0.105 0.478,-0.226 0.166,-0.062 0.455,-0.088 0.47,0.13 0.375,0.398 0.363,0.256 0.325,-0.03 0.269,-0.131 0.178,-0.248 0.135,-0.293 0.18,-0.188 0.027,-0.012 0.579,0.102 0.363,-0.015 0.039,-0.042 0.479,0.08 0.529,0.413 0.328,0.457 0.42,0.581 0.195,0.189 0.284,0.081 0.223,0.035 0.299,0.09 0.79,0.121 0.12,0.071 0.081,0.095 -0.073,0.316 0.07,0.08 0.641,-0.225 0.172,-0.168 0.211,-0.478 0.189,-0.482 0.141,-0.179 0.149,-0.047 0.15,0.072 0.21,0.285 0.284,0.29 0.384,0.11 0.234,0.044 0.363,0.024 0.854,-0.141 0.799,-0.351 0.456,-0.382 0.212,-0.574 0.133,-0.654 0.204,-0.414 -0.085,-0.424 -0.402,-0.404 -0.136,-0.122 -0.978,-0.227 -0.06,-0.164 -0.056,-0.038 -0.964,-0.36 -0.464,-0.154 -0.131,-0.238 -0.086,-0.312 -0.301,-0.279 -0.598,-0.254 -0.104,-0.194 0.099,-0.196 0.472,-0.218 0.539,-0.46 0.207,-0.095 0.479,-0.021 0.444,-0.377 0.306,-0.216 0.16,-0.257 -0.042,-0.266 -0.444,-0.805 -0.132,-0.489 0.079,-0.319 0.255,-0.345 0.145,-0.189 0.174,-0.34 0.114,-0.182 0.448,-0.077 0.543,-0.032 0.373,0.081 0.521,0.042 0.475,0.063 0.24,0.056 0.177,-0.104 0.128,-0.183 -0.004,-0.242 -0.187,-0.235 -0.697,-0.309 -0.299,-0.255 -0.234,0.028 -0.392,-0.08 -0.354,-0.167 -0.313,-0.056 -0.102,-0.232 0.064,-0.326 0.121,-0.187 0.231,-0.093 0.251,0.047 0.273,-0.136 0.079,-0.08 0.023,-0.103 -0.044,-0.147 -0.127,-0.121 -0.18,-0.032 -0.207,0.103 -0.248,0.067 -0.419,-0.151 -0.334,-0.182 0.017,-0.168 0.247,-0.251 0.111,-0.204 0,-0.282 0,-0.33 0.086,-0.387 0.245,-0.265 0.288,-0.142 0.742,0.259 0.928,0.231 0.159,-0.038 0.047,-0.122 0.106,-0.108 1.288,-0.05 0.25,-0.149 0.125,-0.119 1.238,-0.171 0.147,-0.163 0.182,-0.152 0.285,0.003 0.339,-0.061 0.473,-0.186 0.335,-0.102 0.056,-0.008 0.354,0.041 0.439,-0.147 0.095,-0.061 0.071,-0.111 0.383,-0.214 0.735,-0.176 0.179,0.105 0.351,0.048 0.447,-0.079 0.33,-0.135 0.192,0.134 0.261,0.138 0.195,-0.117 0.097,-0.369 0.126,-0.361 0.221,-0.171 0.175,-0.063 0.158,-0.139 0.119,-0.145 0.647,0.022 0.579,-0.361 0.114,0.164 0.752,-0.038 0.934,-0.233 0.559,-0.109 0.965,-0.244 0.446,-0.198 0.639,-0.125 0.586,-0.087 0.383,-0.347 0.309,-0.049 0.376,-0.029 0.23,-0.083 0.15,-0.128 0.097,-0.241 -0.053,-0.308 -0.054,-0.224 0.269,-0.125 0.384,-0.039 0.242,-0.051 0.528,-0.51 0.364,-0.245 0.377,-0.154 0.757,0.084 0.691,0.077 0.693,0.244 0.364,0.304 0.313,0.229 0.296,0.109 0.268,0.07 0.311,-0.104 0.22,-0.14 0.128,-0.201 0.194,-0.144 0.707,-0.112 0.146,0.217 0.336,0.653 0.229,0.867 0.377,1.145 0.166,0.561 -0.073,0.293 10e-4,0.401 -0.021,0.44 -0.278,0.497 0.113,0.231 0.683,0.257 0.956,-0.094 0.59,-0.208 0.329,0.076 0.172,-0.125 0.111,-0.368 0.227,-0.083 0.233,0.257 0.169,0.434 0.162,0.279 -0.012,0.332 0.06,0.425 0.119,0.107 0.234,-0.161 0.156,-0.096 0.037,-0.129 -0.066,-0.159 -0.031,-0.162 0.052,-0.149 0.111,-0.061 0.333,0.047 0.485,0.082 0.576,0.604 0.311,0.109 0.131,0.011 0.292,-0.035 0.351,-0.173 0.236,-0.218 0.079,-0.107 0.136,0.019 0.129,0.101 0.009,0.22 -0.103,0.318 -0.35,0.291 -0.435,0.27 -0.264,0.494 -0.056,0.514 0.115,0.261 0.099,0.174 0.028,0.244 0.098,0.032 0.178,-0.1 0.485,-0.506 0.247,-0.125 0.358,-0.08 0.589,0.04 0.396,0.165 0.189,0.229 0.208,0.189 0.144,-0.079 0.074,-0.218 0.004,-0.25 0.061,-0.206 0.644,-0.507 0.429,-0.338 0.147,-0.04 0.287,0.07 0.178,-0.036 0.471,-0.318 0.44,-0.363 0.043,-0.246 0.017,-0.223 0.109,-0.101 0.616,-0.078 0.102,-0.042 0.526,-0.254 0.729,-0.434 0.354,-0.256 0.645,-0.114 0.12,-0.074 0.214,-0.173 0.404,-0.24 0.219,-0.026 -0.136,0.58 -0.241,0.668 -0.136,0.178 -0.654,-0.03 0.001,0.182 0.103,0.278 0.074,0.156 0.079,0.14 0.176,0.242 0.688,0.569 0.875,0.722 0.945,0.808 0.66,0.562 0.267,0.29 0.17,0.226 0.486,0.814 0.462,0.769 0.779,1.348 0.689,1.294 0.76,1.415 0.439,0.814 0.898,1.693 0.24,0.517 0.455,0.976 0.401,0.911 0.355,0.802 0.224,0.072 0.018,-0.217 0.04,-0.145 0.114,-0.082 0.262,-0.237 0.141,-0.057 0.21,0.024 0.22,-0.121 0.081,-0.228 -0.053,-0.423 -0.034,-0.195 0.075,-0.21 0.12,-0.082 0.167,-0.066 0.154,-0.034 0.126,-0.237 0.238,-0.072 0.219,0.044 0.18,0.009 0.159,0.173 0.089,0.237 0.172,0.019 0.281,-0.024 0.039,0.198 -0.08,0.331 -0.099,0.256 -0.017,0.205 0.149,0.1 0.546,-0.089 0.193,0.044 0.062,0.208 0.078,0.172 0.038,0.21 -0.057,0.232 0.098,0.139 0.471,0.003 0.332,-0.112 0.51,-0.009 0.461,0.246 0.319,-0.038 0.321,-0.1 0.471,0.063 0.331,-0.194 0.228,-0.243 0.071,-0.191 0.119,-0.106 0.444,10e-4 0.28,-0.019 0.207,-0.281 0.189,-0.127 0.318,-0.024 0.234,0 0.629,0.261 0.383,0.216 0.398,0.307 0.239,0.192 0.161,0.433 0.271,0.318 0.216,0.371 0.052,0.365 0.178,0.655 0.184,0.215 0.218,0 0.275,0.089 0.304,0.071 0.65,0.485 0.239,0.014 0.184,0.116 0.028,0.223 -0.068,0.258 0.071,0.247 0.213,0.315 0.168,0.307 0.207,0.372 0.063,0.212 0.166,0.07 0.224,-0.105 0.356,0.08 1.071,0.211 0.149,0.026 0.114,0.22 0.155,-0.018 0.178,-0.009 0.247,0.026 0.172,-0.203 0.141,-0.178 0.353,-0.22 0.293,-0.299 0.246,-0.266 0.184,-0.035 0.149,0.124 0.006,0.23 -0.184,0.168 -0.144,0.203 0.034,0.203 0.247,0.018 0.274,0.305 0.396,0.713 0.134,0.149 0.196,0.14 0.217,0.063 0.24,0.102 0.178,0.293 0.085,0.266 z m -103.872,16.897 -0.097,0.054 -0.059,-0.252 0.108,-0.212 0.154,-0.028 -0.053,0.335 -0.053,0.103 z m -0.356,0.464 -0.101,0.111 -0.15,-0.017 -0.281,-0.419 0.079,-0.426 0.102,-0.087 0.142,-0.06 0.019,0.094 -0.199,0.191 -0.019,0.241 0.167,0.267 0.241,0.105 z",
                        title: "Kazakhstan",
                        id: "KZ",
                    },
                    {
                        d:
                            "m 761.51475,398.8644 0.156,0.287 0.332,0.319 0.396,0.455 0.126,0.209 0.267,0.16 0.076,0.158 0.061,0.242 0.027,0.18 0.059,0.106 0.094,0.042 0.121,-0.047 0.091,-0.096 0.076,-0.265 0.05,-0.028 0.082,0.218 0.087,0.037 0.117,0.029 0.089,0.094 0.027,0.166 -0.03,0.169 -0.109,0.19 -0.062,0.2 -0.043,0.307 -0.058,0.214 0.09,0.189 0.62,0.93 0.298,0.152 0.709,0.182 0.256,0.125 0.226,0.122 0.222,-0.059 0.214,-0.277 0.257,-0.155 0.478,-0.238 0.137,-0.013 0.264,0.095 0.434,0.277 0.313,0.26 0.194,0.137 0.148,0.123 -0.023,0.138 -0.119,0.136 -0.151,0.075 -0.199,0.131 -0.113,0.132 0.069,0.049 0.292,0.033 0.345,0.117 0.105,0.137 0.015,0.117 0.042,0.191 0.061,0.058 0.319,-0.034 0.099,0.043 0.115,0.098 0.114,0.257 -0.003,0.192 -0.231,0.211 -0.086,0.128 -0.038,0.201 -0.164,0.241 -0.436,0.404 -0.117,0.024 -0.803,-0.222 -0.373,0.014 -0.18,0.007 -0.087,0.01 -0.052,0.084 0.107,0.244 0.032,0.242 -0.1,0.184 -0.267,0.16 -0.101,0.077 -0.012,0.104 0.075,0.108 0.246,0.111 0.287,0.104 0.946,0.625 0.202,0.147 0.268,0.217 0.29,0.168 0.776,0.222 0.343,0.145 0.088,0.082 -0.003,0.101 -0.09,0.129 -0.074,0.226 -0.004,0.136 0.081,0.131 0.137,0.196 0.308,0.303 0.169,0.135 0.187,0.03 0.164,0.074 0.169,0.225 0.196,0.275 0.026,0.192 0.084,0.246 0.179,0.282 0.247,0.274 0.346,0.339 0.199,0.239 0.092,0.093 0.738,0.579 0.18,0.214 0.26,0.412 0.11,0.06 0.104,0.081 0.066,0.226 0.022,0.162 0.035,0.496 0.134,0.147 0.123,0.181 0.052,0.132 0.112,0.098 0.122,0.018 0.145,-0.109 0.115,-0.105 0.053,0.031 0.116,0.346 0.107,0.126 0.2,0.121 0.19,0.093 0.415,0.416 0.221,0.152 0.152,0.048 0.129,0.071 0.039,0.132 -0.051,0.133 -0.088,0.087 -0.483,0.241 -0.064,0.105 0.066,0.16 0.121,0.2 0.132,0.172 0.166,0.169 0.339,0.274 0.294,0.214 0.161,0.237 0.089,0.158 -0.055,0.189 -0.124,0.207 -0.096,0.177 -0.165,0.103 -0.045,0.119 0.068,0.185 0.056,0.127 -0.03,0.158 0.015,0.323 -0.152,0.116 -0.142,0.294 -0.097,0.022 -0.245,-0.107 -0.086,0.059 -0.156,0.214 -0.272,0.233 -0.132,0.003 -0.091,-0.028 -0.106,0.099 -0.152,0.184 -0.07,-0.006 -0.262,0.042 -0.102,-0.059 -0.127,-0.151 -0.204,-0.154 -0.186,-0.11 -0.099,-0.074 -0.092,-0.128 -0.083,-0.083 -0.154,0.182 -0.257,0.174 -0.245,-0.033 -0.12,-0.029 -0.096,0.253 -0.072,0.046 -0.44,0.044 -0.083,0.04 0.071,0.231 0.26,0.391 0.078,0.224 -0.162,0.368 -0.456,-0.01 -0.204,-0.149 -0.19,-0.209 -0.068,-0.103 -0.584,-0.205 -0.391,0.141 -0.119,-0.007 -0.182,-0.149 -0.111,-0.112 -0.108,-0.17 -0.061,-0.172 -0.005,-0.078 0.168,-0.062 0.277,-0.141 0.226,-0.158 0.149,-0.168 0.06,-0.175 0.008,-0.203 0.065,-0.526 0.066,-0.256 -0.037,-0.316 -0.121,-0.248 0,-0.373 0.044,-0.182 0.02,-0.12 0.17,-0.151 0.117,-0.217 0.066,-0.283 0.006,-0.204 -0.053,-0.126 -0.168,-0.12 -0.281,-0.113 -0.178,-0.144 -0.072,-0.173 0.007,-0.152 0.086,-0.132 -0.212,-0.146 -0.511,-0.161 -0.285,-0.194 -0.06,-0.226 -0.213,-0.296 -0.366,-0.367 -0.193,-0.528 -0.02,-0.69 0.043,-0.562 0.16,-0.651 -0.214,-0.472 -0.235,-0.249 -0.327,-0.183 -0.312,-0.262 -0.297,-0.343 -0.354,-0.506 -0.414,-0.67 -0.278,-0.3 -0.143,0.07 -0.299,-0.063 -0.456,-0.194 -0.397,-0.105 -0.34,-0.015 -0.221,0.044 -0.102,0.103 -0.008,0.101 0.086,0.1 -0.047,0.078 -0.178,0.056 -0.143,0.11 -0.162,0.246 0.004,-0.01 -0.006,0.013 0.002,-0.003 -0.111,0.322 -0.169,0.124 -0.26,0.027 -0.255,0.092 -0.252,0.156 -0.12,0.119 0.014,0.081 -0.055,0.018 -0.123,-0.045 -0.058,-0.106 0.007,-0.168 -0.129,-0.112 -0.263,-0.058 -0.3,-0.179 -0.338,-0.303 -0.234,-0.161 -0.131,-0.02 -0.187,0.12 -0.246,0.26 -0.202,0.102 -0.159,-0.053 -0.123,0.091 -0.086,0.237 -0.159,0.185 -0.348,0.203 -0.023,0.024 -0.398,0.273 -0.319,0.275 -0.371,0.369 -0.175,0.057 -0.167,-0.09 -0.252,-0.09 -0.133,-0.125 0.254,-0.625 0.321,-0.693 0.086,-0.32 0.013,-0.234 -0.031,-0.19 -0.126,-0.199 -0.118,-0.154 -0.011,-0.103 0.038,-0.108 0.129,-0.161 0.166,-0.25 0.154,-0.513 0.185,-0.544 -0.018,-0.33 -0.149,-0.362 -0.082,-0.344 0.065,-0.469 -0.024,-0.183 -0.161,-0.092 -0.528,-0.093 -0.17,0.016 -0.134,0.06 -0.145,0.128 -0.176,0.08 -0.332,0.045 -0.314,-0.159 -0.263,-0.27 -0.063,-0.33 0.193,-0.394 0.135,-0.319 0.08,-0.274 -0.009,-0.13 -0.056,-0.135 -0.079,-0.019 -0.168,-0.168 -0.164,-0.296 -0.156,-0.136 -0.145,0.025 -0.135,0.113 -0.123,0.198 -0.097,0.082 -0.069,-0.037 0.021,-0.175 0.02,-0.166 0.152,-0.646 0.184,-0.42 0.216,-0.195 0.228,-0.083 0.24,0.031 0.203,-0.036 0.162,-0.103 -0.015,-0.059 -0.192,-0.015 -0.077,-0.112 0.041,-0.211 0.084,-0.137 0.132,-0.063 0.128,-0.212 0.123,-0.363 0.151,-0.183 0.176,-0.005 0.303,-0.155 0.429,-0.307 0.165,-0.297 0.162,0.136 -0.061,0.344 0.085,0.072 0.04,0.123 -0.022,0.192 0.036,0.163 0.066,0.079 0.093,0.04 0.455,-0.14 0.278,-0.01 0.117,0.092 0.105,0.057 0.132,0.044 0.102,0.059 0.065,-0.019 0.156,-0.143 0.047,-0.025 0.005,-0.07 -0.109,-0.129 -0.113,-0.108 0.004,-0.24 0.053,-0.416 0.011,-0.216 -0.01,-0.517 -0.02,-0.146 -0.104,-0.168 -0.271,-0.323 -0.076,-0.197 -0.044,-0.197 0.004,-0.125 -0.069,-0.143 -0.035,-0.133 0.121,-0.068 0.147,-0.154 0.074,-0.235 0.07,-0.172 0.102,-0.073 0.088,-0.027 0.059,0.015 0.23,0.308 0.291,-0.154 0.22,0.001 0.189,0.081 z",
                        title: "Lao People's Democratic Republic",
                        id: "LA",
                    },
                    {
                        d:
                            "m 575.56175,363.8614 -0.08,0.055 -0.149,0.153 -0.149,0.124 -0.301,0.193 -0.068,0.115 -0.067,-0.104 -0.131,0.071 -0.11,0.437 -0.23,0.146 -0.288,-0.013 -0.24,-0.041 -0.322,0.027 0.131,-0.254 0.136,-0.331 0.134,-0.446 0.237,-0.371 0.491,-1.264 0.284,-0.513 0.101,-0.73 0.439,-0.639 0.328,-0.19 0.159,-0.183 -0.004,-0.278 0.49,0.002 0.316,-0.014 0.091,-0.156 0.247,0.071 0.137,0.15 -0.124,0.159 -0.175,0.181 0.01,0.047 0.131,0.015 0.222,0.098 0.136,0.115 0.227,0.714 -0.14,0.293 -0.218,0.262 -0.097,0.023 -0.191,0.13 -0.16,0.178 -0.056,0.112 0.012,0.105 0.226,0.131 0.007,0.053 -0.047,0.042 -0.183,-0.029 -0.236,-0.014 -0.139,10e-4 -0.161,0.026 -0.206,0.16 -0.092,0.106 -0.049,0.068 -0.074,0.217 0.083,0.149 0.154,0.085 0.022,0.043 -0.035,0.075 -0.153,0.094 -0.115,0.115 -0.033,0.117 z",
                        title: "Lebanon",
                        id: "LB",
                    },
                    { d: "m 303.99375,424.0054 -0.158,0.3 -0.307,-0.188 -0.034,-0.237 0.027,-0.143 0.187,-0.274 0.146,-0.178 0.103,-0.059 0.06,0.236 z", title: "Saint Lucia", id: "LC" },
                    {
                        d: "m 501.78175,313.6684 -0.218,-0.022 -0.041,0.002 -0.023,-0.145 0.013,-0.309 0.121,-0.404 0.026,0.066 0.015,0.085 0.025,0.09 0.014,0.11 0.045,0.113 0.082,0.107 0.026,0.102 -0.041,0.129 z",
                        title: "Liechtenstein",
                        id: "LI",
                    },
                    {
                        d:
                            "m 699.36475,435.4304 0.27,0.015 0.288,-0.007 0.201,0.039 0.346,0.436 0.94,0.78 0.513,0.792 0.046,0.173 0.071,0.15 0.123,0.041 0.104,0.068 0.511,0.764 0.06,0.151 -0.009,0.167 0.03,0.124 0.134,0.062 0.166,0.032 0.109,0.115 0.139,0.609 0,0.19 0.039,0.081 0.644,0.947 0.037,0.115 -0.007,0.086 0.019,0.075 0.125,0.167 0.194,0.451 0.1,0.103 0.118,0.394 0.008,0.753 -0.044,0.334 -0.12,0.408 -0.143,0.398 -0.154,0.288 -0.211,0.243 -0.723,0.517 -0.207,0.104 -0.94,0.324 -0.693,0.306 -0.641,0.083 -0.642,-0.169 -0.482,-0.402 -0.247,-0.593 -0.17,-0.618 -0.245,-0.687 -0.189,-2.124 -0.09,-0.594 -0.146,-0.758 0.015,-0.329 0.104,-0.315 -10e-4,0.691 0.096,0.086 0.071,-0.089 0.064,-0.716 0.053,-0.303 0.256,-0.79 0.005,-0.14 -0.044,-0.297 0.002,-0.149 0.382,-0.554 0.098,-0.323 0.053,-0.33 -0.021,-0.357 -0.068,-0.352 0.308,0.112 0.17,0.123 0.173,0.083 0.14,-0.042 0.17,-0.001 -0.121,-0.191 -0.358,-0.177 -0.595,-0.109 -0.186,-0.14 -0.071,-0.122 0.036,-0.142 0.037,-0.06 z m -0.036,0.515 -0.176,0.031 -0.139,-0.188 -0.033,-0.08 0.037,-0.056 0.038,-0.028 0.045,0.009 0.066,0.175 0.162,0.137 z m -0.266,1.639 0.081,0.213 -0.231,-0.146 -0.152,-0.122 -0.055,-0.098 0.315,0.11 0.042,0.043 z",
                        title: "Sri Lanka",
                        id: "LK",
                    },
                    {
                        d:
                            "m 451.07775,441.7884 0.055,0.033 0.084,0.086 0.08,0.294 0.314,0.949 -0.016,0.262 -0.062,0.171 -0.002,0.167 -0.021,0.166 -0.192,0.27 -0.568,0.554 0.044,0.049 0.135,0.063 0.139,0.032 0.113,-0.017 0.142,0.138 0.153,0.174 0.162,0.091 0.234,0.079 0.204,0.009 0.174,-0.031 0.245,0.035 0.261,0.144 0.093,0.237 0.063,0.207 0.09,0.105 0.013,0.179 0.185,0.157 0.265,0.032 0.343,0.184 0.087,-0.01 0.038,-0.023 0.042,0.035 0.086,0.532 0.067,0.282 -0.036,0.115 -0.045,0.089 -0.003,0.43 -0.156,0.246 -0.025,0.271 -0.043,0.087 -0.166,0.078 -10e-4,0.208 -0.045,0.251 -0.017,0.266 0.046,0.698 0.009,0.519 0.075,0.098 -0.323,-0.043 -0.95,-0.397 -0.731,-0.227 -2.451,-1.3 -0.68,-0.522 -0.786,-0.777 -1.745,-1.567 -0.398,-0.251 -0.502,-0.122 -0.31,-0.134 -0.219,-0.145 -0.178,-0.434 -0.437,-0.259 -0.805,-0.368 -0.606,-0.612 0.149,-0.126 0.218,-0.403 0.306,-0.387 0.285,-0.23 0.226,-0.237 0.24,-0.181 0.342,-0.212 0.525,-0.557 0.122,-0.065 0.084,-0.386 0.132,-0.491 0.152,-0.153 0.357,-0.091 0.083,-0.085 0.126,-0.347 0.082,-0.403 0.007,-0.088 0.14,-0.01 0.241,-0.087 0.14,0.039 0.061,0.116 0.032,0.098 0.729,-0.252 0.064,-0.052 0.038,0.009 0.092,0.227 0.052,-0.014 0.044,-0.065 0.049,-0.007 0.057,0.031 0.057,0.105 0.093,0.096 0.158,0.067 0.1,0.091 -0.011,0.243 0.038,0.236 0.069,0.054 0.036,0.141 0.018,0.154 0.038,0.081 0.027,0.156 -0.014,0.168 0.029,0.117 0.116,0.203 0.072,0.255 10e-4,0.182 -0.043,0.19 -0.077,0.174 -0.135,0.189 -0.011,0.075 0.08,0.049 0.122,0.011 0.102,-0.04 0.258,0.088 0.135,0.124 0.119,0.155 0.107,0.078 0.048,0.097 0.183,-0.026 0.213,-0.094 0.044,-0.045 0.063,0.024 0.137,0.01 0.096,-0.169 0.077,-0.194 0.165,-0.211 0.081,-0.081 0.021,-0.134 0.009,-0.174 0.06,-0.151 0.136,-0.083 0.147,10e-4 0.08,0.031 0.041,0.146 0.118,0.111 z",
                        title: "Liberia",
                        id: "LR",
                    },
                    {
                        d:
                            "m 555.54475,551.0404 -0.252,0.08 -0.035,0.006 -0.163,-0.018 -0.216,0.019 -0.169,0.044 -0.132,0.017 -0.215,0.229 -0.392,0.618 -0.104,0.13 -0.028,0.244 -0.091,0.193 -0.112,0.15 -0.108,0.037 -0.326,-0.06 -0.418,-0.077 -0.243,-0.187 -0.216,-0.246 -0.113,-0.179 -0.12,-0.098 -0.041,-0.055 -0.169,-0.082 -0.064,-0.043 -0.057,-0.031 -0.068,-0.118 -0.041,-0.103 0.016,-0.287 -0.12,-0.171 -0.205,-0.291 -0.129,-0.239 -0.177,-0.326 -0.109,-0.278 -0.112,-0.288 0.015,-0.124 0.107,-0.084 0.315,-0.145 0.244,-0.112 0.175,-0.205 0.191,-0.306 0.093,-0.183 0.093,-0.084 0.101,-0.129 0.177,-0.287 0.197,-0.318 0.211,-0.341 0.266,-0.099 0.363,-0.114 0.35,-0.298 0.416,-0.25 0.671,-0.272 0.313,-0.069 0.12,-0.04 0.075,0.052 0.08,0.155 0.114,0.131 0.265,0.226 0.112,0.055 0.274,0.336 0.292,0.23 0.337,0.266 0.229,0.132 0.118,0.037 0.096,0.236 0.099,0.175 0.055,0.164 -0.011,0.16 -0.106,0.392 -0.155,0.401 -0.125,0.166 -0.152,0.106 -0.148,0.159 -0.057,0.322 -0.067,0.379 -0.194,0.156 -0.15,0.103 -0.209,0.126 z",
                        title: "Lesotho",
                        id: "LS",
                    },
                    {
                        d:
                            "m 549.52975,274.9174 -0.007,0.223 -0.068,0.377 -0.133,0.486 -0.139,0.376 -0.034,0.145 0.105,0.121 0.522,0.057 0.222,0.064 0.043,0.1 -0.116,0.129 -0.167,0.107 -0.074,0.102 -0.133,0.363 -0.868,-0.046 -0.115,0.074 -0.055,0.168 -0.043,0.194 -0.114,0.23 -0.23,0.2 -0.361,0.074 -0.295,0.136 -0.22,0.418 -0.164,0.56 0.004,0.396 0.021,0.221 -0.019,0.126 -0.111,0.137 -0.182,0.363 -0.148,0.401 -0.057,0.217 0.028,0.102 0.167,0.003 0.241,0.082 0.128,0.16 0.047,0.185 0,0.198 -0.045,0.109 -0.193,0.079 -0.302,0.003 -0.176,-0.094 -0.036,-0.075 0.084,-0.191 -0.061,-0.239 -0.125,-0.133 -0.254,0.199 -0.244,0 -0.292,0.178 -0.191,0.284 -0.183,0.104 -0.496,-0.058 -0.123,0.125 -0.103,0.576 -0.059,0.112 -0.414,-0.024 -0.399,0.229 -0.451,0.185 -0.228,-0.128 -0.127,-0.145 -0.246,0.026 -0.268,0.064 -0.18,-0.035 -0.202,0.016 -0.39,0.111 -0.49,-0.036 -0.209,-0.095 -0.02,-0.091 0.015,-0.224 -0.005,-0.348 -0.078,-0.308 -0.235,-0.272 -0.246,-0.191 -0.314,-0.197 -0.232,-0.086 -0.127,-0.022 -0.029,-0.114 -0.046,-0.099 -0.109,-0.086 -0.232,-0.116 -0.197,-0.025 -0.161,0.187 -0.118,-0.234 -0.125,-0.421 0.013,-0.337 0.071,-0.337 0.341,-0.999 -0.018,-0.16 -0.248,-0.28 -0.306,-0.204 -0.169,-0.432 -0.62,-0.025 -0.585,0.024 -0.184,-0.021 -0.557,-0.181 -0.537,-0.292 -0.359,-0.171 -0.302,-0.192 -0.163,-0.202 -0.257,0.054 -0.174,0.002 0.002,-0.035 -0.099,-0.357 0.104,-0.548 -0.188,-0.806 -0.307,-0.973 -0.022,-1.047 -0.022,-0.236 0.754,-0.594 0.951,-0.637 0.216,-0.058 0.876,-0.378 0.117,-0.03 0.79,0.07 0.62,0.09 0.523,-0.011 0.287,-0.097 0.26,0.081 0.209,0.285 0.216,-0.034 0.213,-0.184 1.17,0.168 0.264,-0.004 0.297,0.027 0.548,0.171 0.316,0.157 0.694,-0.095 0.297,-0.005 0.155,-0.062 0.479,-0.43 0.207,-0.074 0.19,-0.077 0.174,0.065 0.114,0.367 0.354,0.631 0.385,0.111 1.063,0.242 0.217,0.127 0.598,0.554 0.359,0.271 0.228,0.216 0.348,0.423 0.201,0.307 0.336,0.232 0.398,0.156 0.149,0.025 z m -15.817,1.92 -0.163,-0.038 0.321,-0.568 0.123,-0.37 0.085,-0.526 0.075,-0.166 0.002,0.239 -0.033,0.398 -0.203,0.677 -0.207,0.354 z",
                        title: "Lithuania",
                        id: "LT",
                    },
                    {
                        d:
                            "m 492.06075,300.7024 -0.022,0.117 0.004,0.261 0.079,0.261 0.188,0.258 0.143,0.186 0.193,0.149 0.326,0.141 0.13,0.03 0.018,0.191 -0.025,0.202 -0.113,0.111 -0.106,0.161 -0.08,0.195 -0.083,0.375 -0.012,0.259 -0.188,-0.107 -0.099,-0.073 -0.172,-0.02 -0.171,0.06 -0.128,0.131 -0.177,0.04 -0.145,-0.04 -0.086,-0.098 -0.077,-0.053 -0.219,-0.066 -0.095,-0.143 0.073,-0.067 0.062,-0.106 0.053,-0.149 0.067,-0.137 -0.215,-0.379 -0.045,-0.116 -0.176,-0.213 0.002,-0.109 0.042,-0.103 -0.016,-0.081 0.025,-0.191 0.124,-0.181 0.082,-0.224 0.139,-0.306 0.307,-0.368 0.22,0.057 0.097,-0.002 0.058,0.135 z",
                        title: "Luxembourg",
                        id: "LU",
                    },
                    {
                        d:
                            "m 551.65775,265.4494 0.331,0.021 0.116,0.083 0.078,0.408 0.376,0.321 0.348,0.265 0.089,0.123 0.027,0.236 -0.022,0.276 -0.044,0.142 -0.146,0.164 -0.127,0.415 -0.018,0.394 -0.2,0.68 0.045,0.012 0.422,-0.122 0.119,0.07 0.093,0.149 0.03,0.425 0.138,0.191 0.141,0.298 0.044,0.231 0.269,0.275 0.021,0.179 0.164,0.627 0.063,0.36 0.029,0.279 -0.08,0.353 -0.072,0.238 -0.084,-0.015 -0.241,0.063 -0.381,0.287 -0.567,0.675 -0.146,0.149 -0.148,0.511 -0.036,0.052 -0.33,-0.023 -0.09,-0.012 -0.33,0.01 -0.721,-0.133 -0.279,0.088 -0.366,0.516 -0.143,0.076 -0.425,0.071 -0.075,0.06 -0.142,-0.024 -0.398,-0.156 -0.336,-0.232 -0.202,-0.307 -0.348,-0.423 -0.228,-0.216 -0.359,-0.271 -0.598,-0.555 -0.217,-0.127 -1.064,-0.242 -0.384,-0.111 -0.354,-0.631 -0.114,-0.368 -0.174,-0.065 -0.191,0.077 -0.206,0.074 -0.479,0.43 -0.155,0.061 -0.297,0.005 -0.694,0.095 -0.316,-0.157 -0.548,-0.171 -0.298,-0.027 -0.264,0.004 -1.17,-0.168 -0.213,0.184 -0.216,0.033 -0.209,-0.285 -0.261,-0.081 -0.287,0.097 -0.523,0.011 -0.62,-0.09 -0.789,-0.07 -0.117,0.03 -0.877,0.379 -0.216,0.057 -0.951,0.637 -0.754,0.594 -0.087,-0.95 0.046,-1.914 0.112,-0.955 0.522,-0.559 0.262,-0.436 0.152,-0.584 0.046,-0.542 0.106,-0.449 0.757,-1.294 0.599,-0.14 0.812,-0.361 0.907,-0.301 0.175,0.383 0.089,0.292 1.092,1.059 0.278,0.355 0.422,1.21 1.012,0.612 0.795,-0.193 0.346,-0.297 0.637,-0.548 0.284,-0.402 0.058,-0.388 -0.113,-1.67 -0.172,-0.728 0.058,-0.454 0.112,0.023 0.271,-0.22 0.889,-0.408 0.178,-0.019 0.203,-0.083 0.56,-0.312 0.181,0.166 0.15,0.188 0.082,0.002 0.041,-0.07 -0.011,-0.121 0.039,-0.086 0.161,0.048 0.649,0.511 0.249,0.12 0.171,0.033 0.204,0.239 0.554,0.159 0.068,0.123 0.042,0.154 0.519,0.644 0.233,0.323 0.46,0.296 0.198,0.07 0.806,-0.302 0.224,-0.104 0.186,-0.002 0.189,0.159 0.432,0.211 0.391,0.067 z",
                        title: "Latvia",
                        id: "LV",
                    },
                    {
                        d:
                            "m 545.47975,369.7494 -0.108,0.092 -0.154,0.196 -0.097,0.174 -0.26,0.284 -0.217,0.303 0.021,0.443 0.049,0.45 0.146,0.439 0.125,0.488 -0.036,0.318 -0.107,0.391 -0.128,0.326 -0.424,0.669 -0.065,0.16 0.024,0.225 0.258,0.792 0.02,0.249 0.154,0.766 0.141,0.622 0.156,0.489 0.024,0.134 0,0.717 0,0.716 0,0.714 0,0.713 0,0.711 0,0.71 0,0.708 0,0.707 0,0.705 0,0.704 0,0.702 0,0.702 0,0.699 0,0.698 0,0.697 0,0.696 0,0.694 0,0.693 0,0.692 0,0.69 0,0.69 0,0.688 0,0.686 0,0.686 0,0.684 0,0.683 0,0.682 0,0.681 0,0.679 0,0.679 0,0.678 0,0.676 0,1.497 -10e-4,1.492 0,1.487 -0.001,1.482 -0.009,0.004 -0.008,0.006 -0.009,0.005 -0.009,0.006 -0.692,-10e-4 -0.692,0 -0.693,0 -0.692,-0.001 0,0.371 0,0.37 0,0.369 0,0.37 -1.345,-0.701 -1.344,-0.701 -1.345,-0.703 -1.344,-0.704 -1.345,-0.705 -1.344,-0.706 -1.345,-0.707 -1.344,-0.708 -1.345,-0.71 -1.344,-0.711 -1.345,-0.711 -1.344,-0.713 -1.345,-0.715 -1.344,-0.716 -1.345,-0.716 -1.345,-0.718 -0.928,-0.497 -1.002,0.485 -0.785,0.38 -1.034,0.499 0,0 -1.188,0.647 -0.912,0.496 -0.043,-0.004 -0.041,-0.012 -0.949,-0.842 -0.741,-0.659 -0.329,-0.185 -1.397,-0.337 -1.389,-0.335 -1.462,-0.354 -0.266,-0.539 -0.297,-0.603 -0.401,-0.755 -0.245,-0.463 -0.082,-0.072 -1.121,-0.366 -1.185,-0.36 -0.693,0.218 -0.122,-0.016 -0.196,-0.137 -0.197,-0.187 -0.104,-0.261 -0.278,-0.35 -0.257,-0.803 -0.025,-0.64 -0.051,-0.227 -0.617,-0.904 -0.561,-0.823 -0.373,-0.55 -0.072,-0.249 0.043,-0.306 0.15,-0.275 0.543,-0.325 0.49,-0.355 0.067,-0.246 0.031,-0.679 -0.16,-0.212 -0.118,-0.404 -0.12,-0.547 -0.014,-0.351 0.218,-0.699 0.255,-0.733 -0.162,-0.814 -0.12,-1.639 0.075,-1.296 -0.061,-0.472 -0.043,-0.199 -0.167,-0.614 -0.205,-0.635 -0.092,-0.223 -0.263,-0.513 -0.436,-0.637 -0.226,-0.392 0.31,-0.207 0.275,-0.162 0.335,-0.171 0.475,-0.194 0.246,-0.146 0.105,-0.123 0.357,-0.502 0.186,-0.278 0.254,-0.381 0.111,-0.266 0.003,-0.246 -0.039,-0.298 -0.198,-0.714 -0.162,-0.696 0.126,-0.269 0.101,-0.128 0.221,-0.328 0.088,-0.066 0.477,-0.102 0.19,-0.218 0.146,-0.274 0.037,-0.144 0.208,-0.151 0.249,-0.151 0.153,-0.196 0.502,-0.304 0.458,-0.277 0.533,-0.292 0.412,-0.226 0.087,-0.198 -0.006,-0.171 -0.224,-0.39 0,-0.462 0.015,-0.384 0.022,-0.227 0.099,-0.633 0.006,-0.089 0.428,0.211 0.439,0.084 1.309,0.783 0.413,0.098 0.916,0.093 1.079,-0.32 0.408,-0.058 0.71,0.301 0.313,0.085 0.526,0.023 0.899,0.272 0.229,0.095 0.524,0.434 0.251,0.13 1.861,0.397 0.254,0.263 0.259,0.501 0.011,0.622 0.143,0.45 0.231,0.583 0.279,0.412 0.309,0.343 0.355,0.214 0.816,0.316 0.92,0.121 0.928,0.041 1.593,0.435 1.351,0.501 0.333,0.247 0.677,0.242 1.345,1.174 0.749,0.405 0.525,0.078 0.471,-0.071 0.837,-0.406 0.346,-0.242 0.842,-1.014 0.277,-0.53 0.11,-0.375 -0.027,-0.381 -0.105,-0.343 -0.236,-0.36 -0.165,-0.476 -0.097,-0.859 0.132,-0.597 0.161,-0.358 0.254,-0.366 0.699,-0.701 0.703,-0.495 1.239,-0.648 0.719,-0.007 0.298,-0.072 0.592,-0.459 0.24,-0.017 0.332,0.112 0.976,-0.032 0.43,0.128 0.513,0.286 0.648,0.177 0.457,0.177 0.487,0.227 0.11,0.565 -0.054,0.168 -0.012,0.219 0.505,0.388 1.435,0.182 0.283,0.104 0.395,0.297 0.254,0.091 0.983,0.042 0.573,-0.063 0.546,0.104 0.202,0.1 0.209,0.232 0.253,0.562 z",
                        title: "Libya",
                        id: "LY",
                    },
                    {
                        d:
                            "m 468.66575,358.2084 0.081,0.253 0.166,0.202 0.592,0.461 0.351,0.284 0.01,0.098 -0.113,0.233 -0.048,0.16 0.092,0.171 0.217,0.206 0.017,0.099 -0.052,0.115 -0.112,0.221 0.238,0.648 0.04,0.627 -0.062,0.445 0.002,0.257 0.031,0.218 0.202,0.503 -0.135,0.831 0.152,0.452 0.209,0.366 0.114,0.652 0.168,0.309 0.275,0.271 0.157,0.091 0.303,0.224 0.217,0.186 0.127,0.278 -0.272,0.228 -0.218,0.204 -0.062,0.22 0.102,0.352 0,0.189 -0.139,0.06 -0.566,-0.02 -0.444,-0.015 -0.51,-0.017 -0.718,-0.034 -0.444,-0.021 -0.61,-0.028 -0.21,0.014 -0.559,0.098 -0.395,0.07 -0.067,0.019 -0.123,0.087 -0.085,0.259 -0.076,0.295 -0.082,0.131 -1.185,0.426 -0.463,0.059 -0.268,-0.044 -0.191,0.035 -0.164,0.091 -0.056,0.137 -0.008,0.176 0.035,0.177 0.114,0.246 0.02,0.246 -0.073,0.174 -0.017,0.174 -0.034,0.188 0.061,0.102 0.114,0.016 0.115,0.086 0.162,0.078 0.134,0.149 -0.006,0.212 -0.112,0.12 -0.099,0.063 -0.444,0.056 -0.351,0.045 -0.459,0.338 -0.489,0.36 -0.578,0.238 -0.255,0.067 -0.445,0.171 -0.533,0.281 -0.263,0.45 -0.331,0.518 -0.319,0.347 -0.435,0.329 -0.406,0.125 -0.51,0.158 -0.643,0.121 -0.455,0.04 -0.136,0.026 -0.401,0.008 -0.196,-0.025 -0.147,-0.014 -0.059,0.037 -0.02,0.081 -0.008,0.186 -0.027,0.213 -0.127,0.179 -0.09,0.08 -0.105,0.033 -0.337,-0.048 -0.282,-0.057 -0.671,-0.076 -0.134,0.018 -0.05,0.022 -0.209,0.122 -0.322,0.256 -0.219,0.224 -0.163,0.105 -0.39,0.055 -0.17,0.082 -0.726,0.559 -0.155,0.136 -0.747,0.485 -0.211,0.161 -0.165,0.159 -0.446,0.358 -0.285,0.157 -0.052,0.093 -0.014,0.218 0,0.482 0,0.462 0,0.67 0,0.67 0,0.77 -0.377,0 0,0.001 -0.002,-0.001 -12.234,0.014 0.004,-0.012 0.38,-0.36 0.257,-0.456 0.436,-0.203 0.912,-0.098 1.355,-0.379 1.216,-0.573 0.344,-0.228 0.368,-0.458 0.612,-0.597 1.143,-0.718 0.526,-0.402 0.802,-1.009 0.533,-0.837 0.443,-0.54 0.306,-0.48 0.215,-0.487 0.121,-0.786 -0.081,-0.308 -0.338,-0.504 -0.226,-0.135 -0.061,-0.238 0.121,-0.42 -0.002,-0.724 0.068,-1.16 0.376,-0.939 0.919,-1.235 0.171,-0.509 0.105,-0.81 0.009,-0.287 1.15,-1.156 0.673,-0.889 0.234,-0.218 0.594,-0.407 2.074,-0.891 1.172,-0.639 0.684,-0.466 0.408,-0.553 1.13,-2.179 1.109,-3.096 0.093,-0.36 0.496,-0.104 0.351,-0.045 0.283,-0.114 0.35,-0.234 0.336,0.094 -0.168,0.159 0,0.384 0.238,0.449 0.414,0.504 0.752,0.639 0.586,0.256 0.837,0.154 0.976,-0.28 0.546,-0.005 0.265,-0.121 0.289,0.177 0.549,0.057 0.53,-0.093 0.401,-0.268 0.255,-0.309 0.04,0.152 0.012,0.164 0.078,0.096 0.158,0.392 0.083,0.153 0.305,-0.025 0.265,0.077 0.598,-0.037 z",
                        title: "Morocco",
                        id: "MA",
                    },
                    { d: "m 495.77175,326.8484 -0.171,0.073 0.007,-0.084 0.042,-0.046 0.054,-0.022 0.063,0.037 z", title: "Monaco", id: "MC" },
                    {
                        d:
                            "m 554.07275,320.1704 -0.14,-0.253 -0.142,-0.221 -0.104,-0.119 0.044,-0.055 0.113,-0.063 0.081,-0.075 -0.009,-0.264 -0.06,-0.304 -0.055,-0.147 -0.005,-0.231 -0.039,-0.36 0.055,-0.67 0.226,-0.844 0.125,-0.421 -0.061,-0.231 0.047,-0.54 -0.098,-0.267 -0.153,-0.35 -0.219,-0.763 -0.274,-0.266 -0.338,-0.293 -0.144,-0.221 -0.097,-0.244 -0.201,-0.243 -0.231,-0.223 -0.276,-0.559 -0.143,-0.253 -0.044,-0.067 -0.315,-0.36 -0.165,-0.325 -0.084,-0.268 -0.048,-0.247 -0.222,-0.491 -0.201,-0.369 -0.191,-0.264 -0.088,-0.187 -0.224,-0.235 -0.319,-0.188 -0.207,-0.032 -0.266,0.015 0.061,-0.144 0.579,-0.391 0.151,0.064 0.303,0.015 0.617,-0.013 0.304,-0.258 0.188,0.072 0.153,-0.116 0.255,-0.146 0.037,0.031 0.032,0.023 0.394,0.065 0.297,0.14 0.198,0.215 0.205,0.133 0.21,0.052 0.117,0.108 0.023,0.162 0.198,0.08 0.371,-0.002 0.157,0.107 -0.056,0.217 0.038,0.071 0.132,-0.074 0.1,0.064 0.052,0.16 0.06,0.076 0.189,-0.251 0.2,0.025 0.483,0.104 0.258,0.519 0.161,0.186 0.141,0.076 0.178,-0.081 0.158,-0.096 0.09,0.045 0.196,0.343 0.045,0.448 -0.001,0.18 -0.069,0.304 -0.099,0.322 -0.078,0.21 0.033,0.168 0.07,0.141 0.114,0.046 0.374,0.284 0.14,0.198 0.203,0.146 0.154,0.008 0.08,0.081 0.028,0.1 -0.021,0.252 -0.086,0.236 0.011,0.152 0.136,0.18 0.015,0.208 0.009,0.134 0.072,0.103 0.343,0.229 0.443,0.221 0.113,0.19 0.069,0.24 -0.022,0.403 -0.029,0.35 0.58,0.47 -0.066,0.088 -0.09,0.096 -0.554,0.071 -0.113,0.039 -0.241,-0.353 -0.127,-0.045 -0.118,0.13 -0.14,0.072 -0.167,-0.036 -0.18,-0.109 -0.091,-0.077 -0.073,-0.009 -0.112,0.077 -0.149,-0.033 -0.098,-0.087 -0.141,0.3 -0.086,0.063 -0.054,-0.009 -0.011,-0.51 -0.041,-0.077 -0.112,-0.013 -0.27,0.122 -0.257,0.157 -0.087,0.139 0.009,0.251 0.037,0.299 0.175,0.453 -0.096,0.197 -0.068,0.314 -0.275,0.287 -0.312,0.167 -0.026,0.342 -0.173,0.233 -0.296,0.233 -0.198,0.281 0.05,0.191 0.012,0.182 -0.034,0.123 -0.007,0.095 -0.078,0.042 -0.452,0.035 -0.128,0.059 z",
                        title: "Moldova",
                        id: "MD",
                    },
                    {
                        d:
                            "m 613.92475,497.8574 0.129,0.299 0.15,0.287 0.469,0.694 0.201,0.267 0.171,0.284 0.083,0.567 0.299,0.882 0.281,1.328 0.086,1.365 0.087,0.627 0.219,0.591 0.359,0.614 0.116,0.683 -0.22,0.705 -0.317,0.665 -0.082,0.125 -0.149,0.171 -0.067,-0.007 -0.254,-0.172 -0.208,-0.281 -0.263,-0.661 -0.096,-0.335 -0.11,-0.053 -0.308,0.029 -0.223,0.208 -0.041,0.131 0.048,0.373 0.085,0.335 0.037,0.341 0.007,0.429 0.083,0.13 0.122,0.109 0.127,0.281 0.022,0.67 -0.078,0.339 -0.217,0.292 0.013,0.161 0.081,0.166 -0.077,0.1 -0.289,0.126 -0.117,0.112 -0.156,0.297 -0.253,0.606 -0.034,0.31 0.158,0.944 -0.044,0.67 -0.322,1.285 -0.186,0.611 -0.263,0.731 -0.402,0.965 -0.398,1.215 -0.338,1.253 -0.25,0.755 -0.284,0.745 -0.389,1.319 -0.33,1.343 -0.491,1.482 -0.678,1.659 -0.073,0.217 -0.141,0.851 -0.152,0.74 -0.182,0.734 -0.38,1.216 -0.043,0.375 -0.086,0.361 -0.366,0.766 -0.155,0.285 -0.109,0.303 -0.062,0.385 -0.109,0.372 -0.268,0.685 -0.399,0.59 -0.272,0.215 -0.588,0.312 -0.298,0.063 -0.661,0.007 -0.64,0.178 -0.667,0.342 -0.642,0.393 -0.246,0.187 -0.271,0.107 -0.848,0.022 -0.254,-0.085 -0.849,-0.646 -0.329,-0.106 -0.623,-0.088 -0.188,-0.055 -0.171,-0.084 -0.252,-0.337 -0.5,-0.284 -0.12,-0.089 -0.076,-0.196 -0.052,-0.211 -0.13,-0.236 -0.096,-0.449 -0.163,-0.313 -0.46,-0.553 -0.049,-0.177 -0.037,-0.586 0.015,-0.396 -0.045,-0.724 0.053,-0.34 0.162,-0.306 -0.066,-0.331 -0.172,-0.348 -0.064,-0.359 -0.126,-0.327 -0.482,-0.588 -0.113,-0.289 -0.078,-0.299 -0.182,-0.931 -0.022,-0.324 0.027,-0.684 0.067,-0.352 0.117,-0.245 0.029,-0.183 0.076,-0.157 0.114,-0.125 0.077,-0.149 0.18,-0.87 0.228,-0.193 0.338,-0.111 0.271,-0.227 0.156,-0.306 0.156,-0.631 0.426,-0.625 0.152,-0.328 0.344,-0.496 0.304,-0.696 0.092,-0.328 0.066,-0.335 0.077,-0.735 0.058,-0.365 -0.012,-0.362 -0.174,-0.371 -0.415,-0.673 -0.013,-0.125 0.033,-0.5 -0.035,-0.361 -0.153,-0.36 -0.196,-0.338 -0.193,-0.632 -0.094,-1.043 0.02,-0.376 -0.057,-0.334 -0.14,-0.318 0.1,-0.555 1.241,-2.01 0.041,-0.236 -0.05,-0.611 0.026,-0.355 0.043,-0.132 0.095,-0.077 0.212,-0.037 1.003,-0.087 0.129,-0.062 0.25,-0.168 0.344,-0.326 0.158,-0.094 0.136,0.035 0.087,0.139 0.112,0.076 0.405,-0.147 0.155,-0.004 0.159,0.024 0.074,-0.136 0.044,-0.182 0.059,-0.128 0.108,-0.073 0.521,-0.04 0.333,-0.052 0.43,-0.127 0.092,0.025 0.347,0.458 0.105,0.039 0.135,0.019 0.118,-0.083 -0.282,-0.239 -0.042,-0.135 0.015,-0.154 0.151,-0.329 0.252,-0.251 0.56,-0.381 0.582,-0.44 0.169,-0.03 0.143,0.069 0.11,0.52 -0.014,0.085 0.093,0.012 0.108,-0.064 0.096,-0.209 0.005,-0.174 -0.078,-0.167 -0.038,-0.141 -0.003,-0.13 0.295,-0.307 0.232,-0.292 0.107,-0.349 0.093,-0.161 0.245,-0.181 0.072,0.028 0.057,0.147 0.032,0.156 -0.063,0.155 -0.089,0.153 -0.036,0.204 0.138,0.04 0.13,-0.049 0.19,-0.369 0.217,-0.349 0.129,-0.182 0.163,-0.126 0.271,0.025 0.263,0.078 -0.429,-0.368 -0.107,-0.504 0.51,-0.871 0.005,-0.181 0.074,-0.056 0.035,-0.07 -0.264,-0.293 -0.05,-0.146 0.035,-0.221 0.126,-0.196 0.115,-0.137 0.163,-0.053 0.129,0.075 0.284,0.241 0.191,0.037 0.231,-0.231 0.189,-0.289 0.284,-0.198 0.323,-0.123 0.491,-0.455 0.32,-0.95 0.025,-0.277 -0.071,-0.335 -0.113,-0.319 -0.189,-0.398 0.049,-0.088 0.269,0.053 0.09,-0.056 0.292,-0.352 0.481,-0.674 0.158,10e-4 0.136,0.125 0.051,0.185 0.096,0.136 0.325,0.32 0.163,0.23 z m -3.358,2.666 0.004,0.104 -0.369,-0.043 -0.058,-0.359 0.181,-0.011 0.04,-0.147 0.11,-0.018 0.119,0.319 -0.027,0.155 z m 4.475,10.227 -0.315,0.536 0.089,-0.447 0.365,-0.644 0.104,-0.049 -0.243,0.604 z",
                        title: "Madagascar",
                        id: "MG",
                    },
                    {
                        d:
                            "m 528.76375,327.6884 -0.007,0.047 0.013,0.139 0.063,0.135 0.223,0.138 0.327,0.274 0.384,0.502 0.176,0.148 0.159,0.037 0.309,0.207 0.216,0.051 0.241,0.057 0.628,0.433 0.283,0.126 0.2,0.163 0.022,0.153 -0.009,0.095 -0.363,0.11 -0.063,0.169 -0.176,-0.02 -0.213,-10e-4 -0.069,0.107 0.102,0.176 0.066,0.206 -0.053,0.283 -0.018,0.037 -0.051,-0.01 -0.3,0.164 -0.222,0.077 -0.201,0.039 -0.095,-0.079 -0.047,-0.107 0.009,-0.31 -0.037,-0.105 -0.068,-0.051 -0.138,0.073 -0.159,0.241 -0.149,0.278 -0.223,0.29 -0.184,0.278 -0.198,0.351 -0.135,0.289 0.14,0.164 0.086,0.226 -0.026,0.17 0.025,0.099 -0.044,0.297 -0.008,0.187 -0.438,-0.299 -0.18,-0.421 -0.64,-0.713 -0.733,-0.486 -0.039,-0.077 0.04,-0.094 0.035,-0.074 -0.153,-0.006 -0.106,0.06 -0.102,-0.017 -0.114,-0.183 -0.108,-0.158 -0.005,-0.14 0.049,-0.018 0.073,-0.056 0.155,-0.155 0.031,-0.082 -0.008,-0.124 -0.217,-0.392 -0.031,-0.255 -0.031,-0.475 0.046,-0.112 0.079,-0.055 0.379,-0.059 -0.005,-0.371 0.023,-0.112 0.076,-0.154 0.048,-0.141 0.211,-0.203 0.286,-0.241 0.125,-0.008 0.109,0.034 0.124,0.208 0.135,-0.027 0.028,-0.25 -0.177,-0.327 -0.094,-0.209 0.029,-0.116 0.066,-0.061 0.153,0.038 0.145,0.058 0.091,-0.039 0.145,-0.03 z",
                        title: "Montenegro",
                        id: "ME",
                    },
                    { d: "m 298.05475,411.6834 -0.314,0 0.023,-0.064 0.146,-0.072 0.107,0.006 0.043,0.026 z", title: "Saint Martin", id: "MF" },
                    {
                        d:
                            "m 943.27075,431.6294 -0.073,0.02 -0.055,-0.02 0.04,-0.037 0.082,-0.006 0.031,0.01 -0.025,0.033 z m 5.445,10.861 -0.041,0.043 -0.271,-0.026 -0.124,-0.054 0.012,-0.041 0.214,0.039 0.21,0.039 z m 6.375,0.48 0.352,0.144 0.468,-0.067 -0.075,0.043 -0.175,0.04 -0.116,0.035 -0.078,0 -0.093,-0.014 -0.3,-0.1 -0.168,-0.132 0.041,-0.044 0.144,0.095 z m 1.334,0.253 0.104,0.061 0.207,-0.004 0.191,0.155 -0.073,-0.01 -0.104,-0.066 -0.095,-0.028 -0.128,0.008 -0.06,-0.025 -0.042,-0.091 z m -5.451,3.418 -0.056,0.084 -0.069,-0.006 0.061,-0.063 0.042,-0.088 0.067,-0.25 0.139,-0.089 0.096,-0.104 -0.023,0.108 -0.15,0.113 -0.107,0.295 z",
                        title: "Marshall Islands",
                        id: "MH",
                    },
                    {
                        d:
                            "m 537.60375,332.3444 0.433,0.562 0.237,0.228 0.279,0.172 0.319,0.126 0.115,0.12 0.203,0.595 0.097,0.226 0.135,0.067 0.033,0.065 0.006,0.086 -0.152,0.417 -0.062,0.931 -0.038,0.074 -0.159,-0.004 -0.212,0.02 -0.08,0.072 -0.085,0.499 -0.341,0.142 -0.309,0.08 -0.26,-0.018 -0.458,-0.118 -0.149,-0.013 -0.128,0.067 -0.409,0.036 -0.179,0.087 -0.421,0.582 -0.426,0.201 -0.146,0.101 -0.325,-0.128 -0.156,-0.014 -0.226,0.148 -0.494,0.015 -0.133,0.026 -0.381,0.023 -0.016,-0.08 -0.071,-0.117 -0.178,-0.055 -0.363,0.047 -0.088,-0.085 -0.15,-0.494 -0.116,-0.079 -0.131,-0.166 -0.221,-0.538 -0.006,-0.236 0.015,-0.207 -0.123,-0.484 0.076,-0.123 0.114,-0.077 10e-4,-0.196 -0.032,-0.297 0.135,-0.584 0.036,-0.043 0.035,0.028 0.326,0.047 0.085,-0.074 0.054,-0.116 0.017,-0.429 0.078,-0.198 0.79,-0.378 0.233,-0.014 0.178,0.174 0.141,0.111 0.085,-0.004 0.031,-0.111 0.096,-0.216 0.162,-0.123 0.481,-0.105 0.004,0 0.157,0.021 0.339,-0.097 0.212,-0.134 0.108,-0.02 0.143,-0.051 0.206,0.007 0.209,0.058 0.266,-0.077 0.261,-0.125 0.105,0.032 0.113,0.106 z",
                        title: "Macedonia",
                        id: "MK",
                    },
                    {
                        d:
                            "m 486.75975,408.5224 0.002,0.516 0.002,0.777 0.003,0.865 0.002,0.796 0.003,0.906 0.003,0.727 0.002,0.859 0.003,0.853 -0.089,0.098 -0.033,0.479 -0.025,0.63 -0.171,0.652 -0.299,0.48 -0.108,0.456 -0.082,0.261 -0.112,0.142 -0.026,0.17 -0.059,0.24 -0.095,0.155 -0.074,0.08 -0.301,0.094 -0.53,0.459 -0.046,0.367 -0.604,-0.101 -0.642,-0.104 -0.086,0.007 -0.054,0.048 -0.026,0.194 -0.874,0.032 -0.754,0.028 -0.934,0.032 -0.642,0.022 -0.814,0.044 -0.755,0.041 -0.502,0.422 -0.453,0.402 -0.036,0.014 -0.642,0.079 -0.801,-0.07 -0.412,-0.004 -0.162,0.048 -0.031,0.151 -0.59,-0.212 -0.682,-0.215 -0.476,0.135 -0.076,-0.046 -0.062,-0.09 -0.23,-0.052 -0.365,0.023 -0.264,0.064 -0.414,0.318 -0.312,0.277 -0.085,0.063 -0.436,0.168 -0.81,0.39 -0.46,0.287 -0.106,0.052 -0.204,0.065 -0.314,0.013 -0.262,0.072 -0.236,0.754 -0.157,0.075 -0.966,-0.304 -0.195,0.045 -0.168,0.089 -0.539,0.442 -0.267,0.354 -0.146,0.47 0.021,0.145 0.004,0.164 -0.095,0.089 -0.13,0.032 -0.117,-0.005 -0.448,-0.097 -0.14,0.042 -0.061,0.232 0.009,0.506 -0.098,0.344 -0.266,0.106 -0.206,0.136 -0.162,0.039 -0.135,-0.033 -0.779,-0.514 -0.263,-0.082 -0.292,0.057 -0.28,0.218 -0.127,0.143 -0.175,0.169 -0.197,0.225 0.052,0.19 0.139,0.221 0.099,0.274 -0.005,0.245 -0.711,0.348 0.058,0.119 0.107,0.14 10e-4,0.253 -0.02,0.443 -0.144,0.16 -0.186,0.158 -0.115,0.203 -0.113,0.1 -0.202,0.125 -0.277,0.126 -0.48,0.11 -0.384,0.074 -0.145,0.072 -0.204,0.148 -0.163,0.178 -0.039,0.192 0.033,0.22 0.057,0.18 0.071,0.123 0.043,0.155 -0.058,0.417 -0.139,0.483 -0.134,0.215 -0.215,0.118 -0.186,0.132 0.061,0.316 0.032,0.453 -0.052,0.362 -0.009,0.223 -0.079,0.232 -0.046,0.163 -0.093,-0.04 -0.386,0.019 -0.42,0.124 -0.147,0.099 -0.032,0.135 -0.093,0.091 -0.134,0.102 -0.129,0.125 -0.232,-0.02 -0.224,-0.086 -0.117,-0.083 -0.007,-0.05 0.073,-0.122 0.063,-0.133 0.006,-0.088 -0.076,-0.216 -0.062,-0.232 0.025,-0.111 -0.055,-0.342 -0.03,-0.017 -0.294,0.088 -0.107,0.022 -0.061,0.038 -0.02,0.065 0.071,0.217 -0.046,0.037 -0.165,-0.005 -0.23,-0.072 -0.251,-0.199 -0.063,0.065 -0.027,0.158 -0.017,0.187 0.064,0.34 -0.067,0.121 -0.168,-0.022 -0.226,0.001 -0.197,0.033 -0.131,0.008 -0.081,0.121 -0.035,0.136 0.079,0.15 -0.012,0.064 -0.061,0.058 -0.077,0.035 -0.064,-0.004 -0.182,-0.167 -0.218,-0.062 -0.507,-0.096 -0.061,-0.228 -0.084,-0.004 -0.117,-0.12 -0.116,-0.159 -0.098,0.008 -0.082,0.045 -0.278,-0.018 -0.247,0.241 -0.183,0.3 -0.196,0.144 -0.216,0.063 -0.083,0.002 0.045,-0.189 -0.031,-0.139 -0.061,-0.123 -0.629,-0.329 -0.098,-0.136 -0.099,-0.374 -0.063,-0.374 0.007,-0.219 0.043,-0.197 -0.018,-0.152 -0.069,-0.116 -0.189,-0.112 -0.196,-0.052 -0.25,0.146 -0.12,0.028 -0.112,-0.01 -0.058,-0.054 0.008,-0.075 0.272,-0.401 0.132,-0.167 0.159,-0.128 0.107,-0.068 0.069,-0.098 0.006,-0.078 -0.025,-0.056 -0.177,-0.074 -0.276,-0.187 -0.147,-0.02 -0.123,-0.085 -0.13,-0.293 -0.061,-0.056 -0.13,-0.03 -0.12,-0.072 0.006,-0.381 0.005,-0.329 -0.268,-0.53 -0.104,-0.334 -0.135,-0.344 -0.124,-0.161 -0.217,-0.135 -0.267,-0.094 -0.237,-0.022 -0.182,0.032 -0.085,0.042 0.004,0.064 0.148,0.217 0.027,0.121 -0.025,0.117 -0.05,0.078 -0.131,0.009 -0.23,0.067 -0.283,0.132 -0.198,0.113 -0.159,0.286 -0.11,0.036 -0.187,-0.036 -0.533,-0.211 -0.439,-0.174 -0.303,-0.1 -0.182,0.064 -0.093,0.031 -0.261,0.116 -0.347,0.423 -0.083,0.14 -0.069,0.045 -0.094,0.074 -0.09,0.002 -0.072,-0.05 -0.023,-0.031 -0.178,-0.305 -0.195,-0.336 -0.16,-0.152 -0.201,-0.007 -0.171,0.105 -0.179,0.216 -0.225,0.2 -0.143,0.06 -0.125,-0.033 -0.307,-0.252 -0.219,-0.18 -0.027,-0.09 0.077,-0.138 0.076,-0.206 0.083,-0.167 0.08,-0.077 0.02,-0.213 -0.186,-0.151 -0.006,-0.073 0.019,-0.2 0.083,-0.423 -0.008,-0.161 0.075,-0.315 -0.122,-0.142 -0.028,-0.105 -0.137,-0.168 -0.157,-0.238 -0.036,-0.191 -0.055,-0.152 -0.151,-0.229 -0.11,-0.036 -0.236,-0.035 -0.039,0.079 -0.087,0.114 -0.08,0.033 -0.129,-0.14 -0.049,-0.12 10e-4,-0.109 -0.175,-0.191 -0.272,-0.35 0.028,-0.289 0.168,-0.156 0.05,-0.118 0.015,-0.132 -0.076,-0.16 -0.09,-0.126 0.025,-0.279 -0.022,-0.388 -0.138,-0.194 -0.125,-0.142 -0.175,-0.153 -0.149,-0.236 0.06,-0.324 0.057,-0.223 -0.264,-0.463 0.494,0.183 0.065,-0.06 0.168,-0.112 0.227,-0.236 0.19,-0.313 0.086,-0.387 0.038,-0.334 0.085,-0.283 0.108,-0.24 0.236,-0.25 0.222,-0.177 0.264,-0.184 0.134,0.033 0.251,0.257 0.551,0.515 0.455,0.392 0.166,0.208 0.147,0.002 0.226,-0.38 0.234,-0.327 0.099,-0.08 0.308,-0.036 0.262,-0.014 0.229,0.006 0.42,0.063 0.192,0.058 0.18,0.035 0.528,0.029 0.523,-0.08 0.497,-0.103 0.368,-0.061 0.019,-0.155 -0.021,-0.183 0.059,-0.139 0.116,-0.129 0.098,-0.029 0.042,0.44 0.117,0.066 0.328,0.019 0.533,0 0.572,0 0.572,0 0.573,0 0.572,0 0.572,0 0.573,0 0.572,0 0.573,0 0.572,0 0.572,0 0.572,0 0.573,0 0.572,0 0.573,0 0.572,0 0.573,0 0.593,0 0.16,-0.849 0.146,-0.779 0.122,-0.654 -0.42,-0.462 -0.334,-0.368 -0.078,-0.702 -0.079,-0.725 -0.08,-0.726 -0.081,-0.727 -0.079,-0.728 -0.08,-0.729 -0.08,-0.73 -0.08,-0.731 -0.08,-0.732 -0.08,-0.734 -0.08,-0.734 -0.08,-0.735 -0.08,-0.737 -0.079,-0.738 -0.08,-0.739 -0.081,-0.741 -0.079,-0.741 -0.08,-0.743 -0.08,-0.744 -0.08,-0.745 -0.08,-0.747 -0.08,-0.747 -0.08,-0.75 -0.08,-0.75 -0.08,-0.752 -0.079,-0.753 -0.08,-0.755 -0.08,-0.756 -0.08,-0.758 -0.08,-0.759 -0.08,-0.76 -0.08,-0.762 -0.08,-0.764 -0.075,-0.701 0.862,0 0.919,-0.001 0.895,0 1.313,-10e-4 0.983,0 0.857,0.588 0.777,0.555 0.919,0.657 0.919,0.656 0.92,0.655 0.919,0.653 0.919,0.652 0.918,0.652 0.92,0.649 0.919,0.65 0.919,0.648 0.919,0.647 0.919,0.646 0.919,0.645 0.919,0.644 0.919,0.643 0.919,0.642 0.919,0.642 0.411,0.286 0.038,0.118 0.038,0.241 -0.024,0.271 0.004,0.221 0.121,0.149 0.229,0.16 0.899,0.472 0.071,0.093 0.032,0.195 0.107,0.239 0.19,0.14 0.222,0.103 0.271,0.072 0.815,0.074 0.173,0.111 0.352,0.435 0.191,0.086 0.543,0.125 0.393,0.07 0.162,0.04 0.356,0.116 0.387,0.198 0.205,0.179 0,0.056 -0.002,0.156 -0.003,0.467 0.071,0.257 0.081,0.186 -0.004,0.113 -0.098,0.08 -0.076,0.099 -0.042,0.13 -0.111,0.165 -0.089,0.184 0.038,0.138 0.153,0.09 0.229,0.175 0.19,0.074 0.093,0.005 0.124,-0.005 0.107,-0.023 0.686,-0.134 0.636,-0.125 z",
                        title: "Mali",
                        id: "ML",
                    },
                    { d: "m 793.37275,399.4184 0.006,-0.066 0.037,-0.073 0.092,-0.013 0.059,0.07 -0.008,0.003 -0.131,0.06 -0.041,0.012 z", title: "Macau", id: "MO" },
                    {
                        d:
                            "m 758.74075,401.3064 -0.165,0.296 -0.429,0.307 -0.303,0.156 -0.177,0.004 -0.15,0.184 -0.123,0.362 -0.128,0.212 -0.132,0.063 -0.085,0.137 -0.04,0.21 0.076,0.112 0.192,0.015 0.015,0.059 -0.162,0.103 -0.202,0.036 -0.24,-0.031 -0.229,0.083 -0.216,0.195 -0.184,0.421 -0.152,0.646 -0.02,0.166 -0.334,-0.188 -0.139,-0.106 -0.179,-0.027 -0.184,0.119 -0.146,0.129 -0.149,0.047 -0.229,0.015 -0.3,-0.067 -0.204,-0.06 -0.031,0.033 0.111,0.272 0.039,0.217 -0.044,0.113 -0.097,0.094 -0.146,0.074 -0.172,0.043 -0.152,-0.004 -0.243,-0.103 -0.186,-0.004 -0.159,0.051 -0.097,0.076 -0.054,0.095 -0.094,0.536 -0.082,0.167 -0.115,0.095 -0.115,0.01 -0.158,-0.026 -0.165,0.022 -0.749,0.207 -0.109,0.02 -0.234,0.016 -0.218,0.006 -0.153,-0.01 -0.359,-0.212 -0.174,-0.022 -0.096,0.06 -0.066,0.284 -0.21,0.181 -0.28,0.393 -0.064,0.574 0.028,0.4 -0.251,0.396 -0.023,0.191 0.135,0.916 -0.022,0.096 -0.052,0.047 -0.157,0.032 -0.265,0.096 -0.175,0.091 -0.084,0.01 -0.247,-0.068 -0.064,-10e-4 0.019,0.07 0.197,0.396 0.204,0.188 0.213,-0.021 0.092,0.037 -0.027,0.095 0.082,0.248 0.19,0.4 0.058,0.3 -0.116,0.298 0.021,0.107 0.063,0.063 0.18,0.277 0.383,0.433 0.375,0.468 0.313,0.39 0.229,0.27 0.512,0.501 0.091,0.235 0.02,0.474 0.126,0.274 0.117,0.196 0.081,0.164 0.188,0.536 0.08,0.072 0.41,-0.326 0.095,0.068 0.054,0.123 0,0.156 -0.064,0.177 -0.133,0.164 -0.634,0.378 -0.052,0.325 -0.044,0.493 -0.011,0.605 0.031,0.452 -0.023,0.104 -0.056,0.049 -0.239,-0.02 -0.344,0.228 -0.122,0.02 -0.151,0.087 -0.115,0.108 -0.037,0.164 0.068,0.496 0.123,0.465 0.241,0.341 0.191,0.27 0.267,0.375 0.21,0.326 0.425,0.357 0.596,0.534 0.228,0.295 0.201,0.357 0.142,0.305 0.054,0.404 0.044,0.226 0.013,0.756 -0.109,0.172 -0.084,0.199 0.047,0.208 0.139,0.199 0,0.227 0.13,0.407 0.218,0.249 0.21,0.167 0.093,0.132 -0.03,0.212 0.062,0.225 0.046,0.245 0.085,0.339 0.169,0.287 0.257,0.879 -0.006,0.09 -0.111,0.178 -0.162,0.161 -0.104,0.052 -0.099,0.166 -0.235,0.469 -0.474,0.808 -0.462,0.526 -0.389,0.374 -0.281,0.227 -0.083,0.135 0,0.106 0.051,0.188 -0.02,0.358 -0.06,0.227 -0.08,0.24 -0.045,0.214 -0.125,0.032 -0.268,0.408 -0.116,-0.205 -0.068,-0.213 0.073,-0.483 -0.163,-0.915 0.102,-0.122 0.097,-0.062 0.178,-0.351 0.215,-0.348 0.021,-0.416 0.174,-0.305 -0.041,-0.255 0.009,-0.299 0.037,-0.245 -0.014,-0.201 0.138,-0.208 0.239,-0.156 -0.1,-0.056 -0.1,-0.114 -0.313,0.173 -0.16,-0.057 -0.032,-0.18 0.04,-0.193 0.016,-0.117 0.125,-0.132 -0.009,-0.258 -0.063,-0.227 0.091,-0.281 -0.185,-10e-4 -0.085,-0.057 0.053,-0.156 0.168,-0.138 -0.153,-0.264 0.113,-0.283 -0.004,-0.35 -0.077,-0.309 0.004,-0.222 -0.118,-0.394 -0.054,-0.504 -0.249,-0.375 -0.185,-0.547 -0.494,-0.716 0.009,-0.307 -0.026,-0.27 -0.108,-0.131 -0.143,0.955 -0.109,-0.188 -0.035,-0.533 -0.071,-0.253 0.077,-0.503 -0.286,-0.5 -0.061,-0.363 -0.188,-0.551 0.055,-0.124 0.251,0.124 -0.231,-0.321 -0.188,0.072 -0.16,-0.347 -0.035,-0.941 -0.157,-0.352 0.086,-0.359 -0.179,-1.288 -0.354,-0.418 0.07,-0.36 0.088,-0.32 -0.02,-0.592 0.087,-0.183 0.172,-0.14 -0.161,0.049 -0.137,0.042 -0.321,0.035 -0.363,0.007 -0.126,-0.433 -0.178,-0.208 -0.156,-0.435 -0.094,-0.495 0.061,-0.097 -0.28,-0.202 -0.072,-0.124 -0.293,-0.322 -0.333,-0.245 0.074,0.172 0.09,0.109 -0.166,0.298 0.162,0.502 -0.142,0.32 -0.133,0.416 -0.127,0.198 -0.401,0.426 -0.325,0.144 -0.212,0.027 -0.188,-0.045 -0.23,-0.22 -0.056,-0.184 -0.037,-0.309 -0.081,-0.044 -0.087,0.036 0.136,0.399 -0.002,0.186 0.245,0.358 -0.087,0.1 -0.444,0.196 -0.151,-0.032 -0.107,0.039 -0.029,0.161 -0.056,0.09 -0.699,0.246 -0.146,0.277 -0.09,0.281 -0.348,0.403 -0.466,0.333 -0.115,-0.019 -0.132,-0.078 0.018,-0.36 0.16,-0.305 -0.051,-0.326 -0.039,0.187 -0.301,0.454 -0.137,0.148 -0.276,-0.039 -0.382,0.061 -0.144,-0.466 0.003,-0.171 -0.028,-0.145 0.044,-0.153 -0.014,-0.122 -0.092,0.233 -0.035,0.202 -0.14,0.18 -0.383,0.193 -0.016,-0.245 -0.013,-0.221 0.082,-0.199 -0.012,-0.315 0.122,-0.456 -0.01,-0.156 -0.037,-0.173 -0.068,0.251 -0.039,0.26 -0.077,0.079 -0.141,0.059 -0.258,0.298 -0.151,0.267 -0.4,0.252 -0.211,-0.026 -0.027,-0.32 0.16,-1.135 0.157,-0.16 0.073,-0.197 0.131,-0.665 0.147,-0.251 0.058,-0.528 0.06,-0.091 0.197,-0.415 0.068,-0.762 -0.081,-0.379 -0.185,-0.368 -0.178,-1.106 -0.464,-0.898 -0.038,-0.3 -0.229,-0.363 0.211,-0.026 -0.434,-0.318 -0.06,-0.13 -0.087,-0.746 0.017,-0.417 -0.063,0.055 -0.059,0.257 -0.17,0.105 0.076,0.445 -0.02,0.108 -0.09,0.173 -0.362,-0.18 -0.266,-0.196 -0.301,-0.477 -0.295,-0.535 0.104,-0.083 0.136,-0.01 0.419,0.398 0.271,0.083 0.172,-0.099 0.213,-0.17 0.102,-0.33 -0.104,-0.121 -0.205,-0.066 -0.135,-0.089 -0.196,-0.224 -0.024,-0.114 -0.061,-0.146 -0.198,-0.103 -0.16,-0.131 0.135,-0.231 0.133,-0.172 -0.352,0.008 -0.4,-0.296 -0.083,-0.086 -0.133,-0.059 -0.315,-0.035 -0.262,0.087 0.119,0.423 -0.023,0.14 -0.172,-0.021 -0.358,-0.644 0.108,-0.163 0.154,-0.153 -0.076,-0.022 -0.149,0.01 0.146,-0.572 -0.089,-0.085 -0.046,0.179 -0.079,0.172 -0.305,0.404 -0.151,-0.076 -0.104,-0.101 0.146,-0.212 0.079,-0.057 0.055,-0.114 -0.113,-0.222 -0.18,-0.162 -0.144,-0.279 -0.075,-0.004 0.066,0.329 -0.027,0.47 -0.322,-0.519 -0.645,-0.738 -0.152,-0.222 -0.034,-0.217 -0.072,-0.2 -0.05,-0.219 -0.011,-0.169 -0.14,-0.153 -0.063,-0.268 -0.035,-0.272 0.08,-0.194 0.201,-0.209 0.143,-0.037 0.118,0.092 0.278,0.138 0.188,0.129 0.083,0.169 0.088,-0.021 0.089,-0.108 -0.018,-0.133 -0.09,-0.35 -0.025,-0.425 -0.004,-0.996 -0.022,-0.114 0.155,-0.1 0.063,-0.114 0.063,-0.17 0.04,-0.075 0.09,-0.005 0.142,0.083 0.232,0.285 0.155,0.064 0.154,-0.045 0.161,-0.427 0.059,-0.116 0.078,-0.076 0.143,0.013 0.083,-0.077 0.031,-0.185 -0.001,-0.206 -0.159,-0.564 -0.048,-0.261 -0.026,-0.257 0.1,-0.265 0.136,-0.31 -0.032,-0.271 0.037,-0.105 0.111,-0.015 0.139,0.065 0.153,-0.045 0.116,-0.166 0.047,-0.145 0.07,-0.627 0.047,-0.575 0.02,-0.469 -0.119,-0.281 -0.183,-0.756 0.053,-0.129 0.083,-0.03 0.271,0.265 0.117,0.044 0.197,-0.041 0.194,-0.059 0.141,-0.004 0.203,0.091 0.279,0.101 0.437,0.125 0.179,0.094 0.148,-0.013 0.12,-0.294 0.139,-0.429 0.206,-0.639 0.236,-0.465 0.063,-0.124 0.263,-0.379 0.255,-0.398 0.223,-0.503 0.124,-0.363 -0.011,-0.151 -0.08,-0.125 -0.167,-0.08 -0.138,-0.083 -0.038,-0.075 0.004,-0.085 0.071,-0.236 0.121,-0.279 0.126,-0.151 0.331,-0.187 0.211,-0.241 0.238,-0.319 0.129,-0.217 0.065,-0.442 0.071,-0.088 0.146,-0.143 0.111,-0.167 -0.009,-0.091 -0.059,-0.065 -0.11,-0.31 -0.051,-0.486 0.024,-0.395 0.083,-0.161 0.11,-0.224 0.204,-0.138 0.291,-0.096 0.445,-0.262 0.771,-0.608 0.278,-0.198 0.19,-0.103 0.185,-0.255 0.254,-0.279 0.363,-0.139 0.233,-0.054 1.1,-0.191 0.185,0.024 0.186,0.111 0.231,0.372 0.205,0.14 0.238,0.098 0.179,-0.042 0.005,-0.15 -0.566,-0.868 -0.051,-0.237 -0.02,-0.227 0.064,-0.18 0.177,-0.172 0.244,-0.194 0.304,-0.243 0.191,-0.168 0.225,-0.054 0.081,-0.097 0.023,-0.141 -0.012,-0.154 -0.103,-0.174 0.021,-0.219 0.034,-0.199 0.096,-0.116 0.21,-0.315 0.13,-0.228 0.068,-0.097 0.101,-0.171 0.172,-0.021 0.168,0.054 0.1,0.097 0.1,0.198 0.109,0.162 0.134,0 0.136,-0.023 0.063,0.022 0.13,0.135 0.248,0.324 0.11,0.082 0.104,0.138 0.055,0.276 0.034,0.277 0.311,0.961 0.093,0.202 0.069,0.154 0.145,0.038 0.118,-0.154 0.046,-0.165 0.122,-0.056 0.146,0.03 0.268,0.154 0.144,0.083 0.072,0.474 0.016,0.555 -0.021,0.172 0.117,0.457 0.036,0.524 0.025,0.287 0.003,0.273 -0.021,0.358 -0.063,0.479 -0.105,0.409 0.038,0.34 -0.063,0.155 -0.256,0.079 -0.022,0.13 0.075,0.213 0.179,0.267 0.005,0.168 -0.087,0.114 -0.188,0.011 -0.261,0.106 -0.18,0.344 -0.19,0.282 -0.104,0.056 -0.348,-0.08 -0.083,0.072 -0.122,0.48 -0.1,0.207 -0.149,0.174 -0.137,0.103 -0.124,0.072 -0.276,-0.048 -0.146,0.289 -0.146,0.381 -0.012,0.197 0.076,0.31 -0.04,0.086 -0.149,0.067 -0.245,0.139 -0.151,0.441 0.006,0.428 0.09,0.146 0.169,0.064 0.121,0.131 0.012,0.206 0.104,0.257 -0.049,0.299 -0.344,0.435 -0.01,0.237 0.183,0.073 0.158,-0.034 0.195,-0.103 0.229,-0.166 0.504,-0.242 0.549,-0.138 0.434,-0.026 0.371,0.01 0.182,0.051 0.055,0.089 0.508,-0.141 0.106,-0.008 0.092,-0.008 -0.003,0.094 -0.372,0.387 -0.069,0.18 0.012,0.193 0.152,0.179 0.147,0.138 0.125,0.346 -0.097,0.316 0.062,0.115 0.109,0.129 0.066,0.182 0.009,0.221 -0.062,0.353 0.537,0.184 0.464,0.083 0.338,0.022 0.217,0.081 0.131,0.07 0.092,0.126 0.027,0.138 -0.113,0.097 -0.229,0.309 -0.132,0.413 0.014,0.309 -0.016,0.268 -0.266,0.386 -0.105,0.265 -0.093,0.271 0.003,0.118 0.055,0.082 0.113,0.048 0.196,0.029 0.24,-0.031 0.572,0.065 0.653,0.119 0.259,0.065 0.085,0.12 -0.021,0.261 -0.041,0.243 0.042,0.187 0.105,0.171 0.177,0.057 0.152,0.066 0.029,0.131 -0.047,0.178 0.077,0.14 0.087,0.092 0.188,0.053 0.381,-0.114 0.267,0.051 0.241,0.078 0.205,-0.041 0.203,-0.1 0.444,-0.451 0.517,-0.244 0.17,-0.058 0.114,0.029 0.028,0.031 -0.007,0.092 0.054,0.371 -0.022,0.044 z m -22.814,4.904 0.037,0.282 -0.135,-0.116 -0.176,-0.392 0.005,-0.257 0.126,0.12 0.143,0.363 z m 1.352,0.093 0.061,0.409 -0.192,-0.153 -0.071,-0.211 -0.019,-0.216 0.221,0.171 z m 0.626,0.991 0.321,0.245 0.128,-0.017 0.199,0.155 0.005,0.061 -0.038,0.126 -0.09,0.099 -0.243,0.099 -0.167,-0.08 -0.066,-0.268 -0.196,-0.126 -0.051,-0.107 0.124,-0.146 0.074,-0.041 z m -0.067,2.58 -0.047,0.025 -0.292,-0.247 -0.231,-0.318 0.367,-0.063 0.354,0.069 0.002,0.169 -0.076,0.272 -0.077,0.093 z m 10.901,7.11 -0.106,0.038 -0.159,-0.19 -0.032,-0.452 0.133,-0.104 0.071,-0.025 0.104,0.056 0.04,0.073 0.018,0.091 -0.028,0.093 -0.041,0.42 z m -8.695,0.892 -0.183,0.283 -0.067,-0.423 0.297,-0.235 0.147,-0.225 0.155,-0.153 0.049,0.187 -0.147,0.354 -0.251,0.212 z m 0.921,0.367 -0.058,0.074 -0.115,-0.053 -0.027,-0.032 0.265,-0.319 0.028,0.119 -0.093,0.211 z m 9.852,7.836 -0.018,0.47 -0.141,-0.227 -0.023,-0.259 0.011,-0.241 0.03,-0.039 0.009,0.037 0.084,0.108 0.048,0.151 z m 0.276,1.433 0.063,0.079 0.09,-0.002 -0.025,0.279 -0.22,0.343 -0.131,0.05 -0.058,0 0.049,-0.501 -0.081,-0.286 0.027,-0.19 0.236,0.088 0.05,0.14 z m -0.976,0.594 -0.017,0.104 -0.162,0.213 -0.143,-0.124 -0.036,-0.067 0.145,-0.137 0.154,0.02 0.041,-0.031 0.018,0.022 z m 0.198,0.684 -0.033,0.016 -0.046,-0.009 -0.093,-0.046 -0.107,-0.194 0.057,-0.136 0.039,-0.033 0.094,0.011 0.05,0.026 0.017,0.05 -0.027,0.107 0.004,0.092 0.045,0.116 z m 1.065,0.699 -0.117,0.016 -0.056,-0.461 0.033,-0.066 0.166,0.226 0.236,0.138 -0.093,0.09 -0.169,0.057 z m -1.237,0.606 0.022,0.158 -0.175,-0.168 -0.03,-0.468 0.138,0.295 0.06,0.067 -0.015,0.116 z m 1.342,-0.15 -0.071,0.587 -0.178,-0.081 -0.085,0 -0.106,-0.332 0.008,-0.089 -0.064,-0.218 0.413,-0.038 0.083,0.171 z m -0.932,0.76 -0.016,0.064 -0.019,-0.002 -0.063,-0.045 0.039,-0.27 0.106,-0.221 0.109,-0.324 0.061,-0.07 0.022,0.171 -0.067,0.367 -0.057,0.2 -0.115,0.13 z m 0.899,1.468 -0.064,0.006 -0.059,-0.014 -0.058,-0.044 0.138,-0.305 0.043,0.357 z m -0.932,0.025 0.234,0.491 -0.025,0.076 -0.036,0.038 -0.056,-0.013 -0.094,-0.265 -0.176,-0.171 -0.211,0.032 0.175,-0.217 0.069,-0.049 0.12,0.078 z m -0.076,2.89 -0.136,0.165 -0.046,-0.007 0.063,-0.274 0.226,-0.2 0.199,-0.018 -0.022,0.124 -0.146,0.152 -0.138,0.058 z",
                        title: "Myanmar",
                        id: "MM",
                    },
                    {
                        d:
                            "m 802.36575,301.9954 -0.263,0.602 -0.526,1.202 -0.445,1.012 -0.236,0.568 -0.172,0.432 -0.179,0.409 -0.026,0.245 -0.201,0.394 -0.374,0.475 -0.081,0.514 0.015,0.461 -0.032,0.412 -0.41,0.261 -0.321,0.232 0.092,0.778 0.165,0.293 0.267,0.316 0.281,0.253 0.243,0.213 0.268,-0.102 0.227,-0.325 0.438,-0.286 0.243,-0.007 0.17,0.066 0.38,0.019 0.389,-0.104 0.305,-0.022 0.394,0.07 0.142,0.068 0.331,0.126 0.357,0.275 0.25,0.307 0.182,0.059 0.093,-0.098 0.2,-0.273 0.281,-0.263 0.341,-0.432 0.257,-0.332 0.202,-0.051 0.39,10e-4 0.175,-0.08 0.295,-0.042 0.261,0.123 0.726,0.065 0.195,0.17 0.344,0.505 0.195,0.269 0.338,0.135 0.204,0.093 0.181,0.072 0.18,0.13 0.043,0.157 0.073,0.24 0.11,0.138 0.205,0.136 0.156,0.082 0.049,0.173 0.049,0.085 0.143,0.121 0.421,0.516 0.205,0.138 0.312,0.298 0.13,0.247 0.007,0.259 0.081,0.197 0.208,0.296 0.098,0.2 -0.039,0.271 0.034,0.24 -0.081,0.247 -0.335,0.183 -0.116,0.087 -0.242,0.008 -0.41,-0.092 -0.399,0.052 -0.477,-0.102 -0.374,-0.217 -0.2,-0.175 -0.319,-0.103 -0.15,0.054 -0.189,0.225 -0.208,-0.04 -0.192,0.04 -0.494,-0.046 -0.269,-0.057 -0.425,0.157 -0.241,0.049 -0.452,0.192 -0.271,0.333 -0.203,0.079 -0.198,-0.016 -0.141,-0.122 -0.206,-0.147 -0.306,0.008 -0.091,0.063 -0.038,0.135 -0.1,0.41 0.002,0.184 -0.067,0.119 -0.181,0.039 -0.317,-0.011 -0.497,-0.027 -0.336,-0.106 -0.202,0.045 -0.275,0.222 -0.196,0.036 -0.159,0.094 -0.129,0.327 -0.202,0.203 -0.244,0.252 -0.262,0.537 -0.144,0.307 0.046,0.165 0.032,0.2 -0.121,0.227 -0.246,0.211 -0.198,0.039 -0.296,0.203 -0.407,0.365 -0.304,0.306 -0.396,0.074 -0.281,0.078 -0.623,0.095 -0.154,0.024 -0.683,0.047 -0.506,-0.164 -0.266,0.025 -0.236,0.093 -0.12,0.101 -0.042,0.192 -0.042,0.177 -0.192,0.275 -0.387,0.364 -0.319,0.241 -0.245,0.312 -0.139,0.113 -0.28,0.119 -0.151,0.064 -0.351,0.277 -0.279,0.247 -0.184,0.069 -0.222,-0.065 -0.147,-0.021 -0.434,-0.095 -0.294,-0.012 -0.411,-0.061 -0.962,-0.289 -0.309,-0.135 -0.273,-0.368 -0.247,-0.187 -0.335,-0.02 -0.503,0 -0.225,-0.073 -0.378,0.069 -0.413,0.374 -0.195,0.278 -0.169,0.285 -0.207,0.607 -0.092,0.405 -0.07,0.228 -0.221,0.363 -0.024,0.203 0.076,0.176 0.159,0.198 0.095,0.311 0.232,0.33 0.228,0.257 0.429,0.414 0.122,0.217 0.145,0.248 0.031,0.242 -0.027,0.158 -0.154,0.121 -0.301,0.061 -0.145,0.167 -0.221,0.224 -0.262,0.258 -0.123,0.014 -0.148,0.069 -0.741,0.319 -0.282,0.089 -0.222,0.106 -0.263,0.324 -0.207,0.241 -0.256,0.32 -0.113,0.141 -0.227,0.319 -0.299,0.364 -0.166,0.195 -0.09,0.116 -0.082,0.153 -0.313,0.117 -0.258,0.125 -0.39,0.188 -0.559,0.206 -0.452,0.2 -0.287,0.164 -0.427,0.207 -0.29,0.066 -0.584,-0.008 -0.722,0.053 -0.526,0.04 -0.395,-0.05 -0.597,-0.029 -0.457,-0.04 -0.305,0.077 -0.719,0.081 -0.161,0.018 -1.281,0.196 -0.566,0.104 -0.518,0.048 -0.381,0.076 -0.216,0.096 -0.32,0.136 -0.169,0.06 -0.567,0.268 -1.262,0.552 -0.844,0.447 -0.139,0.076 -0.569,0.315 -0.329,0.123 -0.229,0.28 -0.183,0.177 -0.192,0.076 -0.342,-0.18 -0.242,0.01 -0.773,-0.066 0,-0.818 -0.542,0.115 -0.865,0.185 -0.802,0.171 -0.734,-0.392 -0.566,-0.303 -0.492,-0.261 -0.746,-0.173 -0.651,-0.151 -1.174,-0.249 -0.516,-0.218 -0.261,-0.289 -0.466,-0.656 -0.151,-0.13 -0.227,-0.09 -0.235,-0.057 -0.51,0.003 -0.622,-0.051 -0.896,-0.138 -0.712,-0.111 -1.214,-0.205 -0.288,-0.025 -0.635,0.182 -0.814,0.233 -1.461,-0.183 -0.648,-0.085 -1.313,-0.174 -1.486,-0.197 -1.44,-0.204 -1.046,0.112 -0.583,0.063 -0.673,0.09 -0.093,-0.101 -0.027,-0.391 -0.121,-0.303 -0.368,-0.328 -0.247,-0.312 -0.471,-0.423 -0.148,-0.267 -0.05,-0.414 -0.434,-1.081 -0.27,-0.735 -0.068,-0.149 -0.116,-0.24 -0.152,-0.125 -0.323,-0.077 -0.087,-0.13 0,-0.255 0.051,-0.353 0.066,-0.258 -0.047,-0.065 -0.843,0.073 -0.517,-0.171 -0.431,-0.186 -0.612,-0.476 -0.363,-0.184 -0.465,-0.494 -0.676,-0.117 -0.252,-0.194 -0.318,-0.424 -0.277,-0.273 -0.394,-0.172 -0.622,-0.153 -1.062,-0.146 -0.36,-0.062 -0.586,0.098 -0.435,0.008 -0.705,-0.104 -0.402,-0.131 -0.496,-0.004 -0.323,0.002 -0.431,-0.03 -0.208,-0.086 -0.193,-0.105 -0.362,0.026 -0.253,-0.105 -0.236,-0.196 -0.247,-0.093 -0.27,0.006 -0.111,0.087 -0.104,-0.008 -0.067,-0.265 -0.253,-0.429 -0.038,-0.193 -0.155,-0.222 -0.091,-0.202 0.025,-0.279 0.109,-0.543 0.243,-0.492 0.158,-0.128 0.097,-0.146 0.204,-0.255 0.118,-0.204 -0.014,-0.28 -0.139,-0.292 -0.1,-0.377 0.018,-0.217 0.15,-0.258 0.176,-0.573 -0.015,-0.151 -0.069,-0.12 -0.018,-0.267 -0.034,-0.358 -0.211,-0.549 -0.114,-0.292 -0.2,-0.126 -0.234,-0.076 -0.202,-0.396 -0.254,-0.468 -0.159,-0.294 -0.055,-0.18 -0.025,-0.327 -0.119,-0.397 -0.125,-0.218 -0.093,-0.168 -0.048,-0.241 -0.048,-0.088 -0.344,-0.107 -0.246,-0.18 -0.102,-0.242 -0.036,-0.196 -0.074,-0.114 -0.194,-0.036 -0.135,0.176 -0.221,0.088 -0.15,-0.016 -0.147,-0.106 -0.091,-0.111 -0.154,-0.125 -0.218,-0.397 -0.229,-0.105 -0.42,0.018 -0.374,0.184 -0.226,-0.029 -0.192,-0.062 -0.214,-0.198 -0.15,-0.164 -0.223,-0.053 -0.439,-0.289 -0.297,-0.208 -0.025,-0.409 -0.14,-0.282 -0.29,-0.08 -0.292,-0.29 -0.426,-0.156 -0.268,-0.121 -0.233,-0.073 -0.034,-0.11 0.014,-0.094 0.107,-0.157 0.112,-0.147 0.027,-0.136 -0.09,-0.12 -0.241,-0.126 -0.31,-0.113 -0.063,-0.187 -0.185,-0.195 0.032,-0.157 0.147,-0.115 0.148,-0.085 0.035,-0.148 -0.106,-0.136 -0.051,-0.206 0.025,-0.154 -0.031,-0.197 0.011,0.001 0.327,-0.011 0.15,-0.095 0.113,-0.141 0.245,-0.157 0.052,-0.18 0.004,-0.357 0.16,-0.302 0.407,-0.09 0.156,-0.044 0.166,0.044 0.258,-0.043 0.249,-0.015 0.139,0.093 0.184,0.078 0.235,-0.009 0.08,-0.142 0.01,-0.199 0.101,-0.052 0.127,0.138 0.072,0.103 0.105,0.047 0.284,-0.123 0.198,-0.133 0.065,-0.274 0.115,-0.135 0.154,0.069 0.271,-0.002 0.223,-0.212 0.293,-0.169 0.21,-0.077 0.042,-0.143 -0.098,-0.316 0.027,-0.346 0.281,-0.196 0.376,-0.023 0.279,-0.135 0.077,-0.37 0.138,-0.106 0.139,-0.042 0.339,-0.058 0.244,-0.151 0.151,-0.069 0.426,-0.203 0.388,-0.039 0.166,-0.162 0.13,-0.204 0.218,-0.078 0.221,-0.177 0.293,-0.225 0.116,-0.032 0.48,-0.131 0.188,-0.048 0.113,-0.029 0.208,0.009 0.088,-0.239 0.211,-0.175 0.212,-0.059 0.103,-0.175 0.203,-0.223 0.275,-0.123 0.427,-0.019 0.414,0.025 0.249,-0.038 0.204,-0.33 0.039,-0.163 0.047,-0.167 0.166,-0.064 0.2,0.271 0.169,0.168 0.259,0.175 0.134,0.164 0.154,0.023 0.161,-0.123 0.114,-0.299 0.216,-0.046 0.238,0.048 0.063,0.147 0.02,0.144 0.109,0.256 0.262,0.223 0.335,-0.011 0.135,-0.04 0.326,0.031 0.321,0.048 0.35,0.053 0.102,0.008 0.375,0.027 0.545,0.039 0.241,-0.018 0.492,0.073 0.1,0.198 0.091,0.468 0.077,0.445 0.023,0.357 0.128,0.185 0.163,0.06 0.108,0.144 0.19,0.196 0.14,0.28 0.171,-0.019 0.119,-0.066 0.262,-0.021 0.334,0.019 0.233,0.154 0.087,0.204 0.189,0.113 0.153,-0.036 0.458,-10e-4 0.158,0.012 0.158,0.112 0.227,0.019 0.125,-0.142 0.395,-0.097 0.228,-0.202 0.176,-0.002 0.133,0.098 0.102,0.132 0.151,-0.059 0.082,-0.109 0.132,0 0.129,0.071 0.331,0.123 0.24,0.23 0.185,0.023 0.24,-0.068 0.11,-0.031 0.105,0.114 0.155,0.061 0.117,-0.084 0.201,-0.06 0.769,0.125 0.177,0.23 0.137,0.108 0.11,0.187 0.201,0.134 0.424,-0.046 0.165,-0.137 0.343,-0.304 0.137,-0.297 0.173,-0.095 0.195,-0.049 0.183,0.001 0.191,-0.01 0.233,-0.218 0.188,-0.076 0.279,-0.277 0.052,-0.125 0.136,-0.324 0.084,-0.205 0.141,-0.328 0.076,-0.529 0.043,-0.281 -0.037,-0.203 -0.166,-0.106 -0.211,-0.05 -0.186,-0.155 -0.138,-0.181 -0.081,-0.253 -0.109,-0.297 0.006,-0.215 -0.031,-0.166 -0.093,-0.142 -0.179,-0.249 -0.087,-0.186 0.029,-0.296 0.211,-0.506 0.02,-0.236 0.026,-0.146 -0.011,-0.133 0.066,-0.305 0.119,-0.128 0.136,-0.327 0.183,-0.151 0.23,-0.01 0.099,-0.089 0.048,-0.328 0.111,-0.253 0.074,-0.179 0.14,-0.196 0.807,-0.378 0.335,-0.471 0.119,-0.238 0.13,-0.512 0.125,-0.215 0.182,0.071 0.214,0.302 0.16,0.003 0.238,0.163 0.649,0.343 0.351,0.107 0.226,0.033 0.299,0.095 0.192,0.2 0.375,0.326 0.317,0.083 0.55,0.033 0.669,0.017 0.19,0.057 0.489,0.234 0.542,0.259 0.51,0.231 0.386,0.178 0.229,0.174 0.215,0.099 0.233,-0.085 0.299,0.019 0.702,0.208 0.444,0.174 0.371,0.129 0.124,0.178 0.012,0.237 -0.05,0.2 0.028,0.484 0.119,0.254 0.044,0.339 0.045,0.324 -0.032,0.319 0.057,0.169 0.116,0.1 0.113,0.222 -0.037,0.234 -0.05,0.136 0.008,0.219 0.134,0.18 0.199,0.035 0.174,0.047 0.216,0.283 0.385,0.326 0.23,0.09 0.265,0.146 0.505,0.144 0.343,0.042 0.202,0.117 0.198,0.279 0.328,0.058 0.21,0.097 0.384,0.115 0.254,-0.066 0.223,-0.098 0.149,0.019 0.288,0.063 0.337,0.014 0.283,-0.067 0.226,-0.197 0.263,-0.266 0.316,-0.135 0.365,-0.048 0.25,-0.108 0.818,-0.18 0.33,-0.032 0.256,-0.173 0.227,-0.136 0.328,-0.059 0.443,0.143 0.424,0.119 0.513,0.039 0.341,0.164 0.241,0.155 0.38,0.123 0.422,-0.057 0.579,-0.049 0.383,0.071 0.4,0.282 0.246,0.225 0.277,0.482 0.29,0.232 0.252,0.19 0.32,0.013 0.797,0.015 0.437,0.1 0.364,0.054 0.087,0.1 -0.036,0.329 0.011,0.469 -0.005,0.215 0.08,0.162 0.124,0.029 0.068,0.229 0.18,0.135 0.323,0.163 0.544,0.553 0.325,0.236 0.255,0.08 0.335,-0.055 0.525,0.002 0.889,10e-4 0.609,0.166 0.211,0.113 0.622,0.132 0.684,0.144 0.578,0.151 0.34,-0.195 0.299,-0.018 0.285,0.141 0.286,0.212 0.22,-0.023 0.331,-0.099 1.057,-0.592 0.371,-0.222 0.26,0.057 0.232,-0.078 0.177,-0.067 0.451,-0.092 0.275,-0.025 0.283,-0.053 0.408,-0.036 0.829,-0.389 0.336,-0.076 0.568,0.108 0.306,-0.071 0.305,-0.196 0.394,-0.203 0.103,-0.33 0.202,-0.454 0.436,-0.334 0.354,-0.293 0.361,-0.284 0.444,-0.238 0.418,-0.172 0.532,-0.453 0.424,-0.23 0.211,-0.075 0.251,0.083 0.469,0.061 0.34,-0.018 0.192,0.052 0.382,0.222 0.348,0.194 0.266,0.346 0.495,0.481 0.254,0.161 0.18,0.067 0.446,0.045 0.364,0.024 0.218,-0.11 0.367,-0.201 0.585,-0.256 0.23,0.007 0.377,0.136 0.562,0.251 0.225,0.188 z",
                        title: "Mongolia",
                        id: "MN",
                    },
                    {
                        d:
                            "m 883.82475,409.6444 -0.086,0.11 -0.071,-0.081 -0.02,-0.16 0.125,0.015 0.046,0.033 0.006,0.083 z m 0.193,2.01 -0.136,0.064 0.169,-0.289 0.051,-0.05 0.079,0.105 -0.163,0.17 z m -0.183,5.08 -0.062,0.02 -0.089,-0.01 -0.063,-0.046 -0.014,-0.077 0.181,-0.004 0.067,0.058 -0.02,0.059 z m 0.112,3.495 -0.008,0.075 -0.144,-0.018 -0.039,-0.034 0.081,-0.261 0.206,-0.12 0.1,-0.024 -0.094,0.124 -0.018,0.139 -0.084,0.119 z m -0.252,0.47 -0.116,0.147 -0.082,-0.229 -0.014,-0.092 0.106,-0.084 0.063,0.001 0.043,0.257 z m -1.115,2.341 -0.14,0.134 -0.1,-0.027 -0.063,-0.046 -0.015,-0.077 0.226,-0.074 0.092,0.026 0,0.064 z",
                        title: "Northern Mariana Islands",
                        id: "MP",
                    },
                    {
                        d:
                            "m 304.18675,422.0714 -0.029,0.165 -0.071,0.032 -0.105,-0.137 -0.461,0.019 -0.071,-0.122 -0.004,-0.058 0.222,-0.208 -0.261,-0.056 -0.103,-0.09 -0.221,-0.438 0.018,-0.128 0.092,-0.067 0.149,-0.009 0.282,0.141 0.209,0.202 0.071,0.003 0.024,0.057 -0.042,0.142 0.125,0.12 0.054,0.089 z",
                        title: "Martinique",
                        id: "MQ",
                    },
                    {
                        d:
                            "m 461.36075,390.8904 -0.983,0 -1.313,10e-4 -0.895,0 -0.919,0 -0.861,0 0.075,0.701 0.08,0.764 0.08,0.762 0.08,0.761 0.08,0.759 0.08,0.758 0.08,0.756 0.08,0.754 0.08,0.753 0.08,0.751 0.08,0.75 0.08,0.75 0.08,0.748 0.08,0.747 0.08,0.746 0.08,0.744 0.08,0.743 0.08,0.742 0.08,0.74 0.08,0.739 0.08,0.738 0.08,0.737 0.08,0.735 0.08,0.734 0.08,0.733 0.08,0.732 0.08,0.731 0.08,0.73 0.08,0.729 0.08,0.728 0.08,0.727 0.08,0.726 0.08,0.725 0.078,0.702 0.334,0.368 0.42,0.462 -0.123,0.654 -0.146,0.779 -0.16,0.849 -0.593,0 -0.573,0 -0.572,0 -0.572,0 -0.572,0 -0.573,0 -0.572,0 -0.572,0 -0.572,0 -0.572,0 -0.573,0 -0.572,0 -0.572,0 -0.572,0 -0.573,0 -0.572,0 -0.572,0 -0.533,0 -0.328,-0.02 -0.117,-0.066 -0.042,-0.439 -0.098,0.028 -0.116,0.129 -0.06,0.14 0.021,0.183 -0.019,0.155 -0.368,0.061 -0.497,0.104 -0.523,0.08 -0.528,-0.029 -0.18,-0.036 -0.191,-0.058 -0.42,-0.063 -0.229,-0.005 -0.262,0.014 -0.309,0.035 -0.099,0.081 -0.233,0.327 -0.226,0.379 -0.147,-0.002 -0.166,-0.208 -0.455,-0.392 -0.551,-0.516 -0.251,-0.256 -0.133,-0.033 -0.264,0.184 -0.222,0.177 -0.236,0.25 -0.107,0.24 -0.085,0.283 -0.038,0.333 -0.086,0.388 -0.191,0.313 -0.226,0.236 -0.168,0.111 -0.065,0.061 -0.494,-0.184 -0.062,-0.023 -0.298,-0.208 -0.144,-0.247 -0.235,-0.186 -0.326,-0.125 -0.212,-0.142 -0.099,-0.16 -0.12,-0.106 -0.127,-0.055 -0.012,-0.057 0.03,-0.079 -0.03,-0.146 -0.191,-0.326 -0.178,-0.15 -0.152,0.024 -0.086,-0.04 -0.052,-0.072 -0.021,-0.105 -0.104,-0.091 -0.18,-0.04 -0.145,-0.242 -0.109,-0.445 -0.142,-0.347 -0.174,-0.249 -0.125,-0.093 -0.092,-0.017 -0.031,-0.039 -0.025,-0.072 -0.136,-0.026 -0.191,0.075 -0.172,-0.025 -0.084,-0.122 -0.117,-0.011 -0.149,0.1 -0.165,-0.029 -0.18,-0.159 -0.1,-0.158 -0.019,-0.157 -0.311,-0.313 -0.602,-0.47 -0.656,-0.22 -0.71,0.029 -0.398,-0.022 -0.087,-0.074 -0.087,0.006 -0.088,0.086 -0.093,0.019 -0.099,-0.048 -0.062,0.036 -0.024,0.12 -0.25,0.062 -0.475,10e-4 -0.384,0.074 -0.292,0.146 -0.414,0.063 -0.536,-0.02 -0.323,-0.054 -0.11,-0.086 -0.154,-0.021 -0.198,0.046 -0.178,0.233 -0.157,0.419 -0.129,0.239 -0.103,0.059 -0.11,0.312 -0.062,0.522 -0.093,0.229 -0.001,-1.302 0.153,-0.487 0.05,-0.428 0.328,-0.947 0.391,-0.776 0.361,-1.032 0.136,-1.002 -0.046,-0.983 -0.107,-0.876 -0.183,-0.58 -0.177,-0.841 -0.261,-0.444 -0.478,-0.388 -0.107,-0.227 0.111,-0.085 0.291,-0.058 0.185,-0.303 -0.392,0.117 0.453,-0.93 0.141,-0.634 -0.022,-0.417 0.086,-0.258 -0.346,-0.559 -0.269,-0.705 -0.139,-0.111 -0.144,-0.059 -0.013,0.166 -0.078,0.148 -0.168,-0.089 -0.297,-0.513 -0.415,-0.836 -0.146,-0.086 -0.121,0.115 -0.076,0.11 -0.14,0.698 -0.045,-0.277 0.061,-0.326 0.103,-0.402 0.116,-0.559 0.36,0 0.644,-10e-4 0.644,-0.001 0.644,0 0.644,-10e-4 0.644,-0.001 0.643,-10e-4 0.644,0 0.644,-10e-4 0.644,-0.001 0.644,0 0.644,-10e-4 0.644,-0.001 0.643,0 0.644,-10e-4 0.644,-10e-4 0.643,0 0.425,0 -0.025,-0.398 -0.02,-0.316 -0.027,-0.425 -0.027,-0.423 -0.026,-0.424 -0.025,-0.399 -0.025,-0.399 -0.023,-0.37 -0.021,-0.34 -0.037,-0.196 -0.137,-0.389 -0.029,-0.193 0.037,-0.204 0.091,-0.192 0.251,-0.352 0.38,-0.271 0.438,-0.313 0.334,-0.239 0.171,-0.059 0.523,-0.083 0.412,-0.181 0.401,-0.176 0.168,-0.098 0.02,-0.331 0,-0.37 0,-0.415 0,-0.416 0,-0.416 0,-0.417 0,-0.417 0,-0.417 0,-0.418 0,-0.418 0,-0.418 0,-0.419 0,-0.42 0,-0.42 0,-0.421 0,-0.421 0,-0.422 0,-0.422 0,-0.37 0.42,0 0.523,0 0.522,0 0.523,0 0.523,0 0.523,0 0.523,0 0.523,0 0.523,0 0.523,0 0.523,0 0.523,0 0.523,0 0.523,0 0.522,0 0.523,0 0.523,0 0.571,0 0,-0.354 0,-0.509 -10e-4,-0.7 0,-0.704 -0.001,-0.62 0,-0.621 -10e-4,-0.523 0.528,0.347 0.528,0.347 0.528,0.347 0.528,0.346 0.528,0.346 0.528,0.345 0.527,0.345 0.528,0.345 0.528,0.345 0.528,0.344 0.528,0.344 0.528,0.343 0.528,0.343 0.528,0.343 0.528,0.343 0.527,0.342 0.442,0.286 0.679,0.461 0.633,0.429 0.625,0.429 z m -32.417,15.965 -0.18,0.288 -0.08,-0.11 -0.031,-0.189 0.16,-0.271 0.076,-0.14 0.139,-0.051 -0.084,0.473 z",
                        title: "Mauritania",
                        id: "MR",
                    },
                    { d: "m 300.47675,415.5674 -0.016,0.172 -0.19,-0.053 -0.004,-0.152 0.089,-0.154 0.044,-0.015 z", title: "Montserrat", id: "MS" },
                    {
                        d:
                            "m 515.06575,355.0364 -0.168,0.053 -0.167,-0.104 -0.039,-0.063 0.232,-0.053 0.114,0.047 0.048,0.09 -0.02,0.03 z m 0.709,0.604 -0.094,0.112 -0.27,-0.005 -0.236,-0.175 -0.002,-0.366 0.272,0.072 0.249,0.245 0.081,0.117 z",
                        title: "Malta",
                        id: "MT",
                    },
                    {
                        d:
                            "m 636.69275,521.3014 -0.354,0.084 -0.398,-0.029 -0.154,-0.159 -0.03,-0.067 0.133,-0.063 -0.008,-0.205 0.066,-0.324 0.085,-0.133 0.197,-0.119 0.081,-0.261 0.17,-0.174 0.227,-0.022 0.226,0.322 0.154,0.339 -0.032,0.341 -0.156,0.124 -0.052,0.197 z",
                        title: "Mauritius",
                        id: "MU",
                    },
                    {
                        d:
                            "m 681.20675,451.3024 -0.049,0.026 -0.046,-0.01 -0.016,-0.033 0.023,-0.048 0.038,-0.063 0.026,-0.068 0.038,-0.036 0.029,0.012 -0.003,0.038 -0.014,0.052 -0.009,0.068 -0.017,0.062 z m -0.269,2.607 -0.06,0.005 -0.037,-0.048 0.008,-0.069 0.047,-0.049 0.073,-0.003 0.042,0.043 -0.021,0.067 -0.052,0.054 z",
                        title: "Maldives",
                        id: "MV",
                    },
                    {
                        d:
                            "m 573.00875,495.4224 -0.373,-0.007 -0.469,0.037 -0.115,0.09 -0.035,0.199 -0.147,0.41 -0.082,0.151 -0.173,0.276 -0.244,0.389 -0.051,0.127 0.008,0.131 0.144,0.529 0.151,0.556 0.048,0.218 0.107,0.74 0.06,0.524 0.009,0.308 0.051,0.412 0.134,0.223 0.141,0.14 0.53,0.084 0.158,0.103 0.3,0.263 0.656,0.728 0.36,0.465 0.317,0.409 0.566,0.761 0.44,0.592 0.055,0.556 0.073,0.081 -0.148,0.413 -0.097,0.667 0.07,0.443 -0.029,0.757 -0.081,0.807 -0.101,0.289 -0.13,0.109 -0.308,0.087 -0.676,0.101 -0.101,0.095 -0.087,0.157 -0.137,0.373 -0.161,0.376 -0.051,0.161 0.031,0.038 0.145,0.192 0.144,0.491 0.026,0.843 -0.05,0.063 -0.2,0.037 -0.215,-0.011 -0.089,-0.048 -0.08,-0.094 -0.058,-0.18 0.141,-0.125 0.05,-0.22 -0.09,-0.188 -0.181,-0.042 -0.23,-0.173 -0.49,-0.563 -0.41,-0.395 -0.238,-0.327 -0.243,-0.13 -0.07,-0.08 -0.059,-0.138 -10e-4,-0.199 0.022,-0.146 -0.076,-0.165 -0.246,-0.254 -0.112,-0.141 -0.006,-0.168 0.104,-0.162 0.21,-0.198 0.159,-0.401 0.057,-0.259 0.297,-0.521 0.041,-0.452 0.006,-0.361 -0.018,-0.27 -0.076,-0.553 -0.053,-0.382 -0.366,-0.5 -0.119,-0.047 -0.347,0.044 -0.3,0.073 -0.147,0.104 -0.223,0.005 -0.585,0.087 -0.184,0.037 -0.106,0.09 -0.062,0.019 -0.368,-0.386 -0.323,-0.417 -0.411,-0.708 -0.117,-0.085 -0.15,-0.208 -0.125,0.052 -0.172,0.146 -0.093,0.04 -0.048,-0.004 -0.031,-0.037 -0.038,-0.093 -0.133,-0.267 -0.149,-0.191 -0.158,-0.074 -0.129,-0.088 0.057,-0.085 0.06,-0.061 -0.026,-0.063 -0.072,-0.092 -0.28,-0.133 -0.004,-0.057 0.247,-0.115 0.156,-0.137 0.106,-0.131 0.134,-0.287 0.109,-0.286 0.082,-0.093 0.028,-0.189 -0.019,-0.213 0.055,-0.272 0.026,-0.257 -0.083,-0.1 -0.07,-0.173 0.083,-0.294 0.13,-0.203 0.623,-0.211 0.434,-0.191 0.092,-0.083 0.147,-0.163 0.082,-0.159 -0.059,-0.047 -0.341,-0.004 -0.084,-0.061 -0.246,-0.559 0.136,-0.64 0.012,-0.251 -0.003,-0.312 -0.043,-0.227 -0.108,-0.095 -0.066,-0.122 0.018,-0.333 0.1,-0.04 0.216,-0.44 0.096,-0.259 -0.115,-0.207 -0.127,-0.295 -0.058,-0.188 -0.032,-0.062 0.088,-0.116 0.146,-0.112 0.164,-0.031 0.173,-0.053 0.545,-0.546 0.007,-0.106 -0.099,-0.183 -0.204,-0.276 -0.045,-0.112 -0.024,-0.332 -0.081,-0.099 -0.299,-0.223 -0.23,-0.235 0.072,-0.238 0.039,-0.26 -0.114,-0.143 -0.169,-0.148 -0.105,-0.216 -0.048,-0.161 -0.133,-0.064 -0.123,-0.002 -0.09,0.1 -0.097,-0.009 -0.118,-0.035 -0.039,-0.139 -0.007,-0.15 -0.081,-0.102 -0.078,-0.142 -0.01,-0.075 0.049,-0.022 0.103,-0.013 0.439,0.285 0.266,0.013 0.296,0.053 0.253,0.251 0.131,0.033 0.167,-0.035 0.478,-0.026 0.192,0.036 0.247,0.147 0.097,0.02 0.155,0.006 0.027,-0.04 0.016,-0.087 -0.027,-0.176 0.035,-0.095 0.094,-0.103 0.261,0.12 0.652,0.548 0.02,0.071 0.416,0.544 0.135,0.23 0,0.122 0.128,0.476 0.028,0.223 -0.029,0.17 0.005,0.136 0.05,0.194 -0.017,0.082 0.148,0.285 0.071,0.24 0.015,0.234 -0.042,0.229 -0.131,0.333 -0.022,0.134 0.029,0.122 0.085,0.133 0.141,0.143 0.106,0.172 0.072,0.203 0.061,0.092 0.076,-0.002 0.14,0.031 0.112,0.119 0.13,0.199 0.043,0.229 0.026,0.099 z m -0.892,1.242 -0.056,0.151 -0.116,-0.002 -0.109,-0.134 0.035,-0.104 0.105,-0.032 0.092,0.039 0.049,0.082 z m 0.218,0.276 -0.099,0.023 -0.062,-0.051 0.015,-0.152 0.035,-0.11 0.098,-0.017 0.068,0.029 0.047,0.05 0.001,0.081 -0.029,0.083 -0.074,0.064 z",
                        title: "Malawi",
                        id: "MW",
                    },
                    {
                        d:
                            "m 202.25575,387.9034 -0.051,0.641 -0.17,0.524 -0.559,1.089 -0.233,0.674 -0.451,1.918 -0.139,1.252 -0.033,0.588 -0.039,0.083 0.042,0.086 -0.108,1.297 0.058,1.104 -0.037,0.171 -0.164,0.332 -0.115,0.459 0.045,0.204 -0.002,0.141 0.168,0.697 0.054,0.523 0.501,0.894 0.281,0.312 0.349,0.27 0.128,0.152 -0.063,0.379 -0.142,0.191 -0.061,0.304 -0.07,-0.251 0.027,-0.326 0.111,-0.175 0.004,-0.128 -0.205,-0.137 -0.375,-0.449 -0.458,-0.796 0.326,1.271 0.112,0.203 0.087,0.084 0.146,0.089 0.038,0.138 0.001,0.102 0.402,0.88 0.455,0.908 0.024,0.248 0.182,0.305 1.159,1.27 0.709,0.946 0.246,0.896 0.148,0.279 0.073,0.382 0.464,0.428 0.142,0.276 0.249,0.153 0.201,0.462 0.378,0.27 -0.09,0.005 -0.331,-0.136 0.022,0.09 0.278,0.191 0.545,0.188 0.136,0 -0.215,-0.098 -0.182,-0.132 0.064,-0.019 0.381,0.164 1.065,0.054 0.469,0.383 0.608,0.165 0.327,0.489 0.38,0.51 0.243,0.024 0.189,0.002 0.57,-0.086 0.886,-0.321 0.305,-0.157 0.595,-0.213 0.911,-0.039 0.282,0.06 0.681,-0.133 0.325,-0.163 0.113,-0.148 0.053,-0.109 0.631,-0.156 0.125,-0.031 0.639,-0.028 0.309,-0.058 0.363,-0.034 0.262,0.23 0,0.112 -0.175,0.106 0.082,0.103 0.311,0.17 0.57,0.069 0.185,-0.027 0.263,-0.251 0.463,-0.243 -0.01,-0.283 -0.083,-0.155 -0.134,-0.01 -0.032,-0.087 0.094,-0.208 -0.024,-0.07 -0.288,0.2 -0.066,0 0.032,-0.093 0.06,-0.074 0.844,-0.436 0.216,-0.179 0.292,-0.158 0.605,-0.593 0.129,-1.118 0.121,-0.196 0.401,-0.344 0.043,-0.104 0.026,-0.234 -0.011,-0.589 0.022,-0.464 -0.017,-0.525 0.072,-0.469 0.065,-0.131 0.23,-0.752 0.478,-0.333 0.829,-0.395 0.19,-0.065 2.641,-0.418 0.371,-0.102 0.454,-0.271 0.332,-0.092 0.605,0.007 0.186,-0.036 0.037,-0.037 0.001,-0.037 0.112,-0.037 0.35,0.036 0.654,0.164 0.238,0.041 0.585,0.19 0.644,0.076 0.092,-0.033 0.085,-0.058 0.065,-0.111 -0.067,-0.097 -0.063,0.007 -0.109,0.052 -0.13,0.005 -0.255,-0.08 0.051,-0.067 0.26,0.006 0.167,-0.032 0.247,-0.117 0.263,0.088 0.346,0.388 0.246,0.123 0.02,0.562 0.037,0.103 0.09,0.148 -0.123,0.435 -0.138,0.359 -0.173,0.294 -0.374,0.463 -0.454,0.37 -0.562,0.821 -0.128,0.384 0.003,0.308 0.095,0.297 -0.027,0.11 -0.069,0.111 -0.114,-0.01 -0.222,0.142 -0.286,0.422 -0.006,0.128 0.125,0.118 0.163,-0.057 0.212,-0.005 0.119,-0.035 0.125,0.009 -0.028,0.242 -0.134,0.172 -0.085,0.054 -0.152,0.029 -0.17,0.098 -0.087,0.09 0.008,0.279 0.094,0.022 0.2,-0.208 0.116,0.01 0.023,0.088 -0.259,0.713 -0.167,0.731 -0.226,0.423 -0.08,0.615 -0.119,0.262 -0.138,0.259 -0.081,-0.014 -0.218,-0.491 -0.223,-0.126 -0.049,-0.119 0.127,-0.596 -0.058,-0.33 -0.118,0.013 -0.148,0.181 -0.197,0.157 0.004,0.227 -0.226,0.377 -0.056,0.124 -0.215,-0.029 -0.25,0.016 -0.173,0.091 -0.177,0.457 -0.442,0.643 -0.176,0.311 -0.144,0.107 -0.113,0.042 -0.126,-0.073 -0.302,-0.176 -0.233,0.084 -0.081,0.202 0.003,0.255 -0.59,0 -1.002,-10e-4 -1.276,-0.001 -1.23,-10e-4 -1.03,-0.001 -0.004,0.573 -0.003,0.507 -0.003,0.57 -0.568,-0.005 -0.601,-0.005 0.048,0.057 0.206,0.107 0.267,0.255 0.315,0.397 0.382,0.316 0.449,0.235 0.295,0.23 0.143,0.225 0.072,0.191 0,0.158 0.164,0.125 0.293,0.083 0.152,0.141 0,0.115 -0.093,0.261 -0.027,0.288 0.036,0.26 -0.21,0.004 -0.509,0 -0.775,10e-4 -0.713,0 -0.562,0 -0.849,0.001 -0.233,0.4 -0.387,0.664 -0.351,0.601 -0.294,0.505 -0.048,0.133 0,0.108 0.364,0.472 -0.067,0.137 -0.127,0.072 -0.041,0.111 0.008,0.18 -0.086,0.239 0.028,0.165 0.046,0.203 -0.076,0.176 -0.062,0.17 -0.073,0.074 -0.083,-0.064 -0.748,-0.784 -0.78,-0.863 -0.307,-0.282 -0.297,-0.214 -0.4,-0.398 -1.05,-0.875 -0.542,-0.4 -0.51,-0.479 -0.458,-0.266 -0.451,-0.173 -0.201,-0.1 -0.176,-0.131 -0.098,-0.008 -0.049,0.178 0.158,0.089 0.189,0.076 0.149,0.005 0.157,0.063 0.463,0.243 0.076,0.125 -1.317,-0.486 -0.536,-0.045 -0.058,-0.076 0.267,-0.254 -0.083,-0.092 -0.095,-0.013 -0.287,0.176 -0.106,0.012 -0.019,-0.116 0.013,-0.109 -0.185,-0.16 -0.117,0.006 -0.096,0.112 -0.25,0.211 0.008,0.083 0.49,0.09 0.169,0.051 -0.039,0.056 -0.42,-0.001 -0.52,0.096 -0.926,0.587 -0.862,0.252 -1.24,0.564 -0.547,0.029 -0.287,0.09 -0.834,-0.216 -1.057,-0.53 -1.6,-0.167 -1.078,-0.695 -1.07,-0.286 -0.679,-0.668 -0.409,-0.029 -0.263,-0.107 -0.972,-0.242 -0.961,-0.16 -0.937,-0.585 -0.613,-0.186 -0.53,-0.233 -1.167,-0.398 -0.433,-0.221 -0.409,-0.342 -0.667,-0.354 -0.285,-0.296 -0.318,-0.106 -0.455,-0.558 -0.237,-0.235 -0.201,-0.11 -0.215,-0.038 -0.621,0.045 -0.927,-0.247 -0.428,-0.063 -0.895,-0.364 -1.188,-0.407 -0.389,-0.468 -0.333,-0.437 -0.6,-0.576 -0.374,-0.246 -0.649,-0.292 -0.36,-0.237 -0.555,-0.182 -0.942,-0.462 -0.299,-0.396 -0.175,-0.352 -0.501,-0.428 -0.549,-0.799 -0.142,-0.295 -0.106,-0.453 -0.127,-0.263 -0.15,-0.206 0.077,-0.15 0.279,-0.185 0.464,-0.042 0.328,-0.2 0.043,-0.165 -0.021,-0.102 -0.21,-0.252 -0.261,-0.067 -0.203,-0.004 -0.052,-0.096 0.153,-0.105 0.175,-0.246 0.258,-0.3 0.182,-0.277 0.034,-0.391 -0.023,-0.391 0.069,-0.331 -0.625,-0.382 -0.073,-0.163 -0.197,-0.439 -0.341,-0.51 0.01,-1.021 -0.411,-0.908 -0.425,-0.452 -0.22,-0.158 -0.597,-0.703 -0.471,-0.409 -0.461,-0.771 -0.456,-0.491 -0.58,-0.825 -0.419,-0.412 -1.909,-1.395 0.107,0 0.56,0.343 0.094,-0.028 0.013,-0.167 -0.064,-0.2 -0.104,-0.048 -0.149,0.045 -0.201,-0.042 -0.101,-0.066 -0.301,-0.042 -0.377,-0.233 -0.162,-0.242 -0.018,-0.276 -0.541,-0.589 -0.205,-0.329 0.105,0.024 0.144,0.132 0.146,0.038 0.17,0.001 0.123,-0.053 -0.044,-0.098 -0.116,-0.082 -0.788,-0.311 -0.26,-0.218 -0.646,-0.364 -0.153,-0.128 -0.102,-0.352 -0.158,-0.017 -0.139,0.098 -0.381,0.096 -0.097,-0.112 -0.014,-0.108 0.269,-0.114 0.247,-0.333 -0.005,-0.116 -0.136,0.134 -0.206,0.149 -0.212,0.083 -0.315,0.069 -0.162,-0.05 -0.141,-0.075 -0.227,-0.291 -0.114,-0.948 0.2,-0.329 0.234,-0.326 0.199,-0.193 0.115,0.146 0.118,0.018 -0.083,-0.165 -0.196,-0.154 -0.069,-0.154 -0.007,-0.141 -0.093,-0.262 -0.58,-0.551 -0.542,0.042 -0.221,-0.019 -0.207,-0.21 -0.176,-0.354 -0.086,-0.297 -0.011,-0.158 -0.052,-0.159 -0.935,-0.26 -0.281,-0.223 -0.282,-0.281 -0.117,-0.229 -0.11,-0.169 -0.09,-0.296 -0.064,-0.345 0.104,-0.447 0.136,-0.216 -0.643,-0.161 -0.251,-0.007 -0.203,0.091 -0.183,-0.117 -0.38,-0.13 -0.452,-0.469 -0.531,-0.852 -0.584,-0.274 -0.188,-0.297 -0.239,-0.268 -0.209,-0.332 -0.032,-0.145 -0.063,-0.081 -0.292,-0.232 -0.328,-0.393 -0.085,-0.316 -0.088,-0.484 -0.219,-0.171 -0.215,-0.079 -0.042,-0.231 0.013,-0.129 -0.073,-0.245 -0.444,-0.588 -0.225,-0.484 -0.124,-0.151 -0.116,-0.221 -0.059,-0.453 -0.184,-0.564 -0.356,-0.679 -0.297,-0.458 -0.148,-0.462 0.066,-0.471 -0.05,-0.291 -0.038,-0.068 0.03,-0.095 0.099,0.053 0.083,-0.085 -0.01,-0.301 -0.104,-0.091 -0.288,-0.094 -0.127,-0.065 -0.7,-0.123 -0.401,-0.171 -0.026,-0.398 -0.188,-0.183 -0.167,-0.113 -0.528,-0.235 -0.083,0.12 -0.071,0.222 -0.22,0.048 -0.192,0.01 -0.322,-0.154 -0.799,-0.587 -0.169,-0.094 -0.249,-0.05 -0.125,-0.098 -0.54,-0.31 0.108,0.165 0.156,0.171 0.139,0.497 -0.163,0.358 -0.095,1.248 0.104,0.248 0.234,0.397 0.162,0.629 0.05,0.468 0.146,0.371 -0.046,0.87 0.056,0.264 0.223,0.433 0.413,0.406 0.086,0.213 0.542,0.309 0.33,0.401 0.654,0.546 0.206,0.23 0.59,0.849 0.019,0.252 0.109,0.309 0.331,-0.064 0.148,0.235 -0.017,0.108 0.04,0.083 0.173,-0.018 0.149,0.064 0.314,0.913 0.168,0.125 0.216,0.053 0.241,0.101 0.016,0.233 -0.009,0.186 0.204,0.269 -0.035,0.364 0.165,0.308 -0.025,0.298 0.068,0.235 0.509,0.532 0.627,0.422 0.131,0.553 0.256,0.505 0.262,0.127 0.264,0.209 -0.033,0.218 0.019,0.133 0.354,0.397 0.057,0.505 0.305,0.331 0.086,0.026 0.067,-0.052 -0.222,-0.332 -0.107,-0.216 -0.014,-0.34 0.075,-0.045 0.633,0.538 0.067,0.401 0.212,0.227 0.016,0.306 0.129,0.182 0.039,0.264 0.204,0.435 0.005,0.603 0.108,0.439 0.399,0.673 0.323,0.141 0.058,0.33 0.336,0.852 0.388,0.461 0.193,0.391 0.026,0.243 -0.145,0.36 -0.016,0.25 0.211,0.762 0.315,0.39 0.353,0.094 0.061,0.056 -0.028,0.104 0.118,0.093 0.133,-0.119 0.065,-0.169 -0.067,-0.197 -0.012,-0.143 0.06,-0.103 0.115,-0.015 0.674,0.52 0.113,0.2 0.25,0.233 0.23,0.287 0.099,0.226 0.184,0.187 0.095,0.434 0.469,0.194 0.249,0.358 0.017,0.227 -0.121,0.58 -0.105,0.167 -0.378,0.247 -0.275,0.293 -0.266,0.181 -0.282,0.11 -0.232,-0.025 -0.224,-0.337 -0.266,-1.021 -0.178,-0.215 -0.125,-0.321 -0.208,-0.266 -0.75,-0.403 -0.378,-0.426 -0.367,-0.285 -0.395,-0.413 -1.076,-0.685 -0.446,-0.349 -0.294,-0.346 -0.189,0.005 -0.146,0.036 -0.056,-0.095 -0.008,-0.18 -0.065,-0.117 -0.629,-0.522 -0.13,-0.289 -0.027,-0.336 0.142,-0.866 0.063,-0.508 -0.04,-0.262 -0.066,-0.036 -0.06,-0.142 -0.014,-0.419 -0.152,-0.456 -0.571,-0.937 -0.417,-0.185 -0.371,-0.135 -1.017,-0.831 -0.276,-0.416 -0.067,-0.237 -0.035,-0.482 -0.14,0.279 -0.187,0.207 -0.431,-0.015 -0.484,0.233 -0.288,-0.219 -0.156,-0.249 -0.237,-0.299 -0.266,-0.059 -0.17,-0.008 -0.319,-0.371 -0.258,-0.118 -0.369,-0.046 -0.314,-0.188 -0.097,-0.206 -0.052,-0.291 -0.117,-0.172 -0.493,-0.341 -0.401,-0.377 -0.378,-0.242 -0.111,-0.198 -0.009,-0.136 0.598,0.038 0.711,0.145 0.341,-0.041 0.212,-0.14 0.203,-0.101 0.032,0.109 -0.037,0.198 0.195,0.182 0.268,0.147 0.19,-0.014 -0.185,-0.161 -0.113,-0.328 0.051,-0.118 -0.003,-0.164 -0.265,0.037 -0.037,-0.083 0.227,-0.25 0.26,-0.658 0.124,-0.65 -0.272,-0.57 -0.459,-0.396 -0.996,-1.163 -0.595,-0.599 -0.172,-0.223 -0.158,-0.105 -0.485,-0.137 -0.407,-0.336 -0.713,-0.476 -0.305,-0.246 -0.21,-0.577 -0.167,-0.079 0.053,-0.4 -0.073,-0.709 -0.12,-0.182 -0.386,-0.177 -0.092,-0.483 -0.019,-0.46 -0.075,-0.321 -0.657,-0.541 -0.037,-0.262 0,-0.249 -0.067,-0.247 -0.351,-0.517 -0.424,-0.452 -0.148,-0.216 -0.018,-0.438 -0.15,-0.118 0.057,-0.03 0.139,0.011 0.079,-0.058 0.009,-0.306 -0.638,-0.481 -0.184,-0.663 -0.34,-0.352 -0.08,-0.127 -0.183,-0.628 0.803,-0.071 0.803,-0.071 0.803,-0.071 0.803,-0.071 0.803,-0.071 0.803,-0.071 0.803,-0.071 0.803,-0.071 0.321,-0.036 -0.178,0.5 -0.134,0.187 1.331,0.49 1.331,0.489 1.331,0.488 1.331,0.487 1.331,0.487 1.331,0.486 1.331,0.485 1.331,0.484 0.992,-0.002 0.992,-0.002 0.992,-0.002 0.992,-0.002 0.992,-0.002 0.992,-0.002 0.992,-0.002 0.992,-0.002 0.002,-0.368 0.001,-0.368 0.002,-0.369 0.002,-0.369 0.617,0.004 0.617,0.004 0.617,0.003 0.617,0.004 0.617,0.003 0.617,0.004 0.617,0.004 0.617,0.004 0.022,0.006 0.026,0.013 0.25,0.281 0.256,0.44 0.302,0.307 0.348,0.174 0.593,0.512 0.838,0.849 0.668,0.564 0.499,0.282 0.334,0.242 0.171,0.203 0.23,0.44 0.434,1.013 0,0.464 0.166,0.439 0.332,0.568 0.29,0.334 0.248,0.101 0.271,0.201 0.294,0.301 0.339,0.202 0.384,0.103 0.53,0.27 0.676,0.436 0.464,0.222 0.251,0.01 0.22,-0.14 0.188,-0.289 0.185,-0.186 0.182,-0.083 0.074,-0.133 -0.034,-0.184 0.123,-0.412 0.28,-0.642 0.334,-0.348 0.389,-0.054 0.254,-0.121 0.12,-0.188 0.208,-0.02 0.297,0.147 0.483,0.095 0.669,0.042 0.395,-0.014 0.121,-0.072 0.063,0.004 0.005,0.079 0.099,0.034 0.193,-0.012 0.168,0.11 0.216,0.349 0.742,0.558 0.001,0 0.063,0.191 0.258,0.275 0.476,0.423 0.269,0.364 0.063,0.306 0.243,0.483 0.423,0.659 0.188,0.355 -0.046,0.051 0.033,0.185 0.113,0.319 0.209,0.27 0.307,0.221 0.31,0.396 0.313,0.571 0.38,0.434 0.446,0.296 0.252,0.276 0.059,0.255 -0.004,0.218 -0.068,0.181 0.029,0.172 0.125,0.163 0.042,0.2 -0.049,0.277 0.003,0.078 0,0 0.036,0.063 0.396,0.476 0.204,0.384 0.162,0.612 10e-4,0.005 0.18,0.366 0.26,0.149 0.399,0.056 0.303,0.127 0.207,0.199 0.262,0.12 0.315,0.041 0.302,0.132 0.29,0.221 0.54,0.145 0.79,0.07 0.601,0.18 0.413,0.29 0.181,0.059 0.049,0.004 0.023,-0.044 0.031,-0.082 0.16,-0.094 0.388,-0.062 z m -49.248,-18.32 -0.093,0.014 -0.174,-0.151 0.013,-0.139 0.038,-0.014 0.174,0.122 0.059,0.107 -0.017,0.061 z m 4.318,8.59 -0.02,0.056 -0.287,-0.198 -0.65,-0.674 -0.236,-0.338 -0.039,-0.159 0.02,-0.354 0.223,0.042 0.258,0.237 0.112,0.22 0.005,0.251 0.482,0.119 0.068,0.543 0.064,0.255 z m 2.673,0.15 -0.211,0.752 -0.216,-0.012 -0.446,-0.237 -0.047,-0.148 0.171,-0.874 0.13,-0.115 0.389,-0.118 0.061,0.108 0.041,0.258 0.128,0.386 z m -16.95,0.202 -0.12,0.122 -0.322,-0.666 -0.003,-0.161 0.094,-0.08 0.156,0.015 0,0.167 0.131,0.141 0.051,0.138 0.013,0.324 z m 8.622,2.772 -0.038,0.102 -0.474,-0.211 0.26,-0.369 -0.038,-0.388 0.113,-0.081 0.103,0.128 0.136,0.494 -0.062,0.325 z m 11.423,6.422 0.035,0.112 -0.019,0.032 -0.115,-0.078 -0.194,0.464 -0.057,0.042 0.117,-0.635 0.123,-0.091 0.136,-0.018 -0.026,0.172 z m -2.686,4.553 -0.057,0.034 -0.24,-0.355 -0.036,-0.244 -0.098,-0.103 -0.242,-0.082 0.209,-0.497 0.177,-1.031 0.078,0.189 -0.187,1.044 0.009,0.136 0.087,0.127 0.094,0.215 0.011,0.232 0.165,0.216 0.03,0.119 z m 4.182,-1.407 0.08,0.344 -0.144,-0.051 -0.188,-0.187 -0.129,-0.239 0.012,-0.107 0.025,-0.02 0.267,0.141 0.077,0.119 z m -3.176,1.874 -0.038,0.145 -0.845,-0.573 0.203,-0.054 0.236,0.04 0.444,0.442 z m 5.315,0.742 -0.061,0.01 -0.144,-0.162 -0.063,-0.399 0.029,-0.042 0.271,0.494 -0.005,0.061 -0.027,0.038 z m 9.269,7.695 -0.082,0.247 -0.212,-0.099 -0.076,-0.155 -0.015,-0.254 0.118,-0.043 0.171,0.108 0.035,0.072 0.061,0.124 z m 55.536,1.114 0.05,0.145 -0.049,-0.017 -0.064,-0.109 -0.046,-0.136 0.039,-0.003 0.034,0.047 0.036,0.073 z m -0.633,2.793 -0.146,0.093 -0.079,-0.328 0.116,-0.32 0.141,-0.184 0.278,-0.021 0.184,-0.061 0.023,0.081 -0.151,0.248 -0.366,0.492 z m -67.286,4.623 -0.169,0.062 -0.249,-0.181 0.066,-0.143 0.142,-0.097 0.133,0.181 0.077,0.178 z m 53.972,0.189 -0.316,0.068 -0.056,-0.064 0.637,-0.301 0.109,0.013 0.038,0.041 -0.33,0.143 -0.082,0.1 z",
                        title: "Mexico",
                        id: "MX",
                    },
                    {
                        d:
                            "m 803.65175,442.8864 -0.171,0.148 -0.058,-0.179 0.012,-0.23 0.231,-0.214 0.329,-0.041 0.047,0.171 -0.039,0.196 -0.077,0.101 -0.274,0.048 z m 1.215,8.399 -0.104,-0.002 -0.242,-0.06 -0.486,-0.297 -0.497,-0.105 -0.722,-0.009 -0.408,-0.042 -0.166,0.044 -0.14,0.002 -0.101,-0.06 -0.107,-0.03 -0.282,0.175 -0.131,-0.053 -0.133,-0.074 -0.236,-0.024 -0.286,0.021 -0.316,0.18 -0.352,-0.162 -0.1,0.002 -0.067,0.042 -0.152,0.222 -0.291,0.169 -0.144,0.311 -0.089,0.298 -0.077,0.103 -0.021,0.575 -0.046,0.278 0.073,0.367 -0.013,0.158 -0.129,0.235 -0.017,0.054 -0.068,0.373 0.026,0.1 -0.017,0.125 -0.109,0.262 -0.197,0.072 -0.207,0.041 -0.178,-0.089 -0.16,0.144 -0.203,0.222 -0.088,0.15 0.001,0.139 0.021,0.093 -0.042,0.096 -0.005,0.102 0.01,0.147 0.138,0.061 0.144,0.127 -0.005,0.122 -0.079,0.084 -0.181,0.13 -0.33,0.266 -0.372,0.227 -0.141,0.053 -0.051,0.105 -0.026,0.141 0.082,0.309 0.078,0.091 0.041,0.108 -0.05,0.129 -0.036,0.111 -0.137,0.07 -0.134,0.051 -0.049,0.088 -0.07,0.37 -0.081,0.193 -0.182,0.287 -0.061,0.131 -0.094,0.042 -0.352,-0.134 -0.315,0.081 -0.418,0.052 -0.354,-0.008 -0.273,0.059 -0.188,0.151 -0.21,0.191 -0.221,0.142 -0.167,0.069 -0.306,-0.202 -0.155,0.018 -0.278,-0.07 -0.653,-0.226 -0.161,-0.066 -0.174,-0.006 -0.052,-0.065 0.027,-0.109 -0.027,-0.144 -0.127,-0.054 -1.311,0.022 -0.378,0.124 -0.255,0.098 -0.182,0.113 -0.052,0.281 -0.109,0.264 -0.141,0.28 -0.436,0.084 -0.32,0.283 -0.11,0.034 -0.22,-0.041 -0.236,-0.023 -0.17,0.079 -0.179,-0.004 -0.551,-0.132 -0.521,-0.021 -0.295,0.067 -0.163,0.025 -0.907,0.388 -0.307,0.045 -0.124,-0.056 -0.175,-0.159 -0.235,-0.159 -0.563,-0.541 -0.208,-0.127 -0.138,-0.13 -0.131,-0.155 -0.187,-0.167 -0.17,-0.115 -0.23,-0.234 -0.229,-0.256 -0.052,-0.451 -0.182,-0.083 -0.062,-0.118 -0.028,-0.133 0.253,-0.366 0.184,0.387 0.07,0.086 0.408,0.261 0.336,0.13 0.363,0.053 0.37,0.011 0.146,-0.018 0.144,-0.052 0.141,0.056 0.773,0.423 0.3,0.076 0.317,-0.032 0.126,0.042 0.445,0.325 0.131,0.039 0.219,-0.025 -0.279,-0.148 -0.184,-0.105 -0.083,-0.198 0.051,-0.211 0.178,-0.141 0.124,-0.153 0.044,-0.456 0.079,-0.231 0.148,-0.219 0.049,-0.212 -0.167,-0.162 -0.037,-0.278 0.036,-0.23 0.095,-0.157 0.15,0.104 0.156,0.096 0.153,-0.01 0.106,-0.038 0.019,-0.119 -0.028,-0.207 0.008,-0.38 0.194,-0.304 0.311,-0.209 0.293,-0.1 1.098,-0.17 1.736,-0.435 0.514,-0.168 0.189,-0.087 0.159,-0.121 0.269,-0.386 0.505,-0.609 0.354,-0.5 0.746,-0.729 0.595,-0.676 0.08,-0.127 0.099,-0.369 0.008,-0.174 -0.018,-0.176 0.079,-0.082 0.116,-0.049 0.028,0 0.088,0.077 0.207,0.107 0.154,0.138 0.104,0.178 0.074,0.166 0.006,0.142 0.094,0.116 0.263,0.02 0.085,0.146 0.183,0.251 0.168,0.181 0.103,0.07 0.128,-0.038 0.199,-0.165 0.144,-0.202 0.097,-0.273 -0.076,-0.04 0.134,-0.206 0.025,-0.108 -0.062,-0.099 -0.079,-0.099 -0.03,-0.249 -0.055,-0.317 -0.037,-0.144 0.105,-0.103 0.226,-0.131 0.226,-0.152 0.229,-0.122 0.006,0.22 -0.006,0.363 0.069,0.304 0.156,0.538 0.178,0.073 0.214,0.048 0.124,-0.015 0.08,-0.036 0.021,-0.043 -0.133,-0.211 -0.035,-0.497 -0.109,-0.326 -0.167,-0.325 -0.079,-0.092 0.659,-0.092 0.147,-0.102 0.259,-0.223 0.098,-0.125 0.077,-0.282 -0.323,-0.167 -0.127,-0.214 -0.008,-0.231 0.386,-0.43 0.134,-0.103 0.058,0.153 0.17,0.039 0.156,0.006 0.157,-0.009 0.226,-0.217 0.116,-0.312 0.396,-0.441 0.141,-0.338 0.08,-0.354 1,-1.1 0.122,-0.171 0.594,-1.107 0.074,-0.037 0.159,0.107 0.047,0.352 -0.021,0.153 -0.097,0.228 -0.055,0.238 0.068,-0.005 0.283,-0.145 0.295,-0.387 0.167,-0.335 0.142,-0.146 0.285,0.082 0.063,0.058 -0.02,0.241 0.027,0.14 0.109,0.299 0.242,0.182 0.334,0.114 0.31,0.166 0.102,0.109 0.066,0.131 0.068,0.215 0.005,0.218 -0.224,0.213 0.095,0.345 -0.015,0.201 -0.076,0.172 -0.326,0.157 0.889,-0.156 0.219,-0.089 0.304,-0.227 0.162,0.196 0.152,0.339 -0.122,0.085 -0.387,0.125 -0.019,0.051 0.128,0.176 0.161,-0.017 0.319,-0.118 0.293,-0.186 0.142,0.002 0.15,0.038 0.289,0.12 0.162,0.097 0.138,0.125 0.089,0.259 0.334,0.094 0.684,0.363 0.127,0.031 0.133,0.007 0.36,-0.044 0.127,0.051 0.09,0.131 0.03,0.162 -0.01,0.174 -0.037,0.132 -0.084,0.109 -0.245,0.166 -0.617,0.217 -0.675,0.165 -0.339,-0.011 -0.476,-0.141 -0.173,0.018 -0.168,0.065 -0.21,0.449 0.389,0.447 0.669,0.465 0.092,0.116 -0.024,0.143 -0.106,0.085 -0.142,0.047 -0.376,0.074 -0.38,0.055 -0.313,0.08 -0.307,0.104 -0.315,-0.036 -0.434,-0.208 -0.125,-0.015 -0.132,0.107 -0.129,0.292 -0.078,0.073 z m -43.426,-5.8 0.485,0.109 0.186,0.088 0.545,0.868 0.718,0.61 0.305,0.228 0.235,0.108 0.321,0.326 0.28,0.41 0.614,1.153 0.106,0.506 0.042,0.772 -0.135,1.164 -0.165,0.58 0.032,0.274 0.226,0.42 -0.068,0.397 0.044,0.33 -0.016,0.914 0.128,0.27 0.146,0.172 0.771,0.542 0.057,0.201 0.38,0.69 0.704,1.502 0.196,0.675 -0.022,0.182 -0.085,0.075 -0.207,0.066 -0.173,-0.132 -0.058,-0.094 0.018,-0.118 -0.068,-0.116 -0.169,-0.138 -0.097,-0.124 0.027,0.205 10e-4,0.266 -0.215,0.023 -0.275,-0.083 -0.344,0.075 -0.406,0.326 -0.195,0.009 -0.148,-0.28 -0.076,-0.19 -0.121,-0.134 -1.291,-0.687 -0.477,-0.176 -0.502,-0.521 -1.13,-0.575 -0.718,-0.561 -0.305,-0.346 -0.734,-0.307 -0.316,-0.362 -0.156,-0.071 -0.156,-0.129 0.165,-0.352 -0.068,-0.367 -0.085,-0.31 -0.518,-0.611 -0.254,-0.426 -0.487,-0.425 -0.195,-0.245 -0.186,-0.284 0.116,-0.1 0.108,-0.06 -0.099,-0.207 -0.279,-0.359 -0.13,-0.413 0,-0.78 -0.396,-1.097 -0.339,-1.521 0.061,-0.533 -0.087,-0.578 -0.225,-0.556 -0.294,-0.397 -0.11,-0.33 0.053,-0.131 0.065,-0.429 0.044,-0.085 0.111,-0.041 0.126,0.011 0.235,0.373 0.613,0.231 0.185,0.055 0.241,-0.092 0.109,0.058 0.11,0.095 0.063,0.266 0.161,0.242 0.322,-0.035 0.114,0.035 0.067,0.007 0.063,0.214 0.029,0.372 -0.03,0.216 -0.232,0.309 -0.031,0.21 0.122,0.13 0.158,0.139 0.091,0.107 0.095,-0.018 0.12,-0.072 0.11,-0.182 0.076,-0.156 0.413,-0.174 0.427,-0.157 0.058,0.016 0.069,0.069 0.136,0.228 0.08,0.048 0.115,0.023 0.2,-0.024 0.232,-0.129 0.122,-0.241 0.054,-0.19 0.334,-0.329 0.037,-0.247 0.096,-0.163 z m -6.323,-0.627 0.198,0.301 -0.099,0.134 -0.05,0.039 -0.119,-0.044 -0.114,0.115 -0.109,0.023 -0.109,-0.208 -0.135,-0.083 -0.029,-0.144 0.181,-0.025 0.108,0.05 0.203,-0.1 0.074,-0.058 z m 1.237,3.282 -0.07,0.078 -0.204,-0.045 0.036,-0.459 0.116,-0.059 0.182,0.083 0.08,0.078 -0.14,0.324 z m 49.382,3.101 -0.391,0.054 -0.271,-0.006 0.05,-0.098 -0.013,-0.129 0.129,-0.034 0.149,0.028 0.347,0.185 z m -46.492,3.345 -0.142,0.051 -0.008,-0.073 0.025,-0.102 0.104,-0.097 0.048,0.055 -0.027,0.166 z m 8.147,0.717 -0.136,0.029 -0.074,-0.019 -0.05,-0.109 0.114,-0.25 0.042,-0.042 0.108,0.272 -0.004,0.119 z m 20.117,0.883 -0.086,0.037 -0.133,-0.099 -0.031,-0.847 0.093,-0.076 0.061,0.011 0.065,0.154 -0.006,0.371 0.012,0.328 0.025,0.121 z",
                        title: "Malaysia",
                        id: "MY",
                    },
                    {
                        d:
                            "m 567.18975,540.7074 -0.308,0.005 -0.527,0.015 -0.312,0.009 -0.349,0.009 -0.432,-0.088 -0.243,0.019 -0.02,-0.999 -0.079,-0.219 -0.083,-0.32 -0.02,-0.205 0.052,-0.206 0.025,-0.326 -0.023,-0.286 -0.258,-0.143 -0.057,-0.045 -0.056,-0.224 -0.022,-0.346 0.181,-0.439 -0.015,-0.843 0.021,-0.296 -0.003,-0.585 -0.004,-0.707 -0.003,-0.633 0.007,-0.545 -0.054,-0.258 -0.045,-0.142 -0.12,-0.288 -0.14,-0.599 -0.165,-0.452 -0.212,-0.298 -0.067,-0.157 -0.068,-0.209 -0.201,-0.37 -0.164,-0.215 -0.045,-0.172 0.006,-0.445 -0.183,-0.797 -0.133,-0.58 -0.2,-0.628 -0.134,-0.419 -0.02,-0.072 -0.015,-0.159 0.398,-0.311 0.398,-0.438 0.466,-0.512 0.416,-0.457 0.366,-0.401 0.501,-0.548 0.495,-0.541 0.116,-0.069 0.049,-0.044 -0.214,-0.48 0.344,-0.557 0.019,-0.362 -0.015,-0.346 0.042,-0.159 0.104,-0.139 0.402,-0.289 0.304,-0.46 0.249,-0.43 0.346,-0.69 0.034,-0.163 0.005,-0.167 -0.094,-0.235 -0.23,-0.377 -0.167,-0.326 -0.149,-0.501 0.15,-0.435 0.053,-0.263 0,-0.142 -0.066,-0.134 -0.168,-0.102 -0.14,-0.066 -0.047,-0.18 -0.001,-0.213 0.063,-0.118 0.372,-0.191 0.084,-0.104 0.044,-0.116 0.004,-0.165 0.115,-0.413 0.142,-0.392 0.01,-0.138 -0.05,-0.121 -0.039,-0.221 -0.025,-0.333 -0.002,-0.931 0.073,-0.959 -0.032,-0.543 -0.238,-0.624 -0.023,-0.45 0.173,-0.314 0.028,-0.185 -0.126,-0.024 -0.26,-0.019 -0.192,-0.058 -0.297,-0.257 -0.516,-0.214 -0.586,-0.195 -0.852,-0.058 -0.708,-0.624 -0.555,-0.1 -0.179,-0.08 -0.533,-0.374 -0.835,-0.035 -0.866,-0.037 -0.54,-0.011 -0.08,-0.05 -0.031,-0.515 -0.006,-0.457 -0.046,-0.397 -0.082,-0.452 -0.126,-0.176 -0.15,-0.305 -0.076,-0.336 -0.009,-0.163 0.028,-0.058 0.601,-0.239 0.257,-0.118 0.381,-0.137 0.678,-0.189 0.605,-0.169 0.555,-0.164 0.588,-0.174 0.239,-0.117 0.297,-0.117 0.711,-0.235 0.203,-0.081 0.408,-0.131 0.205,-0.051 0.787,-0.269 0.902,-0.308 0.316,-0.108 0.603,-0.206 0.117,0.085 0.411,0.708 0.323,0.417 0.368,0.386 0.062,-0.019 0.106,-0.09 0.184,-0.037 0.585,-0.087 0.223,-0.005 0.147,-0.104 0.3,-0.073 0.347,-0.044 0.119,0.047 0.366,0.5 0.053,0.382 0.076,0.553 0.018,0.27 -0.006,0.361 -0.041,0.452 -0.297,0.521 -0.057,0.259 -0.159,0.401 -0.21,0.198 -0.104,0.162 0.006,0.168 0.112,0.141 0.246,0.254 0.076,0.165 -0.022,0.146 10e-4,0.199 0.059,0.138 0.07,0.08 0.243,0.13 0.238,0.327 0.41,0.395 0.49,0.563 0.23,0.173 0.181,0.042 0.09,0.188 -0.05,0.22 -0.141,0.125 0.058,0.18 0.08,0.094 0.089,0.048 0.215,0.011 0.2,-0.037 0.05,-0.063 -0.026,-0.843 -0.144,-0.491 -0.145,-0.192 -0.031,-0.038 0.051,-0.161 0.161,-0.376 0.137,-0.373 0.087,-0.157 0.101,-0.095 0.676,-0.101 0.308,-0.087 0.13,-0.109 0.101,-0.289 0.081,-0.807 0.029,-0.757 -0.07,-0.443 0.097,-0.667 0.148,-0.413 -0.073,-0.081 -0.055,-0.556 -0.44,-0.592 -0.566,-0.761 -0.317,-0.409 -0.36,-0.465 -0.656,-0.728 -0.3,-0.263 -0.158,-0.103 -0.53,-0.084 -0.141,-0.14 -0.134,-0.223 -0.051,-0.412 -0.009,-0.308 -0.06,-0.524 -0.107,-0.74 -0.048,-0.218 -0.151,-0.556 -0.144,-0.529 -0.008,-0.131 0.051,-0.127 0.244,-0.389 0.173,-0.276 0.082,-0.151 0.147,-0.41 0.035,-0.199 0.115,-0.09 0.469,-0.037 0.373,0.007 0.626,-0.009 0.661,0.024 0.093,0.018 0.149,0.043 0.168,-0.007 0.187,-0.058 0.207,-0.142 0.227,-0.226 0.354,0.005 0.479,0.235 0.262,0.205 0.044,0.175 0.321,0.102 0.598,0.028 0.435,-0.091 0.273,-0.21 0.286,-0.111 0.298,-0.013 0.225,0.072 0.153,0.156 0.293,0.112 0.434,0.068 0.474,-0.101 0.514,-0.269 0.293,-0.281 0.072,-0.292 0.085,-0.178 0.098,-0.063 0.272,-0.036 0.447,-0.01 0.389,0.092 0.496,0.291 0.313,-0.193 0.537,-0.331 0.541,-0.175 0.515,-0.001 0.423,-0.126 0.33,-0.25 0.349,-0.159 0.368,-0.067 0.344,-0.121 0.481,-0.26 0.499,-0.378 0.508,-0.386 0.326,-0.248 0.149,0.292 0.267,0.267 -0.159,0.155 -0.192,0.139 0.31,0.186 -0.227,0.281 -0.028,0.195 0.058,0.077 0.05,0.114 -0.149,0.322 -0.198,0.247 -0.051,0.189 0.175,0.333 -0.09,0.592 0.169,0.533 0.047,0.273 0.059,0.183 -0.084,0.327 0.022,0.552 0.039,0.228 -0.101,0.284 0.172,0.098 0.091,0.312 -0.024,0.351 -0.053,0.189 -0.296,0.229 -0.035,0.089 0.004,0.135 0.37,0.004 0.013,0.209 -0.024,0.165 0.014,0.31 -0.049,0.201 0.086,0.23 -0.105,0.255 0.036,0.197 0.005,0.255 0.086,0.645 0.015,0.798 0.019,0.128 0.132,0.09 0.185,0.045 -0.007,0.219 -0.206,0.286 -0.012,0.178 0.03,0.25 0.226,-0.34 0.136,10e-4 0.121,0.133 -0.017,0.196 0.042,0.097 -0.018,0.19 0.067,0.241 -0.026,0.21 -0.166,0.147 -0.211,0.252 -0.038,0.236 0.02,0.155 -0.146,0.049 -0.068,0.096 0.099,0.223 -0.006,0.197 -0.258,0.614 -0.688,0.841 -0.297,0.299 -0.278,0.325 0,0.134 -0.027,0.116 -0.324,0.465 -0.348,0.076 -0.193,0.125 0.151,0.41 -0.225,0.095 -0.391,0.323 -1.075,0.621 -0.17,0.144 -0.273,0.381 -0.36,0.092 -0.2,0.108 -0.357,0.039 -0.125,-0.027 -0.122,0.014 -0.103,0.082 -0.709,0.268 -0.662,0.212 -0.163,0.097 -0.108,0.132 -0.586,0.21 -0.918,0.519 -0.751,0.496 -0.544,0.496 -0.144,0.075 -0.168,0.172 -0.057,0.254 -0.055,0.144 -0.403,0.524 -0.606,0.62 -0.118,0.169 -0.241,0.345 -0.023,0.226 -0.215,0.069 -0.18,-0.216 -0.077,0.417 -0.147,0.03 -0.163,-0.086 -0.407,0.207 -0.354,0.239 -0.568,0.503 -0.803,0.976 -1.171,0.944 -0.16,0.027 -0.108,-0.004 -0.369,-0.329 -0.201,-0.024 0.18,0.195 0.119,0.163 -0.03,0.319 0.014,0.479 -0.145,0.933 0.02,0.204 0.167,0.265 0.315,0.324 0.295,0.404 0.38,1.162 0.029,0.6 0.392,0.767 0.015,0.333 0.159,0.829 -0.011,0.672 -0.028,0.412 0.189,0.174 0.07,-0.157 -0.02,-0.261 0.05,-0.418 0.105,-0.186 0.105,0.026 0.031,0.197 0.071,0.175 0.029,0.164 0.005,0.223 -0.145,0.849 0.043,0.346 0.195,0.579 -0.228,0.673 -0.33,1.59 -0.019,0.276 0.08,0.12 0.177,0.041 0.065,-0.204 0.104,0.002 0.055,0.12 -0.147,0.736 -0.145,0.323 -0.515,0.793 -0.277,0.34 -0.46,0.335 -1.08,0.524 -2.165,0.759 -0.858,0.373 -0.513,0.223 -1.084,0.709 -0.474,0.476 -0.195,0.547 -0.187,0.25 -0.184,0.318 0.16,0.273 0.157,0.207 0.186,0.139 0.096,0.12 0.126,0.083 0.126,-0.43 0.063,-0.134 0.108,-0.01 -0.06,0.524 -0.125,1.804 -0.013,0.07 z m 5.145,-43.767 0.075,-0.063 0.029,-0.083 -10e-4,-0.081 -0.047,-0.05 -0.068,-0.029 -0.098,0.017 -0.035,0.11 -0.015,0.152 0.062,0.051 0.098,-0.024 z m -0.218,-0.276 -0.049,-0.083 -0.092,-0.039 -0.105,0.032 -0.035,0.104 0.109,0.134 0.116,0.002 0.056,-0.15 z",
                        title: "Mozambique",
                        id: "MZ",
                    },
                    {
                        d:
                            "m 540.51275,512.9044 0.601,-0.12 0.574,-0.115 0.667,-0.115 0.534,-0.092 0.134,-0.024 1.285,0.107 0.56,0.075 0.195,0.074 0.253,0.192 0.468,0.467 -0.12,-0.018 -0.862,0.099 -0.328,0.127 -0.734,0.551 -0.156,-0.071 -0.176,-0.114 -0.149,-0.033 -0.323,0.132 -0.322,0.159 -0.355,0.225 -0.293,0.22 -0.096,0.119 -0.459,0.455 -0.15,0.073 -0.133,0.032 -0.054,-0.021 -0.057,-0.196 -0.282,-0.456 -0.452,-0.598 -0.132,-0.058 -0.091,-0.023 -0.335,0.029 -0.974,0.169 -0.822,0.142 -1.259,0.244 -1.352,0.196 -0.833,0.121 -0.726,0.036 0.001,0.592 10e-4,1.203 0.002,1.204 0.002,1.208 0.002,1.21 10e-4,1.214 0.002,1.217 0.002,1.221 0.002,1.224 0,0.535 -0.024,0.115 -0.416,0 -0.941,0 -0.791,0 -0.64,0 10e-4,0.73 10e-4,0.865 0,0.867 10e-4,0.869 10e-4,0.87 0.001,0.873 10e-4,0.874 10e-4,0.877 10e-4,0.878 0,0.664 0,0.076 0,1.293 0,1.375 0,1.38 0,1.385 0,1.391 0,1.396 0,1.401 0,1.408 0,0.447 -0.288,-0.006 -0.579,0.173 -0.369,0.225 -0.16,0.277 -0.212,0.168 -0.266,0.06 -0.117,0.141 0.032,0.224 -0.103,0.171 -0.235,0.119 -0.381,-0.035 -0.526,-0.188 -0.669,-0.044 -0.812,0.099 -0.585,-0.046 -0.355,-0.193 -0.377,-0.109 -0.399,-0.028 -0.232,-0.08 -0.474,-0.143 -0.09,-0.246 -0.056,-0.185 -0.135,-0.195 -0.015,-0.158 0.106,-0.12 0.015,-0.192 -0.075,-0.266 -0.131,-0.129 -0.186,0.007 -0.116,-0.102 -0.046,-0.21 -0.109,-0.159 -0.261,-0.162 -0.345,0.122 -0.163,0.185 -0.096,0.288 -0.087,0.145 -0.044,0.241 -0.02,0.171 -0.088,0.183 -0.092,0.074 -0.095,-0.034 -0.177,0.074 -0.391,0.269 -0.111,0.142 -0.315,-0.257 -0.92,-0.967 -0.327,-0.251 -0.482,-0.591 -1.06,-1.826 -0.151,-0.351 -0.202,-0.878 -0.232,-0.649 -0.026,-0.374 0.111,-0.212 -0.068,-0.287 -0.119,-0.257 -0.361,-0.336 -0.103,-1.118 -0.242,-0.721 0.053,-0.595 -0.116,-0.541 -0.011,-0.346 0.052,-0.658 -0.194,-0.755 -0.393,-0.736 -0.355,-1.06 -0.051,-0.464 0.038,-1.243 -0.069,-0.507 0.004,-0.594 -0.14,-0.615 -0.058,-0.335 0.099,-0.265 0.058,0.084 0.102,0.04 0.069,-0.352 0.016,-0.311 -0.177,-0.766 -0.395,-0.782 -0.979,-1.27 -0.239,-0.484 -0.136,-0.4 -1.092,-1.666 -0.466,-1.171 -0.326,-1.01 -0.354,-0.465 -1.639,-3.259 -0.363,-0.518 -0.654,-0.619 -0.153,-0.206 -0.252,-0.589 -0.492,-0.788 -0.12,-0.735 -0.033,-0.832 0.06,-0.636 0.448,-0.066 0.313,-0.17 0.281,-0.011 0.278,0.133 0.295,0.01 0.115,-0.022 0.53,0.019 0.304,-0.152 0.361,-0.152 0.208,-0.134 0.292,-0.137 0.387,-0.139 0.22,0.011 0.27,0.052 0.359,0.054 0.203,0.093 0.24,0.296 0.373,0.269 0.274,0.161 0.315,0.211 0.094,0.082 0.139,0.045 0.085,0.014 0.585,-0.033 0.529,-0.029 0.571,10e-4 1.073,0.001 1.074,0.002 1.074,10e-4 1.074,0.002 1.074,0.002 1.073,0.002 1.074,0.001 1.074,0.002 0.439,10e-4 0.767,0.009 0.808,0.01 0.089,0.017 0.09,0.056 0.074,0.054 0.285,0.372 0.364,0.39 0.304,0.184 0.362,0.11 0.34,0.041 0.318,-0.027 0.526,0.05 0.736,0.126 0.765,0.037 0.793,-0.051 0.557,0.069 0.322,0.191 0.33,0.13 0.338,0.068 0.456,-0.04 0.576,-0.148 0.49,0.021 0.227,0.107 0.135,0.003 0.846,-0.155 0.68,-0.124 1.021,-0.199 0.841,-0.164 1.246,-0.242 z",
                        title: "Namibia",
                        id: "NA",
                    },
                    {
                        d:
                            "m 923.79875,517.8204 -0.044,0.063 -0.022,-0.469 0.089,-0.176 0.043,0.365 -0.066,0.217 z m 11.928,2.77 0.316,0.187 0.34,-0.08 0.427,0.294 1.088,0.894 0.382,0.189 0.225,0.072 0.17,0.146 0.152,0.207 0.207,0.146 0.09,0.136 0.022,0.184 0.075,0.113 0.379,0.297 0.226,0.261 0.314,0.133 0.135,0.156 0.176,0.076 0.18,0.16 0.304,0.125 0.689,0.46 0.532,0.437 0.266,0.271 0.286,0.241 0.366,0.193 0.344,0.22 0.173,0.516 -0.095,0.185 -0.197,0.092 -0.183,0.007 -0.171,0.062 -0.571,-0.333 -0.136,-0.049 -0.152,0.021 -0.085,-0.074 -0.06,-0.106 -0.349,-0.124 -0.324,-0.198 -0.094,-0.135 -0.055,-0.168 -0.078,-0.096 -0.457,-0.146 -0.308,-0.163 -0.224,-0.229 -0.347,-0.16 -0.541,-0.328 -0.277,-0.105 -0.243,-0.164 -0.65,-0.595 -0.232,-0.111 -0.202,-0.264 -0.561,-0.627 -0.271,-0.257 -0.294,-0.229 -0.225,-0.268 -0.173,-0.318 -0.402,-0.455 -0.049,-0.194 0.017,-0.199 -0.097,-0.128 -0.164,-0.078 -0.078,-0.134 0.009,-0.181 0.054,-0.093 0.401,0.308 z m 6.58,1.348 -0.149,0.029 0.18,-0.273 0.006,-0.167 0.072,-0.33 -0.009,-0.11 0.119,0.014 0.129,0.095 -0.148,0.082 -0.05,0.143 0.006,0.178 0.057,0.033 -0.095,0.195 -0.118,0.111 z m 2.397,1.38 -0.153,0.024 -0.205,-0.216 -0.391,-0.108 -0.172,-0.189 -0.112,-0.223 0.222,-0.055 0.218,-0.3 -0.148,-0.111 -0.256,-0.02 0.029,-0.117 0.416,-0.139 0.183,0.081 0.081,0.095 -0.012,0.475 0.188,0.151 0.195,0.338 0,0.095 -0.083,0.219 z m 1.713,0.806 0.131,0.056 0.229,-0.01 -0.052,0.512 -0.321,0.082 -0.11,-0.004 -0.072,-0.108 -0.184,-0.071 0.009,-0.175 -0.178,-0.393 0.31,-0.06 0.176,-0.105 -0.01,0.096 0.027,0.111 0.045,0.069 z m -1.31,3.592 -0.089,0.114 -0.11,-0.023 -0.084,-0.043 -0.061,-0.062 0.061,-0.233 0.241,0.114 0.042,0.133 z",
                        title: "New Caledonia",
                        id: "NC",
                    },
                    {
                        d:
                            "m 516.93375,396.9984 0.308,1.748 0.234,1.495 0.016,0.95 0.011,0.248 0.096,0.167 0.218,0.168 0.88,1.368 -0.188,0.237 0.132,0.423 0.228,0.181 0.732,0.812 0.095,0.16 -0.04,0.128 -0.513,0.953 -0.087,0.233 -0.102,1.211 -0.072,0.853 -0.1,1.168 -0.118,1.395 -0.095,1.173 -0.126,1.548 -0.119,1.46 -0.736,0.8 -1.306,1.416 -1.063,1.15 -0.533,0.769 -1.041,1.499 -0.462,0.968 -0.362,0.505 -0.183,0.215 0.162,0.708 0.282,1.236 -0.504,0.008 -0.289,0.088 -0.365,0.281 -0.408,0.111 -0.496,0.245 -0.314,0.196 -0.295,0.155 -0.406,0.379 -0.132,0.288 -0.404,0.057 -0.565,-0.047 -0.359,-0.291 -0.832,-0.303 -0.54,-0.123 -0.25,-0.037 -1.271,-0.052 -1.356,0.119 -0.691,0.141 -0.126,0.031 -0.392,0.183 -0.325,0.203 -0.879,0.929 -1.164,-0.031 -0.684,-0.103 -0.581,-0.145 -0.827,-0.434 -1.013,-0.663 -0.391,-0.09 -0.351,-0.052 -0.117,0.009 -1.21,0.66 -0.233,-0.014 -0.285,0.074 -0.188,0.164 -0.139,0.082 -0.145,0.014 -0.191,-0.036 -0.186,-0.101 -0.186,-0.184 -0.499,-0.735 -0.103,-0.129 -0.213,-0.218 -0.358,-0.34 -0.243,-0.158 -0.148,-0.041 -0.176,0.027 -0.972,-0.292 -0.971,-0.309 -0.214,0.04 -0.152,0.064 -0.336,0.228 -0.396,0.042 -0.503,-0.018 -0.276,-0.031 -0.444,0.076 -0.296,0.091 -0.388,0.155 -0.503,0.421 -0.144,0.054 -0.122,0.07 -0.168,1.152 -0.137,0.346 -0.255,0.457 -0.501,0.436 -0.344,0.264 -0.008,0.356 -0.027,0.582 -0.005,0.399 0.023,0.26 -0.058,0.124 -0.023,0.113 0.018,0.169 0.082,0.081 0.048,0.106 -0.032,0.086 -0.162,0.102 -0.179,-0.26 -0.23,-0.183 -0.252,-0.082 -0.171,-0.133 -0.088,-0.184 -0.331,-0.36 -0.762,-0.713 -0.078,-0.017 -0.127,-0.028 -0.215,0.085 -0.132,0.117 -0.093,0.046 -0.14,0.007 -0.362,0.09 -0.29,0.116 -0.008,0.096 0.139,0.539 -0.066,0.292 -0.129,-0.139 -0.418,-0.544 -0.289,-0.403 -0.051,-0.09 -0.041,-0.139 0.028,-0.06 0.115,-0.042 0.265,-0.053 0.049,-0.042 0.013,-0.111 -0.041,-0.207 -0.145,-0.28 -0.155,-0.186 -0.086,-0.036 -0.159,-0.006 -0.172,0.025 -0.323,0.227 -0.143,0.042 -0.334,-0.019 -0.297,-0.044 -0.181,-0.117 -0.538,-0.452 -0.595,-0.477 -0.25,-0.068 -0.058,-0.049 -0.039,-0.367 0.01,-0.442 0.033,-0.116 0.248,0.069 0.264,0.032 0.085,-0.08 -0.212,-0.157 -0.303,-0.159 -0.113,-0.241 -0.087,-0.084 -0.136,-0.086 -0.157,-0.044 -0.157,-0.068 -0.108,-0.07 -0.177,-0.032 -0.186,-0.051 -0.269,-0.391 -0.262,-0.381 -0.154,-0.3 -0.055,-0.18 0.078,-0.307 -0.078,-0.121 -0.292,-0.312 -0.244,-0.29 0.06,-0.449 0.05,-0.375 0.002,-0.237 0.039,-0.134 0.031,-0.151 0.162,-0.048 0.412,0.004 0.801,0.07 0.642,-0.079 0.036,-0.014 0.453,-0.402 0.502,-0.422 0.755,-0.041 0.814,-0.044 0.642,-0.022 0.934,-0.032 0.754,-0.028 0.874,-0.032 0.026,-0.194 0.054,-0.048 0.086,-0.007 0.642,0.104 0.604,0.101 0.046,-0.367 0.53,-0.459 0.301,-0.094 0.074,-0.08 0.095,-0.155 0.059,-0.24 0.026,-0.17 0.112,-0.142 0.082,-0.261 0.108,-0.456 0.299,-0.48 0.171,-0.652 0.025,-0.63 0.033,-0.479 0.089,-0.098 -0.003,-0.853 -0.002,-0.859 -0.003,-0.727 -0.003,-0.906 -0.002,-0.796 -0.003,-0.865 -0.002,-0.777 -0.002,-0.516 0.613,-0.123 0.633,-0.128 0.926,-0.187 1.003,-0.202 1.093,-0.221 0.248,-0.133 0.825,-0.749 0.373,-0.339 0.74,-0.672 0.571,-0.521 0.726,-0.662 0.769,-0.667 0.613,-0.534 0.964,-0.605 1.453,-0.913 1.453,-0.916 1.454,-0.918 1.453,-0.92 1.453,-0.921 1.453,-0.924 1.454,-0.926 1.453,-0.928 1.462,0.354 1.389,0.335 1.397,0.337 0.329,0.185 0.741,0.659 0.949,0.842 0.041,0.012 0.043,0.004 0.912,-0.496 1.188,-0.647 z",
                        title: "Niger",
                        id: "NE",
                    },
                    {
                        d:
                            "m 946.21575,547.5604 0.056,0.033 0.052,0.019 0.034,0.025 -0.005,0.054 -0.026,0.054 -0.032,0.023 -0.01,0.007 -0.007,0.011 -0.003,0.011 0,0.014 -0.016,-0.045 -0.03,-0.03 -0.029,-0.003 -0.021,0.035 -0.017,0 -0.006,-0.036 -0.012,-0.031 -0.005,-0.03 0.012,-0.024 0.022,-0.029 0.001,-0.024 -0.017,-0.011 -0.035,0.01 0.041,-0.046 z",
                        title: "Norfolk Island",
                        id: "NF",
                    },
                    {
                        d:
                            "m 513.08175,424.3434 0.441,0.617 0.474,0.663 0.369,0.515 0.27,1.333 0.029,0.253 0.021,0.114 0.021,0.105 0.035,0.181 0.212,0.078 0.4,0.036 0.291,0.131 0.174,0.217 0.017,0.036 0.092,0.167 0.021,0.121 -0.025,0.348 -0.059,0.447 -0.1,0.288 0.056,0.392 -0.018,0.167 -0.044,0.114 -0.179,0.131 -0.243,0.128 -0.581,0.378 -0.166,0.056 -0.243,0.01 -0.211,0.094 -0.25,0.204 -0.54,0.758 -0.461,0.761 -0.16,0.629 -0.18,0.6 -0.406,0.383 -0.057,0.215 -0.017,0.125 -0.014,0.289 -0.049,0.478 -0.063,0.23 -0.065,0.068 -0.438,0.146 -0.252,0.175 -0.151,0.347 -0.055,0.375 -0.088,0.427 -0.05,0.375 -0.068,0.194 -0.144,0.204 -0.223,0.219 -0.193,0.124 -0.503,0.081 -0.259,0.496 -0.219,0.387 -0.006,0.155 -0.211,0.802 -0.367,0.604 -0.024,0.213 -10e-4,0.175 -0.459,0.531 -0.122,0.157 -0.117,0.205 0.116,0.198 0.129,0.18 0.019,0.061 -0.208,0.169 -0.364,0.294 -0.217,0.176 -0.048,0.096 -0.032,0.441 -0.063,0.119 -0.145,0.162 -0.213,0.178 -0.216,0.138 -0.245,0.096 -0.235,0.036 -0.132,-0.056 -0.075,-0.134 -0.132,-0.54 -0.067,-0.116 -0.153,-0.105 -0.302,-0.296 -0.306,-0.299 -0.369,-0.21 -0.079,0.015 -0.061,0.057 -0.105,0.301 -0.103,0.11 -0.194,0.038 -0.337,0.002 -0.246,-0.042 -0.056,-0.06 -0.05,-0.13 -0.068,-0.104 -0.294,0.211 -0.462,0.332 -0.15,0.054 -0.115,0.067 -0.152,0.309 -0.185,0.331 -0.241,0.173 -0.235,0.146 -0.135,0.127 -0.193,0.15 -0.378,0.375 -0.501,0.496 -0.177,0.256 -0.175,0.383 -0.102,0.424 -0.111,0.464 -0.163,0.746 -0.24,0.422 -0.21,0.335 -0.156,0.263 -0.082,0.217 -0.034,-0.007 -0.082,0.093 -0.234,-0.061 -0.105,-0.189 -0.145,-0.031 -0.25,-0.277 -0.053,0.046 0.264,0.704 -0.098,0.275 -0.743,0.006 -0.639,0.092 -0.439,-0.008 -0.22,-0.1 -0.098,-0.264 -0.038,0.027 -0.022,0.141 -0.139,0.111 -0.493,0.021 -0.218,-0.18 -0.176,-0.202 -0.189,-0.089 0.029,0.084 0.217,0.197 -0.026,0.283 -0.397,0.328 -0.253,0.019 -0.155,-0.141 -0.081,-0.23 -0.041,-0.34 -0.104,-0.222 -0.056,0 0.052,0.203 0.017,0.166 0.002,0.345 0.189,0.268 -0.29,0.083 -0.118,0.003 -0.23,0.006 -0.044,-0.1 -0.044,-0.222 -0.061,-0.058 -0.071,0.376 -0.153,0.026 -0.106,-0.003 -0.456,0.082 -0.102,-0.016 -0.021,-0.07 0.054,-0.104 -0.012,-0.169 -0.158,0.13 -0.025,0.261 -0.09,0.042 -0.271,-0.037 -0.297,-0.134 -0.181,-0.137 -0.302,-0.191 -0.592,-0.535 -0.096,-0.241 -0.169,-0.295 -0.126,-0.3 -0.182,-0.512 0.056,-0.037 0.137,0.044 0.067,-0.077 -0.246,-0.056 -0.051,-0.06 -0.017,-0.18 0.011,-0.22 0.2,-0.077 0.173,-0.038 0.087,-0.133 0.05,-0.134 -0.459,0.203 -0.431,-0.23 -0.093,-0.139 0.047,-0.107 0.206,-0.016 0.294,0.008 0.176,-0.104 -0.108,-0.037 -0.19,0.004 -0.07,-0.069 0.006,-0.167 -0.062,0.037 -0.082,0.148 -0.29,0.109 -0.17,-0.109 -0.017,-0.242 -0.037,-0.109 -0.143,-0.085 -0.508,-0.641 -0.638,-0.535 -0.567,-0.369 -0.857,-0.176 -1.794,0.007 -0.101,-0.051 0.11,-0.084 0.157,-0.057 0.577,-0.299 -0.097,-0.04 -0.6,0.187 -0.205,0.018 -0.266,0.359 -1.58,0.06 -0.185,0.019 0.004,-0.164 0.077,-0.472 0.051,-0.186 0.059,-0.14 -0.061,-0.168 -0.06,-0.228 -0.029,-0.358 0.074,-0.111 0.025,-0.135 -0.018,-0.212 0,-0.708 0.043,-0.077 0.051,-0.059 0.003,-0.094 -0.096,-0.183 -0.089,-0.209 0.003,-0.301 -0.036,-0.291 -0.061,-0.133 0.046,-0.496 0.026,-0.628 -0.024,-0.279 0.058,-0.197 0.031,-0.485 -0.005,-0.475 0.118,-0.751 0.346,-0.036 0.412,-0.063 0.184,-0.295 0.106,-0.374 -0.034,-0.37 0.08,-0.122 0.165,-0.201 0.298,-0.287 -0.012,-0.315 0.082,-0.097 0.141,-0.073 0.202,-0.037 0.226,-0.157 0.125,-0.275 0.123,-0.44 -0.194,-0.307 0.003,-0.068 0.074,-0.165 0.119,-0.165 0.094,-0.053 0.22,0.042 0.038,-0.014 0.034,-0.052 0.142,-0.487 -0.013,-0.131 -0.205,-0.326 -0.034,-0.232 -0.03,-0.345 -0.05,-0.306 -0.059,-0.116 -0.109,-0.097 -0.049,-0.063 -0.424,-0.622 0.007,-0.295 0.178,-0.377 0.116,-0.183 0.162,-0.102 0.032,-0.087 -0.048,-0.106 -0.082,-0.08 -0.019,-0.17 0.023,-0.113 0.058,-0.124 -0.023,-0.26 0.005,-0.399 0.027,-0.582 0.008,-0.356 0.344,-0.264 0.501,-0.437 0.255,-0.457 0.137,-0.346 0.168,-1.152 0.122,-0.07 0.144,-0.054 0.503,-0.42 0.387,-0.156 0.296,-0.09 0.445,-0.076 0.276,0.031 0.503,0.019 0.396,-0.042 0.336,-0.229 0.152,-0.064 0.214,-0.04 0.972,0.309 0.971,0.292 0.176,-0.027 0.148,0.041 0.243,0.158 0.358,0.339 0.213,0.219 0.103,0.128 0.499,0.735 0.186,0.185 0.187,0.101 0.19,0.036 0.146,-0.014 0.138,-0.083 0.188,-0.164 0.286,-0.075 0.233,0.015 1.209,-0.661 0.117,-0.009 0.352,0.052 0.391,0.091 1.013,0.663 0.827,0.434 0.581,0.145 0.685,0.103 1.163,0.031 0.879,-0.929 0.325,-0.203 0.392,-0.183 0.126,-0.031 0.691,-0.141 1.355,-0.119 1.271,0.052 0.25,0.037 0.54,0.123 0.832,0.303 0.359,0.291 0.564,0.048 0.404,-0.058 0.132,-0.288 0.406,-0.379 0.295,-0.154 0.313,-0.197 0.496,-0.245 0.408,-0.11 0.365,-0.281 0.289,-0.089 0.502,-0.007 z m -17.697,26.249 -0.271,0.085 -0.178,-0.021 0.244,-0.37 0.124,0.08 0.159,0.033 -0.078,0.193 z",
                        title: "Nigeria",
                        id: "NG",
                    },
                    {
                        d:
                            "m 241.51475,420.6334 -0.078,0.106 -0.086,0.07 -0.179,0.345 -0.062,0.031 -0.013,-0.255 -0.107,-0.034 -0.125,0.091 -0.069,0.131 0.109,0.17 0.096,0.003 0.116,0.047 0.313,1.178 -0.067,0.21 -0.194,0.327 -0.184,0.277 -0.185,0.174 -0.229,0.74 -0.206,1.201 0.148,1.077 -0.075,0.995 0.066,0.234 0.019,0.292 -0.152,0.053 -0.086,-0.009 -0.088,-0.179 0.01,-0.158 0.091,-0.185 0.037,-0.251 -0.043,-0.131 -0.09,0.286 -0.158,0.128 -0.103,0.045 -0.1,0.144 0.106,0.272 0.137,0.199 0.046,0.142 -0.051,0.17 -0.031,0.58 -0.049,-0.016 -0.05,-0.078 -0.145,-0.006 -0.017,0.234 0.011,0.13 -0.123,0.101 -0.044,0.1 0.101,0.072 0.111,0.042 0.137,-0.01 0.112,0.287 0.036,0.233 -0.262,0.215 -0.088,0.178 -0.148,0.216 -0.084,0.212 -0.025,0.152 0.102,0.482 0.179,0.342 0.151,0.217 0.202,0.047 -0.047,0.228 -0.152,0.145 -0.276,0.121 -0.303,0.022 -0.496,-0.114 -0.203,-0.013 -0.079,-0.061 -0.024,-0.112 -0.142,-0.169 -0.26,-0.225 -0.15,0.016 -0.245,-0.049 -0.407,-0.153 -0.188,-0.019 -0.27,0.131 -0.314,0.172 -0.757,-0.268 -0.532,-0.189 -0.478,-0.171 -0.127,-0.065 -0.105,0.014 -0.091,0.089 -0.103,0.158 -0.034,0.046 -0.055,0.043 -0.062,0.012 -0.002,-0.075 -0.234,-0.314 -0.372,-0.377 -1.425,-1.158 -0.524,-0.693 -0.281,-0.499 -0.267,-0.26 -0.77,-0.532 -0.178,-0.212 -0.762,-0.712 -0.582,-0.418 -0.008,-0.178 0.239,-0.222 0.117,0.011 0.128,0.158 0.206,0.181 0.097,0.001 0.144,-0.084 0.003,-0.084 0.781,-0.034 0.14,-0.047 0.141,-0.131 0.073,-0.184 0.012,-0.176 0.03,-0.127 0.125,-0.123 0.229,-0.038 0.176,-0.013 0.052,-0.083 -0.053,-0.269 -0.095,-0.654 -0.02,-0.183 0.032,-0.136 0.072,-0.049 0.346,-0.033 0.655,0.055 0.127,-0.041 0.262,-0.372 0.244,-0.273 0.174,-0.123 0.138,-0.037 0.158,0.243 0.553,0.348 0.094,-0.022 0.054,-0.019 0.018,-0.05 -0.01,-0.16 0.138,-0.146 0.287,-0.131 0.288,-0.231 0.29,-0.332 0.252,-0.195 0.212,-0.058 0.082,-0.09 -0.051,-0.123 0.017,-0.175 0.084,-0.226 0.124,-0.131 0.162,-0.036 0.065,-0.071 -0.034,-0.107 0.031,-0.117 0.147,-0.193 0.35,-0.165 0.2,0.055 0.166,0.222 0.236,0.151 0.304,0.08 0.236,-0.029 0.168,-0.139 0.151,-0.042 0.134,0.055 0.071,-0.032 0.008,-0.116 0.069,-0.027 0.132,0.063 0.116,0.016 0.102,-0.03 0.04,-0.057 0.021,-0.059 0.076,-0.043 0.263,0.043 0.294,-0.067 0.327,-0.179 0.217,-0.078 0.107,0.02 0.128,-0.09 0.149,-0.2 0.341,-0.09 z",
                        title: "Nicaragua",
                        id: "NI",
                    },
                    {
                        d:
                            "m 489.58075,285.9684 -0.119,-0.065 0.631,-0.187 0.399,-0.057 0.071,0.025 -0.721,0.246 -0.261,0.038 z m 1.401,-0.304 0.554,-0.077 -0.003,-0.029 -0.146,-0.047 -0.472,0.008 -0.151,0.033 0.031,0.055 0.187,0.057 z m 1.688,-0.321 -0.119,-0.02 -0.346,0.1 -0.024,0.046 0.096,0.034 0.393,-0.16 z m -3.437,0.952 -0.229,-0.01 -0.334,0.299 0.044,0.055 0.519,-0.344 z m 4.749,-1.493 -0.13,0 -0.241,0.094 -0.075,0.125 0.26,-0.016 0.186,-0.203 z m -7.829,10.259 -0.358,0.186 -0.468,-0.065 -0.356,-0.136 -0.459,0.026 -0.212,0.071 0.084,0.388 0.064,0.123 0.083,0.08 0.11,0.016 0.127,-0.096 0.177,-0.101 0.285,0.047 0.207,0.093 0.074,0.097 0.137,0.092 0.2,0.022 0.387,-0.176 0.372,-0.269 0.109,-0.187 0.041,-0.169 -0.322,0.116 -0.282,-0.158 z m 8.942,-8.645 -0.391,-0.085 -0.252,-0.125 -0.157,-0.226 -0.27,-0.309 -0.709,0.032 -0.59,0.089 -0.817,0.038 -0.529,0.15 -0.958,0.5 -0.241,0.255 -0.246,0.549 -0.834,0.632 -0.486,0.243 -0.137,-0.093 -0.197,-0.061 -0.157,0.321 -0.097,0.289 -0.326,1.693 -0.222,0.612 -0.299,0.514 -0.47,0.628 -0.216,0.214 -0.132,0.081 -0.165,0.302 -0.132,0.362 -0.09,0.169 0.527,0.622 0.066,0.178 0.069,0.104 -0.499,0.065 0.212,0.201 0.267,0.144 0.179,0.069 0.098,0.145 -0.192,0.067 -0.181,0.004 -0.716,-0.533 -0.398,-0.098 -0.548,0.031 -0.138,0.056 -0.142,0.162 0.201,0.246 0.186,0.145 0.299,0.019 0.36,0.182 0.518,-0.152 0.372,0.187 0.245,0.067 0.22,0.112 0.194,0.024 0.085,-0.05 -0.054,-0.271 0.158,-0.145 0.175,-0.067 0.079,0.118 0.161,0.12 0.126,10e-4 0.342,-0.312 0.08,0.062 0.074,0.111 0.016,0.089 0.013,0.094 0.077,0.039 0.269,-0.02 0.137,-0.169 0.107,-0.106 0.08,0.072 0.039,0.208 0.074,0.271 0.321,0.302 0.271,0.086 0.333,-0.059 0.132,-0.054 0.089,0.045 0.089,0.16 0.192,0.183 0.403,0.129 0.124,0.073 0.086,0.123 -0.025,0.175 -0.192,0.435 -0.025,0.128 0.026,0.043 -0.038,0.08 -0.25,0.291 -0.022,0.103 0.083,0.167 0.069,0.138 0,0 0.15,0.067 0.141,0.022 0.267,0.009 0.285,0.009 0.153,-0.685 -0.117,-0.2 -0.145,-0.102 -0.169,-0.05 -0.078,-0.095 -0.027,-0.109 0.03,-0.067 0.199,0.02 0.062,-0.071 0.474,-0.404 0.02,-0.078 -0.066,-0.044 -0.086,-0.023 -0.022,-0.085 0.003,-0.112 0.253,-0.585 0.075,-0.25 0.017,-0.177 -0.016,-0.175 -0.146,-0.275 -0.141,-0.22 -0.005,-0.175 -0.103,-0.092 -0.292,-0.471 0,-0.182 0.165,-0.142 0.231,-0.09 0.077,-0.075 0.138,-0.047 0.367,0.136 0.164,0.118 0.046,-0.024 0.148,-0.128 0.26,0.02 0.629,-0.258 0.094,-0.124 0.07,-0.132 0.006,-0.058 -0.244,-0.255 -0.007,-0.094 0.032,-0.106 0.069,-0.084 0.144,-0.057 0.153,-0.112 0.343,-0.318 0.119,-0.276 0.037,-0.3 0.007,-0.224 -0.094,-0.178 -0.095,-0.115 -0.129,0.018 -0.251,-0.009 -0.235,-0.1 -0.129,-0.162 -0.032,-0.142 0.059,-0.09 0.018,-0.11 -0.038,-0.111 0.015,-0.093 0.106,-0.075 0.743,0.002 0.056,-0.082 0.05,-0.432 0.186,-0.659 0.175,-0.368 0.029,-0.155 -0.003,-0.875 0.022,-0.448 z m -9.726,7.374 0.245,-0.071 0.371,0.302 0.348,-0.098 -0.021,-0.084 -0.059,-0.079 -0.274,-0.247 -0.449,-0.031 -0.254,0.076 10e-4,0.089 0.092,0.143 z m 2.962,-6.056 0.278,-0.33 0,-0.525 -0.411,0.429 -0.086,0.258 0.049,0.077 0.17,0.091 z",
                        title: "Netherlands",
                        id: "NL",
                    },
                    {
                        d:
                            "m 546.70275,175.2494 0.75,0.332 0.256,-0.007 0.373,0.619 0.194,-0.055 -0.037,0.376 -0.376,0.179 -0.585,0.108 -0.087,0.075 -0.5,-0.06 -0.281,-0.506 -0.469,-0.125 10e-4,-0.163 0.304,-0.384 0.457,-0.389 z m 14.828,11.398 0.153,1.065 -0.005,0.37 -0.072,0.358 -0.101,0.183 -0.201,0.08 -0.487,-0.032 -0.661,-0.419 -0.427,-0.395 -0.133,-0.017 -0.058,0.048 0.104,0.396 -0.028,0.304 -0.064,0.33 -0.09,0.299 -0.125,0.25 -0.262,0.322 -0.453,0.254 -1.247,0.495 -0.099,0.218 -0.402,1.37 -0.109,0.2 -0.147,0.169 -0.429,0.219 -0.208,-0.302 -0.166,-0.459 0.038,-0.456 0.501,-0.878 0.469,-0.625 0.132,-0.217 0.266,-0.631 -0.538,-1.594 -0.958,-0.485 -1.091,-0.741 -0.4,-0.396 -0.623,-0.819 -0.441,-0.738 -0.398,-0.026 -0.438,0.186 -0.684,0.674 -0.399,0.338 -0.22,0.1 -0.053,0.015 -0.49,-0.191 -0.544,-0.04 -0.438,0.055 -0.165,0.092 -0.61,1.084 -0.427,0.544 -0.235,0.187 -0.171,0.314 -0.14,0.516 -0.313,1.776 -0.233,0.666 -0.052,0.406 0.055,1.224 -0.056,0.674 -0.285,0.554 -0.201,0.249 -0.265,0.051 -0.347,0.141 -0.303,0.319 -0.214,0.435 -0.241,0.971 -0.408,0.356 -0.39,-0.102 -0.278,-0.356 -0.597,-0.276 -0.445,-0.176 -0.499,-0.382 -0.44,-0.291 -0.402,-0.058 -0.229,0.369 -0.184,0.344 -0.686,0.279 -0.389,0.221 -0.504,0.049 -0.204,-0.245 -0.732,-0.162 -0.871,-0.192 -0.252,0.002 -0.079,-0.439 -0.232,-0.615 -0.619,-1.068 -0.253,-0.378 -0.477,-0.891 -0.555,-0.918 -0.079,-0.023 -0.372,-0.031 -0.545,0.03 -0.346,0.209 -0.218,0.262 -0.038,0.218 0.211,0.832 -0.065,0.207 -0.109,0.1 -0.495,-0.233 -0.599,0.016 -0.151,0.256 -0.365,0.028 -1.053,0.097 0.465,0.676 0.154,0.271 0.031,0.396 -0.081,0.734 -0.223,0.625 -0.26,0.507 -0.501,0.501 0.761,0.494 -0.517,0.665 -0.242,0.258 -0.28,-0.044 -0.501,-0.229 -1.213,-0.556 -0.579,-0.209 -0.518,-0.064 -0.276,0.008 -1.098,-0.478 -0.212,0.053 -0.394,0.207 -0.044,0.464 0.025,1.149 0.058,0.88 -0.145,0.506 -0.145,0.343 -0.439,0.921 -0.988,-0.626 -0.674,-0.416 -0.433,0.553 -1.085,1.01 -0.556,1.976 -0.032,0.064 -0.329,0.499 -0.421,0.229 -0.319,0.113 -0.186,0.581 0.433,0.829 0.222,0.436 0.207,0.702 -0.038,0.445 -0.048,0.276 -0.465,0.564 -0.992,1.481 -0.918,1.534 -0.376,0.438 0.17,1.288 -0.305,0.376 -0.622,0.424 -0.318,0.163 -0.342,0.096 -1.052,0.169 0.187,1.36 0.071,0.599 -10e-4,0.354 -0.109,0.345 -0.13,0.657 -0.196,2.33 -0.15,0.249 -0.207,0.625 -0.666,1.493 -0.534,0.986 -0.771,1.411 0.627,0.443 0.572,0.323 0.119,0.495 0.079,0.824 -0.019,0.559 -0.219,0.501 -0.17,0.351 -0.119,0.171 -0.813,-0.17 -1.042,-0.219 -0.27,-0.002 -0.606,0.158 -0.547,0.323 -0.288,0.272 -0.077,0.108 -0.364,0.618 -0.648,1.092 -0.355,0.475 0.104,0.653 -0.596,1.255 0.39,1.258 0.017,0.042 0.207,0.506 -0.216,0.326 -0.091,0.175 0.031,0.575 0.057,0.641 -0.05,0.375 -0.021,0.415 0.53,1.855 -0.006,0.432 -0.026,0.278 -0.164,1.141 -0.22,1.521 0.384,0.397 0.546,0.474 0.307,0.187 0.453,0.562 0.346,0.547 -0.048,0.362 -0.1,0.399 -0.145,0.278 -0.137,0.381 -0.061,0.281 -0.064,0.075 -0.605,0.031 -0.319,0.106 -0.167,0.119 0.057,0.638 0.367,1.163 0.305,0.822 0.098,0.54 -0.1,0.546 -0.104,0.279 -0.003,0.375 -0.08,0.744 -0.236,0.375 -0.309,0.408 -0.344,0.304 -0.273,0.085 -0.234,0.035 -0.158,0.154 -0.143,0.453 -0.132,0.474 -0.431,0.582 0.012,0.202 0.164,0.686 0.154,0.778 -0.13,0.725 -0.111,0.757 -0.195,0.503 -0.278,0.18 -0.204,-0.09 -0.231,-0.69 -0.012,-0.163 -0.057,-0.212 -0.656,-0.211 -0.116,0.007 -0.258,-0.124 -0.151,-0.035 -0.31,-0.071 -0.258,-0.614 -0.273,-0.512 -0.04,-0.214 0.01,-0.963 -0.084,-0.43 -0.026,-0.47 -0.172,0.382 0.1,0.603 -0.212,0.252 -0.269,0.123 0.025,0.351 0.11,0.067 0.023,0.363 -0.065,0.538 -0.528,1.189 -0.106,0.127 -0.073,0.16 -0.27,-0.106 -0.347,0.33 -0.329,0.053 -0.119,-0.373 -0.463,-0.495 -0.218,0.028 0.196,0.244 0.194,0.317 -0.11,0.209 -0.108,0.137 -0.189,0.071 -0.677,0.413 0.241,0.277 -0.205,0.314 -0.236,0.046 -0.126,0.146 -0.044,0.198 -0.701,0.565 -1.142,1.441 -0.587,0.406 -0.41,0.42 -0.361,-0.01 -0.454,0.357 -1.15,0.312 -0.763,-0.141 -0.531,0.124 -0.285,-0.245 -0.037,-0.168 0.014,-0.098 0.047,-0.118 -0.099,-0.039 -0.208,-0.02 -0.089,0.118 -0.012,0.269 -0.099,0.07 -0.396,-0.154 -0.1,-0.138 0.142,-0.281 0.244,-0.253 -0.044,-0.052 -0.047,-0.154 -0.119,-0.02 -0.354,0.038 -0.288,-0.046 -0.938,-0.571 -0.219,-0.306 -0.757,-0.489 -0.339,-0.52 -0.193,-0.572 0.015,-0.52 0.093,-0.827 0.159,-0.205 0.679,0.291 0.687,0.484 0.107,-0.024 0.216,-0.38 0.418,-0.306 -0.119,-0.084 -0.622,0.351 -0.231,-0.194 -0.359,-0.396 0,-0.205 0.167,-0.205 0.056,-0.277 -0.087,-0.262 0.041,-0.357 0.277,-0.379 0.416,-0.385 0.3,-0.373 0.308,-0.229 -0.032,-0.077 -0.352,0.146 -0.337,0.248 -0.396,0.415 -0.483,0.335 -0.357,0.13 -0.17,0.108 -0.262,0.104 -0.271,0.479 -0.296,0.205 -0.53,0.021 -0.117,-0.35 0.15,-1.248 0.16,-0.611 0.176,-0.433 0.276,-0.073 0.194,-0.318 0.161,0 0.14,0.147 0.541,0.142 0.267,-0.405 0.347,-0.06 0.633,-0.41 -0.013,-0.075 -0.428,0.09 -0.26,0.013 -0.372,0.103 -0.198,-0.074 -0.093,-0.307 0.149,-0.278 0.597,-0.665 0.207,-0.292 0.117,-0.273 -0.019,-0.186 0.1,-0.386 0.584,-0.675 0.476,-0.31 0.156,0.266 -0.133,0.831 10e-4,0.342 0.376,-1.21 0.166,-0.289 0.188,-0.204 0.456,-0.137 0.129,-0.192 -0.532,0.063 -1.289,0.464 -0.543,0.413 -0.145,0.317 -0.377,0.478 -0.177,0.309 -0.078,0.454 -0.212,0.246 -0.287,0.091 -0.398,0.572 -0.176,0.459 -0.396,0.364 -0.251,0.28 -0.083,0.1 -0.136,0.274 -0.113,0.02 -0.098,-0.161 -0.017,-0.354 0.04,-0.568 0.191,-0.41 0.091,-0.401 -0.126,-0.375 0.088,-0.238 0.167,0.009 0.312,0.108 0.331,-0.017 0.545,-0.297 -0.087,-0.174 -0.235,-0.025 -0.439,0.025 -0.369,-0.291 -0.287,-0.58 -0.13,-0.778 0.087,-0.223 1.062,-0.796 0.286,-0.363 -0.166,-0.036 -0.399,0.44 -0.57,0.272 -0.36,-0.379 -0.187,-0.409 -0.108,-0.867 0.039,-0.447 -0.045,-0.589 0.244,-0.192 0.272,0.102 0.269,0.038 0.609,-0.052 1.344,-0.355 0.866,0.211 0.352,-0.019 0.539,-0.306 0.471,-0.031 0.353,0.233 0.193,0.268 0.024,0.357 0.163,0.238 0.11,-0.078 -0.088,-0.283 -0.018,-0.439 1.417,-0.499 0.167,-0.194 -0.563,-0.068 -0.161,-0.457 0.297,-0.694 -0.028,-0.09 -0.313,0.367 -0.154,0.514 0.062,0.41 -0.062,0.19 -0.288,0.087 -0.648,0.032 -0.416,-0.174 -0.385,-0.094 -0.131,-0.131 0.044,-0.293 -0.073,-0.061 -0.16,0.263 -0.142,0.523 -0.306,0.121 -0.845,-0.194 -1.223,0.114 -0.549,0.262 -0.355,-0.034 -0.612,-0.46 -0.238,-0.367 -0.089,-0.742 0.036,-0.327 0.476,-0.138 0.241,0.009 0.226,-0.176 -0.2,-0.115 -0.281,-0.226 -0.191,-0.452 -0.289,-0.148 -0.193,-0.387 -0.049,-0.585 0.055,-0.408 0.154,-0.131 0.371,0.089 0.978,-0.069 0.92,0.416 0.625,0.234 1.265,-0.118 0.741,-0.371 -0.136,-0.102 -0.804,0.214 -0.743,-0.009 -1.31,-0.419 -0.537,-0.135 -0.579,0.06 -0.301,-0.127 -0.177,-0.416 0.131,-0.798 0.274,-0.172 0.148,0.208 0.179,0.013 0.182,-0.334 0.173,-0.191 0.138,-0.432 0.519,-0.411 0.219,-0.035 0.314,-0.189 0.201,0.054 0.128,0.19 0.163,0.157 0.352,-0.019 1.042,-0.33 0.112,-0.097 0.203,-0.271 -0.66,0.121 -0.548,0.192 -0.353,0.054 -0.05,-0.241 0.13,-0.213 0.204,-0.228 0.099,-0.389 0.225,-0.166 0.243,0.009 0.502,-0.071 0.354,-0.101 0.607,0.067 0.906,0.149 0.583,0.362 0.22,-0.033 0.233,-0.096 0.106,-0.131 -0.458,-0.15 -0.026,-0.215 0.057,-0.162 0.748,-0.299 0.816,-0.066 -0.14,-0.241 -1.788,0.364 -0.467,-0.249 -0.369,0.002 -0.241,0.142 -0.688,0.172 -0.126,-0.122 0.131,-0.422 0.412,-0.694 0.034,-0.17 0.191,-0.168 1.068,-0.405 0.513,-0.472 0.231,-0.06 0.229,0.033 0.349,-0.055 0.674,0.135 0.311,0.59 0.279,0.185 0.877,0.734 -0.039,-0.21 -0.76,-0.997 -0.29,-0.248 -0.217,-0.492 0.074,-0.466 0.244,-0.312 0.867,-0.167 0.155,-0.181 0.016,-0.311 -0.133,-0.213 -0.319,0.012 -0.263,-0.132 -0.072,-0.336 0.105,-0.228 0.5,-0.417 0.273,-0.135 0.474,-0.146 0.823,0.33 0.063,0.172 -0.231,0.414 0.023,0.232 0.202,0.025 0.47,-0.698 0.553,-0.097 0.229,-0.15 0.266,-0.095 0.379,0.632 0.167,0.202 0.125,0.083 0.121,0.524 0.117,0.028 0.167,-0.262 0.303,-0.139 0.425,-0.091 0.704,0.139 0.319,-0.103 0.156,0.015 -0.15,-0.471 -0.093,-0.137 0.145,-0.422 0.151,-0.165 0.486,-0.297 0.464,-0.133 0.303,-0.282 0.407,-0.261 -0.064,-0.208 -0.113,-0.242 -0.264,-0.015 -0.107,-0.132 0.334,-0.314 0.458,-0.35 -0.08,-0.138 -0.344,-0.156 -0.261,0.117 -0.388,0.271 -0.452,0.428 0.147,0.125 0.226,0.359 -0.315,0.476 -1.672,1.259 -0.797,0.367 -0.368,-0.057 -0.088,-0.343 -0.169,-0.253 -0.182,-0.525 -0.31,0.014 -0.176,0.116 -0.076,-0.172 0.133,-0.562 0.262,-0.445 0.439,-0.337 0.211,-0.408 0.198,-0.649 0.635,-0.62 0.924,-1.542 0.753,-0.495 0.276,-0.543 0.444,-0.24 0.379,-0.425 0.297,-0.042 0.54,-0.384 0.306,-0.458 -0.2,-0.028 -0.475,0.297 -0.269,0.12 0.019,-0.491 0.13,-0.505 0.391,-0.463 1.881,-1.351 0.188,0.224 0.225,0.396 0.566,-0.089 0.646,-0.767 0.497,-0.837 -0.269,0.146 -0.293,0.343 -0.571,0.475 -0.264,0.075 -0.151,-0.062 -0.084,-0.317 -0.198,-0.103 -0.179,0.071 -0.185,-0.226 -0.033,-0.559 0.236,-0.835 0.187,-0.554 0.202,-0.421 0.794,-1.2 0.171,-0.658 0.359,-0.348 0.466,0.077 0.141,-0.101 -0.16,-0.434 -0.508,-0.344 -0.031,-0.217 1.693,-0.571 0.806,0.019 0.239,-0.285 0.438,-0.184 0.332,-0.35 -0.171,-0.155 -0.819,0.322 -0.512,0.151 -0.231,-0.005 -0.181,0.11 -0.654,0.042 -0.143,-1.397 0.103,-0.763 0.244,0.016 0.056,-0.731 0.282,-0.433 0.389,-0.097 0.196,-0.185 0.283,-0.378 0.468,0.087 0.481,-0.084 -0.12,-0.179 -0.597,-0.23 -0.147,-0.396 0.21,-0.222 0.229,-0.163 0.202,-0.029 0.399,-0.777 0.243,-0.333 0.271,0.058 0.378,-0.344 0.372,0.117 0.359,-0.225 0.491,-0.149 1.797,-0.057 0.053,-0.321 -0.378,-0.074 -1.335,-0.083 -0.682,0.007 -0.287,0.083 -0.105,-0.112 0.019,-0.192 0.248,-0.305 0.117,-0.337 0.496,-0.826 0.581,-0.552 0.445,0.141 0.473,0.527 0.337,0.066 0.157,0.17 0.246,0.724 0.117,0.023 -0.053,-0.695 0.325,-0.568 -0.084,-0.157 -0.488,0.206 -0.374,-0.214 -0.295,-0.428 -0.084,-0.392 0.184,-0.388 0.173,-0.196 -0.117,-0.229 -0.738,0.611 -0.522,0.143 -0.206,-0.085 0.111,-0.554 -0.062,-0.441 0.7,-1.09 0.241,-0.126 0.393,0.088 0.355,0.308 0.297,-0.049 0.322,-0.165 -0.044,-0.296 -0.698,-0.118 -0.18,-0.246 0.065,-0.243 0.479,-0.256 0.477,-0.463 0.546,-0.135 0.439,-0.351 0.085,0.08 0.074,0.138 0.158,1.298 0.393,1.052 0.145,0.038 -0.151,-0.894 0.141,-0.258 0.178,-0.196 0.056,-0.224 -0.204,-0.076 -0.167,-0.322 -0.238,-1.033 0.082,-0.27 0.517,-0.554 0.648,-0.127 0.69,0.388 0.243,0.004 0.4,-0.104 0.679,-0.32 0.4,-0.122 0.208,0 0.051,-0.162 -0.193,-0.104 -0.062,-0.101 -0.151,-0.058 -0.628,0.173 -1.733,-0.055 -0.167,-0.185 -0.031,-0.321 0.184,-0.46 0.202,-0.255 0.654,-0.459 0.691,-0.062 0.729,-0.819 0.278,-0.616 0.158,-0.955 0.444,-0.776 1.114,-0.443 0.045,-0.196 -0.118,-0.407 0.01,-0.734 0.305,-0.859 0.203,-0.299 0.094,-0.036 0.24,0.282 0.292,0.598 0.457,0.342 0.599,0.059 0.16,-0.168 -0.465,-0.34 -0.353,-0.446 -0.028,-0.449 0.167,-0.238 0.26,0.026 0.326,-0.05 0.304,-0.303 0.044,-0.213 0.013,-0.29 0.076,-0.295 0.446,-0.707 1.374,-0.461 0.1,0.188 -0.074,1.363 -0.158,0.876 0.005,0.638 0.268,-0.638 0.358,-1.757 0.27,-0.832 0.304,-0.479 0.217,-0.108 0.215,-0.249 0.284,-0.148 0.087,0.191 0.09,0.443 -0.153,1.546 0.015,0.486 -0.171,0.649 -0.655,1.439 0.03,0.183 0.148,-0.068 0.253,-0.236 0.812,-1.368 0.709,0.173 0.009,-0.112 -0.228,-0.403 -0.277,-0.387 -0.084,-0.48 0.037,-1.288 0.214,-0.513 0.612,0.054 0.367,-0.071 0.171,0.233 0.367,-0.017 0.254,-0.93 0.503,-0.082 0.442,0.616 0.531,0.413 0.427,0.592 0.121,-0.162 -0.23,-1.386 -0.252,-0.508 -0.547,-0.265 -0.583,-0.629 -0.151,-0.28 0.026,-0.208 0.514,-0.201 0.678,0.231 0.604,-0.527 0.165,0.145 0.463,-0.276 0.288,0.372 0.177,-0.11 0.102,-0.499 0.739,-0.31 0.469,0.287 0.251,0.295 0.117,0.567 0.179,1.115 0.366,0.599 0.228,0.293 0.269,0.081 0.13,-0.298 -0.252,-0.36 -0.068,-0.34 0.121,-0.846 0.141,-0.333 0.791,-1.269 0.662,-0.662 0.396,-0.056 0.694,-1.493 0.196,-0.273 0.181,-0.063 -0.046,-0.368 -0.379,-0.233 -0.013,-0.458 0.5,-0.558 0.607,-0.941 0.299,-0.063 0.188,0.262 0.591,0.425 0.362,0.485 0.262,0.244 0.17,-0.051 0.141,-0.364 0.17,-0.171 0.375,0.096 0.224,0.234 0.175,0.031 0.158,0.142 0.037,0.311 -0.325,0.339 -0.554,0.893 -0.546,1.01 -0.18,0.53 -0.177,1.383 -0.427,0.879 -0.033,0.614 0.172,0.288 0.471,-0.226 0.581,-0.819 0.145,-0.874 1.453,-2.391 0.682,-1.334 0.774,-1.113 0.434,-0.231 0.204,0.739 -0.164,0.96 -0.329,0.609 0.243,0.279 -0.046,0.72 -0.076,0.399 -0.048,0.417 0.003,0.366 0.228,-0.098 0.907,-0.752 0.23,-0.818 0.213,-0.616 0.102,-0.533 0.353,-0.507 0.666,-0.004 0.026,-0.2 -0.808,-0.697 -0.095,-0.319 0.271,-0.426 0.745,-0.816 0.383,0.09 0.229,0.186 0.917,0.142 0.704,0.583 -0.027,0.909 -0.157,0.378 -0.154,0.232 -0.901,0.684 -0.148,0.337 0.283,0.116 0.608,-0.34 0.158,0.309 -0.194,0.77 -0.033,1.149 -0.07,0.667 0,0.606 0.076,0.325 0.245,-1.29 0.083,-0.333 0.358,-0.489 0.133,-0.989 0.35,-1.195 0.395,-0.698 0.229,-0.191 0.76,0.027 0.326,0.263 0.288,0.583 0.215,0.233 0.678,0.247 0.232,0.309 0.043,0.184 0.166,0.037 0.458,-0.439 0.297,-0.073 0.484,0.684 -0.097,0.505 0.028,0.16 0.586,-0.032 0.488,0.198 0.927,1.028 0.097,0.478 -0.046,0.578 -1.338,0.633 -0.578,0.604 -0.946,0.232 -3.212,-0.404 0.065,0.437 2.237,0.951 0.128,0.271 -0.072,0.568 -10e-4,0.455 0.042,0.31 0.165,0.288 0.273,0.135 0.557,-0.071 0.274,0.155 0.188,-0.229 0.07,-0.773 0.162,-0.171 0.312,0.225 0.136,0.826 0.087,0.085 0.157,-0.588 0.309,0.042 0.337,-0.049 0.435,0.097 z m -20.85,-8.59 -0.055,0.268 -0.095,0.26 -0.23,0.274 -0.666,1.081 -0.391,0.173 -0.124,0.169 -0.156,0.101 -0.486,-0.147 -0.142,0.218 -0.134,0.146 -0.352,0.056 -0.207,-0.047 -0.533,-0.398 -0.317,-0.432 -0.172,-0.37 0.493,0.007 0.175,-0.09 0.331,0.078 0.199,-0.381 0.42,0.046 0.807,-0.265 0.296,0.148 0.677,-0.889 0.212,0.023 0.324,-0.255 0.126,0.226 z m 1.619,2.107 -0.535,0.336 -0.31,-0.289 -0.13,-0.297 -0.019,-0.661 0.072,-0.404 0.251,-0.209 0.163,0.153 0.043,0.128 0.292,0.125 0.343,0.416 -0.17,0.702 z m -1.128,0.152 0.052,0.394 0.02,0.324 -0.262,0.467 -0.604,0.611 0.035,0.164 -0.209,0.157 -0.313,0.115 -0.165,-0.111 0.022,-0.523 -0.05,-0.156 -0.237,0.208 -0.247,-0.267 0,-0.268 0.065,-0.233 0.229,-0.355 0.381,-0.245 0.251,0.092 0.838,-0.943 0.09,0.198 0.104,0.371 z m -10.799,2.778 0.143,0.097 0.142,-0.06 0.117,0.085 0.235,0.436 0.253,0.171 0.012,0.218 -0.231,0.212 -0.305,0.064 -0.327,-0.074 -0.096,-0.272 -0.101,-0.453 -0.273,-0.445 -0.041,-0.391 0.238,-0.062 0.234,0.474 z m -1.438,1.241 0.249,0.447 0.221,-0.043 0.066,-0.168 0.15,-0.084 0.304,0.237 -0.043,0.401 -0.421,0.505 -0.302,0.718 -0.386,0.166 -0.186,-0.086 -0.346,0.413 -0.276,0.428 -0.287,0.54 -0.018,0.278 -0.045,0.212 -1.051,0.21 -0.382,0.139 -0.405,-0.179 -0.192,-0.356 0.062,-0.193 0.404,-0.077 0.013,-0.331 0.103,-0.202 0.131,-0.111 0.096,-0.424 0.16,-0.111 0.298,0.104 0.201,-0.308 0.113,-0.053 0.139,0.255 0.067,-0.351 -0.067,-0.321 0.035,-0.217 0.385,-0.565 0.167,-0.413 0.24,-0.267 0.231,0.042 0.067,-0.394 -0.067,-0.404 0.025,-0.264 0.204,-0.642 0.224,-0.027 0.103,0.571 0.016,0.925 z m 4.277,-0.192 -0.151,0.191 -0.232,0.078 -0.125,-0.118 -0.178,-0.078 -0.198,0.035 -0.166,-0.351 0.019,-0.295 0.227,-0.4 0.455,-0.228 0.368,0.094 0.094,0.117 -0.113,0.955 z m 25.755,2.396 -0.533,0.237 -0.062,-0.195 0.117,-0.304 0.14,-0.624 0.219,0.025 0.222,0.238 0.174,0.284 -0.277,0.339 z m -34.949,1.62 0.337,0.459 0.151,-0.14 0.299,-0.053 0.222,0.162 0.182,0.291 0.215,0.013 0.135,0.38 0.069,0.493 -0.156,0.367 -0.222,0.167 -0.06,0.431 0.084,0.603 -0.498,0.206 -0.576,0.092 -0.226,-0.288 -0.46,0.526 -0.457,0.817 -0.22,0.096 -0.016,-0.258 -0.328,-0.179 -0.42,-0.01 0.014,-0.192 0.077,-0.135 0.362,-0.201 0.072,-0.416 -0.066,-0.744 0.064,-0.363 0.014,-0.25 0.228,-0.294 0.78,0.138 0.095,-0.281 -0.059,-0.177 -0.403,-0.31 0.062,-0.209 0.291,-0.187 0.275,-0.025 0.083,-0.316 0.014,-0.139 0.042,-0.074 z m -4.891,8.13 0.034,0.054 0.382,-0.74 0.424,-0.231 0.026,-0.259 0.164,-0.25 -0.019,-0.41 0.083,-0.333 0.216,-0.089 0.135,-0.113 0.149,-0.063 0.271,0.271 0.152,0.3 0.19,0.668 -0.079,0.644 -0.509,0.501 -0.404,0.225 -0.409,0.572 -0.205,0.467 -0.177,0.101 -0.111,-0.038 -0.099,-0.112 -0.207,0 -0.228,0.404 -0.688,0.328 -0.27,-0.095 -0.012,-0.402 -0.161,0.033 -0.258,0.482 -0.252,0.161 -0.169,0.049 -0.311,-0.181 -0.836,0.818 -0.784,0.152 -0.258,-0.094 -10e-4,-0.5 0.507,-0.642 0.415,-0.447 1.43,-0.313 0.891,-1.336 0.215,-1.463 0.21,-0.532 -0.099,-0.301 -0.239,-0.053 -0.015,-0.464 0.125,-0.508 0.467,-0.7 0.26,-0.299 0.423,-0.849 0.204,-0.191 0.232,0 0.229,0.223 -0.041,0.455 -0.343,0.818 -0.508,0.694 0.062,0.497 0.202,0.407 0.05,0.694 0.013,0.666 -0.385,0.896 -0.084,0.428 z m -1.553,-2.955 0.365,0.784 0.167,0.457 -0.135,0.859 -0.355,0.432 -0.547,0.077 -0.384,-0.036 -0.242,-0.208 -0.03,-0.233 -0.14,-0.069 -0.369,0.3 -0.256,0.04 -0.326,-0.232 -0.088,-0.372 0.346,-0.467 0.16,-0.364 0.383,0.032 0.096,0.113 0.217,0.071 0.132,-0.439 -0.03,-0.304 0.097,-0.212 0.463,0.153 10e-4,-0.83 0.18,-0.058 0.074,0.032 0.133,0.175 0.088,0.299 z m -3.744,5.209 0.167,0.129 0.436,-0.038 0.088,0.048 -0.063,0.213 -0.189,0.234 -0.397,0.144 -0.179,0.357 -0.128,0.121 -0.343,0.001 -0.203,0.083 -0.249,0.316 -0.199,-0.233 -0.056,0.166 -0.036,0.296 -0.111,0.086 -0.344,0.107 -0.083,-0.689 0.158,-0.25 0.124,-0.3 0.19,-0.046 0.17,0.025 0.307,-0.648 0.42,-0.185 0.271,-0.021 0.249,0.084 z m -2.53,2.938 -0.415,0.393 0.151,-0.718 0.224,-0.73 0.31,-0.419 0.154,0.164 -0.071,0.351 10e-4,0.346 -0.066,0.163 -0.288,0.45 z m -1.548,13.121 -0.26,0.045 0.043,-0.305 0.21,-0.29 0.081,-0.198 0.042,-0.234 0.186,-0.177 0.262,0.227 0.005,0.384 -0.13,0.35 -0.439,0.198 z m 0.252,0.973 -0.225,0.02 0.002,-0.281 0.129,-0.256 0.204,-0.171 0.263,-0.045 0.294,-0.02 0.089,0.136 -0.169,0.191 -0.587,0.426 z m -1.52,1.881 -0.186,0.209 -0.347,-0.06 -0.037,-0.18 0.099,-0.36 0.211,-0.149 0.272,0.029 0.087,0.15 -0.099,0.361 z m -2.067,5.092 -0.147,0.184 -0.327,-0.147 -0.645,0.114 -0.26,-0.179 0.207,-0.35 0.583,-0.368 0.313,0.017 0.319,0.452 -0.043,0.277 z m -7.748,7.741 -0.322,0.015 -0.194,-0.142 0.461,-0.282 0.723,-0.27 0.069,-0.171 0.087,-0.021 0.125,0.21 0.016,0.288 -0.08,0.143 -0.885,0.23 z m -1.034,2.07 -0.275,0.004 -0.327,-0.096 -0.205,-0.205 -0.032,-0.181 0.377,-0.225 0.379,-0.132 0.176,0.248 0.013,0.406 -0.106,0.181 z m -8.823,13.55 -0.249,0.073 -0.2,-0.063 0.071,-0.554 0.104,-0.09 0.151,-0.032 0.163,0.297 -0.04,0.369 z m 0.357,4.448 0.009,0.671 -0.258,-0.051 -0.116,-0.257 -0.034,-0.165 0.021,-0.389 -0.058,-0.402 0.076,-0.2 0.094,-0.027 0.167,0.358 0.099,0.462 z",
                        title: "Norway",
                        id: "NO",
                    },
                    {
                        d:
                            "m 722.17475,381.9264 0.113,0.086 0.012,0.141 -0.021,0.156 -0.116,0.337 -0.106,0.236 -0.123,0.499 -0.111,0.863 0.024,0.151 0.331,0.493 0.129,0.38 0.013,0.257 -0.141,0.433 -0.159,0.487 -0.078,0.11 -0.09,0.039 -0.409,-0.17 -0.281,0.024 -0.324,0.094 -0.338,-0.019 -0.28,-0.056 -0.353,0.196 -0.339,-0.106 -0.217,-0.121 -0.144,-0.339 -0.061,-0.043 -0.713,0.354 -0.171,0.022 -0.443,-0.19 -0.362,-0.189 -0.136,-0.056 -0.35,-0.074 -0.314,-0.043 -0.343,-0.117 -0.426,0.154 -0.172,-0.013 -0.16,-0.111 -0.084,-0.227 -0.021,-0.216 -0.145,-0.148 -0.223,-0.034 -0.315,0.133 -0.459,0.176 -0.148,-0.03 -0.136,-0.05 -0.05,-0.047 -0.063,-0.203 -0.073,-0.045 -0.107,-0.007 -0.188,-0.049 -0.234,-0.151 -0.706,-0.357 -0.089,-0.159 0.003,-0.352 -0.039,-0.145 -0.086,-0.153 -0.363,-0.156 -0.704,-0.25 -0.39,-0.2 -0.186,0.094 -0.358,0.083 -0.192,0.181 -0.23,-0.058 -0.547,-0.19 -0.294,-0.028 -0.177,0.065 -0.041,0.108 -0.224,0.124 -0.213,-0.099 -0.421,-0.132 -0.368,-0.073 -0.559,-0.162 -0.064,-0.244 -0.094,-0.242 -0.132,-0.043 -0.501,0.048 -0.46,-0.267 -0.493,-0.343 -0.21,-0.112 -0.139,-0.041 -0.119,0.045 -0.136,0.079 -0.124,0.023 -0.268,-0.148 -0.341,-0.21 -0.42,-0.259 -0.492,-0.361 -0.202,-0.205 -0.091,-0.153 -0.105,-0.145 -0.428,-0.237 -0.338,-0.187 -0.408,-0.226 -0.068,-0.045 -0.154,-0.135 -0.237,-0.169 -0.194,-0.05 -0.062,0.094 -0.047,0.098 -0.169,-0.023 -0.264,-0.173 -0.276,-0.181 -0.215,-0.168 -0.222,-0.173 -0.054,-0.128 0.093,-0.395 0.129,-0.339 0.109,-0.076 0.178,-0.225 0.065,-0.395 -0.003,-0.338 0.173,-0.477 0.24,-0.508 0.413,-0.545 0.178,-0.181 0.201,-0.124 0.381,-0.403 0.079,-0.066 0.167,-0.104 0.164,-0.026 0.124,0.05 0.127,0.211 0.154,0.201 0.187,-0.01 0.219,-0.172 0.454,-0.79 0.631,-0.162 0.598,0.082 0.529,0.115 0.156,0.264 0.102,0.279 0.066,0.141 0.174,0.166 0.746,0.394 0.433,0.355 0.599,0.476 0.448,0.209 0.397,0.018 0.224,0.186 0.337,0.371 0.285,0.425 0.355,0.393 0.246,-0.013 0.335,-0.127 0.409,-0.167 0.241,0.082 0.223,0.109 0.074,0.203 0.135,0.384 0.148,0.398 0.234,0.139 0.278,0.204 0.153,0.162 0.52,0.298 0.073,0.121 0.105,0.082 0.127,0.052 0.105,0.061 0.164,0.021 0.6,-0.178 0.16,0.022 0.092,0.033 0.003,0.065 -0.108,0.278 -0.092,0.356 0.095,0.178 0.252,0.074 0.556,0.053 0.751,-0.005 0.229,0.18 0.226,0.27 0.229,0.461 0.091,0.195 0.113,0.056 0.195,-0.077 0.033,-0.189 0.008,-0.282 0.164,-0.097 0.105,0.072 0.122,0.22 0.31,0.198 0.225,0.097 0.214,-0.034 0.09,-0.076 0.105,-0.385 0.169,-0.056 0.213,0.025 0.082,0.077 0.086,0.154 0.259,0.073 0.257,0.096 0.241,0.126 0.341,0.285 0.419,0.053 0.487,-0.007 0.256,0.007 0.188,0.021 0.169,-0.02 0.499,-0.204 0.204,-0.015 0.253,0.023 z",
                        title: "Nepal",
                        id: "NP",
                    },
                    { d: "m 943.46275,464.3614 -0.055,0.096 -0.064,-0.012 -0.026,-0.064 0.019,-0.068 0.071,-0.027 0.047,0.021 z", title: "Nauru", id: "NR" },
                    { d: "m 1008.6787,517.1444 -0.281,0.162 -0.125,-0.192 0.111,-0.244 0.132,-0.063 0.078,-0.008 0.114,0.226 z", title: "Niue", id: "NU" },
                    {
                        d:
                            "m 990.79075,598.9554 -0.101,0.101 -0.172,-0.005 -0.301,0.395 0.019,-0.295 -0.09,-0.115 -0.258,0.027 -0.049,0.065 0.173,0.078 0.038,0.043 -0.165,0.171 0.172,0.367 0.15,-0.013 0.146,0.287 -10e-4,0.09 -0.334,0.111 -0.176,0.155 -0.157,-0.006 -0.074,-0.03 -0.088,-0.277 -0.007,-0.116 0.193,-0.203 0.109,-0.207 -0.088,-0.19 -0.223,-0.123 -0.486,0.056 -0.112,-0.041 0.243,-0.256 0.264,0.028 0.284,-0.184 1.091,0.087 z m 0.003,2.262 -0.124,0.034 0.018,-0.223 -0.042,-0.144 0.21,-0.047 0.09,0.171 -0.152,0.209 z m -29.619,-34.16 0.042,0.156 0.155,-0.111 0.116,-0.175 0.187,-0.178 -0.025,0.287 0.096,0.063 0.62,0.2 0.128,0.167 0.132,0.048 0.074,-0.094 0.088,-0.051 0.224,0.105 0.506,0.292 0.042,0.101 -0.026,0.15 0.025,0.159 0.069,0.127 0.168,0.029 0.224,-0.188 0.105,-0.023 0.148,0.267 0.056,0.151 -0.023,-0.005 0.097,0.15 0.128,0.148 0.221,0.439 -0.033,0.154 -0.065,0.139 0.203,0.407 -0.133,0.028 -0.399,-0.069 0.013,0.082 0.233,0.299 0.196,0.423 0.157,0.255 0.554,0.793 -0.083,0.282 0.013,0.187 -0.071,0.161 0.189,0.422 -0.118,0.131 -0.078,0.433 -0.086,0.076 0.011,0.158 0.224,0.042 0.135,0.067 0.116,0.129 0.072,-0.155 0.098,-0.042 0.267,0.207 0.556,0.207 0.153,0.077 0.075,0.167 0.057,0.404 0.108,0.178 0.213,0.034 0.229,-0.054 0.072,-0.147 -0.046,-0.396 -0.165,-0.632 -0.001,-0.205 0.023,-0.206 -0.038,-0.204 -0.083,-0.192 -0.089,-0.147 -0.114,-0.124 0.04,-0.193 0.171,-0.087 0.104,0.163 0.085,0.197 0.431,0.584 0.255,-0.041 0.023,0.242 0.173,0.246 0.096,0.289 0.126,0.865 0.193,0.817 0.35,0.356 0.041,0.171 -0.213,-0.088 -0.065,0.051 0.022,0.086 0.197,0.157 0.232,0.077 0.146,-0.011 0.137,0.057 0.907,0.534 0.436,0.208 1.1,0.341 0.314,0.027 0.174,-0.009 0.329,-0.118 0.295,-0.212 0.255,-0.317 0.22,-0.361 0.239,-0.175 0.271,-0.138 0.137,-0.128 0.144,-0.091 0.737,0.042 0.249,0.182 0.323,0.146 0.169,0.114 -0.057,0.232 -0.193,0.342 -0.148,0.375 -0.132,0.854 -0.089,0.866 -0.134,0.383 -0.244,0.295 -0.27,0.216 -0.305,0.102 -0.124,0.495 -0.061,0.581 0.018,0.146 0.098,0.116 0.04,0.173 -0.16,0.35 -0.093,-0.051 -0.132,-0.292 -0.119,-0.122 -0.366,-0.091 -0.373,-0.042 -0.323,0.026 -0.312,0.125 -0.471,0.253 -0.146,0.128 -0.128,0.163 -0.216,0.364 -0.052,0.446 0.01,0.234 0.077,0.181 0.401,0.247 -0.398,0.864 -0.353,0.902 -0.2,0.258 -0.23,0.239 -0.217,0.545 -0.379,0.47 -0.256,0.36 -0.2,0.374 -0.175,0.398 -0.373,0.563 -0.165,0.373 -0.216,0.311 -0.402,0.397 -0.428,0.341 -0.674,0.472 -0.188,0.156 -0.198,0.115 -0.246,-0.135 -0.049,-0.147 -0.059,-0.323 -0.054,-0.118 -0.313,-0.098 -0.415,0.156 -0.069,-0.033 -0.018,-0.074 0,-0.469 0.07,-0.132 -0.097,-0.073 -0.096,0.029 -0.033,0.12 0.061,0.104 -0.236,0.129 -0.246,0.003 -0.074,-0.051 -0.021,-0.086 0.06,-0.142 0.079,-0.125 0.457,-0.59 0.475,-0.781 0.409,-0.834 0.106,-0.428 0.15,-0.792 -0.123,-0.33 -0.152,-0.309 -0.411,-0.594 -0.549,-0.335 -0.355,-0.047 -0.336,-0.125 -0.316,-0.283 -0.288,-0.333 -0.571,-0.273 -0.602,-0.214 -0.343,-0.302 -0.082,-0.179 -0.054,-0.208 0.008,-0.193 0.043,-0.196 0.068,-0.15 0.107,-0.109 0.637,-0.389 0.675,-0.216 0.124,0.004 0.119,-0.035 0.169,-0.132 0.302,-0.302 0.088,-0.203 0.06,-0.644 0.097,-0.632 0.175,-0.723 0.264,-0.447 0.086,-0.274 -0.107,-0.451 0.099,-0.165 0.12,-0.1 0.136,-0.058 -0.23,-0.422 -0.271,-0.637 -0.057,-0.197 0.041,-0.195 0.066,-0.191 -0.169,-0.048 -0.098,-0.183 -0.243,-0.615 0.066,-0.098 0.141,0.066 0.209,0.443 0.034,-0.228 0.16,-0.141 0.17,-0.073 0.182,-0.016 -0.412,-0.494 -0.138,0.02 -0.182,0.079 -0.187,0.048 -0.183,-0.043 -0.171,-0.109 -0.088,-0.208 -0.107,-0.399 -0.067,-0.147 -0.542,-0.813 0.159,-0.026 0.438,0.407 0.085,-0.13 0.063,-0.187 -0.021,-0.208 -0.104,-0.158 -0.155,-0.102 -0.003,-0.185 0.118,-0.169 -0.007,-0.118 -0.251,-0.241 -0.1,-0.026 -0.045,0.112 0.072,0.167 -0.067,0.019 -0.609,-0.438 -0.188,-0.352 -0.154,-0.386 -0.016,0.157 0.023,0.221 0.241,0.443 0.391,0.496 0.067,0.132 -0.058,0.171 -0.136,0.049 -0.12,-0.108 -0.179,-0.425 -0.129,-0.212 -1.495,-2.184 0.191,-0.287 0.296,-0.242 0.068,-0.107 0.045,-0.131 -0.125,-0.022 -0.112,0.06 -0.128,0.111 -0.117,0.126 -0.148,0.281 -0.07,0.065 -0.175,-0.195 -0.067,-0.12 0.003,-0.144 -0.047,-0.091 -0.13,-0.029 -0.191,-0.286 -0.121,-0.146 0.202,-0.279 0.005,-0.367 -0.206,-0.384 -0.246,-0.353 -0.474,-0.569 -0.435,-0.601 0.471,-0.076 0.478,-0.013 -0.225,0.36 0.102,0.208 0.152,0.176 0.328,0.54 0.028,0.156 0.166,0.158 0.08,0.121 z m 6.38,4.621 0.022,0.189 -0.215,-0.067 -0.084,-0.143 -0.241,-0.148 -0.035,-0.044 -0.027,-0.287 0.127,-0.139 0.021,-0.059 0.056,-0.023 0.099,0.151 0.191,0.215 0.086,0.355 z m -6.813,17.94 0.323,0.018 0.301,-0.272 0.308,-0.221 0.323,-0.183 0.492,-0.419 0.129,-0.062 0.319,-0.08 0.139,-0.099 0.155,-0.023 -0.14,0.248 -0.176,0.083 -0.028,0.089 0.099,0.144 -0.153,0.201 0.006,0.251 -0.182,0.297 0.278,-0.122 0.103,-0.193 -0.053,-0.109 0.12,-0.216 0.187,-0.103 -0.074,-0.163 0.005,-0.129 0.229,0.048 0.113,-0.005 0.09,-0.051 0.165,-0.02 0.033,0.144 0.222,-0.018 -0.081,0.182 -0.169,0.211 -0.04,0.128 -0.271,0.213 -0.181,0.091 0.279,0.023 0.408,-0.285 0.242,-0.251 -0.007,0.314 -0.197,0.282 -0.168,0.178 -0.19,0.056 -0.189,0.145 -0.092,0.237 0.011,0.158 0.054,0.125 0.193,0.211 -0.217,0.408 0.242,-0.051 0.132,0.077 0.186,0.235 -0.112,0.272 -0.078,0.139 -0.472,0.575 -0.206,0.292 -0.241,0.187 0.003,0.307 -0.138,0.224 -0.704,0.769 -0.123,0.167 -0.555,1.229 -0.354,0.518 -0.203,0.177 -0.215,0.143 -0.515,0.245 -0.228,0.282 -0.251,0.234 -0.265,0.053 0.008,0.104 0.17,0.058 0.133,0.154 -0.099,0.173 -0.189,0.108 -0.196,0.031 -0.1,0.111 0.468,-0.079 0.132,0.09 0.024,0.191 0.05,0.172 0.113,0.228 0.394,0.146 0.354,0.068 0.069,0.106 0.053,0.365 -0.064,0.179 -0.079,0.118 -0.119,0.042 -0.288,0.023 -0.289,-0.083 -0.191,-0.221 -0.547,0.071 -0.146,0.047 -0.075,-0.04 0.303,-0.232 -0.158,-0.132 -0.132,-0.049 -0.143,0.077 -0.096,0.122 -0.028,0.2 -0.099,0.116 -0.15,0.033 -0.213,-0.167 -0.211,-0.238 -0.31,-0.24 0.048,0.148 0.238,0.363 0.119,0.241 -0.277,0.193 -0.29,0.15 -0.244,0.088 -0.23,0.138 -0.271,0.215 -0.149,0.076 -0.396,0.005 -0.212,0.068 -0.07,0.284 -0.148,0.181 -0.348,0.036 0.126,0.057 0.077,0.091 -0.23,0.858 -0.05,0.357 -0.043,0.612 -0.145,0.57 -0.413,-0.003 0.066,0.101 0.313,0.161 -0.059,0.243 -0.344,0.445 -0.144,0.257 -0.14,0.626 -0.21,0.579 -0.321,0.66 -0.003,0.119 0.113,0.169 0.137,0.146 0.008,0.206 -0.042,0.109 -0.153,0.028 -0.134,0.071 -0.716,0.182 -0.234,0.204 -0.193,0.366 -0.226,0.316 -0.752,0.702 -0.442,0.59 -0.089,0.169 -0.119,0.123 -0.967,0.28 -0.684,0.042 -0.372,-0.072 -0.359,-0.142 -0.199,-0.048 -0.38,0.087 -0.166,0.095 -0.298,-0.094 -0.236,0.071 -0.07,-0.069 -0.088,-0.173 0.049,-0.23 -0.065,-0.17 -0.15,-0.115 -0.101,-0.134 -0.115,-0.095 -0.314,-0.037 -0.496,0.06 -0.164,-0.006 -0.337,-0.563 -0.111,-0.138 -0.401,-0.179 -0.137,0.025 -0.215,0.3 -0.127,0.051 -0.754,0.032 -0.756,-0.097 -0.278,-0.112 -0.055,-0.259 0.574,-0.711 -0.17,0.095 -0.354,0.289 -0.226,-0.044 0.217,-0.315 0.019,-0.141 -0.045,-0.156 -0.295,0.265 -0.336,0.035 -0.043,-0.246 0.03,-0.285 0.068,-0.081 0.907,-0.149 0.327,-0.097 0.143,-0.153 -0.543,-0.052 -0.034,-0.214 0.078,-0.171 0.464,-0.284 -0.342,0.072 -0.379,-0.025 0.025,-0.3 0.099,-0.234 0.397,-0.007 -0.124,-0.161 -0.019,-0.224 0.11,-0.015 0.403,0.302 0.291,0.11 -0.123,-0.227 0.017,-0.143 0.077,-0.064 0.238,-0.045 -0.066,-0.04 -0.223,-0.058 -0.266,-0.172 -0.028,-0.182 0.01,-0.21 0.286,-0.289 0.169,0.172 0.2,-0.047 -0.153,-0.135 -0.093,-0.202 0.063,-0.133 0.607,-0.535 0.155,0.515 0.036,-0.171 0.009,-0.162 -0.073,-0.141 0.011,-0.142 0.07,-0.122 0.26,-0.121 0.338,-0.392 0.25,-0.182 0.203,0.117 0.139,0.157 -0.021,-0.156 -0.099,-0.129 -0.027,-0.359 0.454,-0.556 0.499,-0.528 0.479,-0.552 0.255,-0.2 0.543,-0.227 0.348,0.095 0.089,-0.018 0.516,-0.396 0.214,-0.103 0.195,0.141 0.12,0.051 -0.121,-0.362 0.095,-0.166 0.431,-0.292 0.54,-0.301 0.41,-0.125 0.302,-0.204 0.182,-0.005 -0.027,-0.154 0.031,-0.147 0.156,0.01 0.048,-0.058 -0.138,-0.08 0.445,-0.294 0.242,-0.325 0.126,-0.067 0.115,-0.098 0.142,-0.224 0.168,-0.074 0.156,0.035 0.113,0.11 -0.062,-0.183 -0.2,-0.104 0.215,-0.158 0.223,-0.11 0.217,0.079 0.213,0.128 -0.213,-0.196 -0.035,-0.121 0.259,-0.14 0.14,-0.043 0.196,0.262 -0.028,-0.208 0.046,-0.184 0.277,-0.301 0.363,-0.496 0.116,0.173 0.019,0.209 -0.018,0.253 0.075,-0.087 0.025,-0.229 -0.056,-0.403 0.454,-0.743 0.09,-0.083 0.1,-0.05 0.158,-0.02 -0.049,-0.112 -0.123,-0.108 0.124,-0.376 0.074,-0.429 0.105,-0.412 0.169,-0.402 0.185,-0.67 0.141,-0.14 0.381,-0.048 0.167,-0.094 0.278,-0.241 0.329,-0.436 0.176,-0.351 0.231,-0.905 0.13,-0.943 0.374,-0.697 0.549,-0.503 0.483,-0.382 0.198,-0.08 0.334,-0.024 0.318,0.105 -0.592,0.092 -0.061,0.227 -0.019,0.23 0.068,0.206 0.106,0.184 0.287,0.173 0.336,0.103 0.15,0.39 0.027,0.463 0.046,0.398 0.136,0.349 z m 2.243,-1.541 -0.376,0.215 0.016,-0.149 0.073,-0.325 0.171,-0.164 0.084,-0.011 0.172,-0.123 -0.019,0.272 -0.121,0.285 z m -19.464,16.519 0.121,0.477 -0.257,-0.091 -0.107,-0.145 0.196,-0.239 0.047,-0.002 z m -0.654,1.898 -0.015,0.197 -0.033,0.099 -0.098,10e-4 -0.146,-0.022 -0.143,-0.091 -0.092,0.026 -0.076,-0.033 0.099,-0.222 0.333,-0.118 0.128,0.095 0.043,0.068 z m 3.925,4.881 0.002,0.163 -0.293,-0.058 0.006,0.183 0.231,0.097 0.085,0.132 0.24,-0.038 0.054,0.197 -0.056,0.177 -0.16,0.129 -0.474,0.065 -0.308,0.257 -0.266,-0.039 -0.072,0.023 -0.305,0.276 -0.341,0.085 -0.093,-0.021 0.047,-0.246 0.254,-0.233 0.005,-0.224 0.065,-0.179 0.243,-0.126 0.004,-0.232 0.164,-0.207 -0.1,-0.445 0.053,-0.399 0.482,-0.022 0.533,0.685 z m -5.399,16.581 0.061,0.373 -0.154,0.001 -0.321,-0.104 -0.101,-0.159 -0.068,-0.039 -0.117,0.185 -0.188,0.009 -0.042,-0.062 0.074,-0.197 0.443,-0.372 0.083,-0.467 -0.006,-0.15 0.348,-0.035 0.082,0.057 0.037,0.064 -0.022,0.082 -0.141,0.154 -0.005,0.178 0.036,0.186 -0.115,0.09 0.06,0.16 0.056,0.046 z m 8.299,7.828 0.155,0.234 -0.298,0.102 -0.145,-0.085 -0.102,-0.107 -0.051,-0.151 0.161,0.016 0.139,-0.063 0.141,0.054 z",
                        title: "New Zealand",
                        id: "NZ",
                    },
                    {
                        d:
                            "m 632.89475,388.8674 -0.055,0.071 -0.081,0.007 -0.186,-0.061 -0.109,-0.141 0.021,-0.172 0.006,-0.318 0.053,-0.3 -0.015,-0.318 -0.144,-0.064 -0.101,0.018 0.235,-0.449 0.093,-0.069 0.087,0.029 0.217,-0.048 0.114,-0.244 0.091,-0.133 0.097,0.016 0.047,0.075 -0.034,0.371 -0.004,0.309 -0.12,0.944 -0.124,0.163 -0.063,0.132 -0.025,0.182 z m -0.046,1.283 -0.116,0.083 -0.083,-0.014 0.017,-0.165 0.05,-0.115 0.12,0.009 0.029,0.069 -0.017,0.133 z m -8.969,25.684 -0.17,-0.384 -0.17,-0.384 -0.171,-0.384 -0.17,-0.385 -0.119,-0.27 -0.2,-0.095 -0.122,-0.285 -0.124,-0.292 -0.124,-0.292 -0.124,-0.292 -0.124,-0.292 -0.125,-0.293 -0.124,-0.293 -0.124,-0.293 -0.124,-0.293 -0.125,-0.293 -0.124,-0.293 -0.124,-0.294 -0.124,-0.294 -0.124,-0.294 -0.125,-0.294 -0.124,-0.294 -0.124,-0.294 0.396,-0.139 0.482,-0.169 0.483,-0.169 0.482,-0.169 0.483,-0.169 0.482,-0.169 0.482,-0.17 0.483,-0.169 0.482,-0.169 0.483,-0.17 0.482,-0.17 0.482,-0.169 0.483,-0.17 0.482,-0.17 0.482,-0.17 0.483,-0.17 0.482,-0.17 0.299,-0.105 0.124,-0.396 0.103,-0.329 0.103,-0.329 0.103,-0.33 0.104,-0.33 0.103,-0.33 0.103,-0.33 0.103,-0.331 0.104,-0.331 0.103,-0.331 0.103,-0.331 0.103,-0.332 0.103,-0.332 0.104,-0.332 0.103,-0.332 0.103,-0.333 0.103,-0.333 0.095,-0.305 -0.178,-0.294 -0.238,-0.396 -0.25,-0.414 -0.234,-0.39 -0.171,-0.284 -0.206,-0.343 0.022,-0.441 -0.005,-0.221 0.021,-0.339 0.197,-0.471 0.233,-0.6 0.17,-0.399 0.147,-0.348 0.118,-0.279 0.065,-0.288 -0.035,-0.203 -0.077,-0.074 -0.065,-0.096 0.223,-0.154 0.418,-0.1 0.231,0.021 0.322,-0.074 0.256,-0.067 0.02,-0.09 -0.072,-0.152 -0.106,-0.222 -0.361,-0.023 -0.109,-0.062 0.126,-0.328 -0.005,-0.104 -0.048,-0.123 -0.053,-0.206 0.026,-0.266 0.074,-0.181 10e-4,-0.146 -0.035,-0.3 0.011,-0.267 0.076,-0.133 0.135,-0.124 0.127,-0.063 0.132,0.004 0.105,0.053 0.045,0.14 -0.028,0.097 -0.075,0.013 -0.026,0.041 0.107,0.187 0.155,0.183 0.12,-0.031 0.134,-0.144 0.142,-0.116 0.177,-0.103 0.129,-0.199 0.11,-0.129 0.098,-0.018 0.286,0.808 0.424,0.755 0.374,0.416 0.389,0.564 0.591,0.518 0.271,0.177 1.099,0.363 0.601,0.136 0.828,0.13 0.573,0.282 0.192,0.018 0.3,-0.084 0.219,0.007 0.548,0.384 0.161,0.364 0.228,0.192 0.201,0.302 0.131,0.316 0.463,0.481 0.326,0.541 0.332,0.4 0.297,0.249 0.45,0.098 0.358,0.112 0.04,0.267 -0.037,0.348 -0.068,0.257 -0.334,0.5 -0.08,0.308 -0.378,0.508 -0.41,0.851 -0.188,0.19 -0.661,0.438 -0.486,0.527 -0.576,0.914 -0.438,0.904 -0.168,0.289 -0.353,0.06 -0.231,-0.025 -0.16,-0.085 0.063,-0.247 0.038,-0.275 -0.213,0.029 -0.187,0.057 -0.437,0.675 -0.24,0.296 -0.051,0.375 -0.116,0.484 -0.171,0.445 -0.076,0.374 0.003,0.212 0.128,0.517 0.009,0.529 0.074,0.317 0.06,0.38 -0.205,0.117 -0.176,0.058 -0.696,0.042 -0.705,0.122 -0.616,0.22 -0.368,0.219 -0.479,0.489 -0.293,1.239 -0.469,0.522 -0.318,0.109 -0.765,0.046 -1.077,0.144 -0.378,0.125 -0.628,0.754 -0.049,0.237 0.121,0.171 0.04,0.189 -0.057,0.177 -0.285,0.477 -0.308,0.346 -0.82,0.217 -0.301,-0.129 -0.275,-0.065 -0.532,-0.007 -0.866,0.082 -0.319,0.256 -0.503,0.181 -0.464,0.279 -0.876,0.106 -0.601,0.225 z m 15.818,-10.5 -0.177,0.045 -0.051,-0.021 10e-4,-0.376 0.412,-0.474 0.271,-0.548 0.187,0.49 -0.325,0.274 -0.176,0.468 -0.142,0.142 z",
                        title: "Oman",
                        id: "OM",
                    },
                    {
                        d:
                            "m 257.74575,438.6914 -0.053,0.039 -0.155,0.222 -0.084,0.19 0.2,0.201 0.06,0.213 0.113,0.231 0.176,0.232 0.198,0.431 0.045,0.173 -0.056,0.112 -0.188,0.069 -0.176,0.201 -0.048,0.246 0.034,0.122 -0.526,0.393 -0.136,0.065 -0.09,-0.06 -0.112,-0.197 -0.134,-0.159 -0.072,-0.056 -0.042,-0.002 -0.042,0.037 -0.02,0.086 0.07,0.369 -0.058,0.149 -0.179,0.115 -0.205,0.6 -0.08,-0.076 -0.675,-0.808 -0.584,-1.001 -0.122,-0.454 0.151,-0.027 0.146,0.01 0.079,-0.07 0.091,-0.132 -0.074,-0.307 0.284,-0.233 0.107,-0.157 0.079,0.018 0.186,0.268 0.27,0.153 0.331,0.223 0.205,0.051 -0.259,-0.234 -0.448,-0.308 -0.125,-0.202 -0.118,-0.281 -0.175,0.122 -0.081,0.103 -0.091,0.058 -0.079,-0.07 -0.014,-0.091 -0.264,-0.018 -0.068,-0.083 -0.07,-0.046 0.032,0.176 0.052,0.108 -0.028,0.131 -0.086,0.009 -0.073,-0.135 -0.094,-0.123 -0.125,-0.512 -0.3,-0.241 -0.138,-0.081 -0.113,-0.03 -0.167,-0.164 -0.22,-0.087 -0.3,-0.255 -0.368,-0.183 -0.45,-0.064 -0.547,0.04 -0.184,0.102 -0.125,0.129 -0.058,0.06 -0.323,0.147 -0.122,0.213 -0.077,0.18 -0.161,0.204 0.184,0.123 -1.053,0.693 -0.208,0.101 -0.473,0.071 -0.109,0.074 -0.144,0.137 -0.02,0.208 0.022,0.177 0.137,0.137 0.123,0.086 0.293,0.412 0.521,0.52 0.099,0.189 0.081,0.281 -0.157,0.132 -0.122,0.056 -0.496,0.022 -0.171,0.112 -0.069,0.171 -0.185,0.14 -0.639,0.139 -0.502,0.016 -0.156,-0.16 -0.038,-0.451 -0.338,-0.77 -0.081,-0.531 -0.084,0.066 -0.179,0.062 -0.061,0.132 -0.045,0.391 -0.066,0.134 -0.138,-0.013 -0.284,-0.14 -0.378,-0.129 -0.481,-0.829 -0.052,-0.156 -0.094,-0.187 -0.372,-0.079 -0.317,-0.14 -0.346,-0.021 -0.177,0.079 -0.181,-0.1 -0.031,-0.228 -0.363,0.102 -0.466,-0.036 -0.417,-0.097 -0.285,0.052 -0.239,0.162 0.033,0.413 -0.07,0.082 -0.011,-0.169 -0.083,-0.194 -0.1,-0.161 -0.21,-0.167 -0.011,-0.061 0.083,-0.084 0.381,-0.242 0.047,-0.101 0.006,-0.21 -0.037,-0.201 -0.172,-0.296 0.098,-0.183 0.197,-0.147 0.202,-0.116 0.034,-0.049 -0.037,-0.101 -0.118,-0.109 -0.276,-0.185 -0.166,-0.012 -0.007,-0.533 0.008,-0.566 0.042,-0.056 0.101,-0.034 0.081,-0.086 0.045,-0.168 0.121,-0.06 0.218,0.129 0.223,0.114 0.092,-0.038 0.069,-0.056 0.049,-0.055 0.016,-0.052 0.178,0.151 0.363,0.268 0.021,0.131 -0.034,0.126 0.1,0.362 0.188,0.052 0.19,-0.07 0.047,0.067 -0.035,0.067 -0.098,0.075 -0.024,0.311 0.311,0.145 0.156,0.127 0.516,-0.06 0.19,0.034 0.13,-0.037 -0.144,-0.25 -0.193,-0.185 0.016,-0.083 0.146,0.062 0.112,0.126 0.254,0.156 0.467,0.542 0.536,0.131 0.424,-0.017 0.395,-0.073 0.629,-0.21 0.456,-0.38 0.363,-0.169 1.178,-0.361 0.418,-0.378 0.177,-0.049 0.168,-0.047 0.37,-0.286 0.199,-0.223 0.21,-0.112 0.623,0.081 0.404,0.105 0.279,-0.014 0.268,0.075 0.117,0.162 0.122,0.069 0.659,-0.018 0.54,0.08 1.183,0.48 0.708,0.475 0.375,0.504 0.904,0.648 z m -13.638,-2.04 -0.031,0.132 -0.217,-0.237 0.129,-0.039 0.046,0.005 0.073,0.139 z m 9.36,3.122 -0.056,0.119 -0.131,-0.266 0.021,-0.068 -0.009,-0.24 0.125,-0.063 0.092,-0.005 0.076,0.034 0.048,0.283 -0.04,0.128 -0.126,0.078 z m -0.469,0.057 -0.126,0.125 -0.048,-0.118 0.088,-0.123 0.031,-0.001 0.055,0.117 z m -7.122,2.593 -0.154,0.015 -0.314,-0.121 -0.23,-0.233 -0.019,-0.075 0.005,-0.078 0.125,-0.238 0.168,-0.082 0.066,10e-4 0.161,0.275 -0.109,0.106 0.044,0.17 0.228,0.126 0.029,0.134 z",
                        title: "Panama",
                        id: "PA",
                    },
                    {
                        d:
                            "m 278.53675,474.7414 -0.017,0.182 -0.09,0.073 -0.138,0.016 -0.212,-0.13 -0.155,0.033 -0.155,0.008 -0.218,-0.151 -0.075,-0.149 -0.171,-0.122 -0.354,0.049 -0.292,0.003 -0.244,-0.028 -0.219,0.041 -0.186,0.157 -0.139,0.184 -0.163,0.154 -0.479,0.103 -0.255,0.003 -0.229,0.101 -0.341,0.037 -0.233,0.09 -0.413,0.049 -0.495,0.047 -0.276,0.137 -0.11,0.06 -0.281,0.189 -0.489,0.298 -0.27,0.104 -0.326,0.323 -0.391,0.303 -0.254,0.161 -0.373,0.074 -0.155,0.082 -0.057,0.097 0.033,0.114 -0.064,0.292 -0.114,0.539 -0.031,0.265 -0.028,0.126 -0.247,0.434 -0.266,0.403 -0.131,0.267 -0.073,0.196 0.082,0.162 0.108,0.293 0.091,0.234 0.026,0.159 -0.032,0.182 -0.112,0.167 -0.177,0.109 -0.238,0.03 -0.49,0.293 -0.546,0.434 -0.179,0.202 -0.051,0.191 -0.079,0.298 0.033,0.155 0.097,0.106 0.098,0.253 0.008,0.131 -0.081,0.073 -0.155,0.016 -0.139,0.025 -0.106,0.065 -0.106,-0.016 -0.097,0.032 0,0.107 0.032,0.122 -0.016,0.131 -0.065,0.081 -0.057,0.057 0.057,0.082 0.097,0.074 0.147,0.122 0.204,0.237 0.155,0.041 0.13,0.082 0.016,0.13 -0.049,0.131 -0.114,0.057 -0.008,0.115 0.155,0.139 0.106,0.098 0.106,0.147 0.098,0.205 0,0.13 0.106,0.164 0.065,0.139 0,0.131 0.171,0.13 0.147,0.099 0.105,0.09 0.106,0.057 0.025,0.098 -0.014,0.149 0.152,0.246 0.279,0.184 0.226,0.267 0.146,0.194 0.271,0.312 0.01,0.358 -0.335,0.411 -0.336,0.412 0.549,-0.011 0.56,0.008 0.586,0.118 0.395,0.113 0.241,0.051 0.171,0.132 0.081,0.205 0.065,0.168 0.017,0.242 0.244,0.197 -0.017,0.188 -0.007,0.265 0.108,0.004 0.717,0.001 0.784,10e-4 0.754,-0.049 0.285,-0.064 0.344,-0.322 0.207,-0.095 0.199,-0.15 0.242,-0.274 0.192,-0.123 0.162,-0.152 0.241,-0.152 0.1,-0.112 0.082,-0.041 0.187,-0.074 -0.081,0.148 -0.063,0.151 -0.019,0.218 0.089,0.238 -0.074,0.178 -0.121,0.159 -0.002,0.419 -0.002,0.594 -0.003,0.509 -0.003,0.638 -0.003,0.723 -0.002,0.481 0.128,-0.095 0.178,-0.085 0.231,0.221 0.165,0.096 0.141,0.023 0.145,-0.007 0.197,-0.047 0.432,-0.185 0.296,-0.149 0.339,0.01 0.465,0.058 0.268,-0.006 0.351,0.616 0.257,0.452 0.293,0.515 0.235,0.415 0.358,0.63 0.309,0.545 0.33,0.581 0.375,0.661 -0.121,0.168 -0.098,0.134 0.011,0.227 -0.148,0.121 -0.157,0.073 -0.185,0.192 -0.126,0.165 -0.006,0.237 0.024,1.202 -0.031,0.327 -0.096,0.281 -0.099,0.142 -0.06,0.112 0.143,0.279 0.137,0.562 0.104,0.112 0.128,0.229 0.058,0.217 -0.026,0.083 -0.257,0.103 -0.092,0.088 -0.024,0.323 -0.111,0.116 -0.188,0.152 -0.121,0.174 -0.102,0.121 -0.1,0.07 -0.049,0.213 -0.067,0.216 -0.234,0.143 -0.04,0.265 -0.003,0.219 0.124,0.219 0.403,0.461 0.041,0.11 -0.23,0.278 -0.133,0.193 -0.328,0.59 -0.006,0.108 0.081,0.279 0.489,1.196 0.083,0.097 0.151,0.114 0.247,-0.013 0.373,0.129 0.181,0.148 0.017,0.073 -0.042,0.049 -0.197,0.099 -0.219,0.13 -0.076,0.123 -0.015,0.195 0.05,0.289 -0.095,0.094 -0.219,0.112 -0.189,0.162 -0.189,0.269 -0.321,0.41 -0.111,0.112 -0.048,0.142 -0.183,0.047 -0.341,0.279 -0.058,0.141 0.055,0.134 0.175,0.113 0.117,0.163 0.031,0.209 0,0.13 0,0.004 -0.212,0.196 -0.276,0.225 -0.34,0.044 -0.129,0.113 0.029,0.239 0.11,0.337 -10e-4,0.264 -0.104,0.302 -0.243,0.331 -0.372,0.228 -0.351,0.122 -0.276,10e-4 -0.267,0.024 -0.114,0.035 -0.206,-0.2 -0.915,-0.661 -0.348,-0.353 -0.323,-0.165 -0.787,-0.566 -0.078,-0.181 -0.097,-0.581 -0.102,-0.163 -0.271,-0.21 -0.679,-0.279 -0.264,-0.139 -0.276,-0.254 -0.406,-0.18 -0.442,-0.369 -0.263,-0.294 -0.295,-0.195 -0.916,-0.272 -0.459,-0.273 -0.859,-0.385 -0.383,-0.245 -0.919,-0.298 -0.273,-0.142 -0.904,-0.697 -0.634,-0.228 -0.511,-0.391 -1.542,-0.831 -0.242,-0.266 -0.236,-0.41 -0.342,-0.244 -0.385,-0.561 -0.572,-0.33 -0.551,-0.437 -0.203,-0.397 -0.366,-0.505 -0.108,-0.269 -0.32,-0.27 -0.022,-0.531 -0.223,-0.244 0.16,-0.121 0.169,-0.053 0.211,-0.825 -0.111,-0.413 -0.572,-0.749 -0.21,-0.359 -0.149,-0.46 -0.229,-0.273 -0.34,-0.575 -0.208,-0.509 -0.454,-0.369 -0.124,-0.133 -0.069,-0.188 -0.253,-0.133 -0.013,-0.39 -0.176,-0.74 -0.252,-0.373 -0.907,-0.696 -0.015,-0.268 -0.072,-0.487 -0.202,-0.527 -1.009,-1.634 -0.253,-0.486 -0.252,-0.789 -0.227,-0.447 -0.25,-0.796 -0.377,-0.605 -0.238,-0.524 -0.252,-0.651 -0.022,-0.348 -0.458,-0.598 -0.243,-0.548 -0.427,-0.459 -0.417,-0.349 -0.181,-0.247 -0.594,-1.172 -0.081,-0.347 -0.404,-0.644 -0.401,-0.462 -0.253,-0.373 -0.324,-0.335 -1.968,-1.031 -0.693,-0.428 -0.234,-0.204 -0.108,-0.321 0.045,-0.188 0.203,-0.176 0.281,0.136 0.172,-0.057 0.134,-0.229 0.003,-0.347 -0.172,-0.447 -0.631,-0.863 0.048,-0.183 0.119,-0.207 -0.243,-0.415 -0.265,-0.333 -0.133,-0.255 0.15,-0.971 0.144,-0.246 0.954,-0.985 0.262,-0.421 0.41,-0.26 0.418,-0.397 0.503,-0.302 0.073,0.052 0.07,0.051 0.004,0.102 0.019,0.088 0.056,0.083 0.005,0.152 0.065,0.102 0.004,0.115 0.005,0.157 -0.033,0.079 0.032,0.136 0.108,0.252 -0.042,0.078 -0.102,0.051 -0.102,0.07 -0.102,0.157 -0.154,-0.005 -0.222,-0.069 -0.149,0.087 -0.055,0.167 0.046,0.139 0.014,0.129 0.097,0.111 0.283,0.009 -0.255,0.356 -0.125,0.162 0.027,0.102 0.153,0.087 0.114,0.006 0.253,-0.13 0.172,-0.19 0.097,-0.106 0.163,-0.042 0.213,0.088 0.283,0.176 0.33,0.155 0.135,0.085 0.242,-0.024 0.203,-0.036 0.171,0.128 0.173,0.108 0.04,0.367 0.129,0.268 0.158,0.206 0.192,0.246 0.177,0.083 0.228,0.002 0.31,0.091 0.121,-0.06 0.106,-0.172 0.056,-0.097 0.158,-0.042 0.014,-0.11 -0.033,-0.135 0.052,-0.157 0.129,-0.139 0.332,-0.202 0.16,-0.085 0.033,-0.124 0.06,-0.167 -0.023,-0.092 -0.067,-0.115 0.016,-0.163 0.088,-0.217 0.125,-0.254 0.108,-0.324 0.041,-0.152 0.116,-0.097 0.044,-0.14 0.063,-0.165 0.143,-0.185 -0.004,-0.199 0.06,-0.088 0.005,-0.222 0.143,-0.456 0.005,-0.095 0.063,-0.025 0.109,0.029 0.094,0.104 0.029,0.102 0.039,0.046 0.089,-0.009 0.102,-0.058 -0.007,-0.092 -0.074,-0.09 -0.021,-0.054 0.032,-0.085 0.155,-0.185 0.169,-0.215 0.363,-0.447 0.219,-0.182 0.565,-0.193 0.429,-0.147 0.41,-0.14 0.558,-0.201 0.788,-0.284 0.565,-0.204 0.505,-0.364 0.391,-0.282 0.334,-0.243 0.424,-0.31 0.574,-0.668 0.396,-0.461 0.288,-0.337 0.2,-0.213 0.159,-0.599 0.182,-0.683 0.08,-0.304 0.035,-0.106 0.078,0.045 0.09,0.074 0.109,0.003 0.103,-0.003 0.065,-0.042 -0.096,-0.682 0.014,-0.149 0.054,-0.178 -0.011,-0.096 -0.174,-0.136 -0.279,-0.273 -0.116,-0.243 -0.07,-0.204 -0.195,-0.135 -0.201,-0.118 0.017,-0.097 0.119,0 0.302,0.095 0.218,-0.03 0.162,-0.011 0.158,-0.1 0.168,-0.18 0.113,0 0.129,0.024 0.235,0.185 0.139,0.109 0.168,0.09 0.158,0.032 0.144,0.01 0.101,-0.008 0.059,0.123 0.07,0.151 0.179,0.102 0.212,0.097 0.171,0.167 0.116,0.112 0.137,0.132 0.133,0.176 0.12,0.309 0.061,0.21 0.069,0.116 -0.016,0.118 0.142,0.215 0.105,0.119 0.184,0.076 0.355,0.086 0.19,0.194 0.168,0.075 0.178,0.2 0.158,0.059 0.2,-0.011 0.2,0.097 0.152,0.189 0.098,0.237 0.152,0.134 0.075,0.243 -0.086,0.285 0.081,0.151 0.157,0.124 0.255,0.129 0.233,-0.032 0.119,0.043 0.076,0.118 0.043,0.141 0.102,0.342 0.053,0.217 -0.095,0.21 -0.035,0.146 0.052,0.194 0.242,0.095 0.22,0.077 0.136,0.151 0.152,0.041 0.213,-0.009 0.272,-0.037 0.152,-0.087 0.097,-0.026 0.109,0.038 0.242,0.083 0.294,0.094 0.267,-0.054 0.231,-0.025 0.229,-0.055 0.232,-0.157 0.196,0.006 0.145,-0.106 0.183,-0.17 0.181,-0.171 0.141,-0.038 0.228,0.082 0.314,0.118 0.178,0.153 0.136,0.04 0.142,0.113 0.272,0.002 0.291,-0.061 0.233,-0.188 0.241,-0.055 0.165,-0.053 0.152,0.032 0.587,0.345 0.161,0.178 0.202,0.035 0.166,0.097 0.277,0.105 0.152,0.108 0.194,0.065 0.142,0.15 0.223,0.093 0.194,0.051 0.087,0.122 0,0.081 -0.026,0.054 -0.205,0.318 -0.402,0.623 -0.362,0.561 -0.569,0.884 -0.317,0.494 0.081,0.021 0.495,0.216 0.123,0.008 0.181,-0.055 0.118,-0.086 0.111,-0.012 0.116,0.083 0.163,0.107 0.117,0.315 0.087,0.154 0.204,0.117 0.218,0.195 z",
                        title: "Peru",
                        id: "PE",
                    },
                    {
                        d:
                            "m 81.782748,487.8634 -0.275,0.066 -0.131,-0.012 -0.099,-0.23 0.036,-0.142 0.044,-0.045 0.468,0.056 0.04,0.104 -0.007,0.099 -0.076,0.104 z m 1.45,0.084 -0.182,0.022 -0.03,-0.14 0.056,-0.074 0.078,-0.035 0.139,0.043 0.073,0.061 -0.004,0.052 -0.13,0.071 z m -1.458,1.372 -0.061,0.052 -0.114,-0.169 -0.018,-0.071 0.206,-0.088 0.112,0.046 -0.125,0.23 z m 2.951,0.761 0.42,0.147 0.132,-0.016 -0.134,0.145 -0.419,0.079 -0.139,0.07 -0.169,-0.045 -0.091,-0.168 0.4,-0.212 z m -0.1,0.669 -0.208,0.221 0,-0.235 0.075,-0.031 0.068,0 0.065,0.045 z m 1.147,1.654 -0.103,0.048 -0.007,-0.303 0.133,0.058 0.052,0.049 -0.022,0.083 -0.053,0.065 z m -17.962,15.303 -0.018,0.131 -0.053,-0.126 -0.173,-0.202 -0.064,-0.09 0.077,0.014 0.231,0.273 z m 7.127,0.697 -0.05,0.031 0.064,-0.23 0.072,-0.029 -0.086,0.228 z m -8.349,0.678 0.013,0.05 -0.058,-0.003 -0.104,-0.147 -0.037,-0.127 -0.066,-0.145 -0.091,-0.105 -0.01,-0.097 -0.003,-0.153 0.103,0.234 0.098,0.188 0.071,0.154 0.084,0.151 z m -16.783,0.954 -0.051,0.022 -0.054,-0.053 -0.023,-0.081 0.019,-0.131 0.136,0.086 0.054,0.058 -0.081,0.099 z m 22.159,-0.067 -0.111,0.017 -0.271,-0.173 0.104,0 0.155,0.108 0.123,0.048 z m 0.366,-0.043 0.153,0.143 -0.203,-0.098 -0.258,-0.042 0.098,-0.026 0.143,0.004 0.067,0.019 z m -22.365,0.751 -0.111,0.004 -0.101,-0.045 0.025,-0.3 0.027,-0.062 0.156,0.101 0.131,0.262 -0.127,0.04 z m 4.48,1.949 -0.088,0.076 -0.117,-0.054 -0.052,-0.073 -0.019,-0.078 0.027,-0.093 0.262,0.013 0.074,0.041 -0.087,0.168 z m 1.38,0.424 0.404,0.136 0.075,0.221 -0.086,0.147 -0.204,-0.036 -0.101,-0.081 -0.142,-0.264 -0.395,0.06 -0.273,-0.052 -0.151,-0.344 -0.006,-0.156 0.066,-0.095 0.29,-0.104 0.362,0.076 0.138,0.195 0.023,0.297 z m 23.89,0.488 0.014,0.056 -0.102,-0.007 -0.03,-0.019 0.002,-0.104 0.074,-0.126 0.058,-0.106 0.118,-0.099 0.211,-0.099 0.102,-0.042 0.033,0.023 -0.039,0.015 -0.349,0.208 -0.109,0.146 -0.048,0.102 0.009,0.032 0.056,0.02 z m -0.058,0.976 0.02,0.081 -0.105,-0.054 -0.099,-0.149 -0.177,-0.185 -0.042,-0.076 0.136,0.072 0.089,0.108 0.178,0.203 z m 10.828,0.449 0.001,0.055 -0.27,-0.281 0.106,0.022 0.163,0.204 z m -10.422,0.111 0.038,0.107 -0.068,-0.05 -0.217,-0.104 -0.024,-0.087 0.271,0.134 z m 12.324,0.484 -0.057,0.064 -0.005,-0.062 -0.079,-0.03 -0.109,-0.063 -0.148,-0.072 -0.08,-0.012 -0.04,-0.042 0.056,-0.022 0.091,0.033 0.128,0.066 0.148,0.066 0.095,0.074 z m -6.207,6.854 -0.082,0.056 0.03,-0.076 -0.063,-0.166 -0.062,-0.024 0.062,-0.047 0.088,0.125 0.027,0.132 z",
                        title: "French Polynesia",
                        id: "PF",
                    },
                    {
                        d:
                            "m 905.79275,495.1324 0.469,0.149 0.159,0.165 -0.169,0.075 -0.41,0.051 -0.096,-0.101 -0.394,-0.102 -0.063,-0.184 -0.196,0.063 0.1,-0.129 -0.247,-0.146 -0.077,-0.195 -0.01,-0.079 0.29,0.091 0.644,0.342 z m 2.09,-0.326 -0.041,0.155 -0.103,-0.052 -0.305,0.08 -0.16,-0.018 -0.092,-0.139 -0.022,-0.064 0.265,0.05 -0.044,-0.154 0.382,0.079 0.12,0.063 z m -9.492,-2.261 -0.04,0.222 -0.23,-0.066 -0.047,-0.048 0.038,-0.14 0.204,-0.006 0.075,0.038 z m 0.511,-1.545 0.119,0 0.199,-0.211 0.173,-0.064 0.113,0.096 -0.184,0.674 -0.155,-0.102 -0.607,-0.188 -0.019,-0.267 -0.158,-0.086 -0.098,-0.26 -0.201,-0.288 -0.038,-0.185 0.114,0.076 0.128,0.188 0.531,0.386 -0.021,0.125 0.104,0.106 z m -1.551,-1.905 0.396,0.231 0.217,-0.067 0.118,0.038 0.254,0.268 0.014,0.196 0.041,0.168 -0.013,0.074 -0.141,0.1 0.013,-0.114 -0.108,-0.022 -0.369,0.005 -0.286,-0.071 -0.394,-0.019 0.166,-0.178 0.037,-0.073 -0.207,-0.286 -0.009,-0.136 0.017,-0.075 0.173,-0.041 0.081,0.002 z m -0.513,0.416 -0.039,0.07 -0.164,-0.051 -0.458,-0.391 0.071,-0.29 0.206,-0.15 0.313,0.164 0.104,0.24 0.031,0.134 -0.064,0.274 z m 6.415,-1.51 0.163,0.042 0.339,-0.021 0.112,0.162 0.155,0.056 0.134,0.073 0.119,0.106 -0.001,0.065 -0.028,0.056 -0.072,0.051 0.021,0.114 -0.124,-0.017 -0.154,0.06 -0.304,-0.133 -0.11,-0.03 -0.033,-0.114 -0.197,-0.191 -0.345,-0.137 0.174,-0.112 0.151,-0.03 z m -25.373,-0.919 0.051,0.124 -0.408,-0.169 -0.39,-0.283 -0.197,-0.077 -0.132,-0.187 0.242,0.139 0.422,0.13 0.412,0.323 z m 21.095,0.282 0.048,0.202 -0.219,-0.216 0.098,-0.244 0.017,-0.132 -0.011,-0.074 -0.219,-0.126 0.116,-0.206 0.123,-0.07 0.077,-0.02 -0.004,0.291 0.063,0.13 -0.089,0.465 z m -21.105,-0.71 -0.122,0.009 -0.495,-0.191 -0.126,-0.139 0.579,0.031 0.149,0.035 0.031,0.195 -0.016,0.06 z m 12.458,-7.462 -0.113,0.021 -0.049,-0.127 -0.263,-0.11 -0.262,-0.342 0.004,-0.293 0.034,-0.084 0.146,-0.004 0.584,0.338 0.061,0.108 -0.044,0.321 -0.098,0.172 z m 22.261,2.413 -0.068,0.263 -0.052,0.045 -0.064,-0.099 -0.244,0.096 -0.116,0.109 -0.124,0.08 -0.286,-0.02 -0.271,-0.072 -0.263,-0.133 -0.233,-0.171 -0.234,-0.269 -0.146,-0.278 0.072,-0.323 -0.091,-0.292 -0.442,-0.207 -0.097,-0.067 -0.196,-0.29 -0.195,-0.126 -0.249,-0.254 -0.063,-0.11 -0.106,-0.322 -0.034,-0.194 0.09,-0.565 -0.033,-0.282 0.121,0.027 0.129,0.111 0.146,0.077 0.355,0.052 0.271,0.225 0.261,0.439 0.031,0.144 0.083,0.104 0.268,0.187 0.14,0.12 0.265,0.479 0.146,0.102 0.174,0.041 0.161,0.069 0.269,0.21 0.248,0.238 0.167,0.25 0.128,0.268 0.082,0.338 z m -24.645,-3.518 -0.157,0.016 -0.256,-0.266 -0.065,-0.099 0.025,-0.139 0.326,-0.186 0.211,0.17 0.044,0.364 -0.128,0.14 z m 20.967,0.002 -0.056,0.022 -0.122,-0.354 -0.021,-0.262 -0.037,-0.193 -0.064,-0.115 0.184,-0.212 0.076,-0.059 0.139,0.112 0.021,0.249 0.106,0.211 -0.081,0.461 -0.145,0.14 z m -24.214,-1.977 -0.188,0.083 -0.135,-0.063 -0.058,-0.184 0.046,-0.177 0.165,-0.14 0.104,-0.042 0.117,0.095 0.045,0.188 -0.096,0.24 z m 16.548,-1.201 0.146,0.056 0.42,-0.292 0.225,0.204 0.287,0.099 0.298,0.056 -0.118,0.42 0.035,0.194 0.077,0.193 -0.01,0.285 -0.137,0.254 -0.263,0.371 -0.118,0.068 -0.138,0.04 -0.43,0.03 -0.083,0.197 0.028,0.209 0.232,0.274 0.186,0.308 -0.185,0.283 -0.305,0.198 -0.289,0.101 -0.479,-0.06 -0.505,0.025 -0.095,0.108 -0.002,0.179 -0.071,0.136 -0.092,0.124 -0.256,0.257 -0.287,0.227 -0.391,0.215 -0.131,0.051 -0.347,0.034 -0.311,0.124 -0.139,0.121 -0.151,0.098 -0.33,0.107 -0.321,0.212 -0.127,0.036 -0.667,0.037 -0.954,0.01 -0.282,0.022 -0.274,-0.029 -0.151,-0.083 -0.324,-0.381 -0.282,-0.131 -0.308,0.004 -0.41,0.135 -0.077,-0.03 -0.818,-0.563 -0.248,-0.138 -0.265,-0.102 -0.323,-0.072 -0.305,-0.113 -0.18,-0.268 0.021,-0.349 0.245,-0.205 0.373,0.101 0.143,-0.001 0.14,-0.058 0.165,0.019 0.166,0.051 0.605,-0.076 0.35,0.106 0.341,0.142 0.318,0.03 0.327,-0.03 0.438,-0.16 0.139,0.021 0.422,10e-4 0.369,-0.214 0.138,-0.863 0.094,-0.294 0.126,-0.064 0.09,0.018 0.135,0.147 -0.173,0.183 -0.076,0.141 -0.025,0.344 0.095,0.334 0.216,0.265 0.324,0.034 0.297,-0.175 0.323,-0.037 0.298,0.17 0.306,-0.029 0.14,-0.111 0.163,-0.048 0.162,-0.018 0.147,-0.066 0.195,-0.289 0.13,-0.325 0.194,-0.256 0.529,-0.427 0.153,-0.053 0.165,-0.029 0.372,0.019 0.277,-0.152 0.021,-0.342 -0.04,-0.347 -0.316,-0.815 -0.021,-0.129 0.045,-0.145 0.092,-0.13 0.311,-0.002 0.324,0.047 0.128,0.123 0.144,0.103 z m 4.893,-0.552 -0.025,0.066 -0.165,-0.076 0.136,-0.143 0.065,-0.01 -0.011,0.163 z m -2.774,-2.698 -0.068,0.245 -0.172,-0.144 -0.117,-0.207 0.074,-0.092 0.193,-0.055 0.09,0.253 z m -1.604,-0.519 -0.03,0.141 -0.088,-0.008 -0.241,-0.276 -0.047,-0.072 0.057,-0.069 0.28,0.203 0.069,0.081 z m -0.398,-0.328 -0.067,0 -0.01,-0.223 0.046,-0.117 0.156,0.082 0.026,0.199 -0.151,0.059 z m -21.99,2.751 0.354,0.008 0.355,-0.043 0.146,0.019 0.144,0.044 0.131,0.084 0.066,0.161 0.221,0.224 0.312,0.101 0.297,0.203 0.267,0.242 0.196,0.244 0.223,0.206 0.337,0.087 0.355,0.014 1.214,1.225 0.059,0.189 0.014,0.804 -0.134,0.628 0.302,0.193 0.412,0.072 0.578,0.134 0.556,0.2 1.771,0.848 0.243,0.072 0.357,0.028 0.36,-0.012 0.129,0.043 0.27,0.154 0.135,0.101 0.242,0.274 0.216,0.298 0.093,0.085 0.109,0.066 0.063,0.162 0.084,0.5 -0.025,0.312 -0.099,0.116 -0.283,0.056 -0.992,0.053 -0.664,-0.058 -0.465,0.315 -0.013,0.138 0.033,0.128 0.404,0.669 0.238,0.594 0.197,0.241 0.295,0.196 0.263,0.232 0.242,0.267 0.503,0.465 0.273,0.173 0.321,0.106 0.534,0.361 0.071,0.159 0.152,0.502 0.066,0.341 0.01,0.141 0.038,0.126 0.47,0.31 0.104,0.086 0.209,0.688 0.161,0.32 0.271,0.113 0.315,-0.007 0.857,-0.205 0.124,-0.007 0.159,0.047 0.139,0.112 0.046,0.31 -0.135,0.326 -0.037,0.313 0.169,0.257 0.437,0.2 0.16,0.055 0.786,0.064 0.309,0.054 0.303,0.087 0.104,0.078 -0.073,0.138 -0.158,0.068 -0.18,0.027 -0.289,0.1 0.005,0.178 0.163,0.185 0.149,0.223 0.125,0.081 0.136,0.055 0.34,0.077 0.331,0.106 0.218,0.105 0.225,0.076 0.49,0.048 0.36,0.143 0.512,-0.06 -0.443,0.232 -0.153,0.057 -0.535,-0.087 -0.101,0.09 0.221,0.246 0.327,0.165 0.117,0.096 -0.082,0.112 -0.381,0.225 -0.159,0.033 -0.297,0.018 -0.498,-0.097 -0.353,-0.124 -0.099,-0.169 -0.094,-0.099 -0.318,-0.238 -0.227,-0.13 -0.288,-0.044 -0.301,0.002 -0.538,-0.138 -1.167,-0.098 -0.278,-0.06 -0.35,-0.19 -0.165,-0.027 -0.177,0.06 -0.451,0.037 -0.132,-0.017 -0.322,-0.162 -0.331,-0.06 -0.139,0.049 -0.14,0.011 -0.453,-0.116 -0.341,-0.049 -0.28,-0.162 -0.152,-0.151 -0.172,-0.134 -0.159,-0.345 -0.247,-0.327 -0.308,-0.269 -0.658,-0.434 -0.132,-0.108 -0.258,-0.397 0.014,-0.264 0.094,-0.266 -0.142,0.091 -0.16,-0.012 -0.448,-0.176 -0.185,-0.209 -0.299,-0.568 -0.191,-0.3 -0.447,-0.53 -0.129,-0.314 -0.188,-0.275 -0.115,-0.102 -0.096,-0.118 -0.085,-0.153 -0.127,-0.106 -0.624,-0.235 -0.109,-0.074 -0.121,-0.039 -0.464,-0.024 -0.269,-0.039 -0.506,-0.193 -0.262,-0.058 -0.314,-0.037 -0.305,-0.073 -0.148,-0.072 -0.1,-0.121 -0.059,-0.287 -0.256,0.031 -0.25,-0.05 -0.242,-0.101 -0.247,-0.061 -0.169,0.087 -0.052,0.229 -0.078,0.012 -0.145,-0.047 -0.072,0.028 -0.157,0.105 -0.125,0.143 -0.232,-0.022 -0.475,-0.144 -0.212,-0.09 -0.18,-0.163 -0.154,-0.185 -0.156,-0.146 -0.192,-0.106 0.244,0.252 0.563,1.109 -0.141,0.021 -0.145,-0.028 0.133,0.213 -0.153,0.032 -0.152,-0.002 -0.32,-0.092 -0.318,-0.031 -0.094,0.045 0.067,0.08 0.112,0.236 0.089,0.247 -0.46,0.111 -0.472,0.068 -0.525,0.133 -0.531,0.009 -0.272,-0.076 -0.279,-0.043 -0.264,0.043 -0.255,0.097 -0.215,-0.016 -0.136,-0.174 -0.063,-0.131 -0.081,-0.114 -0.201,0.018 -0.194,0.062 0.332,0.007 0.1,0.146 0.086,0.176 0.235,0.16 0.283,-0.095 0.623,0.026 0.605,0.279 0.144,0.032 0.132,0.055 0.312,0.275 0.235,0.25 0.198,0.286 0.042,0.112 -0.014,0.3 -0.06,0.149 -0.391,0.211 -0.417,0.16 -0.615,0.311 -0.595,0.354 -0.313,-0.069 -0.282,-0.188 -0.109,-0.051 -0.291,-0.102 -0.177,-0.037 -0.704,0.08 -0.705,0.041 -0.298,-0.003 -0.288,-0.06 -0.317,-0.111 -0.314,0.049 -0.215,0.13 -0.235,0.02 -0.44,-0.29 -0.001,-0.037 0,-0.574 0,-0.573 0,-0.573 -10e-4,-0.573 0,-0.573 0,-0.572 0,-0.572 0,-0.572 -10e-4,-0.572 0,-0.571 0,-0.47 -0.156,-0.183 -0.16,-0.281 0.034,-0.361 0.194,-0.446 0.087,-0.298 0,-0.243 0,-0.57 0,-0.57 -10e-4,-0.57 0,-0.569 0,-0.569 0,-0.569 0,-0.569 -0.001,-0.569 0,-0.568 0,-0.568 0,-0.568 0,-0.568 -10e-4,-0.568 0,-0.568 0,-0.568 -10e-4,-0.567 0,-0.567 0,-0.342 0,-0.188 0,-0.011 0.084,0.001 0.284,0.003 0.228,0.046 1.406,0.606 0.42,0.243 0.144,0.057 0.141,0.002 0.135,0.028 0.634,0.335 0.947,0.338 1,0.324 0.31,0.068 0.321,0.028 0.696,0.112 0.367,0.1 0.537,0.397 0.271,0.123 0.254,0.224 0.359,0.241 0.142,0.061 0.156,0.032 z m 24.82,2.631 -0.208,0.213 -0.129,-0.199 -0.166,-0.174 -0.131,-0.178 -0.167,-0.384 -0.008,-0.193 0.044,-0.205 0.01,-0.207 -0.08,-0.42 -0.196,-0.383 -0.681,-0.913 -0.214,-0.239 -0.245,-0.214 -0.157,-0.052 -0.317,-0.051 -0.141,-0.043 -0.262,-0.149 -0.243,-0.173 -0.603,-0.515 -0.318,-0.146 -0.168,-0.18 -0.949,-0.58 -0.277,-0.137 -0.338,0 -0.285,-0.114 0.226,-0.072 0.047,-0.194 -0.05,-0.197 0.477,0.322 0.503,0.281 0.146,0.227 0.248,0.014 0.451,0.188 0.31,0.169 0.292,0.195 0.329,0.279 0.634,0.219 0.09,0.08 0.321,0.364 0.421,0.309 0.144,0.17 1.785,1.463 0.302,0.41 0.023,0.28 -0.059,0.11 -0.188,0.237 0.003,0.28 -0.063,0.251 -0.163,0.251 z m -7.098,-5.852 -0.56,0.038 -0.201,-0.042 -0.18,-0.161 -0.163,-0.251 -0.164,-0.059 -0.066,-0.049 0.396,-0.192 0.351,-0.058 0.567,0.24 0.058,0.12 0.005,0.078 -0.016,0.255 -0.027,0.081 z m -7.184,-1.056 -0.091,0.147 -0.212,-0.013 -0.094,-0.043 0.153,-0.028 0.062,-0.121 0.066,-0.043 0.116,0.101 z m -2.272,-0.901 0.936,0.181 0.062,-0.002 -0.011,-0.065 0.016,-0.018 0.056,0.047 -0.018,0.132 -0.147,0.033 -0.138,-0.013 -0.098,0.069 -0.268,0.255 -0.18,-0.042 -0.22,0.057 -0.386,0.005 -0.501,-0.112 -0.138,0.095 -0.178,-0.026 -0.177,0.104 -0.073,-0.005 -0.043,-0.152 0.003,-0.078 0.21,-0.065 -0.031,-0.239 0.169,-0.12 0.292,0.01 0.272,-0.081 0.591,0.03 z m 7.573,-1.136 -0.007,0.101 -0.202,-0.051 -0.056,0.016 -0.352,-0.292 0.006,-0.178 0.093,-0.152 0.146,0.024 0.259,0.191 0.113,0.341 z",
                        title: "Papua New Guinea",
                        id: "PG",
                    },
                    {
                        d:
                            "m 816.94475,403.6574 -0.136,0.243 -0.109,-0.002 0.016,-0.136 0.145,-0.282 0.054,0.006 0.03,0.171 z m 0.23,1.24 -0.052,0.036 -0.077,-0.017 0.076,-0.281 0.141,-0.077 0.112,0.03 -0.2,0.309 z m -1.233,2.978 0.029,0.268 -0.166,-0.006 -0.25,-0.163 -0.023,-0.083 0.004,-0.069 0.044,-0.059 0.362,0.112 z m -0.754,0.825 -0.016,0.199 -0.142,-0.105 -0.031,-0.149 0.014,-0.111 0.065,-0.132 0.089,0.12 0.021,0.178 z m 1.879,0.554 -0.178,0.212 -0.093,-0.059 0.1,-0.206 -0.003,-0.072 0.082,-0.161 0.152,-0.056 0.125,0.159 -0.185,0.183 z m -2.302,0.823 0.43,0.153 0.95,0.55 0.347,0.136 0.362,0.102 0.285,0.03 0.256,-0.126 0.107,-0.128 0.196,-0.338 0.209,-0.042 0.124,0.123 0.097,0.165 0.043,0.242 -0.06,0.253 -0.199,0.227 -0.122,0.272 -0.08,0.902 0.004,0.27 0.064,0.26 0.173,0.412 0.09,0.116 0.262,0.147 0.071,0.111 0.015,0.2 0.041,0.176 0.17,0.067 0.144,0.088 -0.054,0.195 -0.09,0.198 -0.118,0.488 -0.562,1.128 -0.032,0.243 -0.222,0.484 -0.451,0.078 -0.521,0.234 -0.29,0.182 -0.253,0.236 -0.096,0.309 0.082,0.141 0.053,0.151 -0.006,0.163 -0.078,0.135 -0.251,0.329 -0.106,0.269 -0.112,0.121 -0.055,0.146 0.019,0.167 0.101,0.146 0.306,0.627 0.328,0.605 0.07,0.07 0.027,0.081 -0.193,0.16 0.004,0.29 0.058,0.288 0.29,0.712 0.041,0.19 0.096,0.156 0.148,0.146 0.163,0.123 0.472,0.21 0.182,0.042 0.189,0.007 0.047,-0.142 0.165,-0.048 -0.036,-0.139 -0.202,-0.193 -0.008,-0.104 0.106,-0.078 0.126,-0.045 0.284,-0.21 0.301,-0.168 0.383,0.014 0.375,0.094 0.267,0.098 0.22,0.18 0.226,0.312 0.158,0.345 -10e-4,0.164 -0.038,0.165 0.008,0.163 0.118,0.111 0.363,0.008 0.185,-0.256 0.023,-0.288 -0.13,-0.111 0.06,-0.142 0.111,-0.106 0.161,0.095 0.153,0.179 0.563,0.195 0.144,0.004 0.117,0.037 0.252,0.135 0.118,0.108 -0.145,0.224 -0.559,0.05 -0.162,0.168 0.165,0.337 0.268,0.277 0.172,0.224 0.152,0.241 -0.007,0.223 -0.089,0.232 0.246,-0.018 0.231,0.049 0.32,0.194 0.1,0.02 0.106,-0.031 -0.015,0.7 -0.218,0.641 -0.275,-0.08 -0.235,-0.271 0.048,-0.33 0.15,-0.319 -0.086,-0.067 -0.151,0.026 -0.173,0.072 -0.187,0.025 -0.307,-0.042 -0.63,-0.347 -0.256,-0.032 -0.058,-0.157 0.014,-0.333 -0.251,-0.396 -0.04,-0.142 -0.08,-0.111 -0.749,-0.431 -0.092,-0.073 -0.23,-0.344 -0.522,-0.49 -0.146,-0.05 -0.159,-0.014 -0.052,0.124 0.072,0.191 0.029,0.164 -0.011,0.172 0.021,0.133 0.247,0.272 0.037,0.128 0.165,0.349 0.02,0.408 -0.211,0.169 -0.237,-0.188 -0.008,-0.154 -0.041,-0.143 -0.255,-0.371 -0.086,-0.08 -0.48,-0.366 -0.372,-0.402 -0.827,-0.429 -0.099,-0.023 -0.144,0.032 -0.135,0.053 -0.4,0.212 -0.141,0.147 -0.013,0.227 -0.287,0.18 -0.395,0.025 -0.303,-0.113 -0.251,-0.226 -0.207,-0.011 -0.257,-0.353 -0.313,-0.045 -0.259,0.276 -0.055,-0.548 -0.002,-0.554 0.072,-0.162 0.129,-0.135 0.655,-0.582 0.083,-0.187 -0.028,-0.25 -0.149,-0.204 -0.235,-0.124 -0.271,-0.052 -0.195,-0.114 -0.153,-0.188 -0.104,0.333 0.101,0.494 0.017,0.321 -0.093,0.121 -0.168,0.003 -0.16,-0.038 -0.119,-0.115 -0.087,-0.332 -0.229,-0.219 -0.093,-0.314 -0.104,-0.045 -0.213,0.024 -0.157,-0.146 -0.104,-0.367 -0.022,-0.394 -0.089,-0.332 -0.128,-0.321 -0.075,-0.262 -0.115,-1.178 -0.028,-0.108 -0.062,-0.089 -0.145,-0.134 -0.109,-0.164 -0.021,-0.135 0.03,-0.581 0.05,-0.14 0.113,-0.067 0.155,0.114 0.124,0.141 0.154,0.068 0.136,0.089 0.254,0.344 0.1,0.054 0.313,-0.011 0.185,-0.043 0.089,-0.125 0.057,-0.149 10e-4,-0.176 -0.181,-0.52 -0.055,-0.375 -0.003,-0.338 0.047,-0.339 0.247,-0.564 0.031,-0.392 -0.023,-0.525 0.043,-0.313 -0.007,-0.18 -0.147,-0.283 -0.039,-0.302 0.412,-1.537 0.129,-0.298 0.094,-0.308 0.043,-0.409 0.308,-0.112 0.293,-0.169 0.151,0.013 0.161,0.041 0.354,-0.084 0.143,-0.005 z m 2.617,10.522 0.051,0.101 -0.057,-0.005 -0.04,0.019 -0.132,0.208 0.144,0.385 -0.089,0.28 -0.16,0.018 -0.063,-0.03 0.033,-0.139 0.034,-0.063 -0.032,-0.183 -0.095,-0.115 -0.076,-0.223 -0.117,-0.134 0.055,-0.215 0.37,-0.024 0.174,0.12 z m 0.397,2.755 -0.009,0.117 -0.605,-0.426 -0.028,-0.073 -10e-4,-0.068 0.037,-0.068 0.606,0.518 z m 6.113,1.196 -0.074,0.186 -0.092,-0.066 -0.13,0.011 -0.204,0.158 -0.332,-0.212 -0.051,-0.166 0.237,-0.365 -0.002,-0.543 0.087,-0.134 0.091,-0.096 0.108,-0.052 0.234,0.375 0.08,0.046 0.226,0.172 -0.059,0.347 0.021,0.203 -0.14,0.136 z m -11.457,-0.34 0.004,0.194 -0.473,-0.286 -0.014,-0.099 0.012,-0.074 0.049,-0.044 0.254,0.107 0.168,0.202 z m 4.613,0.604 0.174,0.008 0.054,-0.027 0.333,0.24 -0.02,0.122 0.042,0.16 -0.19,0.276 -0.034,0.093 -0.105,0.09 -0.361,-0.22 -0.132,-0.134 -0.039,-0.274 0.144,-0.407 0.134,0.073 z m -3.397,0.174 0.143,0.024 0.449,-0.086 0.184,0.043 0.123,0.165 0.153,0.051 0.121,0.084 0.226,-0.146 0.229,0.167 0.203,0.312 0.239,0.221 0.227,0.164 0.044,0.121 -0.137,0.199 -0.042,0.251 0.014,0.271 0.171,0.569 -0.06,0.154 -0.172,0.218 -0.129,0.242 0.017,0.098 -0.051,0.08 -0.016,0.171 -0.105,-0.036 -0.097,0.027 -0.094,0.077 -0.146,0.165 -0.229,-0.05 -0.107,-0.049 -0.026,-0.143 -0.068,-0.101 -0.098,-0.06 -0.241,-0.247 -0.113,-0.186 -0.002,-0.198 -0.063,-0.185 -0.125,-0.165 -0.165,-0.127 -0.055,-0.122 -0.021,-0.144 -0.015,-0.369 -0.233,-0.46 -0.082,-0.11 -0.219,-0.114 -0.183,-0.147 -0.077,-0.146 -0.071,-0.236 -0.049,-0.034 -0.142,0.011 -0.138,-0.031 0.04,-0.173 0.137,-0.126 0.188,-0.016 0.52,0.071 0.143,0.051 z m 7.233,1.793 0.239,0.437 -0.261,-0.298 -0.303,-0.203 -0.314,-0.336 -0.227,-0.118 -0.069,-0.068 0.024,-0.139 0.167,-0.026 0.074,0.008 0.457,0.595 0.213,0.148 z m 1.386,1.142 0.01,0.25 -0.105,-0.092 -0.339,-0.491 -0.094,-0.179 0.096,-0.119 0.245,0.183 0.187,0.448 z m -4.719,0.283 -0.226,0.711 -0.15,-0.245 0.061,-0.154 -0.13,-0.128 -0.034,-0.117 0.05,-0.154 0.136,-0.143 0.034,-0.466 0.287,-0.149 0.115,-0.006 -0.041,0.114 0.004,0.215 -0.106,0.522 z m 0.608,-0.497 -0.087,0.087 -0.053,-0.014 -0.036,-0.154 0.084,-0.103 0.027,0.01 0.065,0.174 z m 3.945,0.69 0.538,0.337 0.371,0.577 0.043,0.442 -0.028,0.168 -0.177,-0.189 -0.379,-0.27 -0.263,-0.06 -0.081,-0.049 0.03,-0.146 -0.172,-0.135 -0.02,-0.055 -0.156,-0.06 -0.228,-0.303 -0.161,-0.057 -0.153,0.064 -0.354,0.45 -0.379,0.316 -0.005,-0.121 0.153,-0.395 0.098,-0.632 0.062,-0.192 -0.077,-0.284 -0.01,-0.253 0.283,0.117 0.354,0.118 0.27,0.161 0.044,0.108 0.397,0.343 z m 4.275,-0.687 0.198,0.233 0.049,0.168 -0.021,0.187 0.09,0.083 0.159,0.022 0.203,0.094 0.152,0.173 -0.091,0.158 0.028,0.231 -0.159,0.291 0.021,0.516 0.092,0.165 0.009,0.166 -0.023,0.174 0.039,0.143 0.245,0.472 0.045,0.157 -0.075,0.124 -0.024,0.118 0.151,0.012 0.215,0.196 0.127,0.259 -0.038,0.068 -0.172,-0.203 -0.13,-0.032 -0.551,0.055 -0.338,-0.084 -0.219,-0.008 -0.219,-0.347 -0.19,-0.058 -0.15,-0.153 -0.25,-0.393 -0.079,-0.225 0.174,-0.228 0.055,-0.182 -0.01,-0.178 -0.166,0.029 -0.145,-0.059 -0.177,-0.219 -0.071,-0.126 -0.129,-0.105 -0.205,-0.25 -0.295,-0.098 -0.12,-0.068 -0.233,-0.21 -0.171,-0.26 -0.166,-0.456 -0.087,-0.473 0.761,0.123 0.77,-0.024 0.87,-0.108 0.251,0.13 z m -7.255,0.625 -0.144,0.067 -0.292,-0.28 -0.17,-0.131 -0.044,-0.073 0.137,-0.105 0.37,10e-4 0.196,0.192 0.027,0.12 -0.08,0.209 z m -7.169,0.403 0.153,0.043 0.109,-0.042 0.097,-0.151 0.091,0.223 0.228,0.183 -0.076,0.186 -0.199,0.021 -0.195,-0.042 -0.207,0.074 -0.251,-0.042 -0.15,-0.174 -0.171,-0.313 -0.085,-0.058 0.011,-0.128 0.063,-0.081 -0.033,-0.021 0.016,-0.057 0.031,-0.039 0.055,-0.016 0.134,0.139 0.318,0.207 0.061,0.088 z m -0.172,1.324 -0.21,0.097 -0.054,-0.061 -0.037,-0.141 0.003,-0.097 -0.201,-0.512 0.154,-0.078 0.114,0.06 0.115,0.081 0.107,0.042 0.098,0.162 -0.023,0.112 0.03,0.108 -0.096,0.227 z m 6.896,0.251 0.327,0.145 0.318,-0.125 0.314,0.035 0.261,0.189 -0.085,0.12 -0.018,0.131 0.584,-0.285 0.156,0.017 -0.005,0.265 -0.035,0.225 -0.068,0.218 -0.124,0.255 -0.166,0.229 -0.218,0.166 -0.259,0.101 -0.123,0.092 -0.037,0.139 0.005,0.174 -0.06,0.159 -0.271,0.065 -0.424,0.309 -0.911,0.196 -0.25,0.135 -0.159,0.174 -0.178,0.158 -0.097,0.039 -0.044,-0.075 -0.013,-0.064 0.13,-0.411 -0.021,-0.171 -0.063,-0.166 0.04,-0.325 0.158,-0.305 0.084,-0.336 0.025,-0.648 0.123,-0.903 -0.007,-0.108 -0.096,-0.122 -0.354,-0.099 -0.14,-0.093 0.07,-0.181 0.134,-0.123 0.184,0.005 0.162,0.115 0.572,0.237 0.304,0.199 0.275,0.248 z m 6.619,0.058 -0.052,0.146 -0.082,-0.041 -0.071,-0.066 -0.105,-0.221 -0.036,-0.162 0.162,0.091 0.093,0.161 0.091,0.092 z m -0.691,0.292 -0.351,0.018 -0.153,-0.13 -0.191,-0.382 0.216,-0.083 0.206,0.022 0.151,0.135 0.161,0.256 -0.039,0.164 z m -0.095,0.424 0.195,0.1 0.225,-0.04 0.272,-0.226 0.306,0.082 0.179,0.333 0.092,0.125 0.05,0.217 -0.013,0.521 -0.074,0.472 0.058,0.097 0.141,0.085 0.122,0.104 0.103,0.134 0.066,0.149 0.026,0.362 0.177,0.305 0.023,0.119 -0.042,0.125 -0.295,-0.024 -0.023,0.105 0.007,0.13 -0.104,-0.082 -0.173,-0.298 -0.158,-0.125 0.049,0.483 0.052,0.231 0.009,0.233 -0.273,-0.178 -0.326,-0.11 -0.09,-0.095 0.03,-0.302 -0.006,-0.15 -0.146,-0.318 0.171,-0.688 -0.004,-0.141 -0.029,-0.141 -0.135,-0.279 -0.214,-0.234 -0.131,0 -0.317,0.164 -0.161,-0.054 -0.095,-0.645 -0.128,-0.626 -0.099,-0.16 -0.063,-0.168 0.063,-0.139 0.122,0.057 0.174,0.165 0.21,0.095 0.105,0.083 0.072,0.147 z m -13.227,-0.519 0.061,0.15 -0.079,0.226 -0.067,0.049 -0.09,-0.094 -0.192,-0.066 -0.013,-0.122 0.101,0.003 0.184,-0.119 0.095,-0.027 z m -7.157,8.738 -0.26,0.204 0.028,-0.252 0.076,-0.237 0.264,-0.487 0.191,-0.15 0.314,-0.383 0.178,-0.186 0.426,-0.367 0.392,-0.402 0.132,-0.03 0.145,-0.006 0.114,-0.046 0.256,-0.217 0.643,-0.724 0.532,-0.54 0.545,-0.683 0.26,-0.199 0.069,-0.073 0.502,-0.63 0.157,-0.092 0.178,-0.066 0.12,-0.085 0.106,-0.107 0.177,-0.274 0.072,-0.321 -0.045,-0.181 -0.1,-0.267 0.125,-0.365 0.099,-0.168 0.35,-0.742 0.101,-0.15 0.146,0.094 0.02,0.133 -0.072,0.313 -0.006,0.157 0.083,0.159 -0.1,0.263 0.251,0.698 0.192,0.441 0.007,0.146 -0.258,0.264 -0.153,0.08 -0.331,0.071 -0.149,0.077 -0.237,0.214 -0.148,0.282 -0.037,0.146 -0.076,0.112 -0.682,0.191 -0.32,0.125 -0.146,0.094 -0.077,0.153 0.054,0.27 -0.573,0.973 -0.183,0.254 -0.195,0.217 -0.24,0.154 -0.337,0.094 -0.268,0.188 -0.182,0.333 -0.224,0.3 -0.283,0.223 -0.306,0.196 -0.28,0.143 -0.303,0.101 -0.091,0.131 -0.064,0.162 -0.134,0.076 -0.159,0.043 -0.286,0.155 z m 18.09,-8.049 0.164,0.377 -0.222,-0.002 -0.081,-0.274 0.095,-0.089 0.044,-0.012 z m -1.085,5.198 -0.108,0.075 -0.044,-0.187 0.031,-0.252 0.215,-0.88 -0.049,-0.22 0.359,-0.491 0.221,-0.46 0.333,-0.484 0.042,-0.251 0.295,-0.479 0.275,-0.661 -0.015,-0.219 0.071,-0.109 0.04,-0.166 0.008,-0.141 0.202,-0.246 0.053,0.16 -0.06,0.314 0.01,0.151 0.035,0.071 0.002,0.292 -0.072,0.448 0.066,0.517 -0.13,0.526 -0.148,0.236 -0.219,0.167 -0.239,0.104 -0.248,0.262 -0.16,0.306 -0.026,0.279 -0.394,0.94 -0.346,0.398 z m -0.672,1.089 -0.186,0.03 -0.196,-0.016 -0.132,-0.139 -0.228,-0.598 -0.265,-0.146 -0.303,-0.11 -0.152,-0.093 -0.134,-0.112 -0.426,-0.597 -0.032,-0.365 0.073,-0.207 0.129,-0.185 0.146,-0.05 0.351,-0.007 0.182,-0.024 0.4,-0.274 0.028,-0.108 0.003,-0.451 -0.04,-0.315 -0.1,-0.308 0.108,-0.141 0.142,-0.139 0.147,-0.272 0.028,-0.191 0.003,-0.2 0.038,-0.143 0.115,-0.072 0.554,-0.218 0.098,-0.015 0.713,0.202 0.146,0.304 0.014,0.1 -0.111,0.337 -0.099,0.226 -0.24,0.35 -0.179,0.378 -0.133,0.569 -0.084,0.185 -0.224,0.356 -0.068,0.195 0.002,0.423 -0.038,0.156 0.002,0.15 0.444,0.705 0.038,0.111 -0.004,0.126 -0.076,0.157 -0.182,0.271 -0.102,0.095 -0.17,0.07 z m -1.351,-3.985 -0.078,0.039 -0.069,-0.005 -0.165,0.102 -0.061,-0.191 0.059,-0.326 0.248,-0.249 0.063,-0.078 0.067,-0.046 0.081,-0.005 0.078,0.097 0.022,0.147 -0.157,0.444 -0.088,0.071 z m 4.678,-0.378 -0.078,0.013 0.13,-0.298 0.103,0.043 0.031,0.033 -0.003,0.134 -0.183,0.075 z m -12.349,0.34 -0.346,0.087 -0.08,-0.273 0.245,-0.251 0.275,0.101 0.164,0.098 -0.077,0.089 -0.181,0.149 z m 16.204,1.619 -0.049,0.079 -0.067,-0.163 -0.163,-0.153 -0.157,-0.26 -0.111,-0.081 0.076,-0.206 0.007,-0.335 0.156,-0.153 0.072,-0.045 0.118,-0.163 0.053,-0.009 0.05,0.136 -0.106,0.416 0.159,0.492 -0.054,0.307 0.023,0.069 -0.007,0.069 z m -3.076,0.36 -0.027,0.104 -0.221,-0.008 -0.079,0.016 -0.208,0.266 -0.122,0.067 -0.666,0.087 -0.524,-0.07 -0.18,-0.146 -0.117,-0.241 -0.036,-0.159 0.132,-0.174 0.126,-0.115 0.424,-0.228 0.096,-0.173 0.222,-0.209 0.457,-0.07 0.044,0.052 0.061,0.033 0.092,0.009 0.227,0.172 0.254,0.11 -0.062,0.417 0.076,0.141 0.031,0.119 z m 1.928,-0.552 0.019,0.14 -0.36,-0.369 -0.073,-0.261 0.12,0.011 0.154,0.1 0.14,0.379 z m 2.184,0.612 -0.035,0.015 -0.156,-0.22 0.021,-0.25 0.211,-0.374 0.156,0.327 -0.002,0.148 -0.022,0.073 0.146,0.185 -0.101,0.091 -0.218,0.005 z m -0.149,1.258 0.229,0.17 0.297,-0.045 -0.004,0.429 0.048,0.125 0.269,0.363 0.042,0.303 -0.159,0.284 -0.119,0.135 -0.222,0.194 -0.005,0.089 0.094,0.101 0.307,0.058 0.232,0.156 0.041,0.443 0.222,0.349 -0.006,0.152 -0.088,0.624 0.028,0.266 0.166,0.213 0.14,0.09 0.072,0.134 0.065,0.367 -0.012,0.623 -0.021,0.218 -0.098,0.202 -0.303,0.459 -0.406,0.365 -0.217,-0.024 -0.069,0.108 0.135,0.333 -0.054,0.703 -0.089,0.487 -0.132,-0.247 -0.092,-0.258 -0.083,-0.684 -0.104,-0.308 -0.163,-0.282 -0.065,-0.252 -0.169,-0.235 -0.216,-0.608 -0.143,0.031 -0.237,0.167 -0.053,0.114 -0.028,0.173 -0.055,0.156 -0.276,0.249 -0.218,0.296 -0.179,0.324 -0.057,0.297 0.146,0.232 0.15,0.094 0.219,0.208 0.067,0.095 0.23,0.675 -0.008,0.691 -0.168,0.304 -0.427,0.577 -0.308,0.183 -0.164,-0.093 -0.132,-0.35 -0.021,-0.144 0.089,-0.329 0.01,-0.301 -0.104,-0.102 -0.113,0.02 -0.048,0.043 -0.275,0.395 -0.114,0.1 -0.169,0.014 -0.134,-0.027 -0.816,-0.345 -0.667,-0.34 -0.522,-0.318 -0.378,-0.48 -0.079,-0.359 -0.005,-0.376 -0.169,-0.551 -0.02,-0.188 0.012,-0.18 0.169,-0.338 0.203,-0.171 0.114,-0.123 0.091,-0.136 0.063,-0.182 -0.018,-0.181 -0.068,-0.113 -0.321,-0.397 -0.279,-0.244 -0.571,-0.219 -0.133,-0.121 -0.146,-0.091 -0.159,-0.039 -0.156,-10e-4 -0.169,0.068 -0.044,0.145 0.012,0.13 -0.015,0.126 -0.239,0.725 -0.306,-0.159 -0.292,-0.184 -0.077,-0.129 -0.033,-0.154 -0.05,-0.104 -0.068,-0.094 -0.134,0.242 -0.167,0.191 -0.204,0.044 -0.207,0.003 -0.068,-0.083 -0.075,-0.461 -0.219,-0.146 -0.274,0.031 -0.332,0.254 -0.065,0.095 -0.073,0.219 -0.361,0.622 -0.191,0.478 -0.212,0.466 -0.094,0.153 -0.125,0.101 -0.197,-0.042 -0.179,-0.111 -0.168,-0.3 0.057,-0.349 0.188,-0.223 0.157,-0.238 0.189,-0.833 0.015,-0.296 0.033,-0.127 0.313,-0.379 0.264,-0.235 0.139,-0.049 0.569,-0.134 0.234,-0.112 0.369,-0.002 0.3,-0.064 0.239,-0.181 0.018,-0.187 -0.011,-0.195 0.053,-0.119 0.092,-0.1 0.128,-0.132 0.144,-0.099 0.409,-0.072 0.136,-0.082 0.109,-0.127 0.152,-0.248 0.181,0.062 0.182,0.096 0.327,0.076 0.289,0.206 0.186,0.324 0.031,0.16 0.048,0.527 -0.067,0.123 -0.282,0.245 0.13,0.026 0.37,-0.223 0.185,-0.086 0.456,-0.12 0.107,-0.079 0.079,-0.118 0.161,-0.323 0.117,-0.345 0.093,-0.144 0.131,-0.114 0.131,-0.019 0.479,0.236 0.307,-0.114 0.086,-0.358 0.07,-0.52 0.055,-0.141 0.176,-0.136 0.21,0.044 0.288,0.187 0.266,0.062 0.099,-0.15 0.094,-0.296 0.107,0.001 0.358,0.098 0.346,-0.065 0.098,-0.356 -0.065,-0.381 -0.271,-1.112 0.161,-0.248 0.14,-0.007 0.341,0.296 0.657,0.4 0.219,0.244 0.138,0.3 z m -0.1,-0.77 -0.051,0.072 -0.085,-0.151 0.074,-0.333 0.054,-0.056 0.07,0.211 -0.062,0.257 z m -6.379,1.007 0.024,0.293 -0.258,0.085 -0.207,-0.075 -0.133,-0.176 10e-4,-0.066 0.116,0.005 0.255,-0.154 0.081,-0.03 0.121,0.118 z m 3.113,0.267 -0.08,0.168 -0.315,-0.139 -0.075,-0.121 0.04,-0.143 0.154,-0.049 0.08,0 0.15,0.15 0.046,0.134 z m -20.912,2.617 -0.191,0.066 -0.042,-0.176 0.024,-0.173 0.137,0.019 0.067,0.054 0.005,0.21 z m -0.773,0.933 -0.146,0.214 -0.165,-0.246 0.018,-0.343 0.051,-0.095 0.233,-0.052 0.009,0.522 z m 16.438,1.335 0.031,0.065 -0.013,0.07 -0.292,0.13 -0.098,-0.004 -0.023,-0.217 0.072,-0.099 0.138,0.088 0.122,-0.102 0.063,0.069 z m 7.992,1.254 -0.044,0.16 -0.173,-0.377 -0.068,-0.093 0.088,-0.315 0.193,0.154 0.004,0.471 z m -10.361,1.5 -0.284,0.039 -0.091,-0.003 -0.223,-0.286 -0.021,-0.126 -0.179,-0.143 0.065,-0.142 0.232,-0.034 0.402,-0.181 0.645,0.286 0.1,0.103 -0.201,0.063 -0.143,0.271 -0.302,0.153 z m -2.621,0.989 0.153,0.202 0.192,-0.053 0.306,0.057 0.065,0.105 -0.01,0.069 -0.327,0.195 -0.215,-0.204 -0.379,0.139 -0.181,-0.084 -0.247,0.075 -0.152,-0.158 0.062,-0.152 0.392,-0.25 0.341,0.059 z m -2.55,2.295 -0.076,0.169 -0.089,0.079 -0.116,-0.044 -0.089,-0.087 -0.05,0.13 -0.245,0.05 -0.155,0.2 -0.226,0.054 -0.158,-0.026 0.017,-0.178 0.437,-0.267 0.272,-0.099 0.239,-0.193 0.12,-0.021 0.061,0.157 0.058,0.076 z",
                        title: "Philippines",
                        id: "PH",
                    },
                    {
                        d:
                            "m 684.93575,351.7284 0.135,0.093 0.168,-0.055 0.295,-0.066 0.256,0.049 0.565,0.209 0.085,0.104 0.133,0.507 0.101,0.046 0.318,-0.119 0.263,0.06 0.295,0.164 0.19,0.158 0.126,0.17 0.135,0.276 0.052,0.22 0.064,0.263 -0.017,0.74 -0.096,0.121 -0.082,0.157 0.02,0.137 0.093,0.108 0.183,0.074 0.169,0.046 0.091,0.117 0.125,0.414 0.084,0.064 0.208,-0.002 0.376,-0.09 0.326,-0.142 0.139,-0.03 0.034,0.393 0.192,0.15 0.268,0.175 0.111,0.058 0.314,0.166 0.593,0.211 0.575,0.151 0.426,0.112 0.206,0.007 0.147,0.005 0.425,-0.03 0.212,-0.052 -0.288,0.18 -0.352,0.222 -0.416,0.26 -0.366,0.23 -0.35,0.219 -0.335,0.21 -0.051,0.163 -0.083,0.239 -0.307,0.182 -0.306,0.131 -0.071,0.077 -0.023,0.103 -0.148,0.206 -0.286,0.174 -0.237,-0.017 -0.15,-0.052 -0.797,0.3 -0.37,-0.007 -0.288,0.194 -0.214,0.178 -0.428,0.194 -0.291,10e-4 -0.43,-0.115 -0.529,-0.22 -0.214,-0.127 -0.194,0.007 -0.468,-0.03 -0.458,-0.109 -0.546,-0.129 -0.27,-0.055 -0.554,-0.114 -0.361,0.152 -0.326,0.136 -0.265,0.093 -0.219,0.422 -0.093,0.149 -0.106,0.212 -0.05,0.15 0.044,0.179 0.321,0.126 0.134,0.174 0.02,0.153 -0.116,0.157 -0.097,0.124 10e-4,0.109 0.052,0.11 0.077,0.082 0.456,0.051 0.271,0.001 0.105,0.044 0.013,0.149 -0.1,0.2 -0.384,0.161 -0.217,0.17 -0.07,0.225 0.003,0.179 0.075,0.119 0.184,0.137 0.173,0.156 0.053,0.127 -0.022,0.174 -0.069,0.238 -0.189,0.277 -0.158,0.197 -0.011,0.07 0.039,0.106 0.127,0.154 0.216,0.227 0.269,0.183 0.173,0.051 0.055,0.045 0.054,0.212 0.021,0.223 -0.069,0.168 0.138,0.138 0.361,-0.007 0.294,0.059 0.124,-0.059 0.087,0.044 -0.055,0.498 0.04,0.294 0.079,0.083 0.289,0.12 0.556,-0.015 0.329,0.139 0.363,0.159 0.193,0.176 0.087,0.131 -0.024,0.211 -0.199,0.247 -0.323,0.118 -0.189,0.051 -0.932,0.462 -0.291,0.195 -0.226,0.234 -0.083,0.176 -0.044,0.171 0.202,0.62 0.034,0.192 -0.166,0.667 -0.049,0.247 0.063,0.173 0.198,0.064 0.043,0.145 0.019,0.111 -0.344,0.244 -0.364,0.216 -0.115,-0.001 -0.348,0.405 -0.579,0.809 -0.308,0.274 -0.022,0.133 -0.024,0.136 0.117,0.228 0.024,0.193 -0.13,0.193 -0.218,0.223 -0.424,0.193 -0.535,0.199 -0.24,0.12 -0.181,0.52 -0.167,0.521 -0.075,0.193 -0.288,0.599 -0.504,0.88 -0.128,0.192 -0.78,0.423 -0.795,0.46 -0.141,0.174 -0.163,0.418 -0.153,0.458 -0.143,0.239 -0.506,0.536 -0.166,0.411 -0.053,0.268 -0.43,0.15 -0.488,0.143 -0.71,0.046 -0.295,0.075 -0.87,0.369 -0.216,0.016 -0.17,-0.061 -0.128,-0.126 -0.119,-0.21 -0.057,-0.323 -0.168,-0.146 -0.226,-0.125 -0.238,-0.005 -0.24,0.137 -0.207,0.15 -0.142,0.124 -0.138,0.145 -0.267,0.486 -0.431,0.697 -0.481,0.506 -0.178,0.151 -0.111,0.115 -0.151,0.168 -0.087,0.162 -0.119,0.529 -0.069,0.468 0.032,0.105 0.072,0.089 0.263,0.135 0.379,0.226 0.493,0.128 0.415,0.022 0.156,0.096 0.092,0.13 0.026,0.109 -0.022,0.386 -0.047,0.414 -0.153,0.444 0.002,0.254 0.061,0.249 0.461,0.63 0.17,0.065 0.346,0.014 0.161,-0.013 0.179,-0.064 0.127,0.044 0.095,0.077 0.024,0.128 -0.015,0.627 0.142,0.284 0.275,0.386 0.217,0.441 0.205,0.527 0.197,0.412 0.076,0.215 -0.128,0.104 -0.073,0.108 -0.019,0.144 0.027,0.152 -0.017,0.107 0.093,0.132 0.109,0.044 -0.003,0.092 -0.172,0.119 -0.153,-0.004 -0.118,0.058 -0.228,0.25 -0.106,0.05 -0.143,0.023 -0.159,-0.025 -0.226,-0.101 -0.065,-0.159 0.025,-0.167 -0.051,-0.1 -0.162,0.019 -0.561,0.171 -0.535,0.211 -0.093,0.144 -0.124,0.149 -0.245,0.062 -0.362,0.019 -0.249,-0.023 -0.23,-0.161 -0.21,-0.146 -0.325,-0.007 -0.585,0.022 -0.324,-0.002 -0.191,-0.054 -0.188,0.041 -0.235,-0.06 -0.105,0.08 -0.099,0.008 -0.079,-0.138 -0.053,-0.015 -0.062,0.02 -0.055,0.047 -0.032,0.081 -0.011,0.92 -0.386,-0.006 -0.275,-0.002 -0.302,0.05 -0.276,0.07 -0.136,0.084 -0.194,0.131 -0.046,0.184 -0.093,0.134 -0.134,-0.198 -0.086,-0.092 -0.1,0.068 -0.142,-0.008 -0.256,-0.226 -0.114,0.228 -0.423,0.052 -0.053,-0.172 -0.01,-0.16 -0.233,0.116 -0.167,-0.178 -0.075,-0.239 -0.064,-0.066 -0.073,-0.076 -0.176,-0.082 -0.156,-0.254 -0.015,-0.27 -0.044,-0.321 -0.328,-1.192 -0.199,-0.11 -1.117,-0.212 -0.057,-0.209 0.077,-0.562 -0.031,-0.355 -0.362,-0.469 -0.101,-0.328 -0.295,-0.281 -0.293,-0.082 -0.296,0.037 -0.159,0.111 -0.087,0.188 0.632,-0.044 0.142,0.069 0.17,0.123 -0.181,-0.005 -0.21,-0.058 -0.263,0.004 -0.985,0.138 -0.572,0.199 -0.767,-0.059 -0.968,0.196 -0.8,0.011 -0.33,0.381 -0.183,-0.069 -0.14,-0.093 -1.1,-0.299 -0.076,-0.125 -0.184,-0.09 -0.202,0.16 -0.145,0.026 -0.603,-0.133 -0.461,0.101 -0.171,0.172 -0.012,0.267 -0.576,-0.052 -0.326,-0.084 -0.434,0.093 -0.984,-0.123 -0.258,0.03 -0.359,0.178 -0.15,0.138 -0.213,0.054 -0.188,-0.192 -0.14,-0.085 -0.13,0.056 -0.176,0.158 -0.51,0.074 -0.461,-0.021 -0.496,-0.148 0.059,-0.05 0.077,-0.258 0.069,-0.923 0.088,-0.334 -0.026,-0.182 0.018,-0.055 0.195,-0.162 0.047,-0.068 0.074,-0.474 0.082,-0.526 0.091,-0.189 0.076,-0.051 0.615,-0.237 0.105,-0.157 0.317,0.037 0.029,-0.038 0.029,-0.182 0.147,-0.197 0.204,-0.162 0.153,-0.057 0.553,-0.102 0.324,-0.142 0.097,-0.015 0.861,0.036 0.181,-0.054 0.028,-0.05 0.051,-0.538 0.157,-0.084 0.024,-0.045 -0.053,-0.373 0.03,-0.249 0.177,-0.148 -0.011,-0.084 -0.126,-0.177 -0.169,-0.113 -0.082,-0.027 -0.706,0.107 -0.292,-0.035 -0.136,-0.065 -0.029,-0.048 0.028,-0.109 0.005,-0.177 0.102,-0.276 0.031,-0.165 -0.083,-0.957 -0.119,-0.637 0.064,-0.633 -0.013,-0.131 -0.024,-0.03 -0.089,0 -0.43,0.056 -0.366,-0.408 -0.228,-0.161 -0.624,-0.203 -0.274,-0.04 -0.401,-0.176 -0.371,-0.385 -0.378,-0.395 -0.153,-0.253 -0.169,-0.431 -0.478,-0.827 0.004,-0.214 -0.059,-0.131 -0.467,-0.545 -0.331,-0.388 -0.535,-0.628 1.069,0.352 0.833,0.269 1.347,0.434 1.045,0.337 0.289,0.055 3.063,-0.288 1.131,0.218 0.359,0.122 0.054,-0.071 0.152,-0.148 0.264,-0.15 0.358,-0.119 0.357,-0.065 0.512,-0.009 0.348,0.01 0.257,0.036 0.496,-0.021 0.238,-0.058 0.815,-0.238 0.548,-0.16 0.829,-0.249 0.605,-0.183 0.151,-0.097 0.156,-0.174 0.075,-0.157 -0.186,-0.242 -0.024,-0.213 0.122,-0.271 0.066,-0.413 -0.013,-0.589 -0.04,-0.34 0.169,-0.633 0.141,-0.356 0.281,-0.17 0.196,-0.104 0.081,-0.077 0.08,-0.085 0.3,-0.484 0.275,-0.226 0.266,-0.137 0.292,0.018 0.247,0.187 0.48,0.082 0.465,-0.055 0.403,-0.141 0.183,-0.115 0.214,-0.101 -0.012,-0.116 -0.243,-0.1 -0.139,-0.142 -0.054,-0.174 0.136,-0.106 0.318,-0.031 0.778,-0.425 0.317,-0.28 0.086,-0.131 0.15,-0.014 0.296,0.13 0.347,0.043 0.217,-0.13 0.216,-0.029 0.212,0.142 0.114,0.17 0.192,0.202 0.243,0.04 0.293,-0.108 0.308,-0.234 0.292,-0.328 0.259,-0.324 -0.064,-1.03 -0.043,-0.609 0.137,-0.322 0.195,-0.197 0.129,-0.307 -0.003,-0.271 0.137,-0.228 0.136,-0.623 0.185,-0.147 0.382,-0.102 0.608,-0.059 0.477,-0.285 0.48,-0.304 0.064,-0.268 -0.18,-0.286 -0.241,-0.556 -0.217,-0.333 -0.53,-0.598 0.061,-0.369 0.295,-0.151 0.726,0.256 0.202,0.05 0.253,0.036 0.669,-0.006 0.546,-0.1 0.57,-0.228 0.112,-0.238 -0.007,-0.283 0.01,-0.234 0.009,-0.325 -0.205,-0.209 -0.124,-0.187 -0.037,-0.15 0.143,-0.082 0.139,-0.153 0.133,-0.278 0.316,-0.333 0.191,-0.3 0.18,-0.142 0.272,-0.196 0.174,-0.287 0.08,-0.172 0.157,-0.168 0.053,-0.11 -0.043,-0.099 -0.078,-0.124 -0.089,-0.14 0,-0.136 0.074,-0.143 0.081,-0.129 -0.038,-0.181 -0.043,-0.295 -0.148,-0.174 -0.1,-0.403 -0.157,-0.41 -0.084,-0.16 -0.154,-0.202 -0.344,-0.214 -0.099,-0.143 0.134,-0.276 0.225,-0.171 0.423,-0.423 0.231,-0.292 0.209,-0.204 0.27,0.034 0.158,-0.018 0.139,-0.189 0.276,-0.167 0.491,-0.346 0.172,-0.234 0.261,-0.118 0.217,-0.027 0.292,-0.082 0.281,-0.126 0.257,-0.096 0.402,-0.02 0.639,-0.057 0.344,-0.06 0.827,-0.046 0.9,-0.021 0.104,-0.002 0.39,0.124 0.264,0.104 0.104,-0.009 0.437,-0.248 0.664,-0.304 0.309,-0.135 0.166,-0.05 0.257,0.003 0.207,0.08 z",
                        title: "Pakistan",
                        id: "PK",
                    },
                    {
                        d:
                            "m 529.91475,280.8274 0.112,0.058 0.786,0.063 0.797,0.063 1.281,0.069 1.335,0.07 1.386,0.075 1.499,0.079 1.581,0.047 0.097,-0.032 0.161,-0.187 0.197,0.025 0.233,0.116 0.108,0.086 0.046,0.099 0.029,0.114 0.127,0.022 0.233,0.087 0.314,0.197 0.246,0.191 0.235,0.272 0.078,0.308 0.004,0.349 -0.015,0.224 0.02,0.091 0.321,1.613 0.534,1.543 0.196,0.742 0.078,0.394 0.063,0.57 0.019,0.4 -0.002,0.224 -0.04,0.308 -0.158,0.182 -1.025,0.52 -0.193,0.162 -0.302,0.404 -0.279,0.415 -0.064,0.142 -0.017,0.093 0.062,0.136 0.365,0.221 0.368,0.178 0.12,0.133 0.272,0.17 0.099,0.153 0.054,0.132 -0.004,0.307 -0.122,0.423 0.051,0.319 -0.125,0.213 -0.102,0.236 -0.015,0.412 0.184,0.454 0.151,0.31 0.058,0.243 -0.061,0.19 0.018,0.19 0.135,0.202 0.424,0.62 0.209,0.595 0.134,0.232 0.309,0.3 0.028,0.123 -0.124,0.113 -0.1,0.015 -0.081,0.03 -0.052,0.105 0.081,0.113 0.109,0.165 0.136,0.467 -0.013,0.382 -0.105,0.097 -0.134,0.226 -0.09,0.207 -0.733,0.143 -0.176,0.221 -0.401,0.425 -0.273,0.245 -0.405,0.441 -0.64,0.756 -0.236,0.316 -0.173,0.261 -0.518,0.692 -0.159,0.29 0.031,0.238 0.167,0.559 0.035,0.252 -0.03,0.232 -0.055,0.207 0.01,0.092 0.153,0.15 0.243,0.235 0.014,0.079 -0.034,0.102 -0.084,0.077 -0.305,-0.082 -0.34,-0.159 -0.116,0.02 -0.184,-0.038 -0.759,-0.307 -0.512,-0.241 -0.051,-0.157 -0.096,-0.227 -0.218,-0.191 -0.5,-0.165 -0.203,-0.129 -0.812,-0.072 -0.352,-0.003 -0.249,0.053 -0.16,-0.005 -0.219,0.337 -0.151,0.098 -0.221,0.01 -0.194,-0.06 -0.198,-0.177 -0.316,-0.094 -0.229,0.045 -0.169,-0.038 -0.145,-0.01 -0.051,0.036 -0.117,-0.005 -0.169,0.085 -0.186,0.119 -0.204,0.092 -0.158,0.196 -0.14,0.383 -0.397,-0.172 -0.132,0.075 -0.188,0.05 -0.128,-0.052 0.03,-0.132 0.058,-0.149 -0.003,-0.208 -0.036,-0.231 -0.123,-0.075 -0.185,-0.027 -0.095,-0.046 -0.01,-0.076 -0.095,-0.098 -0.164,-0.248 -0.154,-0.31 -0.107,-0.091 -0.155,0.147 -0.235,0.167 -0.147,0.058 -0.283,0.48 -0.508,0.016 -0.031,-0.224 -0.054,-0.216 -0.297,-0.053 -0.009,-0.127 -0.062,-0.318 -0.596,-0.623 -0.072,-0.26 0.023,-0.101 -0.041,-0.166 -0.13,-0.1 -0.471,-0.119 -0.121,0.068 -0.109,-0.07 -0.172,-0.15 -0.297,-0.122 -0.033,-0.063 -0.107,-0.108 -0.059,-0.014 -0.039,0.065 -0.086,0.092 -0.306,0.117 -0.122,-0.048 -0.111,-0.101 -0.127,-0.219 -0.184,-0.192 -0.151,-0.068 -0.087,-0.101 -0.019,-0.078 0.336,-0.158 0.074,-0.163 -0.043,-0.297 -0.05,-0.037 -0.134,0.1 -0.281,0.088 -0.258,0.041 -0.133,0 -0.739,-0.541 -0.48,-0.166 -0.283,-0.048 -0.03,0.055 0.127,0.304 0.222,0.375 -0.011,0.099 -0.265,0.153 -0.15,0.067 -0.177,0.129 -0.15,0.18 -0.13,0.081 -0.112,-0.021 -0.119,-0.086 -0.306,-0.553 -0.385,-0.424 -0.046,-0.095 -0.12,-0.022 -0.17,-0.098 -0.058,-0.13 0.086,-0.136 0.117,-0.124 0.208,-0.077 0.063,-0.073 0.037,-0.109 0.077,-0.141 -0.02,-0.05 -0.147,-0.16 -0.218,-0.151 -0.606,0.113 -0.166,0.081 -0.094,-0.105 -0.071,-0.153 -0.153,-0.03 -0.21,-0.14 -0.249,-0.138 -0.243,-0.04 -0.505,-0.199 -0.195,-0.011 -0.112,-0.068 -0.118,-0.151 -0.1,-0.165 -0.052,-0.336 -0.372,-0.152 -0.371,-0.096 -0.026,0.049 0.016,0.338 -0.02,0.181 -0.245,0.111 -0.242,0.011 0.013,-0.056 0.29,-0.609 0.13,-0.385 0.149,-0.703 -0.179,-0.557 -0.049,-0.262 -0.083,-0.125 -0.509,-0.273 -0.039,-0.094 0.078,-0.37 -0.038,-0.156 -0.123,-0.165 -0.161,-0.328 -0.062,-0.279 0.205,-0.328 0.051,-0.242 0.089,-0.331 0.066,-0.182 0.013,-0.05 -0.135,-0.129 -0.034,-0.182 0.036,-0.262 -0.072,-0.195 -0.18,-0.126 -0.117,-0.168 -0.054,-0.208 0.042,-0.328 0.14,-0.447 -0.296,-0.54 -0.731,-0.633 -0.35,-0.443 0.028,-0.254 0.154,-0.23 0.279,-0.206 0.212,-0.367 0.119,-0.437 0.003,-0.083 0.007,-0.312 -0.325,-1.282 -0.053,-0.322 -0.039,-0.39 -0.02,-0.106 0.642,0.273 0.269,0.154 -0.034,-0.173 -0.054,-0.149 0.036,-0.218 -0.018,-0.33 -0.583,-0.169 -0.385,-0.057 -0.043,-0.23 0.036,-0.149 0.107,0.088 0.378,0.034 0.931,-0.445 1.607,-0.581 1.717,-0.545 0.401,-0.06 0.402,-0.115 0.149,-0.205 0.149,-0.137 0.233,-0.362 0.517,-0.564 0.914,-0.206 0.342,-0.268 0.715,-0.376 1.63,-0.423 0.682,-0.094 0.667,-0.011 0.594,0.334 0.629,0.412 0.113,0.247 -0.34,-0.154 -0.496,-0.369 -0.184,-0.016 0.424,1.121 0.232,0.396 0.467,0.294 0.393,0.1 1.21,-0.179 0.429,-0.234 z",
                        title: "Poland",
                        id: "PL",
                    },
                    {
                        d:
                            "m 316.98275,314.5654 -0.245,0.176 -0.085,-0.098 0.021,-0.116 0.125,-0.279 -0.004,-0.081 -0.148,-0.542 0.025,-0.089 0.037,-0.039 0.217,0.115 0.025,0.148 -0.103,0.333 0.071,0.221 0.096,0.16 -0.032,0.091 z m 0.326,0.311 -0.059,0.039 -0.201,-0.059 0.096,-0.127 0.068,-0.037 0.091,-0.016 0.043,0.039 -0.005,0.094 -0.033,0.067 z",
                        title: "Saint Pierre and Miquelon",
                        id: "PM",
                    },
                    { d: "m 114.85075,533.1164 -0.028,0.046 -0.058,-0.039 -0.06,-0.089 -0.023,-0.093 0.056,-0.052 0.075,0.031 0.036,0.096 z", title: "Pitcairn Islands", id: "PN" },
                    {
                        d:
                            "m 289.30375,410.5794 0.086,0.058 0.084,-0.008 -0.068,-0.121 0.063,0 0.538,0.074 0.346,0.125 0.356,0.059 0.022,0.409 -0.274,0.164 -0.179,0.17 -0.146,0.209 -0.384,0.243 -0.462,0.073 -0.308,0.007 -0.115,-0.008 -0.112,-0.042 -0.232,0.04 -0.287,-0.107 -0.246,0.027 -0.488,-0.025 -0.183,0.092 -0.175,0.021 -0.171,-0.017 -0.146,-0.042 -0.362,0.003 -0.153,-0.081 0.063,-0.465 0.005,-0.21 -0.089,-0.174 -0.098,-0.109 -0.07,-0.129 0.142,-0.085 0.117,-0.124 0.037,-0.187 0.128,-0.046 0.15,-0.021 0.692,0.087 1.752,0.049 0.1,0.015 0.067,0.076 z m 1.975,0.996 -0.22,0.018 -0.143,-0.024 -0.048,-0.087 0.267,-0.082 0.311,0.012 0.178,0.049 0.022,0.033 -0.367,0.081 z m -6.867,0.134 -0.026,0.003 -0.026,-0.003 -0.012,-0.008 -0.018,-0.027 -0.08,-0.044 -0.019,-0.041 0.018,-0.042 0.033,-0.017 0.162,-0.004 0.017,0.004 0.032,0.03 10e-4,0.021 -0.016,0.021 -0.029,0.051 -0.012,0.013 -0.009,0.013 -0.004,0.023 -0.012,0.007 z",
                        title: "Puerto Rico",
                        id: "PR",
                    },
                    {
                        d:
                            "m 571.29375,370.9354 -0.289,0.276 -0.092,-0.274 -0.041,-0.099 0.531,-0.527 0.253,-0.332 0.131,0.142 0.004,0.053 -0.492,0.533 -0.005,0.228 z m 3.32,-2.27 0.077,0.722 -0.167,0.306 -0.095,0.361 -0.042,0.272 -0.117,-0.012 -0.371,0.197 -0.493,0.186 -0.542,0.048 -0.077,-0.055 -0.022,-0.094 0.159,-0.458 0.061,-0.215 0.235,-0.232 0.333,-0.201 0.141,-0.051 -0.016,-0.086 -0.199,-0.133 -0.208,-0.069 -0.197,0.069 -0.062,-0.021 -0.021,-0.059 0.069,-0.083 0.032,-0.154 -0.031,-0.258 -0.021,-0.314 -0.043,-0.244 0.123,-0.396 0.031,-0.189 0.153,-0.404 0.359,-0.245 0.311,0.071 0.164,0.018 0.069,0.048 0.045,0.14 0.229,0.162 0.188,0.021 0.058,0.521 -0.105,0.445 -0.008,0.386 z",
                        title: "Palestinian Territories",
                        id: "PS",
                    },
                    {
                        d:
                            "m 426.64975,365.7404 0.383,0.175 0.352,-0.084 0.436,0.225 0.227,0.052 -0.202,0.161 -0.203,0.204 -0.507,-0.048 -0.429,-0.196 -0.154,-0.149 -0.042,-0.134 0.139,-0.206 z m -21.994,-13.945 -0.012,0.064 -0.159,-0.025 -0.201,0.019 -0.108,-0.186 0.098,-0.077 0.226,-0.019 0.108,0.083 0.048,0.141 z m -1.744,-3.099 0.178,0.024 0.895,-0.052 0.238,0.038 -0.025,0.26 -0.169,0.104 -0.527,0.07 -0.829,-0.168 -0.278,-0.224 -0.04,-0.164 0.005,-0.077 0.175,-0.061 0.377,0.25 z m -7.011,-2.174 0.231,0.143 -0.351,0.031 -0.116,0.07 -0.284,-0.101 -0.343,0.015 -0.215,-0.192 -0.049,-0.2 0.108,-0.124 0.303,-10e-4 0.716,0.359 z m -1.387,-0.258 -0.288,0.009 -0.275,-0.272 0.405,-0.143 0.119,0.087 0.088,0.099 0.052,0.127 -0.101,0.093 z m 2.422,-0.11 -0.133,0.043 -0.748,-0.275 -0.267,-0.125 -0.346,-0.317 0.977,0.385 0.517,0.289 z m 1.973,-0.314 -0.056,0.034 -0.583,-0.097 -0.166,-0.131 -0.067,-0.244 0.098,-0.083 0.256,-0.049 0.372,0.046 0.239,0.175 0,0.223 -0.093,0.126 z m -11.4,-2.747 -0.124,0.174 -0.214,-0.062 -0.071,-0.065 0.062,-0.372 0.171,-0.087 0.172,0.15 0.004,0.262 z m 64.448,-8.888 0.059,0.03 0.163,-0.008 0.29,-0.142 0.197,-0.119 0.069,0.049 0.571,-0.067 0.135,0.054 0.09,0.061 0.281,0.082 0.306,0.009 0.379,-0.115 0.166,-0.116 0.032,-0.128 0.008,-0.097 0.049,-0.062 0.086,-0.035 0.135,0.063 0.193,0.051 0.463,0.021 0.091,-0.071 0.157,0.021 0.207,0.09 0.239,-0.029 0.121,0.11 0.05,0.146 0.014,0.317 -0.018,0.32 0.047,0.118 0.162,0.031 0.261,-0.004 0.235,0.086 0.182,0.151 0.06,0.154 0.026,0.106 -0.089,0.06 -0.126,0.228 -0.32,0.297 -0.457,0.267 -0.349,0.332 -0.24,0.396 -0.301,0.168 -0.092,0.09 -0.036,0.107 0.199,0.484 0.061,0.373 0.049,0.456 -0.032,0.128 -0.017,0.5 -0.046,0.146 0.012,0.119 0.073,0.127 0.033,0.122 -0.137,0.155 -0.251,0.18 -0.186,0.158 -0.05,0.148 0.014,0.092 0.313,0.313 0.057,0.128 -0.042,0.309 -0.18,0.505 -0.172,0.307 -0.03,0.03 -0.197,0.087 -0.944,0.003 -0.229,0.069 0.032,0.062 0.222,0.394 0.231,0.209 0.077,0.048 0.083,0.459 0.375,0.732 0.363,0.101 0.126,0.183 -0.023,0.256 -0.112,0.281 -0.223,0.288 -0.265,0.202 -0.173,0.201 -0.014,0.233 -0.055,0.295 -0.083,0.233 -0.021,0.157 0.664,0.985 0.37,-0.048 0.048,0.023 -0.066,0.234 -0.117,0.274 -0.14,0.052 -0.317,0.084 -0.3,0.354 -0.243,0.425 -0.183,0.206 -0.167,0.504 0.021,0.218 0.081,0.336 0.171,0.874 -0.246,0.039 -0.956,0.569 -0.296,0.001 -0.553,-0.25 -0.976,-0.081 -0.318,-0.075 -0.397,0.164 -0.307,-0.004 -0.244,0.209 -0.175,-0.057 0.201,-0.469 0.315,-0.93 -0.013,-0.569 0.075,-0.496 -0.086,-0.492 -0.158,-0.308 0.215,-0.799 -0.024,-0.413 -0.197,-0.524 0.597,0.08 -0.185,-0.208 -0.182,-0.127 -0.176,0.029 -0.149,-0.008 -0.508,0.203 -0.255,0.061 -0.074,-0.036 0.028,-0.324 -0.132,-0.421 0.204,-0.111 0.237,-0.032 0.202,-0.18 0.125,-0.201 -0.066,-0.359 0.175,-0.341 0.411,-0.289 -0.213,0.044 -0.244,0.18 -0.384,0.652 -0.125,0.33 -0.327,0.107 -0.293,0.053 -0.15,-0.035 -0.18,-0.083 -0.016,-0.243 0.014,-0.194 0.122,-0.386 0.048,-0.546 0.173,-0.49 -0.013,-0.131 -0.049,-0.195 0.154,-0.191 0.191,-0.126 0.29,-0.422 0.405,-1.009 0.467,-1.077 -0.038,-0.132 -0.099,-0.102 0.04,-0.292 0.281,-1.273 0.114,-0.167 0.132,-0.375 0.03,-0.606 0.052,-0.418 -0.012,-0.21 -0.042,-0.253 -0.179,-0.484 -0.188,-1.026 -0.015,-0.344 0.155,-0.174 -0.255,-0.025 -0.116,-0.223 0.026,-0.253 0.284,-0.409 0.265,-0.254 0.262,-0.166 0.145,-0.063 0.605,-0.173 0.159,-0.084 0.149,0.014 0.025,0.083 0.086,0.16 0.096,0.111 0.026,0.082 -0.234,0.343 -0.032,0.117 0.122,0.221 0.018,0.07 z",
                        title: "Portugal",
                        id: "PT",
                    },
                    {
                        d:
                            "m 852.63475,442.2854 -0.17,0.06 -0.08,-0.215 0.027,-0.25 0.112,-0.192 0.123,-0.061 0.024,-0.022 0.12,-0.249 0.023,0.137 -0.075,0.456 -0.098,0.177 -0.006,0.159 z m -9.606,12.196 -0.063,0.012 -0.041,-0.009 0.005,-0.04 0.042,-0.041 0.058,-0.018 0.044,0.014 -0.005,0.038 -0.04,0.044 z",
                        title: "Palau",
                        id: "PW",
                    },
                    {
                        d:
                            "m 311.67075,520.3484 0.062,0.216 0.037,0.167 0.093,0.118 0.092,0.157 0.093,0.089 0.065,0.148 -0.019,0.167 0.038,0.217 0.046,0.187 0.046,0.05 0.134,0.049 0.066,0.17 -0.048,0.086 0.019,0.099 0.048,0.096 -0.044,0.095 0.023,0.071 0.09,0.064 0.084,0.237 0.009,0.406 -0.093,0.218 -0.074,0.178 -0.018,0.109 0.055,0.158 -0.093,0.188 -0.111,0.228 0.028,0.159 0.018,0.149 0.009,0.159 0.028,0.149 -0.037,0.159 -0.037,0.139 -0.019,0.159 0.047,0.179 -0.084,0.169 -0.046,0.119 -0.019,0.12 0.084,0.189 0.214,0.08 0.167,0.02 0.157,-0.1 0.121,-0.03 0.223,0.09 0.204,0.159 0.26,0.02 0.232,0.03 0.176,0.05 0.26,-0.06 0.27,0.06 0.315,0.09 0.26,0.079 0.26,-0.02 0.195,-0.009 0.204,-0.09 0.195,0.01 0.148,-0.16 0.084,-0.139 0.074,-0.1 0.214,-0.08 0.148,0.05 0.121,0.26 0.213,0.149 0.084,0.109 0.157,0.051 0.344,0.009 0.214,-0.009 0.241,0.079 0.157,0 0.14,0.14 0.13,0.169 0.018,0.31 0.121,0.24 0.158,0.09 0.083,0.15 -0.027,0.21 -0.075,0.21 0.01,0.231 0.083,0.21 0,0.211 0.056,0.21 0.111,0.181 0.037,0.291 -0.018,0.211 0.074,0.121 0.028,0.171 -0.047,0.14 -0.018,0.192 0.009,0.171 0.056,0.141 0.167,0.181 0.046,0.323 0,0.222 0.074,0.262 0.14,0.122 0.223,0.04 0.259,0.04 0.316,-0.06 0.279,-0.071 0.157,-0.071 0.306,-0.191 0.27,-0.112 0.139,-0.07 0.13,-0.051 0.269,0.121 0.251,0.152 0.194,0.212 0.363,0.232 -0.071,0.057 -0.144,0.191 0.003,0.223 0.102,0.321 -0.09,0.681 -0.281,1.042 -0.115,0.609 0.05,0.173 -0.104,0.305 -0.385,0.656 -0.015,0.443 -0.045,1.333 -0.129,0.942 -0.217,0.698 -0.197,0.373 -0.179,0.045 -0.127,0.112 -0.078,0.177 -0.144,0.148 -0.212,0.119 -0.114,0.13 -0.018,0.141 -0.202,0.091 -0.387,0.041 -0.226,0.113 -0.068,0.185 -0.129,0.147 -0.192,0.109 -0.09,0.181 0.009,0.253 -0.11,0.216 -0.229,0.181 -0.212,0.005 -0.193,-0.171 -0.26,-0.113 -0.325,-0.057 -0.271,0.044 -0.218,0.142 -0.193,0.226 -0.168,0.31 -0.187,0.052 -0.206,-0.208 -0.261,-0.063 -0.315,0.082 -0.252,-0.028 -0.186,-0.139 -0.287,-0.015 -0.387,0.108 -0.784,-0.125 -1.182,-0.358 -0.999,-0.136 -1.225,0.129 -0.104,-0.372 0.065,-0.2 0.199,-0.151 0.125,-0.171 0.051,-0.191 0.137,-0.146 0.224,-0.1 0.095,-0.101 -0.034,-0.103 0.048,-0.09 0.129,-0.079 0.073,-0.124 0.017,-0.169 0.049,-0.084 0.086,-0.062 0.01,-0.118 -0.048,-0.361 0.006,-0.297 0.06,-0.231 0.075,-0.139 0.053,-0.035 0.05,-0.082 0.019,-0.139 0.081,-0.13 0.391,-0.266 0.147,-0.144 0.013,-0.132 0.059,-0.177 0.232,-0.383 0.071,-0.179 0.006,-0.089 0.083,-0.093 0.28,-0.212 0.151,-0.199 0.024,-0.187 -0.067,-0.212 -0.159,-0.237 -0.499,-0.593 -0.388,-0.269 -0.496,-0.221 -0.326,-0.072 -0.157,0.078 -0.159,-0.062 -0.161,-0.2 -0.272,-0.158 -0.573,-0.172 -1.301,-0.689 -0.521,-0.333 -0.175,-0.205 -0.486,-0.368 -0.797,-0.53 -0.611,-0.258 -0.426,0.014 -0.683,-0.153 -0.939,-0.322 -0.541,-0.313 -0.146,-0.302 -0.347,-0.303 -0.549,-0.303 -0.285,-0.199 -0.021,-0.096 -0.163,-0.125 -0.304,-0.154 -0.334,-0.263 -0.364,-0.372 -0.389,-0.576 -0.414,-0.777 -0.444,-0.524 -0.474,-0.27 -0.238,-0.179 0.001,-0.087 -0.071,-0.083 0.064,-0.15 0.172,-0.589 0.25,-0.852 0.26,-0.88 0.305,-1.035 0,-0.733 10e-4,-0.77 0.434,-0.633 0.308,-0.449 0.267,-0.427 0.269,-0.73 0.18,-0.486 0.687,-0.116 1.167,-0.252 0.582,-0.126 1.227,-0.265 1.247,-0.27 1.309,-0.017 1.264,-0.017 0.98,0.604 0.749,0.462 0.825,0.508 0.057,0.11 0.057,0.427 z",
                        title: "Paraguay",
                        id: "PY",
                    },
                    {
                        d:
                            "m 618.77875,392.0844 -0.253,0.063 -0.237,0.067 -0.198,-0.002 -0.16,-0.026 -0.106,-0.065 -0.204,-0.26 -0.144,-0.337 0.089,-0.188 0.03,-0.117 -0.195,-0.89 -0.063,-0.685 0.023,-0.14 0.111,-0.162 0.186,-0.358 0.099,-0.345 0.278,-0.798 0.295,-0.308 0.432,-0.226 0.356,0.442 0.432,0.337 0.083,0.377 -0.127,0.307 -0.118,0.486 0.071,0.224 0.026,0.194 0.117,0.325 0.114,0.421 0.019,0.293 -0.061,0.271 -0.151,0.228 -0.296,0.684 -0.088,0.071 z",
                        title: "Qatar",
                        id: "QA",
                    },
                    {
                        d: "m 631.48975,523.8534 -0.397,0.089 -0.276,-0.032 -0.547,-0.254 -0.146,-0.169 -0.218,-0.475 0.048,-0.167 0.172,-0.294 0.39,-0.116 0.41,0.043 0.184,0.08 0.217,0.344 0.28,0.35 -0.047,0.416 z",
                        title: "Reunion",
                        id: "RE",
                    },
                    {
                        d:
                            "m 554.07275,320.1704 0.296,0.411 0.375,0.219 0.868,0.231 0.078,-0.028 0.008,-0.043 -0.06,-0.06 -0.009,-0.076 0.042,-0.094 0.12,-0.005 0.196,0.084 0.374,-0.122 0.55,-0.328 0.506,-0.066 0.46,0.194 0.236,0.226 0.152,0.215 -0.048,0.265 -0.029,0.165 -0.121,0.681 -0.084,0.254 -0.135,0.284 -1.429,0.339 0.092,-0.163 -0.033,-0.285 -0.06,-0.216 0.133,-0.194 -0.321,-0.071 -0.141,0.107 -0.11,0.186 0.097,0.429 -0.156,0.237 -0.06,0.132 -0.007,0.313 -0.093,0.134 -0.018,0.148 0.228,-0.038 -0.103,0.269 -0.428,0.516 -0.15,0.308 0.037,1.215 -0.191,0.724 -0.015,0.213 -0.454,0.007 -0.136,-0.017 -0.43,-0.108 -0.483,-0.192 -0.283,-0.374 -0.181,-0.267 -0.41,0.121 -0.077,-0.032 -0.113,-0.129 -0.308,-0.087 -0.381,-0.002 -0.855,-0.489 -0.094,-0.082 -0.672,0.082 -1.006,0.242 -0.767,0.299 -0.793,0.531 -0.321,0.402 -0.373,0.213 -0.53,0.158 -0.947,-0.059 -0.987,-0.202 -1.059,-0.217 -0.573,0.12 -0.774,-0.09 -1.168,-0.259 -0.87,-0.079 -0.858,0.153 -0.144,-0.117 -0.031,-0.134 0.033,-0.189 0.121,-0.153 0.208,-0.116 0.109,-0.118 0.012,-0.119 -0.233,-0.192 -0.478,-0.265 -0.197,-0.166 -0.048,-0.041 -0.013,-0.149 -0.099,-0.117 -0.186,-0.086 -0.143,-0.155 -0.102,-0.225 0.022,-0.212 0.145,-0.199 0.186,-0.087 0.226,0.027 0.094,-0.057 -0.038,-0.139 -0.221,-0.179 -0.405,-0.217 -0.412,0.118 -0.421,0.454 -0.302,0.073 -0.186,-0.305 -0.33,-0.183 -0.475,-0.057 -0.292,-0.117 -0.109,-0.177 -0.208,-0.136 -0.458,-0.145 -0.006,-0.138 0.074,-0.033 0.163,-0.013 0.218,-0.029 0.035,-0.079 0.002,-0.072 -0.172,-0.091 -0.173,-0.062 -0.091,-0.062 -0.058,-0.069 -0.012,-0.072 0.051,-0.049 0.07,-0.003 0.069,-0.043 0.039,-0.167 0.094,-0.138 0.067,-0.048 -0.004,-0.102 -0.07,-0.095 -0.095,-0.082 -0.14,-0.05 -0.436,-0.144 -0.22,-0.2 -0.135,-0.008 -0.213,-0.111 -0.23,-0.174 -0.2,-0.248 -0.215,-0.161 -0.056,-0.066 -0.005,-0.062 0.04,-0.07 -0.002,-0.076 -0.056,-0.243 0.038,-0.258 -0.01,-0.243 -0.003,-0.109 -0.042,-0.034 -0.037,0.037 -0.053,0.046 -0.052,0.009 -0.159,-0.177 -0.201,-0.361 -0.136,-0.121 -0.265,-0.166 -0.224,-0.14 -0.16,-0.302 -0.167,-0.234 0.11,-0.098 0.637,-0.138 0.297,0.135 0.133,-0.049 0.129,-0.109 0.072,-0.088 0.013,-0.093 0.064,-0.116 0.215,-0.055 0.57,0.071 0.229,-0.163 0.085,-0.088 0.052,-0.196 0.06,-0.158 0.204,-0.084 -0.003,-0.144 -0.031,-0.156 0.118,-0.351 0.072,-0.144 0.116,-0.052 0.139,-0.111 0.242,-0.23 -0.056,-0.2 0.048,-0.149 0.252,-0.362 0.192,-0.35 -0.003,-0.176 0.028,-0.153 0.17,-0.168 0.178,-0.219 0.235,-0.686 0.085,-0.115 0.154,-0.131 0.115,-0.13 0.012,-0.452 0.108,-0.131 0.207,-0.147 0.206,-0.236 0.167,-0.28 0.129,-0.131 0.171,-0.035 0.185,-0.11 0.207,-0.041 0.201,0.054 0.127,-0.028 0.193,-0.136 0.491,-0.516 0.069,-0.103 0.102,-0.071 0.398,-0.177 0.101,-0.178 0.137,-0.16 0.177,0.012 0.578,0.396 0.618,-0.025 0.113,0.015 0.037,0.008 0.076,0.032 0.822,0.196 0.127,-0.022 0.035,-0.015 0.331,0.161 0.293,-0.021 0.278,-0.112 0.289,-0.038 0.266,0.067 0.202,0.227 0.525,0.482 0.156,0.18 0.24,-0.027 0.266,-0.09 0.269,-0.321 0.827,-0.366 0.631,-0.091 0.616,-0.147 0.713,-0.104 0.206,-0.3 0.114,-0.205 0.081,-0.38 0.384,-0.11 0.365,-0.078 0.13,-0.048 0.266,-0.015 0.207,0.032 0.319,0.188 0.224,0.235 0.088,0.187 0.191,0.264 0.201,0.369 0.222,0.491 0.048,0.247 0.084,0.268 0.165,0.325 0.315,0.36 0.044,0.067 0.143,0.253 0.276,0.559 0.231,0.223 0.201,0.243 0.097,0.244 0.144,0.221 0.338,0.293 0.274,0.266 0.219,0.763 0.153,0.35 0.098,0.267 -0.047,0.54 0.061,0.231 -0.125,0.421 -0.226,0.844 -0.055,0.67 0.039,0.36 0.005,0.231 0.055,0.147 0.06,0.304 0.009,0.264 -0.081,0.075 -0.113,0.063 -0.044,0.055 0.104,0.119 0.142,0.221 z",
                        title: "Romania",
                        id: "RO",
                    },
                    {
                        d:
                            "m 530.25175,317.3554 0.337,0.024 0.252,-0.063 0.637,0.08 0.137,0.063 0.089,0.071 0.167,0.234 0.16,0.302 0.224,0.14 0.265,0.166 0.136,0.121 0.201,0.361 0.159,0.177 0.052,-0.009 0.053,-0.046 0.037,-0.037 0.042,0.034 0.003,0.109 0.01,0.243 -0.038,0.258 0.056,0.243 0.002,0.076 -0.04,0.07 0.005,0.062 0.056,0.066 0.215,0.161 0.2,0.248 0.23,0.174 0.213,0.111 0.135,0.008 0.22,0.2 0.436,0.144 0.14,0.05 0.095,0.082 0.07,0.095 0.004,0.102 -0.067,0.048 -0.094,0.138 -0.039,0.167 -0.069,0.043 -0.07,0.003 -0.051,0.049 0.012,0.072 0.058,0.069 0.091,0.062 0.173,0.062 0.172,0.091 -0.002,0.072 -0.035,0.079 -0.218,0.029 -0.163,0.013 -0.074,0.033 0.006,0.138 0.458,0.145 0.208,0.136 0.109,0.177 0.292,0.117 0.475,0.057 0.33,0.183 0.186,0.305 0.302,-0.073 0.421,-0.454 0.412,-0.118 0.405,0.217 0.221,0.179 0.038,0.139 -0.094,0.057 -0.226,-0.027 -0.186,0.087 -0.145,0.199 -0.022,0.212 0.102,0.225 0.143,0.155 0.186,0.086 0.099,0.117 0.013,0.149 0.048,0.041 -0.106,0.068 -0.114,0.102 -0.065,0.178 -0.017,0.285 -0.36,0.223 -0.135,0.041 -0.061,0.148 -0.095,0.417 0.011,0.313 0.049,0.159 0.022,0.13 0.117,0.159 0.106,0.244 0.07,0.322 0.156,0.248 0.399,0.244 0.198,0.142 0.147,0.206 0.112,0.186 0.329,0.247 -0.025,0.176 -0.072,0.172 -0.076,0.081 -0.164,0.221 -0.16,0.124 -0.263,0.389 -0.415,0.021 -0.099,0.031 -0.158,0.106 -0.077,0.194 0.074,0.156 -0.007,0.157 -0.075,0.305 0.1,0.327 0.147,0.149 0.023,0.086 -0.025,0.152 -0.219,0.31 -0.066,0.115 -0.219,0.056 -0.075,-0.029 -0.113,-0.106 -0.105,-0.032 -0.261,0.125 -0.266,0.077 -0.209,-0.058 -0.206,-0.007 -0.143,0.051 -0.108,0.02 -0.212,0.134 -0.339,0.097 -0.157,-0.021 -0.058,-0.126 -0.064,-0.179 0.031,-0.082 0.225,-0.142 0.025,-0.135 0.314,-0.654 0.06,-0.213 0.002,-0.069 -0.082,-0.047 -0.172,0.002 -0.763,-0.266 0.035,-0.305 -0.224,-0.165 -0.242,-0.147 -0.04,-0.164 -0.269,-0.332 -0.196,-0.186 -0.251,-0.093 -0.216,-0.137 -0.13,-0.084 -0.058,-0.155 0,-0.092 -0.065,-0.089 -0.104,0.01 -0.177,0.124 -0.217,0.106 -0.038,0.078 0.079,0.183 0.056,0.118 -0.026,0.11 -0.068,0.141 -0.418,0.31 -0.047,0.109 0.08,0.174 -0.051,0.08 -0.349,0.115 0.009,-0.095 -0.022,-0.153 -0.2,-0.163 -0.283,-0.126 -0.628,-0.433 -0.241,-0.057 -0.216,-0.051 -0.309,-0.207 -0.159,-0.037 -0.176,-0.148 -0.384,-0.502 -0.327,-0.274 -0.223,-0.138 -0.063,-0.135 -0.013,-0.139 0.007,-0.047 0.169,-0.198 0.13,-0.028 0.167,-0.007 0.111,0.1 0.144,0.022 0.081,-0.128 0.042,-0.184 -0.019,-0.235 -0.349,-0.547 -0.299,-0.382 -0.035,-0.085 0.065,-0.072 0.105,-0.038 0.112,0.032 0.292,0.028 0.281,-0.036 0.096,-0.093 0,-0.126 -0.102,-0.117 -0.329,-0.315 -0.256,-0.278 -0.302,-0.214 -0.223,-0.086 -0.066,-0.109 -0.028,-0.116 0.025,-0.213 0.015,-0.272 0.052,-0.17 0.202,-0.323 0.193,-0.343 0.119,-0.33 0.063,-0.307 -0.023,-0.089 -0.101,-0.065 -0.212,-0.067 -0.296,0.058 -0.251,0.112 -0.098,0.009 -0.033,-0.138 0.039,-0.061 0.079,0.008 0.065,0.026 0.069,-0.063 0.042,-0.185 -0.105,-0.648 0.188,-0.057 0.003,-0.094 0.017,-0.083 0.194,0.113 0.272,0.002 0.239,-0.023 0.036,-0.064 -0.002,-0.092 -0.05,-0.073 -0.085,-0.058 -0.061,-0.09 -0.161,-0.04 -0.505,-0.234 -0.248,-0.249 0.008,-0.265 0.072,-0.145 0.087,-0.051 -0.026,-0.049 -0.284,-0.123 -0.101,-0.171 0.083,-0.219 -0.148,-0.447 -0.156,-0.275 0.153,-0.119 0.021,-0.17 0.012,-0.097 0.063,0.002 0.247,-0.114 0.09,-0.092 0.052,-0.109 0.059,-0.027 0.165,0.118 0.175,0.01 0.195,-0.074 0.147,-0.103 0.175,-0.086 0.08,-0.059 0.102,-0.092 0.205,-0.274 0.233,-0.057 z",
                        title: "Serbia",
                        id: "RS",
                    },
                    {
                        d:
                            "m 627.21975,65.281401 -1.303,-0.928 0.107,-0.469 0.141,-0.197 0.004,-0.461 -0.12,-0.352 0.052,-0.724 0.841,0.53 0.08,0.216 0.566,0.369 0.085,0.706 -0.063,0.439 -0.39,0.871 z m -7.559,101.707999 -0.281,0.831 -0.108,0.411 -0.042,0.981 0.028,0.438 0.204,1.15 0.222,0.685 0.284,0.407 0.34,0.299 0.352,0.146 0.68,-0.137 0.67,-0.413 0.729,0.276 0.646,0.094 1.277,-0.413 0.134,0.102 -0.222,0.468 -0.038,0.688 0.255,0.518 0.296,-0.021 0.3,0.086 -0.088,0.316 0.829,0.876 0.756,0.614 -0.173,0.176 -0.481,-0.281 -0.247,0.095 0.063,0.488 -0.523,-0.143 -0.232,0.299 0.014,0.445 0.064,0.429 -0.006,0.311 -0.409,0.121 -0.235,0.231 0.95,0.505 1.339,0.422 0.374,0.172 0.519,0.437 0.234,0.112 0.021,-0.281 0.104,-0.243 0.623,0.541 0.518,0.097 0.521,0.006 1.264,-0.222 0.054,0.144 0.001,0.282 0.253,0.222 0.31,-0.091 0.097,-0.194 0.408,0.261 0.077,-0.235 0.078,-0.099 0.82,0.801 0.183,-0.029 0.173,-0.229 -0.405,-0.604 -0.23,-0.1 -0.21,-0.323 0.353,-0.165 0.349,0.045 0.165,0.267 0.148,0.356 0.076,0.075 1.396,0.485 0.283,-0.135 0.047,-0.261 0.515,-0.211 0.501,-0.575 -0.194,-0.315 -0.204,-0.225 -1.173,-0.715 -0.479,-0.437 -1.236,-1.555 -1.153,-2.076 -0.629,-1.426 -0.577,-1.62 -0.188,-0.836 -0.212,-0.772 -0.486,-0.597 0.217,-0.721 0.079,-0.838 0.257,-0.69 0.065,-0.352 -0.334,-0.856 -0.024,-0.594 -0.087,-0.286 -0.01,-0.524 0.171,-0.337 -0.038,-0.446 0.106,-0.247 0.491,-0.222 0.237,-0.683 0.05,-0.47 0.014,-0.424 0.27,-0.219 0.741,0.001 0.106,-0.164 0.138,-0.395 0.063,-0.542 -0.073,-0.748 0.063,-0.478 0.408,-0.777 0.177,-0.246 0.09,-0.601 -0.222,-0.237 -0.598,-0.298 -0.983,-0.121 -1.312,-0.387 -0.557,-0.475 -0.508,-0.259 -0.384,-0.043 -0.358,0.173 -0.978,0.69 -0.353,0.176 -0.313,0.048 -0.632,-0.22 -0.315,0.056 -0.336,0.322 -0.341,0.212 -0.434,0.134 -0.299,0.404 -0.149,0.343 -0.025,0.421 0.135,0.894 0.029,0.365 0.344,0.54 -0.326,0.124 -0.333,-0.09 -0.311,-0.003 -0.313,0.13 -0.283,0.235 -0.653,0.797 -0.08,0.216 -0.063,0.295 0.215,0.314 0.219,0.205 0.655,0.127 -0.217,0.466 -0.045,0.263 0.113,0.388 -0.322,0.624 -0.098,0.428 -0.023,0.427 -0.123,0.501 -0.111,0.332 -0.102,0.156 -0.348,0.292 -0.155,0.511 -0.209,0.392 -0.226,0.221 -0.514,-0.013 -0.515,-0.202 -0.225,0.101 -0.428,0.391 -0.203,0.261 z m 2.717,-98.048999 0.159,0.177 0.081,0.202 0.618,0.093 1.866,-0.196 0.37,-0.616 0.351,-0.096 0.207,-0.664 -1.026,-0.916 -0.394,-0.718 -0.047,-0.606 -0.402,-0.172 -0.932,0.172 -0.387,0.921 -0.1,0.486 -0.292,0.359 -0.859,0.342 -0.16,0.209 0.366,0.835 0.581,0.188 z m 8.886,-17.137 1.333,-0.652 0.482,0.833 0.418,0.062 0.439,-0.422 0.429,-0.729 0.947,1.093 0.818,0.783 0.895,-0.623 0.401,-0.509 0.287,-1.054 -0.29,-0.896 -0.149,-1.207 1.44,-0.354 0.539,-0.59 -0.359,-0.863 -1.177,-0.372 -0.433,-0.43 -0.146,-0.754 -0.263,-0.355 -0.73,0.416 -0.257,0.145 -0.768,-0.114 -0.332,0.584 -0.714,1.648 -0.882,0.683 -0.695,1.565 -1.052,-0.49 -0.887,0.339 0.299,1.537 0.407,0.726 z m -3.762,7.194 0.439,0.069 0.254,0.311 0.126,0.463 1.26,-0.23 1.188,0.846 0.482,1.143 0.48,0.153 1.212,-0.077 1.401,-0.531 2.148,-1.597 0.319,-0.645 -0.354,-0.481 -1.847,-1.646 -1.226,-1.524 -0.849,-0.555 -1.963,0.167 -2.109,-1.737 -0.238,0.05 -0.609,2.285 -0.14,1.475 -0.355,0.035 -0.548,0.529 0.06,1.029 0.869,0.468 z m 10.071,-16.761 0.928,-0.38 2.978,-0.855 0.002,-0.431 0.145,-0.875 -0.411,-0.568 -3.164,0.518 -0.42,0.61 -0.111,0.964 -0.102,0.506 0.032,0.223 0.123,0.288 z m -24.913,21.445 -1.299,0.127 -0.45,-0.849 -0.174,-0.184 -0.271,0.124 -0.274,0.303 -0.877,0.253 -0.673,0.485 -0.71,0.945 -2.129,2.424 0.263,0.708 0.302,0.339 0.408,0.898 0.723,0.042 0.265,-0.137 0.284,-0.686 0.556,-0.251 0.703,0.101 0.238,0.441 -0.714,1.007 -0.254,0.645 0.294,0.495 0.568,-0.113 0.241,-0.177 0.197,-0.373 0.2,-0.171 0.615,0.604 0.226,-0.234 0.185,-0.788 0.062,-0.412 0.077,-0.199 0.605,0.563 0.265,0.096 0.24,-0.12 0.093,-0.738 -0.056,-0.578 -0.088,-0.387 -0.105,-0.184 -0.654,-0.225 -0.034,-0.163 0.376,-0.896 0.239,-0.26 1.937,-0.124 0.584,-0.821 -0.124,-0.791 0.27,-0.434 1.217,-0.506 1.912,-0.223 0.52,-1.088 1.564,-1.445 -0.315,-0.924 -0.383,-0.068 -1.507,-2.563 -0.327,-0.422 -1.038,0.059 -0.43,-0.292 -0.432,0.06 -1.73,1.038 -0.739,0.775 -0.272,1.911 0.127,0.973 -0.021,1.674 -0.276,0.736 z m 3.716,-9.982 0.299,0.701 0.274,0.078 0.387,-0.111 0.098,-0.441 0.442,-0.658 -0.19,-0.777 -0.456,-0.361 -0.349,0.022 -0.196,0.205 -0.044,0.255 -0.115,0.328 -0.271,0.067 0.025,0.358 0.096,0.334 z m -4.094,135.157999 -0.304,0.117 -0.599,0.47 -0.611,0.72 -0.263,0.606 -0.066,0.675 -0.045,0.687 -0.004,0.442 0.044,0.439 0.061,0.327 0.345,1.07 0.64,0.555 0.683,-0.077 0.758,-0.273 1.251,-0.631 0.6,-0.889 0.228,-0.623 0.485,-0.568 0.133,0.215 0.065,0.476 0.158,-0.088 0.175,-0.314 -0.05,-0.762 -0.275,-0.565 -0.479,-0.415 -2.164,-1.609 -0.766,0.015 z m -10.002,-125.935999 0.706,0.399 0.921,-0.557 0.153,0.49 0.102,0.971 0.229,0.628 0.665,-0.17 0.38,-0.317 0.309,-1.108 0.151,-0.354 0.936,-0.013 0.376,-0.805 0.149,-0.101 0.297,0.15 0.31,-1.179 0.275,-0.232 0.247,-0.939 0.295,-0.406 0.203,0.157 0.749,1.531 1.631,0.67 0.163,-0.068 0.008,-1.463 -0.391,-1.07 -0.286,-0.473 -0.282,-0.228 -0.286,-0.079 -0.965,0.19 -1.284,-0.722 -0.251,0.013 -0.931,0.679 -0.621,1.037 -1.324,0.35 -3.376,1.439 -0.616,0.706 0.686,0.215 0.672,0.659 z m 15.961,10.411 0.996,0.184 0.011,-0.184 -0.072,-0.198 -0.231,-0.452 -0.236,-0.305 -0.014,-0.309 0.046,-0.621 -0.893,-0.742 -0.73,0.743 -0.57,0.213 -1.07,0.888 1.019,0.902 1.744,-0.119 z m -2.876,-2.302 0.058,-0.573 0.693,-1.031 -0.026,-0.218 -0.165,-0.558 -1.031,-0.178 -0.919,1.175 0.09,0.374 1.073,1.23 0.227,-0.221 z m 36.664,-15.216 -0.832,1.3 -0.636,0.721 -0.203,0.549 0.674,1.038 0.679,0.87 0.521,0.265 0.522,-0.043 3.296,-0.964 1.261,-1.112 1.234,-1.979 -0.184,-0.666 -0.033,-0.719 0.062,-0.875 -0.203,-0.717 -0.387,-0.866 -0.404,-0.464 -0.634,-0.509 -0.636,-0.023 -0.744,0.427 -0.152,0.561 -0.128,0.693 -0.125,1.277 -0.197,0.672 -0.673,0.308 -0.677,0.004 -1.401,0.252 z m -20.745,14.721 0.246,0.287 1.092,0.174 2.207,0.081 0.262,-0.378 -0.021,-0.73 0.13,-0.897 0.011,-2.039 -0.123,-0.567 -0.377,-0.256 -0.666,0.049 -0.146,0.551 -1.77,-0.184 -0.098,0.355 0.063,1.927 -0.196,0.669 -0.614,0.958 z m -1.484,-2.006 0.799,-0.779 -0.126,-0.473 -0.229,-0.257 -0.317,-0.128 -0.417,0.497 -0.314,0.65 0.193,0.464 0.411,0.026 z m 10.951,-18.639 0.606,-0.24 0.173,-0.369 -0.264,-0.765 -0.577,-0.592 -0.546,0.11 -0.69,0.589 -0.068,0.431 0.306,0.441 1.06,0.395 z m -2.546,3.624 -0.246,-0.357 -0.147,-0.076 -1.104,1.572 -0.69,-0.274 -0.559,0.535 0.545,1.822 0.967,0.462 0.528,1.687 0.976,0.499 1,-0.054 0.611,-0.2 0.199,-0.918 -0.079,-1.165 -0.245,-0.639 -0.15,-1.025 -0.391,-0.911 -0.322,-0.363 -0.893,-0.595 z m 3.133,8.421 -0.051,0.774 0.046,0.874 0.118,0.281 0.852,1.25 0.702,-0.25 1.062,-0.819 1.246,1.012 0.923,0.271 0.656,-1.458 0.877,-0.515 0.234,-0.879 0.247,-0.252 0.86,-0.273 0.109,-1.153 0.217,-0.808 0.101,-1.122 -0.168,-0.709 -0.183,-0.562 -0.708,-0.342 -0.71,-0.125 -0.798,0.537 -1.384,0.637 -0.95,0.392 -0.571,0.049 -0.121,-0.639 -0.394,-0.191 -1.063,0.216 -0.347,0.349 -0.12,0.578 -0.152,0.299 -0.305,0.941 -0.225,1.637 z m 0.928,125.216999 0.246,0.12 0.247,0.085 0.3,-0.011 0.299,-0.162 0.532,0.237 0.313,-0.223 0.317,-0.086 0.104,-0.549 0.01,-0.747 -0.084,-0.403 -0.163,-0.225 -0.618,-0.496 -0.607,-0.703 -0.896,-0.732 -0.301,-0.431 -0.29,-0.515 -0.325,-0.422 -0.622,-0.631 -0.113,-0.196 -0.12,-0.039 -0.592,0.27 -0.326,0.613 -0.176,0.073 -0.269,0.272 -0.132,0.428 0.267,0.92 0.105,0.219 0.08,0.339 0.129,0.304 0.765,1.296 0.144,0.078 0.221,-0.225 0.174,-0.091 0.348,0.191 0.318,0.065 0.34,0.197 0.221,0.613 -0.009,0.423 0.163,0.144 z m 15.605,-66.332 -0.349,0.036 -0.346,0.149 -0.68,0.698 -0.686,0.571 -2.63,0.816 -1.558,0.861 -0.531,-0.101 -0.873,0.173 -0.656,-0.131 -1.263,-0.584 -0.611,-0.088 -1.032,0.195 -0.125,0.1 -0.345,0.479 0.008,0.751 0.048,0.576 -0.158,0.357 -0.156,0.21 -0.396,0.029 -0.198,-0.411 -0.349,-0.054 -0.918,0.145 -0.451,0.346 -0.23,0.961 -0.714,0.439 -1.222,0.448 -0.663,0.384 -0.324,0.022 -0.318,0.195 -0.642,0.893 -0.657,0.65 -1.011,0.644 0.04,0.499 0.059,0.298 -0.87,0.965 -0.211,0.584 -0.216,1.092 -0.069,0.168 -0.855,-0.355 -0.602,-0.118 -0.275,0.097 -0.407,0.263 -0.098,0.255 0.056,0.561 0.132,0.367 -0.858,1.607 -0.239,0.018 -0.27,-0.46 -0.282,-0.286 -0.354,-0.244 -0.355,-0.084 -0.322,0.284 -0.311,0.476 0.031,0.374 0.117,0.348 0.379,0.601 0.96,-0.109 0.248,0.439 0.197,0.171 -0.788,0.643 -0.854,1.088 -0.712,1.488 -0.218,0.303 0.079,0.393 0.144,0.363 0.253,0.157 0.549,-0.01 0.533,0.484 -0.165,0.155 -1.858,0.473 -0.211,0.172 -0.894,2.416 -0.287,0.591 -0.25,0.342 -0.274,0.631 -0.255,0.757 -0.104,0.084 -0.615,0.159 -0.596,0.505 -0.591,0.64 -0.314,0.219 -0.249,0.346 0.213,0.691 1.027,1.543 -0.205,0.603 0.473,1.278 0.746,-0.663 0.569,-0.304 0.668,-0.043 0.768,0.607 0.755,0.346 1.362,0.107 0.544,0.311 0.566,0.165 0.572,-0.069 0.926,-0.608 0.478,-1.356 0.914,-1.049 0.232,-0.477 -0.22,-0.878 -0.487,-0.688 0.063,-0.236 0.38,0.125 0.436,0.504 0.151,0.074 0.276,-0.01 0.249,-0.361 0.077,-0.457 -0.053,-0.479 -0.211,-0.771 -0.03,-0.406 1.892,-1.176 0.495,-1.014 0.133,-0.64 -0.055,-0.402 -0.235,-0.977 -0.168,-0.443 0.092,-0.364 1.104,0.38 0.314,-0.239 0.17,-0.231 0.127,-0.466 0.03,-0.623 0.07,-0.582 0.163,-0.289 0.999,0.84 0.219,0.038 0.221,-0.284 0.053,-0.291 -0.104,-0.329 0.036,-0.537 0.659,0.013 0.274,-0.12 0.399,-0.435 0.22,-0.434 0.389,-0.411 0.175,-0.315 -0.131,-0.448 -0.6,-0.266 0.101,-0.398 0.558,-0.512 0.163,-0.049 0.341,0.046 0.18,-0.147 0.309,-0.46 0.299,-0.578 0.594,-0.646 0.285,-0.644 0.301,-0.374 0.366,0.044 0.364,-0.097 1.263,-1.201 2.75,-1.658 0.76,-0.308 0.962,-0.743 0.336,-0.043 1.356,-0.535 1.353,-0.781 1.282,-0.586 1.173,-0.749 1.861,-0.914 1.052,-0.735 0.662,-0.294 0.656,-0.419 0.668,-0.622 1.123,-0.897 1.123,-0.559 0.16,-0.339 0.943,-1.62 0.958,-1.486 -0.117,-0.455 0.091,-0.597 0.144,-0.584 -0.084,-0.646 -0.107,-0.356 -0.489,-0.998 -0.599,-0.78 -1.315,-0.708 -1.025,-0.261 -0.328,0.047 -0.761,0.548 -1.221,0.496 -1.357,1.27 -0.792,0.919 -0.292,0.71 -0.27,0.907 -0.303,0.412 -0.331,0.008 -0.305,0.13 -0.614,0.602 -0.319,0.217 z m -22.795,-56.767999 -0.18,0.435 0.203,0.391 0.288,0.826 0.072,0.466 0.006,0.673 0.189,2.228 0.143,0.589 0.169,0.311 1.145,0.574 0.438,-0.313 0.58,-1.204 0.26,-0.087 0.084,-0.765 -0.005,-0.825 0.32,-0.35 2.406,-0.409 -0.392,-0.758 -0.404,-0.462 -1.379,-0.826 -2.689,-0.18 -1.254,-0.314 z m 10.529,-7.576 0.881,-0.369 0.93,-1.085 0.269,-0.707 -0.31,-0.971 -2.443,0.295 -1.232,1.281 -0.194,0.313 -0.057,0.261 0.738,0.521 1.418,0.461 z m 4.784,-13.297 0.117,0.269 0.875,0.466 1.806,0.236 0.344,-0.245 0.369,-0.781 -0.042,-0.277 -0.162,-0.448 -2.567,-0.615 -1.434,0.241 -0.499,0.528 1.147,0.391 0.046,0.235 z m -10.137,29.305 0.509,0.33 0.192,0.255 0.094,0.247 0.359,0.159 1.006,-0.526 0.623,-0.62 -0.307,-1.434 -0.722,-0.59 -1.524,1.058 -0.155,0.188 -0.075,0.933 z m -101.622,207.504999 0.341,-0.999 -0.018,-0.16 -0.248,-0.28 -0.306,-0.204 -0.169,-0.432 -0.62,-0.025 -0.585,0.024 -0.184,-0.021 -0.557,-0.181 -0.537,-0.292 -0.359,-0.171 -0.302,-0.192 -0.163,-0.202 -0.257,0.054 -0.174,0.002 -0.036,0.767 -0.095,0.843 -0.542,0.158 -0.304,-0.033 -0.318,-0.183 -0.271,-0.042 -0.233,-0.13 0.743,-0.984 0.276,-0.468 -0.163,-0.038 -0.152,0.268 -0.468,0.635 -0.445,0.526 -0.347,0.213 -0.812,-0.025 -0.374,0.172 -0.06,0.441 -0.026,0.391 -0.239,0.563 -0.282,0.43 -0.433,0.414 0.112,0.058 0.787,0.063 0.796,0.063 1.281,0.068 1.335,0.071 1.385,0.074 1.5,0.08 1.581,0.047 0.097,-0.032 -0.118,-0.234 -0.125,-0.421 0.013,-0.337 0.075,-0.339 z m 85.586,-104.893 -0.036,-0.483 -0.144,-0.232 -0.188,0.035 -0.225,-0.466 -0.255,-0.646 -0.355,-0.306 -0.125,-0.034 -0.033,0.122 0.026,0.304 -0.315,-0.248 -0.294,-0.015 -0.606,0.248 -0.159,0.279 0.027,0.352 0.112,0.127 0.382,0.271 0.34,-0.098 0.538,0.608 0.143,0.57 0.13,0.252 0.32,0.279 0.154,0.362 0.051,0.37 0.276,-0.115 -0.043,-0.149 -0.162,-0.273 0.066,-0.294 0.375,-0.82 z m 124.556,-105.601999 -1.31,0.25 -1.976,0.796 -0.391,-0.093 -0.322,0.216 -0.854,-0.215 -1.012,0.072 -0.3,0.535 -0.147,0.498 -0.159,0.188 -0.825,-1.078 -0.114,0.124 -0.369,0.885 -0.269,0.382 -1.044,1.117 -0.254,1.792 -0.614,1.167 -0.536,0.855 -1.241,1.096 -0.938,2.111 0.565,0.567 0.579,-0.067 0.786,0.173 1.291,0.75 0.267,1.44 0.473,1.339 0.386,0.393 0.034,0.769 0.058,0.199 0.39,0.606 0.644,0.502 0.316,0.045 0.853,-0.736 0.265,0.018 0.481,1.273 0.263,0.155 1.546,-0.212 0.232,0.188 1.061,0.266 0.178,0.31 0.173,0.438 0.885,0.961 0.863,0.601 0.373,-0.011 0.607,0.248 0.419,-0.155 0.641,0.375 0.36,0.104 1.146,-0.44 1.74,-0.231 0.284,-0.269 1.091,-1.584 -0.084,-0.661 -0.238,-1.322 -0.179,-0.175 -0.656,-0.334 -0.561,-1.45 -0.773,-0.992 0.176,-0.187 0.176,-0.014 0.619,0.477 0.42,-0.027 0.402,-0.707 0.115,-0.938 -0.043,-1.198 0.041,-0.436 0.078,-0.36 0.063,-0.812 0.029,-0.94 0.067,-0.387 0.095,-0.248 0.215,-1.089 0.408,-0.612 -0.322,-1.14 -0.359,-0.785 -0.258,-0.349 -0.534,-0.343 -0.178,-0.464 -0.287,-0.262 -0.213,-0.484 -1.203,-0.471 -0.757,-0.111 -0.182,0.14 -0.168,0.559 0.076,0.903 -0.409,1.103 -0.225,0.163 -0.586,-0.431 -0.543,0.773 -0.411,1.131 -0.204,0.328 -0.17,-0.226 0.101,-1.198 0.373,-0.725 0.135,-0.97 0.277,-0.765 0.312,-0.31 -0.32,-1.172 -0.643,-1.035 -0.247,-0.16 z m -2.799,54.638999 0.068,-0.502 -0.229,-0.169 -0.734,-0.322 -0.336,0.396 -1.023,-0.26 -0.538,0.523 -0.603,-0.466 -0.162,0.324 -0.03,0.553 1.031,0.248 0.465,0.393 0.742,0.056 0.538,0.395 0.148,-0.653 -0.008,-0.408 0.382,-0.254 0.289,0.146 z m 0.809,-1.586 -0.119,0.124 -0.007,0.246 -0.26,0.785 -0.003,0.601 0.042,0.131 0.122,0.086 0.157,-0.126 0.338,-0.44 0.222,-0.781 -0.022,-0.152 -0.154,-0.333 -0.316,-0.141 z m 8.601,-45.085999 -0.076,1.089 0.619,-0.196 0.462,-0.875 -0.446,-0.21 -0.205,-0.271 -0.315,0.168 -0.039,0.295 z m -7.387,41.060999 0.088,0.738 0.249,0.462 0.294,0.076 0.149,-0.181 -0.58,-1.305 -0.2,0.21 z m 28.86,-7.995 -0.302,-0.219 -0.337,0.006 -0.271,0.736 0.092,0.605 0.316,-0.015 0.742,-0.325 -0.042,-0.402 -0.099,-0.254 -0.099,-0.132 z m -20.575,-17.550999 -0.015,0.819 -0.119,0.538 -0.146,0.449 -0.11,0.47 -0.186,1.26 -0.108,0.576 -0.957,1.457 -0.371,0.754 -0.3,1.290999 -0.426,0.622 0.293,0.505 0.306,0.332 0.967,0.259 0.666,-0.244 1.288,-0.979 1.399,-1.298999 0.461,-0.669 1.37,-0.033 1.37,-0.15 1.226,-0.266 0.157,0.315 0.172,0.162 0.175,0.027 0.579,-0.934 2.01,-0.033 1.623,-1.062 0.623,-0.197 0.624,0.131 0.255,-0.18 1.347,-2.059 0.085,-1.329 -0.092,-1.027 -0.151,-0.958 -0.145,-0.675 -0.165,-0.562 -0.368,-0.354 -0.375,-0.168 -0.695,0.286 -0.509,-0.652 0.07,-0.631 -0.078,-0.594 -0.126,-0.193 -0.879,-0.53 -0.244,-0.729 -0.221,-0.899 -0.35,-0.388 -0.359,-0.011 -0.672,0.356 -0.658,0.813 -0.346,0.219 -0.353,0.011 -0.296,0.611 -0.272,0.951 -0.45,1.142 -0.491,0.521 0.1,-0.599 0.837,-3.371 0.116,-1.048 0.273,-1.163 0.154,-0.259 0.316,-0.171 0.128,-0.251 -0.158,-0.49 -0.707,-0.921 -1.08,-0.627 -0.344,0.048 -0.161,0.262 -0.124,0.603 -0.01,0.922 0.207,0.854 -0.344,0.054 -0.346,-0.168 -0.262,-0.725 -0.247,-0.889 -0.177,-0.026 -0.331,0.161 -0.147,0.166 -0.1,0.573 -0.034,0.878 -0.652,0.328 -0.321,0.423 -0.133,0.711 -0.271,0.501 0.044,0.4 -0.104,1.079 -0.184,0.247 -0.18,0.389 -0.104,0.795 -0.023,0.41 0.117,1.238 0.162,0.347 -0.225,0.07 -0.719,-0.199 -0.291,0.139 -0.279,0.499 -0.371,1.061 -0.058,0.677 z m 16.861,5.944 0.567,-0.534 0.09,-0.229 0.489,-0.046 0.112,0 0.002,-0.403 -0.08,-0.311 -0.143,-0.271 -0.515,-0.053 -0.299,0.934 -0.82,0.11 -0.097,0.613 0.357,0.295 0.337,-0.105 z m -35.55,-23.75 0.561,-1.399 -0.902,-0.586 -2.495,-0.893 -1.177,-0.792 -1.183,-0.111 -0.915,0.05 -0.552,0.3 -0.446,0.796 0.156,1.23 0.702,1.107 0.863,0.712 1.319,1.668 0.805,0.144 0.682,-0.152 0.682,-0.302 0.642,-0.521 0.638,-0.73 0.62,-0.521 z m -19.396,64.393999 0.659,0.188 0.237,-0.334 0.316,-0.84 -0.202,-0.461 -0.146,-0.102 -0.739,0.314 -0.235,-0.199 -0.134,-0.125 -0.283,0.291 -0.488,0.292 -0.202,0.489 0.37,0.459 0.847,0.028 z m 162.758,166.523 -0.221,-0.275 -0.492,-0.491 -0.254,-0.554 -0.193,-0.561 -0.091,-0.519 -0.113,-0.507 -0.163,-0.482 -0.262,-1.016 -0.651,-1.688 -0.225,-0.984 -0.566,-3.281 -0.128,-0.138 -0.044,-0.099 -0.016,-0.46 -0.033,-0.313 -0.106,-0.221 -0.272,-0.282 -0.059,-0.221 -0.014,-0.506 -0.124,-0.469 -0.168,-0.438 -0.099,-0.633 0.047,-1.214 0.081,-0.429 0.177,-0.164 0.087,-0.232 0.08,-0.389 0.025,-0.399 -0.022,-1.219 -0.104,-0.798 -0.078,-0.387 -0.102,-0.368 -0.36,-0.905 -0.498,-1.443 0.052,-0.079 -0.07,-0.32 0.043,-0.367 0.113,-0.349 0.053,-0.271 -0.026,-0.264 -0.604,-1.212 -0.191,-0.107 -0.075,0.279 -0.142,0.262 -0.18,0.118 -0.607,-0.008 0.369,0.633 0.571,0.859 0.101,0.345 -0.064,0.378 -0.112,0.375 0.129,0.031 -0.026,0.264 -0.356,0.103 -0.122,0.307 0.209,0.239 -0.161,0.42 -0.286,0.173 -0.15,0.038 -0.146,-0.014 -0.39,-0.369 -0.106,-0.055 -0.498,0.185 -0.314,0.314 -0.081,0.234 0.043,0.94 0.098,0.464 -0.051,1.14 -0.146,1.099 -0.156,0.463 -0.184,0.439 -0.061,0.395 0.021,1.547 0.147,0.393 0.245,0.261 -0.103,0.169 -0.139,0.07 0.139,0.208 0.284,0.271 0.373,0.493 0.238,0.41 0.325,0.927 0.004,0.999 -0.171,0.481 -0.131,0.504 -0.097,0.645 0.014,0.509 0.202,0.891 0.028,0.418 -0.03,2.813 -0.095,0.558 -0.118,0.548 -0.13,1 -0.114,0.454 -0.317,0.945 0.019,0.204 0.068,0.2 0.368,0.751 0.3,0.788 0.13,1.161 -0.091,0.464 -0.206,0.391 -0.169,0.448 -0.145,0.47 -0.005,0.181 0.061,0.811 0.093,0.425 0.061,0.43 -0.077,0.452 -0.406,1.375 -0.102,0.989 0.242,1.135 0.038,0.333 0.089,0.302 0.151,0.208 0.173,0.179 0.203,-0.331 0.166,-0.361 0.268,-1.086 0.129,-0.41 0.158,-0.39 0.203,-0.365 0.278,-0.23 0.162,-0.063 0.157,0.022 0.156,0.164 0.135,0.206 0.095,0.061 0.613,0.052 0.658,0.137 0.196,0.336 0.051,0.478 0.136,0.553 0.036,0.78 0.09,-0.165 0.053,-0.187 0.023,-0.237 0.051,-0.225 0.202,-0.529 -0.006,-0.184 -0.107,-0.687 -0.153,-0.722 -0.108,-0.163 -0.177,-0.056 -0.184,-0.007 -0.284,0.051 -0.111,-0.201 -0.249,-0.642 -0.234,-0.912 -0.184,-0.413 -0.098,-0.161 -0.116,-0.124 -0.177,-0.101 -0.156,-0.15 -0.211,-0.35 -0.256,-0.61 -0.063,-0.224 -0.03,-0.613 0.079,-0.782 0.216,-0.733 0.899,-2.838 0.155,-0.801 0.22,-0.399 0.368,-0.274 0.409,-0.12 0.982,-0.091 0.244,0.015 0.417,0.139 0.228,0.116 0.215,0.174 0.444,0.593 0.359,0.356 0.35,0.396 0.237,0.335 0.146,0.578 0.115,0.162 -0.02,-0.76 -0.06,-0.215 z m -168.32,-161.779 0.136,-0.623 0.32,-0.588 -0.542,0.033 -0.392,0.23 -0.424,0.377 0.111,0.252 0.791,0.319 z m -3.648,3.716 0.111,-0.124 0.128,0.033 0.149,-0.238 0.194,-0.181 -0.294,-0.337 -1.021,-0.3 -0.693,0.233 -0.238,0.382 0.957,0.167 0.707,0.365 z m 23.089,-80.209999 0.713,0.343 0.563,0.43 0.307,0.725 2.247,1.266 1.831,1.502 0.611,-0.008 1.279,-1.069 0.664,-0.816 0.271,0.053 0.842,-0.452 2.511,-0.436 3.703,-1.057 0.346,-0.526 0.333,-0.839 -0.366,-0.324 -0.103,-0.343 -0.379,-2.255 -0.119,-0.396 -0.133,-0.268 0.246,-1.345 0.304,-0.662 1.246,-0.443 0.229,-0.357 0.307,0.011 0.038,-1.136 -0.106,-0.613 -0.362,-0.5 -0.812,-0.267 -1.849,-2.058 -0.173,-0.65 -0.366,-0.645 -0.103,-0.82 -0.155,-0.43 -0.798,-1.542 -0.313,-0.162 -0.256,-0.342 -0.229,-0.906 -0.285,-0.367 -1.799,0.175 -0.277,1.526 -0.626,0.889 -0.635,0.451 -0.662,0.132 -0.661,0.324 -0.705,0.562 -0.707,0.365 -0.392,-0.019 -0.39,0.135 -0.823,0.775 -0.355,1.119 -0.487,0.582 -0.153,0.37 -0.28,1.096 -0.05,0.511 0.506,0.214 1.374,-0.396 -0.79,1.54 -0.433,1.46 -0.698,1.461 -0.93,0.582 -0.982,0.367 -0.586,0.998 -0.46,1.008 0.317,1.477 z m 41.475,32.014 1.645,0.601999 0.961,-0.04 0.387,0.555 0.35,-0.337 0.25,-0.657999 -0.343,-0.748 -0.183,-0.052 -2.596,0.299 -0.471,0.379 z m -30.127,14.600999 0.238,0.383 0.25,0.196 0.664,-0.344 0.332,0.129 0.123,-0.189 0.09,-0.242 0.39,-0.558 0.384,-0.734 0.002,-0.308 -0.094,-0.651 -1.893,1.362 -1.217,0.516 -0.422,0.47 0.264,0.092 0.889,-0.122 z m -16.011,-61.251999 3.5,0.893 0.966,-1.403 -0.251,-0.781 -1.035,-0.278 -2.916,-0.268 -0.474,0.788 0.052,0.401 0.158,0.648 z m 129.021,80.250999 0.202,-0.321 -0.155,-0.534 0.051,-0.401 0.521,-0.941 -0.117,-0.226 -0.625,-0.779 -0.155,-0.396 -0.172,-0.79 -0.251,-0.536 -0.238,0.903 -0.1,0.642 -0.048,0.833 0.088,0.677 -0.194,0.906 -0.141,0.365 -0.06,0.821 0.825,0.084 0.569,-0.307 z m 2.969,1.932 0.594,1.22 0.643,0.758 0.34,0.148 0.323,0.348 0.65,1.487 0.242,0.471 0.256,0.316 2.17,1.029 0.326,0.29 0.329,0.181 0.326,-0.033 0.31,-0.289 0.293,-0.664 0.231,-0.947 0.1,-0.712 0.163,-0.448 0.211,-0.2 0.217,0.004 0.709,0.744 0.721,0.514 0.551,-0.098 0.552,-0.277 1.823,-0.445 0.616,-0.259 0.613,-0.383 0.671,-0.094 0.315,0.436 0.237,0.554 0.289,0.534 0.256,0.229 0.265,0.087 0.43,-0.182 0.427,-0.326 0.982,-1.105 -0.557,-0.999 -0.653,-0.443 -0.226,-0.33 -0.987,-2.344 -0.186,-0.517 -0.134,-0.723 -0.182,-2.285 0.622,-0.353 0.684,-0.332 1.096,0.087 0.17,0.606 -0.046,0.301 -0.333,0.694 -0.373,0.306 -0.098,1.072 0.084,1.238 0.254,0.772 0.286,0.555 0.696,1.102 0.634,0.372 0.646,-0.013 1.105,0.428 0.551,-0.158 0.538,-0.469 1.335,-1.829 -0.194,-0.614 -0.246,-0.455 0.215,-0.562 0.618,-0.823 0.944,-0.457 -0.141,-0.377 -0.153,-0.243 -4.404,-3.164 -0.354,0.038 -0.698,0.437 -0.354,0.1 -0.725,-0.152 -0.723,-0.419 -0.587,-0.462 -1.288,-1.62 -0.728,-0.751 -0.721,-0.341 -0.522,0.857 -0.748,0.869 -0.133,0.283 -0.099,0.429 -0.068,0.697 0.002,0.778 0.039,0.563 0.011,0.559 -0.154,0.549 -0.206,0.241 -0.446,-0.039 -0.153,-0.111 -0.155,-0.218 -0.142,-0.302 -0.302,-1.208 -0.321,-0.304 -0.344,0.144 -0.29,-0.219 -0.856,-1.429 -0.603,-0.699 -0.891,-0.783 -0.287,-0.322 -0.257,-0.606 -0.275,-0.43 -0.296,-0.035 -1.076,0.816 -0.626,0.177 -0.313,0.402 -0.161,0.387 -0.173,0.227 -0.569,0.14 -0.418,0.319 -0.182,0.382 -0.167,0.525 0.26,0.991 0.316,0.729 -0.977,-0.251 -0.251,0.367 -0.151,2.208 0.21,2.298 -0.348,0.022 -0.516,-0.208 -0.098,0.441 0.042,0.61 0.126,0.393 z m 66.359,42.782 0.189,-0.144 -0.207,-0.52 -0.223,-0.345 -0.329,-0.088 -0.022,0.098 -0.01,0.613 0.19,0.268 0.412,0.118 z m -32.125,-59.467 0.179,-0.856 0.388,-0.428 -1.928,0.435 -0.762,0.85 -0.139,0.35 2.109,-0.142 0.153,-0.209 z m -6.397,18.574 0.614,0.696 0.317,0.153 1.038,0.274 0.319,0.292 0.648,0.803 0.339,0.339 0.573,0.271 2.114,0.299 1.534,-10e-4 0.678,-0.243 1.384,-0.766 0.698,-0.561 0.186,-0.277 0.494,-2.305 -0.184,-0.064 -0.187,0.078 -0.218,0.384 -0.23,0.222 -0.318,-0.376 -0.384,-0.325 -0.495,-0.606 -1.287,-0.279 -1.578,-0.193 -0.536,0.374 -0.848,-0.091 -0.323,-0.397 0.04,-0.408 0.083,-0.3 -0.027,-0.566 -0.215,-0.29 -2.625,-0.301 -0.15,0.028 -1.075,0.82 -0.744,-0.072 -0.132,-0.645 0.008,-0.915 -0.6,-0.802 -0.277,0.266 -0.269,0.867 -0.239,0.973 -0.201,1.088 -0.105,1.071 1.558,0.921 0.622,0.564 z m 16.728,-11.948 -0.062,-0.489 -0.081,-0.255 -0.1,-0.113 -0.439,0.235 -0.236,0.366 0.639,0.676 0.279,-0.42 z m 72.708,52.702 0.193,-0.038 0.816,-0.46 1.391,-0.16 0.655,-0.659 0.333,-0.149 0.746,0.184 0.639,0.415 0.255,0.038 0.727,-0.179 1.765,-0.645 1.307,-0.234 0.676,-0.222 0.837,-0.86 0.07,-0.455 -0.095,-0.383 -0.146,-0.163 -0.653,-0.51 -0.443,-0.444 -0.229,-0.414 -0.217,-0.245 -0.227,-0.143 -0.39,-0.42 -0.24,-0.106 -1.228,-0.318 -0.33,-0.144 -0.33,-0.027 -0.406,0.217 -0.409,0.045 -0.404,-0.14 -0.406,0.04 -0.432,0.239 -0.436,0.117 -0.318,0.127 -0.479,0.505 -0.473,0.164 -0.877,1.082 -0.966,0.816 -0.174,0.463 -0.407,0.626 -0.156,0.504 0.056,0.403 0.405,1.533 z m -49.583,13.338 0.031,0.684 0.129,0.225 0.509,0.292 0.272,0.383 -0.014,0.231 -0.095,0.518 0.125,-0.01 0.111,-0.207 0.029,-0.328 -0.063,-0.363 -0.282,-0.709 -0.047,-0.693 -0.014,-0.778 -0.061,-0.608 0.065,-0.354 0.466,-0.182 0.193,-0.515 0.023,-0.734 -0.271,-0.335 -0.044,-0.044 -0.269,0.353 -0.242,0.44 -0.597,0.569 -0.078,0.512 0.229,0.574 -0.105,1.079 z m 19.273,-4.632 0.426,0.506 0.571,0.396 1.594,0.749 0.8,-0.073 0.126,-0.166 0.05,-0.222 0.101,-0.856 0.093,-0.282 0.24,-0.078 0.044,-0.43 -0.036,-0.194 -0.129,-0.216 -2.854,-1.088 -0.454,0.06 -0.384,0.274 -0.547,0.604 -0.143,0.229 -0.07,0.295 0.091,0.14 0.481,0.352 z m -156.711,-66.486 0.401,0.137 0.274,0.651 0.385,0.405 0.121,-0.028 0.032,-0.367 0.078,-0.196 0.131,-0.124 -0.079,-0.523 -0.435,-0.821 -0.235,-0.278 -0.315,0.309 -0.759,-0.176 -0.119,0.081 0.095,0.281 0.425,0.649 z m 65.376,26.366 0.519,0.599 0.229,0.633 0.945,1.327 0.197,0.446 0.212,-0.29 0.174,-0.724 -0.624,-1.075 -1.146,-1.332 -0.678,-0.345 0.044,0.533 0.128,0.228 z m -30.778,3.379 0.172,-0.022 0.309,-0.383 -0.045,-0.125 -0.25,-0.338 -0.331,-0.093 -0.262,0.149 -0.002,0.183 0.086,0.361 0.323,0.268 z m 42.67,4.204 0.28,0.692 0.392,0 0.286,-0.061 1.025,-0.726 0.759,-0.164 0.256,0.059 1.203,0.559 1.162,0.768 1.486,0.285 0.605,0.28 0.688,-0.004 0.714,0.083 0.987,0.234 0.725,-0.103 0.112,-0.147 -0.077,-2.08 -0.149,-0.612 -0.188,-0.474 -1.978,-2.34 -0.573,-0.488 -0.702,-0.448 -0.71,-0.192 -0.701,0.108 -1.038,0.327 -0.343,-0.047 -0.295,0.107 -0.284,0.346 -0.28,0.543 -0.522,1.484 -0.292,0.642 -0.598,0.806 -0.633,0.251 -0.659,0.088 -0.658,0.224 z m -55.226,3.704 0.711,-0.433 -0.068,-0.168 -0.444,-0.478 -0.32,-0.106 -0.568,0.118 -0.341,0.301 0.426,0.761 0.604,0.005 z m 57.257,-8.653 0.274,0.031 1.412,-0.82 0.103,-0.52 0.142,-1.203 -0.05,-0.427 -0.115,-0.344 -0.265,-0.227 -0.267,-0.094 -1.24,0.075 -0.301,0.096 -0.299,0.212 -0.259,0.541 0.229,1.839 0.636,0.841 z m -162.584,-1.569 0.378,0.198 0.273,-0.352 -0.06,-0.208 -0.219,-0.382 -0.239,-0.132 -0.402,0.125 -0.148,0.187 0.146,0.327 0.271,0.237 z m 155.307,23.682 -1.501,0.071 -0.319,0.202 -0.108,0.009 -0.134,0.119 -0.05,0.113 0.041,0.245 0.524,0.409 0.221,-0.041 0.166,-0.148 0.152,-0.054 0.152,0.078 0.283,0.359 0.277,0.094 0.696,-0.745 -0.073,-0.311 -0.213,-0.357 -0.114,-0.043 z m -136.163,-58.951 0.603,-0.061 0.426,-0.833 0.039,-0.328 -0.179,-0.392 -0.939,0.122 -0.228,0.376 -0.164,0.574 0.105,0.214 0.337,0.328 z m 216.605,166.063 -0.211,-0.272 -0.438,-0.782 -0.051,-0.377 0.129,-0.342 -0.18,-0.059 -0.787,-0.135 -0.283,0.219 -0.223,0.061 0.676,0.511 0.209,0.269 0.045,0.29 0.104,0.226 0.31,0.458 0.267,0.351 0.159,0.129 0.23,0.055 0.161,0.288 0.348,0.356 0.015,-0.704 -0.204,-0.334 -0.276,-0.208 z m -33.303,25.461 -0.006,0.372 0.291,0.113 0.269,-0.19 0.055,-0.154 -0.077,-0.518 0.228,-0.423 0.046,-0.276 -0.21,-0.072 -0.596,1.148 z m -4.39,6.7 -0.182,0.288 0.056,0.06 0.14,0.031 0.133,-0.236 -0.062,-0.191 -0.085,0.048 z m 8.288,-12.702 -0.328,0.322 -0.314,0.889 -0.26,0.359 -0.691,0.14 -0.301,0.332 -0.304,-0.021 -0.065,0.146 0.134,0.227 0,0.516 0.129,0.146 0.304,0.087 0.146,-0.159 0.189,-0.296 0.256,-0.138 0.519,-0.108 0.361,-0.438 0.347,-0.656 0.157,-0.473 0.063,-0.494 -0.073,-0.445 -0.269,0.064 z m 1.051,-0.466 -0.459,0.343 -0.126,0.234 0.079,0.131 0.363,0.278 0.111,0.023 0.111,-0.105 0.219,-0.414 0.013,-0.406 -0.089,-0.074 -0.222,-0.01 z m -209.917,-163.14 0.211,0.465 0.121,0.092 0.457,-0.397 0.125,0.593 0.206,0.172 0.201,-1.037 0.362,0.022 0.118,-0.128 -0.036,-0.405 -0.102,-0.361 -0.019,-1.076 -0.404,0.024 -0.306,0.177 -0.009,0.422 0.048,0.558 -0.237,0.032 -0.365,-0.495 -0.594,0.93 0.089,0.314 0.134,0.098 z m 207.608,163.369 0.256,-0.05 0.024,-0.104 -0.039,-0.289 -0.199,-0.106 -0.284,0.093 0.045,0.195 0.083,0.143 0.114,0.118 z m -9.508,15.78 -0.354,0.392 -0.492,0.599 -0.419,0.066 0.023,0.098 0.086,0.166 0.172,0.005 0.523,-0.45 0.806,-1.005 -0.152,-0.005 -0.193,0.134 z m 5.502,-7.504 -0.097,0.308 -0.279,0.253 0.023,0.071 0.119,0.072 0.107,-0.219 0.346,-0.284 0.067,-0.148 -0.083,-0.055 -0.203,0.002 z m -22.669,22.126 -0.059,0.051 0.012,0.051 0.037,-0.009 0.068,-0.047 0.047,-0.029 0.04,-0.042 -0.034,-0.034 -0.111,0.059 z m 0.798,-0.825 -0.064,-0.017 -0.074,0.051 -0.028,0.034 0.041,0.017 0.123,0.021 0.074,-0.021 -0.024,-0.073 -0.048,-0.012 z m -0.353,-3.31 -0.268,-0.01 -0.482,0.89 -0.141,0.094 -0.107,0.217 -0.221,0.25 -0.07,0.224 -0.23,0.282 -0.573,0.498 -0.101,0.235 0.037,0.284 0.327,0.28 0.087,-0.699 0.506,-0.371 0.338,-0.416 0.074,-0.218 0.557,-0.555 0.17,-0.089 0.347,-0.048 0.394,-0.37 0.224,0.004 0.145,-0.258 -0.595,0.062 -0.418,-0.286 z m -0.775,4.044 -0.049,0.006 -0.052,0.003 -0.039,-0.02 -0.035,0.007 0,0.028 0.035,0.025 0.014,0.042 0.021,0.051 0.037,-0.01 0.067,-0.013 0.034,-0.003 -0.007,-0.073 -0.026,-0.043 z m 8.122,-7.833 0.002,-0.12 -0.039,-0.096 -0.11,-0.066 -0.186,0.023 -0.265,0.144 -0.809,0.806 -0.545,0.096 -0.208,-0.016 -0.257,-0.46 -0.113,-0.022 -0.145,0.33 0.036,0.297 -0.326,0.139 -0.313,0.387 -0.281,0.121 -0.357,0.464 -0.516,0.352 -0.258,0.354 -0.039,0.405 -0.468,0.383 -0.114,0.207 -0.102,0.426 0.564,-0.498 0.306,-0.087 0.288,-0.487 0.711,-0.622 0.13,-0.202 0.035,-0.229 0.101,-0.128 0.354,0.074 0.363,-0.126 0.257,-0.316 0.722,-0.582 0.428,-0.12 0.519,-0.28 0.537,-0.025 0.13,-0.154 -0.096,-0.203 0.064,-0.169 z m 4.163,-2.989 -0.972,0.72 -0.467,0.586 -0.365,0.146 -0.614,0.987 0.258,0.008 0.417,-0.203 0.55,-0.565 0.198,-0.158 0.288,-0.108 0.388,-0.337 0.111,-0.318 0.894,-0.792 -0.573,-0.02 -0.113,0.054 z m -9.778,9.263 -0.568,0.184 -0.023,0.062 -0.014,0.219 0.208,0.094 0.087,-0.106 0.52,-0.234 -0.042,-0.097 -0.168,-0.122 z m 10.781,-69.686 -0.206,0.344 -0.344,0.235 0.005,0.105 0.11,0.149 0.221,-0.062 0.387,-0.417 -0.042,-0.148 -0.131,-0.206 z m 39.028,-0.334 -0.155,-0.031 -0.885,0.713 -1.238,0.442 0.017,0.232 0.05,0.231 -0.162,0.711 -0.421,0.851 -0.419,0.333 0.013,0.176 0.043,0.115 0.068,0.082 0.459,-0.504 0.912,-0.757 0.895,-0.51 0.945,-0.257 0.129,-0.462 -0.091,-0.771 -0.16,-0.594 z m -248.146,-177.497999 0.853,0.516 0.503,0.016 0.036,0.788 0.451,0.06 2.186,-0.191 -0.111,-0.346 -0.531,-0.502 -2.505,-1.341 -0.267,0.435 -0.347,-0.559 -0.282,-0.209 -0.272,0.308 0.058,0.298 0.228,0.727 z m -0.039,73.997999 -0.159,0.306 0.425,0.466 1.193,0.362 0.271,-0.062 -1.418,-1.081 -0.312,0.009 z m -0.877,0.941 0.207,-0.221 0.422,-0.67 -0.033,-0.105 -0.307,-0.136 -1.012,0.327 -0.547,0.625 -0.086,0.444 0.447,-0.24 0.909,-0.024 z m -3.908,5.347 0.431,0.253 0.141,0.165 0.063,-0.092 0.103,-0.327 -0.104,-0.207 -0.036,-0.38 0.268,-0.611 0.614,-0.287 -0.663,-0.44 -0.352,-0.132 -0.536,-0.084 -0.591,0.207 -0.157,0.335 -0.118,0.508 0.226,0.443 0.711,0.649 z m 13.088,-100.633999 2.604,-0.636 0.894,-0.35 0.08,-0.259 0.152,-0.8 -0.416,-0.394 -1.327,-0.457 -1.653,0.269 -0.302,0.655 -0.371,1.335 0.082,0.237 0.257,0.4 z m -25.202,99.209999 0.505,0.114 0.229,-0.035 0.824,-0.452 0.598,-0.237 1.315,-0.415 0.76,-0.111 0.012,-0.493 -0.114,-0.568 -0.406,-0.576 -0.263,-0.295 -0.336,-0.742 -0.254,-0.298 -0.331,-0.259 -0.233,-0.101 -1.656,0.363 -0.563,0.324 -0.432,0.838 0.064,1.318 -0.093,0.535 -0.155,0.413 -0.028,0.406 0.338,0.456 0.219,-0.185 z m 24.591,2.907 1.544,0.387 0.198,-0.106 0.103,-0.449 0.01,-1.419 -0.362,-0.617 -0.156,-0.533 -0.54,-0.537 -1.424,1.938 -0.066,0.396 0.16,0.45 0.533,0.49 z m 249.783,119.036 -0.483,-0.386 -0.331,-0.134 -0.227,-0.288 -0.197,0.005 0.131,0.296 0.531,0.472 1.134,0.894 -0.119,-0.252 -0.439,-0.607 z m -254.001,-117.283 -0.329,0.739 -0.312,0.437 -0.691,0.683 -0.09,0.449 0.098,0.179 0.673,0.146 1.366,-0.086 0.416,-0.16 0.636,-0.776 0.413,-0.228 0.592,-0.608 -0.035,-0.204 -0.207,-0.457 -1.488,-0.731 -0.478,0.003 -0.564,0.614 z m 167.317,115.325 -0.562,0.408 -0.227,0.26 0.142,0.049 0.386,-0.071 0.188,0.178 0.241,-0.013 0.346,-0.848 -0.063,-0.036 -0.22,0.079 -0.231,-0.006 z m 2.906,0.192 -0.254,-0.192 -0.085,-0.085 -0.935,-0.426 -0.095,0.167 -0.303,0.72 -0.144,0.075 -0.307,0.535 -0.119,0.489 0.121,-0.009 0.523,-0.394 0.177,0.231 0.381,0.837 0.169,-0.048 0.193,-0.163 0.224,-0.255 0.251,-0.191 0.089,-0.154 0.071,-0.39 0.225,-0.439 0.308,-0.208 -0.096,-0.13 -0.394,0.03 z m 146.47395,-64.032 -0.312,-0.141 -0.997,-0.04 0.146,-0.222 -0.056,-0.245 -0.099,-0.247 -0.152,-0.155 -0.168,-0.027 -0.343,0.138 -0.341,0.203 0.173,-0.293 0.196,-0.204 -0.103,-0.164 -0.129,-0.095 -1.042,-1.21 -0.624,-0.444 -0.593,-0.594 -0.587,-1.008 -0.635,-0.807 -0.662,-0.298 -0.68,0.056 -0.487,-0.188 -0.487,-0.252 -1.08495,-0.274 0.017,0.223 1.17595,0.403 0.176,0.181 -0.082,0.157 -0.256,0.04 -0.90395,-0.122 -0.269,-0.099 -0.248,-0.309 -0.13,0.039 -0.099,0.18 0.034,0.41 0.114,0.333 -0.234,0.175 -0.248,-0.081 0.012,-0.413 0.055,-0.326 0.279,-0.576 0.158,-0.123 0.027,-0.122 -0.943,-0.26 -0.26,-0.199 -0.261,-0.087 -0.574,0.276 -1.581,0.024 -0.288,0.09 -0.012,0.199 0.1,0.1 0.247,0.082 0.25,-0.015 0.163,0.274 0.363,0.14 0.19,0.28 0.127,0.482 0.063,0.343 0.037,0.348 -0.154,0.63 -0.222,0.263 -0.258,0.146 0.099,0.361 0.265,0.282 0.508,0.133 0.221,0.235 0.192,0.377 -0.163,0.48 -0.19,0.389 -0.156,0.165 -0.109,0.286 -0.087,0.112 -0.111,0 0.133,-1.066 -0.188,-0.635 -0.341,0.146 -0.143,0.167 -0.307,0.561 -0.078,0.029 -0.069,-0.194 -0.099,-0.406 -0.067,-0.437 -0.072,-0.322 -0.306,-0.335 -0.175,-0.127 -0.532,-0.068 -0.17,-0.071 0.154,-0.72 0.277,-0.422 -0.035,-0.944 -0.126,-0.319 -0.158,-0.279 -0.149,-0.667 0.021,-0.797 0.17,-0.472 0.057,-0.584 -0.191,-0.428 -0.237,-0.218 -0.177,0.176 -0.161,0.266 -0.09,0.084 -0.617,0.058 0.399,-0.651 -0.02,-0.545 -0.074,-0.333 -0.123,-0.261 -0.1,-0.561 -4.384,-3.287 -0.742,-0.418 -0.353,-0.361 -0.31,-0.171 -0.317,0.063 -0.192,0.095 -0.141,-0.128 0.13,-0.302 0.185,-0.101 -0.438,-0.519 -1.59,-1.364 -0.346,-0.186 0.248,0.361 1.187,1.071 0.183,0.306 -0.353,0.39 -0.375,0.164 0.104,-0.438 -0.084,-0.5 -0.137,-0.277 -0.413,-0.32 -0.644,-0.268 -0.614,-0.339 -0.123,-0.361 -0.042,-0.519 0.387,0.441 0.211,0.134 -0.423,-0.688 -0.519,-0.61 -1.134,-0.548 -0.215,-0.216 -0.322,-0.462 -0.123,-0.037 -0.227,0.083 -0.57,-0.265 -0.565,-0.336 -0.37,-0.229 -1.671,-1.945 -0.904,-0.287 -0.071,-0.239 -0.051,-0.287 -0.165,-0.2 -1.138,-0.525 -1.429,-0.341 -1.514,-0.931 -1.319,-0.277 -1.442,-0.991 -0.85,-0.746 -0.522,-0.286 -0.478,-0.072 -1.279,0.359 -1.431,0.036 -1.309,-0.211 -1.042,0.061 -0.603,-0.139 -0.827,-0.455 -0.239,0.187 -0.214,0.818 -0.62,-0.334 -0.524,-0.447 -0.869,-0.397 -1.653,-0.262 -2.031,-0.623 -1.063,-0.164 -1.069,-0.095 0.108,1.393 -0.063,0.664 -0.403,0.858 -0.444,0.548 -0.113,0.457 1.183,0.348 0.37,1.562 0.476,0.99 0.317,1.018 -0.004,0.703 -1.284,1.716 -1.325,0.207 -1.279,0.098 -0.548,-1.038 -0.292,-1.251 -1.022,-0.659 -1.006,-0.514 -0.462,-0.088 -0.337,-0.253 -0.205,-1.396 -0.225,-1.045 -0.287,-0.388 -0.274,-0.593 -0.261,-0.235 -0.643,-0.099 -1.558,1.499 -0.529,0.438 -0.18,0.002 -2.357,-0.372 -0.616,-0.309 -3.501,-0.199 -0.993,-0.889 -0.6,-0.128 -0.675,0.27 -0.582,0.069 -0.833,-0.174 -0.72,0.259 -1.598,0.271 -0.588,0.303 -0.62,0.534 -1.146,1.324 -0.159,0.631 0,0.779 0.239,1.084 0,1.241 -0.197,0.431 -0.365,0.208 -0.378,1.308 -0.354,0.703 -0.697,0.185 0.396,-0.531 0.371,-0.356 0.594,-1.947 -0.086,-0.602 -0.475,-0.443 -0.296,-0.465 -0.15,-1.867 -0.148,-0.989 -0.052,-1.185 -0.48,-0.394 -1.74,-0.603 -0.805,-0.447 -0.289,-0.693 0.308,-0.979 -0.021,-0.751 0.163,-0.637 0.263,-0.519 0.065,-0.733 -0.135,-0.951 -0.131,-0.691 -0.301,-0.833 -0.216,-0.378 -1.059,-1.198 -1.819,-1.234 -1.867,-0.897 -1.655,-0.305 -2.141,-0.166 -2.215,-0.015 -0.84,0.492 -1.59,0.038 -1.728,0.515 -1.739,0.811 -0.937,0.012 -1.858,0.368 -0.813,0.009 -2.096,-1.269 0.667,-0.172 0.261,-0.18 -0.935,-1.686 -0.498,-0.604 -1.227,-0.76 -0.498,-0.059 -0.41,0.154 -1.624,0.838 -0.408,0.354 0.806,-0.981 0.395,-0.413 0.4,-0.611 -0.093,-0.385 -0.098,-0.188 -1.513,0.083 -0.097,-0.093 -0.319,-0.526 -0.156,-0.185 -1.008,-0.557 -0.729,-0.213 -0.757,-0.022 -0.126,-0.216 0.088,-0.264 0.029,-0.167 0.234,-0.296 0.648,-0.268 1.688,-0.157 0.381,-0.475 -0.053,-0.496 -0.098,-0.378 -0.553,-0.901 -0.743,-0.668 -1.506,-0.808 -1.58,-0.549 -2.717,-0.268 -0.482,0.12 -0.379,0.331 -0.651,0.87 -1.479,2.508 -0.827,1.025 -0.754,0.555 -1.729,0.454 -0.317,-0.104 -0.241,-0.411 0.079,-0.361 0.157,-0.334 0.011,-0.214 -0.087,-0.418 0.048,-0.226 0.174,-0.01 0.408,0.294 0.382,0.041 0.98,-0.462 0,-0.72 -0.26,-0.421 0.129,-1.011 -0.001,-0.263 0.138,-0.18 0.114,0.037 0.707,0.73 0.241,-0.039 0.261,0.082 -0.63,1.747 0.302,0.004 0.81,-0.821 0.555,-0.803 0.583,-1.036 0.069,-0.542 -0.667,-0.065 -4.364,0.393 -1.596,0.782 -0.493,-0.164 -0.353,-0.608 0.538,-0.06 0.636,-0.37 0.53,-0.71 0.34,-0.13 0.885,0.033 0.714,0.284 2.154,0.115 0.051,-0.858 -0.476,-0.271 -1.036,-0.242 -0.641,-0.417 -0.805,-0.263 -1.77,-0.373 -0.743,-0.311 -1.748,-0.285 -0.464,-0.236 -4.081,-0.212 -1.524,-0.643 -0.586,-0.656 -1.407,-0.316 -0.281,0.009 -0.09,0.175 -0.066,0.274 0.899,1.192 0.029,0.819 0.27,0.404 -1.051,0.636 -0.714,0.241 -2.384,-0.028 -0.357,0.276 -0.935,1.268 0.012,0.603 0.088,0.927 0.714,0 0.21,-0.405 0.313,-0.165 1.452,0.147 0.149,0.168 -0.487,0.268 -0.469,0.124 -0.581,1.369 -0.788,0.426 0.542,0.223 0.479,0.377 -0.078,1.656 0.684,1.271 0.128,0.585 -0.988,0.02 -0.875,0.393 -0.312,0 -0.573,-0.983 -0.631,-0.648 -0.31,-0.052 -0.406,0.64 -0.581,-0.355 -0.235,0.057 -0.325,0.268 -0.196,0.356 -0.148,0.552 -0.191,0.298 -0.025,0.402 0.291,0.181 0.211,0.042 0.608,0.29 -0.627,0.158 -0.163,0.189 -0.056,0.219 -0.474,0.296 0.163,0.285 0.201,0.221 0.051,0.225 -0.146,0.081 -0.397,-0.265 -0.414,-0.385 -0.653,-0.793 -0.287,-0.529 -0.56,-0.494 -1.992,-1.371 -0.886,-0.434 -0.577,-0.098 -0.914,0.18 -0.561,0.593 -0.945,0.252 -0.586,0.48 -0.312,0.65 -1.684,0.069 -1.162,-0.486 -0.737,-0.501 -0.829,-1.025 -0.817,-1.325 -0.101,-0.111 -0.099,-0.279 -0.147,-0.655 -0.174,-0.492 -0.257,0.277 -0.664,1.52 -0.275,0.745 -0.361,1.408 -0.268,1.178 -0.036,0.499 0.125,0.43 -0.361,0.36 -0.386,0.879 -0.581,1.726 -0.364,0.623 -0.46,0.535 -0.312,0.199 -0.381,-0.033 -0.347,-0.489 -0.186,-1.132 -0.21,-0.227 -0.249,0.635 -0.369,-0.036 -0.718,-0.47 -0.716,-1.018 -0.741,-0.469 -1.045,-2.491 -0.464,-0.917 -0.253,-0.745 -0.594,-0.079 -0.223,-0.549 0.297,-0.394 0.8,-0.333 0.637,0.05 -0.475,-0.996 -0.229,-0.602 -0.249,-0.328 0.092,0.674 -0.105,0.486 -0.215,0.379 -0.36,0.243 -1.552,-3.01 -0.933,-1.481 -0.519,-0.537 -0.324,-0.972 0.217,-0.193 1.104,1.152 0.781,0.59 1.29,1.521 0.979,-0.115 0.356,-0.679 0.003,-1.372 -0.365,-1.132 -0.463,-0.447 -1.592,-0.094 -0.368,-0.367 0.254,-0.114 0.351,-0.026 0.51,-0.335 0.849,-0.855 0.373,-0.266 -0.061,-0.667 -0.594,-0.918 -0.964,-0.128 -0.21,-0.089 0.382,-0.459 0.332,-0.281 0.563,-0.699 0.131,-0.646 -0.116,0.047 -0.409,-0.03 -0.117,-0.278 0.048,-0.493 -0.443,-0.419 -0.403,-0.282 -0.924,-0.049 0.018,-0.324 0.049,-0.292 -0.393,-0.213 -0.325,-0.376 -0.081,-0.342 -0.117,-0.196 -0.603,-0.355 -1.99,-0.651 -0.213,0.19 -0.328,0.927 -0.803,0.974 -0.608,-0.527 -0.121,-0.053 -0.099,-0.251 0.145,-0.432 0.102,-0.42 -0.138,-0.3 -0.116,-0.114 -0.413,0.304 -0.616,0.192 -0.262,0.292 -0.55,0.207 0.052,-0.722 -2.304,-1.901 -0.716,-0.396 -0.43,-0.036 -1.035,0.426 -0.239,0.23 -0.385,0.623 -0.858,-0.394 -0.21,0.294 -0.312,1.032 0.049,1.007 0.092,0.278 0.08,0.541 0.329,0.836 0.34,0.665 -0.14,0.154 -0.142,0.043 -0.169,0.278 -0.16,0.565 -0.291,0.807 -0.395,0.45 -0.452,-0.094 -1.078,-0.607 -0.248,0.108 -0.069,0.441 0.643,0.376 0.059,0.237 -0.168,0.15 -0.434,0.124 -0.778,-0.026 -0.646,-0.159 -0.403,-0.608 -0.388,-0.084 -1.104,-0.012 -1.003,0.327 -1.12,-0.425 -1.898,0.093 -0.48,-0.074 -0.912,-0.815 -1.305,-0.514 -1.488,-1.253 -0.15,-1.179 0.226,-0.955 0.835,-10e-4 0.511,-0.165 -0.071,-0.367 -0.112,-0.193 -1.181,-0.515 -3.204,-0.093 -2.282,-0.766 -3.249,-0.265 -1.465,0.951 -2.12,0.224 -0.571,0.508 -0.973,0.281 0.082,0.703 0.482,0.542 0.235,0.109 0.255,0.212 -0.159,0.188 -0.18,0.084 -0.354,0.433 -0.226,0.398 0.063,0.876 -0.109,0.848 -0.352,1.172 -0.297,0.514 -0.27,0.689 0.231,0.635 0.263,0.263 0.669,0.32 0.23,0.215 -0.134,0.185 -0.988,-0.215 -0.354,-0.687 -0.078,-0.372 -0.085,-0.581 0.336,-0.633 0.342,-0.427 0.296,-1.017 0.036,-0.938 0.009,-1.956 -0.601,-0.445 -0.336,-0.669 0.582,-1.218 0.146,-0.645 -0.251,-0.597 -0.408,-1.305 -0.417,-0.772 -0.274,-0.322 -0.278,-0.166 0.291,1.278 -0.234,0.649 -0.17,0.251 -1.11,0.35 -0.709,0.022 -0.964,-0.364 -1.132,-0.829 -0.283,-0.576 -0.201,-0.848 0.651,-0.369 0.254,-0.241 -0.587,-0.192 -0.591,-0.056 -0.21,1.155 -0.382,-0.086 -1.849,-0.707 -0.498,0.234 -0.603,0.647 -0.267,0.5 -0.305,0.816 0.115,0.567 0.129,0.212 0.95,0.141 0.834,-0.175 0.938,-0.54 0.216,0.202 0.193,0.292 -0.266,0.416 -0.968,0.601 -1.609,1.55 -0.612,0.182 -0.858,-0.33 -0.465,0.865 -0.212,0.208 -1.444,0.581 -0.629,0.086 -0.185,0.433 -0.378,0.078 -0.42,0.217 -0.704,0.606 -1.071,0.097 -0.729,-0.137 -1.771,0.367 -0.457,0.319 -0.298,0.442 -0.139,0.563 -0.26,0.5 -1.007,1.079 -0.857,0.443 -0.727,0.123 0.699,-0.607 0.798,-1.128 1.436,-3.372 1.377,-0.221 0.322,-0.451 1.047,-2.099 0.292,-0.314 1.387,-0.04 1.219,-0.689 2.457,-3.414 1.223,-0.577 0.841,-0.824 0.15,-0.409 0.133,-0.541 -0.126,-0.329 -0.073,-0.299 1.082,-0.59 0.415,-0.913 1.457,-0.862 1.14,-1.166 1.598,-0.868 0.908,-1.21 2.058,-1.748 1.933,-3.042 0.316,-1.751 -0.47,-0.575 -0.569,-0.361 -0.317,-0.869 -0.229,-0.103 -0.578,0.548 -0.634,-1.876 -0.776,-1.057 0.036,-0.155 0.086,-0.071 0.372,0.166 1.396,1.56 0.744,0.236 0.218,0.24 0.135,0.394 -0.088,0.653 0.229,-0.05 0.146,-0.274 0.361,-1.269 0.344,-1.727 -0.039,-0.751 -0.823,0.341 -0.382,-2.557 -0.175,-0.782 -0.261,-0.857 -0.523,-0.076 -0.275,0.217 0.219,0.289 0.237,0.479 -0.158,0.487 -0.133,0.22 -0.64,0.647 -0.456,0.059 0.184,-0.275 0.215,-0.613 -0.156,-0.672 -0.164,-0.375 -0.182,-1.951 -0.579,-0.295 -0.326,-0.315 -0.433,0.128 -0.562,0.52 0.208,-0.479 0.217,-0.716 -0.436,-0.88 -0.429,-0.605 -0.521,-0.228 -0.584,-0.782 -0.779,-0.444 -1.806,-0.433 -1.38,0.564 -1.717,-0.457 -2.052,0.355 -0.804,0.007 -0.479,-0.224 -0.431,0.237 -0.219,0.705 -0.134,1.102 -0.506,0.572 -0.275,0.146 -1.309,-0.168 -0.933,0.529 -0.399,-0.416 -0.757,0.029 -0.081,-0.931 0.451,0.038 0.263,0.156 0.848,-1.909 0.699,-1.122 0.673,-1.292 -0.424,-0.801 -0.946,-0.542 -0.443,0.033 -0.221,0.225 -1.028,-0.426 -0.542,0.032 -0.907,0.597 -0.31,-0.049 -0.186,-1.243 -0.914,0.105 -3.137,-0.119 0.34,-0.388 1.651,-0.531 1.326,-0.799 0.981,-1.457 0.913,-0.494 -0.214,-0.735 -0.249,-0.533 -0.518,-0.472 -1.126,-0.312 -0.965,-0.593 -0.424,-0.751 -1.767,-1.031 -0.478,0 -1.273,1.295 -0.645,-0.12 -0.561,0.191 -1.463,1.537 -3.066,3.979 -0.631,1.218 -0.301,0.915 -0.549,0.475 -0.236,1.115 0.041,0.965 0.246,0.505 0.256,0.947 -0.262,1.081 -0.219,0.706 0.209,0.316 0.591,-0.063 1.32,0.604 -0.241,0.555 -0.805,-0.476 -0.702,0.02 -0.609,-0.577 -1.463,0.554 -1.085,-0.129 -1.009,0.221 -1.983,-0.458 -0.18,0.348 0.46,0.597 0.349,0.555 1.03,1.296 0.438,0.412 0.586,1.225 0.073,2.391 -0.32,0.572 -0.359,0.795 -0.192,0.146 -0.277,-0.053 0.45,-0.56 0.244,-1.201 0.228,-0.839 -0.301,-0.573 -0.134,-0.05 -0.148,-0.315 -1.054,-0.801 -0.568,-0.351 -0.6,-0.194 -0.306,-0.22 -0.898,0.731 -0.414,0.166 -0.49,0.384 -0.285,0.526 -0.697,0.124 -0.09,0.57 -0.389,0.566 -0.417,-0.617 -0.407,0.171 -0.916,1.015 -1.072,0.459 0.114,-0.35 0.176,-0.789 -0.258,-0.182 -1.61,0.92 -0.536,0.619 -0.254,-0.229 0.934,-1.358 0.251,-0.841 -0.437,-0.364 -0.958,-0.283 -0.615,-0.027 -0.9,0.305 -1.299,-0.447 -0.193,0.512 -0.333,0.061 -0.802,-0.243 -0.729,0.261 -0.546,0.549 -0.811,-0.543 -0.281,0.023 -0.434,0.849 -0.374,-0.573 -0.316,1.11 0.089,0.804 0.27,0.083 0.23,-0.117 0.134,-0.367 0.174,-0.166 0.64,0.667 0.194,-0.365 0.277,-0.271 0.316,0.401 1.317,-0.435 -0.228,0.535 -1.475,0.677 -2.658,0.858 -0.548,0.336 -1.577,0.295 -1.027,0.84 -1.332,0.001 -2.301,0.661 -1.655,1.49 -0.8,-0.133 -1.62,1.125 -0.644,0.872 -2.336,1.768 -1.404,-0.681 -0.463,0.24 -0.236,0.624 0.048,0.487 0.566,-0.045 0.412,0.215 0.505,0.427 -0.135,0.783 -1.06,1.741 -0.502,0.65 -0.594,0.376 -1.264,-1.427 -0.229,0.629 -0.17,0.311 -0.5,-0.128 -0.252,1.011 0.913,0.175 0.868,0.455 0.771,0.664 0.545,0.763 0.595,0.482 0.347,0.414 -0.931,0.401 -0.655,-0.926 -0.354,-0.313 -0.4,-0.061 -0.598,0.283 -0.509,1.114 0.495,0.379 1.104,0.369 0.354,0.499 1.438,3.23 0.358,0.329 0.466,0.137 0.19,0.219 -0.566,0.551 -0.21,0.513 -0.489,0.894 -2.088,0.459 -0.621,0.338 -0.172,0.156 -0.262,0.329 -0.169,0.29 -0.081,0.649 0.171,0.425 0.424,0.394 1.665,1.757 -0.107,0.184 -0.456,-0.326 -0.579,-0.535 -0.589,-0.747 -0.786,-0.53 -0.044,-0.438 -0.027,-0.654 0.021,-0.203 0.075,-0.334 0.749,-0.846 0.763,-0.413 0.932,-0.968 0.932,-1.077 -0.191,-0.369 -0.192,-0.266 -0.846,-0.072 -1.719,0.377 -1.032,0.356 -0.457,0.873 -0.695,0.131 -0.346,0.021 -0.953,-0.434 -0.899,0.409 -2.106,0.355 -0.343,0.199 -4.849,0.077 -0.978,0.184 -2.485,0.715 -0.06,0.53 0.095,0.404 -0.386,0.594 -0.169,0.558 0.059,0.657 0.016,0.569 0.087,0.737 0.151,0.667 0.362,0.355 0.333,0.23 0.236,0.729 -0.19,0.844 -0.275,0.964 -0.054,0.446 0.178,0.604 0.219,1.199 0.083,0.296 0.761,0.916 0.518,0.286 0.852,0.066 0.58,0.232 0.845,0.564 0.252,0.256 0.072,0.242 0.2,0.971 0.108,0.304 0.915,1.331 0.308,0.202 1.25,0.254 0.394,0.424 0.544,1.287 0.054,0.305 0.05,0.493 -0.059,0.45 -0.054,0.261 -0.206,0.413 -0.538,1.683 -0.322,1.498 0.513,0.994 0.688,1.906 0.203,0.796 0.237,1.062 -0.1,0.673 -0.113,0.403 -0.457,0.61 -0.571,0.2 -0.616,0.371 0.057,0.461 0.106,0.529 -0.063,0.393 -0.081,0.136 -0.336,0.04 -0.293,-0.134 -0.251,-0.409 -0.238,-0.526 0.169,-0.571 0.498,-1.008 0.31,-1.454 0.079,-0.966 -0.021,-1.025 -0.115,-0.686 -0.396,-0.51 -0.368,0.11 -0.408,0.447 -0.396,1.703 -0.542,1.238 -0.075,0.51 0.012,0.442 -0.041,0.289 -0.108,-0.97 -0.055,-0.73 0.302,-0.919 0.184,-0.856 -0.056,-0.616 -0.216,-1.016 0.042,-0.504 0.063,-0.322 0.129,-1.448 0.479,-0.287 1.192,-1.115 0.165,-0.277 0.361,-0.982 0.168,-0.353 0.191,-0.587 -0.356,-0.467 -0.339,-0.252 -0.641,-0.138 -0.591,0.049 -1.312,0.463 -1.174,-0.082 -0.422,-0.27 -1.839,-2.019 -0.116,-0.764 -0.146,-0.317 -0.178,-0.083 -0.632,-0.501 -1.46,-0.641 -1.492,-1.455 -2.637,-0.132 -0.722,0.162 -0.722,0.451 -0.66,0.917 -0.303,0.255 -0.431,0.085 -0.09,0.326 -0.081,0.446 0.23,0.329 0.808,-0.389 0.661,0.203 0.35,0.432 0.257,0.839 -0.128,0.408 -1.148,0.637 -0.637,-0.051 -1.374,-1.465 -0.532,-0.262 -1.263,0.246 -0.835,0.719 -0.257,0.146 0.199,0.733 0.314,1.31 0.271,0.778 0.34,0.382 1.229,0.936 0.681,0.328 1.031,0.858 0.633,0.096 0.566,-0.206 0.854,0.505 0.488,1.558 0.294,0.534 0.271,0.271 0.382,0.154 0.224,0.021 0.239,-0.203 0.548,-0.042 -0.192,0.446 -0.205,0.141 -1.169,0.188 -0.575,-0.16 -0.709,-0.48 -1.343,-1.57 -1.668,-0.114 -0.187,0.461 -0.524,-0.645 -1.772,-0.144 -1.058,-0.413 -1.127,-0.663 -0.096,-0.322 -0.05,-0.454 0.384,-0.569 0.145,-0.352 0.098,-1.068 -0.718,-1.42 0.074,-1.313 0.338,-0.22 0.438,-1.71 0.264,-0.564 0.141,-0.195 0.132,-0.394 -0.141,-0.496 -0.132,-0.299 -0.148,-0.696 0.033,-0.512 10e-4,-0.645 -0.361,-0.977 -0.296,-1.056 -0.608,-0.532 -0.59,-0.011 -0.218,0.146 -0.219,0.252 0.309,0.963 0.312,0.854 0.147,0.662 0.104,1.194 -0.021,1.456 -0.103,0.588 -0.172,0.498 -0.528,0.616 -0.884,0.731 -0.499,0.355 -1.043,0.39 -0.751,0.628 -1.644,3.564 0.18,0.526 0.604,0.574 0.398,0.492 0.194,0.41 0.435,1.283 1.626,3.55 0.092,0.633 -0.384,1.12 -0.756,1.44 -0.301,0.806 -0.708,3.054 -0.05,0.776 0.289,0.728 0.476,0.909 0.163,0.687 -0.323,1.744 0.17,0.434 0.396,0.225 1.081,-0.235 1.269,0.425 0.67,-0.203 1.029,-0.965 0.396,-0.104 1.234,0.132 1.808,0.928 1.918,1.244 0.387,0.417 0.518,0.017 0.378,2.11 0.341,1.137 0.146,0.802 0.103,0.893 -0.355,0.188 -0.313,0.093 -0.258,0.242 -0.361,1.374 -0.045,0.732 0.191,1.172 1.608,0.544 1.116,0.289 0.785,0.058 0.137,0.133 0.098,0.177 -0.935,0.079 -1.694,0.142 -0.601,-0.082 -0.271,-0.142 -0.269,-0.4 -0.516,-0.404 -0.197,-0.273 -0.423,-0.317 0.207,-1.209 0.035,-2.819 -0.063,-1.172 -0.356,-0.97 -1.057,-1.394 -0.363,-0.938 -0.411,-0.629 -0.402,-0.104 -0.585,0.124 -1.453,0.582 -1.305,0.307 -1.53,0.857 -0.276,0.713 -0.251,1.826 0.336,0.894 0.34,0.642 0.31,1.09 0.1,0.657 0.025,0.66 -0.05,0.975 -0.262,0.53 -1.688,2.06 -0.248,0.63 -0.289,1.757 -0.256,0.644 -0.781,0.96 -0.482,0.386 -2.594,1.743 -0.094,0.382 -0.176,1.222 -0.713,0.549 -0.423,0.046 -0.985,-0.607 -0.583,-0.179 -0.597,-0.051 -2.262,0.17 -1.002,-0.413 -0.79,-0.583 -0.811,-0.184 -0.611,-0.479 -0.142,-0.438 -0.148,-0.587 -0.112,-0.304 -0.105,-0.156 0.184,-0.196 0.391,-0.09 1.467,0.1 0.383,-0.221 0.201,0.111 0.407,0.538 0.532,0.486 0.45,-0.082 0.38,-0.4 0.145,-0.003 0.168,0.063 -0.344,0.315 -0.353,0.231 -0.095,0.146 -0.072,0.319 0.501,0.379 0.459,0.206 0.602,-0.202 0.354,-0.397 0.775,-0.582 0.555,0.026 0.032,-0.549 -0.287,-0.844 -0.234,-0.591 0.85,0.156 0.504,-0.487 2.096,-4.209 0.995,-0.805 0.331,-0.523 0.239,-0.729 0.059,-0.805 -0.122,-0.884 0.028,-0.681 0.356,-0.855 0.558,-1.036 0.354,-0.39 -0.051,-0.389 -0.071,-0.321 -1.003,-1.019 -1.063,-0.839 -0.375,-0.463 -0.284,-0.731 -0.14,-0.876 0,-0.58 0.085,-1.775 0.163,-0.843 -0.045,-2.492 -0.196,-3.107 -0.169,-0.849 0.26,-0.588 0.256,-0.483 0.132,-0.452 0.089,-3.092 -0.076,-1.203 -0.346,-1.623 -1.409,-1.356 -0.595,-1.324 0.048,-0.477 0.077,-0.323 0.611,-0.543 0.42,-0.77 0.269,-1.129 0.559,-1.726 0.142,-0.608 0.36,-2.421 0.097,-1.298 0.069,-1.954 -0.5,-0.501 -0.526,-0.434 -0.97,-0.367 -0.48,0.088 -0.878,-0.784 -0.327,-0.11 -2.371,0.222 -1.356,-0.103 -0.799,0.178 -0.419,-0.023 -0.262,-0.12 0.039,-0.327 0.141,-0.235 -0.041,-0.203 -0.231,-0.042 -0.619,0.253 -0.988,2.711 -0.588,2.601 -0.624,3.476 -0.387,1.448 -0.563,1.522 -0.869,1.195 -1.172,1.204 -0.751,0.563 -1.001,0.573 -0.42,1.241 -0.36,0.507 0.148,0.343 0.434,-0.19 -0.248,0.874 -0.26,0.53 0.025,0.307 0.076,0.395 0.338,0.18 0.9,-0.343 0.191,0.334 0.205,0.508 -0.106,2.017 -0.252,1.713 -0.029,0.625 0.143,0.4 0.117,0.524 -0.266,0.637 -0.212,0.205 -0.4,-0.071 -0.264,1.406 -0.083,0.829 0.004,0.654 0.102,0.403 0.158,0.445 0.105,-0.345 0.083,-0.475 0.282,-0.308 1.57,0.881 0.422,0.437 0.649,0.4 0.189,0.474 0.124,1.466 0.667,1.329 0.526,0.787 0.328,0.31 0.29,0.078 0.453,-0.303 0.606,0.043 -0.325,1.033 -0.547,1.933 -0.913,1.672 -0.374,0.26 -0.601,-0.68 -0.791,-0.555 -0.405,-0.284 -0.256,-0.503 -1.376,-1.346 -0.412,-0.928 -0.69,-0.144 -0.955,-0.435 -0.142,-0.105 -0.788,-0.586 -0.764,-0.32 -0.216,-0.435 -0.584,-0.324 -0.564,-0.22 -0.828,-0.542 -0.38,0.174 0.091,-0.615 -0.944,-0.878 -1.127,-0.792 -2.327,-1.131 -2.049,-0.549 -2.416,-0.161 -2.117,-0.718 -0.3,0.035 -0.271,0.211 -0.713,1.044 -0.793,0.32 -0.297,0.497 0.468,1.073 0.919,2.75 0.544,-0.277 0.211,1.246 -0.332,0.714 -0.498,0.841 -0.417,0.449 -0.923,0.227 -0.742,-0.052 -0.087,0.781 0.214,0.724 -0.052,0.299 -0.071,0.377 -0.108,0.197 -0.088,0.12 -0.285,0.218 -0.341,0.003 -0.824,-0.374 -0.594,-0.336 0.037,-1.317 0.31,-0.578 0.212,-0.132 0.203,-0.231 -0.422,-0.862 -0.309,-0.364 -0.142,-0.594 -0.007,-0.262 -0.389,0.018 -1.586,0.684 -0.328,0.64 -0.18,-0.434 -2.045,1.922 -0.891,0.672 -0.61,-0.098 -0.812,-0.402 -0.967,-0.039 -0.651,-0.191 -0.334,0.089 -0.7,0.473 -0.722,0.062 -0.75,0.673 -0.639,0.81 -0.174,1.304 -0.402,0.133 -0.439,-0.671 -0.239,-0.16 -0.23,0.145 -0.452,0.066 -0.375,0.055 -0.368,0.24 -0.152,-0.029 -1.119,-0.215 -0.313,0.021 -0.4,-0.081 0.092,-0.335 0.139,-0.239 0.629,-0.182 0.346,-0.27 0.392,0.151 0.284,-0.403 -0.037,-0.775 -0.445,-0.745 0.21,-0.578 0.161,-0.716 0.107,-0.08 0.115,-0.251 -0.143,-0.21 -0.341,-0.104 -0.002,-0.177 0.216,-0.149 1.408,-0.297 0.322,-0.216 -0.856,-0.086 -1.077,0.058 -1.092,0.651 -2.047,1.407 -0.953,0.949 0.255,-0.016 0.323,0.137 0.274,0.662 0.21,0.169 -0.148,0.437 -0.547,0.34 -0.22,0.231 -0.209,0.091 -0.177,-0.085 -0.212,-0.178 0.123,-0.337 0.162,-0.312 -0.439,-0.556 -0.205,-0.071 -0.171,0.02 -1.061,0.478 -0.788,0.564 -0.723,0.297 -0.673,0.102 -0.392,0.245 -0.801,0.752 -0.507,0.325 -0.848,0.829 -2.178,1.456 -0.565,0.124 -0.318,-0.118 -0.242,-0.196 -0.165,0.162 0.188,0.351 0.323,0.709 -0.125,0.369 -0.503,-0.102 -1.053,0.331 -1.134,0.487 0.022,0.506 0.072,0.444 -0.193,0.722 -0.2,0.583 -0.166,1.666 -0.149,0.496 -0.448,0.33 -2.261,0.745 -0.389,0.046 -0.168,0.134 -0.123,-0.134 -0.423,-0.17 -0.6,-0.005 -0.275,-0.068 -0.283,-0.271 -0.373,-0.702 -0.534,-1.415 -1.188,-0.718 -0.56,-0.48 -0.105,-0.455 0.104,-0.47 1.22,-1.555 0.434,-0.508 1.811,-0.45 0.715,-0.041 0.733,-0.187 -0.019,-0.907 -0.712,-1.113 -0.761,-1.303 -0.748,-1.434 -1.046,-0.512 -1.238,-0.243 -2.534,0.279 -0.357,-0.054 -1.617,-1.007 -0.165,-0.015 -0.225,0.064 0.07,0.29 0.129,0.21 2.147,2.15 0.1,0.556 0.062,0.75 -0.036,0.315 0.05,0.311 -0.018,0.567 -0.53,2.415 -0.505,1.699 -0.17,0.8 -0.038,0.545 0.205,0.477 0.615,0.154 0.61,0.488 0.315,0.687 0.071,0.476 0.022,1.021 0.145,0.872 -0.484,1.341 -0.269,0.523 -0.346,1.2 0.135,0.849 -0.036,0.333 -0.079,0.386 -0.246,-0.284 -0.204,-0.338 -0.282,-0.302 -0.3,-0.111 -0.317,0.081 -0.23,0.162 0.024,-0.347 0.289,-0.539 -0.14,-0.28 -0.147,-0.21 -0.892,-0.659 -0.637,-0.038 -0.56,0.067 -0.573,-0.078 -0.425,-0.42 -0.384,-0.227 -0.29,-0.035 -0.356,0.377 -0.85,1.445 -0.856,0.943 -1.122,0.708 -0.847,0.229 -0.232,0.168 -0.501,0.821 -0.52,0.63 -1.435,1.046 -0.1,0.428 -0.09,0.586 0.137,0.661 0.276,0.638 0.691,1.278 0.389,0.433 0.265,0.674 0.195,0.775 -0.104,0.157 -0.573,-0.191 -0.409,0.087 -0.587,0.527 -0.044,0.224 -0.21,0.519 -0.535,0.042 -1.442,-0.938 -1.236,-0.478 -0.202,-0.03 -0.278,-0.237 -0.084,-0.197 -0.516,0.039 -0.315,-0.022 -0.298,-0.16 -1.351,-1.522 -1.087,-0.574 -0.254,-0.011 -0.47,0.157 -0.272,1.232 -0.373,0.342 -0.332,-0.021 -0.018,0.603 0.142,0.371 0.127,0.266 0.408,0.428 0.761,1.281 0.402,0.524 0.297,0.198 0.393,0.028 0.873,-0.151 0.289,0.198 0.309,0.299 0.066,0.73 0.239,0.746 0.024,0.418 -0.289,0.49 -0.933,0.355 -0.542,0.509 -0.195,-0.021 -1.116,-0.591 -0.733,-0.227 -0.979,-0.369 -0.177,-0.202 -0.437,-0.993 -0.966,-0.944 -0.435,-0.278 -0.604,0.204 -0.416,-0.102 -0.698,-0.504 -0.465,-0.78 -0.032,-0.959 0.132,-0.21 0.131,-0.113 -0.335,-0.291 -0.016,-0.742 -0.066,-0.485 -0.372,-1.211 -0.379,-0.734 -0.363,-0.792 0.387,-0.411 0.201,-0.36 0.28,-1.045 0.054,-0.356 0.119,-0.354 0.045,-0.329 -0.019,-0.33 -0.266,-0.6 -0.819,-1.219 -0.806,-0.672 -1.533,-0.667 -0.423,0.038 -0.155,-0.097 0.327,-0.121 0.326,-0.264 0.176,-0.407 -0.388,-0.202 -0.315,-0.091 -0.527,-0.333 -0.097,-0.297 0.116,-0.211 -0.123,-0.538 -0.707,-0.171 -0.186,-0.123 -0.015,-0.181 -0.479,-0.588 -0.625,-0.62 0.104,-0.627 -0.45,-0.46 -0.39,-0.326 -0.613,-0.12 -0.246,-0.228 1.416,0.063 1.489,0.475 -0.126,0.185 -0.106,0.284 0.434,0.812 0.416,0.459 0.931,0.565 0.115,0.001 0.203,-0.144 0.461,0.239 0.376,0.313 0.708,0.025 0.857,0.369 -0.058,0.151 -0.098,0.117 0.243,0.443 0.358,-0.065 0.602,-0.364 1.514,1.284 0.419,0.23 2.414,0.653 1.112,0.061 0.601,0.146 0.873,0.331 0.936,0.663 0.765,0.235 1.395,0.215 0.719,-0.032 1.783,-0.436 2.285,-1.167 1.174,-1.026 1.873,-2.683 0.243,-0.629 0.221,-1.487 0.013,-0.637 -0.272,-0.064 -0.359,-0.352 0,-0.866 -0.205,-0.425 -0.265,-1.979 -0.562,-0.218 -0.308,-0.23 -0.367,-0.116 -0.407,-0.313 -0.488,-0.819 -0.479,-0.55 -0.394,-0.744 -0.242,-0.274 -0.177,-0.085 0.122,0.376 0.094,0.403 -0.714,-0.099 -2.07,-1.912 -0.354,-0.15 -0.137,0.173 -0.636,-0.256 -0.204,-0.453 -1.76,-2.124 -3.122,-2.419 -2.134,-1.479 -1.594,-0.662 -0.159,0.078 -0.161,0.275 -0.466,0.076 -0.409,-0.054 -1.435,-0.593 -0.347,-0.081 -1.529,0.023 -0.161,0.167 -0.537,1.255 -0.287,0.253 -0.54,0.231 0.155,-0.378 0.369,-0.275 0.239,-0.913 0.014,-0.379 0.129,-0.5 -0.026,-0.398 -0.195,-0.129 -0.362,0.132 -0.777,0.481 -0.104,-0.127 0.223,-0.497 -0.06,-0.196 -0.326,0.074 -0.693,-0.229 -0.727,0.083 -0.132,-0.602 -0.475,-0.34 -0.196,-0.289 0.239,-0.335 1.621,0.551 0.451,0.032 0.223,-0.197 0.051,-0.357 -0.014,-0.417 -0.186,-0.241 -1.056,-0.443 -0.488,-0.506 -1.142,-0.694 -0.043,0.325 0.172,0.641 -0.091,0.207 -0.333,-0.18 -0.255,0.132 -0.344,0.769 -0.334,0.194 -0.264,0.06 -1.132,-0.645 -0.505,-0.115 0.153,1.065 -0.005,0.37 -0.072,0.358 -0.101,0.183 -0.201,0.08 -0.487,-0.032 -0.661,-0.419 -0.427,-0.395 -0.133,-0.017 -0.058,0.048 0.104,0.396 -0.028,0.304 -0.064,0.33 -0.09,0.299 -0.125,0.25 -0.262,0.322 -0.453,0.254 -1.247,0.495 -0.099,0.218 -0.402,1.37 -0.109,0.2 -0.147,0.169 -0.429,0.219 -0.188,0.097 -0.58,0.38 -0.354,0.256 -0.426,0.188 0.11,0.249 0.708,0.052 0.109,0.071 0.079,0.127 0.013,0.204 -0.071,0.329 -0.766,1.801 -0.024,0.377 0.25,1.044 0.351,1.224 1.061,0.541 0.788,0.421 0.506,0.994 0.835,1.301 0.442,0.484 0.025,0.15 -0.131,0.889 -0.535,0.886 -0.5,0.744 -0.518,0.892 -0.405,0.757 -0.439,0.903 -0.051,0.292 -0.008,0.275 0.076,0.303 0.562,1.093 0.219,0.555 0.261,0.598 0.225,0.65 0.13,0.581 0.225,0.563 0.14,0.287 0.232,0.402 0.28,0.596 0.093,0.471 0.423,1.624 0.043,0.411 -0.021,0.304 -0.186,0.074 -0.411,0.048 -0.446,0.199 -0.022,0.067 0.291,0.378 -0.257,0.645 -0.037,0.919 -0.274,0.48 -0.026,0.111 0.012,0.093 0.049,0.073 0.507,0.128 0.044,0.13 0.002,0.269 -0.045,0.248 -0.255,0.184 -0.273,0.271 -0.061,0.25 0.009,0.222 0.093,0.375 0.181,0.436 0.229,0.273 0.813,0.259 0.105,0.213 0.044,0.292 -0.017,0.285 -0.378,0.568 0.003,0.218 0.155,0.526 0.186,0.501 0.793,0.542 0.273,0.296 0.072,0.235 0.04,0.379 -0.005,0.41 -0.062,0.363 -0.249,0.467 -0.575,0.918 -0.579,0.355 -0.035,0.077 0.179,0.292 1.019,1.166 0.665,0.543 0.896,0.73 0.578,0.575 0.187,0.412 0.25,0.458 0.281,0.373 0.203,0.323 0.077,0.208 -0.007,0.223 -0.271,0.671 -0.154,0.517 -0.271,0.755 -0.278,0.524 -0.704,0.954 -1.039,1.18 -0.241,0.355 -0.486,0.617 -0.833,1.233 -0.215,0.271 -0.682,0.976 -0.311,0.31 -0.245,0.289 -0.675,0.915 -0.726,0.691 -0.712,0.64 -0.214,0.323 -0.266,0.247 -0.317,0.234 -0.133,0.131 -0.717,0.869 -0.995,1.198 1.071,-0.199 0.936,-0.607 0.183,0.142 0.204,0.237 -0.029,0.388 -0.05,0.292 -0.367,-0.276 0.086,0.326 0.339,0.611 0.476,0.248 0.72,0.792 0.846,0.087 0.558,-0.146 0.426,0.037 0.424,0.419 0.293,0.531 0.233,0.133 0.316,0.254 -0.044,0.295 -0.096,0.171 -1.271,-0.458 -1.466,-0.247 -0.191,0.217 -0.185,0.333 -0.089,0.261 -0.096,0.146 -0.226,0.094 -0.335,0.029 -0.403,-0.063 -0.241,-0.175 -0.18,0.197 -0.085,0.446 -0.25,0.231 -0.343,-0.179 -0.228,-0.344 -0.205,0.028 -0.124,0.316 0.091,0.431 0.05,0.516 -0.145,0.385 0.149,0.171 0.188,0.276 0.051,0.158 -0.064,0.093 -0.188,0.079 -0.043,0.085 -0.083,0.143 -0.22,0.026 -0.113,0.106 -0.135,0.465 -0.258,0.768 -0.381,0.582 -0.305,0.318 -0.136,0.244 -0.085,0.292 -0.02,0.293 0.292,1.6 -0.003,0.288 -0.069,0.295 -0.05,0.299 0.041,0.259 0.193,0.442 0.205,0.658 0.083,0.419 0.136,0.153 0.131,0.113 0.027,0.071 -0.004,0.073 -0.068,0.083 -0.591,0.219 -0.077,0.185 -0.064,0.207 -0.258,0.305 -0.079,0.284 -0.049,0.325 -0.006,0.116 0.331,0.021 0.116,0.083 0.078,0.408 0.376,0.321 0.348,0.266 0.089,0.123 0.027,0.236 -0.022,0.275 -0.044,0.143 -0.146,0.164 -0.127,0.415 -0.018,0.394 -0.201,0.679 0.045,0.013 0.422,-0.123 0.12,0.07 0.092,0.15 0.03,0.425 0.138,0.191 0.141,0.298 0.044,0.231 0.269,0.275 0.021,0.178 0.164,0.627 0.063,0.36 0.029,0.278 -0.081,0.353 -0.071,0.238 0.383,0.437 0.09,0.017 0.213,-0.172 0.042,-0.012 0.44,-0.015 0.204,0.152 0.151,0.296 0.141,0.236 0.151,0.064 0.428,-0.298 0.237,-0.099 0.156,0.003 0.549,0.267 0.258,0.146 0.059,0.132 0.005,0.156 -0.07,0.231 -0.055,0.251 0.167,0.296 0.194,0.2 0.415,-0.331 0.153,-0.092 0.167,-0.003 0.224,-0.123 0.162,-0.186 0.155,-0.064 0.296,0.044 0.536,-0.044 0.625,0.292 0.054,0.089 0.312,0.341 0.109,0.169 0.103,0.054 0.167,0.166 0.222,0.104 0.155,-0.032 0.074,0.055 0.069,0.13 0.005,0.222 -0.022,0.632 -0.109,0.182 -0.115,0.148 -0.029,0.115 0.011,0.139 0.177,0.271 0.228,0.421 0.053,0.244 0,0.183 -0.311,0.536 -0.104,0.125 -0.072,0.263 -0.038,0.267 0.022,0.11 0.52,0.424 0.385,0.229 0.086,0.112 0.008,0.069 -0.205,0.454 -0.02,0.122 0.309,0.188 0.17,0.295 0.15,0.48 0.293,0.459 0.631,0.405 0.459,0.264 0.095,0.12 0.033,0.143 -0.035,0.313 -0.118,0.381 -0.081,0.211 0.187,0.088 0.481,-0.023 0.584,0.074 0.701,0.418 0.002,0.187 -0.072,0.17 0.048,0.179 0.077,0.152 0.606,0.465 0.058,0.135 0.011,0.226 -0.017,0.165 -0.168,0.035 -0.187,0.077 -0.305,0.197 -0.121,0.279 -0.493,0.384 -0.305,0.173 -0.243,0.008 -0.577,-0.078 -0.203,-0.189 -0.084,-0.174 -0.222,-0.078 -0.295,-0.007 -0.407,0.03 -0.083,0.052 -0.067,0.214 -0.173,0.364 -0.124,0.206 0.103,0.125 0.162,0.262 0.252,0.333 0.259,0.295 0.083,0.18 -0.003,0.128 -0.124,0.151 0.019,0.304 0.252,0.399 -0.085,0.063 -0.025,0.489 0.002,0.521 0.068,0.126 0.136,0.104 0.114,0.19 0.191,0.433 0.013,0.113 0.054,0.008 0.262,0.13 0.275,0.11 0.19,0.007 0.226,-0.025 0.266,-0.147 0.185,-0.142 0.225,-0.722 0.08,-0.104 0.124,-0.057 0.203,-0.006 0.386,0.135 0.452,0.121 0.262,-0.017 0.698,-0.385 0.389,-0.06 0.462,0.09 0.454,0.005 0.342,-0.056 0.235,0.133 0.29,0.294 0.262,0.436 0.274,0.803 0.799,0.903 0.013,0.176 -0.065,0.113 -0.393,0.109 -0.332,0.059 -0.016,0.154 0.088,0.167 0.152,0.244 0.023,0.314 -0.008,0.288 0.065,0.254 0.127,0.104 0.016,0.127 -0.146,0.156 -0.041,0.096 0.057,0.052 0.721,0.03 0.353,0.151 0.268,0.138 0.135,0.013 0.304,-0.088 0.342,-0.056 0.207,-0.008 0.08,0.102 0.064,0.267 0.12,0.267 0.112,0.076 0.2,-0.013 0.12,0.013 0.064,0.101 -0.072,0.152 0.016,0.165 0.088,0.202 0.104,0.467 0.096,0.139 0.064,0.176 0,0.202 -0.08,0.176 -0.056,0.138 0.056,0.314 0.216,0.351 0.16,0.087 0.128,0.313 0.232,0.1 0.344,-0.263 0.264,-0.138 0.33,0.077 0.305,0.049 0.205,0.179 0.151,0.246 0.176,0.137 0.176,-0.072 0.367,0.072 0.168,0.199 0.168,0.112 0.216,-0.162 0.176,-0.2 0.644,-0.209 0.4,-0.052 0.112,-0.041 0.235,-0.15 0.248,-0.1 0.223,0.027 0.22,0.311 0.228,0.214 0.064,0.337 0.278,0.462 0.691,0.631 0.271,0.192 0.184,-0.034 0.096,-0.05 0.045,-0.066 0.042,-0.309 0.087,-0.114 0.14,-0.003 0.541,0.384 0.283,0.042 0.269,0.007 0.362,0.298 0.397,0.259 0.307,0.027 0.245,-0.102 0.168,-0.062 0.104,0.099 0.096,0.223 0.16,0.173 0.184,0.049 0.265,0.011 0.46,0.334 0.432,0.34 0.27,0.019 0.229,-0.1 0.202,-0.026 0.141,0.086 0.04,0.147 -0.104,0.197 0,0.282 0.192,0.27 0.006,0.265 -0.055,0.239 -0.109,0.22 -0.263,0.302 -0.243,0.281 -0.365,0.117 -0.205,0.123 0.054,0.206 0.134,0.192 0.31,0.155 0.352,0.113 0.041,0.125 -0.054,0.063 -0.226,0.058 -0.312,-0.059 -0.104,0.109 -0.144,0.181 -0.096,0.326 -0.072,0.302 0.339,0.082 0.197,0.123 0.062,0.247 0.07,0.275 0.021,0.247 -0.112,0.12 -0.007,0.123 0.053,0.061 0.146,0.027 0.111,0.055 0.009,0.13 -0.213,0.292 -0.199,0.558 -0.107,0.296 0.008,0.321 -0.12,0.178 -0.225,0.009 -0.75,0.031 -0.653,-0.016 -0.282,-0.046 -0.442,-0.028 -0.219,0.076 -0.29,0.512 -0.22,0.2 -0.363,0.181 -0.399,0.052 -0.229,0.21 -0.081,0.33 -0.006,0.292 -0.037,0.146 -0.086,0.128 -0.031,0.091 0.019,0.1 0.093,0.036 0.111,0.046 0,0.072 -0.043,0.091 -0.124,0.1 -0.056,0.154 0.013,0.164 0.024,0.181 0.759,-0.346 0.259,-0.262 0.519,-0.092 -0.073,0.106 -0.257,0.098 -0.258,0.254 0.325,0.026 0.73,-0.13 0.268,-0.398 0.482,0.014 0.137,0.286 0.137,0.386 -0.012,0.143 -0.052,0.11 -0.404,0.085 -0.914,0.481 -0.478,0.136 -0.539,0.245 0.139,0.33 0.036,0.28 -0.442,-0.06 -0.319,-0.093 -0.198,0.043 -0.538,0.296 -0.282,-0.064 -0.283,-0.009 0.121,0.423 0.293,0.51 0.179,0.096 0.281,-0.046 0.667,0.617 0.497,0.611 -0.258,0.042 -0.249,-0.062 -0.36,0.002 -0.143,0.371 -0.149,0.274 -0.027,-0.141 0.011,-0.19 -0.167,-0.123 -0.228,0.186 -0.259,0.813 -0.481,0.583 -0.16,0.357 -0.007,0.26 0.069,0.053 0.105,-0.008 0.003,0.234 -0.072,0.209 -1.075,0.264 -0.142,0.154 -0.309,-0.122 -0.353,-0.321 -0.314,-0.173 -0.202,0.069 -0.206,0.151 0.116,0.094 0.139,0.033 0.365,0.2 -0.191,0.151 -0.712,0.263 0.024,0.136 0.065,0.099 0.824,0.225 0.73,0.386 0.223,0.265 0.191,0.46 0.166,0.209 0.235,0.158 0.217,0.096 0.372,0.038 0.411,-0.147 0.926,1.096 0.366,0.177 0.909,0.22 0.229,0.117 1.718,1.522 0.525,0.656 1.002,0.985 0.294,0.204 0.127,-0.25 0.17,-0.263 0.184,-0.064 0.539,0.104 0.496,0.119 0.362,-0.084 0.431,0.208 0.394,0.238 0.396,0.168 0.772,0.158 0.288,0.219 0.336,0.219 1.317,0.111 0.106,-0.034 0.097,-0.032 0.442,-0.08 0.391,0.015 0.413,0.265 0.264,-0.015 0.282,-0.04 0.363,0.142 0.285,0.158 0.024,0.16 0.25,0.232 0.726,0.353 0.589,0.199 0.184,0.14 0.447,0.231 0.045,0.073 -0.009,0.094 -0.127,0.173 -0.033,0.154 0.06,0.088 0.186,0.084 0.369,0.019 0.133,-0.11 0.275,-0.079 0.272,-0.142 0.364,-0.189 0.495,-0.172 0.198,0 0.19,0.052 0.133,0.096 0.223,0.353 0.223,-0.495 0.058,-0.037 0.203,0.1 0.36,0.138 0.249,0.073 0.134,0.102 0.38,0.45 0.615,-0.023 0.26,0.069 0.14,0.074 0.063,0.087 -0.11,0.446 -0.152,0.463 0.012,0.112 0.247,0.174 0.335,0.185 0.181,0.148 0.123,0.133 0.265,0.101 0.313,0.063 0.148,0.008 0.155,0.111 0.403,0.209 0.051,0.052 0.302,0.077 0.041,0.218 0.054,0.046 0.125,-0.026 0.208,-0.091 0.166,0.07 0.214,0.259 0.295,0.273 0.16,0.184 0.063,0.126 0.151,0.123 0.221,0.144 0.176,0.226 0.157,0.524 0.159,0.121 0.569,0.199 0.2,0.041 0.559,0.07 0.197,-0.05 0.288,-0.451 0.259,-0.465 0.242,-0.097 0.437,-0.225 0.262,-0.213 0.11,-0.23 0.247,-0.434 0.152,-0.245 -0.27,-0.228 -0.142,-0.071 -0.12,-0.111 -0.227,-0.477 -0.208,-0.38 -0.417,-0.653 -0.724,-0.985 -0.147,-0.119 -0.118,-0.137 -0.053,-0.496 -0.208,-0.353 -0.297,-0.243 -0.112,-0.125 -0.072,-0.135 0.14,-0.704 -0.003,-0.199 -0.062,-0.427 0.054,-0.493 0.166,-0.677 0.168,-0.468 0.053,-0.305 -0.235,0.194 -0.28,1.082 -0.094,-0.869 -0.19,-0.828 -0.153,-0.428 -0.216,-0.348 -0.301,-0.271 -0.278,-0.319 -0.303,-0.171 -0.457,-0.131 -0.09,-0.122 -0.039,-0.202 0.025,-0.225 0.11,-0.376 0.241,-0.243 0.327,-0.253 0.073,-0.169 0.054,-0.199 0.102,0.151 0.125,0.082 0.087,-0.351 0.131,-0.251 0.168,-0.216 0.209,-0.496 0.155,-0.271 0.112,-0.306 0.062,-0.502 0.116,-0.048 0.096,-0.088 0.072,-0.143 0.042,-0.157 -0.015,-0.286 -0.171,-0.312 0.045,-0.032 0.082,0.054 0.185,0.16 0.166,0.201 0.046,-0.291 0.144,-0.118 0.176,0.081 0.186,0.012 0.625,-0.232 0.298,-0.064 0.276,-0.164 0.644,-0.631 0.141,-0.029 0.146,0.029 0.135,0.117 0.147,0.068 0.112,-0.032 0.056,-0.096 -0.129,-0.224 -0.045,-0.212 -0.01,-0.231 0.166,-0.059 0.189,0.001 0.756,-0.358 0.088,-0.158 0.041,-0.216 0.338,-0.04 -0.038,-0.185 -0.135,-0.047 -0.632,-0.378 -0.519,-0.268 -0.461,-0.238 -0.067,-0.043 -0.126,-0.116 -0.09,-0.181 -0.019,-0.198 0.045,-0.146 0.112,-0.093 0.132,-0.036 0.117,0.03 0.13,0.089 0.232,0.108 0.301,0.02 0.188,-0.083 0.025,-0.199 -0.358,-0.738 -0.33,-0.597 -0.319,-0.666 -0.135,-0.242 -0.391,-0.56 -0.386,-0.553 -0.305,-0.494 -0.16,-0.152 -0.492,-0.063 -0.938,-0.122 -0.332,-0.058 -0.266,0.147 -0.267,0.115 -0.253,-0.214 -0.2,-0.352 -0.105,-0.296 0.051,-0.303 0.021,-0.448 -0.153,-0.442 -0.169,-0.219 -0.424,-0.165 -0.54,-0.373 -0.145,-0.683 0.262,-0.982 0.422,-0.698 0.307,-0.293 0.146,-0.256 0.048,-0.222 -0.037,-0.212 -0.182,-0.226 -0.282,-0.22 -0.143,-0.271 0.059,-0.582 0.187,-0.841 0.288,-0.675 0.386,-0.375 0.333,-0.269 0.131,-0.251 0.007,-0.357 -0.008,-0.337 0.089,-0.245 0.14,-0.195 0.148,-0.175 0.208,-0.196 0.27,-0.048 0.297,0.156 0.404,0.419 0.592,0.825 0.338,0.539 0.122,0.166 0.309,0.32 0.279,0.129 0.465,-0.2 0.446,-0.233 0.144,-0.148 0.092,-0.221 -0.071,-0.378 -0.093,-0.247 -0.099,-0.315 -0.137,-0.549 -0.097,-0.864 -0.115,-0.275 0.084,-0.032 0.224,0.057 0.207,0.025 0.296,-0.191 0.406,-0.36 0.743,-0.557 0.157,-0.368 0.127,-0.41 0.206,-0.252 0.473,-0.083 0.438,-0.132 0.309,-0.292 0.484,-0.257 0.398,-0.156 0.175,-0.144 0.125,-0.216 0.456,-0.61 0.358,-0.376 0.315,-0.388 0.105,-0.244 0.249,0.045 0.38,0.169 0.408,0.154 0.299,0.239 0.059,0.244 0.029,0.192 0.121,0.099 0.145,0.019 0.218,-0.048 0.381,-0.009 0.467,-0.316 0.65,-0.534 0.595,-0.166 0.313,0.127 0.259,0.393 0.205,0.369 0.211,0.137 0.131,0.004 0.048,0.006 0.262,-0.084 0.02,0.001 0.239,0.015 0.23,0.125 0.381,0.014 0.531,-0.095 0.056,-0.039 0.255,0.051 0.31,0.17 0.241,0.202 0.432,0.662 0.248,0.17 0.506,0.235 0.237,0.205 0.276,0.332 0.144,0.201 0.3,0.363 0.347,0.593 0.062,0.471 0.079,0.397 0.129,0.188 0.106,0.023 0.114,-0.065 0.112,-0.181 0.039,-0.302 -0.034,-0.535 -0.089,-0.438 -0.114,-0.139 -0.055,-0.154 0.075,-0.196 0.193,-0.095 0.24,0.06 0.395,0.252 0.412,0.317 0.507,0.554 0.465,0.351 0.509,0.28 0.404,0.083 0.313,-0.084 0.369,-0.228 0.338,-0.264 0.154,-0.277 0.11,-0.303 0.51,-0.405 0.466,-0.371 0.212,0.067 0.149,0.105 0.478,-0.226 0.166,-0.062 0.455,-0.088 0.47,0.13 0.375,0.398 0.363,0.256 0.325,-0.03 0.269,-0.131 0.178,-0.248 0.135,-0.293 0.18,-0.188 0.027,-0.012 0.579,0.102 0.363,-0.015 0.039,-0.042 0.479,0.08 0.529,0.413 0.328,0.457 0.42,0.581 0.195,0.189 0.284,0.081 0.223,0.035 0.299,0.09 0.79,0.121 0.12,0.071 0.081,0.095 -0.073,0.316 0.07,0.08 0.641,-0.225 0.172,-0.168 0.211,-0.478 0.189,-0.482 0.141,-0.179 0.149,-0.047 0.15,0.072 0.21,0.285 0.284,0.29 0.384,0.11 0.234,0.044 0.363,0.024 0.854,-0.141 0.799,-0.351 0.456,-0.382 0.212,-0.574 0.133,-0.654 0.204,-0.414 -0.085,-0.424 -0.402,-0.404 -0.136,-0.122 -0.978,-0.227 -0.06,-0.164 -0.056,-0.038 -0.964,-0.36 -0.464,-0.154 -0.131,-0.238 -0.086,-0.312 -0.301,-0.279 -0.598,-0.254 -0.104,-0.194 0.099,-0.196 0.318,-0.147 0.153,-0.071 0.539,-0.46 0.207,-0.095 0.479,-0.021 0.444,-0.377 0.306,-0.216 0.16,-0.257 -0.042,-0.266 -0.444,-0.805 -0.132,-0.489 0.079,-0.319 0.255,-0.345 0.145,-0.189 0.174,-0.34 0.114,-0.182 0.448,-0.077 0.543,-0.032 0.373,0.081 0.521,0.042 0.475,0.063 0.24,0.056 0.177,-0.104 0.128,-0.183 -0.004,-0.242 -0.187,-0.235 -0.697,-0.309 -0.299,-0.255 -0.234,0.028 -0.392,-0.08 -0.354,-0.167 -0.313,-0.056 -0.102,-0.232 0.064,-0.326 0.121,-0.187 0.231,-0.093 0.251,0.047 0.273,-0.136 0.079,-0.08 0.023,-0.103 -0.044,-0.147 -0.127,-0.121 -0.18,-0.032 -0.207,0.103 -0.248,0.067 -0.419,-0.151 -0.334,-0.182 0.017,-0.168 0.247,-0.251 0.111,-0.204 0,-0.282 0,-0.33 0.086,-0.387 0.245,-0.265 0.288,-0.142 0.742,0.259 0.928,0.231 0.159,-0.038 0.047,-0.122 0.106,-0.108 1.288,-0.05 0.25,-0.149 0.125,-0.119 1.238,-0.171 0.147,-0.163 0.182,-0.152 0.285,0.003 0.339,-0.061 0.473,-0.186 0.335,-0.102 0.056,-0.008 0.354,0.041 0.439,-0.147 0.095,-0.061 0.071,-0.111 0.383,-0.214 0.735,-0.176 0.179,0.105 0.351,0.048 0.447,-0.079 0.33,-0.135 0.192,0.134 0.261,0.138 0.195,-0.117 0.097,-0.369 0.126,-0.361 0.221,-0.171 0.175,-0.063 0.158,-0.139 0.119,-0.145 0.647,0.022 0.579,-0.361 0.114,0.164 0.752,-0.038 0.934,-0.233 0.559,-0.109 0.965,-0.244 0.446,-0.198 0.639,-0.125 0.586,-0.087 0.383,-0.347 0.309,-0.049 0.376,-0.029 0.23,-0.083 0.15,-0.128 0.097,-0.241 -0.053,-0.308 -0.054,-0.224 0.269,-0.125 0.384,-0.039 0.242,-0.051 0.528,-0.51 0.364,-0.245 0.377,-0.154 0.757,0.084 0.691,0.077 0.693,0.244 0.364,0.304 0.313,0.229 0.296,0.109 0.268,0.07 0.311,-0.104 0.22,-0.14 0.128,-0.201 0.194,-0.144 0.707,-0.112 0.146,0.217 0.336,0.653 0.229,0.867 0.377,1.145 0.166,0.561 -0.073,0.293 10e-4,0.401 -0.021,0.44 -0.278,0.497 0.113,0.231 0.683,0.257 0.956,-0.094 0.59,-0.208 0.329,0.076 0.172,-0.125 0.111,-0.368 0.227,-0.083 0.233,0.257 0.169,0.434 0.162,0.279 -0.012,0.332 0.06,0.425 0.119,0.107 0.234,-0.161 0.156,-0.096 0.037,-0.129 -0.066,-0.159 -0.031,-0.162 0.052,-0.149 0.111,-0.061 0.333,0.047 0.485,0.082 0.576,0.604 0.311,0.109 0.131,0.011 0.292,-0.035 0.351,-0.173 0.236,-0.218 0.079,-0.107 0.136,0.019 0.129,0.101 0.009,0.22 -0.103,0.318 -0.35,0.291 -0.435,0.27 -0.264,0.494 -0.056,0.514 0.115,0.261 0.099,0.174 0.028,0.244 0.098,0.032 0.178,-0.1 0.485,-0.506 0.247,-0.125 0.358,-0.08 0.589,0.04 0.396,0.165 0.189,0.229 0.208,0.189 0.144,-0.079 0.074,-0.218 0.004,-0.25 0.061,-0.206 0.644,-0.507 0.429,-0.338 0.147,-0.04 0.287,0.07 0.178,-0.036 0.471,-0.318 0.44,-0.363 0.043,-0.246 0.017,-0.223 0.109,-0.101 0.616,-0.078 0.102,-0.042 0.526,-0.254 0.729,-0.434 0.354,-0.256 0.645,-0.114 0.12,-0.074 0.214,-0.173 0.404,-0.24 0.219,-0.026 -0.136,0.58 -0.241,0.668 -0.136,0.178 -0.654,-0.03 10e-4,0.182 0.103,0.278 0.074,0.156 0.079,0.14 0.176,0.242 0.688,0.569 0.875,0.722 0.945,0.808 0.66,0.562 0.267,0.29 0.17,0.226 0.486,0.814 0.462,0.769 0.779,1.348 0.689,1.294 0.76,1.415 0.439,0.814 0.898,1.693 0.24,0.517 0.455,0.976 0.401,0.911 0.355,0.802 0.224,0.072 0.018,-0.217 0.04,-0.145 0.114,-0.082 0.262,-0.237 0.141,-0.057 0.21,0.024 0.22,-0.121 0.081,-0.228 -0.053,-0.423 -0.034,-0.195 0.075,-0.21 0.12,-0.082 0.167,-0.066 0.154,-0.034 0.126,-0.237 0.238,-0.072 0.219,0.044 0.18,0.009 0.159,0.173 0.089,0.237 0.172,0.019 0.281,-0.024 0.039,0.198 -0.08,0.331 -0.099,0.256 -0.017,0.205 0.149,0.1 0.546,-0.089 0.193,0.044 0.062,0.208 0.078,0.172 0.038,0.21 -0.057,0.232 0.098,0.139 0.471,0.003 0.332,-0.112 0.51,-0.009 0.461,0.246 0.319,-0.038 0.321,-0.1 0.471,0.063 0.331,-0.194 0.228,-0.243 0.071,-0.191 0.119,-0.106 0.444,10e-4 0.28,-0.019 0.207,-0.281 0.189,-0.127 0.318,-0.024 0.234,0 0.629,0.261 0.383,0.216 0.398,0.307 0.239,0.192 0.161,0.433 0.271,0.318 0.216,0.371 0.052,0.365 0.178,0.655 0.184,0.215 0.218,0 0.275,0.089 0.304,0.071 0.65,0.485 0.239,0.014 0.184,0.116 0.028,0.223 -0.068,0.258 0.071,0.247 0.213,0.315 0.168,0.307 0.207,0.372 0.063,0.212 0.166,0.07 0.224,-0.105 0.356,0.08 1.071,0.211 0.149,0.026 0.114,0.22 0.155,-0.018 0.178,-0.009 0.247,0.026 0.172,-0.203 0.141,-0.178 0.353,-0.22 0.293,-0.299 0.246,-0.266 0.184,-0.035 0.149,0.124 0.006,0.23 -0.184,0.168 -0.144,0.203 0.034,0.203 0.247,0.018 0.274,0.305 0.396,0.713 0.134,0.149 0.196,0.14 0.217,0.063 0.24,0.102 0.178,0.293 0.072,0.264 0.264,0.04 0.167,-0.063 0.111,-0.133 0.171,-0.042 0.257,-0.064 0.265,-0.08 0.146,0.015 0.011,10e-4 0.327,-0.011 0.149,-0.096 0.113,-0.141 0.245,-0.157 0.052,-0.181 0.004,-0.356 0.16,-0.302 0.407,-0.09 0.156,-0.044 0.166,0.044 0.258,-0.042 0.249,-0.016 0.139,0.093 0.184,0.079 0.235,-0.009 0.08,-0.143 0.01,-0.199 0.102,-0.052 0.127,0.138 0.071,0.103 0.105,0.047 0.284,-0.123 0.198,-0.133 0.064,-0.273 0.115,-0.136 0.154,0.069 0.271,-0.001 0.223,-0.212 0.293,-0.169 0.21,-0.077 0.043,-0.143 -0.099,-0.316 0.027,-0.346 0.281,-0.196 0.376,-0.023 0.278,-0.134 0.077,-0.37 0.138,-0.106 0.14,-0.042 0.339,-0.059 0.244,-0.15 0.15,-0.069 0.427,-0.203 0.388,-0.04 0.166,-0.162 0.13,-0.204 0.218,-0.078 0.222,-0.177 0.293,-0.225 0.115,-0.032 0.48,-0.131 0.188,-0.048 0.113,-0.029 0.208,0.009 0.088,-0.238 0.211,-0.176 0.212,-0.059 0.104,-0.175 0.203,-0.223 0.274,-0.124 0.428,-0.018 0.414,0.025 0.248,-0.038 0.204,-0.33 0.039,-0.164 0.047,-0.167 0.166,-0.064 0.2,0.271 0.169,0.168 0.26,0.175 0.134,0.164 0.153,0.023 0.161,-0.123 0.114,-0.299 0.216,-0.046 0.238,0.048 0.063,0.147 0.021,0.143 0.109,0.256 0.262,0.223 0.335,-0.011 0.135,-0.04 0.326,0.031 0.321,0.048 0.35,0.053 0.102,0.008 0.375,0.027 0.546,0.039 0.24,-0.018 0.492,0.072 0.101,0.198 0.091,0.468 0.077,0.445 0.022,0.357 0.128,0.185 0.163,0.061 0.108,0.144 0.189,0.196 0.141,0.28 0.171,-0.019 0.119,-0.066 0.262,-0.021 0.334,0.019 0.232,0.155 0.088,0.203 0.188,0.114 0.153,-0.037 0.458,-10e-4 0.158,0.013 0.157,0.111 0.228,0.019 0.125,-0.142 0.395,-0.096 0.229,-0.203 0.176,-0.002 0.133,0.098 0.103,0.133 0.15,-0.059 0.082,-0.109 0.132,0 0.129,0.071 0.331,0.124 0.24,0.23 0.186,0.022 0.239,-0.067 0.11,-0.031 0.105,0.114 0.154,0.062 0.117,-0.084 0.201,-0.06 0.769,0.125 0.178,0.229 0.137,0.108 0.11,0.188 0.2,0.134 0.425,-0.046 0.164,-0.137 0.344,-0.304 0.137,-0.297 0.173,-0.096 0.195,-0.048 0.183,0 0.191,-0.01 0.232,-0.218 0.188,-0.076 0.279,-0.277 0.052,-0.125 0.136,-0.323 0.084,-0.206 0.141,-0.328 0.076,-0.529 0.043,-0.281 -0.037,-0.204 -0.165,-0.105 -0.212,-0.05 -0.186,-0.156 -0.138,-0.18 -0.081,-0.253 -0.109,-0.297 0.006,-0.215 -0.031,-0.166 -0.093,-0.142 -0.179,-0.25 -0.087,-0.186 0.029,-0.295 0.211,-0.506 0.02,-0.235 0.026,-0.146 -0.012,-0.133 0.066,-0.304 0.119,-0.128 0.136,-0.327 0.184,-0.151 0.229,-0.01 0.099,-0.089 0.049,-0.328 0.11,-0.253 0.074,-0.18 0.14,-0.195 0.808,-0.378 0.335,-0.471 0.119,-0.238 0.13,-0.512 0.125,-0.215 0.182,0.071 0.214,0.302 0.16,0.003 0.238,0.164 0.648,0.342 0.352,0.107 0.226,0.033 0.299,0.095 0.192,0.2 0.375,0.326 0.317,0.083 0.55,0.033 0.669,0.017 0.189,0.057 0.489,0.234 0.542,0.258 0.51,0.231 0.387,0.179 0.229,0.173 0.215,0.099 0.233,-0.084 0.299,0.019 0.702,0.208 0.444,0.174 0.371,0.129 0.124,0.178 0.012,0.237 -0.05,0.2 0.027,0.484 0.119,0.253 0.044,0.34 0.045,0.323 -0.031,0.319 0.057,0.169 0.116,0.1 0.112,0.222 -0.037,0.234 -0.05,0.136 0.008,0.219 0.135,0.18 0.198,0.035 0.175,0.046 0.216,0.283 0.385,0.326 0.23,0.091 0.265,0.146 0.505,0.143 0.343,0.043 0.202,0.116 0.198,0.28 0.328,0.058 0.21,0.097 0.384,0.115 0.254,-0.066 0.223,-0.097 0.149,0.019 0.288,0.063 0.337,0.013 0.283,-0.066 0.226,-0.197 0.264,-0.266 0.315,-0.135 0.365,-0.048 0.25,-0.108 0.818,-0.18 0.33,-0.031 0.256,-0.174 0.227,-0.136 0.328,-0.059 0.443,0.143 0.424,0.119 0.513,0.039 0.341,0.164 0.241,0.155 0.38,0.123 0.422,-0.057 0.579,-0.049 0.383,0.071 0.4,0.282 0.246,0.226 0.277,0.481 0.289,0.233 0.253,0.19 0.319,0.012 0.797,0.015 0.438,0.101 0.364,0.053 0.087,0.101 -0.036,0.329 0.011,0.469 -0.005,0.215 0.08,0.162 0.124,0.029 0.067,0.229 0.181,0.135 0.323,0.163 0.544,0.553 0.324,0.236 0.256,0.08 0.335,-0.055 0.524,10e-4 0.889,0.002 0.609,0.166 0.211,0.113 0.622,0.131 0.685,0.144 0.577,0.151 0.341,-0.195 0.299,-0.018 0.285,0.141 0.285,0.212 0.221,-0.023 0.331,-0.099 1.057,-0.592 0.371,-0.222 0.26,0.057 0.232,-0.079 0.177,-0.067 0.451,-0.092 0.274,-0.025 0.283,-0.053 0.408,-0.036 0.829,-0.389 0.336,-0.076 0.568,0.108 0.306,-0.07 0.305,-0.197 0.395,-0.203 0.103,-0.33 0.202,-0.454 0.436,-0.334 0.354,-0.292 0.361,-0.285 0.443,-0.237 0.418,-0.173 0.532,-0.453 0.424,-0.229 0.211,-0.075 0.251,0.083 0.47,0.061 0.34,-0.019 0.191,0.053 0.383,0.221 0.348,0.194 0.266,0.346 0.495,0.481 0.254,0.161 0.181,0.066 0.445,0.045 0.364,0.023 0.218,-0.11 0.367,-0.201 0.585,-0.255 0.23,0.007 0.377,0.136 0.562,0.251 0.226,0.188 0.146,0.231 0.577,0.373 0.372,0.194 0.629,0.294 0.649,0.066 0.621,0.318 0.32,0.096 0.171,0 0.879,-0.774 0.743,-0.657 0.854,-0.514 0.628,-0.07 0.472,-0.15 0.314,-0.231 0.187,-0.386 0.057,-0.542 -0.126,-0.329 -0.308,-0.114 -0.079,-0.115 0.148,-0.117 0.11,-0.227 0.069,-0.338 0.178,-0.322 0.285,-0.304 0.158,-0.338 0.029,-0.372 0.172,-0.372 0.313,-0.371 0.172,-0.346 0.029,-0.32 0.159,-0.392 0.432,-0.695 0.28,-0.803 0.478,-0.552 0.768,-0.568 0.479,-0.565 0.191,-0.562 -0.015,-0.498 -0.222,-0.432 -0.043,-0.44 0.138,-0.449 -0.121,-0.336 -0.379,-0.223 -0.452,-0.055 -0.525,0.113 -0.295,-0.141 -0.065,-0.394 0.141,-0.319 0.347,-0.244 0.57,-0.595 0.794,-0.95 0.79,-0.527 1.178,-0.152 0.95,-0.313 0.968,-0.318 0.699,-0.158 0.119,0.106 0.381,0.026 0.643,-0.054 0.597,-0.137 0.552,-0.221 0.437,-0.052 0.321,0.117 0.184,0.006 0.127,0.014 0.07,-0.001 0.135,-0.094 0.373,0.167 0.713,0.496 0.447,0.22 0.185,-0.054 0.2,0.137 0.219,0.328 0.271,0.193 0.488,0.089 0.484,0.358 0.195,0.02 0.068,-0.201 0.181,-0.115 0.292,-0.03 0.423,0.177 0.553,0.383 0.347,0.168 0.141,-0.046 0.148,0.071 0.119,0.179 0.011,0.221 -0.041,0.118 0.133,0.186 0.153,0 0.25,0.089 0.196,0.328 0.176,0.152 0.123,0.131 0.022,0.109 0.011,0.11 -0.036,0.085 -0.067,0.141 -0.021,0.151 0.085,0.17 0.311,0.123 0.105,0.127 0.024,0.162 0.097,0.179 0.212,0.207 0.08,0.173 -0.049,0.139 0.063,0.116 0.104,0.091 0.022,0.329 0.009,0.189 0.171,0.212 0.035,0.434 0.119,0.479 0.401,0.655 0.133,0.354 -0.034,0.42 0.058,0.197 0.183,0.095 0.087,0.177 -0.01,0.259 0.071,0.161 0.058,0.171 -0.039,0.266 0.058,0.239 0.094,0.14 0.066,0.258 0.037,0.322 0.269,0.508 0.499,0.694 0.306,0.538 0.111,0.382 10e-4,0.314 -0.109,0.246 -0.006,0.179 0.098,0.112 0.029,0.151 -0.039,0.191 0.162,0.226 0.548,0.392 -0.219,0.6 -0.058,0.421 0.029,0.442 0.136,0.311 0.241,0.18 0.15,0.188 0.059,0.196 0.29,0.213 0.52,0.231 0.667,0.041 0.813,-0.151 0.497,-0.025 0.183,0.1 0.063,0.152 -0.059,0.203 0.138,0.133 0.334,0.064 0.229,0.127 0.126,0.192 0.154,0.054 0.183,-0.083 0.178,0.012 0.173,0.106 0.112,-0.037 0.098,-0.116 0.157,0 0.161,0.002 0.1,0.281 0.162,0.158 0.224,0.035 0.341,0.341 0.686,0.969 0.446,0.343 0.447,0.107 0.556,0.022 0.18,0.374 -0.146,0.395 -0.037,0.329 0.126,0.118 0.174,0.386 0.246,0.224 0.047,0.177 0.114,0.198 -0.048,0.365 -0.211,0.533 0.058,0.454 0.326,0.375 0.188,0.361 0.049,0.346 0.081,0.21 0.115,0.074 0.334,-0.026 0.555,-0.125 0.406,0.021 0.26,0.169 0.641,0.006 1.023,-0.156 0.646,-0.048 0.27,0.06 0.24,-0.223 0.211,-0.507 0.197,-0.238 0.185,0.03 0.292,-0.163 0.401,-0.357 0.348,-0.173 0.441,0.018 0.47,0.018 0.294,-0.15 0.276,-0.313 0.479,-0.277 1.021,-0.363 0.245,-0.057 0.117,0.02 0.34,0.057 0.302,0.142 0.285,0.285 0.044,0.183 -0.032,0.24 -0.063,0.139 -0.117,0.156 -0.11,0.253 0.071,0.197 0.165,0.421 0.136,0.304 0.15,0.358 -0.067,0.128 -0.091,0.248 -0.279,0.419 -0.152,0.16 -0.164,0.156 -0.283,0.038 -0.121,0.036 -0.137,0.066 -0.086,0.148 -0.098,0.104 -0.162,0.208 -0.013,0.179 0.073,0.266 0.036,0.272 -0.183,0.243 -0.142,0.373 -0.043,0.112 -0.07,0.282 -0.021,0.098 -0.045,0.592 -0.183,0.403 -0.255,0.468 0.057,0.279 0.045,0.258 -0.063,0.125 -0.016,0.109 -0.037,0.248 -0.08,0.095 -0.232,0.155 -0.139,0.187 0.029,0.283 -0.071,0.245 -0.106,0.216 -0.111,0.141 -0.16,0.09 -0.106,0.076 -0.08,0.274 -0.024,0.212 -0.075,0.211 0.046,0.215 -0.081,0.186 -0.228,0.13 -0.129,0.077 -0.119,0.031 -0.228,0.202 -0.204,0.691 -0.046,0.401 0.047,0.356 -0.286,0.223 -0.212,0.177 -0.133,-0.064 -0.141,-0.06 -0.324,-0.077 -0.162,-0.052 -0.326,-0.116 -0.522,-0.147 -0.51,-0.171 -0.32,-0.09 -0.252,-0.072 -0.191,-0.118 -0.161,-0.211 -0.16,0.085 -0.148,0.25 -0.247,0.148 -0.112,0.273 -0.099,0.209 -0.256,0.279 -0.114,0.115 -0.501,0.189 -0.113,0.063 -0.409,0.04 -0.139,0.083 -0.144,0.176 -0.039,0.175 0.102,0.184 0.159,0.368 0.074,0.251 0.108,0.497 0.363,1.553 -0.117,0.267 -0.109,1.157 0.026,0.208 -0.011,0.324 0.007,0.237 0.075,0.059 0.098,0.083 0.05,0.138 -0.013,0.212 -0.05,0.155 -0.077,0.307 -0.102,0.443 -0.113,0.17 -0.074,0.135 -0.063,0.093 -0.008,0.313 -0.042,0.206 -0.177,0.073 -0.176,0.12 -0.209,-0.044 -0.184,0.024 -0.227,0.08 -0.407,0.093 -0.236,0.124 -0.113,0.09 -0.078,0.108 -0.014,0.104 0.054,0.055 0.229,0.042 0.157,0.194 0.022,0.212 -0.162,0.121 0.076,0.23 0.18,0.224 0.094,0.163 0.019,0.169 0.082,0.095 0.12,-0.087 0.292,-0.747 -0.35,-0.507 0.131,-0.064 0.532,0.149 0.222,-0.042 0.375,0.073 0.244,-0.271 0.132,-0.284 0.283,-0.191 0.346,-0.665 0.577,-0.79 0.204,-0.202 0.404,-0.179 0.104,0.022 0.104,0.062 -0.322,0.42 -0.089,0.29 0.227,-0.001 0.229,-0.09 0.574,-0.483 0.214,-0.263 0.07,0.288 -0.086,1.36 0.498,-0.101 0.267,0.146 0.372,-0.016 0.434,0.313 0.17,-0.044 0.204,-0.011 0.176,0.325 0.282,0.099 0.476,-0.255 0.723,-0.245 0.344,-0.007 0.845,-0.448 0.41,-0.362 1.502,-0.952 0.632,-0.523 0.602,-0.382 0.362,-0.614 0.626,-0.583 0.016,-0.247 0.124,-0.282 0.959,-1.568 0.315,-0.26 0.436,-0.193 0.187,-0.286 0.119,-0.412 0.587,-0.612 0.403,-0.616 0.374,-0.403 0.186,-0.361 0.964,-0.884 0.781,-0.984 0.73,-0.715 0.234,-0.442 0.946,-1.3 0.292,-0.86 0.355,-0.327 0.154,-0.822 0.305,-0.592 0.082,-0.354 0.16,-0.333 1.163,-1.343 0.466,-1.042 0.577,-1.051 0.414,-0.367 0.438,-0.479 0.237,-0.38 0.667,-0.602 0.322,-0.417 0.161,-0.426 0.15,-1.055 0.433,-0.814 -0.126,-0.131 -0.069,-0.252 0.047,-0.282 0.064,-0.168 0.045,-0.264 0.097,-0.295 0.09,-0.179 0.242,-1.14 -0.017,-0.716 -0.132,-0.277 -0.005,-0.373 0.342,-0.53 0.081,-0.088 0.031,-0.125 -0.17,-0.106 -0.08,-0.105 -0.166,-1.821 0.125,-1.123 0.351,-0.828 0.07,-0.287 0.048,-0.807 0.423,-0.815 0.265,-0.925 0.552,-0.487 0.362,-0.602 0.305,-0.272 0.052,-0.621 0.28,-0.553 -0.214,-0.255 -0.223,-0.168 -0.449,-0.446 -0.104,-0.309 0.315,-0.526 0.059,-0.473 -0.028,-0.867 -0.474,-0.267 -0.596,-0.661 -0.098,-0.224 0.133,-0.017 0.825,0.355 0.412,-0.382 0.208,-0.405 -0.08,-0.509 -0.438,-0.196 -0.569,-0.562 -0.025,-0.19 -0.894,-0.479 -0.955,-1.022 -0.296,-0.896 -0.177,-0.241 -0.899,-0.735 -0.176,-0.245 -0.247,-0.1 -1.089,0.403 -0.603,-0.119 -1.148,-0.49 -0.108,0.104 0.165,0.363 -0.031,0.359 0.048,0.496 -0.063,0.828 -0.109,0.593 -0.42,0.825 -0.169,0.156 -0.366,0.066 -0.198,-0.005 0.119,-0.322 0.322,-0.386 0.455,-0.685 -0.002,-0.61 -0.113,-0.06 -0.097,10e-4 -0.321,0.239 -0.354,0.867 -0.85,0.581 -0.596,0.204 -1.15,0.101 -0.209,-0.034 -0.091,-0.156 0.259,-0.248 0.571,-0.356 0.358,-0.752 0.396,-0.178 0.137,-0.207 -0.596,-0.113 -0.41,-0.272 -0.385,-0.348 0.18,-0.11 0.135,-0.033 0.174,-0.124 0.429,-0.608 -0.396,-0.038 -0.414,0.042 -0.662,0.48 -0.128,0.256 0.214,0.342 0.24,0.151 -0.288,0.968 -0.383,-0.125 -0.372,0.042 -0.234,0.271 -0.235,-0.104 -0.101,-0.604 0.13,-0.616 0.115,-1.401 0.141,-0.477 0.009,-0.526 -0.074,-0.288 -0.231,-0.016 -0.377,0.052 -0.961,-0.002 -1.085,0.146 -1.161,-0.525 -0.315,-0.072 -0.189,-0.117 -0.13,-0.531 0.065,-0.304 0.077,-0.195 0.781,-0.833 0.59,-0.229 1.19,-0.941 0.494,-0.779 0.307,-0.33 0.936,-0.583 0.613,-0.503 0.498,-0.484 0.546,-0.412 0.529,-0.689 0.333,-0.137 1.073,-1.482 0.188,-0.333 0.11,-0.456 0.105,-0.206 1.248,-1.721 0.852,-0.631 0.605,-0.896 0.736,-0.354 0.177,-0.148 0.315,-0.507 0.517,-0.305 0.163,-0.183 0.396,-0.723 1.248,-0.663 0.135,-0.272 0.533,-1.834 0.295,-0.486 0.555,-0.605 1.009,-0.596 0.718,-0.65 0.426,-0.519 0.76,-1.379 0.855,-0.834 0.702,-0.479 1.717,-0.713 0.931,0.146 0.969,-0.373 0.714,0.017 1.011,0.176 3.006,-0.205 0.566,0.219 0.204,0.239 0.288,0.723 0.331,0.152 0.628,-0.278 0.479,-1.148 0.261,-0.146 0.748,0.463 0.663,0.04 1.332,0.534 0.486,-0.122 0.524,-0.535 1.074,-0.144 0.656,0.834 0.66,0.024 0.526,-0.136 0.142,-0.475 -0.21,-0.17 -0.408,0.146 -0.1,-0.413 0.248,-0.462 0.358,0.316 0.584,-0.03 0.202,-0.042 -0.083,-0.213 -0.134,-0.177 -0.176,-0.397 0.633,-0.543 0.376,-0.181 0.612,-0.052 1.571,0.662 0.345,0.069 0.37,0.267 0.59,0.19 -0.358,0.173 -0.158,0.169 0.37,-0.067 0.32,0.207 0.264,0.046 0.112,-0.081 0.137,-0.263 0.197,-0.267 0.144,-0.079 0.384,0.013 0.499,0.123 0.387,0.205 0.876,1.106 0.405,0.215 0.455,-0.036 0.183,0.069 0.255,0.298 -0.759,0.348 -0.72,0.073 -0.642,-0.095 -1.078,0.445 0.578,1.127 1.06,0.046 1.076,-0.238 0.217,-0.47 0.434,-0.184 0.228,0.024 0.491,0.393 0.68,0.151 0.181,-0.069 0.549,-0.777 0.332,-0.068 0.216,0.017 0.247,-0.674 0.938,-0.055 0.552,0.604 0.334,0.211 0.662,-0.18 0.362,-0.433 0.23,-0.157 0.689,0.412 0.338,-0.253 0.541,-0.044 0.403,0.03 -0.021,-0.438 0.038,-0.494 -0.549,-0.492 -1.091,-0.5 -0.631,0.324 -0.24,0.035 -0.166,-0.045 -0.177,-0.249 0.166,-0.397 0.168,-0.321 -0.007,-0.4 0.074,-0.573 0.272,-0.242 0.143,-0.039 0.386,-1.184 1.102,-1.589 1.283,-0.984 0.809,-0.757 0.385,-0.543 0.569,-1.258 0.809,-0.924 0.389,-0.296 0.413,-0.387 0.142,-1.218 0.31,-0.288 0.284,-0.209 0.54,-0.651 0.804,-0.422 0.277,-0.308 0.926,0.022 0.76,0.247 0.229,-0.067 0.512,-0.36 0.599,0.087 0.778,-0.233 0.708,-0.428 0.315,-0.042 0.297,0.091 0.359,0.63 0.206,0.158 0.157,0.367 0.477,-0.23 1.292,-0.857 0.155,-0.006 0.2,0.057 0.034,0.332 -0.012,0.268 -0.197,0.862 -0.236,0.648 -0.651,1.251 -0.134,0.188 0.087,0.334 0.099,0.615 -0.321,0.664 -0.124,0.331 0.26,0.076 0.34,-0.37 0.506,-0.232 0.272,0.017 0.273,0.111 -0.43,1.119 -0.069,0.585 -0.066,0.223 -0.011,0.299 0.319,-0.164 0.227,-0.238 0.319,-0.179 0.799,-0.077 0.417,-0.801 0.343,-0.405 3.23,-3.366 0.573,-0.715 0.319,-0.048 0.284,0.119 0.257,-0.015 0.053,-0.251 0.097,-0.095 0.291,0.037 0.185,0.634 0.202,0.315 0.149,-0.059 0.107,-0.097 0.15,-0.241 0.165,-0.197 0.169,-0.323 -0.141,-0.22 -0.557,-0.326 0.023,-0.591 0.317,-0.947 -0.035,-0.617 0.127,-0.641 0.14,-0.325 0.125,-0.142 0.124,-0.218 -0.162,-0.499 0.12,-0.34 0.125,-0.24 2.593,-0.888 0.457,-0.049 0.417,0.178 0.633,0.636 0.706,0.329 0.989,0.14 0.059,0.284 -0.385,-0.096 -0.187,0.09 0.033,0.257 -0.049,0.192 -0.236,-0.227 -0.663,-0.123 -0.609,-0.254 -0.203,0.02 -0.872,0.75 -0.226,0.328 -0.373,1.484 -0.018,1.02 -0.136,0.967 -0.384,0.417 -0.128,0.482 -0.093,0.569 0.473,0.243 0.055,0.185 0.037,0.26 -0.314,0.603 -0.769,0.751 -0.085,0.156 -0.1,0.34 0.438,0.628 -0.351,0.228 -0.333,0.158 -0.32,0.284 -1.063,0.101 -0.729,0.707 -1.255,0.701 -0.556,0.4 -0.182,0.262 -0.442,1.064 -0.26,0.451 -0.854,0.702 -0.646,1.017 -1.021,1.216 -0.403,0.14 -0.461,0.3 -0.553,0.846 -1.412,1.463 -0.718,1.758 -0.39,0.582 -0.404,0.46 -0.274,0.489 -0.487,0.511 -0.982,0.761 -0.667,0.631 -0.36,0.421 -0.129,0.394 -0.182,-0.086 -0.662,0.208 -0.864,-0.179 -0.606,1.163 -0.655,0.118 -0.648,-0.281 -0.319,0.14 -0.118,0.126 -0.107,0.166 0.304,0.373 0.136,0.32 0.043,0.286 0.037,0.494 -0.359,0.915 -0.338,0.714 -0.559,0.676 -1.296,1.229 -0.118,0.151 -0.12,0.29 -0.746,3.151 -0.206,1.394 -0.248,2.204 0.024,0.734 0.159,1.635 0.241,1.662 0.557,2.842 0.128,0.872 0.417,3.463 0.032,0.652 0.124,0.55 0.208,0.559 0.382,0.539 0.035,0.656 0.316,2.068 0.029,1.978 0.059,0.426 0.063,0.308 0.357,0.379 0.119,0.459 0.03,0.343 0.066,0.346 0.279,-0.166 0.996,-0.919 0.807,-0.878 0.116,-0.318 0.274,-0.246 0.546,-0.319 0.786,-0.922 0.641,-1.278 0.37,-0.978 0.083,-0.358 0.02,-0.354 -0.055,-0.766 0.148,-0.285 0.211,-0.857 -0.137,-0.226 -0.358,-0.164 0.111,-0.349 0.26,-0.082 0.211,0.164 0.123,0.369 0.174,0.123 0.58,-0.645 0.517,-0.324 1.262,-0.563 0.521,0.038 0.493,0.488 0.218,-0.021 -0.064,-0.679 -0.293,-0.496 0.004,-0.314 0.159,-0.492 -0.116,-0.324 -0.122,-0.245 -0.076,-0.525 0.219,-1.068 0.248,-0.584 0.181,-0.279 0.602,-0.475 0.641,-0.686 0.718,-0.533 0.457,-0.179 0.545,-0.096 0.461,0.375 0.929,0.021 0.282,-0.081 0.678,-0.753 0.389,-0.308 -0.07,-0.651 -0.236,-0.545 -0.482,-0.689 -0.11,-0.326 -0.156,-0.751 -0.016,-0.682 0.146,-0.786 0.416,-0.923 0.452,-1.248 0.172,-0.194 0.527,-0.299 0.356,-0.24 0.188,-0.127 -0.111,-0.7 0.282,-0.283 0.231,-0.178 0.578,0.069 0.187,-0.161 0.265,-0.07 -0.177,0.37 -0.23,0.251 -0.505,0.347 -0.239,0.497 0.596,0.838 0.368,0.16 0.213,-0.055 0.398,-0.463 0.202,-0.185 0.208,-0.296 -0.116,-1.087 -0.143,-0.593 0.037,-0.628 -0.256,-0.191 -0.334,-0.081 -0.349,0.095 -0.202,-0.175 -0.134,-0.279 -0.032,-0.327 0.067,-0.76 -0.02,-0.409 -0.13,-0.729 0.002,-0.208 0.048,-0.381 0.498,-0.624 0.426,-0.456 0.223,-0.379 0.072,-0.259 0.034,-0.543 -0.227,-0.247 -1.198,-0.573 -0.18,-0.012 -0.371,0.233 -0.154,0.726 -0.212,0.257 0.002,-0.146 0.054,-0.175 -0.601,-0.267 -0.279,-0.24 -0.163,-0.23 -0.106,-0.331 -0.117,-0.507 0.25,-1.041 0.26,-0.932 0.874,-1.403 0.534,-0.493 0.572,-0.755 0.245,-0.134 0.099,-0.123 0.097,-0.183 -0.181,-0.513 0.099,-0.125 0.099,-0.061 0.21,0.092 0.527,-0.937 -0.011,-1.197 0.146,-1.027 0.122,-0.423 0.127,-0.298 0.235,-0.29 0.226,-0.152 0.325,-0.36 0.15,-0.278 0.103,-0.073 0.372,0.022 0.294,0.11 0.33,0.185 -0.062,0.485 0.389,-0.426 0.352,-0.472 0.177,-0.083 0.239,0.064 0.405,0.358 0.309,0.689 0.21,0.186 0.278,-0.015 0.184,-0.096 0.153,-0.474 0.03,-0.858 0.304,-0.147 0.26,-0.057 0.367,-0.396 0.469,-0.177 1.008,-0.681 0.668,-0.701 0.482,-0.025 -0.123,0.401 -0.044,0.386 -0.176,0.948 -0.173,0.503 -0.091,0.614 0.036,0.321 0.105,0.405 0.243,-0.038 0.165,-0.09 0.339,-0.417 1.436,-2.025 0.737,-0.563 1.12,-0.356 0.337,-0.229 1.099,-0.368 0.913,-0.104 0.582,0.167 0.331,-0.005 1.23,-0.183 0.138,0.224 0.962,0.675 0.551,0.978 0.111,0.085 0.092,0.182 0.029,0.395 0.083,0.245 0.156,0.209 0.48,0.454 0.553,0.115 0.128,-0.248 0.075,-0.213 0.25,-1.192 0.214,-0.471 0.003,-0.288 0.053,-0.234 0.536,-0.35 0.421,-0.15 1.517,-1.159 0.673,-0.673 0.283,0.033 0.245,-0.154 0.225,-0.21 0.195,-0.086 0.409,-0.475 0.504,-0.37 -0.085,-0.318 0.095,-0.295 0.283,-0.107 0.246,-0.026 0.314,-0.343 -0.02,-0.267 0.114,-0.112 0.164,0.021 0.221,0.103 0.113,-0.108 -0.197,-0.374 -0.087,-0.355 0.14,-0.193 0.556,0.369 0.217,-0.003 0.727,-0.881 0.653,-0.94 0.559,0.217 0.888,-0.685 0.41,-0.133 0.644,-0.036 0.271,-0.262 0.293,-0.478 0.231,0.054 1.108,-0.57 0.212,-0.407 0.274,-0.114 0.214,-0.04 0.482,-0.338 2.005,-0.974 0.304,-0.392 0.747,-0.575 0.575,-0.184 0.707,-0.152 0.085,-0.186 -0.51,-0.213 -0.122,-0.196 -0.003,-0.211 0.074,-0.177 0.094,-0.337 0.19,-0.075 0.229,0.24 0.241,-0.001 0.111,-0.207 0.114,0.018 0.058,0.271 -0.123,0.316 -0.056,0.249 -0.01,0.277 0.165,0.071 0.875,0.028 1,0.218 2.65,1.162 0.227,0.19 0.214,0.02 0.037,-0.459 0.121,-0.44 0.313,-0.25 0.529,-0.625 0.262,-0.454 0,-0.526 -0.167,-0.548 -0.365,-0.128 -0.221,-0.346 -0.12,-0.422 0.195,-0.307 0.213,-0.123 -0.046,-0.43 -0.158,-0.267 -0.854,-0.574 -0.299,-0.391 -0.009,-0.345 -0.353,-0.879 -0.049,0.189 0.031,0.425 -0.119,0.298 -0.184,-0.047 -0.028,-0.236 0.106,-0.512 -0.148,-0.221 -0.526,-0.11 -0.072,-0.199 0.521,-0.285 0.154,0 0.141,-0.103 -0.109,-1.111 -0.118,-0.783 -0.32,-0.066 -0.237,-0.229 0.065,-0.498 0.007,-0.249 -0.269,-0.856 -0.192,-0.346 -0.234,-0.323 -0.184,0.358 -0.094,0.477 -0.241,0.101 -0.257,-0.017 -0.746,-0.533 -0.714,-0.906 -0.065,-0.835 0.161,-1.074 -0.111,-0.174 -0.112,-0.07 -0.947,0.36 -0.581,0.56 -0.314,0.059 -0.626,-0.377 -1.029,0.631 0.22,-0.367 0.18,-0.143 0.19,-0.271 -0.142,-0.517 -0.151,-0.39 -0.218,-0.275 -0.316,-0.132 -0.311,0.261 -0.245,0.263 -0.507,0.282 -0.975,0.235 -0.655,0 -1.118,0.428 -0.421,-0.017 1.541,-0.61 0.838,-0.045 1.08,-0.397 0.785,-0.772 1.034,0.699 0.356,0.1 0.771,-0.061 0.667,0.412 0.223,-0.119 0.21,-0.375 -0.279,-0.564 -0.241,-0.349 -0.273,-0.109 -0.826,0.059 -0.543,-0.12 -0.312,-0.146 0.202,-0.159 0.594,0.224 0.719,-0.294 0.838,0.45 0.203,0.401 0.239,0.147 0.687,1.012 0.469,0.4 1.506,0.293 0.658,0.453 0.502,-0.184 1.267,-0.987 0.837,-0.266 0.57,-0.653 0.494,-0.75 0.484,-0.22 0.829,-0.799 0.195,-0.381 0.324,-0.954 0.19,-0.397 0.279,-0.482 0.021,-0.396 -0.061,-0.43 -0.233,-0.335 -0.537,-0.476 -0.246,-0.316 -0.173,-0.666 0.018,-0.806 0.12,-0.606 0.161,-0.543 0.188,0.39 0.543,-0.091 0.269,-0.149 0.03,-0.397 -0.067,-0.471 0.132,-0.123 0.282,-0.052 0.04,-0.285 0.099,-0.152 0.103,0.203 0.005,0.795 0.222,0.198 0.311,0.164 0.133,-0.049 0.133,-0.108 0.19,-0.241 0.385,-0.822 0.25,-0.325 -0.021,0.595 -0.147,0.822 -0.083,0.225 -0.218,0.29 -0.104,0.602 -0.045,0.163 -0.313,-0.165 -0.227,0.033 0.168,0.663 0.247,0.493 0.314,0.475 0.339,0.283 0.09,-0.008 0.067,0.101 0.009,0.298 -0.075,0.705 0.06,0.378 0.259,0.282 0.287,0.072 1.717,-0.033 0.589,-0.095 0.88,-0.664 0.334,-0.081 0.376,0.083 1.052,0.365 1.274,0.518 0.479,0.799 0.188,0.803 0.072,0.85 -0.082,0.341 0.016,0.288 0.388,0.43 0.548,0.522 0.105,0.122 0.115,0.21 0.132,0.094 0.391,0.056 0.309,-0.101 0.309,-0.029 0.576,0.248 0.729,0.383 0.709,0.525 0.317,0.391 0.571,0.839 0.291,0.255 0.472,0.293 0.179,0.046 0.175,-0.053 0.361,-0.409 0.223,-0.328 0.191,-0.395 0.051,0.34 0,0.291 -0.186,0.21 -10e-4,0.36 0.281,0.422 0.332,0.064 0.416,-0.114 0.138,-0.196 0.124,-0.27 -0.093,-0.896 0.128,-0.122 0.31295,0.177 0.1,0.253 0.048,0.31 0.124,0.034 0.823,-0.044 0.063,-0.114 -0.042,-0.28 -0.12,-0.265 -0.143,-0.188 -0.361,-0.22 -0.367,-0.166 -0.301,-0.043 -0.13095,-0.124 0.033,-0.23 -0.0987,-0.269 0.061,-0.159 0.25495,-0.21 0.03,-0.193 -0.26995,-0.234 -0.283,-0.073 -0.247,0.13 0.056,-0.197 0.188,-0.194 0.285,-0.083 0.29395,0.042 0.561,-0.166 0.545,-0.376 0.265,-0.248 0.256,-0.305 -0.029,-0.536 -0.175,-0.515 -0.261,-0.14 -0.29,0.032 -0.255,-0.042 -0.249,-0.136 0.989,-0.182 0.11,-0.182 0.164,-0.823 -0.06,-0.206 -0.205,0.054 -0.314,-0.012 0.072,-0.168 0.107,-0.145 -0.569,-0.786 -0.636,-0.469 0.18,-0.078 0.313,0.017 0.483,0.139 0.318,0.354 0.112,0.239 0.136,0.081 0.287,0.024 0.489,0.168 0.028,0.231 0.112,0.081 0.327,-0.099 0.91,-0.153 0.287,0.04 0.415,0.166 0.129,0.004 0.18,-0.06 0.146,-0.264 -0.226,-0.53 -0.474,-0.479 -0.276,-0.363 -0.139,-0.29 0.083,-0.11 0.126,0.044 0.406,0.458 0.317,0.286 0.329,0.205 0.294,0.152 0.647,0.143 0.295,-0.236 0.056,-0.368 -0.062,-0.774 0.063,-0.287 0.392,-0.433 0.678,-0.548 0.438,-0.175 0.152,0.017 0.162,0.172 0.168,0.049 0.288,-0.408 -0.126,-0.588 z m -219.29195,-71.166 -0.216,0.234 -0.052,0.321 -0.018,0.418 -0.095,0.705 -0.195,0.26 -0.68,-0.109 -0.189,0.063 -0.187,0.159 0.392,0.831 0.755,0.555 0.542,0.577 0.254,0.174 1.646,0.525 0.081,-0.081 0.467,-0.964 0.597,-0.438 0.192,-0.345 0.113,-0.46 0.151,-0.372 0.096,-0.494 -0.283,-0.424 -0.938,-0.404 -2.433,-0.731 z m -128.101,35.679 -0.062,0.132 -0.065,0.253 0.036,0.945 0.114,0.462 0.188,0.389 0.148,0.112 -0.021,-0.338 -0.29,-1.328 0.015,-0.599 -0.063,-0.028 z m 10.206,31.613 -0.446,-0.112 -0.329,-0.176 -0.517,-0.018 -0.319,-0.086 -0.094,0.249 0.512,1.065 0.542,0.532 0.494,-0.088 0.108,-0.108 0.143,-0.363 -0.148,-0.214 10e-4,-0.196 0.053,-0.485 z m -7.894,-20.646 0.228,-0.698 -0.045,-0.34 -0.316,-0.026 -0.534,0.739 0.061,0.129 0.142,0.159 0.464,0.037 z",
                        title: "Russia",
                        id: "RU",
                    },
                    {
                        d:
                            "m 560.52075,465.8974 -0.092,0.043 -0.019,0.135 0.106,0.215 0.348,0.444 0.221,0.081 0.144,0.173 0.142,0.291 0.042,0.365 -0.059,0.438 0.035,0.325 0.128,0.214 0.033,0.277 -0.06,0.34 -0.074,0.204 -0.087,0.068 -0.099,0.025 -0.134,-0.023 -0.163,0.029 -0.177,0.064 -0.112,0.009 -0.07,-0.012 -0.13,-0.055 -0.207,-0.176 -0.386,0.097 -0.105,-0.002 -0.141,0.084 -0.116,0.103 -0.069,0.007 -0.072,-0.014 -0.332,-0.207 -0.122,0.006 -0.05,0.583 -0.055,0.325 -0.069,0.144 -0.238,0.139 -0.239,0.079 -0.131,-0.005 -0.527,0.043 -0.206,10e-4 -0.114,-0.047 -0.148,-0.331 -0.279,-0.147 -0.268,-0.069 -0.109,0.019 -0.097,0.173 -0.04,0.155 -0.26,-0.106 -0.078,-0.131 -0.007,-0.222 -0.095,-0.304 0.053,-0.129 0.102,-0.084 0.216,-0.16 0.328,-0.223 0.07,-0.105 0.046,-0.177 -0.021,-0.411 -0.031,-0.347 0.039,-0.123 0.15,-0.268 0.2,-0.275 0.235,-0.29 0.141,-0.028 0.185,-0.109 0.196,-0.163 0.11,-0.061 0.092,-0.002 0.605,-0.144 0.06,0.045 0.098,0.279 0.052,0.041 0.084,0.01 0.17,-0.064 0.311,-0.219 0.136,-0.132 0.16,-0.187 0.205,-0.21 0.114,-0.184 0.111,-0.107 0.146,-0.032 0.162,0.009 z",
                        title: "Rwanda",
                        id: "RW",
                    },
                    {
                        d:
                            "m 605.48575,378.0324 0.542,0.069 0.723,0.092 0.439,0.063 0.826,0.117 0.247,0.484 0.09,0.339 0.083,0.33 0.248,0.301 0.563,-0.007 0.499,-0.006 0.615,-0.01 0.488,-0.007 0.157,0.299 0.069,0.298 0.29,0.705 0.414,0.549 0.099,0.2 0.066,0.301 -0.072,0.112 -0.028,0.129 0.307,0.3 0.506,0.254 0.198,0.064 0.225,0.112 -0.175,0.173 0.299,0.4 0.347,0.407 0.372,0.092 0.502,0.614 0.757,0.397 0.459,0.52 -0.043,0.01 -0.135,-0.053 -0.169,-0.071 -0.051,0.064 0.009,0.218 0.045,0.256 0.234,0.221 0.208,0.159 0.081,0.301 -0.164,0.647 -0.057,0 -0.11,-0.056 -0.117,-0.013 -0.063,0.037 0.139,0.465 0.139,0.356 0.166,0.282 0.139,0.412 0.119,0.176 0.487,0.437 0.15,0.365 0.139,0.679 0.306,0.378 0.165,0.291 0.221,0.247 0.144,0.337 0.204,0.259 0.106,0.065 0.159,0.027 0.198,10e-4 0.237,-0.067 0.253,-0.063 0.197,0.131 0.204,-0.02 0.021,0.122 -0.137,0.166 -0.168,0.418 0.239,0.066 0.229,0.033 0.162,0.067 0.095,0 0,0.087 0.011,0.396 0.057,0.151 0.104,0.134 0.154,0.2 0.154,0.2 0.154,0.2 0.154,0.2 0.154,0.2 0.155,0.2 0.154,0.199 0.154,0.2 0.154,0.199 0.154,0.199 0.154,0.199 0.154,0.199 0.154,0.199 0.154,0.199 0.155,0.199 0.154,0.198 0.127,0.164 0.236,0.031 0.075,0.01 0.213,0.028 0.33,0.043 0.428,0.057 0.507,0.067 0.565,0.074 0.605,0.08 0.624,0.082 0.625,0.082 0.604,0.08 0.565,0.075 0.507,0.066 0.429,0.057 0.33,0.043 0.213,0.028 0.075,0.01 0.223,0.029 0.042,-0.007 0.187,-0.243 0.206,0.343 0.171,0.284 0.234,0.39 0.25,0.414 0.238,0.396 0.178,0.294 -0.095,0.305 -0.103,0.333 -0.103,0.333 -0.103,0.332 -0.104,0.332 -0.103,0.332 -0.103,0.332 -0.103,0.331 -0.103,0.331 -0.104,0.331 -0.103,0.331 -0.103,0.33 -0.103,0.33 -0.104,0.33 -0.103,0.33 -0.103,0.329 -0.103,0.329 -0.124,0.396 -0.299,0.105 -0.482,0.17 -0.483,0.17 -0.482,0.17 -0.482,0.17 -0.483,0.17 -0.482,0.169 -0.482,0.17 -0.483,0.17 -0.482,0.169 -0.483,0.169 -0.482,0.17 -0.482,0.169 -0.483,0.169 -0.482,0.169 -0.483,0.169 -0.482,0.169 -0.396,0.139 -0.659,0.093 -0.64,0.09 -0.72,0.102 -0.865,0.123 -0.679,0.096 -0.99,0.14 -0.889,0.125 -0.833,0.118 -0.833,0.118 -0.709,0.1 -0.423,0.116 -0.497,0.255 -0.763,0.391 -0.778,0.397 -0.403,0.206 -0.422,0.528 -0.214,0.267 -0.386,0.483 -0.292,0.364 -0.349,0.435 -0.152,0.386 -0.235,0.596 -0.203,0.15 -0.332,0.194 -0.302,0.138 -0.471,-0.02 -0.269,-0.366 -0.285,-0.389 -0.143,-0.156 -0.128,-0.008 -0.473,0.049 -0.57,0.06 -0.672,-0.063 -0.775,-0.074 -0.727,-0.069 -0.362,-0.052 -0.477,-0.252 -0.123,-0.05 -0.125,-0.012 -0.566,-0.006 -0.561,-0.006 -0.562,0.08 -0.538,-0.029 -0.558,0.046 -0.196,0.096 -0.218,-0.005 -0.136,0.085 -0.12,0.04 -0.142,-0.073 -0.174,0.016 -0.256,-0.063 -0.167,-0.165 -0.158,-0.145 -0.163,-0.08 -0.182,-0.05 -0.158,-10e-4 -0.202,0.088 -0.123,0.085 -0.312,0.285 -0.013,0.102 0.142,0.17 -0.043,0.08 -0.184,0.1 -0.057,0.269 -0.027,0.147 -0.027,0.352 0.082,0.277 0.109,0.102 0.005,0.119 -0.06,0.238 -0.169,0.073 -0.124,0.226 -0.076,0.105 -0.132,0.12 -0.525,0.399 -0.026,-0.232 -0.167,-0.344 -0.012,-0.243 -0.078,-0.244 -0.144,-0.188 -0.266,-0.196 -0.024,-0.266 -0.194,-0.263 -0.257,-0.212 -0.143,-0.392 -0.108,-0.521 -0.678,-0.686 -0.848,-0.634 -0.258,-0.357 -0.422,-0.729 -0.213,-0.577 -0.567,-0.665 -0.024,-0.256 -0.084,-0.312 -0.131,-0.348 -0.079,-0.274 -0.569,-1.206 -0.184,-0.192 -0.158,-0.27 -0.041,-0.209 -0.05,-0.114 -0.402,-0.198 -0.375,-0.508 -1.127,-0.81 -0.552,-0.081 -0.437,-0.29 -0.322,-0.379 -0.343,-0.654 -0.604,-0.708 -0.512,-1.006 0.161,-0.367 -0.01,-0.258 -0.158,-0.435 -0.171,-0.336 -0.118,-0.318 0.093,-0.457 0.036,-0.512 0.101,-0.272 0.073,-0.299 -0.095,-0.602 -0.17,-0.323 0.017,-0.215 -0.193,-0.105 -0.156,-0.234 0.163,0 -0.296,-0.325 -0.109,-0.181 -0.112,-0.442 -0.143,-0.338 -0.459,-0.768 -0.22,-0.469 -0.492,-0.607 -0.534,-0.449 -0.339,-0.204 -0.164,-0.186 -0.277,-0.006 -0.302,-0.266 -0.211,-0.01 -0.267,-0.043 -0.314,-0.513 -0.259,-0.481 -0.442,-0.627 0.111,-0.164 0.129,-0.267 -0.064,-0.35 -0.07,-0.238 -0.195,-0.434 -0.641,-1.082 -0.17,-0.159 -0.273,-0.183 -0.168,-0.47 -0.077,-0.422 -0.439,-0.205 -0.755,-1.526 -0.438,-0.535 -0.173,-0.36 -0.506,-0.593 -0.249,-0.591 -0.51,-0.546 -0.442,-0.949 -0.683,-0.951 -0.287,-0.165 -0.704,-0.068 -0.296,-0.07 -0.272,0.209 -0.024,-0.265 0.188,-0.367 0.271,-0.772 0.054,-0.678 0.426,-2.022 0.598,0.104 0.492,0.086 0.719,0.126 0.744,0.13 0.435,0.076 0.149,-0.033 0.602,-0.496 0.542,-0.448 0.325,-0.549 0.314,-0.533 0.144,-0.11 0.482,-0.1 0.765,-0.159 0.757,-0.157 0.061,-0.054 0.176,-0.429 0.224,-0.545 0.046,-0.057 0.055,-0.056 0.542,-0.306 0.329,-0.186 -0.469,-0.549 -0.442,-0.519 -0.496,-0.582 -0.42,-0.454 -0.629,-0.68 -0.412,-0.446 0.721,-0.212 0.78,-0.229 0.787,-0.231 0.947,-0.278 0.741,-0.218 1.106,-0.326 0.541,-0.159 0.098,-0.042 0.416,-0.386 0.626,0.108 0.941,0.163 0.909,0.156 0.958,0.185 0.307,0.15 0.925,0.552 0.601,0.358 0.702,0.417 0.877,0.521 0.602,0.357 0.771,0.457 0.601,0.521 0.761,0.659 0.836,0.722 0.688,0.56 0.948,0.77 0.934,0.757 0.915,0.739 0.732,0.591 0.927,0.746 0.072,0.028 0.937,0.084 1.259,0.114 1.265,0.114 1.142,0.103 0.498,-0.105 z m -27.886,10.642 -0.026,0.042 -0.118,-0.109 0.007,-0.239 0.102,-0.136 -0.008,0.186 0.044,0.188 -10e-4,0.068 z m 0.86,1.02 -0.074,0 -0.197,-0.209 -0.115,-0.154 -0.118,-0.104 -0.538,-0.209 -0.073,-0.135 0.082,-0.135 0.058,0.134 0.098,0.079 0.445,0.189 0.496,0.412 0.085,0.034 -0.149,0.098 z m 14.274,25.945 0.217,0.017 -0.09,-0.093 -0.019,-0.045 0.094,-0.134 0.31,0.276 -0.009,0.327 -0.026,0.075 -0.084,-0.07 -0.055,-0.069 -0.017,-0.074 -0.086,-0.08 -0.302,0.052 -0.188,-0.089 -0.269,-0.275 -0.072,-0.199 0.112,-0.039 0.119,-0.096 0.075,-0.157 -0.069,-0.163 0.16,0.026 0.086,0.167 0.017,0.379 0.024,0.08 -0.044,0.087 0.116,0.097 z",
                        title: "Saudi Arabia",
                        id: "SA",
                    },
                    {
                        d:
                            "m 916.88075,483.4134 0.089,0.099 -0.217,0.168 -0.286,-0.091 -0.063,-0.095 -0.007,-0.05 -0.2,0.032 -0.397,-0.083 -0.554,-0.402 -0.586,-0.757 -0.563,-0.419 -0.105,-0.13 -0.014,-0.216 0.076,-0.083 0.35,0.09 0.453,0.346 0.743,0.359 0.202,0.183 0.129,0.439 0.126,0.131 0.401,0.337 0.212,0.079 0.112,0.015 0.099,0.048 z m -4.622,-0.655 -0.282,0.067 -0.174,-0.09 0.077,-0.214 0.096,-0.111 0.353,0.197 -0.07,0.151 z m 11.335,4.044 0.005,0.065 -0.377,-0.235 -0.286,-0.288 -0.815,-0.313 -0.175,-0.161 -0.147,-0.02 -0.418,-0.262 -0.411,-0.177 -0.25,-0.228 -0.064,-0.093 -0.15,-0.056 -0.258,-0.25 -0.251,-0.166 -0.089,-0.303 -0.242,-0.208 -0.061,-0.091 0.777,0.168 0.36,0.332 0.308,0.188 0.107,0.136 0.277,0.187 0.249,0.017 0.249,0.188 0.227,0.05 0.179,0.098 1.155,0.839 -0.138,0.223 0.153,0.162 0.086,0.198 z m -8.956,-1.722 -0.054,0.039 -0.094,-0.152 -0.068,-0.047 0.002,-0.169 -0.283,-0.275 -0.023,-0.19 0.164,-0.186 0.221,0.108 0.219,0.234 0.257,0.076 -0.053,0.155 -0.231,0.279 -0.057,0.128 z m 1.359,0.521 -0.062,0.042 -0.306,-0.016 -0.232,-0.291 0.002,-0.215 0.183,-0.197 0.221,-0.035 0.121,0.076 0.112,0.165 0.041,0.21 -0.025,0.186 -0.055,0.075 z m -1.595,0.179 -0.034,0.07 -0.146,-0.348 0.007,-0.175 0.025,-0.112 0.054,-0.034 0.118,0.387 -0.024,0.212 z m 3.255,0.199 0.176,0.23 0.203,0.514 -0.037,0.177 -0.145,0.01 -0.041,0.111 -0.196,-0.25 -0.262,-0.067 -0.191,-0.153 -0.065,-0.303 -0.019,-0.191 -0.15,-0.033 -0.43,0.048 -0.137,0.163 -0.196,-0.052 -0.042,-0.147 0.03,-0.144 0.262,-0.142 0.054,-0.183 0.26,-0.314 0.161,-0.054 0.304,0.113 0.037,0.447 0.109,0.146 0.315,0.074 z m 8.38,0.202 0.696,0.84 -0.027,0.149 -0.095,0.096 -0.027,0.282 0.088,0.108 0.19,0.05 0.323,0.301 0.129,0.369 0.012,0.113 0.135,0.167 0.005,0.353 0.307,0.49 0.027,0.236 -0.028,0.106 -0.128,-0.062 -0.367,-0.556 -0.42,-0.24 -0.048,-0.103 -0.424,-0.324 -0.284,-0.545 -0.308,-0.968 0.145,-0.229 -0.347,-0.469 0.017,-0.125 0.146,0.029 0.102,-0.006 0.049,-0.056 0.132,-0.006 z m -2.98,0.547 -0.134,0.038 -0.199,-0.104 -0.086,-0.094 0.041,-0.147 0.116,-0.056 0.132,0.099 0.014,0.101 0.116,0.163 z m -6.451,0.58 0,0.041 -0.155,-0.079 -0.341,-0.381 0.061,-0.127 0.313,-0.247 0.096,-0.033 0.088,0.153 -0.076,0.226 -0.103,0.057 -0.042,0.212 0.159,0.178 z m 2.018,-0.083 -0.276,0.223 -0.202,-0.075 -0.163,-0.191 0.054,-0.23 0.03,-0.061 0.081,-0.013 0.081,-0.047 0.088,-0.102 0.301,0.081 0.074,0.056 -0.179,0.141 0.06,0.045 0.039,0.067 0.012,0.106 z m 0.26,0.388 -0.063,0.011 -0.065,-0.112 0.153,-0.304 0.074,0.245 0.048,0.092 -0.147,0.068 z m -1.559,-0.177 -0.006,0.099 -0.161,-0.031 -0.358,-0.149 -0.013,-0.068 0.204,-0.025 0.148,0.019 0.124,0.087 0.062,0.068 z m 4.331,1.029 -0.037,0.007 -0.132,-0.035 -0.16,-0.011 -0.098,-0.098 0.116,-0.14 0.146,-0.091 0.067,0.023 0.063,0.059 0.147,0.022 0.016,0.18 -0.128,0.084 z m 2.749,-0.362 0.162,0.04 0.078,-0.006 0.185,0.152 0.247,0.224 -0.101,0.116 -0.201,-0.06 -0.067,0.024 -0.021,-0.016 -0.042,-0.112 -0.219,-0.111 -0.196,-0.009 -0.025,-0.132 0.2,-0.11 z m -1.172,0.783 0.618,0.454 0.266,-0.042 0.812,0.008 0.479,0.324 0.281,0.149 0.158,0.29 0.195,0.066 0.12,0.148 0.069,0.27 -0.049,0.044 -0.248,0.101 -0.18,0.042 -0.471,-0.096 -0.45,-0.208 -0.895,-0.025 -0.417,-0.059 -0.144,-0.079 -0.133,-0.106 -0.21,-0.252 -0.164,-0.296 -0.027,-0.174 -0.014,-0.33 0.051,-0.121 0.171,-0.12 0.182,0.012 z m 5.044,0.998 0.031,0.303 -0.014,0.104 -0.213,-0.222 -0.1,0.079 -0.093,-0.105 0.007,-0.23 0.015,-0.245 -0.042,-0.186 -0.106,-0.268 0.119,0.043 0.396,0.727 z m 0.471,2.156 0.353,0.167 0.206,-0.028 0.305,0.115 0.231,-0.065 0.145,0.148 0.365,0.579 0.003,0.188 0.239,0.134 -0.202,0.025 -0.281,-0.069 -0.218,0.047 -0.228,-0.112 -0.384,-0.058 -0.334,-0.135 -0.698,-0.427 0.004,-0.213 -0.113,-0.104 -0.033,-0.264 -0.25,-0.083 -0.292,-0.016 -0.023,-0.125 0.054,-0.221 0.218,0.003 0.262,0.092 0.5,0.322 0.124,0.055 0.047,0.045 z m 12.398,1.051 -0.224,0.049 -0.071,-0.014 -0.168,0.026 -0.181,0.205 -0.133,-0.029 -0.104,0.008 -0.079,-0.168 -0.002,-0.082 0.128,0.013 0.067,-0.164 0.138,-0.082 0.322,-0.038 0.286,0.054 0.102,0.037 -0.09,0.148 0.009,0.037 z m -15.596,2.957 -0.195,0.098 -0.179,-0.049 -0.136,-0.074 -0.11,-0.219 -0.238,-0.137 -0.339,-0.057 -0.139,-0.095 -0.036,-0.047 -0.235,-0.042 -0.067,-0.119 0.02,-0.123 0.038,-0.065 0.217,0.06 1.043,0.578 0.248,0.179 0.108,0.112 z m 17.831,-0.378 -0.248,0.046 -0.099,-0.011 -0.164,-0.246 0.122,-0.056 0.182,0.021 0.055,0.145 0.152,0.101 z",
                        title: "Solomon Islands",
                        id: "SB",
                    },
                    { d: "m 630.76775,476.0194 0.008,0.259 -0.135,-0.087 -0.038,-0.167 -0.18,-0.125 -0.094,-0.114 0.203,-0.141 z", title: "Seychelles", id: "SC" },
                    {
                        d:
                            "m 563.20575,399.7514 -0.09,0.268 0.525,0 0.921,0 0.921,0 0.921,0 0.921,-0.001 0.92,0 0.921,0 0.921,0 0.921,0 0.921,0 0.92,0 0.922,-10e-4 0.92,0 0.921,0 0.921,0 0.921,0 0.921,-0.001 0.031,0.686 0.124,0.547 0.434,0.781 0.366,0.42 0.132,0.231 0.012,0.107 -0.017,0.1 -0.111,-0.115 -0.188,-0.078 -0.026,0.365 0.043,0.259 0.045,0.487 0.154,0.522 -0.111,0.482 0.015,0.816 0.194,0.976 -0.039,0.622 0.317,1.448 0.308,0.802 0.169,0.197 0.191,0.106 0.366,0.068 0.539,0.407 0.427,0.43 0.152,0.225 0.206,0.246 0.142,-0.044 0.087,-0.066 0.139,0.199 0.677,0.429 0.1,0.199 -0.244,0.195 -0.281,0.336 -0.071,0.134 -0.033,0.079 -0.033,0.1 -0.074,0.099 -0.161,0.136 -0.064,0.059 -0.038,0.094 -0.097,0.061 -0.106,0.003 -0.092,0.042 -0.139,0.064 -0.207,-0.033 -0.211,0.059 -0.077,0.074 -0.168,0.065 -0.167,0.014 -0.059,0.022 -0.158,0.109 -0.194,0.153 -0.227,0.097 -0.08,0.032 -0.104,0.105 -0.161,0.524 -0.118,0.137 -0.198,0.014 -0.257,0 -0.223,0.045 -0.303,-0.058 -0.147,0.007 -0.039,0.112 -0.054,0.449 0.007,0.193 -0.12,0.227 -0.134,0.285 0.049,0.48 0.023,0.475 -0.246,0.714 -0.035,0.164 -0.249,0.565 -0.128,0.211 -0.318,1.054 -0.124,0.324 -0.266,0.341 0.06,0.555 0.064,0.587 0.06,0.554 0.09,0.827 -0.226,0.772 0.009,0.421 -0.158,0.62 -0.125,0.287 -0.111,0.169 -0.093,0.176 -0.172,0.386 -0.146,0.509 -0.065,0.521 -0.005,0.303 -0.029,0.138 -0.049,0.088 -0.337,0.057 -0.469,0.062 -0.252,0.068 -0.169,0.106 -0.208,0.247 -0.412,0.676 -0.215,0.414 -0.338,0.566 -0.393,0.4 -0.083,0.195 -0.065,0.362 -0.145,0.573 -0.133,0.406 0.024,0.328 -0.124,0.567 0.018,0.276 -0.138,0.154 -0.185,0.146 -0.126,0.037 -0.27,-0.167 -0.206,-0.169 -0.084,-0.045 -0.179,0.106 -0.215,0.157 -0.246,0.366 -0.191,0.37 0.11,0.785 -0.01,0.171 -0.056,0.187 -0.298,0.584 -0.074,0.185 -0.108,0.35 -0.115,0.611 -0.004,0.147 0,0 -0.003,0 -0.522,-0.002 -0.009,-0.003 -0.008,-0.009 -0.008,-0.013 -0.009,-0.019 -0.02,-0.08 -0.011,-0.125 0.018,-0.216 0.058,-0.257 0.181,-0.361 0.009,-0.03 0.002,-0.017 0,-0.019 -0.017,-0.065 -0.021,-0.056 -0.01,-0.084 0.031,-0.188 0.003,-0.058 -0.004,-0.074 -0.014,-0.048 -0.126,-0.313 -0.042,-0.05 -1.215,-0.997 -0.222,-0.271 -0.024,-0.018 -0.03,-0.014 -0.617,-0.228 -0.03,-0.023 0.004,-0.033 0.019,-0.043 0.074,-0.132 0.01,-0.034 0.011,-0.053 -0.278,-2.108 10e-4,-0.041 0.012,-0.028 0.01,-0.017 0.037,-0.045 0.032,-0.046 0.037,-0.082 0.009,-0.03 0.039,-0.378 -0.003,-0.33 0.162,-0.551 0.018,-0.235 -1.34,-0.017 -0.008,0.012 -10e-4,0.015 0.003,0.016 0.002,0.018 -10e-4,0.037 -0.01,0.068 -0.003,0.037 0.001,0.036 0.021,0.133 0.035,0.099 0.005,0.033 0.002,0.036 -0.004,0.069 -1.865,0.008 0.738,0.828 0.009,0.017 0.013,0.045 0.005,0.034 0.014,0.291 -0.039,0.46 0.008,0.296 0.043,0.192 0.2,0.378 -0.013,0.071 -0.046,0.089 -1.323,1.122 -0.037,0.053 -0.184,0.468 -0.175,0.271 -0.077,0.078 -0.307,0.381 -1.207,1.195 -0.198,0.08 -0.601,0.033 -0.318,0.009 -0.036,0.009 -0.054,0.02 -0.033,0.031 -0.039,0.023 -0.039,-0.012 -0.045,-0.033 -0.742,-0.669 -1.324,-0.845 -0.127,0.077 -0.749,0.364 -0.154,0.094 -0.086,0.067 -0.004,0.407 -0.131,0.206 -0.236,0.226 -0.648,0.143 -0.337,0.122 -0.345,0.183 -0.056,0.046 0,-10e-4 -0.132,0.127 -0.261,0.255 -0.028,0.198 0.042,0.178 -2.233,-0.007 -0.147,-0.142 -0.31,-0.624 -0.014,-0.006 -0.228,0.039 -2.036,-0.073 -0.291,0.065 -0.582,0.258 -0.293,0.043 -0.302,-0.118 -1.071,-1.244 -0.231,-0.149 -0.085,-0.08 -0.158,-0.218 -0.229,-0.13 -0.077,-0.094 -0.025,-0.133 0.007,-0.274 -0.075,-0.171 -0.169,-0.039 -1.44,0.289 -0.206,-0.033 -0.302,0.052 -0.104,0.051 -0.122,0.164 -0.025,0.17 0.004,0.172 -0.037,0.169 -0.11,0.189 -0.41,0.422 -0.091,0.184 0.019,0.464 -0.027,0.235 -0.062,0.109 -0.178,0.178 -0.065,0.103 -0.03,0.145 -0.01,0.306 -0.032,0.143 -0.224,0.36 -0.053,0.127 -0.013,0.259 -0.036,0.079 -0.651,0.205 -0.243,0.131 -0.149,0.202 -0.036,0.086 0,0 -0.279,-0.072 -0.354,-0.052 -0.681,-0.064 -0.269,-0.094 -0.129,-0.141 0.041,-0.36 -0.068,-0.077 -0.108,-0.064 -0.075,-0.156 0.016,-0.187 0.359,-0.416 0.074,-0.222 0.057,-0.773 0.037,-0.272 -0.027,-0.319 -0.285,-0.587 -0.248,-0.408 -0.405,-0.605 -0.158,-0.198 -0.818,-0.834 -0.095,-0.124 -0.198,-0.353 0.098,-0.311 0.12,-0.462 0.014,-0.214 -0.056,-0.221 -0.207,-0.166 -0.184,-0.02 -0.082,-0.084 -0.16,-0.122 -0.158,-0.095 -0.14,-0.182 -0.097,-0.255 0.069,-0.913 -0.047,-0.122 -0.209,-0.034 -0.049,-0.066 0.008,-0.175 -0.112,-0.521 -0.126,-0.432 0.067,-0.238 -0.174,-0.326 -0.334,-0.14 -0.315,0.043 -0.338,0.065 -0.204,-0.018 -0.139,-0.061 -0.099,-0.119 -0.05,-0.142 0.046,-0.212 0.186,-0.39 0.231,-0.32 0.471,-0.293 0.125,-0.155 0.072,-0.173 0.012,-0.198 -0.032,-0.209 -0.053,-0.191 -0.139,-0.253 -0.127,-0.298 -0.003,-0.2 0.061,-0.144 0.126,-0.174 0.25,-0.196 0.06,-0.039 0.157,-0.105 0.137,-0.077 0.342,-0.206 0.08,-0.099 -0.029,-0.119 -0.084,-0.097 -0.138,-0.136 -0.028,-0.167 -0.04,-0.285 -0.071,-0.182 -0.051,-0.133 0.097,-0.1 0.145,-0.139 0.181,-0.085 0.279,-0.072 0.11,-0.1 0.032,-0.19 -0.009,-0.182 0.101,-0.135 0.135,-0.29 0.109,-0.132 0.183,-0.151 0.183,-0.189 0.081,-0.22 0.023,-0.211 -0.1,-0.642 0.211,-0.268 0.27,-0.222 0.388,0.015 0.602,-0.049 0.41,-0.092 0.292,0.003 0.667,0.12 0.055,-0.029 0.015,-0.024 0.036,-0.17 -10e-4,-0.428 -10e-4,-1.296 -0.001,-1.298 -10e-4,-1.301 -10e-4,-1.305 -10e-4,-1.308 -10e-4,-1.311 -0.001,-1.315 -10e-4,-1.318 0,-0.37 0,-0.369 0,-0.37 0,-0.371 0.692,0.001 0.693,0 0.692,0 0.692,10e-4 0.009,-0.006 0.009,-0.005 0.008,-0.006 0.009,-0.004 0.001,-1.482 0,-1.487 10e-4,-1.492 0,-1.497 1.072,0 1.073,10e-4 1.072,0 1.072,0 1.072,0 1.072,0 1.073,0 1.072,0.001 1.072,0 1.072,0 1.072,0 1.072,0 1.072,10e-4 1.072,0 1.073,0 1.072,0 0.327,0 0.144,-0.022 0.275,-0.561 0.117,-0.042 0.179,0.033 0.062,0.132 z",
                        title: "Sudan",
                        id: "SD",
                    },
                    {
                        d:
                            "m 542.68775,216.2374 -0.744,0.158 -0.559,-0.317 -0.279,0.159 -0.487,0.007 -0.554,0.125 -0.187,0.247 -0.147,0.099 -0.513,-0.349 -0.485,-0.579 -0.354,0.441 -0.229,0.083 -0.207,-0.399 -0.18,-0.065 -0.097,0.133 -0.085,0.353 -0.136,0.277 -0.036,0.175 -0.023,0.704 -0.035,0.163 -0.471,-0.091 0.028,0.185 0.103,0.093 0.042,0.117 -0.171,0.153 -0.467,-0.015 -0.048,0.163 0.131,0.256 -0.103,0.225 -0.095,0.088 -0.559,0.139 -0.323,-0.032 -0.093,0.145 -0.025,0.188 0.061,0.185 0.143,0.098 0.047,0.117 -0.01,0.253 -0.119,0.046 -0.336,-0.445 -0.103,0.023 0.077,0.231 0.192,0.252 0.111,0.257 0.097,0.308 -0.019,0.234 -0.418,0.752 -0.368,0.473 -0.274,0.425 -0.162,0.45 0.188,0.226 0.208,0.326 0.147,0.625 0.175,0.556 0.353,0.529 -0.071,0.305 -0.082,0.237 -0.587,0.521 -0.666,0.782 -0.718,1.984 -0.239,0.265 -0.628,0.333 -0.231,0.322 -0.468,0.382 -0.817,0.328 -0.37,0.456 -0.167,0.47 -0.186,0.034 -0.185,-0.184 -0.246,-0.137 -0.032,0.307 0.011,0.225 -0.394,-0.333 -0.186,0.306 -0.145,0.509 -0.567,0.684 -0.611,-0.123 -0.068,0.12 0.162,0.087 0.025,0.109 -0.111,0.058 -0.168,-0.006 -0.259,0.135 -0.17,-0.01 -0.081,0.322 -0.132,0.389 -0.345,0.161 -0.178,0.033 -0.088,0.221 0.531,0.046 -0.042,0.187 -0.012,0.187 -0.055,0.2 -0.604,0.288 -0.093,0.226 -0.126,0.14 -0.269,-0.008 0.01,-0.13 0.044,-0.147 -0.4,0.013 -0.125,-0.325 -0.076,0.083 0.045,0.262 0.104,0.272 0.117,0.399 -0.095,0.251 -0.105,0.125 0.077,0.115 0.213,0.088 0.086,0.157 -0.253,0.134 -0.316,0.46 -0.328,0.011 -0.2,0.304 -0.213,-0.001 -0.173,-0.191 -0.277,-0.157 -0.089,0.276 -0.014,0.22 0.156,0.555 0.298,0.428 0.276,0.185 -0.199,0.125 -0.148,0.276 -0.179,0.86 -0.097,0.338 -0.105,0.594 0.066,0.5 0.054,0.245 0.135,0.333 -0.367,-0.043 -0.388,-0.194 0.054,0.403 -0.238,0.476 0.044,0.418 0.05,0.271 -0.074,0.449 0.112,0.141 0.061,0.267 -0.101,0.197 0.044,0.169 0.017,0.597 0.076,0.931 -0.028,0.196 0.213,0.804 -0.049,0.281 -0.029,0.357 0.306,0.343 0.272,-0.005 0.276,-0.005 0.105,0.085 0.106,0.242 0.085,0.286 0.227,-0.023 0.363,-0.232 0.236,-0.055 0.156,0.446 0.424,0.588 0.247,0.263 0.419,0.139 0.442,0.472 -0.062,0.568 0.184,0.189 0.521,0.223 0.185,0.301 0.089,0.256 0.137,0.212 0.161,0.639 -0.056,0.393 -0.21,0.135 -0.497,0.42 -0.221,0.313 -0.173,0.194 -0.493,0.417 -0.181,0.075 -0.173,0.216 -0.167,0.095 -0.15,-0.054 -0.56,0.391 -0.378,-0.108 -0.159,-0.193 0.101,-0.768 -0.063,-0.248 -0.073,-0.125 -0.248,0.143 0.044,0.294 -0.429,0.012 -0.404,-0.249 -0.052,0.49 -0.868,-0.406 -0.239,0.103 -0.383,-0.204 -0.249,0.244 -0.296,-0.088 -0.205,-0.29 -0.284,0.51 -0.62,0.145 -0.583,0.081 0.281,0.17 1.308,-0.032 0.37,0.126 0.481,-0.084 0.426,0.4 0.307,0.096 0.363,0.459 0.186,-0.125 0.292,0.019 0.27,0.131 0.857,-0.017 0.291,-0.32 0.429,0.07 0.219,-0.083 0.168,-0.196 0.184,-0.045 0.167,0.037 0.178,-0.155 0.14,-0.062 0.144,0.075 0.161,0.371 -0.334,0.192 -0.237,0.009 -0.116,0.606 -0.143,0.26 -0.103,0.125 -0.525,0.257 -0.347,0.325 -0.409,0.261 -0.178,-0.057 -0.269,0.265 -0.597,0.313 -0.307,0.422 -0.687,0.376 -0.35,0.306 -0.951,0.016 -0.908,-0.067 -0.285,0.145 0.292,0.045 0.204,0.142 0.245,-0.06 0.576,0.071 0.296,0.078 0.38,0.498 -0.279,0.176 -0.484,0.136 0.182,0.702 0.149,0.472 -0.196,0.284 -0.015,1.287 -0.275,0.024 -0.117,0.53 0.086,0.27 -0.007,0.625 0.057,0.384 0.135,0.353 -0.06,0.367 -0.435,0.857 0.009,0.401 0.079,0.238 0.058,0.379 -0.198,0.727 -0.139,0.605 -0.166,0.508 -0.371,0.607 -0.185,0.453 -0.432,1.407 -0.214,0.278 -0.263,0.213 -0.293,-0.197 -0.269,-0.107 -0.328,0.013 -0.514,0.162 -0.773,-0.108 -0.755,0.052 -0.191,0.139 0.115,0.507 -0.279,0.066 -0.272,-0.144 -0.24,0.172 -0.2,0.188 -0.393,0.446 -0.132,0.274 -0.034,0.515 0.207,0.461 0.183,0.539 -0.471,0.647 -0.263,0.022 -0.768,-0.18 -1.361,0.405 -1.222,-0.32 0.153,-0.347 -0.005,-0.255 0.069,-0.393 0.041,-0.403 -0.011,-0.27 -0.09,-0.289 -0.301,-0.378 -0.679,-1.281 -0.201,-0.543 -0.14,-0.227 0.101,-0.012 0.56,0.292 0.13,-0.036 0.137,-0.109 -0.167,-0.419 -0.144,-0.189 -0.097,-0.284 0.327,-0.077 0.237,0.017 0.174,-0.32 -0.101,-0.519 -0.254,-0.16 -0.212,-0.07 -0.407,-0.82 -0.424,-0.426 -0.757,-1.651 -0.277,-1.142 -0.257,0.109 -0.125,-0.499 -0.09,-0.475 -0.018,-0.349 -0.404,-0.2 -0.016,-0.246 -0.073,-1.1 -0.433,-0.148 -0.28,-0.62 -0.05,-1.179 -0.285,-0.215 -0.229,0.06 0.011,-0.293 0.055,-0.276 -0.134,-1.098 -0.045,-1.007 -0.108,-0.306 -0.062,-0.358 0.055,-0.31 0.082,-0.179 0.279,-0.047 0.261,0.274 0.231,0.69 0.204,0.09 0.278,-0.18 0.195,-0.503 0.111,-0.757 0.13,-0.725 -0.154,-0.778 -0.164,-0.686 -0.012,-0.202 0.431,-0.582 0.132,-0.474 0.143,-0.453 0.158,-0.154 0.234,-0.035 0.273,-0.085 0.344,-0.304 0.309,-0.408 0.236,-0.375 0.08,-0.744 0.003,-0.375 0.104,-0.279 0.1,-0.546 -0.098,-0.54 -0.305,-0.822 -0.367,-1.163 -0.057,-0.638 0.167,-0.119 0.319,-0.106 0.605,-0.031 0.064,-0.075 0.061,-0.281 0.137,-0.381 0.145,-0.278 0.1,-0.399 0.048,-0.362 -0.346,-0.547 -0.453,-0.562 -0.307,-0.187 -0.546,-0.474 -0.384,-0.397 0.22,-1.521 0.164,-1.141 0.026,-0.278 0.006,-0.432 -0.53,-1.855 0.021,-0.415 0.05,-0.375 -0.057,-0.641 -0.031,-0.575 0.091,-0.175 0.216,-0.326 -0.207,-0.506 -0.017,-0.042 -0.39,-1.258 0.596,-1.255 -0.104,-0.653 0.355,-0.475 0.648,-1.092 0.364,-0.618 0.077,-0.108 0.288,-0.272 0.547,-0.323 0.606,-0.158 0.27,0.002 1.042,0.219 0.813,0.17 0.119,-0.171 0.17,-0.351 0.219,-0.501 0.019,-0.559 -0.079,-0.824 -0.119,-0.495 -0.572,-0.323 -0.627,-0.443 0.771,-1.411 0.534,-0.986 0.666,-1.493 0.207,-0.625 0.15,-0.249 0.196,-2.33 0.13,-0.657 0.109,-0.345 10e-4,-0.354 -0.071,-0.599 -0.187,-1.36 1.052,-0.169 0.342,-0.096 0.318,-0.163 0.622,-0.424 0.305,-0.376 -0.17,-1.288 0.376,-0.438 0.918,-1.534 0.992,-1.481 0.465,-0.564 0.048,-0.276 0.038,-0.445 -0.207,-0.702 -0.222,-0.436 -0.433,-0.829 0.186,-0.581 0.319,-0.113 0.421,-0.229 0.329,-0.499 0.032,-0.064 0.556,-1.976 1.085,-1.01 0.433,-0.553 0.674,0.416 0.988,0.626 0.439,-0.921 0.145,-0.343 0.145,-0.506 -0.058,-0.88 -0.025,-1.149 0.044,-0.464 0.394,-0.207 0.212,-0.053 1.098,0.478 0.276,-0.008 0.518,0.064 0.579,0.209 1.213,0.556 0.501,0.229 0.28,0.044 0.242,-0.258 0.517,-0.665 -0.761,-0.494 0.501,-0.501 0.26,-0.507 0.223,-0.625 0.081,-0.734 -0.031,-0.396 -0.154,-0.271 -0.465,-0.676 1.053,-0.097 0.365,-0.028 0.766,0.446 0.034,0.097 0.005,0.232 0.027,0.24 0.743,0.607 0.214,0.321 0.457,0.486 0.121,0.262 0.423,0.306 0.303,0.327 0.354,0.264 0.413,0.41 0.555,0.326 0.468,0.106 1.18,0.557 0.201,0.18 0.34,0.387 0.344,0.446 0.238,0.914 0.381,0.047 0.104,0.313 0.333,0.535 0.462,0.471 -0.017,0.158 -0.368,0.432 -0.04,0.584 0.035,0.743 0.116,0.604 -0.012,0.176 -0.091,0.208 -0.109,0.325 -0.04,0.283 0.01,0.138 0.037,0.076 0.194,0.006 0.347,0.067 0.204,0.125 0.116,0.687 -0.039,0.132 -0.292,0.31 -0.086,0.246 -0.008,0.36 0.052,0.396 0.101,0.441 0.229,0.471 0.31,0.491 0.204,0.402 0.096,0.282 0.035,0.198 -0.139,0.248 -0.125,0.489 -0.023,0.558 -0.057,0.363 -0.272,0.499 -0.189,0.176 -0.054,0.262 -0.023,0.439 0.056,0.534 0.019,0.36 0.058,0.259 0.086,0.169 0.437,0.297 0.245,0.608 0.153,0.487 0.309,1.263 z m -15.605,38.796 -0.07,0.183 -0.071,-0.224 0.028,-0.044 0.048,-0.221 0.136,-0.121 0.217,0.073 -0.001,0.055 -0.208,0.179 -0.079,0.12 z m -0.503,2.418 -0.125,0.052 -0.062,-0.016 0.077,-0.253 0.057,-0.109 0.189,-0.102 0.058,0.018 -0.194,0.41 z m 2.078,5.928 -0.051,0.329 -0.146,-0.025 -0.133,-0.243 0.269,-0.371 0.411,0.02 0.141,0.078 -0.491,0.212 z m -0.225,0.457 -0.232,0.125 -0.136,0.371 -0.188,0.063 -0.18,0.123 -0.064,1.166 0.329,0.441 -0.181,0.062 -0.165,0.132 -0.118,0.195 -0.121,0.419 -0.453,0.237 -0.171,0.175 -0.253,0.389 -0.132,0.563 -0.256,0.24 -0.288,0.057 0.168,-0.46 0.221,-0.376 -0.212,-0.259 -0.128,-0.405 -0.166,-0.312 0.132,-0.349 -0.065,-0.572 0.021,-0.561 0.192,-0.283 0.22,-0.231 0.342,-0.533 0.371,-0.388 0.518,-0.174 0.234,0.161 0.101,-0.353 0.167,-0.081 0.157,0.082 0.336,0.336 z m -7.15,7.963 -0.145,0.254 -0.128,-0.018 -0.085,-0.339 -0.02,-0.874 0.051,-0.434 0.612,-1.572 0.273,-0.129 0.384,-0.97 0.104,-0.434 0.167,-0.391 0.098,-0.351 0.083,-0.142 0.179,0.066 0.08,0.065 -0.189,0.204 0.022,0.265 -0.013,0.109 -0.477,1.149 -0.127,0.742 -0.169,0.181 -0.7,2.619 z",
                        title: "Sweden",
                        id: "SE",
                    },
                    { d: "m 766.68475,459.2094 -0.42,0.185 -0.476,-0.168 0.154,-0.273 0.316,-0.066 0.256,0.087 0.145,0.066 0.1,0.075 z", title: "Singapore", id: "SG" },
                    {
                        d:
                            "m 434.58175,485.2254 -0.096,0.004 -0.028,-0.023 -0.018,-0.066 0.046,-0.107 0.042,-0.065 0.065,0.009 0.088,0.075 0.074,0.064 -0.04,0.058 -0.133,0.051 z m 24.339,22.892 -0.253,0.018 0.021,-0.137 0.188,-0.146 0.127,0.019 0.008,0.168 -0.091,0.078 z",
                        title: "Saint Helena",
                        id: "SH",
                    },
                    {
                        d:
                            "m 521.24775,315.9454 -0.248,-0.099 -0.299,-0.042 -0.056,0.054 -0.12,0.055 -0.061,0.098 0.046,0.384 -0.072,0.066 -0.34,-0.038 -0.112,0.044 -0.185,0.267 -0.189,0.113 -0.24,0.08 -0.178,0.096 -0.225,0.084 -0.191,0.051 -0.076,0.116 -0.046,0.129 0.012,0.124 0.195,0.245 0.026,0.261 -0.021,0.319 -0.045,0.17 -0.077,0.113 -0.479,0.146 -0.497,0.261 -0.011,0.06 0.227,0.231 0.009,0.058 -0.188,0.131 -0.018,0.132 0.021,0.152 0.1,0.157 0.036,0.141 -0.273,0.102 -0.37,-0.038 -0.438,-0.195 -0.153,0.028 -0.148,0.102 -0.152,-0.044 -0.167,-0.121 -0.236,-0.251 -0.115,-0.155 -0.047,-0.164 -0.064,-0.024 -0.098,0.048 -0.081,0.2 -0.218,0.357 -0.162,0.097 -0.243,-0.021 -0.342,0.006 -0.213,0.03 -0.26,-0.126 -0.063,0.024 0,0.083 -0.097,0.13 -0.16,0.086 -0.739,-0.193 -0.105,-0.16 0.167,-0.076 0.231,-0.207 0.157,0.023 0.194,-0.044 0.084,-0.088 -0.122,-0.262 -0.308,-0.324 -0.163,-0.123 -0.225,-0.082 -0.038,-0.087 0.124,-0.513 -0.038,-0.073 -0.256,0.024 -0.06,-0.053 -0.021,-0.089 0.017,-0.122 0.173,-0.201 0.192,-0.177 0.052,-0.099 -0.007,-0.079 -0.247,-0.078 -0.148,-0.081 -0.118,-0.028 -0.081,0.045 -0.059,-0.051 -0.061,-0.148 0.06,-0.227 0.222,-0.209 0.238,-0.186 0.207,-0.136 0.119,-0.058 0.057,-0.234 0.124,0.025 0.245,0.012 0.274,0.053 0.254,0.066 0.225,0.082 0.47,0.086 0.429,0.052 0.129,0.048 0.105,-0.004 0.131,0.07 0.076,-0.054 0.056,-0.093 0.233,-0.112 0.215,-0.145 0.151,-0.184 0.085,-0.146 0.148,-0.104 0.157,-0.03 0.144,-0.052 0.607,-0.069 0.624,0.055 0.297,-0.103 0.245,-0.178 0.359,-0.05 0.018,-0.003 0.535,0.138 0.041,-0.08 0.023,-0.036 -0.01,-0.389 0.17,-0.178 0.156,-0.076 0.535,0.025 0.07,0.12 0.028,0.186 0.048,0.249 0.089,0.068 0.049,0.098 -0.01,0.172 0.105,0.128 0.244,0.346 z",
                        title: "Slovenia",
                        id: "SI",
                    },
                    {
                        d:
                            "m 449.76675,177.8574 -0.259,0.055 -0.149,-0.19 0.377,-0.522 1.246,-0.987 0.497,-0.947 0.96,-0.327 0.063,0.528 -0.065,0.654 -0.843,0.518 -0.935,0.35 -0.892,0.868 z m 79.067,-33.457 -0.339,0.404 -0.508,-0.609 -0.337,-0.785 0.179,-0.299 0.903,-0.04 0.221,0.409 0.037,0.233 -0.156,0.687 z m 6.704,-50.915999 0.386,0.335 0.835,-0.069 0.461,2.381 0.259,2.487 0.42,0.178 0.801,-0.34 0.714,-0.166 0.366,0.184 0.652,0.719 0.281,0.504 -0.245,0.394999 -0.597,0.441 -0.099,1.308 0.601,0.453 0.992,1.105 0.559,0.143 0.997,-0.452 0.936,0.856 0.927,1.033 -2.167,1.296 -0.19,0.362 -0.3,0.952 -0.319,0.779 -0.295,0.458 -0.648,0.785 -0.349,0.271 -0.784,-0.06 -0.294,0.311 -0.272,0.633 -0.274,0.454 -0.696,0.116 -0.355,-0.628 0.117,-0.194 0.05,-0.372 -0.124,-0.89 0.664,-0.915 0.15,-0.509 -0.132,-0.184 -0.183,0.05 -0.483,-0.28 -0.143,0.014 -0.4,0.536 -0.555,0.36 -0.563,0.091 -2.263,0.688 -0.342,-0.241 -0.154,-1.371 0.92,-0.708 0.141,-1.201 0.232,-0.804 0.271,-0.535 0.498,-1.387 0.125,-0.1 -1.242,-1.107 -0.491,-0.722 -0.535,-1.452999 -0.164,-1.185 -0.725,-1.015 0.089,-1.306 -0.526,0.103 -0.406,-0.922 0.378,-0.52 1.92,-0.592 1.145,-0.579 0.428,0.026 z m 14.785,-0.757 -0.412,0.035 -0.757,-1.055 -0.146,-0.922 0.135,-0.378 0.365,-0.014 0.569,1.26 0.614,0.379 -0.368,0.695 z m -43.854,0.544 0.032,0.977 0.457,-0.097 0.539,1.036 0.588,0.547 0.166,0.374 0.125,0.48 0.356,0.962 0.169,1.008 -0.425,0.106 -0.585,-1.438 -0.478,-0.823 -0.601,-0.706 -0.486,-0.035 -0.219,-0.309 -0.788,-2.566 -0.145,-0.597 -0.45,-0.965 -0.199,-1.208 0.001,-0.951 0.602,0.225 0.528,0.597 0.458,1.344 0.082,0.415 -0.209,0.55 0.215,0.649 0.267,0.425 z m 49.947,-4.339 0.837,0.092 0.841,-0.231 0.145,0.247 -1.083,0.766 -1.206,-0.407 -1.085,-0.104 -1.281,0.849 -0.418,-0.339 0.651,-0.819 0.71,-0.272 0.114,-0.502 0.271,-0.086 0.938,-0.052 0.566,0.858 z m -34.409,-15.197 0.146,0.032 0.142,-0.17 0.103,-0.45 0.114,-0.249 0.71,0.292 1.007,0.898 0.299,0.441 0.42,0.905 0.341,1.511 -0.271,1.083 -0.357,1.019 -0.126,0.56 0.13,0.801 -0.053,0.776 -0.13,0.684 0.54,-0.78 1.154,-2.522 0.172,-0.157 0.18,0.086 0.517,0.521 0.469,1.288 0.103,0.424 0.084,0.519 0.048,0.64 -0.026,0.73 -0.043,0.507 -0.245,0.327 -0.119,0.298 0.265,0.022 0.303,0.39 0.277,0.826 0.31,0.331 1.125,-0.279 0.731,0.431 0.401,1.345 0.618,-0.303 0.002,-0.717 0.136,-0.308 0.829,0.245 0.429,0.335 0.438,0.704 -0.748,1.146 0.617,1.092 1.036,0.787 0.625,0.822 0.113,0.343 0.102,0.455 -0.407,0.588 -0.414,0.331 -1.043,0.057 -0.948,0.414 -1.735,0.293 -0.258,0.187 -0.061,0.167 -0.102,0.506 -0.667,1.161 -0.646,1.404 -0.267,0.84 -0.201,1.169 -0.074,0.711 0.144,0.686 -0.038,0.690999 -0.486,0.54 -0.308,0.021 -0.386,-0.106 -0.38,0.31 -0.024,0.465 0.022,0.653 -0.097,1.977 -0.118,1.475 -0.177,1.359 -0.199,0.728 -0.254,0.202 -0.815,0.133 -0.628,1.257 -0.507,2.224 -0.264,0.865 -0.55,1.357 0.1,0.479 0.171,0.517 -0.3,0.921 -0.464,1.028 0.009,0.396 0.156,0.722 0.076,0.748 -0.358,0.641 -0.658,0.325 -0.67,-0.364 -0.326,-0.43 -0.302,-0.69 -0.321,-0.452 -0.334,-0.272 -1.285,-1.546 -1.186,-2.475 -1.083,-0.973 -0.706,-0.463 -0.34,-0.45 -0.332,-0.606 -0.287,-0.684 -0.267,-0.867 -0.129,-0.541 -0.024,-0.815 0.085,-0.48 0.127,-0.247 0.86,-0.203 0.309,0.115 0.304,0.428 0.277,0.168 0.634,-2.141 3.607,-1.237 1.159,-0.215 1.163,0.013 -0.181,-0.588 -0.154,-0.748 -0.171,-0.182 -0.879,0.42 -1.346,0.441 -0.656,0 -0.677,-0.294 -0.675,0.162 -0.696,0.639 -0.702,0.403 -0.682,0.162 -1.442,-0.065 -0.357,-0.33 -0.481,-0.766 -0.117,-0.394 -0.1,-0.484 -0.094,-1.463 0.104,-0.4 0.147,-0.23 0.151,-0.142 0.317,-0.007 0.311,0.254 0.728,0.836 -0.166,-0.897 2.095,-1.086999 0.973,-0.956 0.5,-0.161 0.501,0.07 -0.11,-0.511 -0.004,-0.475 0.356,-0.388 0.256,-0.167 0.771,-0.191 1.759,0.033 0.634,-0.263 0.475,-0.666 -0.506,0.232 -0.507,0.044 -0.237,-0.138 -0.537,-0.583 -0.244,-0.769 0.696,-1.546 0.242,-0.722 -0.708,0.104 -0.236,0.253 -0.811,1.423 -0.599,0.636 -0.739,0.305 -0.739,-0.026 -0.161,-0.201 -0.226,-0.938 -0.071,-0.495 0.03,-0.272 0.234,-0.782 0.122,-0.831 -0.021,-0.719 -0.172,-0.145 -0.273,0.704 -0.247,0.974 -0.339,0.486 -0.35,-0.133 -0.149,-0.373 -0.13,-0.572 -0.137,-0.221 -0.152,0 -0.313,0.229 -0.31,0.423 0.107,0.64 0.028,0.709 -0.134,0.561 -0.101,0.683 0.319,0.429 0.26,0.663 -0.39,0.311 -0.382,0.452 -0.351,0.695 -0.359,0.539 -0.569,0.057 -0.709,0.298 -1.417,0.105 -0.666,-0.877 -0.122,-0.418 -0.133,-0.281 -0.442,-0.463 -0.645,-1.374 -0.497,-1.578 -0.335,-0.154 -0.496,-0.524 -0.27,-0.45 -0.257,-0.603 -0.077,-0.717 0.025,-0.656 0.297,-0.292 -0.702,-0.741 -0.689,-0.984 0.254,-0.332 0.256,-0.146 2.042,1.149 0.136,-0.143 0.224,-0.57 -0.08,-0.192 -0.342,-0.132 -0.466,0.004 -0.116,-0.118 -0.18,-0.621 -0.157,-0.767 -0.067,-0.513 -0.026,-0.603 0.347,-0.908 0.19,-0.818 -0.296,-0.38 -0.839,0.023 -0.279,0.116 0.103,1.175 -0.267,0.807 -0.512,0.627 -0.367,-0.305 -0.283,-1.544 -0.37,-1.084 -0.139,-0.687 -0.106,-0.993 -0.15,-0.727 -0.272,-0.882 -0.036,-0.546 0.034,-0.405 0.207,-0.922 -0.157,-0.772 -0.192,-0.68 -0.012,-0.389 0.18,-0.481 0.162,-0.16 0.174,0.035 0.515,0.573 0.283,0.683 0.098,-0.055 0.184,-1.016 0.261,-0.23 1.007,-0.336 1.121,1.313 0.29,0.291 0.232,0.094 -0.12,-0.581 -0.073,-0.757 0.171,-0.287 0.905,0.677 0.424,-0.041 0.994,-0.886 1.643,-0.466 0.621,0.701 0.032,0.373 -0.013,0.501 -0.04,0.15 -0.363,0.581 -2.072,0.473 -1.358,1.803 1.852,-0.289 0.333,0.206 0.14,1.451 0.135,0.152 0.476,0.21 0.323,0.43 0.33,0.816 0.347,0.547 0.203,-0.068 0.074,-0.593 -0.083,-0.705 -0.043,-0.807 0.024,-0.875 0.056,-0.727 0.389,-0.514 0.565,-1.679 0.6,-1.148 0.668,0.511 0.619,1.432 0.558,2.021 0.541,2.131 0.606,2.603 0.292,0.908 0.265,0.214 1.224,2.647 0.138,0.073 -0.253,-2.008 -0.634,-3.457 -0.428,-2.706 -0.097,-1.046 -0.069,-1.481 0.027,-0.426 0.055,-0.387 0.31,-1.606 0.406,-0.786 -0.123,-1.114 0.104,-0.861 0.426,-0.684 0.396,-0.05 0.385,0.52 0.737,1.833 z m 44.172,-3.436 -2.662,0.615 -0.269,-0.431 4.314,-1.808 0.223,-0.177 0.801,-0.226 0.688,0.412 -0.204,0.318 -2.891,1.297 z m -38.685,-3 -0.608,0.919 -1.018,-0.707 0.121,-0.728 0.242,-0.444 0.639,0.167 0.624,0.793 z m 6.051,0.848 0.282,0.184 1.546,-0.067 0.296,0.404 0.117,0.977 0.236,0.334 0.329,0.104 0.821,1.187 0.279,0.17 0.243,-0.658 0.186,-1.649 0.01,-1.956 -0.079,-0.956 0.092,-0.616 0.275,-0.24 0.346,0.064 0.338,-0.344 0.292,-0.608 0.313,-0.084 0.683,0.462 0.18,0.362 -0.183,0.746 -0.071,1.059 -0.309,2.166 0.67,0.133 0.939,-0.456 0.238,-0.626 0.505,-1 0.534,0.158 0.256,-0.133 0.129,-0.437 0.049,-0.521 0.295,0.087 0.404,1.003 0.188,0.155 0.344,-0.258 0.139,0.01 0.34,0.399 1.584,0.723 0.549,0.385 0.236,0.359 0.239,0.211 1.685,-0.005 1.19,0.254 0.439,0.566 0.368,1.08 0.141,2.463 -0.333,0.659 -2.41,2.969 -0.604,0.943 -0.292,0.864 -0.493,1.873 -0.239,0.562 -1.128,0.882 -0.264,0.094 -0.848,-0.431 -0.259,0.04 -1.031,0.955 -0.355,0.575 -0.348,0.722 -0.52,0.317 -0.53,-0.17 -2.4,-0.375 -0.321,-0.507 -0.263,-0.978 0.477,-1.26 -2.677,0.47 -2.948,-0.255 -0.156,-0.178 -0.126,-0.489 -1.014,-0.335 -0.762,-0.403 -0.64,-0.681 -0.633,-0.888 0.203,-0.417 0.208,-0.244 0.544,-0.103 0.483,0.124 0.86,-0.007 0.2,-0.903 0.342,-0.261 0.273,-0.651 -0.908,-0.412 -0.946,-0.062 -0.631,0.542 -0.731,0.245 -0.668,0.032 -1.285,-0.153 -0.609,-0.385 -0.833,-1.01 -0.29,-0.56 -0.112,-0.441 -0.083,-0.67 0.952,-0.604 0.37,-0.476 0.364,-0.653 -1.438,-0.373 -0.602,-0.551 -0.597,-0.813 0.484,-0.46 1.936,-0.368 0.513,0.308 0.508,0.593 0.563,0.364 0.544,-0.767 -0.512,-0.364 -0.458,-1.286 -0.097,-0.643 0.061,-0.495 0.24,-0.074 0.179,0.215 0.676,1.216 0.513,0.377 0.144,-1.12 0.023,-0.536 -0.094,-0.444 -0.241,-0.822 -0.216,-1.016 0.334,-0.259 0.331,0.112 0.71,0.698 0.716,0.489 0.327,0.492 0.61,1.22 0.574,0.81 z",
                        title: "Svalbard and Jan Mayen",
                        id: "SJ",
                    },
                    {
                        d:
                            "m 538.14975,305.2294 -0.041,0.176 -0.115,0.205 -0.143,0.212 -0.12,0.256 -0.16,0.545 -0.104,0.252 -0.428,0.496 -0.03,0.689 -0.058,0.05 -0.967,0.233 -0.127,-0.035 -0.132,-0.134 -0.073,-0.098 -0.045,-0.071 -0.084,-0.191 -0.111,-0.135 -0.164,-0.111 -0.15,-0.128 -0.193,-0.005 -0.522,0.181 -0.362,0.02 -0.242,-0.058 -0.322,-0.11 -0.627,-0.017 -0.429,0.096 -0.043,0.135 -0.396,0.84 -0.576,0.31 -0.5,0.316 -0.145,0.064 -0.249,-0.1 -0.283,-0.187 -0.235,-0.098 -0.172,0.043 -0.187,0.213 -0.086,0.215 -0.566,0.158 -0.985,0.093 -0.344,0.212 -0.117,0.254 -0.005,0.195 0.084,0.166 -0.105,0.193 -0.046,0.081 -0.696,0.042 -0.928,0.057 -0.555,-0.015 -0.522,-0.013 -0.355,-0.166 -0.434,-0.324 -0.459,-0.431 -0.044,-0.01 -0.068,-0.046 -0.288,-0.033 -0.077,0.026 -0.172,-0.141 -0.05,-0.183 -0.268,-0.481 -0.301,-0.794 -0.008,-0.23 0.118,-0.262 0.109,-0.201 0.016,-0.159 0.011,-0.043 0.091,-0.331 0.218,-0.44 0.204,-0.256 0.147,-0.085 0.305,0.077 0.521,0.064 0.401,-0.06 0.374,-0.197 0.203,-0.172 0.173,-0.181 0.058,-0.118 0.077,-0.056 0.309,-0.105 0.099,-0.122 0.04,-0.232 0.027,-0.258 0.063,-0.192 0.08,-0.141 0.572,-0.338 0.052,-0.12 0.091,-0.115 0.17,-0.13 0.164,-0.188 0.174,-0.115 0.223,0.013 0.206,-0.024 0.161,-0.066 0.071,-0.006 0.297,0.053 0.054,0.216 0.031,0.224 0.508,-0.016 0.283,-0.48 0.147,-0.058 0.235,-0.167 0.155,-0.147 0.107,0.091 0.154,0.31 0.164,0.248 0.095,0.098 0.01,0.076 0.095,0.046 0.185,0.027 0.123,0.075 0.036,0.231 0.003,0.208 -0.058,0.149 -0.03,0.132 0.128,0.052 0.188,-0.05 0.132,-0.075 0.397,0.172 0.14,-0.383 0.158,-0.196 0.204,-0.092 0.186,-0.119 0.169,-0.085 0.117,0.005 0.051,-0.036 0.145,0.01 0.169,0.038 0.229,-0.045 0.316,0.094 0.198,0.177 0.194,0.06 0.221,-0.01 0.151,-0.098 0.219,-0.337 0.16,0.005 0.249,-0.053 0.352,0.003 0.812,0.072 0.203,0.129 0.5,0.165 0.218,0.191 0.096,0.227 0.051,0.157 0.512,0.241 0.759,0.307 z",
                        title: "Slovakia",
                        id: "SK",
                    },
                    {
                        d:
                            "m 446.03575,439.1794 -0.007,0.087 -0.081,0.404 -0.126,0.346 -0.083,0.085 -0.357,0.091 -0.152,0.152 -0.131,0.492 -0.084,0.386 -0.123,0.065 -0.524,0.557 -0.343,0.211 -0.239,0.182 -0.227,0.236 -0.285,0.23 -0.306,0.388 -0.218,0.403 -0.149,0.125 -0.112,-0.114 -0.521,-0.397 -0.55,-0.267 -1.171,-0.444 -0.39,-0.125 0.014,-0.158 0.134,-0.289 -0.218,-0.339 0.084,-0.247 -0.084,0 -0.168,0.148 -0.357,-0.043 -0.237,-0.212 -0.193,-0.078 -0.084,-0.106 -0.124,-0.559 -0.089,-0.254 -0.179,-0.157 -0.359,-0.039 -0.148,-0.341 -0.199,-0.265 0.033,-0.163 0.162,0.009 0.127,0.119 0.205,0.049 0.255,-0.287 0.228,-0.156 0.053,-0.136 -0.028,-0.075 -0.138,0.116 -0.378,-0.03 -0.094,0.104 -0.169,0.033 -0.131,-0.335 0.006,-0.198 0.054,-0.217 0.381,-0.038 0.033,-0.07 -0.265,-0.047 -0.331,-0.253 -0.06,-0.175 0.164,-0.059 0.157,0.026 0.136,0.038 0.148,-0.063 0.138,-0.096 0.083,-0.123 0.112,-0.329 0.358,-0.11 0.211,-0.202 0.201,-0.313 0.092,-0.22 0.083,-0.11 0.052,-0.095 0.039,-0.104 0.09,-0.096 0.094,-0.233 0.064,-0.212 0.206,-0.102 0.422,-0.09 0.38,0.154 0.616,-0.134 0.033,-0.199 0.564,-0.003 0.668,-0.004 0.556,-0.003 0.191,0.053 0.069,0.148 0.183,0.232 0.191,0.161 0.237,0.353 0.276,0.411 0.298,0.371 0.191,0.201 0.022,0.07 -0.014,0.08 -0.095,0.188 -0.081,0.204 0.008,0.077 0.057,0.038 0.312,0.063 0.028,0.227 0,0.314 0.151,0.293 0.144,0.215 -0.007,0.077 -0.352,0.367 -0.137,0.365 -0.07,0.103 -0.028,0.082 0.07,0.039 0.097,-0.024 0.136,0.03 0.13,0.011 0.172,-0.131 0.287,-0.335 0.096,-0.041 0.214,0.036 z m -6.295,2.953 -0.041,0.073 -0.187,-0.181 -0.967,-0.271 0.273,-0.144 0.671,-0.043 0.2,0.084 0.089,0.07 0.033,0.133 -0.071,0.279 z",
                        title: "Sierra Leone",
                        id: "SL",
                    },
                    { d: "m 509.93475,326.2634 -0.165,0.029 -0.083,-0.158 0.124,-0.185 0.176,-0.029 0.031,0.143 z", title: "San Marino", id: "SM" },
                    {
                        d:
                            "m 440.42975,421.1654 0.264,0.463 -0.057,0.223 -0.06,0.324 0.149,0.236 0.175,0.153 0.125,0.142 0.138,0.194 0.022,0.388 -0.025,0.279 0.09,0.126 0.076,0.16 -0.015,0.132 -0.05,0.118 -0.168,0.156 -0.028,0.289 0.272,0.35 0.175,0.191 -10e-4,0.109 0.049,0.12 0.129,0.14 0.08,-0.033 0.087,-0.114 0.039,-0.079 0.236,0.035 0.11,0.036 0.151,0.229 0.055,0.152 0.036,0.191 0.157,0.238 0.137,0.168 0.028,0.105 0.122,0.142 -0.075,0.315 0.008,0.161 -0.083,0.423 -0.019,0.2 0.006,0.073 0.186,0.151 -0.02,0.213 -0.189,-0.037 -0.328,-0.025 -0.657,0.111 -0.227,-0.045 -0.431,0.015 -0.308,0.061 -0.39,0.139 -0.303,-0.035 -0.164,-0.109 -0.216,0.008 -0.243,-0.059 -0.258,-0.106 -0.237,-0.053 -0.255,-0.195 -0.119,-0.034 -0.084,0.051 -0.071,0.064 -0.073,0.04 -0.139,-0.035 -0.052,-0.132 0.044,-0.128 0.012,-0.097 -0.065,-0.053 -0.155,-0.017 -0.252,0 -0.406,-0.04 -0.092,-0.025 -0.909,-0.033 -0.941,-0.004 -0.798,-0.003 -1.008,-0.005 -0.708,-0.003 -0.661,-0.003 -0.51,0.261 -0.553,0.281 -0.743,0.15 -0.855,-0.056 -0.273,0.041 -0.283,0.125 -0.208,0.09 -0.294,0.055 -0.381,-0.045 -0.154,0.027 -0.095,-0.128 -0.11,-0.208 0.069,-0.152 0.232,-0.098 0.349,-0.128 0.183,0.066 0.107,0.003 0.02,-0.082 -0.034,-0.044 -0.264,-0.111 -0.136,-0.147 -0.113,0.086 -0.098,0.18 -0.081,0.054 -0.119,0.05 -0.067,-0.122 -0.03,-0.119 0.055,-0.093 -0.028,-0.517 0.032,-0.276 -0.017,-0.241 0.165,-0.159 0.157,-0.099 0.611,-0.009 0.569,-0.009 0.548,0.006 0.558,0.005 0.055,-0.483 0.177,-0.038 0.264,-0.05 0.493,-0.059 0.549,-0.056 0.117,-0.095 0.091,-0.16 0.057,-0.144 0.114,-0.061 0.154,0.048 0.201,0.076 0.209,0.116 0.239,0.108 0.159,0.069 0.383,0.17 0.655,0.237 0.538,0.095 0.651,-0.174 0.47,-0.111 0.058,-0.208 -0.073,-0.203 -0.35,-0.186 -0.476,0.021 -0.146,0.05 -0.222,0.062 -0.133,0.024 -0.224,-0.043 -0.285,-0.161 -0.179,-0.162 -0.251,-0.075 -0.297,-0.077 -0.477,-0.333 -0.248,-0.06 -0.236,-0.017 -0.452,0.066 -0.442,0.178 -0.232,0.404 -0.442,-0.006 -0.939,-0.012 -0.862,-0.012 -0.711,0.027 -0.072,-0.293 -0.168,-0.234 -0.274,-0.199 -0.06,-0.186 0.092,-0.162 0.265,-0.132 0.06,-0.096 -0.139,0.015 -0.209,0.086 -0.139,0.004 -0.017,-0.256 -0.232,-0.331 -0.262,-0.561 -0.296,-0.229 -0.249,-0.455 -0.26,-0.174 -0.239,-0.081 -0.204,0.016 -0.075,0.208 -0.254,-0.299 0.347,-0.107 0.743,-0.375 0.853,-1.074 0.765,-1.275 0.099,-0.301 0.094,-0.229 0.061,-0.522 0.11,-0.311 0.103,-0.06 0.13,-0.239 0.156,-0.419 0.178,-0.233 0.198,-0.046 0.155,0.021 0.11,0.086 0.323,0.054 0.535,0.02 0.414,-0.063 0.292,-0.145 0.384,-0.074 0.475,-0.002 0.251,-0.061 0.024,-0.12 0.062,-0.036 0.099,0.047 0.094,-0.019 0.087,-0.086 0.088,-0.005 0.087,0.074 0.398,0.022 0.71,-0.029 0.655,0.22 0.602,0.469 0.311,0.313 0.019,0.157 0.1,0.158 0.18,0.159 0.164,0.029 0.15,-0.1 0.117,0.011 0.084,0.122 0.172,0.025 0.191,-0.075 0.136,0.026 0.025,0.072 0.032,0.039 0.092,0.017 0.124,0.092 0.175,0.249 0.142,0.347 0.109,0.445 0.145,0.242 0.179,0.039 0.105,0.091 0.02,0.106 0.053,0.072 0.086,0.04 0.152,-0.024 0.178,0.15 0.192,0.326 0.03,0.146 -0.03,0.079 0.011,0.058 0.128,0.055 0.12,0.106 0.098,0.16 0.212,0.142 0.326,0.125 0.235,0.186 0.144,0.247 0.298,0.208 z",
                        title: "Senegal",
                        id: "SN",
                    },
                    {
                        d:
                            "m 591.45675,467.6484 0.013,-0.229 -0.044,-0.114 -0.266,-0.343 -0.497,-0.638 -0.376,-0.483 -0.385,-0.493 -0.002,-0.395 -0.004,-1.175 -0.01,-2.349 -0.008,-2.35 -0.01,-2.35 -0.005,-1.176 -10e-4,-0.481 0.04,-0.078 0.439,-0.431 0.58,-0.572 0.762,-1.085 0.414,-0.591 0.346,-0.491 0.087,-0.15 0.306,-0.298 0.573,-0.178 0.356,-0.03 1.225,-0.223 0.182,-0.09 0.107,-0.103 0.102,-0.235 0.238,-0.33 0.308,-0.228 0.585,-0.296 0.573,-0.251 0.127,-0.041 0.69,-0.158 0.169,-0.054 0.279,-0.055 0.11,-0.002 0.958,0.055 0.75,0.044 0.771,0.044 0.082,-0.034 0.539,-0.586 0.858,-0.935 0.548,-0.596 0.846,-0.922 0.65,-0.666 0.719,-0.736 0.699,-0.674 0.839,-0.811 0.53,-0.511 0.822,-0.794 0.783,-0.757 0.692,-0.669 -0.955,0 -0.933,0 -0.919,0 -0.164,-0.081 -0.772,-0.26 -0.978,-0.329 -1.214,-0.408 -0.865,-0.29 -0.922,-0.305 -0.935,-0.308 -0.734,-0.242 -0.915,-0.302 -0.795,-0.263 -0.109,-0.064 -0.441,-0.401 -0.579,-0.527 -0.111,-0.009 -0.276,-0.11 -0.248,-0.285 -0.256,-0.364 -0.237,-0.456 -0.103,-0.31 -0.317,-0.131 -0.152,-0.245 -0.287,-0.363 -0.199,-0.176 -0.071,-0.154 -0.092,-0.318 -0.164,-0.347 -0.157,-0.214 -0.036,-0.093 0.009,-0.06 0.291,-0.47 0.131,-0.168 0.149,-0.162 0.121,-0.162 0.047,-0.111 0.353,-0.554 0.311,-0.488 0.243,-0.381 0.548,0.436 0.533,0.884 0.621,0.714 0.858,0.662 0.34,0.224 0.301,0.118 1.561,-0.018 1.108,-0.604 1.006,-0.438 0.338,-0.091 0.584,0.12 0.644,0.036 0.579,0.133 0.294,-0.034 1.146,-0.509 0.72,-0.496 0.491,-0.211 0.193,-0.002 0.67,0.179 0.861,-0.078 1.178,-0.428 0.375,-0.087 0.286,-0.006 0.641,0.193 0.1,-0.01 0.347,-0.036 0.915,-0.204 0.713,-0.308 1.313,-0.223 0.999,-0.564 0.175,-0.273 0.302,-0.344 0.438,-0.113 1.12,0.404 0.179,0.032 -0.065,0.244 -0.039,0.249 -0.229,0.434 -0.147,0.482 0.108,0.736 0.052,1.192 -0.027,0.173 -0.074,0.17 -0.031,0.135 -0.121,0.047 -0.053,0.077 0.088,0.03 0.35,-0.129 -0.006,-0.143 0.02,-0.07 0.288,0.159 0.206,0.066 0.06,0.15 -0.016,0.102 -0.327,-0.047 -0.167,-0.079 -0.485,0.13 -0.297,0.14 -0.089,0.234 -0.069,0.932 -0.115,0.604 -0.022,0.799 -0.393,0.528 -0.132,0.372 -0.584,0.746 -0.304,0.636 -0.1,0.311 -0.513,0.872 -0.705,0.668 -0.254,0.853 -0.252,0.535 -0.285,0.484 -0.622,0.862 -0.318,0.598 -0.399,1.038 -0.123,0.656 -1.123,1.904 -1.165,1.516 -0.725,1.275 -1.302,1.478 -1.775,1.907 -2.324,2.262 -0.63,0.461 -2.543,1.395 -1.649,1.168 -0.842,0.795 -0.884,0.692 -0.702,0.659 -2.121,2.222 -0.218,0.209 -0.206,0.197 -0.267,0.377 -0.186,0.149 -0.506,0.636 -0.317,0.329 -0.354,0.326 -0.151,0.23 -0.106,0.265 -0.119,0.147 -0.319,0.632 -0.282,0.414 z",
                        title: "Somalia",
                        id: "SO",
                    },
                    {
                        d:
                            "m 322.90675,447.9604 -0.236,0.198 -0.257,0.282 -0.338,0.487 0.015,0.153 -0.074,0.124 -0.018,0.218 0.024,0.245 0.087,0.16 0.04,0.304 -0.067,0.274 0.026,0.16 0.068,0.252 0.056,0.27 -0.006,0.108 0.082,0.089 0.076,0.086 -0.024,0.24 0.267,0.428 0.163,0.186 0.238,0.182 0.086,0.177 0.134,0.214 0.08,0.025 0.043,0.086 -0.044,0.165 -0.009,0.229 -0.151,0.266 -0.35,0.487 -0.043,0.113 0.091,0.404 -0.048,0.332 -0.021,0.159 -0.172,0.291 -0.408,0.703 -0.234,0.127 -0.142,0.203 -0.091,0.002 -0.102,0.019 -0.032,0.025 -0.128,-0.002 -0.1,-0.09 -0.016,-0.106 -0.053,-0.122 -0.126,-0.037 -0.238,0.043 -0.069,-0.031 -0.141,-0.13 -0.117,-0.143 -0.03,-0.138 -0.075,0.013 -0.181,0.125 -0.124,0.025 -0.097,-0.032 -0.109,0.009 -0.276,0.134 -0.163,0.03 -0.116,0.135 -0.767,0.061 -0.202,0.035 -0.458,-0.232 -0.118,-0.076 -0.06,-0.011 -0.051,0.012 -0.05,0.052 -0.076,0.292 -0.069,0.079 -0.12,0.065 -0.117,0.116 -0.023,0.113 0.18,0.063 0.15,0.219 0.163,0.176 0.131,0.154 -0.018,0.176 -0.022,0.249 -0.095,0.085 -0.159,0.041 -0.581,-0.12 -0.446,-0.108 -0.187,-0.023 -0.085,-0.028 -0.111,-0.091 -0.113,-0.084 -0.181,-0.031 -0.216,-0.057 -0.16,-0.219 -0.165,-0.311 -0.058,-0.141 -0.129,-0.136 -0.126,-0.194 -0.039,-0.172 -0.095,-0.157 -0.05,-0.053 -0.074,-0.214 -0.016,-0.08 -0.036,-0.01 -0.052,-0.069 -0.102,-0.229 -0.023,-0.057 -0.045,-0.02 -0.119,-0.161 -0.095,-0.056 -0.035,-0.083 0.008,-0.224 -0.051,-0.111 -0.015,-0.211 -0.003,-0.084 -0.049,-0.094 -0.081,-0.061 -0.014,-0.153 -0.02,-0.376 -0.039,-0.066 -0.342,0.005 -0.034,0.037 -0.148,0.022 -0.165,0.004 -0.15,-0.05 -0.123,-0.066 -0.027,-0.082 0.019,-0.261 -0.199,-0.198 -0.315,-0.245 -0.095,-0.311 -0.116,-0.194 -0.349,-0.406 -0.062,-0.278 0,-0.197 0.122,-0.18 0.171,-0.318 0.071,-0.288 0.052,-0.15 0.088,-0.197 0.08,-0.255 -0.061,-0.157 -0.104,-0.153 -0.034,-0.116 0.101,-0.168 0.101,-0.119 0.115,-0.016 0.146,-0.072 0.115,-0.102 0.175,-0.027 0.218,-0.011 0.446,0 0.228,-0.044 0.071,-0.082 -0.011,-0.158 0.113,-0.143 0.119,-0.06 0.048,-0.047 0.007,-0.053 -0.031,-0.048 -0.048,-0.032 -0.124,-0.011 -0.109,-0.248 0.075,-0.108 0.096,-0.199 0.027,-0.113 0.149,-0.176 0.036,0.054 0.115,-0.322 0.014,-0.262 0.088,-0.258 0.135,-0.306 0.243,-0.152 1.415,0.155 0.646,0.146 0.831,0.252 0.118,0.27 0.006,-0.27 -0.041,-0.272 0.23,-0.193 0.504,-0.068 0.755,0.093 0.649,-0.114 0.883,0.014 1.34,0.22 0.6,0.15 0.247,0.136 0.047,0.244 -0.023,0.313 -0.098,0.299 z",
                        title: "Suriname",
                        id: "SR",
                    },
                    {
                        d:
                            "m 570.20175,435.3384 -0.181,0.361 -0.058,0.257 -0.018,0.216 0.011,0.125 0.02,0.08 0.009,0.019 0.008,0.013 0.008,0.009 0.009,0.003 0.522,0.002 0.003,0 0,0 -0.003,0.115 0.021,0.572 0.018,0.5 0.03,0.817 0.001,0.213 -0.02,0.265 -0.062,0.105 -0.148,0.15 -0.187,0.137 -0.472,0.035 -0.394,-0.005 -0.279,-0.03 -0.382,-0.012 -0.359,0.029 -0.132,0.116 -0.194,0.409 -0.28,0.593 -0.148,0.251 -0.038,0.146 0.044,0.087 0.185,0.126 0.408,0.178 0.467,0.104 0.348,0.045 0.237,0.049 0.183,0.054 0.663,0.454 0.212,0.211 0.119,0.187 0.028,0.199 0.095,0.201 0.383,0.397 0.221,0.229 0.575,0.294 0.221,0.333 0.213,0.161 0.202,0.174 0.108,0.259 0.249,0.751 0.168,0.394 0.172,0.322 0.068,0.523 0.136,0.234 0.14,0.285 0.232,0.258 0.247,0.196 0.045,0.053 -0.516,0.505 -0.579,0.566 -0.669,0.656 -0.729,0.712 -0.571,0.564 -0.563,0.556 -0.658,0.657 -0.486,0.485 -0.081,0.068 -0.141,0.09 -0.463,0.002 -0.478,-0.057 -0.44,-0.295 -0.447,0.229 -0.283,0.072 -0.169,0.026 -0.399,0.037 -0.559,0.123 -0.253,0.153 -0.137,0.121 -0.113,0.223 -0.057,0.023 -0.103,-0.026 -0.143,-0.09 -0.299,-0.129 -0.151,-0.284 -0.138,-0.171 -0.115,-0.09 -0.474,0.283 -0.23,0.066 -0.188,-0.008 -0.344,-0.159 -0.38,-0.136 -0.196,0.001 -0.293,0.17 -0.333,0.254 -0.171,0.251 -0.083,0.149 -0.061,-0.119 -0.056,-0.111 -0.112,-0.142 -0.161,-0.056 -0.146,0.028 -0.171,0.028 -0.077,-0.081 -0.016,-0.195 -0.047,-0.18 -0.08,-0.135 -0.246,-0.135 -0.634,-0.274 -0.487,-0.547 -0.245,-0.254 -0.179,-0.164 -0.254,-0.43 -0.289,-0.296 -0.35,-0.138 -0.231,0.068 -0.238,0.317 -0.449,0.298 -0.206,0.01 -0.264,-0.161 -0.332,-0.115 -0.595,-0.05 -0.246,0.141 -0.322,0.228 -0.273,0.136 -0.169,0.016 -0.158,-0.055 -0.179,-0.029 -0.155,-0.005 -0.318,-0.208 -0.165,-0.153 -0.11,-0.147 -0.18,-0.1 -0.21,-0.084 -0.15,-0.131 -0.075,-0.164 -0.119,-0.21 -0.154,-0.189 -0.486,-0.34 -0.145,-0.201 -0.102,-0.196 -0.198,-0.216 -0.213,-0.289 -0.068,-0.423 -0.009,-0.341 -0.045,-0.158 -0.09,-0.158 -0.105,-0.134 -0.169,-0.15 -0.396,-0.219 -0.41,-0.254 -0.196,-0.148 -0.373,-0.054 -0.223,-0.145 -0.187,-0.319 -0.075,-0.255 -0.189,-0.199 -0.081,-0.144 -0.045,-0.166 0.15,-0.505 -0.217,-0.179 -0.323,-0.232 -0.232,-0.254 -0.141,-0.233 -0.415,-0.308 -0.904,-0.461 -0.522,-0.294 -0.285,-0.264 -0.249,-0.259 -0.025,-0.106 0.161,-0.258 0.024,-0.213 -0.132,-0.234 -0.542,-0.442 -0.432,-0.486 -0.327,-0.152 -0.788,-0.135 -0.226,-0.054 -0.236,-0.093 -0.233,-0.219 -0.079,-0.259 0.114,-0.415 -0.073,-0.127 -0.133,-0.035 0,0 0.036,-0.086 0.149,-0.202 0.243,-0.131 0.651,-0.205 0.036,-0.079 0.013,-0.259 0.053,-0.127 0.224,-0.36 0.032,-0.143 0.01,-0.306 0.03,-0.145 0.065,-0.103 0.178,-0.178 0.062,-0.109 0.027,-0.235 -0.019,-0.464 0.091,-0.184 0.41,-0.422 0.11,-0.189 0.037,-0.169 -0.004,-0.172 0.025,-0.17 0.122,-0.164 0.104,-0.051 0.302,-0.052 0.206,0.033 1.44,-0.289 0.169,0.039 0.075,0.171 -0.007,0.274 0.025,0.133 0.077,0.094 0.229,0.13 0.158,0.218 0.085,0.08 0.231,0.149 1.071,1.244 0.302,0.118 0.293,-0.043 0.582,-0.258 0.291,-0.065 2.036,0.073 0.228,-0.039 0.014,0.006 0.31,0.624 0.147,0.142 2.233,0.007 -0.042,-0.178 0.028,-0.198 0.261,-0.255 0.132,-0.127 0,10e-4 0.056,-0.046 0.345,-0.183 0.337,-0.122 0.648,-0.143 0.236,-0.226 0.131,-0.206 0.004,-0.407 0.086,-0.067 0.154,-0.094 0.749,-0.364 0.127,-0.077 1.324,0.845 0.742,0.669 0.045,0.033 0.039,0.012 0.039,-0.023 0.033,-0.031 0.054,-0.02 0.036,-0.009 0.318,-0.009 0.601,-0.033 0.198,-0.08 1.207,-1.195 0.307,-0.381 0.077,-0.078 0.175,-0.271 0.184,-0.468 0.037,-0.053 1.323,-1.122 0.046,-0.089 0.013,-0.071 -0.2,-0.378 -0.043,-0.192 -0.008,-0.296 0.039,-0.46 -0.014,-0.291 -0.005,-0.034 -0.013,-0.045 -0.009,-0.017 -0.738,-0.828 1.865,-0.008 0.004,-0.069 -0.002,-0.036 -0.005,-0.033 -0.035,-0.099 -0.021,-0.133 -0.001,-0.036 0.003,-0.037 0.01,-0.068 10e-4,-0.037 -0.002,-0.018 -0.003,-0.016 10e-4,-0.015 0.008,-0.012 1.34,0.017 -0.018,0.235 -0.162,0.551 0.003,0.33 -0.039,0.378 -0.009,0.03 -0.037,0.082 -0.032,0.046 -0.037,0.045 -0.01,0.017 -0.012,0.028 -10e-4,0.041 0.278,2.108 -0.011,0.053 -0.01,0.034 -0.074,0.132 -0.019,0.043 -0.004,0.033 0.03,0.023 0.617,0.228 0.03,0.014 0.024,0.018 0.222,0.271 1.215,0.997 0.042,0.05 0.126,0.313 0.014,0.048 0.004,0.074 -0.003,0.058 -0.031,0.188 0.01,0.084 0.021,0.056 0.017,0.065 0,0.019 -0.002,0.017 z",
                        title: "South Sudan",
                        id: "SS",
                    },
                    {
                        d:
                            "m 495.73075,458.5514 -0.104,0.073 -0.124,-0.062 -0.033,-0.111 0.16,-0.214 0.076,-0.053 0.063,0.045 0.038,0.059 0.005,0.086 -0.081,0.177 z m -2.144,4.034 -0.29,0.204 -0.104,-0.053 -0.064,-0.142 -0.081,-0.307 0.026,-0.147 0.131,-0.168 0.285,-0.167 0.171,-0.012 0.176,0.22 0.001,0.229 -0.251,0.343 z",
                        title: "Sao Tome and Principe",
                        id: "ST",
                    },
                    {
                        d:
                            "m 224.10075,422.2974 0.071,0.014 0.469,0.147 0.139,-0.029 0.178,0.118 0.085,0.093 0.075,0.128 0.37,0.255 0.062,0.112 0.277,0.151 0.112,0.116 0.118,0.047 0.231,0.045 0.198,0.061 0.023,0.042 0.019,0.172 0.042,0.144 0.094,0.009 0.114,-0.07 0.372,-0.193 0.351,-0.129 0.198,0.077 0.117,0.161 0.134,0.072 0.278,-0.044 0.252,0.014 0.198,0.141 0.046,0.081 -0.122,0.468 -0.044,0.199 -0.021,0.169 0.071,0.045 0.07,0.065 -0.015,0.091 -0.217,0.15 -0.068,0.038 0.05,0.288 -0.161,0.175 -0.148,0.125 -0.26,0.034 -0.441,0.014 -0.664,-0.142 -0.49,-0.194 -0.263,-10e-4 0.083,0.064 0.209,0.041 0.274,0.136 -0.079,0.038 -0.997,-0.284 -1.152,-0.559 -0.689,-0.089 -0.789,-0.146 -0.466,-0.353 -0.35,-0.153 -0.031,-0.134 0.004,-0.148 0.158,-0.199 0.296,-0.268 0.197,-0.139 0.092,-0.027 0.13,0.014 0.124,-0.078 0.107,-0.184 0.112,-0.119 0.284,-0.121 0.065,-0.048 -0.022,-0.103 -0.062,-0.201 0.01,-0.124 0.092,-0.057 0.112,-0.011 0.23,-0.05 0.1,0.01 z",
                        title: "El Salvador",
                        id: "SV",
                    },
                    { d: "m 297.74075,411.6834 0.314,0 -0.003,0.069 -0.03,0.077 -0.189,-0.065 -0.096,-0.068 z", title: "Saint Martin", id: "SX" },
                    {
                        d:
                            "m 593.77575,351.2754 0,0.047 -0.025,0.121 -0.317,0.348 -0.43,0.472 -0.309,0.298 -0.52,0.5 -0.389,0.107 -0.654,0.18 -0.176,0.174 -0.164,0.282 -0.096,0.385 -0.028,0.24 -0.017,0.448 0.153,0.465 0.147,0.445 0.019,0.294 -0.015,0.289 -0.142,0.309 -0.155,0.423 -0.089,0.477 -0.047,0.891 -10e-4,0.757 -0.013,0.123 -0.269,0.532 -0.314,0.622 -0.146,0.143 -0.689,0.185 -0.752,0.454 -0.841,0.507 -0.763,0.459 -0.801,0.481 -0.831,0.498 -0.594,0.355 -0.795,0.475 -0.724,0.453 -0.733,0.459 -0.558,0.347 -0.846,0.549 -0.496,0.322 -0.729,0.472 -0.642,0.415 -0.759,0.49 -0.952,-0.145 -0.301,-0.085 -0.246,-0.233 -0.181,-0.125 -0.45,-0.128 -0.289,-0.441 -0.173,-0.156 -0.302,-0.07 0.04,-0.158 0.156,-0.266 0.158,-0.29 -0.088,-0.161 -0.029,-0.138 -0.01,-0.164 0.108,-0.157 -0.051,-0.19 -0.083,-0.19 -0.061,-0.096 0,-0.175 0.04,-0.134 0.05,-0.205 0.128,-0.112 0.033,-0.117 0.115,-0.115 0.153,-0.094 0.035,-0.075 -0.022,-0.043 -0.154,-0.085 -0.083,-0.149 0.074,-0.217 0.049,-0.068 0.092,-0.106 0.206,-0.16 0.161,-0.026 0.139,-10e-4 0.236,0.014 0.183,0.029 0.047,-0.042 -0.007,-0.053 -0.226,-0.131 -0.012,-0.105 0.056,-0.112 0.16,-0.178 0.191,-0.13 0.097,-0.023 0.218,-0.262 0.14,-0.293 -0.227,-0.714 -0.136,-0.115 -0.222,-0.098 -0.131,-0.015 -0.01,-0.047 0.175,-0.181 0.124,-0.159 -0.137,-0.15 -0.247,-0.071 -0.091,0.156 -0.316,0.014 -0.49,-0.002 -0.216,-0.758 -0.033,-0.329 0.006,-0.381 0.149,-0.558 -0.07,-0.259 -0.006,-0.175 -0.038,-0.24 -0.387,-0.518 0.211,-0.956 0.149,-0.232 0.21,0.022 0.448,0.272 0.074,-0.008 0.136,-0.358 0.132,-0.121 0.276,-0.107 0.079,-0.58 0.129,-0.111 0.156,-0.06 0.24,-0.012 0.208,-0.034 0.013,-0.102 -0.292,-0.673 0.026,-0.171 0.141,-0.678 0.089,-0.266 0.085,-0.087 0.331,0.034 0.463,0.12 0.123,0.195 0.227,0.174 0.339,-0.012 0.393,0.033 0.306,0.011 0.245,-0.122 0.553,-0.228 0.273,-0.076 0.249,-0.101 0.8,-0.374 0.321,0.029 0.219,0.049 0.168,0.06 0.376,0.255 0.311,0.258 0.219,0.077 0.392,-0.006 0.567,0.05 0.696,-0.004 0.407,-0.072 0.519,-0.127 0.926,-0.305 1.218,-0.639 0.716,-0.311 0.309,-0.037 0.402,-0.003 0.402,0.081 0.456,0.058 0.211,-0.005 0.493,-0.064 0.64,-0.13 0.402,-0.106 0.486,-0.174 0.303,-0.29 0.098,-0.03 0.126,0.053 0.059,0.02 0.124,0.164 z",
                        title: "Syria",
                        id: "SY",
                    },
                    {
                        d:
                            "m 564.55775,537.9284 0.056,0.045 0.259,0.143 0.023,0.286 -0.025,0.326 -0.052,0.206 0.02,0.205 0.083,0.32 0.079,0.219 0.019,0.998 -0.088,-0.046 -0.159,-0.043 -0.085,0.02 -0.077,0.449 -0.06,0.667 0.036,0.415 -0.606,0.013 -0.766,-0.045 -0.549,-0.18 -0.592,-0.395 -0.351,-0.616 -0.154,-0.386 -0.215,-0.022 -0.035,-0.066 -0.019,-0.471 0.004,-0.493 0.041,-0.131 0.398,-0.607 0.247,-0.376 0.154,-0.363 0.335,-0.427 0.358,-0.272 0.133,-0.039 0.092,0.011 0.632,0.374 0.648,0.355 0.142,-0.04 z",
                        title: "Swaziland",
                        id: "SZ",
                    },
                    {
                        d:
                            "m 273.16475,400.4864 -0.049,0.032 -0.163,-0.104 -0.023,-0.083 -0.058,-0.004 -0.097,-0.075 0.023,-0.097 0.222,-0.004 0.089,0.269 0.056,0.066 z m 0.614,0.226 -0.011,0.041 -0.159,-0.116 -0.305,-0.001 -0.048,-0.159 0.117,-0.026 0.387,0.056 0.088,0.138 -0.069,0.067 z m -1.885,-0.258 0.321,0.166 0.193,-0.025 0.016,0.036 -0.104,0.038 -0.026,0.031 -0.309,0.043 -0.097,-0.008 -0.02,-0.112 0.026,-0.169 z",
                        title: "Turks and Caicos Islands",
                        id: "TC",
                    },
                    {
                        d:
                            "m 542.19575,407.4764 10e-4,1.318 0.001,1.315 10e-4,1.311 10e-4,1.308 10e-4,1.305 10e-4,1.301 0.001,1.298 10e-4,1.296 10e-4,0.428 -0.036,0.17 -0.015,0.024 -0.055,0.029 -0.667,-0.12 -0.292,-0.003 -0.41,0.092 -0.602,0.049 -0.388,-0.015 -0.27,0.222 -0.211,0.268 0.1,0.642 -0.023,0.211 -0.081,0.22 -0.183,0.189 -0.183,0.151 -0.109,0.132 -0.135,0.29 -0.101,0.135 0.009,0.182 -0.032,0.19 -0.11,0.1 -0.279,0.072 -0.181,0.085 -0.145,0.139 -0.097,0.1 0.051,0.133 0.071,0.182 0.04,0.285 0.028,0.167 0.138,0.136 0.084,0.097 0.029,0.119 -0.08,0.099 -0.342,0.206 -0.137,0.077 -0.157,0.105 -0.06,0.039 -0.25,0.196 -0.126,0.174 -0.061,0.144 0.003,0.2 0.127,0.298 0.139,0.253 0.053,0.191 0.032,0.209 -0.012,0.198 -0.072,0.173 -0.125,0.155 -0.471,0.293 -0.231,0.32 -0.186,0.39 -0.046,0.212 0.05,0.142 0.099,0.119 0.139,0.061 0.204,0.018 0.338,-0.065 0.315,-0.043 0.334,0.14 0.174,0.326 -0.067,0.238 0.126,0.432 0.112,0.521 -0.008,0.175 0.049,0.066 0.209,0.034 0.047,0.122 -0.069,0.913 0.097,0.255 0.14,0.182 0.158,0.095 0.16,0.122 0.082,0.084 0.184,0.02 0.207,0.166 0.056,0.221 -0.014,0.214 -0.12,0.462 -0.098,0.311 -0.12,-0.021 -0.244,-0.077 -0.298,-0.066 -0.366,-0.053 -0.348,0.127 -0.376,0.163 -0.118,0.121 -0.105,0.072 -0.166,-0.012 -0.152,0.021 -0.082,0.116 -0.138,0.129 -0.542,0.266 -0.114,0.097 -0.068,0.096 0,0.105 0.055,0.216 -10e-4,0.269 -0.121,0.218 -0.14,0.146 -0.161,0.056 -0.133,0.031 -0.088,0.09 -0.283,0.494 -0.122,0.091 -0.249,-0.015 -0.714,0.739 -0.071,0.218 -0.261,0.309 -0.33,0.343 -0.295,0.166 -0.024,0.064 -0.079,0.065 -0.182,0.074 -0.63,0.418 -0.757,-0.017 -0.334,0.164 -0.325,0.072 -0.476,0.081 -0.142,-0.008 -0.61,0.034 -0.715,-0.012 -0.274,0.059 -0.257,0.158 -0.191,0.139 -0.027,0.047 0.028,0.058 -0.007,0.046 0.5,0.341 0.125,0.167 -0.126,0.162 -0.06,0.024 -0.007,0.01 -0.082,0.128 -0.293,0.384 -0.446,0.454 -0.228,0.13 -0.091,0.085 -0.119,0.301 -0.076,0.042 -0.307,0.039 -0.606,0.033 -0.839,0.098 -0.503,0.033 -0.313,-0.028 -0.44,0.208 -0.157,0.053 -0.096,0.018 -0.436,0.201 -0.362,0.313 -0.129,0.059 -0.51,0.133 -0.203,0.215 -0.093,0.018 -0.327,-0.284 -0.223,-0.257 -0.109,-0.261 -0.013,-0.083 -0.062,0.015 -0.179,0.116 -0.155,0.131 -0.071,0.25 -0.527,0.168 -0.451,0.145 -0.205,0.182 -0.316,0.09 -0.403,-0.037 -0.314,-0.074 -0.307,-0.025 0.147,-0.227 0.057,-0.169 0.014,-0.207 -0.022,-0.14 -0.184,-0.07 -0.116,-0.11 -0.264,-0.653 -0.271,-0.672 -0.382,-0.662 -0.416,-0.423 -0.301,-0.258 -0.096,-0.033 -0.155,-0.081 -0.108,-0.075 -0.552,-0.45 -0.572,-0.504 -0.147,-0.23 -0.286,-0.343 -0.32,-0.354 -0.166,-0.161 -0.077,-0.291 0.22,-0.263 0.236,-0.332 0.29,-0.221 0.376,-0.015 0.619,0.091 0.668,0.032 0.662,-0.069 0.171,-0.048 0.17,0.004 0.356,0.077 0.62,-0.017 0.32,-0.134 -0.345,-0.229 -0.371,-0.363 -0.347,-0.398 -0.211,-0.361 -0.193,-0.465 -0.178,-0.575 -0.109,-0.746 0.016,-0.423 0.056,-0.301 0.186,-0.492 -0.123,-0.288 0.027,-0.233 -0.018,-0.345 -0.06,-0.176 -0.241,-0.573 -0.049,-0.063 -0.213,-0.397 -0.094,-0.664 -0.241,-0.439 -0.387,-0.212 -0.22,-0.259 -0.081,-0.456 -0.153,-0.12 -0.608,-0.159 -0.508,-0.004 -0.369,-0.515 -0.474,-0.663 -0.441,-0.616 -0.282,-1.236 -0.162,-0.708 0.183,-0.215 0.362,-0.505 0.462,-0.968 1.041,-1.499 0.533,-0.769 1.063,-1.15 1.306,-1.416 0.736,-0.8 0.119,-1.46 0.126,-1.548 0.095,-1.173 0.118,-1.395 0.1,-1.168 0.072,-0.853 0.102,-1.211 0.087,-0.233 0.513,-0.953 0.04,-0.128 -0.095,-0.16 -0.732,-0.812 -0.228,-0.181 -0.132,-0.423 0.188,-0.237 -0.88,-1.368 -0.218,-0.168 -0.096,-0.167 -0.011,-0.248 -0.016,-0.95 -0.234,-1.495 -0.308,-1.748 1.034,-0.499 0.785,-0.38 1.002,-0.485 0.928,0.497 1.345,0.718 1.345,0.716 1.344,0.716 1.345,0.715 1.344,0.713 1.345,0.711 1.344,0.711 1.345,0.71 1.344,0.708 1.345,0.707 1.344,0.706 1.345,0.705 1.344,0.704 1.345,0.703 1.344,0.701 z",
                        title: "Chad",
                        id: "TD",
                    },
                    {
                        d:
                            "m 620.36875,609.6544 -0.205,0.036 -0.183,-0.083 -0.104,-0.221 0.231,-0.189 0.119,0.13 0.088,0.145 0.054,0.182 z m 48.693,11.118 0.226,0.024 0.138,-0.039 0.619,-0.563 0.162,-0.014 -0.016,0.431 0.159,0.194 -0.201,0.05 -0.382,-0.021 -0.087,0.247 0.385,0.316 0.192,0.043 0.156,-0.003 0.293,-0.072 0.234,-0.114 0.363,-0.264 0.218,-0.103 0.412,-0.004 0.215,-0.25 0.1,-0.077 0.241,0.011 0.219,0.098 0.131,0.227 0.069,0.276 -0.053,0.274 -0.146,0.267 -0.267,0.163 0.061,0.195 -0.071,0.099 -0.134,0.006 -0.114,-0.045 -0.168,-0.229 -0.202,-0.122 -0.484,0.008 -0.218,0.016 -0.038,0.175 -0.115,0.135 -0.12,0.074 -0.163,-0.032 -0.03,0.074 0.087,0.184 0.212,0.232 0.366,0.162 0.215,0.033 0.029,-0.309 0.26,-0.036 0.229,0.092 0.167,0.228 -0.136,0.075 -0.119,0.121 -0.025,0.156 -0.232,0.17 -0.139,0.019 -0.438,-0.084 -0.261,-0.191 -0.062,-0.136 -0.161,-0.051 -0.181,0.175 -0.194,0.038 -0.38,-0.146 -0.351,-0.234 -0.219,-0.088 -0.341,-0.056 -0.189,0.531 -0.261,0.226 -0.338,0.021 -0.162,-0.044 -0.09,-0.209 0.023,-0.223 0.055,-0.214 0.106,-0.218 0.066,-0.238 -0.028,-0.225 -0.122,-0.164 0.064,-0.295 -0.12,-0.23 0.042,-0.169 0.195,-0.116 -0.083,-0.102 -0.104,-0.026 -0.075,-0.134 -0.058,-0.162 0.076,-0.304 0.113,-0.292 -0.014,-0.329 0.191,-0.311 0.164,-0.348 0.122,-0.138 0.154,-0.021 0.067,0.097 0.033,0.189 -0.061,0.123 0.144,0.056 0.038,0.403 -0.09,0.166 -0.014,0.16 -0.187,0.341 0.054,0.274 0.379,0.12 z m 0.274,-0.216 -0.173,0.033 -0.054,-0.139 0.006,-0.184 -0.096,-0.146 -0.055,-0.162 0.048,-0.153 0.278,-0.018 0.287,0.049 0.073,0.259 -0.207,0.354 -0.107,0.107 z",
                        title: "French Southern and Antarctic Lands",
                        id: "TF",
                    },
                    {
                        d:
                            "m 477.42275,432.0834 -0.072,0.306 -0.149,0.378 -0.096,0.12 -0.068,0.918 0.047,0.076 0.034,0.023 0.466,0.31 0.611,0.407 0.432,0.287 0.036,0.097 0.007,0.602 0.005,0.517 0.089,0.295 0.019,0.287 0.109,0.216 0.398,0.417 0.095,0.246 0.011,0.788 0.007,0.597 0.051,0.813 0,0.678 0,0.856 0,1.004 0,1.045 -0.263,0.013 0.144,0.325 0.024,0.294 0.034,0.096 -0.071,0.142 0.059,0.217 0.114,0.08 0.292,0.436 0.097,0.369 -0.468,0.123 0.032,0.095 -0.875,0.196 -0.346,0.162 -0.007,-0.156 -0.127,-0.028 -0.155,-0.053 -0.097,-0.081 -0.134,-0.185 -0.048,-0.145 -0.204,-0.023 -0.252,-0.162 -0.24,-0.186 -0.084,-0.186 0.024,-0.085 -0.038,-0.089 -0.082,-0.033 -0.216,-0.42 -0.135,-0.169 -0.062,-0.136 0.022,-0.105 -0.03,-0.142 0.042,-0.115 0.117,-0.068 0.036,-0.084 0.011,-0.177 0.065,-0.364 0.043,-0.358 -0.123,-0.098 -0.15,-0.028 -0.078,-0.103 -0.03,-0.168 0.003,-0.146 0.295,-0.51 -0.061,-1.176 0.044,-0.179 0.135,-0.124 0.114,-0.143 -0.005,-0.143 -0.196,-0.351 -0.373,-0.27 -0.191,-0.218 -0.103,-0.196 -0.017,-0.105 0.226,-0.154 0.1,-0.106 0.013,-0.123 -0.092,-0.223 0.016,-0.399 0.087,-0.299 0.089,-0.387 -0.009,-0.113 -0.219,-0.232 -0.119,-0.031 -0.096,0.016 -0.229,0.152 -0.083,0.016 -0.052,-0.044 -0.023,-0.061 0.081,-0.091 -0.03,-0.113 0.068,-0.099 0.145,-0.045 0.043,-0.05 -0.196,-0.047 -0.023,-0.068 0.014,-0.065 0.057,-0.013 0.061,0.004 0.034,-0.047 0.031,-0.329 0.023,-0.115 0.025,-0.228 0.03,-0.882 0.045,-0.091 0.007,-0.066 -0.138,-0.043 -0.325,-0.237 -0.19,-0.182 -0.166,-0.186 -0.139,-0.123 -0.273,-0.189 -0.08,-0.121 -0.012,-0.12 0.083,-0.242 0.132,-0.257 0.065,-0.369 -0.04,-0.098 -0.179,-0.171 0.639,0.131 0.912,0.221 0.019,0.039 0.006,0.066 0.158,-0.002 0.263,-0.078 z",
                        title: "Togo",
                        id: "TG",
                    },
                    {
                        d:
                            "m 755.88775,405.0434 -0.021,0.175 0.069,0.037 0.097,-0.082 0.123,-0.199 0.135,-0.112 0.146,-0.025 0.155,0.136 0.164,0.296 0.168,0.168 0.079,0.019 0.057,0.135 0.009,0.13 -0.08,0.274 -0.135,0.318 -0.193,0.394 0.063,0.331 0.263,0.27 0.313,0.159 0.332,-0.044 0.177,-0.081 0.145,-0.127 0.134,-0.06 0.17,-0.016 0.528,0.093 0.161,0.092 0.024,0.183 -0.065,0.469 0.082,0.344 0.149,0.362 0.018,0.33 -0.185,0.543 -0.154,0.514 -0.166,0.25 -0.129,0.161 -0.038,0.109 0.011,0.103 0.118,0.154 0.126,0.199 0.031,0.19 -0.014,0.233 -0.086,0.32 -0.32,0.693 -0.254,0.625 0.133,0.125 0.252,0.091 0.167,0.089 0.175,-0.057 0.371,-0.369 0.319,-0.274 0.397,-0.274 0.023,-0.024 0.348,-0.202 0.159,-0.186 0.086,-0.237 0.123,-0.091 0.159,0.053 0.202,-0.103 0.245,-0.26 0.188,-0.12 0.131,0.02 0.234,0.161 0.338,0.302 0.3,0.18 0.263,0.058 0.129,0.112 -0.007,0.167 0.059,0.106 0.123,0.045 0.055,-0.018 -0.014,-0.081 0.119,-0.119 0.252,-0.156 0.256,-0.092 0.26,-0.027 0.169,-0.124 0.111,-0.322 0.161,-0.245 0.144,-0.111 0.178,-0.056 0.047,-0.078 -0.086,-0.1 0.008,-0.102 0.103,-0.103 0.221,-0.044 0.34,0.015 0.397,0.104 0.456,0.194 0.299,0.063 0.143,-0.07 0.278,0.3 0.414,0.67 0.354,0.506 0.297,0.342 0.312,0.262 0.327,0.183 0.235,0.249 0.214,0.472 -0.16,0.651 -0.043,0.563 0.02,0.689 0.193,0.528 0.366,0.367 0.213,0.296 0.06,0.226 0.285,0.194 0.511,0.161 0.213,0.146 -0.087,0.131 -0.007,0.152 0.072,0.173 0.178,0.144 0.281,0.113 0.168,0.12 0.053,0.126 -0.006,0.205 -0.065,0.283 -0.117,0.217 -0.17,0.151 -0.021,0.12 -0.044,0.182 0,0.373 0.121,0.248 0.037,0.315 -0.066,0.257 -0.064,0.525 -0.008,0.203 -0.061,0.175 -0.148,0.168 -0.227,0.158 -0.276,0.141 -0.169,0.062 -0.04,0.029 -0.121,0.159 -0.146,0.154 -0.113,0 -0.085,-0.078 -0.06,-0.101 -0.035,-0.221 -0.255,-0.109 -0.28,-0.069 -0.57,0.109 -0.461,0.059 -0.517,-0.075 -0.486,0.094 -0.203,0.014 -0.233,-0.015 -0.226,0.002 -0.215,-0.034 -0.396,-0.135 -0.152,0.011 -0.319,0.112 -0.334,0.078 -0.32,0.054 -0.473,0.23 -0.342,0.333 -0.101,0.235 -0.17,0.237 -0.235,0.375 -0.305,0.359 -0.212,0.164 0.059,0.097 -0.053,0.116 -0.332,0.052 -0.259,0.021 -0.047,0.058 0.031,0.722 0.091,0.273 0.167,0.329 0.109,0.181 0.082,0.534 0.024,0.453 0.365,0.286 0.206,0.218 0.147,0.192 -0.051,0.122 -0.088,0.365 0.085,0.473 0.51,1.02 0.044,0.072 -0.061,0.008 -0.08,-0.196 -0.259,-0.331 -0.08,-0.353 -0.304,-0.389 -0.17,-0.154 -0.055,0.129 -0.097,0.138 -0.298,-0.2 -0.256,-0.209 -0.235,-0.405 -0.03,0.094 -0.053,0.085 -0.268,-0.318 -0.28,-0.254 -0.252,-0.091 -0.155,-0.084 -0.15,-0.135 -0.314,-0.14 -0.782,0.202 -0.995,-0.157 -0.383,0.15 -0.157,-0.093 -0.097,-0.173 0.093,-0.296 0.021,-0.62 0.119,-0.436 -0.056,-0.332 0.058,-0.156 0.044,-0.213 -0.157,-0.087 -0.703,-0.169 -0.148,-0.134 -0.188,0.154 -0.844,0.086 -0.318,0.129 -0.294,0.248 -0.076,0.314 0.17,0.207 0.109,0.359 -0.303,0.784 -0.051,0.233 0.117,0.958 -0.047,0.525 -0.165,0.352 -0.261,0.316 -0.108,0.535 -0.205,0.248 -0.275,0.566 -0.186,0.705 -0.132,0.326 -0.077,0.6 -0.567,0.909 -0.133,0.513 -0.203,0.194 0.071,0.153 0.012,0.256 -0.071,0.683 -0.023,0.566 0.086,0.303 0.271,0.601 -0.064,0.174 -0.032,0.248 0.229,0.112 0.164,0.033 0.926,-0.284 0.313,0.073 0.118,0.265 0.076,0.231 0.157,1.246 0.081,0.231 0.187,0.22 0.205,0.234 0.07,-0.042 0.013,-0.087 0.014,-0.098 0.183,0.236 0.143,0.44 0.488,2.325 0.141,0.295 0.117,0.311 -0.298,-0.151 -0.08,-0.516 -0.085,-0.217 -0.105,-0.032 -0.166,0.004 -0.011,-0.092 0.125,-0.168 -0.02,-0.202 -0.171,-0.166 -0.276,0.132 0.008,0.362 0.123,0.277 0.468,0.62 0.146,0.259 0.186,0.074 0.271,-0.041 0.324,0.264 0.255,0.245 0.633,0.375 0.383,-0.04 0.414,-0.093 0.277,0.024 0.272,0.096 0.327,0.313 0.519,0.784 0.848,0.652 -0.092,0.162 -0.037,0.247 -0.334,0.329 -0.054,0.19 -0.122,0.241 -0.232,0.129 -0.2,0.024 -0.115,-0.023 -0.08,-0.048 -0.136,-0.228 -0.069,-0.069 -0.058,-0.016 -0.427,0.157 -0.413,0.174 -0.076,0.156 -0.11,0.182 -0.12,0.072 -0.095,0.018 -0.091,-0.107 -0.158,-0.139 -0.122,-0.13 0.031,-0.21 0.232,-0.309 0.03,-0.216 -0.029,-0.372 -0.063,-0.214 -0.067,-0.007 -0.114,-0.035 -0.322,0.035 -0.161,-0.242 -0.063,-0.266 -0.11,-0.095 -0.109,-0.058 -0.241,0.092 -0.185,-0.055 -0.613,-0.231 -0.235,-0.373 -0.126,-0.011 -0.111,0.041 -0.044,0.085 -0.065,0.429 -0.053,0.131 -0.703,-0.864 -0.484,-0.356 0.068,-0.645 -0.147,-0.125 -0.184,-0.012 -0.139,-0.179 0.123,-0.384 -0.19,0.073 -0.263,-0.014 -0.216,-0.106 -0.163,-0.532 -0.104,-0.162 -0.225,-0.279 -0.297,0 -0.099,-0.134 0.024,-0.344 -0.217,-0.211 -0.285,-0.172 -0.234,-0.101 -0.239,-0.555 -0.188,-0.136 -0.16,-0.111 -0.223,0.075 -0.073,0.2 -0.148,0.193 -0.169,-0.024 -0.155,-0.11 -0.189,-0.555 -0.031,-0.34 0.042,-0.632 0.236,-0.567 0.127,-0.908 0.201,-0.571 0.141,-0.194 0.193,-0.781 0.395,-0.999 0.045,-0.214 0.08,-0.24 0.06,-0.227 0.02,-0.358 -0.051,-0.188 0,-0.106 0.083,-0.135 0.281,-0.227 0.389,-0.374 0.462,-0.526 0.474,-0.808 0.235,-0.469 0.099,-0.166 0.104,-0.052 0.162,-0.161 0.111,-0.178 0.006,-0.09 -0.257,-0.879 -0.169,-0.287 -0.085,-0.339 -0.046,-0.245 -0.062,-0.225 0.03,-0.212 -0.093,-0.132 -0.21,-0.167 -0.218,-0.249 -0.13,-0.407 0,-0.227 -0.139,-0.199 -0.047,-0.208 0.084,-0.199 0.109,-0.172 -0.013,-0.756 -0.044,-0.226 -0.054,-0.404 -0.142,-0.305 -0.201,-0.357 -0.228,-0.295 -0.596,-0.534 -0.425,-0.357 -0.21,-0.326 -0.267,-0.375 -0.191,-0.27 -0.241,-0.341 -0.123,-0.465 -0.068,-0.496 0.037,-0.164 0.115,-0.108 0.151,-0.087 0.122,-0.02 0.344,-0.228 0.239,0.02 0.056,-0.049 0.023,-0.104 -0.031,-0.452 0.011,-0.605 0.044,-0.493 0.052,-0.325 0.634,-0.378 0.133,-0.164 0.064,-0.177 0,-0.156 -0.054,-0.123 -0.095,-0.068 -0.41,0.326 -0.08,-0.072 -0.188,-0.536 -0.081,-0.164 -0.117,-0.196 -0.126,-0.274 -0.02,-0.474 -0.091,-0.235 -0.512,-0.501 -0.229,-0.27 -0.313,-0.39 -0.375,-0.468 -0.383,-0.433 -0.18,-0.277 -0.063,-0.063 -0.021,-0.107 0.116,-0.298 -0.058,-0.3 -0.19,-0.4 -0.082,-0.248 0.027,-0.095 -0.092,-0.037 -0.213,0.021 -0.204,-0.188 -0.197,-0.396 -0.019,-0.07 0.064,0.001 0.247,0.068 0.084,-0.01 0.175,-0.091 0.265,-0.096 0.157,-0.032 0.052,-0.047 0.022,-0.096 -0.135,-0.916 0.023,-0.191 0.251,-0.396 -0.028,-0.4 0.064,-0.574 0.28,-0.393 0.21,-0.181 0.066,-0.284 0.096,-0.06 0.174,0.022 0.359,0.212 0.153,0.01 0.218,-0.006 0.234,-0.016 0.109,-0.02 0.749,-0.207 0.165,-0.022 0.158,0.026 0.115,-0.01 0.115,-0.095 0.082,-0.167 0.094,-0.536 0.054,-0.095 0.097,-0.076 0.159,-0.051 0.186,0.004 0.243,0.103 0.152,0.004 0.172,-0.043 0.146,-0.074 0.097,-0.094 0.044,-0.113 -0.039,-0.217 -0.111,-0.272 0.031,-0.033 0.204,0.06 0.3,0.067 0.229,-0.015 0.149,-0.047 0.146,-0.129 0.184,-0.119 0.179,0.027 0.139,0.106 0.331,0.2 z m 6.467,24.208 0.009,0.068 -0.146,-0.052 -0.051,0.024 -0.163,-0.019 -0.08,-0.395 0.012,-0.093 0.116,0.029 0.166,0.196 0.085,0.136 0.052,0.106 z m 0.504,0.889 -0.046,0.297 -0.16,-0.122 0.038,-0.15 0.063,-0.068 0.105,0.043 z m -7.106,5.618 -0.027,0.047 -0.109,-0.09 -0.077,-0.102 -0.041,-0.13 0.168,0.005 0.083,0.12 0.003,0.15 z m -0.01,0.313 0.013,0.16 -0.061,0.192 -0.256,0.113 -0.088,-0.154 0.023,-0.237 0.039,-0.06 0.251,0.012 0.079,-0.026 z m -4.948,1.511 -0.159,0.03 0.021,-0.154 0.042,-0.097 0.077,-0.026 0.032,0.166 -0.013,0.081 z m 0.285,3.24 -0.03,0.207 -0.115,-0.003 -0.117,0.133 -0.055,0.018 -0.095,-0.422 0.109,-0.592 0.059,-0.084 0.081,0.157 0.235,0.07 -0.102,0.341 0.03,0.175 z m 0.512,-0.09 -0.033,0.047 -0.143,-0.539 0.211,0.145 -0.035,0.347 z m 1.366,0.962 0.073,0.339 -0.103,-0.069 -0.085,-0.148 10e-4,-0.217 0.021,-0.03 0.093,0.125 z m 1.64,3.006 -0.053,0.017 -0.105,-0.227 0.133,-0.329 0.133,0.403 -0.108,0.136 z",
                        title: "Thailand",
                        id: "TH",
                    },
                    {
                        d:
                            "m 674.03775,340.0654 0.009,0.067 -0.041,0.121 -0.583,0.206 -0.265,0.174 -0.057,0.309 -0.07,0.089 -0.118,0.073 -0.117,0.017 -0.179,-0.363 -0.204,-0.075 -0.293,-0.128 -0.569,-0.248 -0.294,-0.108 -0.565,0.162 -0.66,0.222 -0.103,0.135 -0.07,0.145 0.007,0.11 0.048,0.147 -0.033,0.112 -0.124,0.036 -0.187,-0.136 -0.163,-0.079 -0.08,0.186 -0.096,0.33 -0.044,0.24 0.144,0.346 0.049,0.511 0.264,-0.027 0.201,10e-4 0.38,-0.151 0.191,-0.004 0.295,0.066 0.517,0.013 0.408,-0.027 0.099,0.011 0.097,-0.097 0.107,0.034 0.1,0.117 0.413,-0.142 0.307,-0.02 0.188,0.042 0.111,0.042 0.199,0.338 0.152,0.209 0.186,0.067 0.577,-0.062 0.169,-0.295 0.148,-0.073 0.238,-0.022 0.196,-0.057 0.156,-0.121 0.213,-0.106 0.186,-0.021 0.092,0.078 0.04,0.103 -0.032,0.133 -0.007,0.139 0.12,0.093 0.354,0.022 0.167,0.087 0.01,0.164 -0.027,0.257 0.148,0.104 0.077,0.009 0.519,-0.272 0.146,-0.004 0.116,0.15 0.177,0.18 0.232,0.192 0.056,-0.03 0.104,-0.209 0.198,-0.228 0.372,-0.075 0.205,-0.071 0.215,-0.032 0.652,0.092 0.216,0.012 0.449,-0.018 0.353,-0.046 0.284,-0.137 0.144,-0.11 0.233,-0.064 0.295,0.011 0.157,0.032 0.014,0.188 -0.037,0.357 -0.045,0.248 0.233,0.449 0.149,0.216 0.146,0.153 0.027,0.121 -0.03,0.098 -0.181,0.096 -0.065,0.102 -0.03,0.115 0.059,0.133 0.104,0.424 0.134,0.329 0.189,0.158 0.283,0.104 0.155,-0.022 0.111,-0.246 0.186,-0.188 0.157,0.013 0.253,-0.008 0.664,0.213 0.648,0.322 0.188,0.178 0.066,0.2 -0.179,0.462 0.008,0.294 0.041,0.314 0.148,0.232 0.136,0.398 0.026,0.329 0.059,0.098 0.048,0.115 -0.072,0.301 -0.051,0.303 0.061,0.101 0.198,0.149 0.312,0.279 0.06,0.23 -0.111,0.146 -0.198,0.178 -0.254,0.153 -0.075,0.064 -0.045,-0.036 -0.126,-0.155 -0.28,-0.25 -0.199,-0.132 -0.38,0.042 -0.223,-0.046 -0.269,-0.082 -0.251,0.012 -0.158,0.151 -0.102,0.151 -0.251,0.046 -0.361,0.116 -0.56,0.181 -0.27,-0.027 -0.073,-0.078 0.061,-0.104 0.191,-0.135 0.047,-0.163 -0.037,-0.151 -0.179,-0.041 -0.068,-0.024 -0.079,-0.031 -0.346,-0.09 -0.276,0.033 -0.481,0.189 -0.886,0.496 -0.389,0.333 -0.28,0.503 -0.838,0.162 -0.576,0.288 -0.594,0.468 -0.393,0.252 -0.191,0.036 -0.191,-0.045 -0.191,-0.125 -0.187,-0.392 -0.166,-0.594 -0.109,-0.394 0.062,-0.506 0.07,-0.577 0.071,-0.588 0.115,-0.681 0.096,-0.243 0.005,-0.162 -0.085,-0.082 -0.18,0.004 -0.275,0.091 -0.195,0.016 -0.116,-0.059 0.012,-0.317 0.14,-0.577 -0.215,-0.486 -0.572,-0.396 -0.486,-0.138 -0.401,0.121 -0.337,0.314 -0.272,0.507 -0.283,0.414 -0.293,0.321 -0.21,0.155 -0.067,0.06 -0.042,0.136 0.155,0.427 -0.01,0.357 -0.176,0.289 -0.193,0.137 -0.211,-0.013 -0.168,-0.067 -0.124,-0.121 -0.336,-0.033 -0.548,0.055 -0.375,0.144 -0.202,0.234 -0.059,0.308 0.085,0.381 -0.042,0.292 -0.171,0.203 -0.14,0.116 -0.109,0.03 -0.238,-0.175 -0.365,-0.38 -0.251,-0.206 -0.137,-0.031 -0.074,0.021 -0.084,0.04 -0.048,0.049 -0.041,0.113 -0.117,0.045 -0.165,-0.036 -0.151,0.034 -0.091,0.119 -0.254,0.144 -0.448,0.161 -0.245,0.172 -0.041,0.183 -0.066,0.082 -0.138,-0.03 -0.404,0.251 -0.309,-0.078 -0.347,-0.323 -0.192,-0.266 -0.02,-0.112 0.109,-0.255 0.046,-0.851 0.139,-0.295 0.413,-0.53 0.215,-0.405 0.243,-0.33 0.175,-0.11 0.162,-0.26 0.132,-0.298 0.037,-0.188 -0.012,-0.147 -0.048,-0.095 -0.229,-0.202 -0.301,-0.315 -0.16,-0.323 -0.087,-0.412 -0.023,-0.288 0.282,-0.793 -0.045,-0.133 -0.081,-0.123 -0.166,-0.078 -0.237,-0.033 -0.236,0.036 -0.301,0.003 -0.208,-0.045 -0.05,-0.05 -0.026,-0.362 -0.053,-0.079 -0.089,-0.069 -0.607,-0.167 -0.119,-0.072 -0.022,-0.092 0.215,-0.808 0.093,-0.061 0.091,-0.132 0.143,-0.141 0.495,-0.231 0.532,0.1 0.473,0.107 0.472,0.058 0.163,0.039 0.269,0.032 0.181,-0.028 0.123,-0.095 0.222,-0.262 0.068,-0.394 0.08,-0.348 0.135,-0.027 0.136,0.037 0.064,-0.07 0.027,-0.096 0.027,-0.082 0.056,-0.018 0.098,0.09 0.056,-0.024 0.046,-0.061 -0.014,-0.072 -0.11,-0.122 -0.099,-0.191 0.01,-0.066 0.033,-0.069 0.291,-0.065 0.133,-0.012 0.046,-0.068 -0.017,-0.108 -0.11,-0.061 -0.398,0.033 -0.407,-0.007 -0.049,-0.066 0.023,-0.073 0.062,-0.057 0.84,-0.146 0.445,0.051 0.331,0.077 0.13,-0.038 -0.154,-0.33 0.21,-0.031 0.027,-0.113 -0.275,-0.879 0.151,-0.078 0.151,-0.173 -0.013,-0.329 0.134,-0.16 0.159,-0.11 0.236,0.111 0.366,0.325 0.118,0.063 0.118,0.018 0.17,-0.101 0.652,-0.321 0.366,-0.181 0.438,-0.263 0.075,-0.102 0.15,-0.401 0.082,-0.027 0.111,0.043 0.384,0.415 0.222,0.266 0,0.091 -0.063,0.068 0.012,0.066 0.314,0.144 0,0.065 -0.071,0.125 -0.038,0.069 -0.039,0.029 -0.42,0.362 -0.466,0.402 -0.016,0.052 -0.021,0.1 0.005,0.102 0.075,0.084 0.201,0.059 0.179,0.076 0.091,0.21 0.104,0.194 0.141,0.048 0.691,-0.123 0.159,-0.013 z m -0.857,-2.568 -0.084,0.008 -0.151,-0.175 -0.053,-0.123 0.062,-0.037 0.13,0.085 0.087,0.151 0.009,0.091 z m 0.138,4.078 -0.252,0.14 -0.147,-0.015 -0.114,-0.136 -0.083,-0.127 -0.018,-0.072 0.042,10e-4 0.194,0.058 0.272,0.04 0.096,0.035 0.01,0.076 z",
                        title: "Tajikistan",
                        id: "TJ",
                    },
                    {
                        d:
                            "m 1001.1707,486.9334 -0.013,0.006 -0.013,-0.032 -0.017,-0.035 -0.013,-0.032 0,-0.004 0.027,0.027 0.018,0.032 0.01,0.038 z m 3.628,2.187 -0.01,0.008 -0.013,-0.017 -0.02,-0.022 -0.013,-0.032 0.01,-0.002 0.021,0.018 0.015,0.022 0.01,0.025 z",
                        title: "Tokelau",
                        id: "TK",
                    },
                    {
                        d:
                            "m 827.51975,485.6914 -0.188,0.484 -0.203,-0.103 0.216,-0.272 0.104,-0.081 0.071,-0.028 z m -1.623,3.871 -0.097,-0.368 -0.103,-0.158 -0.08,-0.09 -0.027,-0.112 0.004,-0.115 0.049,-0.053 0.346,-0.015 0.137,-0.189 -0.001,-0.227 -0.069,-0.077 -0.067,-0.032 -0.356,0.17 -0.103,-0.031 -0.061,-0.062 0.02,-0.251 0.294,-0.235 0.249,-0.426 0.175,-0.17 0.407,-0.159 0.165,-0.045 1.186,-0.235 0.283,-0.016 0.751,0.007 1.006,-0.051 0.248,-0.032 0.322,-0.104 0.313,-0.128 0.165,-0.101 0.174,-0.073 0.259,0.092 0.438,0.069 0.118,0.061 0.109,0.084 -0.509,0.448 -0.56,0.372 -0.345,0.112 -0.356,0.076 -0.272,0.144 -0.229,0.225 -0.293,0.126 -0.33,0.043 -0.283,0.067 -0.256,0.132 -0.355,0.227 -0.145,0.023 -0.152,-0.005 -0.295,0.087 -0.919,0.324 -0.555,0.361 -0.4,0.31 z m -2.895,-0.481 0.454,-0.241 0.691,-0.186 -0.018,0.136 -0.07,0.214 -0.104,0.101 -0.158,0.181 -0.104,0.04 -0.414,-0.04 -0.054,0.026 -0.071,-0.019 -0.105,-0.116 -0.047,-0.096 z",
                        title: "Timor-Leste",
                        id: "TL",
                    },
                    {
                        d:
                            "m 661.58975,350.4334 -0.142,0.013 -0.341,-0.082 -0.679,-0.164 -0.583,-0.329 -0.381,-0.215 -0.06,0.029 -0.171,0.147 -0.117,0.181 -0.093,0.35 -0.149,0.412 -0.705,0.016 -0.601,0.031 -0.388,0.156 -0.38,0.215 -0.095,0.255 -0.082,0.331 -0.222,0.749 -0.201,0.682 -0.104,0.441 -0.153,0.302 -0.43,0.397 -0.487,0.267 -0.259,0.125 -0.114,0.156 -0.025,0.147 -0.092,0.045 -0.201,-0.026 -0.212,0.025 -0.466,0.154 -0.504,0.189 -0.604,0.188 -0.345,0 -0.137,0.042 -0.061,0.095 0.061,0.179 0.059,0.133 0.053,0.172 -0.142,0.139 -0.099,0.239 -0.077,0.42 -0.214,0.125 -0.344,0.204 -0.379,0.268 -0.098,0.055 -0.218,0.076 -0.217,-0.023 -0.197,-0.039 -0.214,0.069 -0.222,0.207 -0.103,-0.063 -0.052,-0.209 -0.111,-0.136 -0.347,-0.307 -0.297,-0.219 -0.128,-0.015 -0.272,0.057 -0.341,0.041 -0.277,-0.044 -0.22,-0.088 -0.339,-0.302 -0.124,-0.163 -0.093,-0.125 -0.231,0.034 -0.065,-0.136 -0.009,-0.16 0.064,-0.193 -0.019,-0.365 -0.13,-0.262 -0.148,-0.114 0.019,-0.08 0.065,-0.183 0.083,-0.16 -0.001,-0.316 -0.104,-0.343 -0.041,-0.497 0.026,-0.485 -0.141,-0.245 -1.156,-10e-4 -1.028,0.019 -0.058,-0.056 -0.4,-0.613 -0.324,-0.466 -0.32,-0.275 -0.733,-0.339 -0.351,-0.142 -0.301,-0.259 -0.246,-0.285 -0.063,-0.39 -0.05,-0.128 -0.071,-0.104 -0.077,-0.046 -0.094,0.01 -0.852,-0.454 -0.342,-0.12 -0.322,0.096 -0.142,0.017 -0.28,-0.129 -0.322,0.175 -0.137,0.011 -0.192,-0.042 -0.159,-0.065 -0.429,-0.415 -0.36,-0.167 -0.259,-0.107 -0.499,-0.158 -0.531,-0.082 -0.273,-0.068 -0.196,-0.091 -0.051,-0.059 0.003,-0.152 -0.015,-0.2 -0.065,-0.146 -0.135,-0.175 -0.187,-0.131 -0.322,0.023 -0.483,-0.011 -0.37,-0.131 -0.294,-0.023 -0.354,0.025 -0.29,0 -0.207,0.096 -0.12,0.112 -0.076,0.342 -0.07,0.051 -0.121,0.025 -0.161,-0.018 -0.34,0.003 -0.587,-0.061 -0.737,-0.018 -0.555,0.173 -0.438,0.248 -0.418,0.279 -0.492,0.44 -0.145,0.196 -0.29,0.779 -0.129,0.112 -0.168,0.089 -0.17,0.016 -0.338,0.115 -0.446,0.19 -0.303,0.074 -0.779,-0.039 -0.046,-0.247 -0.14,-0.902 -0.068,-0.914 0.004,-0.422 0.082,-0.849 -0.007,-0.429 -0.033,-0.389 0.032,-0.382 0.063,-0.43 0.032,-0.438 -0.047,-0.306 -0.15,-0.247 -0.255,-0.306 -0.04,-0.182 -0.015,-0.202 -0.244,-0.023 -0.22,-0.209 -0.181,-0.114 -0.39,-0.127 -0.194,-0.006 -0.179,0.093 -0.131,0.187 -0.092,-0.295 0.003,-0.309 0.311,-0.639 0.195,0.187 0.237,0.075 0.302,0.011 0.297,-0.049 -0.058,-0.219 -0.138,-0.125 -0.172,-0.098 -0.061,-0.29 0.021,-0.301 0.081,-0.285 -0.093,-0.115 -0.14,-0.071 -0.325,0.008 -0.421,-0.075 -0.424,-0.033 -0.1,0.336 0.234,0.44 -0.198,-0.216 -0.188,-0.286 -0.262,-0.516 -0.169,-0.606 -0.03,-0.656 0.143,-0.543 0.184,-0.512 0.11,-0.657 0.152,-0.646 0.151,0.29 0.174,0.26 0.24,0.239 0.132,0.057 0.396,0.099 0.255,-0.037 0.271,-0.142 0.267,0.046 0.221,0.266 0.196,0.298 0.298,0.063 0.614,-0.215 0.292,-0.049 0.254,0.099 0.131,0.018 0.133,-0.017 -0.115,-0.264 -0.047,-0.257 0.154,-0.136 0.484,0.145 0.309,-0.096 0.079,-0.054 0.069,-0.067 0.037,-0.222 -0.015,-0.229 -0.04,-0.215 -0.09,-0.189 -0.223,-0.265 -0.863,-0.633 -0.291,-0.253 -0.242,-0.328 -0.154,-0.463 -0.125,-0.484 -0.116,-0.36 -0.301,-0.838 -0.117,-0.1 -0.147,-0.044 -0.357,-0.026 -0.362,0.061 -0.592,0.145 -0.339,-0.045 -0.157,0.089 -0.388,0.354 -0.182,0.302 -0.254,0.69 0.192,0.222 -0.004,0.146 -0.146,1.014 0.089,0.491 -0.032,0.036 -0.069,-0.114 -0.22,-0.5 -0.387,-0.612 -0.324,-0.939 0.569,-0.616 0.487,-0.438 0.398,-0.264 0.122,-0.064 0.545,-0.219 0.703,-0.198 0.519,-0.146 0.676,-0.125 0.222,-0.023 0.325,0.002 0.264,0.117 0.159,0.092 0.564,0.377 0.575,0.384 0.494,0.425 0.14,0.173 0.078,0.207 0.059,0.203 0.419,0.642 0.17,0.293 0.245,0.381 0.197,0.186 0.192,0.229 0.129,0.188 0.147,0.089 0.164,0.035 0.374,-0.06 0.45,-0.119 0.269,-0.05 0.12,0.007 0.742,0.042 0.668,0.038 0.824,0.047 0.245,0.044 0.294,0.041 0.146,0.006 0.13,-0.163 0.086,-0.089 0.067,-0.071 -0.014,-0.08 -0.104,-0.068 -0.164,-0.226 -0.094,-0.817 -0.059,-0.702 0.195,-0.219 0.225,-0.159 0.323,-0.479 0.174,-0.148 0.255,-0.123 0.854,-0.032 0.36,-0.094 0.116,-0.155 0.189,-0.394 0.063,-0.321 0.106,-0.147 0.127,-0.109 0.131,0.004 0.253,0.094 0.192,0.053 0.137,0.071 0.125,0.114 0.121,0.197 0.019,0.13 0.056,0.075 0.097,0.001 0.072,10e-4 0.049,-0.028 0.031,-0.066 -0.024,-0.088 -0.165,-0.252 -0.363,-0.457 -0.237,-0.187 -0.118,-0.101 -0.029,-0.096 0.154,-0.145 0.149,-0.083 0.262,0.062 0.349,0.034 0.154,-0.073 0.159,-0.368 0.396,0.39 0.412,0.436 0.151,0.081 0.295,0.046 0.245,0.016 0.103,0.047 0.11,0.113 0.218,0.476 0.218,0.125 0.271,0.09 0.875,-0.008 0.269,0.024 0.219,0.223 0.137,0.092 0.059,0.079 -0.015,0.098 -0.054,0.125 -0.007,0.24 -0.014,0.186 -0.07,0.088 -0.021,0.082 0.058,0.072 0.405,0.176 0.137,0.189 0.103,0.084 0.024,0.118 -0.068,0.078 -0.19,-0.039 -0.093,0.124 0,0.222 0.136,0.208 0.04,0.19 -0.09,0.183 -0.105,0.258 -0.003,0.182 0.062,0.104 0.311,0.188 0.715,0.474 0.165,0.02 0.677,-0.11 0.315,-0.011 0.186,0.074 0.524,0.067 0.166,0.076 0.178,0.005 0.242,-0.022 0.164,-0.212 0.084,-0.048 0.074,-0.035 0.149,-0.005 0.414,0.135 0.437,0.284 0.288,0.259 0.143,0.234 0.18,0.506 0.218,0.777 0.262,0.523 0.308,0.271 0.216,0.498 0.188,1.083 0.116,0.221 0.119,0.115 0.352,0.312 0.719,0.516 0.424,0.304 0.656,0.484 0.602,0.443 0.603,0.682 0.12,0.1 0.53,0.368 0.59,0.376 0.413,-0.085 0.622,0.578 0.253,0.214 0.107,0.073 0.451,0.228 0.718,0.476 0.906,0.68 0.6,0.393 0.162,0.046 0.162,-0.002 0.173,-0.084 0.188,-0.066 0.32,0.087 0.347,0.157 0.221,0.119 0.254,0.172 0.201,0.164 0.152,0.075 0.519,0.143 0.089,0.085 0.057,0.095 0.009,0.099 -0.292,0.518 -0.039,0.659 -0.002,0.495 0.035,0.381 z m -37.643,-5.165 -0.026,0.168 -0.152,-0.506 -0.076,-0.559 0.097,-0.158 0.109,0.009 -0.104,0.202 0.152,0.844 z",
                        title: "Turkmenistan",
                        id: "TM",
                    },
                    {
                        d:
                            "m 507.18275,364.6964 -0.006,0.088 -0.099,0.633 -0.022,0.227 -0.015,0.385 0,0.462 0.224,0.39 0.006,0.171 -0.087,0.198 -0.413,0.226 -0.533,0.292 -0.458,0.277 -0.502,0.304 -0.154,0.196 -0.249,0.151 -0.208,0.151 -0.038,0.145 -0.146,0.273 -0.19,0.218 -0.477,0.103 -0.088,0.065 -0.221,0.328 -0.102,0.128 -0.126,0.269 0.162,0.696 0.198,0.714 0.039,0.297 -0.003,0.247 -0.111,0.266 -0.254,0.38 -0.186,0.279 -0.357,0.501 -0.105,0.124 -0.246,0.146 -0.475,0.193 -0.335,0.171 -0.17,-0.764 -0.146,-0.653 -0.12,-0.54 -0.211,-0.953 -0.18,-0.812 -0.179,-0.811 -0.163,-0.738 -0.164,-0.745 -0.07,-0.109 -0.491,-0.352 -0.452,-0.325 -0.471,-0.37 -0.51,-0.401 -0.082,-0.506 -0.262,-0.766 -0.276,-0.428 -0.104,-0.112 -0.557,-0.277 -0.321,-0.204 -0.088,-0.119 -0.062,-0.313 -0.229,-0.624 -0.261,-0.568 -0.096,-0.385 -0.013,-0.485 0.051,-0.351 0.114,-0.15 0.544,-0.438 0.252,-0.527 0.312,-0.198 0.27,-0.149 0.219,-0.174 0.194,-0.279 0.148,-0.298 0.025,-0.323 0.062,-0.513 0.099,-0.359 0.23,-0.407 -0.097,-0.328 -0.122,-0.354 0.035,-0.615 -0.031,-0.25 -0.099,-0.221 -0.101,-0.284 -0.003,-0.237 0.097,-0.623 0.074,-0.477 0.118,-0.621 -0.042,-0.174 -0.088,-0.13 -0.264,-0.137 -0.003,-0.083 0.064,-0.092 0.39,-0.304 0.209,-0.447 0.175,-0.093 0.266,-0.162 -0.01,-0.174 -0.06,-0.187 0.693,-0.211 0.66,-0.554 0.233,-0.136 1.532,-0.512 0.199,0.035 0.223,0.075 -0.064,0.191 -0.088,0.151 0.13,0.267 0.186,-0.163 -0.047,-0.109 -0.011,-0.145 0.315,-0.013 0.279,0.023 0.306,0.159 -0.021,0.603 0.408,0.589 -0.115,0.293 0.334,0.173 0.297,-0.208 0.149,-0.307 0.547,-0.178 0.52,-0.452 0.288,-0.046 0.065,0.371 0.139,0.324 -0.197,0.114 -0.25,0.344 -0.475,0.87 -0.437,0.255 -0.328,0.334 -0.106,0.237 -0.032,0.276 0.082,0.494 0.239,0.501 0.276,0.302 0.266,0.094 0.619,0.476 -0.01,0.282 0.086,0.335 0.033,0.407 0.215,0.325 -0.46,0.706 -0.252,0.509 -0.492,0.7 -0.438,0.454 -0.938,0.673 -0.23,0.223 -0.15,0.231 -0.069,0.241 0.025,0.283 0.309,0.695 0.411,0.409 0.418,0.221 0.727,-0.089 -0.025,0.267 0.052,0.319 0.295,-0.015 0.198,-0.05 0.167,-0.311 0.355,0.213 0.185,0.648 0.301,0.202 0.035,0.075 -0.106,0.05 -0.083,0.074 0.089,0.053 0.291,0.08 0.176,-0.051 0.298,0.149 z m -0.636,-5.294 -0.433,0.245 0.083,-0.213 0.286,-0.258 0.074,0.062 -0.01,0.164 z m -0.899,3.486 -0.074,0.016 -0.136,0.091 -0.072,0.01 -0.204,-0.103 -0.078,10e-4 -0.098,-0.072 0.033,-0.392 0.032,-0.111 0.496,-0.015 0.269,0.235 0.044,0.062 0.011,0.067 -0.125,0.131 -0.098,0.08 z",
                        title: "Tunisia",
                        id: "TN",
                    },
                    {
                        d:
                            "m 997.03275,515.8364 -0.106,0.174 -0.051,-0.002 -0.123,-0.101 -0.045,-0.068 0.188,-0.205 0.097,-0.016 0.13,0.069 -0.006,0.058 -0.084,0.091 z m -3.392,7.508 0.04,0 0.044,-0.088 0.151,-0.032 -0.017,0.095 -0.204,0.308 -0.128,-0.12 -0.374,-0.197 -0.075,-0.152 0.124,-0.115 -0.013,0.093 0.063,0.042 0.211,0.016 0.188,0.083 -0.117,0.027 0.107,0.04 z m 0.699,0.392 -0.016,0.45 -0.137,-0.206 -0.016,-0.096 0.139,-0.139 0.03,-0.009 z",
                        title: "Tonga",
                        id: "TO",
                    },
                    {
                        d:
                            "m 553.51775,333.6454 -0.076,0.429 0.177,0.472 0.414,0.653 0.417,0.329 1.685,0.812 0.31,0.069 -0.07,0.332 -0.102,0.294 -0.111,0.196 -0.494,0.126 -1.362,-0.361 -0.345,-0.034 -0.243,0.072 -0.45,0.262 -0.499,-0.084 -0.696,0.148 -0.194,0.493 -0.483,0.563 -0.795,0.454 -0.568,0.243 -0.854,0.868 -0.387,0.505 -0.163,0.098 -0.194,0.078 0.065,-0.243 0.096,-0.222 -0.022,-0.168 0.004,-0.244 0.284,-0.277 0.259,-0.201 0.765,-0.365 0.202,-0.304 -0.6,0.007 -0.61,0.067 -0.383,-0.043 -0.334,0.025 -0.105,-0.266 -0.081,-0.16 0.087,-0.05 0.11,-0.035 0.196,-0.284 0.175,-0.209 0.252,-0.264 0.064,-0.158 0,-0.147 -0.061,-0.102 -0.012,-0.122 -0.008,-0.171 0.014,-0.355 0.578,-0.388 0.185,-0.041 0.063,-0.178 -0.042,-0.412 -0.08,-0.333 -0.104,-0.022 -0.139,-0.097 -0.091,-0.113 -0.146,-0.123 -0.251,-0.076 -0.008,-0.105 0.026,-0.105 0.093,-0.108 0.424,-0.093 0.05,-0.076 0.057,-0.188 0.084,-0.192 0.1,-0.063 0.179,0.006 0.34,-0.044 0.237,-0.063 0.235,-0.132 0.121,-0.12 0.51,-0.069 0.143,-0.061 0.142,0.052 0.191,0.205 0.314,0.294 0.168,0.098 0.126,-0.045 0.228,-0.107 0.218,0 0.176,0.019 0.085,-0.093 0.133,-0.02 0.381,0.067 z m 37.875,1.692 0.186,0.075 0.352,0.096 0.218,0.116 0.124,0.031 0.287,-0.236 0.426,0.006 0.375,0.027 0.193,0.044 0.237,0.078 0.286,0.053 0.117,-0.113 0.167,-0.333 0.065,-0.042 0.046,-0.03 0.212,-0.026 0.201,0.025 0.095,0.057 0.095,0.267 0.239,0.095 0.422,0.425 0.258,0.17 0.063,0.071 -0.085,0.086 0.034,0.106 0.147,0.138 0.207,0.052 0.224,-0.019 0.122,0.05 0.087,0.078 0.023,0.11 -0.006,0.07 0.044,0.157 0.175,0.222 0.208,0.136 0.112,0.145 0.182,0.499 0.074,0.275 -0.028,0.265 -0.126,0.271 -0.276,0.337 0.068,0.141 0.062,0.186 -0.021,0.135 0.196,0.43 0.089,0.267 -0.074,0.062 -0.048,0.085 0.352,0.205 0.422,0.172 0.178,0.033 0.484,-0.079 0.312,-0.017 0.31,0.163 0.451,0.395 0.487,0.514 0.097,0.156 0.042,0.069 0.095,0.124 -0.099,-0.002 -0.16,-0.111 -0.387,-0.316 -0.198,0.136 -0.171,0.234 -0.187,0.887 -0.151,0.094 -0.267,-0.002 -0.327,-0.031 -0.225,0.044 -0.058,0.056 0.03,0.095 0.067,0.146 0.047,0.184 0.014,0.15 0.118,0.136 0.159,0.129 0.007,0.132 -0.024,0.187 -0.037,0.142 -0.04,0.081 0.074,0.216 0.173,0.255 0.11,0.098 -0.041,0.485 0.065,0.215 0.05,0.296 -0.02,0.492 0.021,0.121 0.059,0.041 0.158,0.019 0.154,0.045 0.054,0.081 -0.001,0.059 -0.193,0.225 -0.023,0.16 -0.067,0.225 -0.055,0.132 -0.172,0.25 -0.109,0.254 -0.05,0.209 0.033,0.099 0.318,0.03 0.172,0.15 0.459,0.299 0.081,0.121 -0.125,0.184 0.002,0.077 0.06,0.098 0.028,0.171 -0.011,0.189 0.002,0.25 0.084,0.041 0.312,0.234 0.222,0.234 0.007,0.073 -0.107,0.185 0.023,0.213 -0.004,0.049 -0.096,-0.08 -0.173,-0.029 -0.178,-0.009 -0.112,0.063 -0.196,0.167 -0.264,0.182 -0.214,0.167 -0.123,0.115 -0.102,-0.019 -0.079,-0.1 -0.044,-0.14 0.019,-0.529 -0.047,-0.166 -0.1,-0.116 -0.118,-0.066 -0.14,-0.037 -0.145,-0.004 -0.205,0.155 -0.291,0.161 -0.451,-0.013 -0.303,-0.03 -0.146,-0.03 -0.587,-0.246 -0.122,-0.006 -0.219,-0.1 -0.26,-0.079 -0.438,0.15 -0.189,-0.036 -0.265,-0.13 -0.094,0.035 -0.296,0.396 -0.504,0.423 -0.272,0.071 -0.129,-0.425 -0.125,-0.165 -0.059,-0.02 -0.126,-0.053 -0.098,0.03 -0.303,0.29 -0.486,0.174 -0.402,0.106 -0.64,0.129 -0.494,0.064 -0.21,0.005 -0.456,-0.058 -0.402,-0.081 -0.402,0.003 -0.309,0.037 -0.716,0.311 -1.218,0.639 -0.926,0.305 -0.519,0.127 -0.407,0.072 -0.696,0.004 -0.567,-0.049 -0.393,0.005 -0.218,-0.077 -0.311,-0.258 -0.376,-0.255 -0.168,-0.06 -0.219,-0.049 -0.32,-0.029 -0.8,0.374 -0.249,0.102 -0.274,0.076 -0.553,0.228 -0.245,0.122 -0.307,-0.011 -0.392,-0.032 -0.34,0.011 -0.227,-0.173 -0.123,-0.195 -0.463,-0.12 -0.331,-0.035 -0.085,0.087 -0.088,0.266 -0.141,0.679 -0.026,0.17 0.292,0.673 -0.013,0.102 -0.208,0.035 -0.239,0.012 -0.156,0.06 -0.129,0.111 -0.078,0.58 -0.277,0.106 -0.132,0.121 -0.136,0.358 -0.074,0.008 -0.448,-0.271 -0.21,-0.022 0.181,-0.281 -0.196,-0.557 -0.214,-0.522 0.202,-0.334 0.418,-0.404 0.439,-0.474 0,-0.293 -0.023,-0.224 -0.126,-0.155 -0.242,-0.206 -0.405,0.22 -0.289,0.243 -0.189,0.049 -0.205,0.138 -0.1,0.25 -0.248,0.194 -0.405,0.076 -0.609,-0.208 -0.654,-0.316 -0.37,-0.257 -0.302,-0.062 -0.287,0.113 -0.847,0.628 -0.775,0.916 -0.192,0.158 -0.73,0.393 -0.482,0.131 -0.227,-0.03 -0.961,0.172 -0.477,0.025 -0.378,0.207 -0.733,-0.224 -0.438,-0.287 -0.264,-0.292 -0.43,-0.629 -0.305,-0.299 -0.685,-0.27 -1.194,-0.656 -0.314,-0.072 -0.815,-0.094 -0.859,-0.06 -0.174,0.239 -0.066,0.945 -0.147,0.259 -0.063,0.489 -0.105,0.14 -0.165,0.092 -0.258,-0.154 -0.179,-0.068 -0.417,0.201 -0.825,0.281 -0.281,0.04 -0.956,-0.354 -0.35,-0.228 -0.226,-0.252 -0.076,-0.427 -0.142,-0.243 -0.021,-0.167 -0.056,-0.192 -0.193,-0.076 -0.207,0.146 -0.222,-0.006 -0.278,-0.089 -0.657,-0.359 -0.504,-0.029 -0.304,0.438 -0.236,0.139 -0.258,0.042 -0.015,-0.124 0.196,-0.284 -0.787,0.052 -0.415,0.216 -0.324,-0.034 -0.243,-0.097 0.036,-0.119 0.246,-0.044 0.214,-0.097 0.852,-0.079 0.199,-0.079 0.218,-0.309 0.396,-0.266 0.051,-0.114 -0.305,-0.001 -1.306,0.077 -0.896,-0.042 -0.106,0.132 -0.135,0.019 -0.037,-0.359 0.142,-0.167 0.19,0.016 0.469,-0.145 -0.042,-0.299 -0.335,-0.202 -0.068,-0.12 -0.244,-0.028 -0.197,-0.143 -0.043,-0.36 -0.157,-0.396 -0.224,-0.191 0.028,-0.105 0.411,-0.134 0.085,-0.555 -0.063,-0.341 -0.207,-0.029 -0.603,-0.27 -0.183,0.029 -0.2,-0.297 -0.35,-0.213 -0.173,0.078 -0.109,0.097 -0.162,-0.046 -0.271,-0.185 -0.267,-0.1 -0.118,-0.124 0.148,-0.331 0.204,0.008 0.037,-0.259 -0.161,-0.433 0.016,-0.223 0.178,-0.061 0.203,0.042 0.205,0.259 0.067,0.25 -0.043,0.244 0.13,0.236 0.093,0.06 0.062,-0.249 0.087,-0.047 0.12,0.108 0.257,0.054 0.666,-0.152 0.128,-0.129 -0.488,0.015 -0.178,-0.121 -0.194,-0.271 -0.119,-0.246 -0.021,-0.121 -0.067,-0.177 0.074,-0.095 0.334,-0.142 0.293,-0.399 -0.123,-0.115 -0.14,-0.055 -0.152,0.041 -0.144,-0.137 -0.019,-0.19 0.115,-0.154 0.012,-0.212 -0.377,-0.523 -0.105,-0.114 0.082,-0.171 0.288,-0.287 0.274,-0.356 -0.033,-0.117 -0.203,-0.048 -0.962,0.153 -0.374,0.132 -0.667,0.061 -0.048,-0.194 0.015,-0.174 0.15,-0.318 -0.014,-0.786 0.089,-0.427 0.371,-0.128 0.455,-0.629 0.737,-0.744 0.77,0.014 0.308,-0.206 0.457,-0.012 0.083,0.149 0.052,0.143 0.401,0.206 0.708,-0.033 0.172,-0.081 0.167,-0.113 -0.328,-0.366 0.104,-0.104 0.297,-0.012 0.322,0.086 0.015,0.084 -0.085,0.115 -0.1,0.201 0.095,0.039 0.916,-0.122 0.958,0.098 0.305,-0.053 0.753,0.004 0.135,-0.126 -0.228,-0.159 -0.223,-0.055 -0.15,-0.077 -0.15,-0.113 0.478,-0.355 0.27,-0.068 1.273,-0.219 0.947,-0.109 0.012,-0.082 -0.137,0 -1.223,-0.182 -0.295,-0.14 -0.409,-0.335 -0.089,-0.095 -0.103,-0.164 0.062,-0.349 0.076,-0.281 0.151,-0.163 0.489,-0.025 1.676,0.286 1.194,-0.171 1.305,0.416 1.249,-0.084 0.257,-0.187 0.313,-0.603 1.764,-1.004 0.617,-0.525 0.662,-0.288 1.135,-0.32 0.949,-0.424 0.271,-0.049 2.278,0.203 1.565,0.026 0.718,-0.401 0.417,0.135 -0.039,0.143 -0.076,0.123 0.023,0.247 0.244,0.363 0.249,0.247 0.73,0.354 1.015,-0.298 0.164,0.033 0.207,0.083 0.358,0.957 0.278,0.337 0.356,0.229 0.293,0.045 0.217,-0.239 0.168,-0.096 0.367,-0.041 0.601,0.328 0.208,0.338 1.023,0.261 0.939,0.131 0.405,0.286 1.322,0.286 0.494,-0.044 0.828,-0.3 1.612,-0.329 1.071,0.459 0.29,0.06 0.25,-0.04 0.36,0.126 0.384,-0.068 1.185,-0.542 0.371,-0.308 0.393,-0.079 0.348,-0.185 0.928,-0.605 0.261,-0.357 z m -43.613,5.103 -0.645,0.113 -0.2,-0.111 0.202,-0.221 0.376,-0.137 0.122,-0.016 0.165,0.22 -0.02,0.152 z",
                        title: "Turkey",
                        id: "TR",
                    },
                    {
                        d:
                            "m 304.38375,431.5574 -0.153,0.028 0.018,-0.113 0.268,-0.195 0.41,-0.132 0.104,-0.005 -0.059,0.175 -0.588,0.242 z m -0.718,2.963 -0.455,0.159 -1.186,0.038 -0.491,-0.058 -0.377,0.045 0.687,-0.347 0.081,-0.146 0.292,-0.027 0.083,-0.044 0.097,-0.767 -0.038,-0.183 -0.058,-0.101 -0.118,-0.073 -0.265,-0.099 -0.044,-0.053 0.167,-0.085 0.356,-0.047 0.266,-0.092 0.551,-0.019 0.268,-0.082 0.451,-0.023 -0.222,0.353 -0.104,0.131 0.041,0.317 -0.051,0.215 0.059,0.272 0.135,0.179 -0.087,0.175 -0.013,0.266 -0.025,0.096 z",
                        title: "Trinidad and Tobago",
                        id: "TT",
                    },
                    {
                        d:
                            "m 972.47375,479.9984 -0.016,10e-4 -0.025,-0.013 -0.009,-0.029 0.009,-0.028 0.068,0.046 -0.027,0.023 z m -2.761,0.472 -0.016,0.018 -0.021,-0.009 -0.01,-0.029 0.03,-0.041 0.017,0.061 z m 6.707,3.35 -0.017,0.025 -0.02,-0.009 0,-0.037 0.037,0.021 z m 1.461,3.038 -0.025,0.02 -0.03,-0.27 0.045,0.046 0.019,0.029 0.017,0.036 0.004,0.038 -0.002,0.042 -0.01,0.028 -0.018,0.031 z",
                        title: "Tuvalu",
                        id: "TV",
                    },
                    {
                        d:
                            "m 814.50575,398.1354 -0.174,0.354 -0.14,0.374 -0.056,0.353 0.003,0.363 -0.04,0.328 -0.068,0.324 -0.272,-0.093 -0.147,-0.232 -0.034,-0.381 -0.197,-0.46 -0.074,-0.132 -0.285,-0.258 -0.259,-0.128 -0.2,-0.191 0.026,0.016 -0.148,-0.257 -0.112,-0.273 -0.231,-0.778 -0.08,-0.188 -0.107,-0.172 -0.03,-0.17 0.036,-0.189 0.101,-0.283 0.061,-0.285 -0.049,-0.388 0.019,-0.384 0.075,-0.171 1.321,-2.352 0.358,-0.503 0.221,-0.247 0.185,-0.279 0.175,-0.353 0.215,-0.323 0.153,-0.1 0.759,-0.29 0.235,-0.277 0.189,-0.086 0.215,0.005 0.139,0.132 0.124,0.157 0.13,0.084 0.335,0.153 0.147,0.148 0.066,0.254 -0.204,0.242 -0.102,0.218 -0.019,0.24 0.036,0.325 0.005,0.326 -0.256,0.763 -0.273,0.475 -0.074,0.236 -0.083,0.586 -0.161,0.587 -0.137,0.743 -0.224,0.765 -0.127,0.319 -0.158,0.305 -0.378,0.576 -0.43,0.472 z m -7.301,-5.79 0.122,0.204 -0.052,0.126 -0.386,-0.067 -0.022,-0.123 0.146,0.022 0.192,-0.162 z",
                        title: "Taiwan",
                        id: "TW",
                    },
                    {
                        d:
                            "m 586.34475,485.2334 -0.152,0.037 -0.059,-0.036 -0.093,-0.118 0.162,-0.1 0.157,-0.194 0.365,-0.285 0.125,-0.188 0.045,-0.04 -0.026,0.222 -0.206,0.485 -0.176,0.032 -0.142,0.185 z m -0.603,-5.065 0.215,0.597 -0.027,0.112 -0.152,0.068 -0.079,0.006 -0.094,-0.096 -0.066,-0.201 -0.115,0.048 -0.196,-0.241 -0.194,-0.012 -0.172,-0.287 0.067,-0.25 -0.039,-0.427 0.209,-0.218 0.118,-0.368 0.136,0.251 0.031,0.392 0.183,0.46 0.153,0.142 0.022,0.024 z m 1.034,-3.553 0.017,0.141 -0.043,0.133 0.009,0.423 -0.017,0.281 -0.16,0.389 -0.131,0.139 -0.117,-0.041 -0.096,-0.064 -0.075,-0.107 0.152,-0.713 -0.078,-0.522 0.301,0.05 0.238,-0.109 z m -25.374,-10.908 0.059,0.008 0.294,0 0.499,0 0.499,0 0.499,0 0.499,0 0.499,0 0.499,0 0.499,0 0.499,0 0.499,0 0.499,0 0.499,0 0.499,0 0.499,0 0.499,0 0.499,0 0.499,0 0.307,0 0.214,0 0.202,0.105 0.225,0.125 0.599,0.332 0.598,0.332 0.598,0.332 0.598,0.332 0.598,0.332 0.599,0.332 0.598,0.332 0.599,0.332 0.598,0.332 0.598,0.332 0.598,0.332 0.598,0.332 0.599,0.332 0.598,0.332 0.598,0.332 0.598,0.332 0.286,0.159 0.043,0.069 0.049,0.303 0.031,0.189 -0.017,0.167 -0.159,0.283 -0.046,0.148 -10e-4,0.103 0.039,0.041 0.135,0.015 0.115,0.067 0.042,0.053 0.088,0.213 0.111,0.107 0.253,0.181 0.431,0.309 0.431,0.309 0.431,0.309 0.431,0.309 0.431,0.309 0.431,0.309 0.431,0.309 0.431,0.309 0.209,0.151 0.089,0.042 -0.056,0.235 -0.221,0.571 -0.013,0.238 -0.086,0.28 -0.083,0.185 -0.225,0.804 -0.188,0.301 -0.257,0.705 -0.041,0.54 0.142,0.378 0.052,0.354 0.302,0.348 0.241,0.124 0.163,0.159 0.289,0.363 0.166,0.364 0.519,0.179 0.207,0.409 -0.075,0.281 -0.241,0.233 -0.225,0.377 -0.181,0.496 -0.004,0.759 0.122,-0.115 0.275,0.186 0.035,0.559 -0.283,0.651 -0.087,0.305 -0.014,0.262 0.206,0.781 0.312,0.397 -0.029,0.122 -0.081,0.104 0.534,0.704 -0.044,0.613 0.2,0.478 0.087,0.414 0.132,0.318 0.025,0.219 -0.165,0.243 0.389,0.061 0.229,0.199 0.108,0.19 0.281,-0.008 0.152,0.13 0.22,0.108 0.485,0.32 0.131,0.161 0.047,0.093 0.031,0.061 -0.326,0.248 -0.508,0.386 -0.499,0.378 -0.481,0.26 -0.344,0.121 -0.368,0.067 -0.349,0.159 -0.33,0.25 -0.423,0.126 -0.515,0.001 -0.541,0.175 -0.537,0.331 -0.313,0.193 -0.496,-0.291 -0.389,-0.092 -0.447,0.01 -0.272,0.036 -0.098,0.063 -0.085,0.178 -0.072,0.292 -0.293,0.281 -0.514,0.269 -0.474,0.101 -0.434,-0.068 -0.293,-0.112 -0.153,-0.156 -0.225,-0.072 -0.298,0.013 -0.286,0.111 -0.273,0.21 -0.435,0.091 -0.598,-0.028 -0.321,-0.102 -0.044,-0.175 -0.262,-0.205 -0.479,-0.235 -0.354,-0.005 -0.227,0.226 -0.207,0.142 -0.187,0.058 -0.168,0.007 -0.149,-0.043 -0.093,-0.018 -0.661,-0.024 -0.626,0.009 -0.02,-0.098 -0.043,-0.229 -0.13,-0.199 -0.112,-0.119 -0.14,-0.031 -0.076,0.002 -0.061,-0.092 -0.072,-0.203 -0.106,-0.172 -0.141,-0.143 -0.085,-0.133 -0.029,-0.122 0.022,-0.134 0.131,-0.333 0.042,-0.229 -0.015,-0.234 -0.071,-0.24 -0.148,-0.285 0.017,-0.082 -0.05,-0.194 -0.005,-0.136 0.029,-0.17 -0.028,-0.223 -0.128,-0.476 0,-0.122 -0.135,-0.23 -0.416,-0.544 -0.02,-0.071 -0.652,-0.548 -0.261,-0.12 -0.094,0.103 -0.035,0.095 0.027,0.176 -0.016,0.087 -0.027,0.04 -0.155,-0.006 -0.097,-0.02 -0.247,-0.147 -0.192,-0.036 -0.478,0.026 -0.167,0.035 -0.131,-0.033 -0.253,-0.251 -0.296,-0.053 -0.266,-0.013 -0.439,-0.285 -0.103,0.013 -0.049,0.022 -0.159,-0.075 -0.299,-0.166 -0.416,-0.146 -0.34,-0.163 -0.152,-0.159 -0.319,-0.061 -0.276,-0.026 -0.256,-0.148 -0.265,-0.017 -0.26,-0.038 -0.058,-0.097 -0.009,-0.218 -0.091,-0.057 -0.191,-0.056 -0.206,0.003 -0.125,0.031 -0.074,-0.016 -0.171,-0.128 -0.159,-0.163 -0.06,-0.26 -0.24,-0.167 -0.277,-0.132 -0.77,0.014 -0.121,-0.04 -0.183,-0.132 -0.214,-0.218 -0.172,-0.249 -0.151,-0.337 -0.072,-0.204 -0.085,-0.251 -0.188,-0.376 -0.266,-0.532 -0.206,-0.436 -0.221,-0.468 -0.09,-0.343 -0.172,-0.379 -0.282,-0.466 -0.143,-0.182 -0.156,-0.163 -0.405,-0.314 -0.459,-0.312 -0.249,-0.21 -0.334,-0.625 -0.14,-0.226 -0.097,-0.397 -0.073,-0.412 0.03,-0.167 0.296,-0.531 0.03,-0.149 -0.036,-0.201 -0.146,-0.423 -0.109,-0.276 -0.076,-0.236 -0.158,-0.393 -0.217,-0.541 -0.055,-0.236 0.007,-0.177 0.117,-0.467 0.103,-0.481 -0.003,-0.132 0.883,0.018 0.145,-0.105 0.499,-0.31 0.561,-0.621 0.112,-0.258 0.229,-0.398 0.224,-0.197 0.086,-0.137 0.059,-0.215 0.07,-0.182 0.294,-0.269 0.286,-0.207 -0.021,-0.083 -0.038,-0.062 0.042,-0.053 0.156,-0.106 0.304,-0.097 0.06,-0.207 -0.001,-0.235 -0.049,-0.131 0.009,-0.151 -0.047,-0.084 -0.199,-0.021 -0.295,-0.117 -0.25,-0.049 -0.167,-0.068 -0.062,-0.052 -0.027,-0.141 0.049,-0.154 0.025,-0.044 0.064,-0.165 -0.109,-0.099 -0.028,-0.048 0.05,-0.079 0.257,-0.522 0.056,-0.073 0.112,-0.009 0.177,-0.064 0.164,-0.029 0.134,0.022 0.099,-0.025 0.087,-0.067 0.074,-0.204 0.061,-0.34 -0.034,-0.277 -0.128,-0.214 -0.035,-0.326 0.059,-0.438 -0.042,-0.364 -0.142,-0.291 -0.145,-0.173 -0.221,-0.082 -0.348,-0.444 -0.106,-0.215 0.019,-0.134 0.092,-0.043 0.028,-0.013 0.222,0.02 0.208,-0.051 0.194,-0.122 0.188,-0.035 0.038,0.006 z",
                        title: "Tanzania",
                        id: "TZ",
                    },
                    {
                        d:
                            "m 582.14375,313.5284 -0.102,0.046 -0.981,-0.064 -0.801,0.087 -0.571,0.647 -0.34,-0.002 -0.479,0.168 -0.325,0.209 -0.385,0.452 -0.298,-0.203 -0.365,0.006 -0.356,0.123 -0.428,0.302 -0.238,0.053 -0.476,-0.086 -0.555,0.173 -1.198,0.987 -0.403,0.719 -0.147,0.14 -0.202,0.175 -0.216,0.088 -0.114,-0.008 0.571,-0.51 0.175,-0.191 0.03,-0.141 0.003,-0.229 -0.173,-0.284 -0.467,0.703 -0.265,0.102 -0.337,0.211 -0.017,0.469 0.039,0.348 0.138,0.437 0.326,0.713 0.666,1.015 0.319,0.372 0.234,0.148 0.282,0.021 0.542,-0.313 0.231,-0.049 0.504,0.119 0.18,-0.208 0.262,-0.116 0.336,-0.015 0.384,0.094 0.416,0.158 -0.171,0.357 -0.178,0.284 -0.063,0.314 -0.099,0.349 -0.459,0.156 -0.491,-0.019 -0.518,0.101 -0.187,-0.135 -0.124,-0.124 -0.23,-0.124 -0.303,-0.068 -0.272,0.083 -0.322,0.475 -0.57,0.324 -0.188,0.37 -0.561,-0.083 -0.48,0.065 -0.693,0.337 -0.528,0.72 -0.582,0.449 -0.461,0.142 -0.433,-0.044 -0.28,-0.134 -0.576,-0.472 0.034,-0.169 0.08,-0.085 0.109,-0.244 0.23,-0.896 -0.031,-0.292 -0.129,-0.459 -0.457,-0.358 -0.367,0.068 -0.209,-0.095 -0.753,-0.61 -0.41,-0.043 -0.453,0.123 -0.167,-0.089 -0.123,-0.213 0.898,-0.755 0.882,-0.625 0.387,-0.064 0.522,-0.292 0.558,-0.438 -0.079,-0.345 -0.12,-0.256 -0.267,0.07 -0.194,0.085 -0.467,-0.274 -0.171,-0.202 -0.731,0.21 -0.407,-0.031 -0.898,0.193 -0.413,-0.188 -0.825,-0.528 -0.31,-0.106 -0.264,0.023 -0.144,-0.174 0.176,-0.087 0.205,-0.01 0.213,-0.064 0.06,-0.092 -0.013,-0.174 -0.429,-0.132 -0.399,-0.038 -0.253,-0.156 -0.193,-0.179 0.452,-0.003 0.455,0.136 0.711,0.05 0.646,0.14 0.161,-0.174 0.375,-0.302 0.071,-0.096 -0.628,0.207 -0.637,-0.132 -0.232,-0.184 -0.197,-0.271 -0.083,-0.309 0.054,-0.288 -0.069,-0.521 -0.21,-0.465 -0.074,-0.255 -0.222,-0.229 0.218,0.518 0.081,0.344 0.131,0.316 -0.031,0.836 -0.081,0.293 -0.262,0.074 -0.344,-0.044 -0.35,-0.091 0.087,-0.459 -0.187,0.159 -0.263,0.447 -0.232,0.066 -0.515,-0.049 -0.956,0.295 -0.066,0.321 -0.144,0.433 -0.139,0.252 -0.043,0.152 -0.407,0.651 -0.052,0.062 -0.769,0.899 -0.098,0.067 -0.498,0.209 -0.295,0.183 -0.226,0.082 -0.382,-0.091 -0.159,0.129 -0.075,0.16 -10e-4,0.331 0.194,0.237 0.159,0.787 -0.059,0.332 -0.151,-0.215 -0.237,-0.227 -0.46,-0.194 -0.505,0.067 -0.551,0.328 -0.374,0.122 -0.196,-0.084 -0.12,0.005 -0.042,0.094 0.009,0.077 0.06,0.06 -0.008,0.043 -0.078,0.027 -0.868,-0.231 -0.375,-0.219 -0.295,-0.411 0.147,-0.133 0.128,-0.059 0.452,-0.034 0.078,-0.042 0.008,-0.095 0.034,-0.124 -0.012,-0.181 -0.05,-0.192 0.198,-0.281 0.295,-0.232 0.173,-0.233 0.026,-0.342 0.311,-0.167 0.275,-0.287 0.068,-0.313 0.097,-0.197 -0.176,-0.453 -0.037,-0.299 -0.008,-0.251 0.086,-0.139 0.257,-0.157 0.27,-0.122 0.112,0.012 0.041,0.077 0.01,0.51 0.054,0.01 0.086,-0.063 0.141,-0.3 0.097,0.087 0.15,0.033 0.112,-0.078 0.073,0.009 0.09,0.077 0.18,0.109 0.168,0.036 0.139,-0.072 0.119,-0.13 0.127,0.044 0.241,0.354 0.112,-0.039 0.555,-0.071 0.089,-0.096 0.066,-0.087 -0.58,-0.47 0.029,-0.351 0.022,-0.403 -0.069,-0.24 -0.113,-0.19 -0.443,-0.221 -0.343,-0.229 -0.072,-0.104 -0.009,-0.134 -0.015,-0.208 -0.136,-0.179 -0.011,-0.152 0.086,-0.237 0.021,-0.252 -0.029,-0.1 -0.08,-0.082 -0.154,-0.008 -0.203,-0.146 -0.139,-0.197 -0.374,-0.284 -0.114,-0.046 -0.07,-0.141 -0.034,-0.168 0.079,-0.209 0.099,-0.323 0.069,-0.303 10e-4,-0.181 -0.045,-0.448 -0.195,-0.343 -0.091,-0.045 -0.157,0.096 -0.179,0.081 -0.141,-0.076 -0.161,-0.186 -0.258,-0.519 -0.483,-0.104 -0.2,-0.025 -0.189,0.25 -0.059,-0.076 -0.053,-0.16 -0.1,-0.063 -0.132,0.074 -0.038,-0.071 0.057,-0.217 -0.157,-0.107 -0.371,0.002 -0.198,-0.08 -0.023,-0.163 -0.117,-0.107 -0.21,-0.052 -0.205,-0.133 -0.198,-0.215 -0.297,-0.14 -0.395,-0.065 -0.032,-0.023 -0.037,-0.031 -0.255,0.146 -0.153,0.116 -0.188,-0.072 -0.304,0.258 -0.618,0.013 -0.303,-0.016 -0.15,-0.064 -0.58,0.392 -0.061,0.144 -0.13,0.048 -0.365,0.078 -0.384,0.11 -0.081,0.379 -0.114,0.205 -0.206,0.3 -0.713,0.104 -0.616,0.146 -0.631,0.091 -0.827,0.366 -0.269,0.322 -0.266,0.09 -0.241,0.027 -0.156,-0.18 -0.525,-0.482 -0.202,-0.228 -0.266,-0.067 -0.289,0.038 -0.278,0.112 -0.292,0.021 -0.331,-0.162 -0.035,0.016 -0.127,0.022 -0.822,-0.196 -0.076,-0.033 -0.036,-0.008 -0.113,-0.015 -0.619,0.024 -0.577,-0.396 -0.177,-0.012 -0.137,0.16 -0.101,0.178 -0.398,0.177 -0.102,0.071 -0.058,-0.055 -0.027,-0.153 0.03,-0.136 -0.059,-0.128 -0.151,-0.146 -0.037,-0.061 -0.19,0.011 -0.052,0.014 -0.019,-0.003 -0.264,-0.124 -0.174,-0.299 -0.271,-0.159 -0.207,-0.054 -0.094,-0.129 -0.061,-0.171 -0.064,-0.129 -0.007,-0.013 -0.044,-0.196 -0.063,-0.02 -0.011,-0.005 -0.267,0.034 0.031,-0.689 0.427,-0.497 0.105,-0.251 0.16,-0.545 0.12,-0.256 0.144,-0.212 0.115,-0.205 0.041,-0.176 0.116,-0.02 0.34,0.159 0.305,0.082 0.084,-0.078 0.035,-0.102 -0.014,-0.079 -0.244,-0.235 -0.153,-0.15 -0.01,-0.092 0.055,-0.207 0.03,-0.232 -0.035,-0.252 -0.167,-0.559 -0.031,-0.238 0.159,-0.29 0.518,-0.692 0.173,-0.261 0.236,-0.315 0.641,-0.756 0.404,-0.441 0.274,-0.245 0.401,-0.425 0.176,-0.221 0.732,-0.144 0.091,-0.207 0.134,-0.226 0.104,-0.097 0.014,-0.381 -0.136,-0.467 -0.109,-0.165 -0.081,-0.113 0.053,-0.105 0.081,-0.03 0.1,-0.015 0.124,-0.113 -0.028,-0.123 -0.309,-0.3 -0.134,-0.231 -0.209,-0.596 -0.424,-0.62 -0.134,-0.201 -0.019,-0.19 0.062,-0.19 -0.059,-0.243 -0.15,-0.31 0.024,-0.034 -0.015,-0.383 0.107,-0.083 0.169,-0.056 0.238,0.019 0.204,0.059 0.244,0.175 0.076,-0.028 0.417,-0.33 0.43,-0.498 0.123,-0.289 0.107,-0.132 0.374,-0.07 0.326,-0.029 0.207,0.005 0.509,-0.049 0.301,-0.055 0.261,-0.088 0.563,-0.033 0.878,0.059 0.577,0.004 0.392,0.047 0.959,0.265 0.357,0.048 0.166,0.141 0.319,0.052 0.58,0.141 0.503,0.076 0.34,-0.031 0.19,0.04 0.36,0.625 0.074,0.073 0.144,0.015 0.294,-0.054 0.418,0.021 0.248,0.131 -0.036,0.371 0.065,0.054 0.116,-0.021 0.133,-0.209 0.112,-0.217 0.083,-0.068 0.427,0.147 0.195,-0.024 0.18,-0.165 0.11,-0.028 0.303,0.117 0.373,0.082 0.302,0.005 0.188,0.089 0.137,0.387 0.119,0.08 0.115,0.024 0.174,-0.346 0.158,-0.134 0.219,-0.099 0.141,-0.043 0.1,-0.123 0.134,-0.119 0.116,-0.01 0.094,0.046 0.108,0.165 0.158,0.376 0.192,0.377 0.134,0.137 0.346,-0.116 0.234,-0.118 0.429,-0.022 0.569,-0.083 0.435,-0.108 0.272,0.019 0.165,0.12 0.251,0.231 0.068,0.332 0.326,0.229 0.267,0.042 0.091,-0.238 0.156,-0.166 -0.059,-0.229 -0.026,-0.292 -0.117,-0.271 -0.078,-0.292 0.143,-0.418 0.156,-0.366 0.078,-0.199 0.247,-0.368 0.253,-0.263 0.379,-0.423 0.277,-0.14 0.25,0.064 0.139,0.058 0.359,-0.251 0.639,-0.013 0.532,0.032 0.054,0.008 0.262,0.13 0.275,0.11 0.19,0.007 0.226,-0.025 0.266,-0.147 0.185,-0.142 0.225,-0.722 0.08,-0.104 0.124,-0.057 0.203,-0.006 0.386,0.135 0.452,0.121 0.262,-0.017 0.698,-0.385 0.389,-0.06 0.462,0.09 0.454,0.005 0.342,-0.056 0.235,0.133 0.29,0.294 0.262,0.436 0.274,0.803 0.799,0.903 0.013,0.176 -0.065,0.113 -0.393,0.109 -0.332,0.059 -0.016,0.154 0.088,0.167 0.152,0.244 0.023,0.314 -0.008,0.288 0.065,0.254 0.127,0.104 0.016,0.127 -0.146,0.156 -0.041,0.096 0.057,0.052 0.721,0.03 0.353,0.151 0.268,0.138 0.135,0.013 0.304,-0.088 0.342,-0.056 0.207,-0.008 0.08,0.102 0.064,0.267 0.12,0.267 0.112,0.076 0.2,-0.013 0.12,0.013 0.064,0.101 -0.072,0.152 0.016,0.165 0.088,0.202 0.104,0.467 0.096,0.139 0.064,0.176 0,0.202 -0.08,0.176 -0.056,0.138 0.056,0.314 0.216,0.351 0.16,0.087 0.128,0.313 0.232,0.1 0.344,-0.263 0.264,-0.138 0.33,0.077 0.305,0.049 0.205,0.179 0.151,0.246 0.176,0.137 0.176,-0.072 0.367,0.072 0.168,0.199 0.168,0.112 0.216,-0.162 0.176,-0.2 0.644,-0.209 0.4,-0.052 0.112,-0.041 0.235,-0.15 0.248,-0.1 0.223,0.027 0.22,0.311 0.228,0.214 0.064,0.337 0.278,0.462 0.691,0.631 0.271,0.192 0.184,-0.034 0.096,-0.05 0.045,-0.066 0.042,-0.309 0.087,-0.114 0.14,-0.003 0.541,0.384 0.283,0.042 0.269,0.007 0.362,0.298 0.397,0.259 0.307,0.027 0.245,-0.102 0.168,-0.062 0.104,0.099 0.096,0.223 0.16,0.173 0.184,0.049 0.265,0.011 0.46,0.334 0.432,0.34 0.27,0.019 0.229,-0.1 0.202,-0.026 0.141,0.086 0.04,0.147 -0.104,0.197 0,0.282 0.192,0.27 0.006,0.265 -0.055,0.239 -0.109,0.22 -0.263,0.302 -0.243,0.281 -0.365,0.117 -0.205,0.123 0.054,0.206 0.134,0.192 0.31,0.155 0.352,0.113 0.041,0.125 -0.054,0.063 -0.226,0.058 -0.312,-0.059 -0.104,0.109 -0.144,0.181 -0.096,0.326 -0.072,0.302 0.339,0.082 0.197,0.123 0.062,0.247 0.07,0.275 0.021,0.247 -0.112,0.12 -0.007,0.123 0.053,0.061 0.146,0.027 0.111,0.055 0.009,0.13 -0.213,0.292 -0.199,0.558 -0.107,0.296 0.008,0.321 -0.12,0.178 -0.221,0.023 -0.75,0.031 -0.653,-0.016 -0.282,-0.046 -0.442,-0.028 -0.219,0.076 -0.29,0.512 -0.22,0.2 -0.363,0.181 -0.399,0.052 -0.229,0.21 -0.081,0.33 -0.006,0.292 -0.037,0.146 -0.086,0.128 -0.031,0.091 0.019,0.1 0.093,0.036 0.111,0.046 0,0.072 -0.043,0.091 -0.124,0.1 -0.056,0.154 0.013,0.164 0.023,0.181 z m -17.406,3.617 0.387,0.199 -0.395,-0.053 -0.867,-0.187 -0.383,-0.177 -0.099,-0.198 -0.056,-0.27 0.214,0.283 0.15,0.124 1.049,0.279 z",
                        title: "Ukraine",
                        id: "UA",
                    },
                    {
                        d:
                            "m 570.04475,465.7154 -0.307,0 -0.499,0 -0.499,0 -0.499,0 -0.499,0 -0.498,0 -0.499,0 -0.499,0 -0.499,0 -0.499,0 -0.499,0 -0.499,0 -0.499,0 -0.498,0 -0.499,0 -0.499,0 -0.499,0 -0.295,0 -0.059,-0.008 -0.041,-0.012 -0.188,0.035 -0.195,0.123 -0.207,0.05 -0.222,-0.019 -0.028,0.013 -0.112,-0.003 -0.162,-0.009 -0.146,0.032 -0.111,0.107 -0.114,0.184 -0.205,0.21 -0.16,0.187 -0.136,0.132 -0.311,0.219 -0.17,0.064 -0.084,-0.01 -0.052,-0.041 -0.098,-0.279 -0.06,-0.045 -0.605,0.144 -0.092,0.002 0.008,-0.087 -0.045,-0.656 -0.005,-0.402 0.079,-0.251 0.046,-0.29 0.005,-0.256 0.111,-0.435 -0.041,-0.261 0.143,-0.915 0.038,-0.149 0.056,-0.442 0.089,-0.136 0.08,-0.053 0.103,-0.271 0.199,-0.434 0.137,-0.223 -0.03,-0.487 0.023,-0.332 0.031,-0.073 0.293,-0.124 0.38,-0.306 0.161,-0.361 0.227,-0.23 0.44,-0.149 10e-4,-10e-4 1.304,-1.237 0.606,-0.667 0.264,-0.342 0.009,-0.123 0.051,-0.161 -0.106,-0.126 -0.126,-0.114 -0.043,-0.106 -0.108,-0.052 -0.156,0.002 -0.103,-0.077 -0.117,-0.15 -0.117,-0.094 -0.37,0.008 -0.285,-0.154 0.004,-0.209 0.111,-0.412 0.216,-0.472 0.012,-0.13 -0.031,-0.111 -0.052,-0.095 -0.097,-0.094 -0.092,-0.113 0.071,-0.34 0.136,-0.332 0.112,-0.167 0.109,-0.186 -0.031,-0.153 -0.159,-0.076 0.083,-0.149 0.171,-0.251 0.333,-0.254 0.293,-0.17 0.196,-0.001 0.38,0.136 0.344,0.159 0.188,0.008 0.23,-0.066 0.474,-0.283 0.115,0.09 0.138,0.171 0.151,0.284 0.299,0.129 0.143,0.09 0.103,0.026 0.057,-0.023 0.113,-0.223 0.137,-0.121 0.253,-0.153 0.559,-0.123 0.399,-0.037 0.169,-0.026 0.283,-0.072 0.447,-0.229 0.44,0.295 0.478,0.057 0.463,-0.002 0.141,-0.09 0.081,-0.068 0.486,-0.485 0.658,-0.657 0.438,0.925 0.151,0.055 -0.022,0.08 -0.037,0.078 0.287,0.223 0.353,0.117 0.126,0.114 0.011,0.123 -0.119,0.541 0.022,0.154 0.114,0.542 0.21,0.121 0.186,0.546 0.377,0.231 0.054,0.066 0.087,0.264 0.115,0.29 0.09,0.067 0.055,0.017 0.111,0.306 -0.064,0.173 0.087,0.524 0.141,0.468 0.038,0.559 10e-4,0.246 -0.005,0.151 -0.031,0.212 -0.067,0.123 -0.12,0.12 -0.134,0.188 -0.116,0.202 -0.073,0.099 0.057,0.302 -0.015,0.079 -0.03,0.038 -0.171,0.046 -0.218,0.081 -0.132,0.08 -0.188,0.154 -0.15,0.165 -0.199,0.487 -0.332,0.38 -0.056,0.125 -0.313,0.226 -0.138,0.279 -0.088,0.342 -0.121,0.245 -0.265,0.337 -0.06,0.532 0.008,1.061 -0.069,1.21 z",
                        title: "Uganda",
                        id: "UG",
                    },
                    { d: "m 25.797748,464.0314 -0.019,0 -0.043,-0.016 -0.005,-0.034 0.031,-0.016 0.046,0.001 0.023,0.028 -0.01,0.031 z", title: "Jarvis Island", id: "UM-DQ" },
                    { d: "m 990.00875,462.3014 -0.015,0.02 -0.017,-0.011 z", title: "Baker Island", id: "UM-FQ" },
                    { d: "m 989.51775,460.7044 -0.014,0.014 -0.02,-0.009 10e-4,-0.041 0.028,-0.001 z", title: "Howland Island", id: "UM-HQ" },
                    { d: "m 1009.4647,415.5964 -0.042,0.018 0,-0.016 z", title: "Johnston Atoll", id: "UM-JQ" },
                    { d: "m 987.39275,380.9274 -0.014,0.007 -0.007,-0.011 0.022,-0.085 0.04,-0.023 0.036,0.004 -0.01,0.052 z", title: "Midway Islands", id: "UM-MQ" },
                    { d: "m 942.62175,408.1084 -0.045,0.01 -0.082,-0.052 -0.014,-0.029 0.053,-0.052 0.064,0.021 0.024,0.017 0.009,0.041 z", title: "Wake Island", id: "UM-WQ" },
                    {
                        d:
                            "m 79.174748,187.7204 0,2.34 0,2.309 0,2.278 0,2.249 0,2.22 0,2.191 0,2.164 0,2.137 0,2.111 0,2.086 0,2.062 0,2.037 0,2.014 0,1.991 0,1.969 0,1.947 0,1.926 0,1.905 0,1.885 0,1.865 0,1.845 0,1.827 0,1.809 0,1.791 0,1.773 0,1.755 0,1.739 0,1.722 0,1.707 0,1.69 0,1.675 0,1.66 0.672,0.232 0.666,0.23 0.204,-0.459 0.718,0.352 0.627,0.307 0.4,-0.394 0.433,-0.427 0.584,-0.03 0.655,-0.034 0.437,-0.022 0,0.364 -0.162,0.602 -0.135,0.501 0.398,0.507 0.49,0.266 0.458,0.249 0.206,0.686 0.501,0.528 0.381,0.4 0.366,0.383 0.523,0.546 0.366,0.382 0.488,0.507 0.29,0.301 0.139,0.584 0.167,0.699 -0.103,0.412 0.231,0.066 0.452,-0.462 0.425,-0.287 0.525,-0.355 0.354,-0.24 0.658,-0.012 0.314,-0.699 10e-4,-0.985 0.333,0.017 0.196,-0.134 0.086,-0.291 -0.209,-0.398 0.63,-0.186 0.456,-0.135 0.651,-0.367 0.636,-0.359 0.303,0.278 0.3,0.268 0.589,0.645 0.04,0.155 -0.04,0.302 -0.058,0.301 0.358,0.842 0.103,0.094 0.294,0.116 0.351,0.278 0.155,0.24 0.508,0.382 0.086,0.158 0.048,0.256 0.083,0.22 0.095,0.157 0.092,0.224 0.22,0.264 0.419,0.294 0.291,0.204 0.407,0.285 0.412,0.581 0.358002,0.503 0.408,0.496 -0.06,0.395 0.413,0.608 0.435,0.771 0.334,0.681 0.237,0.38 0.285,0.548 0.348,0.669 0.396,0.759 0.303,0.485 0.395,0.677 0.195,0.403 -0.133,0.275 -0.164,0.34 0.508,0.161 0.352,0.111 -0.088,0.376 -0.116,0.496 0.398,0.195 0.27,0.133 -0.056,0.259 0.149,0.292 0.024,0.483 0.485,-0.031 0.214,-0.014 0.29,0.214 0.382,0.282 0.383,0.264 0.327,0.225 0.429,0.133 0.529,0.191 0.26,0.39 0.482,0.167 0.18,0.543 0.557,0.199 0.328,-0.133 0.118,0.221 0.093,0.254 0.025,0.32 -0.031,0.312 -0.139,0.26 -0.105,0.28 -0.07,0.301 -0.027,0.322 0.017,0.344 0.056,0.3 0.171,0.554 0.057,0.339 0.007,0.225 -0.379,0.79 -0.131,0.375 0.012,0.168 -0.276,0.39 -0.507,0.544 -0.23,0.313 -0.114,-0.104 -0.656,-0.081 -0.238,-0.695 -0.126,-0.541 -0.191,-0.472 0.005,-0.107 0.174,-0.316 0.656,-0.26 0.006,-0.104 -0.244,-0.069 -0.059,-0.113 -0.067,-0.515 0.018,-0.453 -0.017,-0.301 -0.109,-0.616 -0.164,-0.378 -0.423,-0.74 -0.036,-0.187 0.186,-0.235 0.116,-0.219 -0.715,0.381 -0.976,0.399 -0.418,0.278 -0.088,0.111 -0.03,0.094 0.076,0.262 -0.012,0.084 -0.085,0.155 -0.101,0.436 -0.212,0.461 -0.107,0.095 -0.381,-0.172 -0.102,-0.147 -0.191,-0.603 0.044,-0.161 0.139,-0.136 0.189,-0.293 0.238,-0.452 0.455,-1.153 0.297,-0.005 0.524,-0.229 -0.822,-0.115 -0.123,-0.06 -0.11,-0.158 -0.098,-0.256 -0.167,-0.285 -0.313,-0.1 -0.137,-0.105 -0.207,-0.347 -0.139,-0.156 -0.076,-0.193 -0.013,-0.23 -0.059,-0.116 -0.215,-0.042 -0.116,-0.079 -0.032,-0.596 -0.428,-0.153 -0.175,-0.132 -0.282,-0.374 -0.078,-0.182 -0.025,-0.152 0.069,-0.414 -0.029,-0.078 -0.25,0.042 -1.55,-0.643 0.082,-0.853 -0.287,-1.131 -0.308002,-0.46 0.061,-0.18 0.066,-0.095 0.138002,-0.002 0.595,0.335 0.56,0.396 0.072,-0.058 -0.895,-0.842 -0.224,-0.252 -0.056,-0.304 -0.003,-0.163 0.071,-0.085 0.839,0.076 0.05,-0.063 -0.851,-0.248 -0.174,10e-4 -0.186002,0.356 -0.088,0.084 -0.183,-0.017 -0.062,-0.055 -0.216,-0.431 -0.206,-0.301 -0.383,-0.417 -0.072,-0.298 -0.019,-0.439 0.051,-0.416 0.313,-0.954 0.127,-0.166 0.033,-0.104 -0.097,0.016 -0.092,0.091 -0.259,0.444 -0.267,0.726 -0.218,0.247 -0.137,-0.06 -0.207,-0.295 -0.432,-0.361 -0.5,-0.093 -0.316,-0.37 -0.467,-1.034 -0.063,-0.517 -0.06,-0.127 -0.253,-0.168 -0.156,-0.249 -0.24,-1.27 -0.317,-0.888 -0.079,-0.471 0.026,-0.468 -0.041,-0.052 -0.109,0.365 -0.028,0.19 -0.2,0.054 0.188,0.369 0.047,0.184 -0.094,-0.015 -0.192,0.046 0.326,0.627 0.146,0.968 0.216,0.714 0.14,0.577 0.063,0.437 0.092,0.417 0.252,0.917 0.034,0.182 -0.03,0.148 -0.083,0.176 -0.144,0.066 -0.452,-0.12 -0.17,-0.226 -0.244,-0.416 -0.342,-0.192 -0.847,0.095 -0.068,-0.032 0.003,-0.34 0.097,-0.607 -0.078,-0.246 -0.438,-0.897 0.007,-0.176 0.608,-0.414 -0.295,-0.031 -0.238,0.162 -0.092,-0.104 -0.144,-0.579 -0.093,-0.216 -0.046,-0.046 -0.026,0.551 0.101,0.289 0.015,0.167 -0.016,0.233 -0.063,0.167 -0.111,0.101 -0.111,0.025 -0.205,-0.116 -0.228,-0.219 -0.199,-0.103 -0.074,-0.087 -0.094,-0.242 -0.154,-0.184 -0.743,-0.233 -0.443,-0.276 -0.037,0.073 0.138,0.294 0.013,0.174 -0.112,0.053 -0.2,0.279 0.058,0.038 0.211,-0.092 0.236,0.011 0.39,0.169 0.354,0.222 0.128,0.124 0.053,0.184 0.044,0.065 0.346,0.214 0.017,0.112 -0.223,0.334 0.46,-0.037 0.267,0.119 0.342,0.516 0.116,0.287 0.016,0.367 -0.071,0.106 -0.136,0.074 -0.934,0.12 -0.337,0.441 -0.07,0.006 -0.257,-0.12 -0.466,-0.352 -0.581,-0.335 -1.325,-0.997 -0.036,-0.047 -0.022,-0.193 -0.091,-0.099 -0.18,-0.084 -0.25,-0.254 -0.319,-0.424 -0.197,-0.332 -0.075,-0.239 -0.186,-0.274 -0.6,-0.573 -0.314,-0.22 -0.277,-0.125 -0.241,-0.027 -0.065,-0.077 0.111,-0.126 0.017,-0.074 -0.532,-0.119 -0.505,-0.27 -1.281,-0.761 -0.662,-0.478 -0.386,-0.229 -0.165,-0.129 -0.073,-0.105 0.093,-0.11 0.258,-0.114 0.175,-0.13 0.276,-0.487 0.021,-0.157 -0.148,-0.355 -0.066,-0.324 0.003,-0.18 0.039,-0.18 0.042,-0.117 0.117,-0.113 0.082,-0.057 0.102,0.039 0.325,0.446 0.046,0.162 -0.015,0.608 0.093,0.709 0.03,-0.052 0.03,-0.234 0.019,-0.448 0.037,-0.216 0.07,-0.21 0.118,-0.111 0.367,0.064 0.169,-0.038 -0.714,-0.322 -0.449,-0.605 -0.081,-0.063 -0.246,-0.027 -0.26,0.245 -0.669,0.797 -0.188,0.14 -0.841,0.44 -0.57,0.088 -0.642,-0.069 -0.547,-0.143 -1.372,-0.696 -0.214,-0.162 0.319,-0.432 0.013,-0.135 -0.111,-0.441 -0.092,-0.126 -0.13,-0.07 -0.037,0.05 -10e-4,0.131 0.035,0.243 -0.105,0.128 -0.233,0.138 -0.393,0.14 -1.218,-0.356 -1.248,-0.295 -1.114,-0.061 -1.573,0.235 -0.839,0.236 -0.489,0.023 -0.471,-0.042 -0.039,-0.165 0.215,-0.097 -0.012,-0.12 -0.272,-0.374 -0.413,-0.227 -0.554,-0.08 -0.317,-0.11 -0.08,-0.139 -0.196,-0.132 -0.312,-0.126 -0.137,-0.227 0.109,-0.704 0.106,-0.423 0.106,-0.291 0.268,-0.483 -0.093,0.036 -0.389,0.354 -0.339,0.365 -0.314,0.474 -0.187,0.217 -0.24,0.2 -0.375,-0.047 -0.509,-0.296 -0.436,-0.153 -0.363,-0.009 -0.144,-0.051 0.248,-0.265 0.143,-0.213 0.195,-0.342 0.043,-0.167 -1.331,-0.055 -0.049,-0.181 -0.002,-0.133 -0.042,-0.11 -0.193,-0.082 -0.27,0.063 -0.437,0.214 -0.189,-0.163 0.067,-0.091 0.143,-0.067 0.291,-0.311 -0.393,-0.161 -0.201,-0.185 -0.098,-0.152 0.007,-0.549 0.104,-0.353 0.882,-0.343 -0.279,-0.134 -0.557,0.046 -0.374,0.292 -0.444,0.42 -0.298,0.157 -0.152,-0.106 -0.201,-0.037 -0.25,0.033 -0.168,0.107 -0.086,0.182 -0.1,0.123 -0.113,0.063 -0.082,-0.021 -0.12,-0.186 -0.252,-0.116 -0.124,-0.142 -0.071,0.089 -0.086,0.268 -0.091,0.136 -0.426,0.139 -0.234,-0.026 -0.28,-0.336 -0.04,-0.117 0.095,-0.292 0.615,-1.16 -0.062,0.007 -0.199,0.183 -0.397,0.464 -0.177,0.138 -0.305,0.018 -0.142,-0.05 -0.172,0.038 -0.202,0.124 -0.131,0.136 -0.062,0.147 0.042,0.025 0.304,-0.168 0.173,-0.045 0.048,0.082 -0.237,0.521 -0.144,0.497 -0.137,0.125 -0.218,-0.021 -0.239,0.049 -0.003,0.139 0.445,0.395 0.161,0.056 0.206,0.141 0.032,0.14 -0.078,0.377 -0.058,0.148 -0.094,0.077 -0.363,-0.013 -0.118,0.039 -0.244,0.236 -0.122,0.195 0.044,0.017 0.211,-0.161 0.307,-0.086 0.403,-0.012 0.3,-0.085 0.197,-0.16 0.192,0.045 0.187,0.25 0.056,0.219 -0.076,0.188 -0.154,0.134 -0.233,0.08 -0.147,0.12 -0.062,0.16 -0.035,0.237 -0.008,0.313 0.059,0.563 -0.045,0.076 -0.088,0.042 -0.13,0.007 -0.117,0.132 -0.274,0.746 -0.097,0.081 -0.115,-0.08 -0.102,0.009 -0.089,0.097 -0.195,0.074 -0.301,0.051 -0.258,-0.019 -0.453,-0.161 -0.185,-0.114 -0.144,-0.187 -0.407,0.198 -0.107,-0.086 -0.253,-0.517 -0.055,0.031 -0.049,0.557 -0.077,0.195 -0.251,0.402 -0.137,0.69 -0.042,0.021 -0.047,-0.1 -0.155,-0.617 -0.082,-0.136 -0.227,0.356 -0.025,0.129 0.06,0.459 -0.053,0.069 -0.459,-0.247 -0.113,-0.012 -0.03,0.042 0.157,0.355 -0.018,0.128 -0.65,0.684 -0.169,-0.024 -0.106,-0.068 -0.117,0.011 -0.413,0.254 -0.114,-0.011 -0.156,-0.15 -0.072,0.006 -0.039,0.157 -0.005,0.306 -0.153,0.29 -0.492,0.468 -0.13,0.215 -0.099,0.294 -0.074,0.028 -0.289,-0.189 -0.334,-0.123 -0.046,0.061 0.102,0.179 -0.021,0.11 -0.145,0.041 -0.183,-0.016 -0.222,-0.073 -0.311,0.082 -0.399,0.237 -0.333,-0.007 -0.465,-0.39 -0.128,-0.029 -0.041,-0.11 0.091,-0.316 0.132,-0.24 0.097,-0.11 0.441,-0.308 0.505,-0.113 0.317,-0.186 0.386,-0.383 0.204,-0.288 0.401,-0.745 -0.03,-0.058 -0.09,-0.041 -0.882,0.707 -0.13,0.065 -0.175,-0.005 -0.705,-0.271 -0.149,-0.116 -0.102,-0.34 0.196,-0.776 0.137,-0.376 0.344,-0.582 0.45,-0.623 0.156,-0.405 0.234,-1.088 -0.014,-0.496 -0.105,-0.606 -0.004,-0.361 0.098,-0.114 1.033,-0.564 0.489,-0.424 0.949,-0.628 0.258,0.005 0.19,0.216 0.221,0.173 0.252,0.129 0.324,-0.013 0.396,-0.157 0.628,0.06 1.29,0.413 0.274,0.023 0.011,-0.052 -0.199,-0.289 -0.889,-0.168 -0.375,-0.168 -1.053,-0.741 -0.24,-0.287 0.097,-0.134 0.258,-0.111 0.088,-0.107 0.037,-0.187 0.148,-0.255 0.259,-0.326 0.396,-0.315 0.749,-0.47 -0.293,-0.02 -0.539,0.087 -0.196,0.089 -0.36,0.336 -0.14,0.236 -0.201,0.46 -0.086,0.087 -0.374,0.066 -1.019,0.046 -0.172,-0.235 -0.095,-0.038 -0.126,0.033 -0.936,0.6 -0.335,0.305 -0.239,0.348 -0.37,0.254 -0.5,0.161 -0.374,0.199 -0.394,0.397 -0.134,0.304 -0.008,0.143 0.096,0.449 -0.098,0.084 -0.227,0.035 -0.365,0.297 -0.771,0.88 -0.101,0.318 0.004,0.109 0.125,0.248 -0.087,0.161 -0.217,0.254 -0.483,0.401 -0.317,0.152 -0.206,0.008 -0.198,-0.057 -0.352,-0.258 -0.285,-0.016 -0.018,0.036 0.388,0.276 0.395,0.354 0.246,0.294 0.097,0.233 0.004,0.24 -0.089,0.246 -0.279,0.427 -0.273,0.127 -0.699,0.128 -0.225,0.102 -0.07,0.079 0.48,0.18 0.043,0.092 -0.066,0.356 -0.127,0.116 -0.4,0.212 -0.358,0.062 -0.055,-0.041 0.067,-0.279 -0.019,-0.069 -0.135,-0.057 -0.191,0.106 -0.477,0.411 -0.051,0.067 0.172,0.11 -0.036,0.091 -0.258,0.294 -0.107,0.196 -0.173,0.199 -0.77,0.608 0.059,0.148 -0.2,0.527 -0.112,0.465 0.136,0.195 0.646,0.228 0.313,0.055 0.369,0.159 0.668,0.428 0.223,0.279 0.033,0.131 -0.021,0.143 -0.08,0.193 -0.209,0.364 -0.505,0.54 -0.228,0.153 -0.345,0.12 -0.113,0.087 -0.443,0.509 -0.12,0.274 0.019,0.239 -0.085,0.167 -0.57,0.328 0.02,0.058 0.207,0.025 -0.076,0.289 -0.034,0.4 -0.099,0.067 -0.356,-0.003 -0.453,0.155 -0.032,0.044 -0.008,0.287 -1.184,0.21 -0.259,0.542 -0.135,0.166 -0.464,0.393 -0.284,0.158 -0.325,0.096 -0.17,0.133 -0.016,0.17 -0.092,0.147 -0.281,0.243 -0.138,0.305 -0.1,0.048 -0.523,0.073 -0.104,0.097 -0.051,0.411 -0.097,0.013 -0.186,-0.096 -0.242,0.074 -0.544,0.464 -0.119,0.167 0.013,0.089 0.084,0.088 0.129,0.275 -0.008,0.185 -0.209,0.515 -0.074,0.08 -0.254,0.127 -0.104,0.284 -0.234,-0.031 -0.189,0.054 -0.124,0.189 -0.134,0.109 -0.145,0.028 -0.183,0.15 -0.219,0.27 -0.204,0.172 -0.187,0.074 -0.182,0.019 -0.177,-0.038 -0.159,0.031 -0.141,0.1 -0.138,0.156 -0.11,0.442 -0.139,0.197 -0.088,0.034 -0.18,-0.029 -0.272,-0.093 -0.276,0.033 -0.446,0.271 -0.142,0.204 0.281,0.045 0.139,0.058 -0.003,0.057 -0.146,0.055 -0.25,-0.004 -0.15,0.047 -0.182,0.116 -0.458,0.125 -0.174,0.089 -0.345,0.508 -0.042,0.115 0.044,0.025 0.194,-0.053 0.228,0.084 0.118,0.107 0.076,0.132 0.072,0.254 0.044,0.038 -0.438,0.426 -0.124,0.181 -0.08,0.067 -0.053,-0.052 -0.054,-0.474 -0.033,-0.081 -0.104,-0.008 -0.1,0.15 -0.219,0.56 -0.239,0.282 -1.795,0.72 -0.258,0.166 -0.051,0.306 -0.074,0.265 -0.119,0.21 -0.139,0.133 -0.03,-0.095 0.014,-0.745 -0.037,-0.148 -0.181,-0.095 -0.08,0.013 -0.109,0.042 -0.18,0.162 -0.11,0.04 -0.137,-0.013 -0.234,0.159 -0.556,0.509 -0.363,0.126 -0.096,0.105 -0.155,0.278 -0.103,0.102 -0.152,0.009 -0.202,-0.083 -0.162,0.059 -0.123,0.202 -0.125,0.08 -0.353,-0.149 -0.156,0.102 -0.202,0.26 -0.211,0.171 -0.22,0.083 -0.572,0.086 -0.23,-0.055 -0.047,-0.075 0.011,-0.331 0.092,-0.239 0.085,-0.113 0.114,-0.1 0.167,-0.012 0.312,0.075 -0.036,-0.08 -0.113,-0.095 -0.287,-0.165 -0.285,-0.084 -0.163,0.054 -0.229,0.126 -0.156,0.146 -0.082,0.166 -0.103,0.54 -0.06,0.146 -0.67,0.947 -0.263,0.291 -0.26,-0.022 -0.126,0.11 -0.177,0.235 -0.164,0.113 -0.15,-0.01 -0.117,-0.045 -0.083,-0.079 0.014,-0.074 0.112,-0.069 -0.04,-0.188 -0.192,-0.31 -0.131,-0.168 -0.249,-0.02 -0.039,0.141 0.084,0.718 -0.013,0.162 -0.155,0.204 -0.408,0.228 -0.127,-0.022 -0.367,-0.449 -0.348,-0.089 -0.023,0.146 0.078,0.299 -0.087,0.278 -0.251,0.259 -0.191,0.125 -0.131,-0.008 -0.007,-0.181 0.117,-0.355 0.03,-0.296 -0.057,-0.238 0.007,-0.182 0.069,-0.127 0.461,-0.354 0.194,-0.053 0.104,0.087 0.129,0.015 0.156,-0.058 0.098,-0.113 0.041,-0.169 0.199,-0.216 0.357,-0.265 0.409,-0.489 0.46,-0.716 0.539,-0.619 0.619,-0.521 0.671,-0.415 1.352,-0.571 0.104,0.035 -0.124,0.186 0.084,0.116 0.133,0.015 0.495,-0.092 0.197,-0.12 0.058,0.116 -0.069,0.146 -0.297,0.148 0.008,0.123 0.433,0.575 0.136,0.087 0.113,-0.011 0.048,-0.074 -0.036,-0.415 0.146,-0.079 0.299,-0.02 0.195,0.054 0.091,0.127 0.171,0.105 0.251,0.084 0.156,-0.026 0.061,-0.135 -0.107,-0.161 -0.481,-0.354 -0.134,-0.148 -0.032,-0.207 0.068,-0.265 0.151,-0.394 0.234,-0.523 0.212,-0.366 0.429,-0.416 0.289,-0.206 0.733,-0.632 1.409,-0.646 0.348,-0.416 0.473,-0.46 0.203,-0.113 0,0.178 0.065,0.159 0.316,0.106 0.206,0.037 0.095,-0.032 0.026,-0.169 -0.042,-0.307 -0.011,-0.29 0.021,-0.273 0.046,-0.216 0.211,-0.385 0.314,-0.439 0.429,-0.511 0.271,-0.232 0.255,-0.124 0.247,-0.224 0.425,-0.531 0.136,-0.087 0.305,-0.105 0.112,0.046 0.065,0.134 0.08,0.083 0.309,0.075 0.206,-0.118 -0.034,-0.063 -0.167,-0.041 -0.107,-0.077 -0.101,-0.317 -0.205,-0.191 -0.046,-0.217 0.037,-0.338 0.176,-0.796 0.029,-0.822 0.157,-0.473 0.315,-0.171 0.699,-0.117 -0.409,-0.214 -0.152,-10e-4 -0.266,-0.101 -0.101,-0.518 0.002,-0.377 0.176,-0.438 0.651,-0.741 0.713,-0.515 -0.097,-0.042 -0.088,-0.153 0.329,-1.036 0.321,-0.929 -0.433,0.792 -0.501,0.604 -1.47,0.699 -1,0.584 -0.474,0.139 -0.313,-0.148 -0.244,-0.56 -0.14,-0.2 -0.179,-0.366 0.076,-0.478 0.142,-0.331 0.312,-0.054 0.352,0.16 0.305,0.014 -0.393,-0.327 -0.567,-0.286 -0.257,0.093 -0.197,0.463 -0.263,0.317 -0.231,-0.113 -0.137,-0.129 0.095,0.387 -0.175,0.588 -0.066,0.406 0.25,1.068 -0.046,0.425 -0.455,0.195 -0.371,-0.349 -0.773,-1.352 -0.27,-0.387 -0.606,-0.64 -0.2,0.091 -0.255,0.316 -0.247,0.087 -0.652,-0.466 -0.304,-0.356 -0.287,-0.433 -0.44,0.239 -0.384,0.284 -0.45,0.452 -0.301,-0.004 -0.818,0.387 -0.087,0.008 -0.115,0.208 -0.113,0.093 -0.093,0.4 -1.106,0.31 -1.093,-0.173 0.382,-0.22 0.427,-0.173 0.371,-0.417 -0.158,-0.559 -0.027,-0.285 0.004,-0.361 0.405,-0.508 -0.421,0.001 -0.271,0.182 -0.253,-0.382 -0.119,-0.754 0.29,-0.448 0.134,-0.346 0.114,-0.476 0.008,-0.41 -0.224,-0.696 -0.644,-1.483 -0.293,-1.114 -0.502,-0.596 0.375,-0.98 0.418,-0.897 0.54,-0.403 -0.043,-0.06 -0.298,0.003 -0.196,0.053 -0.173,0.293 -0.183,0.223 -0.571,1.141 -0.368,0.554 -0.239,0.158 0.385,0.214 0.059,0.18 0.074,0.409 -0.099,0.495 -0.099,0.273 -0.454,-0.022 -0.408,0.397 -0.958,0.431 -1.294,0.246 -0.636,-0.029 -0.662,-0.502 0.005,-0.292 0.027,-0.253 -0.951,-0.871 -0.538,-0.872 -0.387,-0.019 -0.336,-0.233 -0.397,-0.363 0.035,-0.293 0.063,-0.207 -0.244,-0.145 -0.312,0.014 -0.363,-0.1 0.948,-1.136 0.326,-0.765 0.266,-0.109 0.345,0.118 0.476,0.302 0.401,0.133 0.145,0.142 0.148,0.267 -0.156,0.447 -0.143,0.313 0.176,-0.084 0.499,-0.485 0.372,-0.427 0.178,0.044 0.116,0.075 0.207,0.44 0.256,0.447 0.565,-0.426 0.302,-0.532 -0.255,-0.233 -0.312,-0.139 -0.796,-0.181 0.194,-0.153 0.511,0.017 0.192,-0.146 -0.202,-0.203 -0.253,-0.182 -0.689,0.605 -1.254,-0.03 -0.876,-0.354 -0.875,0.062 -0.138,-0.07 -0.17,-0.189 0.493,-0.451 0.349,-0.25 0.019,-0.145 -0.203,-0.018 -0.381,0.12 -0.17,-0.208 0.028,-0.362 -0.063,0.033 -0.151,0.198 -0.213,-0.098 -0.185,-0.17 0.096,-0.174 0.188,-0.24 -0.083,-0.036 -0.168,0.051 -0.164,0.313 0.036,0.253 -0.004,0.363 -0.28,0.066 -0.24,-0.043 -0.173,-0.365 -0.1789996,-0.784 -0.484,-0.209 -0.119,-0.398 0.306,-0.513 -0.135,-0.265 -0.326,-0.086 -0.372,0.259 -0.165,-0.23 -0.03,-0.253 -0.013,-0.364 0.104,-0.039 0.086,0.072 0.747,-0.202 0.072,-0.099 -0.592,-0.309 -0.165,-0.325 0.245,-0.185 0.442,-0.016 0.6199996,-0.193 -0.2609996,-0.346 -0.055,-0.19 -0.052,-0.312 0.103,-0.531 0.7289996,-1.223 0.71,-1.026 0.221,-0.237 0.325,-0.128 0.303,0.099 0.316,0.221 0.06,-0.095 -0.107,-0.09 -0.135,-0.422 0.439,-0.166 0.257,-0.478 0.019,-0.139 -0.279,0.199 -0.291,0.327 -0.073,-0.329 -0.075,-0.758 0.128,-0.719 0.1,-0.324 0.243,-0.308 0.7,-0.124 0.124,0.062 0.025,-0.146 -0.421,-0.456 0.173,-0.357 0.152,-0.186 0.846,-0.29 0.462,0.09 0.58,0.338 0.337,0.42 -0.049,0.215 -0.083,0.125 -0.174,0.139 -0.065,0.108 0.031,0.086 0.249,-0.25 0.407,-0.304 0.228,0.132 0.18,0.24 0.199,-0.004 0.633,-0.206 0.321,-0.218 0.393,-0.569 0.522,-0.368 0.735,-1.168 0.216,-0.481 0.251,-0.074 0.227,0.042 0.158,0.395 0.231,0.115 1.315,-0.096 0.672,-0.181 0.467,-0.383 0.486,-0.647 0.281,-0.435 0.135,-0.568 -0.174,-0.738 -0.178,-0.615 -0.234,-1.414 -0.653,-0.94 -0.464,-0.282 -0.295,0.04 0.213,-0.603 0.622,0.065 0.405,-0.118 0.328,-0.291 0.107,-0.221 0.162,-0.452 -0.056,-0.483 -0.087,-0.263 -0.226,-0.29 -0.269,-0.425 -0.188,-0.142 -0.159,0.009 -0.784,0.853 -0.471,0.016 -0.352,-0.156 -0.306,0.484 -0.853,0.424 -0.456,0.427 -0.845,1.056 -0.211,0.476 -0.27,0.021 -0.195,-0.924 -0.919,-0.886 -0.278,0.302 0.153,0.278 0.208,0.198 0.343,0.086 -0.148,0.268 -0.112,0.356 -0.344,-0.334 -0.615,-0.486 -0.637,-0.251 -1.658,0.028 -1.088,0.499 -0.1,-0.104 -0.105,-0.041 -0.182,0.119 -0.078,0.203 -0.119,0.127 -0.222,0.045 -0.448,-0.075 -0.864,-0.31 -1.9549996,-0.456 -0.512,-0.281 -0.438,-0.671 0.009,-0.457 0.195,-0.194 -0.019,-0.657 -0.38,-0.175 -0.775,-0.95 -0.285,-0.406 0.062,-0.045 0.139,0.11 0.265,0.083 0.65,-0.132 0.223,-0.619 0.482,-0.177 0.444,0.087 -0.1,-0.168 -0.113,-0.132 -1.156,-0.317 -0.157,0.097 -2.073,-0.564 -1.637,-0.984 -0.134,-0.189 -0.149,-0.422 0.221,-0.418 0.222,-0.198 0.01,0.23 0.036,0.226 0.938,-0.525 0.491,-0.691 0.929,-0.122 0.216,-0.191 0.289,-0.373 0.412,-0.639 0.583,-0.337 0.397,-0.303 0.517,-0.18 0.441,0.299 0.136,0.041 0.8,0.061 0.2629996,-0.129 0.112,-0.096 0.084,-0.152 -0.7859996,-0.542 0.08,-0.302 0.1,-0.213 0.9169996,-0.635 0.705,-0.21 0.377,0.015 1.094,-0.824 0.599,-0.236 1.129,-0.157 0.928,-0.041 0.251,0.295 -0.499,-0.062 -0.219,0.054 0.156,0.101 0.176,0.215 -0.051,0.271 -0.306,0.801 0.025,0.639 -0.199,0.207 -0.193,0.291 0.95,0.913 1.47,0.058 0.8,-0.165 0.462,0.272 0.378,0.062 1.046,-0.14 0.788,0.194 0.329,-0.074 0.729,-1.365 0.285,-0.215 0.31,0.238 0.404,0.193 0.258,-0.14 0.21,0.353 -0.099,-0.736 -0.143,-0.277 -1.19,-0.509 -0.796,0.253 -0.249,-0.287 0.083,-0.57 -0.852,-1.412 -0.355,-0.288 -0.42,-0.014 -0.214,-0.494 -0.179,-0.636 0.362,-0.261 0.328,-0.118 0.303,0.206 0.343,0.836 0.319,0.123 -0.093,0.829 0.396,0.761 0.894,0.704 0.716,-0.259 0.506,0.008 0.302,0.148 0.74,0.63 0.376,0.079 1.175,-0.33 0.012,-0.62 -0.099,-0.45 -0.276,-0.283 -0.794,0.053 -0.618,-0.466 -0.526,0.128 -0.973,0.713 -0.487,-0.28 -0.306,-0.381 -0.494,-0.388 -0.062,-0.736 0.414,-0.848 0.306,-0.405 -0.274,-0.296 -0.689,-0.208 -1.196,0.213 -0.056,-0.291 0.006,-0.314 -0.487,0.615 -0.5,-0.129 -0.674,0.066 -1.488,-0.542 -0.53,-0.671 -0.222,-0.546 -0.401,-1.506 -0.512,-0.948 -3.539,-3.261 -1.6099996,-0.829 -0.775,-0.922 -0.486,-0.228 -0.464,-0.093 -0.595,-0.299 0.4,-0.368 0.275,-0.125 -0.286,0.385 0.217,0.097 0.346,-0.222 0.187,-0.266 0.274,-1.133 0.283,-1.728 -0.076,-0.685 1.9629996,0.138 1.307,-0.116 0.433,-0.156 1.648,-0.265 0.427,-0.192 0.792,-0.591 0.933,-1.049 0.8,-1.388 0.127,-0.375 0.051,0.096 0.072,-0.06 0.085,-0.53 0.105,-1.253 0.397,-1.191 1.689,-2.745 0.784,-1.1 0.261,-0.502 0.272,-0.367 0.192,0.349 0.091,0.104 0.053,0.164 -0.161,0.076 -0.262,0.356 -0.366,0.238 -0.088,0.122 0.215,-0.027 0.643,-0.259 0.363,-0.314 1.804,-0.583 0.978,-0.967 0.038,-0.216 1.451,-1.218 0.201,0.047 0.231,0.147 -0.402,0.804 0.283,0.21 -0.251,0.955 0.526,0.015 0.118,0.438 0.029,-0.377 -0.006,-0.542 0.042,-0.534 0.078,-0.37 0.37,0.167 0.833,-0.398 -1.009,-0.05 -0.605,-0.874 -0.336,-0.007 1.125,-1.29 1.028,-0.784 0.232,0.015 0.112,0.146 0.024,0.237 -0.222,0.154 -0.218,0.278 0.1,0.245 0.149,0.035 0.494,-0.201 0.221,-0.252 1.053,0.022 0.309,-0.18 0.074,-0.179 1.364,-0.036 0.25,-0.126 0.853,-0.696 0.789,-0.847 0.363,-0.464 0.623,-1.188 0.534,-0.777 0.878,-0.779 0.21,0.097 -0.285,0.155 -0.198,0.33 0.273,0.438 1.849,0.899 0.465,0.049 0.186,0.536 -0.155,0.515 -0.477,0.57 -0.96,0.582 0.294,0.219 0.192,0.516 0.284,0.063 0.461,-0.194 0.361,-0.317 0.747,-1.037 0.235,-0.581 0.176,-0.147 0.626,0.14 0.354,0.299 0.404,0.529 -0.148,0.51 -0.165,0.287 0.523,0.396 0.58,0.083 0.553,0.318 0.777,-0.651 0.609,-0.139 0.571,0.021 0.743,-0.356 1.257,0.485 0.32,-0.126 0.504,0.084 0.536,0.292 0.189,0.311 -0.574,0.657 -0.093,0.675 0.2,0.281 0.363,0.048 0.046,0.393 0.226,0.098 1.134,-0.029 -0.087,0.187 -0.055,0.225 -0.351,0.497 2.021,0.279 0.271,-0.275 0.418,-0.109 0.888,-0.38 0.334,0.166 0.394,0.388 0.364,0.081 0.34,-0.079 0.792,-0.554 0.915,-0.027 0.375,0.181 0.396,-0.079 1.192,0.634 0.439,0.074 0.587,0.821 0.303,0.024 0.343,-0.348 0.298,0.011 0.291,0.333 0.476,0.102 0.222,0.524 0.239,0.19 1.803,0.388 0.893,-0.177 1.301,0.046 0.627,0.248 0.658,-0.032 1.075,0.899 0.57,0.14 0.111,0.207 1.623,0.218 0.568,-0.467 0.99,-0.124 0.891,-0.394 0.505,0.004 0.588,0.098 0.226,-0.047 0.163,-0.172 1.433,0.678 0.802,0.772 0.351,0.568 1.678,0.809 0.485,0.451 0.332,0.496 0.195,0.053 0.137,-0.145 0.586,0.042 0.214,0.072 z m -70.4649996,25.606 -0.108,0.039 0.006,-0.106 0.32,-0.283 0.59,-0.351 -0.022,0.076 -0.315,0.272 -0.471,0.353 z m 51.0199996,34.074 -0.355,0.047 -0.163,-0.073 -0.023,-0.079 0.067,-0.291 -0.005,-0.123 0.179,-0.046 0.206,0.138 0.06,0.143 0.034,0.284 z m -11.479,2.65 -0.135,0.021 0.181,-0.28 0.126,-0.547 0.169,0.076 0.034,0.1 -0.279,0.561 -0.096,0.069 z m 12.243,-0.503 -10e-4,0.149 -0.088,0.144 0.084,0.263 -0.146,0.451 -0.056,0.286 -0.078,0.18 -0.078,0.069 -0.079,-0.041 -0.017,-0.099 0.046,-0.158 -0.185,0.005 -0.057,-0.394 0.103,-0.125 0.037,-0.168 0.012,-0.114 0.121,-0.503 0.043,-0.035 0.014,0.12 0.039,0.035 0.064,-0.049 0.096,-0.224 0.041,-0.026 0.085,0.234 z m 3.549,0.005 0.063,0.156 0.54,-0.038 0.155,0.028 0.062,0.072 -0.073,0.105 -0.208,0.139 -0.608,0.244 -0.494,0.32 -0.064,-0.03 -0.09,-0.35 -0.091,-0.142 -0.056,-0.198 0,-0.074 0.091,-0.137 0.181,-0.2 0.128,-0.072 0.464,0.177 z m 3.579,0.638 -0.09,0.138 -0.245,-0.049 -0.131,-0.088 0.438,-0.364 0.072,0.073 -0.044,0.29 z m -58.9839996,-0.263 0.258,0.281 0.137,0.016 0.432,-0.085 0.159,0.06 0.153,0.121 0.095,0.185 0.018,0.324 -0.07,0.289 0.021,0.407 -0.015,0.175 0.2289996,0.23 0.072,0.311 0.037,0.334 -0.4979996,0.111 -0.498,0.018 -0.43,0.226 -0.088,0.167 0.069,0.247 -0.118,0.063 -0.109,-0.054 -0.208,-0.229 -0.228,-0.109 -0.799,-0.169 -1.003,-0.667 -0.432,-0.138 -0.438,-0.49 -0.396,-0.625 0.258,-0.101 0.26,-0.051 1.166,0.093 0.146,-0.449 0.15,-0.112 0.37,-0.127 0.346,-0.25 0.155,0.006 0.158,0.096 0.328,-0.149 0.174,-0.032 0.139,0.077 z m 51.6389996,3.205 -0.31,0.081 -0.073,-0.165 0.163,-0.411 0.13,-0.233 0.097,-0.055 0.356,-0.465 0.395,-0.339 0.363,-0.497 0.368,-0.711 0.068,-0.266 0.171,-0.028 0.281,0.175 0.174,0.246 -0.081,0.195 -0.931,1.008 -0.078,0.131 -0.084,0.341 -0.077,0.119 -0.123,0.054 -0.089,0.148 -0.056,0.243 -0.115,0.127 -0.174,0.011 -0.12,0.067 -0.067,0.123 -0.188,0.101 z m -0.803,-1.41 -0.147,0.172 -0.555,-0.104 0.115,-0.339 0.424,-0.214 0.464,0.333 -0.301,0.152 z m 9.7,1.382 -0.135,0.032 0.202,-0.366 0.271,-0.405 0.255,-0.254 0.332,-0.106 -0.037,0.185 -0.433,0.342 -0.455,0.572 z m -45.895,6.792 -0.206,0.086 -0.218,-0.043 -0.172,-0.533 0.132,-0.017 0.276,-0.352 0.611,-0.285 0.15,-0.032 -0.573,1.176 z m 23.667,0.494 -0.083,0.034 -0.205,-0.164 -0.135,-0.174 0.089,-0.133 0.397,-0.28 0.19,-0.005 0.078,0.044 0.031,0.087 -0.015,0.129 -0.085,0.161 -0.262,0.301 z m 0.193,0.667 0.102,0.043 0.106,-0.318 0.075,-0.01 0.332,0.269 0.204,-0.06 0.131,0.331 0.118,0.03 0.109,-0.04 0.066,0.023 -0.023,0.349 -0.243,0.353 -0.113,0.089 -0.158,-0.091 -0.059,-0.034 -0.104,-0.156 -0.079,-0.197 -0.047,-0.003 -0.185,0.232 0.004,0.115 0.077,0.172 -0.011,0.107 -0.202,0.051 -0.198,-0.027 -0.242,0.15 -0.058,-0.093 -0.037,-0.263 -0.075,0.03 -0.114,0.322 -0.125,0.204 -0.227,0.169 -0.05,0.082 -0.166,0.011 -0.246,0.106 -0.152,-0.018 -0.906,-0.349 -0.213,-0.128 0.745,-0.803 0.392,-0.312 0.227,0.017 0.227,0.097 0.12,-0.016 0.009,-0.357 -0.211,-0.267 0.008,-0.111 0.467,-0.183 0.175,0.026 0.193,0.094 0.183,0.152 0.174,0.212 z m 49.778,1.057 0.713,0.121 0.522,-0.027 0.477,0.792 0.293,0.637 0.172,0.445 0.098,0.429 0.131,0.413 -0.012,0.058 -0.275,-0.278 -0.198,-0.565 -0.101,-0.221 -0.1,-0.1 -0.105,-0.209 -0.205,-0.542 -0.007,-0.153 -0.091,-0.142 -0.105,-0.059 -0.119,0.023 -0.041,0.055 0.018,0.375 0.094,0.416 0.515,0.906 0.344,0.514 0.068,0.17 0.045,0.468 -0.148,0.211 0.182,0.43 -0.007,0.084 -0.04,0.082 -0.49,0.19 -0.449,0.793 -0.492,0.463 -0.227,0.074 -0.109,-0.077 -0.103,-0.177 -0.061,-0.237 -0.018,-0.297 0.123,-0.188 0.243,-0.978 0.007,-0.322 -0.303,-0.448 -0.183,-0.367 -0.099,-0.513 -0.166,-1.364 -0.077,-0.438 -0.108,-0.366 -0.14,-0.293 -0.105,-0.323 -0.072,-0.353 0.027,-0.137 0.243,0.184 0.292,0.506 0.149,0.335 z m 1.031,-0.357 -0.02,0.132 -0.383,-0.013 -0.386,-0.194 -0.19,-0.255 0.038,-0.115 0.359,-0.107 0.34,0.242 0.242,0.31 z m -3.978,-0.082 0.401,0.518 0.003,0.119 -0.082,0.355 -0.218,0.1 0.062,0.141 0.162,0.106 0.116,-0.088 0.423,-0.497 0.13,-0.104 0.079,-0.011 0.516,0.15 0.451,0.237 0.133,0.189 0.075,0.331 -0.12,0.714 -0.37,0.124 -0.175,-0.013 -0.187,-0.104 -0.301,0.248 0.25,0.189 0.76,0.043 0.23,0.4 0.066,0.308 -0.164,0.564 -0.431,-0.156 -0.38,-0.327 -0.779,-0.464 -0.187,-0.021 -0.125,0.082 -0.034,0.281 0.008,0.608 -0.208,0.315 -0.614,-0.139 -0.241,-0.46 -0.225,-0.73 -0.847,-0.869 -0.229,-0.174 -0.305,-0.522 0.122,-0.415 0.036,-0.24 0.163,-0.064 0.238,-0.186 0.133,-0.403 0.214,0.326 0.286,0.313 0.004,-0.294 0.135,-0.235 0.281,0.009 0.132,-0.049 0.184,-0.22 0.266,-0.114 0.163,0.129 z m -48.181,2.224 0.02,0.289 0.114,-0.035 0.432,-0.297 0.225,-0.087 0.293,-0.014 0.232,0.136 0.047,0.104 -0.021,0.124 -0.186,0.251 0.008,0.163 0.2,0.3 0.491,0.163 0.06,0.09 -0.002,0.108 -0.338,0.495 -0.124,0.115 -0.088,0.028 -0.614,-0.089 -0.562,-0.162 -0.227,-0.028 -0.081,0.053 -0.159,0.152 0.114,0.045 0.492,0.036 0.174,0.221 0.076,0.163 0.038,0.179 -0.098,0.073 -0.21,0.054 -0.252,-0.001 -0.312,0.201 -0.172,0.23 -0.625,0.058 -0.476,0.306 -0.167,0.151 -0.059,0.18 -0.18,0.13 -0.405,0.131 0.242,0.117 0.038,0.099 0.004,0.137 -0.033,0.118 -0.32,0.525 -0.604,0.431 -0.153,-0.02 -0.066,-0.054 -0.054,-0.082 -0.002,-0.083 0.779,-0.866 -0.031,-0.042 -0.212,-0.029 -0.335,-0.239 -0.237,0.154 -0.054,-0.006 0.063,-0.205 0.154,-0.244 -0.027,-0.069 -0.085,-0.061 -0.195,-0.037 -0.306,-0.012 -0.227,0.058 -0.147,0.128 -0.012,0.054 0.313,-0.015 0.085,0.065 0.084,0.121 0.051,0.14 0.019,0.159 -0.066,0.213 -0.149,0.267 -0.219,-0.047 -0.449,-0.595 -0.198,-0.874 -0.384,-0.67 -0.017,-0.161 0.109,-0.415 0.387,-0.591 0.416,-0.162 0.296,-0.249 0.287,-0.075 0.177,0.006 0.243,0.107 0.098,0.227 -0.059,0.106 0.022,0.056 0.17,0.136 0.184,0.475 0.214,0.42 0.143,0.17 0.188,0.105 -0.194,-0.32 -0.115,-0.397 -0.058,-0.794 -0.056,-0.211 0.109,-0.056 0.307,0.031 -0.008,-0.119 -0.324,-0.269 -0.199,-0.223 -0.075,-0.176 0.004,-0.153 0.177,-0.226 0.1,-0.064 0.104,-0.028 0.206,0.048 0.092,0.071 0.264,0.508 0.124,0.158 0.103,0 0.095,-0.084 0.088,-0.168 0.091,-0.101 0.093,-0.033 0.294,0.075 0.098,-0.028 0.048,-0.127 -0.002,-0.228 0.073,-0.082 0.018,-0.168 -0.16,-0.248 0.184,-0.076 0.61,0.189 0.261,0.207 -0.135,0.385 z m -0.961,-0.137 -0.079,0.146 -0.074,-0.038 -0.157,-0.171 -0.32,-0.25 -0.146,-0.171 -0.009,-0.073 0.11,-0.081 0.376,0.202 0.16,0.184 0.139,0.252 z m 51.277,2.607 0.238,0.569 0.173,0.44 0.154,0.528 0.257,1.089 0.12,0.41 0.038,0.224 0.028,0.585 -0.039,0.126 -0.077,0.115 -0.015,0.167 0.071,0.444 0.004,0.673 -0.067,0.378 -0.079,0.057 -0.192,-0.124 -0.158,-0.205 -0.116,-0.213 -0.287,-0.675 -0.085,-0.315 -0.005,-0.227 0.044,-0.166 0.094,-0.103 0.163,-0.276 -0.023,-0.044 -0.124,0.062 -0.253,0.035 -0.223,-0.218 -0.174,-0.115 0.035,-0.394 -0.046,-0.111 -0.342,0.122 -0.128,-0.11 -0.028,-0.148 0.006,-0.221 0.065,-0.194 0.324,-0.491 -0.033,-0.091 -0.158,-0.02 -0.208,-0.168 -0.095,-0.552 -0.224,-0.315 -0.132,0.029 -0.3,0.89 -0.148,0.194 -0.422,0.125 0.086,-0.247 0.04,-0.221 -0.15,-0.671 -0.004,-0.259 0.1,-0.191 0.298,-0.08 0.158,-0.113 0.123,-0.185 0.031,-0.18 0.231,-0.478 0.108,-0.093 0.288,0.006 0.605,0.529 0.184,0.078 0.269,0.339 z m -50.622,1.173 -0.357,0.166 -0.063,-0.007 -0.22,0.336 -0.168,0.145 -0.222,-0.265 0.057,-0.412 0.194,-0.274 0.982,0.092 0.076,0.077 0.002,0.065 -0.072,0.054 -0.209,0.023 z m 55.122002,0.625 0.187,0.161 0.102,-0.169 0.189,0.008 0.352,0.15 0.209,0.225 0.118,0.257 0.01,0.153 -0.036,0.347 0.026,0.355 -0.015,0.184 -0.047,0.152 -0.079,0.12 -0.086,0.015 -0.273,-0.318 -0.313,-0.575 -0.238,-0.175 -0.01,0.06 0.065,0.165 0.195,0.31 0.035,0.186 0.137,0.227 0.061,0.171 0.035,0.225 -0.001,0.196 -0.038,0.168 -0.063,0.107 -0.089,0.047 -0.478,-0.047 -0.285,0.112 -0.333002,-0.063 -0.08,-0.102 -0.05,-0.166 -0.025,-0.404 -0.084,-0.58 0.02,-0.447 -0.215,-0.405 -0.184,-0.245 -0.265,-0.219 -0.174,-0.218 0.048,-0.174 0.271,-0.13 0.444,0.031 0.957002,0.305 z m -1.749002,0.813 0.182,0.354 0.264,-0.029 0.148,0.268 0.112,0.4 -0.082,0.256 -0.117,-0.057 -0.13,0.148 -0.08,0.491 0.037,0.491 -0.04,0.488 -0.151,0.496 -0.031,0.332 -0.059,0.099 -0.065,0.034 -0.084,-0.09 -0.122,-0.07 -0.154,0.279 -0.188,0.002 -0.156,-0.635 0.139,-1.062 0.312,-0.217 -0.186,-0.29 -0.392,-0.338 0.033,-0.188 -0.298,-0.545 -0.017,-0.13 0.047,-0.456 0.278,-0.408 0.368,-0.072 0.257,0.175 0.144,0.149 0.031,0.125 z m 3.487002,1.628 -0.03,0.074 -0.357,-0.007 -0.129,-0.061 -0.048,-0.217 0.033,-0.201 0.083,-0.156 0.101,-0.301 0.079,-0.502 0.523,0.562 0.161,0.25 0.086,0.305 -0.186,0.114 -0.225,0.055 -0.091,0.085 z m -60.232002,0.055 -0.138,0.011 -0.208,-0.134 0.028,-0.161 0.296,-0.194 0.299,0.03 0.022,0.108 -0.014,0.122 -0.024,0.07 -0.095,0.073 -0.166,0.075 z m -1.331,0.401 -0.192,0.12 -0.063,-0.042 -0.009,-0.099 0.045,-0.158 0.089,-0.158 0.296,-0.3 0.298,-0.199 0.152,0.012 0.052,0.127 -0.186,0.263 -0.482,0.434 z m 63.344002,1.646 -0.058,0.833 -0.111,-0.047 -0.106,-10e-4 -0.216,0.118 -0.228,-0.052 -0.107,-0.092 -0.039,-0.107 0.041,-0.248 -0.126,-0.138 -0.426,-0.05 -0.16,-0.059 -0.088,-0.261 -0.021,-0.342 0.067,-0.128 0.215,-0.09 0.167,-0.417 0.093,-0.056 0.354,-0.828 0.178,0.058 0.311,0.504 0.39,0.726 -0.13,0.677 z m -1.873,-0.693 -0.144,0.016 -0.17,-0.077 -0.403,-0.411 -0.007,-0.121 0.058,-0.138 0.229,-0.252 0.094,-0.061 0.55,0.027 0.176,0.067 0.04,0.118 -0.009,0.12 -0.058,0.121 -0.013,0.126 0.031,0.132 -0.064,0.131 -0.31,0.202 z m -2.207,-0.464 0.532,0.108 0.487,-0.011 0.167,0.208 0.11,0.219 0.064,0.206 0.018,0.193 -0.013,0.136 -0.059,0.146 0.013,0.049 0.952,0.477 0.449,0.5 0.179,0.262 0.104,0.221 0.188,0.553 0.396,0.64 0.208,0.194 0.118,0.189 -0.066,0.007 -0.279,-0.14 -0.604,-0.428 -0.05,0.017 -0.055,0.232 -0.094,0.203 -0.139,0.146 0.111,0.043 0.487,-0.092 0.41,0.416 0.159,0.075 0.154,0.298 0.005,0.114 -0.09,0.22 -0.069,0.09 0.023,0.061 0.114,0.031 0.452,-0.062 0.081,0.108 -0.067,0.856 0.064,0.314 -10e-4,0.143 -0.052,0.189 -0.002,0.16 0.041,0.164 0.005,0.146 -0.115,0.381 -0.121,0.064 -0.195,0.003 -0.154,-0.108 -0.216,-0.328 -0.21,-0.51 -0.081,-0.073 -0.276,-0.077 -0.05,-0.061 -0.176,-0.011 -0.125,-0.21 0.015,-0.276 -0.108,-0.283 0.013,-0.126 -0.121,-0.053 -0.102,0.08 0.053,0.277 -0.06,0.214 -0.219,-0.09 -0.366,-0.686 -0.416,-0.552 -0.163,-0.131 0.043,-0.161 0.205,-0.085 0.166,0.007 0.034,-0.096 -0.347,-0.536 0.012,-0.152 0.126,-0.271 -0.158,-0.113 -0.433,0.085 -0.153,-0.057 -0.125,-0.218 -0.073,-0.189 -0.375,-0.034 -0.142,0.023 -0.245002,-0.287 -0.111,-0.181 0.044,-0.093 0.225,-0.163 0.132002,0.023 0.253,0.174 0.099,-0.006 0.251,-0.231 0.038,-0.208 0.188,-0.172 -0.03,-0.181 -0.104,-0.309 -0.23,-0.086 -0.47,0.184 -0.409002,0.283 -0.164,-0.11 -0.036,-0.173 0.438,-0.472 0.192002,-0.261 -0.037,-0.155 -0.141002,-0.201 -0.012,-0.503 0.091,-0.12 z m 7.26,4.248 -0.098,0.542 -0.193,0.553 -0.295,0.297 -0.208,-0.066 -0.153,-0.24 -0.142,0.013 -0.151,-0.049 -0.085,-0.199 0.08,-0.257 -0.071,-0.199 -0.075,0.174 -0.133,0.159 -0.335,0.208 -0.231,0.396 -0.109,0.258 -0.136,-0.281 -0.087,-0.667 -0.011,-0.284 0.243,-0.429 0.314,-0.408 0.063,-1.223 0.998,-0.618 0.093,0.032 0.324,0.461 0.345,0.643 0.089,0.289 0.002,0.503 -0.038,0.392 z m -69.003002,-1.648 -0.109,0.157 -0.213,-0.011 -0.119,-0.051 -0.04,-0.138 0.328,-0.416 0.075,-0.056 0.059,0.016 0.026,0.172 -0.007,0.327 z m 62.476002,1.378 0.062,0.139 0.004,0.088 -0.406,0.328 -0.007,0.068 -0.095,0.202 -0.085,0.074 -0.151,0.219 -0.289002,0.236 0.043,-0.709 -0.287,-0.413 0.289,-0.209 0.189002,0.06 0.314,0.024 0.306,-0.182 0.113,0.075 z m -76.842002,1.13 0.043,0.003 0.086,-0.038 0.182,-0.277 0.06,-0.012 10e-4,0.085 -0.086,0.274 0.146,0.366 0.136,0.175 -0.014,0.062 -0.341,0.126 -0.26,-0.091 -0.137,0.032 -0.125,0.127 -0.085,-0.141 -0.059,-0.675 0.02,-0.118 0.142,-0.235 0.183,-0.106 0.079,0.031 0.066,0.094 0.017,0.098 -0.054,0.22 z m 0.998,-0.113 -0.039,0.388 -0.386,-0.247 -0.103,-0.123 0.069,-0.091 0.367,-0.023 0.092,0.096 z m 77.086002,2.17 0.069,0.066 0.07,-0.046 0.114,-0.173 0.201,0.034 0.146,0.058 0.089,0.072 -0.047,0.252 -0.036,0.41 -0.083,0.145 -0.082,0.204 -0.285,-0.121 -0.231,-0.26 -0.335,-0.448 -0.187,-0.324 -0.015,-0.137 -0.118,-0.099 -0.23,-0.56 -0.13,-0.444 -0.207,-0.051 -0.261,-0.124 -0.101,-0.244 0.07,-0.214 0.372,-0.108 0.559,0.55 0.085,0.233 0.2,0.272 0.038,0.379 0.102,0.148 0.233,0.53 z m -75.805002,-1.144 -0.171,0.107 -0.054,0.136 -0.13,0.058 -0.109,0.111 -0.368,0.502 -0.161,0.092 0.178,-0.428 0.028,-0.136 0.003,-0.091 -0.055,-0.324 0.107,0.014 0.088,-0.067 0.178,-0.288 0.16,-0.025 0.172,-0.343 0.093,-0.027 0.046,0.046 -0.076,0.208 0.165,0.191 -0.042,0.185 -0.052,0.079 z m 80.078002,0.24 0.287,0.637 0.015,0.223 -0.273,0.078 -0.215,-0.032 -0.111,-0.073 -0.029,-0.104 0.07,-0.322 -0.142,-0.189 -0.164,-0.065 -0.146,0.111 -0.008,-0.318 0.11,-0.229 -0.061,-0.311 -0.002,-0.235 0.037,-0.075 0.148,0.007 0.303,0.243 0.181,0.654 z m -79.074002,-0.353 -0.015,0.39 -0.041,0.061 -0.075,-0.104 -0.158,0.116 -0.086,-0.084 0.037,-0.136 -0.012,-0.106 0.117,-0.009 0.028,-0.194 -0.021,-0.082 0.058,-0.175 0.083,-0.041 0.085,0.364 z m 0.43,0.877 -0.091,0.025 -0.075,-0.053 -0.104,-0.277 -0.009,-0.117 0.201,0.087 0.076,0.202 0.002,0.133 z m -11.546,-0.04 0.272,0.805 0.118,0.157 0.175,0.085 0.246,0.086 0.146,0.119 0.128,0.181 0.017,0.083 -0.771,-0.323 -0.485,0.472 -0.146,0.062 -1.376,0.022 -0.275,0.087 -0.178,0.153 -0.314,0.429 -0.16,0.167 -0.168,0.099 -0.357,0.11 -0.429,-0.015 -0.224,-0.056 -0.12,-0.204 -0.106,-0.402 0,-0.112 0.045,-0.193 0.382,-0.266 0.127,-0.141 0.495,-0.917 0.144,-0.126 0.152,-0.031 0.423,0.064 0.361,-0.269 0.778,-0.41 0.171,-0.049 0.56,-0.009 0.153,0.064 0.118,0.115 0.098,0.163 z m 3.306,0.651 -0.067,0.022 -0.193,-0.149 -0.07,-0.111 -0.051,-0.174 0.394,-0.25 0.082,-0.003 0.074,0.141 0.013,0.11 -0.109,0.316 -0.073,0.098 z m -0.719,2.156 -0.243,0.105 -0.258,-0.11 -0.221,-0.203 -0.025,-0.242 0.492,0.157 0.105,0.074 0.15,0.219 z m -8.439,1.269 -0.123,0.036 -0.029,-0.049 -0.015,-0.21 -0.094,-0.334 0.179,-0.121 0.112,-0.028 0.047,0.051 0.129,0.25 0.129,0.066 0.095,0.053 -0.167,0.076 -0.263,0.21 z m -0.7859996,0.315 -0.106,0.084 -0.085,0.018 -0.064,-0.047 -0.293,0.057 -0.057,-0.034 -0.129,-0.285 -0.008,-0.147 0.051,-0.116 0.13,-0.106 0.21,-0.095 0.207,0.02 0.36,0.263 0.169,0.154 0.032,0.095 -0.126,0.09 -0.291,0.049 z m -2.172,0.808 0.121,0.226 0.209,-0.143 0.154,-0.196 0.12,-0.253 0.078,-0.1 0.103,0.134 0.294,0.182 -0.248,0.28 -0.476,0.418 -0.16,0.28 -0.01,0.121 0.462,-0.092 0.129,0.013 0.082,0.096 -0.126,0.113 -0.251,0.103 -0.218,0.199 -0.506,0.344 -0.191,0.286 -0.226,0.109 -0.308,0.026 -0.542,0.186 -0.329,0.175 -0.083,0.094 -0.104,0.043 -0.124,-0.005 -0.133,0.077 -0.144,0.158 -0.12,0.074 -0.196,0.017 -0.102,0.062 -0.114,-0.002 -0.313,-0.189 -0.078,-0.11 0.277,-0.221 0.2,-0.074 0.305,-0.033 0.299,-0.205 0.616,-0.271 0.191,-0.148 0.123,-0.517 0.14,-0.088 0.075,-0.207 0.341,0.006 0.156,0.232 0.055,0.032 0.027,-0.022 0.015,-0.186 0.175,-0.13 -0.101,-0.096 -0.315,-0.12 -0.234,-0.057 -0.153,0.007 -0.124,-0.067 -0.096,-0.142 -0.043,-0.141 0.008,-0.14 0.078,-0.157 0.147,-0.174 0.168,-0.099 0.363,-0.071 0.322,-0.116 0.17,-0.018 0.129,0.049 0.036,0.448 z m 1.138,0.843 -0.04,0.014 -0.072,-0.117 -0.003,-0.107 0.046,-0.078 0.131,-0.182 0.093,-0.064 0.115,-0.033 0.031,0.049 -0.101,0.215 -0.126,0.145 -0.074,0.158 z m -4.924,1.781 -0.859,0.501 -0.279,0.366 -0.213,0.352 -0.167,0.192 -0.122,0.033 -0.136,0.093 -0.284,0.245 -0.12,0.03 -0.91199996,0.571 -0.064,0.009 0.044,-0.149 0.278,-0.211 0.182,-0.193 0.20499996,-0.318 0.113,-0.118 0.036,-0.16 0.015,-0.324 0.051,-0.123 0.196,-0.244 0.143,-0.133 0.188,-0.046 0.38,0.041 0.158,-0.125 0.049,-0.094 -0.096,-0.086 -0.022,-0.149 0.025,-0.258 0.11,-0.229 0.195,-0.2 0.266,-0.156 0.336,-0.112 0.246,-0.005 0.442,0.236 0.065,0.108 -0.109,0.236 -0.062,0.222 -0.278,0.198 z m 209.3260016,21.047 0.336,-0.052 0.289,0.015 0.291,0.023 0.155,0.034 0.448,0.186 0.292,0.152 0.419,0.282 0.232,0.125 0.112,0.293 0.13,0.375 0.186,0 0.14,-0.22 0.356,-0.04 0.468,0.154 0.412,0.438 0.592,0.39 0.362,0.194 0.368,-0.001 0.467,-0.193 0.497,-0.374 0.358,-0.065 0.212,0.037 0.121,0.291 0.148,0.111 0.386,-0.033 0.805,0.056 0.641,-0.079 0.146,0.167 0.13,0.263 0.26,0.083 0.353,-0.083 0.555,0.057 -0.076,0.042 -0.082,-0.009 -0.107,0.063 -0.133,0.134 -0.307,0.191 -0.48,0.249 -0.554,0.228 -1.123,0.411 -0.7,0.426 -0.31,0.255 -1.205,1.276 -0.727,0.677 -1.177,0.948 -0.112,0.12 -0.007,0.112 0.096,0.105 0.24,0.152 0.187,0.019 0.239,-0.031 0.945,-0.262 0.398,-0.182 0.391,-0.306 0.04,-0.01 0.163,0.056 0.051,0.027 0.508,-0.353 0.167,-0.045 0.131,0.009 0.163,0.139 0.038,0.084 -0.055,0.162 -0.146,0.239 -0.071,0.201 0.004,0.163 -0.063,0.176 -0.16,0.239 0.058,0.064 0.429,-0.172 0.063,-0.067 0.007,-0.04 -0.026,-0.048 0.049,-0.022 0.338,0.235 0.225,0.13 0.189,0.062 0.358,-0.075 0.527,-0.212 0.45,-0.258 0.372,-0.306 0.464,-0.188 0.557,-0.069 0.398,-0.108 0.24,-0.148 0.322,-0.289 0.181,-0.085 0.228,-0.026 0.171,-0.112 0.115,-0.198 0.218,-0.225 0.32,-0.252 0.183,-0.102 0.045,0.048 0.017,0.089 -0.012,0.131 0.08,0.105 0.171,0.081 0.078,0.107 -0.015,0.133 0.046,0.113 0.108,0.094 0.028,0.204 -0.05,0.313 -0.006,0.203 0.038,0.092 0.038,0.052 0.061,-0.05 0.077,-0.11 0.028,-0.068 0.02,-0.069 0.468,-0.316 0.091,-0.016 0.153,0.082 0.708,0.114 0.279,0.081 0.293,0.181 0.1,0.07 0.359,0.584 0.164,0.228 0.102,0.063 0.058,0.089 0.046,0.206 0.056,0.062 0.526,0.044 0.238,-0.037 0.145,-0.083 0.161,0.054 0.177,0.19 0.174,0.053 0.171,-0.083 0.161,0.002 0.151,0.089 0.07,0.064 0.046,-0.003 0.299,-0.29 0.36,-0.258 0.481,-0.279 0.279,-0.124 0.077,0.03 0.443,-0.093 0.399,-0.008 0.529,0.056 0.49,-0.065 0.451,-0.187 0.399,-0.104 0.347,-0.022 0.131,0.052 -0.085,0.127 -0.046,0.217 -0.006,0.308 -0.03,0.194 -0.053,0.082 -0.006,0.078 0.04,0.074 0.337,0.048 0.177,0.1 0.203,0.004 0.229,-0.091 0.175,0.035 0.122,0.159 0.177,0.029 0.172,-0.114 0.121,-0.107 0.104,-0.047 0.081,-0.01 0.086,0.054 0.058,0.091 0.146,0.25 0.072,0.169 0.044,0.251 0.031,0.083 -0.004,0.146 -0.098,0.099 -0.026,0.079 0.059,0.079 0.332,0.022 0.151,0.078 0.056,0.087 -0.038,0.096 0.021,0.103 0.081,0.108 0.266,0.164 0.065,0.078 -0.019,0.083 -0.079,0.053 -0.139,0.024 -1.016,-0.154 -0.299,-0.025 -0.044,0.057 -0.028,0.008 -0.048,-0.015 -0.087,-0.003 -0.044,-0.037 -0.037,-0.103 -0.088,-0.066 -0.141,-0.029 -0.121,0.078 -0.141,0.305 0.022,0.057 -0.023,0.195 0.036,0.053 -0.002,0.044 -0.04,0.037 -0.083,-0.005 -0.126,-0.046 -0.477,-0.461 -0.361,-0.23 -0.447,-0.169 -0.354,-0.083 -0.26,0.004 -0.214,0.119 -0.167,0.232 -0.261,0.132 -0.355,0.032 -0.192,0.063 -0.03,0.093 -0.128,0.002 -0.226,-0.088 -0.233,-0.025 -0.241,0.039 -0.176,0.091 -0.187,0.285 -0.037,0.14 -0.135,0.122 -0.359,0.19 -0.018,0.07 -0.189,0.216 -0.06,0.119 0.001,0.117 -0.063,-0.007 -0.127,-0.131 -0.005,-0.176 0.117,-0.222 0.105,-0.107 0.092,0.007 0.057,-0.099 0.022,-0.204 -0.033,-0.102 -0.179,0.04 -0.094,0.081 -0.119,0.018 -0.143,-0.046 -0.126,0.111 -0.109,0.269 -0.13,0.176 -0.151,0.083 -0.102,-0.092 -0.052,-0.267 0,-0.209 0.061,-0.253 -0.031,-0.049 -0.064,0.081 -0.096,0.211 -0.128,0.46 -0.082,0.149 -0.111,0.063 -0.176,0.278 -0.24,0.492 -0.271,0.477 -0.302,0.46 -0.182,0.247 -0.061,0.035 -0.027,0.082 -0.015,0.295 -0.054,0.2 -0.158,0.157 -0.413,0.198 -0.065,0.135 -0.009,0.111 -0.266,0.459 -0.13,0.281 -0.085,0.292 0.027,0.184 0.139,0.075 0.113,-0.029 0.086,-0.133 0.132,-0.121 0.179,-0.108 0.13,-0.159 0.181,-0.387 0.203,-0.223 0.108,-0.013 0.03,0.006 0.211,-0.101 0.17,0.033 0.103,0.152 0.105,0.104 0.023,0.098 -0.052,0.218 -0.097,0.23 -0.141,0.241 -0.128,0.361 -0.115,0.481 -0.024,0.363 0.066,0.245 -0.063,0.219 -0.192,0.192 -0.155,0.257 -0.117,0.321 -0.066,0.269 -0.016,0.218 0.017,0.163 0.072,0.22 -0.005,0.111 -0.208,0.483 -0.075,0.234 -0.013,0.185 -0.052,0.182 -0.159,0.369 -0.05,0.205 -0.009,0.188 0.036,0.308 -0.02,0.104 0.009,0.079 0.039,0.053 0,0.097 -0.041,0.141 0.016,0.109 0.072,0.078 0.046,0.149 0.021,0.219 0.055,0.183 0.089,0.146 0.016,0.213 -0.057,0.278 -0.029,0.522 -10e-4,0.765 0.042,0.49 0.086,0.217 0.096,0.16 0.106,0.103 0.122,0.316 0.138,0.53 0.127,0.35 0.118,0.17 0.106,0.094 0.084,0.055 0.062,0.008 0.035,0.083 0.158,0.05 0.289,0.021 0.266,-0.033 0.242,-0.086 0.77,-0.446 0.299,-0.243 0.166,-0.218 0.161,-0.287 0.155,-0.356 0.316,-0.534 0.154,-0.323 0.148,-0.41 0.112,-0.43 0.075,-0.451 0.036,-0.469 -0.004,-0.486 -0.076,-0.49 -0.147,-0.495 -0.079,-0.253 -0.031,-0.067 -0.266,-0.636 -0.3,-0.888 0.004,-0.076 0.28,-0.531 0.007,-0.072 -0.03,-0.432 -0.06,-0.217 -0.143,-0.292 0.005,-0.074 0.291,-0.373 0.176,-0.284 0.16,-0.345 0.104,-0.403 0.047,-0.461 -0.001,-0.308 -0.051,-0.154 0.005,-0.119 0.061,-0.083 0.312,-0.108 0.105,-0.183 0.022,-0.322 0.064,-0.16 0.106,0.003 0.098,-0.066 0.09,-0.135 0.119,-0.039 0.148,0.059 0.207,-0.2 0.266,-0.459 0.204,-0.257 0.143,-0.054 0.027,0.042 -0.088,0.137 -0.027,0.151 0.034,0.164 -0.03,0.159 -0.066,0.217 0.041,0.068 -0.114,0.349 -0.005,0.174 0.069,0.132 0.082,-0.046 0.095,-0.225 0.029,-0.12 -0.039,-0.015 0.015,-0.096 0.067,-0.176 0.06,-0.084 0.052,0.01 0.014,0.096 -0.023,0.183 -0.151,0.431 -0.03,0.131 0.034,0.037 0.182,-0.27 0.152,-0.43 0.116,-0.33 0.021,-0.18 -0.035,-0.465 0.007,-0.191 0.044,-0.132 0.158,-0.149 0.271,-0.166 0.268,-0.089 0.265,-0.011 0.185,-0.045 0.105,-0.079 -0.037,-0.064 -0.178,-0.047 -0.136,-0.104 -0.092,-0.161 -0.031,-0.185 0.031,-0.208 0.113,-0.205 0.196,-0.201 0.062,-0.147 -0.073,-0.095 0.084,-0.034 0.24,0.027 0.168,-0.026 0.095,-0.079 0.026,0.01 0.201,0.075 0.359,0.247 0.341,0.144 0.323,0.041 0.236,0.087 0.148,0.133 0.107,0.149 0.065,0.165 0.154,0.093 0.243,0.021 0.191,0.07 0.139,0.119 0.772,0.307 0.323,0.162 0.178,0.158 0.05,0.102 -0.015,0.1 0.018,0.107 0.132,0.208 0.05,0.019 0.031,0.1 0.011,0.182 0.039,0.122 0.066,0.062 -0.041,0.025 -0.238,-0.105 -0.135,0.032 -0.063,0.136 -0.01,0.129 0.043,0.121 0.304,0.364 0.079,0.332 0.015,0.401 -0.038,0.156 -0.032,0.343 -0.026,0.53 -0.006,0.181 -0.1,0.177 -0.271,0.254 -0.004,-0.048 -0.065,-0.013 -0.07,0.039 -0.098,0.217 -0.084,0.396 -0.102,0.215 -0.121,0.034 -0.073,0.057 -0.024,0.08 -0.129,0.054 -0.235,0.028 -0.161,0.12 -0.12,0.338 0.005,0.162 -0.056,0.201 0.004,0.172 0.063,0.143 0.19,0.143 0.316,0.143 0.189,0.022 0.13,-0.06 0.136,-0.234 0.132,-0.092 0.161,-0.039 0.061,-0.106 0.265,-0.469 0,-0.104 -0.097,-0.04 0.014,-0.029 0.125,-0.019 0.108,-0.063 0.092,-0.108 0.161,-0.08 0.392,-0.123 0.21,-0.14 0.133,-0.023 0.194,0.075 0.254,0.172 0.201,0.251 0.148,0.329 0.187,0.851 0.226,1.367 0.154,0.762 0.083,0.162 0.041,0.081 -0.199,1.061 -0.16,0.437 -0.28,0.253 -0.278,0.245 -0.347,0.41 -0.381,0.202 -0.195,0.119 -0.042,0.077 -0.047,-0.024 -0.104,0.222 -0.093,0.307 -0.037,0.237 0.033,0.13 -0.079,0.083 -0.143,0.156 -0.027,0.057 0.01,0.091 -0.03,0.044 -0.069,-0.002 -0.053,0.044 -0.129,0.163 -0.222,0.426 -0.042,0.089 0.037,0.066 0.254,0.041 0.173,0.078 0.135,0.117 0.487,0.229 0.149,0.142 0.148,0.078 0.147,0.014 0.101,-0.045 0.054,-0.104 0.069,-0.007 0.084,0.09 0.274,0.098 0.009,0.031 -0.76,0.17 -0.159,0.079 0.19,0.055 0.192,-0.013 0.193,-0.082 0.222,0.004 0.195,0.039 0.062,-0.033 0.025,-0.017 0.332,0.223 0.124,0.033 0.129,-0.025 0.133,-0.084 0.293,-0.109 0.452,-0.135 0.435,-0.055 0.418,0.025 0.264,-0.038 0.242,-0.14 0.534,-0.46 0.613,-0.371 1.009,-0.461 1.5,-0.555 0.232,-0.129 0.235,-0.127 0.122,-0.073 0.136,-0.066 1.044,-0.582 0.538,-0.344 0.269,-0.25 0.284,-0.208 0.298,-0.166 0.236,-0.213 0.175,-0.26 0.193,-0.194 0.211,-0.127 0.114,-0.134 0.016,-0.14 -0.04,-0.19 -0.094,-0.239 -0.013,-0.188 0.068,-0.138 0.015,-0.093 -0.038,-0.048 -0.443,-0.137 0.019,-0.66 -0.006,-0.019 0.023,-0.008 1.021,-0.293 0.651,-0.101 0.793,-0.027 0.945,0.145 0.367,0.132 0.232,0.168 0.268,0.045 0.304,-0.078 0.421,-0.026 0.539,0.026 0.288,0.04 0.038,0.053 0.037,-0.016 0.037,-0.084 0.144,-0.093 0.404,-0.139 0.054,0.029 0.083,-0.07 0.112,-0.17 0.206,-0.188 0.3,-0.206 0.271,-0.107 0.243,-0.009 0.162,-0.05 0.082,-0.093 0.025,-0.082 -0.032,-0.071 0.014,-0.079 0.014,-0.039 -0.012,-0.032 -0.029,-0.067 -0.023,-0.338 -0.047,-0.159 -0.066,-0.118 -0.084,-0.076 0.01,-0.079 0.146,-0.098 -0.011,0.091 0.038,0.028 0.068,-0.042 0.156,-0.204 0.018,-0.077 0.106,-0.079 0.079,-0.123 -0.087,-0.018 -0.207,0.037 -0.047,-0.037 0.107,-0.164 -0.02,-0.093 -0.034,-0.039 -0.068,-0.016 -0.233,0.144 -0.072,0.013 -0.01,-0.076 -0.12,-0.169 0.322,-0.3 1.138,-0.837 0.116,-0.127 0.043,-0.114 -0.031,-0.1 -0.032,-0.025 0.017,-0.025 1.097,-1.082 0.623,-0.501 0.514,-0.28 0.392,-0.133 0.265,0.019 0.15,-0.019 0.128,0 0.653,-10e-4 1.168,-0.002 1.168,-10e-4 1.168,-0.002 1.167,-0.002 1.168,-0.002 1.168,-0.002 1.167,-0.002 0.277,-0.764 0.257,-0.357 0.353,0.118 0.188,-0.01 0.209,-0.184 0.169,-0.112 0.111,0.017 0.095,0.168 0.079,0.112 0.093,-0.033 0.079,-0.159 -0.003,-0.221 0.108,-0.154 0.129,-0.023 0.119,0.005 0.06,-0.075 -0.007,-0.107 -0.042,-0.174 0.015,-0.209 0.297,-0.371 0.364,-0.251 0.127,-0.126 0.037,-0.255 0.209,-0.265 0.104,-0.153 0.025,-0.133 -0.054,-0.164 0.005,-0.313 0.072,-0.374 0.086,-0.408 0.192,-0.368 0.315,-0.402 0.082,-0.53 0.085,-0.56 0.382,-0.547 0.433,-0.623 0.247,-0.355 0.444,-0.647 0.316,-0.462 0.159,-0.212 0.166,-0.252 0.271,0.076 0.27,0.075 -0.04,0.366 0.044,0.266 0.128,0.153 0.185,0.104 0.14,0.035 0.165,-0.002 0.45,-0.207 0.528,-0.134 0.291,-0.125 0.053,-0.117 0.132,-0.041 0.211,0.035 0.39,0.293 0.455,0.442 0.359,0.349 0.011,0.604 0.007,0.638 0.007,0.67 0.005,0.477 0.009,0.654 0.007,0.518 0.009,0.675 0.005,0.36 0.049,0.104 -0.03,0.141 -0.013,0.071 0.003,0.057 0.02,0.071 -0.003,0.099 -0.046,0.089 -0.023,0.104 -0.006,0.169 0.049,0.104 0.082,0.061 0.069,0 0.089,0.061 0.115,0.108 0.175,0.094 0.181,0.033 0.125,-0.023 0.151,0.061 0.053,0.15 -0.03,0.141 -0.085,0.066 -0.092,0.051 -0.017,0.108 0.046,0.112 0.066,0.098 0.072,0.172 -0.03,0.15 -0.066,0.126 -0.029,0.13 0.056,0.112 0.148,0.149 0.092,0.144 0.145,0.079 0.069,-0.056 0.056,-0.075 0.059,-0.056 0.102,0.033 0.119,0.042 0.129,0.05 -0.016,0.121 0.079,0.203 0.061,0.39 -0.094,0.177 0.02,0.234 0.26,0.068 0.063,0.072 0.012,0.086 -0.573,0.599 -0.485,-0.083 -0.263,0.159 -0.275,0.046 -0.121,0.267 -0.151,0.057 -0.207,-0.016 -0.179,-0.075 -0.136,0.037 -0.191,0.481 -0.156,-0.042 -0.062,0.173 -0.082,0.076 -0.12,0.064 -0.104,-0.213 -0.066,-0.203 -0.098,-0.044 -0.13,-0.052 -0.133,0.002 -0.089,0.029 -0.111,0.131 -0.16,0.113 -0.121,-0.094 -0.095,-0.151 -0.081,0.243 -0.118,0.256 0.02,0.298 -0.051,0.177 -0.112,-0.047 -0.111,-0.155 -0.312,-0.124 -0.249,0.011 0.051,-0.166 0.235,-0.238 -0.073,-0.046 -0.115,0.033 -0.05,-0.033 0.083,-0.217 0.008,-0.239 -0.105,0.083 -0.132,0.252 -0.32,0.201 0.015,0.336 -0.301,0.686 -0.014,0.292 -0.193,0.232 -0.25,0.2 -0.333,-0.056 -0.254,0.173 -0.129,0.199 -0.112,0.03 -0.058,-0.253 -0.042,-0.078 -0.094,0.374 -0.095,0.023 -0.036,-0.265 -0.045,-0.175 -0.13,0.151 -0.086,0.4 -0.09,-0.034 -0.029,-0.148 -0.065,-0.045 -0.022,0.17 0.032,0.239 -0.047,0.127 -0.09,-0.068 -0.09,-0.115 -0.149,0.087 -0.137,0.035 0,-0.117 0.026,-0.144 -0.272,0.079 -0.327,0.265 -0.254,0.366 0.088,0.061 0.099,0.116 -0.441,0.563 -0.452,0.506 -0.341,0.823 -0.137,0.096 -0.118,0.15 -0.125,0.495 -0.144,0.439 0.081,0.196 0.053,0.201 0.128,0.198 0.109,0.018 0.118,-0.036 0.086,0.008 0.056,0.084 -0.024,0.101 -0.136,0.025 -0.254,0.176 -0.223,0.068 -0.111,0.212 -0.167,0.245 -0.325,0.382 0.139,0.118 0.501,0.132 0.224,0.136 0.338,0.71 -0.077,0.071 -0.031,0.13 0.301,0.182 0.096,0.508 0.247,0.173 0.368,0.106 0.451,-0.153 0.375,-0.211 -0.013,-0.173 -0.236,-0.404 -0.057,-0.189 -0.175,-0.123 -0.066,0.104 -0.113,-0.135 -0.013,-0.076 0.105,-0.037 0.123,0.015 0.143,0.071 0.368,0.441 0.102,0.576 0.022,0.365 -0.042,0.125 -0.107,-0.026 -0.204,0.025 -0.969,0.189 -0.215,0.166 -0.493,0.18 -0.031,-0.09 0.036,-0.186 -0.031,-0.382 -0.097,-0.018 -0.767,0.623 -0.296,0.039 -0.249,0.182 -0.056,-0.101 -0.044,-0.466 0.156,-0.392 -0.083,0.006 -0.26,0.235 -0.111,-0.145 -0.056,-0.159 -0.08,-0.09 -0.087,-0.034 0.075,0.347 -0.177,0.26 -0.048,0.671 -0.222,0.278 -0.692,0.179 -0.451,-0.038 -0.404,0.056 -0.537,0.128 -0.297,-0.076 -0.304,0.135 -1.032,0.037 -0.218,-0.072 -0.278,0.255 -0.445,0.151 -1.125,0.571 -0.248,0.208 -0.302,0.323 -0.203,0.174 -0.167,0.057 -0.103,0.145 -0.112,0.094 0.108,-0.322 0.117,-0.272 0.098,-0.529 -0.029,-0.428 -0.121,-0.176 -0.125,-0.118 0.146,0.423 0.024,0.518 -0.051,0.303 -0.276,0.583 -0.117,0.135 -0.137,0.12 -0.104,0.051 -0.096,0.093 -0.111,0.147 -0.105,0.292 0.064,0.266 0.538,0.097 0.145,-0.082 0.073,0.19 0.042,0.264 -0.041,0.286 -0.09,0.29 -0.068,0.36 -0.058,0.547 -0.087,0.491 -0.012,-0.149 0.055,-0.598 -0.088,0.063 -0.061,0.138 -0.164,0.77 -0.226,0.409 -0.208,0.283 -0.215,-0.047 0.048,0.225 -0.059,0.117 -0.05,0.244 -0.128,0.161 -0.12,-0.015 -0.172,0.111 -0.068,0.085 -0.005,0.163 -0.116,0.143 -0.417,0.742 -0.362,0.218 -0.086,-0.032 0.095,-0.35 0.065,-0.354 -0.22,-0.154 -0.21,-0.082 -0.241,0.011 -0.267,-0.276 -0.343,-0.2 -0.479,-0.544 0.014,-0.151 -0.012,-0.254 0.146,-0.401 0.139,-0.281 0.193,-0.146 0.56,-0.148 0.14,-0.223 0.083,-0.188 -0.277,0.323 -0.415,0.11 -0.224,0.121 -0.179,0.184 -0.106,0.231 -0.24,0.278 0.017,0.186 0.04,0.132 -0.019,0.276 0.152,0.268 0.3,0.439 0.058,0.68 0.229,0.454 0.352,0.528 0.27,0.15 0.014,0.196 -0.125,0.324 -0.165,0.148 0.214,-0.03 0.106,0.074 0.104,0.27 -0.008,0.275 -0.035,0.154 -0.065,0.062 0.002,-0.158 -0.046,-0.055 -0.076,0.068 -0.049,0.078 -0.021,0.307 -0.052,0.153 -0.184,0.045 -0.187,0.402 -0.173,0.228 -0.681,1.536 0.026,0.256 -0.125,0.082 -0.188,0.067 -0.191,0.153 -0.127,0.168 -0.118,0.452 -0.226,0.508 -0.141,-0.211 -0.036,-0.181 0.063,-0.474 0.244,-0.777 0.269,-0.484 0.205,-0.23 0.168,-0.47 -0.213,-0.07 -0.325,0.008 0.061,-0.217 0.095,-0.191 -0.169,-0.191 -0.1,-0.024 -0.103,-0.078 0.121,-0.159 0.059,-0.168 -0.036,-0.205 0.051,-0.155 -0.084,0.023 -0.136,0.164 -0.084,0.065 -0.051,-0.145 -0.059,0.033 -0.038,0.1 -0.087,0.054 -0.183,-0.136 -0.267,-0.155 -0.148,-0.268 -0.085,-0.208 0.086,-0.376 0.185,-0.067 0.24,0.061 0.314,0 -0.045,-0.083 -0.112,0.014 -0.331,-0.306 -0.107,-0.185 -0.183,-0.051 -0.083,0.178 -0.093,0.047 0.114,-0.389 0.15,-0.016 0.221,-0.108 -0.064,-0.226 -0.14,-0.099 -0.252,0.124 0.003,-0.159 0.047,-0.203 0.19,0 0.167,0.066 0.142,-0.329 0.006,-0.147 -0.235,0.214 -0.053,-0.461 0.231,-0.445 0.221,-0.195 0.276,0.006 0.28,-0.031 -0.176,-0.082 -0.181,-0.044 0.136,-0.177 0.116,-0.032 0.114,-0.154 -0.273,0.023 0.032,-0.292 -0.133,0.06 -0.159,0.027 -0.062,0.124 0.012,0.206 -0.046,0.135 -0.124,0.108 -0.209,0.084 -0.02,-0.146 -0.069,-0.066 -0.026,0.313 -0.055,0.106 -0.153,-0.293 -0.046,0.059 0.006,0.083 -0.039,0.144 -0.131,0.075 0.008,0.184 -0.051,0.101 -0.419,-0.16 -0.01,0.054 0.237,0.345 0.173,0.118 0.021,0.188 -0.149,0.156 -0.205,-0.134 -0.035,0.01 0.112,0.23 0.07,0.201 -0.072,0.168 0.011,0.208 -0.016,0.188 -0.044,0.164 0.1,0.753 0.12,0.205 0.118,0.195 0.063,0.183 -0.125,0.026 -0.2,-0.15 -0.176,-0.115 -0.209,-0.367 -0.034,-0.147 -0.051,-0.116 0.024,0.266 0.075,0.297 0.654,0.664 0.121,0.254 0.092,0.2 -0.023,0.19 -0.171,-0.135 -0.147,-0.172 -0.391,-0.195 -0.493,-0.123 -0.278,-0.454 0.001,0.189 -0.062,0.161 -0.17,-0.196 -0.107,-0.167 -0.036,-0.183 -0.212,0.012 -0.222,0.16 -0.215,-0.038 -0.025,-0.311 0.058,-0.165 0.241,-0.39 0.228,-0.2 0.1,-0.258 -0.034,-0.4 -0.042,0.407 -0.13,0.201 -0.205,0.154 -0.269,0.274 -0.065,0.253 -0.084,0.473 0.113,0.16 0.116,0.042 0.342,-0.107 0.177,0.048 0.394,0.568 0.734,0.224 0.268,0.14 0.218,0.296 0.328,0.17 0.255,0.247 0.007,0.161 -0.088,0.19 -0.035,0.257 -0.108,0.162 -0.259,0.019 -0.157,-0.042 -0.843,-0.905 -0.101,-0.083 -0.313,-0.475 -0.367,-0.255 -0.114,0.005 0.522,0.471 0.213,0.329 0.375,0.46 0.268,0.195 0.197,0.304 0.184,0.142 0.501,0.202 -0.174,0.146 0.278,0.124 0.04,0.227 -0.025,0.259 -0.386,-0.103 -0.013,0.191 0.035,0.112 -0.17,0.093 -0.237,-0.126 -0.615,-0.69 0.005,0.092 0.05,0.107 0.357,0.444 0.319,0.266 0.27,0.12 0.208,0.223 0.074,0.134 0.049,0.204 -0.154,0.138 -0.176,0.077 -0.171,-0.138 -0.126,-0.146 -0.268,-0.247 -0.081,-0.277 -0.204,0.014 -0.852,-0.351 -0.685,-0.041 0.067,0.071 0.086,0.047 0.545,0.086 0.215,0.162 0.448,0.144 0.263,0.039 0.106,0.44 0.363,0.303 0.047,0.224 0.248,0.025 0.436,-0.219 0.281,0.077 0.406,0.063 0.093,0.177 0.069,0.336 0.144,0.378 0.372,1.486 0.559,1.209 0.069,0.208 -0.13,-0.183 -0.415,-0.8 -0.229,-0.58 -0.235,-1.026 -0.068,-0.23 -0.081,-0.092 -0.053,0.075 -0.023,0.131 0.039,0.101 -0.093,0.338 0.04,0.155 0.15,0.16 0.164,0.399 0.131,0.537 -0.177,-0.218 -0.188,-0.115 -0.293,-0.088 -0.261,-0.155 0.019,0.222 -0.025,0.24 -0.201,-0.073 -0.137,-0.08 0.122,0.255 -0.263,-0.076 -0.176,0.016 -0.114,0.227 -0.153,0.137 -0.226,0.044 -0.336,-0.207 -0.108,-0.252 -0.045,-0.281 -0.018,0.332 0.06,0.345 -0.021,0.262 0.323,0.048 0.302,-0.042 0.408,0.011 0.266,-0.049 0.16,-0.083 0.384,0.072 0.027,0.316 -0.044,0.314 -0.022,0.333 0.106,-0.002 0.125,-0.107 0.063,-0.599 0.351,-0.222 0.118,0.016 0.112,0.192 0.038,0.195 0.04,0.268 -0.082,0.408 -0.539,0.476 -0.386,0.439 -0.198,0.089 -0.284,-0.051 -0.323,-0.11 -0.159,-0.022 -0.12,0.037 -0.073,-0.136 -0.047,-0.247 -0.125,-0.082 -0.095,0.009 -0.064,0.262 -0.301,0.075 -0.409,-0.109 -0.429,-0.22 0.184,0.236 1.063,0.441 0.12,0.083 0.112,0.12 -0.148,0.189 -0.117,0.213 -0.017,0.167 -0.041,0.105 -0.424,0.283 -0.229,-0.05 -0.587,-0.511 0.268,0.442 0.214,0.187 0.432,0.1 0.809,-0.165 0.266,0.18 -0.218,0.319 -0.216,0.223 -0.284,0.025 -0.25,0.061 -0.074,0.153 -0.178,0.01 -0.279,0.009 -0.431,0.014 -0.237,-0.036 -0.331,0.313 -0.125,0.043 -0.174,-0.059 -0.073,-0.252 -0.078,-0.124 -0.002,0.471 0.031,0.127 0.063,0.095 -0.387,0.255 -0.371,0.318 -0.133,0.086 -0.151,0.159 -0.309,0.459 -0.076,0.334 -0.112,0.372 -0.014,-0.167 0.019,-0.282 -0.076,-0.323 -0.049,0.592 -0.12,0.274 -1.102,-0.019 -0.482,0.149 -0.74,0.501 -0.221,0.22 -0.612,0.847 -0.156,0.541 -0.125,-0.227 0.031,-0.17 0.002,-0.14 -0.153,0.285 0.146,0.436 -0.131,0.166 -0.404,0.31 -0.221,0.05 -0.248,0.088 -0.078,0.305 -0.337,0.281 -0.196,0.124 -0.36,-0.075 0.111,0.27 -0.132,0.205 -0.228,0.157 -0.283,0.102 -0.162,-0.013 -0.138,0.054 -0.109,0.13 -0.265,0.122 -0.275,-0.068 -0.312,-0.041 -0.174,0.073 0.292,0.121 0.157,0.174 -0.032,0.235 -0.078,0.09 -0.185,0.123 -0.081,-0.018 -0.049,-0.11 -0.06,-0.23 -0.086,0.049 -0.015,0.107 -0.074,0.039 -0.262,-0.367 0.013,0.28 0.091,0.215 0.088,0.109 0.089,0.064 0.022,0.1 -0.179,0.243 -0.092,0.054 -0.164,0.039 -0.092,0.149 0.027,0.129 -0.144,0.279 -0.343,0.174 -0.104,-0.007 -0.085,0.051 0.05,0.124 0.085,0.09 -0.003,0.084 -0.09,0.114 -0.179,0.032 -0.1,0.129 0.032,0.123 0.059,0.068 -0.013,0.117 -0.203,0.118 -0.048,0.116 0.101,0.034 0.078,-0.034 0.057,0.025 -0.122,0.194 -0.109,0.118 -0.104,0.212 -0.241,0.059 0.009,0.069 0.136,0.061 0.114,0.163 -0.214,0.301 -0.134,-0.025 -0.082,-0.066 -0.052,0.237 0.02,0.126 -0.051,0.259 -0.082,0.31 -0.056,0.127 0.012,0.237 0.035,0.229 0.131,0.294 0.201,1.201 0.137,0.416 0.246,1.12 0.407,1.082 0.574,1.303 0.942,1.572 0.113,0.223 -0.123,0.189 -0.037,0.196 -0.011,0.295 0.034,0.288 0.111,0.351 0.214,0.536 -0.12,-0.106 -0.31,-0.77 -0.036,-0.452 0.044,-0.643 -0.073,0.016 -0.059,0.209 -0.033,0.245 -0.079,0.095 -0.107,-0.375 0.008,-0.169 0.114,-0.198 -0.033,-0.071 -0.185,-0.102 -0.039,-0.159 0.025,-0.158 -0.105,-0.084 -0.083,0.004 0.056,0.389 0.087,0.238 0.108,0.571 0.175,0.345 0.102,0.289 1.19,3.07 0.282,0.389 0.104,0.279 0.108,0.583 0.024,0.747 -0.194,1.361 -0.044,0.925 -0.028,-0.028 -0.019,-0.098 -0.045,-0.013 -0.168,0.423 -0.229,0.381 -0.076,0.592 -0.11,0.296 -0.331,0.313 -0.205,-0.008 -0.502,0.235 -0.353,-0.061 -0.42,0.132 -0.276,-0.015 -0.16,-0.279 0.024,-0.125 0.063,-0.125 0.108,-0.029 0.371,0.293 0.07,-0.124 -0.112,-0.146 -0.215,-0.082 -0.158,-0.09 -0.319,-0.668 -0.331,-0.459 -0.056,-0.308 -0.571,-0.188 -0.413,-0.285 -0.27,-0.506 -0.155,-0.899 -0.182,-0.101 -0.077,-0.07 0.178,-0.335 0.188,-0.281 -0.148,0.07 -0.109,0.104 -0.139,0.248 -0.102,0.038 -0.093,-0.038 -0.107,-0.476 0.031,-0.585 0.15,-0.219 -0.231,-0.006 -0.239,0.083 0.035,0.195 -0.034,0.107 -0.174,-0.028 -0.133,-0.068 -0.179,-0.204 -0.245,-0.388 -0.503,-1.072 -0.098,-0.151 -0.167,-0.159 0.079,-0.049 0.143,-0.029 0.323,-0.484 0.253,-0.293 0.084,-0.203 -0.015,-0.087 -0.112,-0.126 -0.147,0.11 -0.063,-0.031 -0.166,-0.255 -0.158,-0.072 -0.11,0.055 0.116,0.208 0.104,0.078 -0.041,0.303 -0.042,0.098 -0.098,0.087 -0.153,-0.047 -0.077,0.075 -0.091,-0.079 -0.09,-0.133 -0.101,-0.219 0.267,-1.236 0.247,-0.79 0.028,-0.904 0.019,-0.134 -0.021,-0.241 -0.331,-0.523 -1.463,-1.281 -1.133,-1.524 -0.982,-0.573 -0.745,0.126 -0.129,0.115 -0.055,0.15 0.046,0.171 -0.067,0.071 -0.2,-0.009 -0.269,0.04 -0.703,0.401 -0.248,-0.015 -0.225,0.104 -0.169,0.078 -0.44,0.042 -0.373,0.089 -0.161,-0.048 -0.105,-0.233 0,-0.241 0.085,0.185 0.132,0.145 0.061,-0.058 0.022,-0.128 -0.131,-0.251 -0.423,-0.322 -0.481,-0.471 0.147,0.016 0.037,-0.101 -0.149,-0.133 0.063,-0.153 0.105,-0.161 -0.203,0.024 -0.183,0.113 -0.006,0.139 -0.036,0.111 -0.098,-0.016 -0.182,-0.137 -0.896,-0.382 -0.784,-0.216 0.602,-0.097 0.326,0.075 -0.039,-0.116 -0.079,-0.074 -0.257,-0.093 -0.328,0.035 -0.207,-0.044 -0.211,0.093 -0.232,0.137 -0.207,0.07 -0.808,0.099 -0.655,0.107 0.105,-0.113 0.112,-0.073 0.387,-0.111 0.058,-0.23 -0.091,-0.222 -0.102,0.053 -0.107,0.173 -0.131,-0.125 -0.145,10e-4 -0.04,0.275 -0.187,0.185 -0.084,0.186 -0.547,0.146 -0.07,-0.048 0.16,-0.177 -0.013,-0.098 -0.182,0.084 -0.306,0.334 -1.077,0.109 0.059,-0.076 0.228,-0.016 0.319,-0.105 -0.065,-0.178 -0.123,-0.196 -0.114,-0.022 -0.075,-0.115 0.004,-0.362 -0.073,-0.212 -0.175,-0.218 -0.059,0.042 -0.129,0.374 -0.107,0.489 -0.053,0.158 -0.319,0.011 -0.283,-0.034 -0.96,0.059 -0.358,-0.166 -0.149,-0.032 -0.091,0.004 -0.417,0.152 -0.476,0.116 -0.112,-0.037 -0.16,-0.005 -0.345,0.395 -0.407,0.185 -1.026,-0.333 -0.255,-0.267 -0.227,-0.057 -0.279,-0.033 -0.299,0.329 -0.228,0.443 0.359,0.243 0.308,0.116 0.508,-0.097 0.281,-0.215 0.229,0.007 0.11,-0.043 0.1,-0.112 0.196,0.088 0.007,0.089 -0.139,0.125 -0.176,0.105 -0.106,0.124 0.2,0.249 0.315,0.084 0.118,-0.036 0.073,-0.28 0.194,-0.181 0.263,0.039 -0.037,0.114 0.037,0.107 0.121,0.183 -0.014,0.262 0.023,0.063 -0.283,0.115 -0.211,0.039 -0.169,0.151 0.089,0.087 -0.172,0.077 -0.116,-0.031 -0.059,0.028 -0.018,0.093 -0.089,0.085 0.129,0.259 0.265,0.168 0.187,0.212 0.752,0.278 0.182,-0.008 0.179,0.28 0.145,0.096 0.139,0.049 -0.016,0.192 -0.248,0.141 -0.067,0.168 -0.062,0.094 -0.112,-0.119 -0.114,-0.087 -0.265,0.263 -0.128,0.056 0.063,-0.284 -0.1,-0.111 -0.151,-0.285 -0.221,-0.176 -0.156,-0.059 -0.121,-0.111 -0.147,-0.045 -0.125,0.012 -0.212,-0.065 -0.014,-0.152 -0.059,-0.114 -0.166,-0.134 -0.791,-0.254 -0.005,0.105 0.055,0.079 0.114,0.053 0.136,0.102 -10e-4,0.303 -0.059,0.128 -0.025,0.182 -0.053,0.186 -0.097,0.146 -0.216,0.099 -0.095,-0.083 -0.154,-0.399 -0.218,-0.125 -0.346,-0.015 -0.235,0.09 -0.256,0.387 -0.207,0.063 -0.707,-0.2 -0.806,-0.306 0.021,-0.102 0.127,-0.033 0.244,0.042 -0.013,-0.105 -0.249,-0.342 -0.045,-0.154 0.032,-0.188 -0.081,0.004 -0.149,0.158 -0.514,-0.134 -0.142,-0.161 -0.302,-0.452 -0.426,-0.015 -0.193,-0.274 -0.349,0.115 -0.176,0.127 -0.155,0.197 0.06,0.102 0.155,0.162 -0.07,0.079 -0.497,0.115 -1.152,-0.129 -0.337,-0.121 -0.452,-0.256 -0.626,-0.208 -0.302,-0.034 -0.295,0.041 -0.86,0.021 -0.199,0.055 -0.17,0.089 -0.11,-0.098 -0.051,-0.175 0.1,-0.028 0.111,-0.103 0.1,-0.204 0.012,-0.124 -0.07,-0.08 -0.133,-0.008 -0.294,0.531 0.168,0.297 -0.011,0.107 -0.587,0.061 -1.333,0.597 -0.52,0.322 0.027,-0.108 0.628,-0.417 -0.222,-0.064 -0.357,0.104 -0.128,-0.04 0.151,-0.345 -0.049,-0.305 -0.254,-0.008 -0.162,0.243 -0.112,-0.01 -0.147,-0.104 -0.114,0.033 0.084,0.551 0.16,0.226 0.134,0.289 -0.365,0.355 -0.339,0.293 -0.037,0.283 -0.341,0.368 -0.32,0.209 -0.753,0.49 -0.215,0.104 -0.34,0.227 -0.468,0.17 -0.45,0.27 -0.151,0.041 0.287,-0.229 0.34,-0.226 -0.292,0.031 -0.45,-0.104 -0.275,-0.006 -10e-4,0.083 -0.209,0.117 -0.217,-0.171 -0.094,-0.115 -0.045,-0.1 -0.092,-0.024 -0.088,0.046 0.324,0.7 0.138,0.03 0.152,0.069 -0.19,0.163 -0.205,0.124 -0.322,0.082 -0.272,-0.255 -0.059,0.32 -0.035,0.319 -0.091,0.082 -0.146,0.117 -0.079,-0.088 -0.038,-0.124 -0.094,0.11 -0.137,0.083 -0.226,0.017 -0.169,0.044 0.004,0.132 0.039,0.133 0.3,-0.105 -0.109,0.341 -0.276,0.337 -0.225,0.079 -0.344,-0.049 -0.085,0.034 -0.076,0.07 0.401,0.525 -0.258,0.791 -0.165,0.287 -0.114,0.037 -0.126,0.009 -0.444,-0.254 -0.242,-0.197 0.214,0.535 0.582,0.156 0.03,0.203 -0.003,0.172 -0.115,0.203 -0.107,0.269 0.079,0.187 0.092,0.463 0.079,0.212 0.086,0.643 0.092,0.278 0.529,1.022 0.178,0.008 0.028,0.11 -0.017,0.212 -0.38,0.062 -0.16,0.094 -0.031,0.082 -0.023,0.044 -0.049,-0.004 -0.181,-0.059 -0.413,-0.29 -0.601,-0.18 -0.79,-0.07 -0.54,-0.145 -0.29,-0.221 -0.302,-0.132 -0.315,-0.041 -0.262,-0.12 -0.207,-0.199 -0.303,-0.127 -0.399,-0.056 -0.26,-0.149 -0.18,-0.366 -0.001,-0.005 -0.162,-0.612 -0.204,-0.384 -0.396,-0.476 -0.036,-0.063 0,0 -0.003,-0.078 0.049,-0.277 -0.042,-0.2 -0.125,-0.163 -0.029,-0.172 0.068,-0.181 0.004,-0.218 -0.059,-0.255 -0.252,-0.276 -0.446,-0.296 -0.38,-0.434 -0.313,-0.571 -0.31,-0.396 -0.307,-0.221 -0.209,-0.27 -0.113,-0.319 -0.033,-0.185 0.046,-0.051 -0.188,-0.355 -0.423,-0.659 -0.243,-0.483 -0.063,-0.306 -0.269,-0.364 -0.476,-0.423 -0.258,-0.275 -0.063,-0.191 -0.001,0 -0.742,-0.558 -0.216,-0.349 -0.168,-0.11 -0.193,0.012 -0.099,-0.034 -0.005,-0.079 -0.063,-0.004 -0.121,0.072 -0.395,0.014 -0.669,-0.042 -0.483,-0.095 -0.297,-0.147 -0.208,0.02 -0.12,0.188 -0.254,0.121 -0.389,0.054 -0.334,0.348 -0.28,0.642 -0.123,0.412 0.034,0.184 -0.074,0.133 -0.182,0.083 -0.185,0.186 -0.188,0.289 -0.22,0.14 -0.251,-0.01 -0.464,-0.222 -0.676,-0.436 -0.53,-0.27 -0.384,-0.103 -0.339,-0.202 -0.294,-0.301 -0.271,-0.201 -0.248,-0.101 -0.29,-0.334 -0.332,-0.568 -0.166,-0.439 0,-0.464 -0.434,-1.013 -0.23,-0.44 -0.171,-0.203 -0.334,-0.242 -0.499,-0.282 -0.668,-0.564 -0.838,-0.849 -0.593,-0.512 -0.348,-0.174 -0.302,-0.307 -0.256,-0.44 -0.25,-0.281 -0.026,-0.013 -0.022,-0.006 -0.617,-0.004 -0.617,-0.004 -0.617,-0.004 -0.617,-0.003 -0.617,-0.004 -0.617,-0.003 -0.617,-0.004 -0.617,-0.004 -0.002,0.369 -0.01,0.372 -0.001,0.368 -0.002,0.368 -0.992,0.002 -0.992,0.002 -0.992,0.002 -0.992,0.002 -0.992,0.002 -0.992,0.002 -0.992,0.002 -0.992,0.002 -1.331,-0.484 -1.331,-0.485 -1.331,-0.486 -1.331,-0.487 -1.331,-0.487 -1.331,-0.488 -1.331,-0.489 -1.331,-0.49 0.134,-0.187 0.178,-0.5 -0.321,0.036 -0.803,0.071 -0.803,0.071 -0.803,0.071 -0.803,0.071 -0.803,0.071 -0.803,0.071 -0.803,0.071 -0.803,0.071 -0.006,-0.021 -0.02,-0.363 -0.13,-0.128 -0.167,0.079 -0.076,-0.472 0.042,-0.223 -0.02,-0.218 -0.157,-0.537 -0.417,-0.652 -0.901,-0.813 -0.459,-0.272 -0.36,-0.344 -0.229,-0.096 -0.288,-0.026 -0.083,0.155 -0.326,-0.106 0.049,-0.385 -0.318,-0.536 -0.26,-0.06 -0.655,0.036 -0.875,-0.295 -0.258,-0.176 -0.089,-0.315 -0.41,-0.274 -0.54,-0.269 -0.301,0.063 -0.393,-0.042 -0.561,-0.194 -0.327,-0.024 -0.637,0.057 -0.238,-0.041 -0.221,-0.245 -0.238,-0.123 0.05,-0.302 -0.03,-0.273 0.036,-0.213 -0.107,-0.467 0.083,-0.434 -0.072,-0.157 -0.135,-0.121 -0.422,-0.178 -0.077,-0.223 0.069,-0.31 -0.11,-0.205 -0.346,-0.191 -0.323,-0.434 -0.41,-0.238 -0.168,-0.399 -0.252,-0.247 -0.088,-0.219 -0.56,-0.783 -0.598,-0.613 -0.092,-0.354 -0.023,-0.485 0.234,-0.296 0.126,-0.261 -0.013,-0.239 -0.036,-0.176 -0.206,-0.306 -0.796,-0.182 -0.647,-0.759 -0.038,-0.582 -0.254,-0.596 -0.003,-0.389 -0.039,-0.421 0.193,-0.092 0.172,0.034 -0.017,0.167 0.058,0.301 0.203,0.226 0.193,0.099 0.176,0.219 0.132,0.066 0.136,0.016 -0.073,-0.141 -0.078,-0.09 -0.095,-0.292 -0.18,-0.373 -0.207,-0.206 -0.105,-0.376 -0.09,-0.087 -0.056,-0.14 0.2,-0.166 0.273,-0.118 0.366,-0.032 1.038,0.056 0.221,-0.097 0.183,0.031 0.134,-0.012 -0.282,-0.1 -0.158,0.033 -0.187,-0.021 -0.371,0.02 -0.15,-0.042 -0.165,-0.118 -0.108,-0.012 -0.343,0.206 -0.153,-0.025 -0.362,-0.225 -0.158,-0.032 -0.254,0.128 -0.031,0.551 0.079,0.409 -0.152,0.042 -0.177,-0.168 -0.271,-0.1 -0.224,-0.153 -0.316,-0.285 -0.166,-0.104 -0.188,0.237 -0.007,-0.109 0.093,-0.276 -0.026,-0.463 0.283,0.37 -0.088,-0.26 -0.22,-0.287 -0.167,-0.1 -0.21,-0.514 -0.473,-0.309 -0.379,-0.5 -0.776,-0.831 -0.051,-0.732 -0.283,-0.929 0.119,-0.53 -0.016,-0.376 -0.139,-0.57 -0.145,-0.31 -0.629,-0.853 -0.605,-0.576 -0.091,-0.437 -0.042,-0.441 0.132,-0.393 0.115,-0.415 0.083,-0.11 0.033,0.046 -0.023,0.088 0.086,0.027 0.033,-0.183 0.051,-0.094 -0.09,-0.012 0.009,-0.058 0.054,-0.116 0.188,-0.546 -0.02,-0.69 0.201,-0.849 -0.01,-0.281 -0.128,-0.606 -0.128,-0.364 -0.228,-0.258 0.101,-0.378 -0.008,-0.361 -0.403,-0.521 -0.154,-0.685 -0.029,-0.29 0.04,-0.768 -0.105,-0.329 -0.269,-0.543 0.115,-0.473 0.124,-0.289 0.303,-1.263 0.073,-0.103 0.126,0.003 0.221,-0.215 -0.102,-0.05 -0.154,0.103 0.137,-0.502 0.154,-0.431 0.1,-0.155 0.051,-1.412 0.088,-1.085 0.145,-0.359 -0.051,-0.371 0.059,-0.503 -0.042,-0.51 0.311,-2.469 -0.041,-0.3 0.095,-0.403 -0.089,-1.065 0.04,-1.198 -0.079,-0.153 -0.04,-0.166 0.074,-0.025 0.144,0.175 0.668,-0.002 0.426,-0.162 0.155,0.053 0.18,0.22 0.227,0.044 0.283,-0.039 -0.086,-0.055 -0.133,-0.015 -0.298,-0.203 -0.169,-0.203 -0.521,0.014 -0.106,-0.13 -0.582,0.13 -0.18,-0.133 -0.317,0.086 0.078,-0.378 -0.014,-0.478 0.017,-0.466 0.078,0.34 0.197,0.361 0.095,-0.409 0.065,-0.516 -0.192,-0.198 -0.32,-0.147 -0.115,-0.482 0.757,-0.412 -0.402,-0.087 -0.158,-0.185 -0.195,-0.023 -0.015,0.143 -0.063,0.187 -0.068,-0.249 -0.02,-0.293 -0.08,-0.501 -0.31,-0.809 -0.188,-1.053 -0.236,-0.522 -0.452,-0.5 -0.118,-0.292 -0.108,-0.743 0.061,-0.564 -0.084,-0.398 0.217,0.023 0.571,0.313 0.711,0.245 0.215,0.178 0.345,0.132 1.912,0.205 0.125,-0.02 0.247,-0.127 0.105,0.016 0.281,0.291 0.141,0.035 0.183,-0.015 0.135,-0.055 0.231,-0.199 0.031,0.074 -0.004,0.185 0.082,0.263 0.169,0.34 0.064,0.211 -0.342,0.594 -0.065,0.013 -0.01,-0.201 -0.045,-0.04 -0.644,1.002 -0.226,0.473 -0.022,0.213 0.008,0.125 0.09,0.031 0.206,-0.049 0.305,-0.196 0.015,-0.043 -0.284,0.07 -0.136,0.006 0.019,-0.224 0.032,-0.106 0.186,-0.332 0.195,-0.199 0.277,-0.212 0.16,-0.175 0.11,-0.256 0.308,-0.306 0.057,-0.085 -0.013,-0.252 0.019,-0.048 0.149,0.034 0.062,0.434 -0.037,0.193 -0.266,0.235 -0.033,0.083 0.046,0.321 -0.041,0.031 -0.101,-0.038 -0.031,0.021 0.251,0.348 0.08,0.27 0.011,0.241 -0.068,0.461 -0.073,0.077 -0.125,-0.028 -0.166,-0.144 -0.037,0.046 -0.132,0.358 -0.043,-0.031 -0.082,-0.425 -0.045,-0.032 -0.255,0.194 -0.103,0.186 -0.088,0.296 -0.112,0.139 0.318,0.03 0.287,-0.06 0.23,0.141 0.078,0.004 0.21,-0.138 0.064,-0.093 0.174,-0.447 0.087,-0.08 0.129,-0.003 0.125,-0.067 0.186,-0.246 0.008,-0.098 -0.068,-0.551 0.02,-0.313 -0.035,-0.099 -0.083,-0.103 0.01,-0.1 0.065,-0.165 0.005,-0.149 -0.056,-0.133 0.025,-0.151 0.176,-0.326 0.033,-0.144 0.214,-0.325 -0.054,-0.131 -0.158,-0.16 -0.1,-0.141 -0.1,-0.22 -0.076,-0.074 -0.025,0.034 0.107,0.36 -0.023,0.024 -0.278,-0.194 -0.065,-0.123 -0.034,-0.167 0.024,-0.125 0.15,-0.124 0.179,-0.045 -0.015,-0.104 -0.224,-0.338 -0.149,-0.154 -0.115,-0.075 -0.155,-0.02 -0.069,-0.055 -0.018,-0.079 0.033,-0.104 0.083,-0.034 0.239,0.042 0.129,-0.074 -0.012,-0.135 -0.039,-0.075 0.006,-0.484 -0.091,-0.394 -0.047,-0.067 -0.051,-0.007 -0.054,0.053 -0.15,0.014 -0.093,-0.129 -0.103,-0.25 -0.186,-0.596 0.288,0 1.197,0 1.196,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.197,0 1.194,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.197,0 1.196,0 1.197,0 1.197,0 1.196,0 0.662,0.006 0.011,-0.903 0.008,-0.714 0.606,0.087 0.181,0.13 0.058,0.062 -0.017,0.197 0.05,0.597 0.11,0.496 0.254,0.595 0.001,0.001 0.021,0.232 0.083,0.145 0.153,0.135 0.58,0.163 1.007,0.191 0.571,0.219 0.135,0.247 0.269,0.099 0.403,-0.048 0.282,-0.103 0.241,-0.23 z m -82.523,-0.238 0.037,0.092 -0.113,0.09 -0.08,0.014 -0.128,-0.144 -0.056,-0.018 0.045,0.222 -0.016,0.076 -0.261,-0.136 -0.048,-0.108 0.073,-0.114 0.165,-0.118 0.057,-0.014 0.325,0.158 z m -0.648,0.727 0.074,0.139 -0.302,-0.089 -0.127,-0.08 -0.038,-0.078 -0.045,-0.255 0.021,-0.083 0.135,-0.029 0.252,0.316 0.03,0.159 z m 0.539,0.293 -0.044,0.042 -0.15,-0.055 -0.088,-0.094 -0.03,-0.117 0.056,-0.225 0.075,-0.058 0.047,0.013 0.02,0.198 0.133,0.209 -0.019,0.087 z m 0.697,1.156 0.137,0.549 0.059,-0.229 0.382,0.396 0,0.195 -0.046,0.065 -0.08,0.023 -0.073,-0.057 -0.067,-0.137 -0.086,-0.072 -0.183,-0.046 -0.095,-0.156 -0.033,-0.106 -0.009,-0.308 -0.046,-0.096 -0.097,-0.021 -0.093,-0.073 -0.144,-0.216 -0.02,-0.058 0.068,-0.176 0.156,-0.295 0.113,-0.14 0.07,0.015 0.087,0.089 0.104,0.162 -0.02,0.114 -0.42,0.223 -0.014,0.052 0.204,0.063 0.075,0.056 0.071,0.184 z m 94.347,0.965 -0.014,0.069 0.102,0.021 -0.019,0.035 -0.111,0.063 -0.314,0.128 -0.21,0.041 -0.108,-0.046 -0.011,-0.085 0.085,-0.125 0,-0.062 -0.087,0 0.021,-0.05 0.129,-0.099 1.098,-0.631 0.469,-0.23 0.25,-0.073 0.04,0.036 -0.271,0.238 -0.043,0.097 0.01,0.065 -0.089,0.125 -0.803,0.442 -0.124,0.041 z m -94.135,1.379 -0.015,0.08 -0.155,-0.095 -0.051,-0.088 0.006,-0.197 0.039,-0.128 0.029,-0.026 0.091,0.056 0.026,0.033 0.03,0.365 z m 0.289,0.826 -0.013,0.094 -0.107,0.073 -0.056,-0.019 -0.004,-0.111 -0.029,-0.017 -0.116,0.133 0.009,-0.263 0.057,-0.277 0.05,-0.005 0.074,0.182 0.135,0.21 z m 95.904,0.762 -0.052,0.133 0.01,0.08 -0.341,0.352 -0.124,0.222 -0.103,0.035 -0.083,-0.151 0,-0.122 0.084,-0.092 0.083,-0.131 0.01,-0.181 -0.032,-0.066 -0.104,0.163 0.058,0.035 0.017,0.028 -0.02,0.059 -0.392,-0.087 -0.117,-0.127 0.02,-0.177 0.131,-0.227 0.471,-0.481 0.208,-0.134 0.59,-0.212 0.325,-0.049 0.327,0 0.237,0.07 0.147,0.139 -0.139,0.092 -0.646,0.079 -0.018,0.025 0.124,0.076 0.023,0.054 -0.114,0.141 -0.58,0.454 z m -97.192,0.024 -0.027,0.081 -0.04,-0.004 -0.088,-0.165 -0.011,-0.116 0.075,-0.084 0.101,0.241 -0.01,0.047 z m 91.004,0.735 -0.092,0.064 -0.035,-0.03 0.022,-0.126 0.046,-0.073 0.071,-0.021 0.035,0.031 -0.001,0.082 -0.046,0.073 z m -0.789,0.404 -0.042,0.029 -0.107,-0.069 -0.015,-0.057 0.029,-0.057 0.05,0.013 0.07,0.083 0.015,0.058 z m 0.453,0.033 -0.094,0.023 -0.201,-0.036 0.003,-0.06 0.209,-0.083 0.093,-0.023 0.022,0.035 -0.032,0.144 z m -0.46,0.556 -0.161,0.056 -0.067,-0.01 0.027,-0.077 0.083,-0.092 0.374,-0.23 0.065,0.004 0.02,0.055 -0.181,0.113 -0.068,0.06 -0.008,0.063 -0.084,0.058 z m 18.46,1.714 0,0.087 -0.086,-0.02 -0.072,-0.059 -0.058,-0.098 -0.072,-0.245 -0.11,-0.174 0.165,-0.197 0.099,-0.023 0.106,0.044 0.015,0.115 -0.078,0.186 0.004,0.19 0.087,0.194 z m 0.034,0.471 -0.04,0.022 -0.141,-0.158 -0.03,-0.097 0.021,-0.081 0.054,-0.004 0.088,0.074 0.05,0.086 0.011,0.098 -0.013,0.06 z m 1.732,0.94 0.027,0.09 -0.068,0.132 -0.197,0.067 -0.4,-0.007 -0.259,-0.051 -0.119,-0.094 -0.026,-0.049 0.011,-0.105 0.058,-0.007 0.085,0.057 0.127,-0.024 0.169,-0.106 0.089,-0.08 0.008,-0.053 -0.054,-0.102 0.043,-0.043 0.212,0.04 0.079,0.066 0.143,0.228 0.072,0.041 z m -2.957,0.774 0.359,0.056 0.035,-0.031 0.102,0.106 0.016,0.09 -0.043,0.075 -0.063,0.042 -0.081,0.007 -0.13,-0.076 -0.212,-0.202 0.017,-0.067 z m -2.791,0.874 -0.096,0.02 -0.073,-0.047 0.012,-0.188 0.098,-0.328 0.096,-0.15 0.13,0.061 -0.026,0.04 0.026,0.35 -0.047,0.153 -0.12,0.089 z m -3.677,0.998 -0.084,0.04 -0.154,-0.014 -0.056,-0.09 0.081,-0.229 0.033,0.042 0.134,0.003 0.046,0.022 0.015,0.057 -0.015,0.169 z m -0.365,0.442 -0.052,0.051 -0.087,-0.034 -0.034,0.075 0.02,0.183 -0.029,0.084 -0.077,-0.014 -0.004,0.034 0.068,0.081 0.007,0.089 -0.053,0.097 -0.052,0.045 -0.049,-0.007 -0.077,0.11 -0.104,0.227 -0.036,0.131 0.033,0.036 -0.024,0.076 -0.259,0.344 -0.1,0.033 -0.109,-0.048 -0.077,-0.1 -0.045,-0.153 -0.013,-0.118 0.018,-0.084 0.228,-0.305 0.101,-0.199 0.058,-0.224 0.105,-0.143 0.154,-0.062 0.125,-0.139 0.095,-0.217 0.11,-0.094 0.124,0.028 0.054,0.082 -0.019,0.135 z m 2.85,0.551 -0.033,0.056 -0.078,-0.005 -0.062,-0.054 -0.061,-0.175 0.02,-0.038 0.151,0.025 0.053,0.074 0.01,0.117 z m 49.925,3.03 -0.164,0.076 -0.179,-0.033 0.004,0.206 -0.02,0.074 -0.198,-0.106 -0.073,-0.068 0.006,-0.273 0.175,-0.259 0.134,-0.103 0.172,0.071 0.132,0.29 0.011,0.125 z m -22.239,0.215 -0.088,0.032 -0.021,-0.046 0.014,-0.043 0.073,-0.054 0.123,0 -0.014,0.043 -0.087,0.068 z m 21.015,0.318 -0.106,0.077 -0.114,-0.025 -0.004,-0.192 0.035,-0.065 0.039,-0.029 0.059,0.054 0.091,0.18 z m -21.438,0.801 -0.042,0.012 0.004,-0.083 0.043,-0.054 0.082,-0.024 -0.002,0.042 -0.085,0.107 z m -7.487,3.732 -0.086,0.131 -0.083,-0.013 -0.061,-0.042 -0.021,-0.083 0.015,-0.104 0.074,-0.046 0.201,0.04 0.007,0.042 -0.046,0.075 z m 21.578,5.782 -0.139,0.102 -0.155,-0.018 0.079,-0.138 0.03,-0.203 0.077,-0.223 0.044,-0.068 0.091,-0.06 -0.027,0.608 z m -0.348,0.025 -0.078,0.069 -0.029,-0.18 0.055,-0.208 0.055,-0.004 0.028,0.11 -0.031,0.213 z m 2.4,0.406 -0.773,0.182 -0.123,-0.117 0.193,-0.055 0.243,-0.279 0.162,-0.032 0.254,0.158 0.044,0.143 z m 1.493,0.413 -0.216,0.06 -0.5,-0.137 0.411,-0.116 0.067,-0.041 0.054,-0.171 0.007,-0.086 0.156,0.368 0.021,0.123 z m -7.105,1.038 -0.199,0.239 0.18,0.024 0.155,-0.07 0.146,-0.142 0.341,-0.192 0.291,-0.084 0.091,-0.018 0.139,0.135 0.275,-0.108 0.283,-0.061 -1.223,0.617 -0.25,0.069 -0.358,0.184 -0.338,0.13 -0.243,0.047 -1.211,0.456 -0.096,0.01 -0.104,-0.044 -0.998,0.234 -0.409,0.026 -0.373,0.082 0.276,-0.189 0.006,-0.071 -0.066,-0.055 -0.147,0.016 -0.151,0.194 -0.241,0.065 -0.048,-0.211 0.081,-0.164 0.109,-0.156 0.239,-0.245 0.343,-0.155 0.174,-0.134 0.121,0.118 0.026,-0.16 0.093,-0.092 0.101,-0.05 0.242,-10e-4 0.131,-0.025 0.094,-0.053 0.097,-0.01 0.266,0.073 0.259,-0.021 0.209,-0.1 0.218,-0.034 0.575,-0.022 0.571,-0.073 0.229,-0.13 0.48,-0.366 0.276,-0.102 -0.43,0.425 -0.232,0.194 z m -4.71,1.709 -0.134,0.015 0.134,-0.353 0.246,-0.162 0.089,0.034 0.003,0.125 -0.034,0.106 -0.165,0.165 -0.139,0.07 z m 0.154,3.078 -0.329,0.549 -0.007,-0.105 0.411,-0.682 -0.075,0.238 z m -3.368,6.427 -0.128,0.058 0.428,-0.71 0.249,-0.597 0.111,-0.207 -0.108,0.418 -0.188,0.384 -0.364,0.654 z m -0.849,7.1 -0.042,0.07 -0.187,-0.381 0.192,0.123 0.034,0.103 0.003,0.085 z m 0.257,2.115 -0.376,0.093 -0.033,-0.03 0.431,-0.195 0.136,-0.688 0.019,-0.318 -0.064,-0.562 0.002,-0.116 0.07,0.181 0.062,0.524 -0.023,0.396 -0.125,0.577 -0.099,0.138 z m -0.667,0.171 -0.51,0.244 -0.058,-0.015 0.335,-0.174 0.233,-0.055 z m -2.026,1.864 -0.07,0.039 0.257,-0.424 0.507,-0.539 0.137,-0.083 -0.422,0.46 -0.409,0.547 z m -0.119,-0.04 -0.063,0.008 -0.11,-0.037 -0.152,-0.072 -0.034,-0.053 0.145,0.019 0.214,0.135 z m -121.623,1.947 0.571,0.173 0.308,-0.083 0.056,0.083 -0.036,0.073 -0.694,0.13 -0.213,-0.091 -0.019,-0.125 -0.072,-0.12 0.099,-0.04 z m -1.19,0.184 -0.149,0.009 -0.23,-0.036 0.081,-0.079 0.127,-0.057 0.041,0.043 0.13,0.12 z m 0.738,0.358 -0.197,0.047 -0.149,-0.044 -0.238,-0.322 0.505,-0.043 0.218,0.14 0.029,0.039 -0.168,0.183 z m 4.759,1.789 0.142,0.246 -0.204,-0.03 -0.213,0.014 -0.065,-0.134 -0.063,-0.187 -0.043,-0.047 -0.146,-0.017 -0.011,-0.017 -0.017,-0.091 0.041,-0.043 0.458,0.208 0.121,0.098 z m -3.06,0.563 -0.125,0.006 -0.172,-0.031 -0.088,-0.18 0.141,-0.012 0.13,0.025 0.103,0.141 0.011,0.051 z m 3.053,1.298 -0.164,0.03 -0.181,-0.068 -0.156,-0.321 -0.172,-0.251 0.093,-0.072 0.139,0.242 0.349,0.368 0.092,0.072 z m 103.647,6.106 -0.125,0.793 -0.054,-0.281 -0.005,-0.272 0.094,-0.162 0.09,-0.078 z m -18.67,2.334 -0.247,0.069 -0.366,-0.007 -0.074,-0.024 0.146,-0.046 0.434,-0.062 0.107,0.07 z m -1.365,0.118 -0.036,0.036 -0.249,-0.067 -0.151,-0.063 -0.027,-0.063 0.417,0.113 0.046,0.044 z m -1.87,0.425 0.01,0.15 -0.138,-0.075 -0.204,-0.007 0.09,-0.051 0.063,-0.05 0.032,-0.054 0.257,-0.187 -0.073,0.137 -0.037,0.137 z m 1.113,0.891 -0.079,0.103 0.078,-0.491 -0.109,-0.414 0.115,0.182 0.038,0.216 -0.043,0.404 z m -0.173,0.306 -0.152,0.168 0.007,-0.064 0.112,-0.168 0.08,-0.066 -0.047,0.13 z m 11.174,0.225 -0.282,0.116 -0.305,-0.084 0.189,-0.016 0.137,0.034 0.347,-0.166 0.182,-0.125 0.21,-0.047 -0.478,0.288 z m -19.325,0.455 -0.104,0.046 -0.464,-0.278 -0.029,-0.119 0.229,-0.108 0.14,0.01 0.221,0.142 0.081,0.039 0.038,0.057 -0.021,0.089 -0.091,0.122 z m -9.11,1.137 -0.14,0.031 0.612,-0.492 0.128,-0.164 0.164,0.007 -0.273,0.275 -0.491,0.343 z m -4.841,3.16 -0.103,0.013 0.128,-0.171 0.208,-0.086 0.456,-0.329 0.186,-0.023 0.097,-0.113 0.042,-0.017 -0.027,0.139 -0.366,0.198 -0.621,0.389 z m -0.701,0.794 -0.061,0.008 0.136,-0.259 0.025,-0.104 0.223,-0.328 0.118,-0.049 0.049,0.14 -0.229,0.23 -0.261,0.362 z m 47.226,1.963 0.046,0.231 -0.258,-0.537 -0.319,-0.843 -0.17,-0.653 0.115,0.177 0.113,0.365 0.473,1.26 z m -48.178,-0.068 -0.088,0.181 0.024,-0.269 0.228,-0.613 0.463,-0.807 0.195,-0.135 -0.534,0.885 -0.288,0.758 z m 0.513,3.565 -0.039,0.145 -0.232,-0.675 -0.378,-1.532 -0.014,-0.876 0.06,-0.302 0.097,1.238 0.418,1.565 0.088,0.437 z m 42.342,-1.224 -0.004,0.183 -0.142,-0.307 -0.094,-0.34 0.135,0.11 0.105,0.354 z m 0.13,0.308 -0.1,0.082 -0.203,-0.06 -0.11,-0.107 -0.048,-0.209 0.176,0.222 0.063,0.05 0.222,0.022 z m 4.646,4.066 -0.558,0.579 0.062,-0.145 0.218,-0.31 0.07,-0.146 0.147,-0.092 0.137,-0.167 0.01,-0.196 0.199,-0.137 0.065,-0.02 -0.35,0.634 z m -0.72,0.736 -0.075,0.015 0.111,-0.131 0.031,0.01 -0.067,0.106 z m -0.536,0.306 -0.053,0 0.026,-0.044 0.111,-0.087 0.04,0.034 -0.004,0.044 -0.12,0.053 z m -0.603,0.267 -0.128,0.073 -0.133,-0.054 0.146,-0.073 0.435,-0.078 -0.164,0.097 -0.156,0.035 z m -0.815,0.204 -0.084,0.063 -0.04,-0.02 0,-0.092 -0.12,-0.204 0.004,-0.053 0.274,0.199 0.007,0.054 -0.041,0.053 z m -0.651,0.155 -0.182,0.03 0.147,-0.121 0.047,-0.184 0.086,0.143 -0.001,0.087 -0.097,0.045 z m -0.61,0.17 -0.071,0.007 -0.006,-0.047 0.123,-0.058 0.082,0.004 -0.003,0.064 -0.125,0.03 z m -217.752002,7.934 -0.247,0.169 -0.144,-0.073 -0.272,-0.027 -0.105,-0.127 -0.285,-0.115 -0.115,-0.156 0.175,-0.296 0.414,-0.25 0.638,0.011 0.133,0.197 0.012,0.147 -0.083,0.165 -0.038,0.232 -0.083,0.123 z m -2.266,0.274 -0.057,0.133 -0.097,-0.021 -0.024,-0.118 0.063,-0.163 0.16,-0.141 0.178,-0.214 0.146,0.032 -0.079,0.141 -0.009,0.152 -0.206,0.086 -0.075,0.113 z m 6.682,1.155 0.096,0.017 0.124,-0.021 0.043,0.239 0.144,0.132 0.053,0.079 -0.156,0.083 -0.303,0.033 -0.142,-0.066 -0.147,-0.149 -0.159,0.041 -0.028,-0.12 -0.028,-0.035 -0.109,0.032 0.102,0.155 -0.276,0.012 -0.087,-0.019 -0.077,-0.175 -0.284,-0.336 10e-4,-0.131 -0.097,-0.156 0.421,-0.045 0.288,-0.275 0.163,-0.029 0.312,0.444 -0.008,0.124 0.069,0.122 0.085,0.044 z m 1.643,0.722 0.593,0.082 0.14,-0.035 0.099,0.067 0.491,0.042 0.084,0.025 -0.1,0.154 -0.314,0.141 -0.452,-0.124 -0.756,-0.044 0.031,-0.119 0.072,-0.084 0.011,-0.147 0.101,0.042 z m 2.04,0.846 0.073,0.053 0.299,-0.08 0.216,-0.029 0.362,0.197 0.126,0.135 0.238,0.144 0.081,0.104 -0.066,0.126 -0.263,0.208 -0.358,0.048 -0.211,0.089 -0.277,-0.019 -0.083,-0.038 -0.03,-0.264 -0.088,-0.283 -0.179,0.033 -0.201,-0.095 -0.208,-0.238 -0.023,-0.142 0.115,-0.226 0.201,-0.029 0.149,0.125 0.127,0.181 z m -1.018,0.478 -0.166,0.084 -0.181,-0.039 -0.042,-0.204 -0.174,-0.259 0.306,-0.053 0.172,0.075 0.09,0.081 0.109,0.139 -0.114,0.176 z m 3.56,5.223 -0.124,0.142 -0.155,-0.011 -0.563,-0.304 -0.068,-0.163 0.042,-0.759 -0.211,-0.616 -0.232,-0.472 0.169,-0.242 0.223,-0.188 0.249,-0.354 -0.204,-0.455 0.052,-0.275 0.12,-0.047 0.588,0.334 1.188,0.502 0.316,0.353 0.056,0.378 0.216,0.048 0.103,0.259 0.312,0.227 0.104,0.129 -0.129,0.208 -0.57,0.399 -0.719,0.174 -0.633,0.446 -0.13,0.287 z",
                        title: "United States",
                        id: "US",
                    },
                    {
                        d:
                            "m 325.11175,563.0224 -0.138,0.125 -0.148,0.235 -0.174,0.567 -0.585,0.782 -0.119,0.443 -0.631,0.463 -0.445,0.522 -0.29,-0.013 -0.262,0.224 -1.507,0.68 -0.541,-0.128 -0.401,0.002 -0.372,-0.3 -0.849,-0.108 -0.533,0.12 -0.715,0.33 -0.216,-0.005 -0.155,-0.018 -0.387,-0.137 -0.211,-0.291 -1.101,-0.336 -0.885,-0.761 -1.046,-0.015 -0.802,0.1 -0.124,-0.101 -0.081,-0.194 -0.166,-0.282 -0.69,-0.669 -0.542,-0.662 -0.106,-0.65 0.075,-0.705 0.163,-0.833 -0.029,-0.26 0.201,-0.147 0.197,-0.03 0.191,-0.215 0.171,-0.324 0.029,-0.245 -0.132,-0.454 -0.092,-0.632 -0.109,-0.315 0.219,-0.495 0.009,-0.241 -0.126,-0.212 -0.034,-0.217 0.057,-0.223 -0.011,-0.213 -0.08,-0.205 0.06,-0.17 0.201,-0.135 0.151,-0.205 0.099,-0.277 0.051,-0.211 0.002,-0.146 -0.061,-0.137 -0.124,-0.129 0.058,-0.256 0.238,-0.384 0.155,-0.34 0.069,-0.296 -0.004,-0.24 -0.079,-0.181 0.033,-0.123 0.147,-0.065 0.066,-0.192 -0.022,-0.477 -0.152,-0.392 0.116,-0.311 0.332,-0.359 0.174,-0.289 0.014,-0.22 0.104,-0.127 0.159,0.238 0.472,0.063 0.476,0.008 0.077,-0.06 0.187,-0.389 0.246,-0.111 0.268,-0.029 0.293,0.02 0.312,0.257 0.883,0.843 0.648,0.587 0.197,0.277 0.172,0.208 0.128,0.193 -0.055,0.504 0.009,0.221 0.03,0.063 0.148,0.006 0.22,-0.037 0.185,-0.107 0.144,-0.162 0.141,-0.132 0.115,-0.07 0.041,-0.107 0.066,-0.111 0.067,-0.024 0.128,0.082 0.303,0.288 0.234,0.267 0.058,0.152 0.09,0.159 0.097,0.139 0.068,0.136 0.227,0.176 0.232,0.112 0.155,-0.115 0.393,0.368 0.865,0.307 0.159,0.186 0.15,0.265 0.302,0.401 0.419,0.362 0.337,0.153 0.324,0.087 0.181,0.08 0.124,0.139 0.197,0.149 0.125,0.056 0.042,0.134 0.128,0.293 0.134,0.371 0.145,0.345 0.315,0.332 0.356,0.258 0.369,0.146 0.207,0.182 0.09,0.188 -0.249,0.28 -0.27,0.353 -0.238,0.277 -0.246,0.194 -0.082,0.134 -0.055,0.207 0.003,1.102 -0.02,0.411 0.017,0.109 0.036,0.073 0.155,0.11 0.185,0.092 z",
                        title: "Uruguay",
                        id: "UY",
                    },
                    {
                        d:
                            "m 674.00675,332.5914 0.091,-0.067 0.16,-0.068 0.264,0.131 0.231,0.165 0.056,0.076 -0.011,0.088 -0.551,0.321 -0.342,0.15 -0.151,0.027 -0.041,0.042 -0.108,0.365 -0.212,0.065 -0.272,0.111 -0.19,0.168 -0.303,0.396 -0.77,0.575 -0.011,0.117 0.067,0.095 0.25,0.066 0.33,0.176 0.179,0.138 0.489,-0.178 0.121,0.039 0.128,0.184 0.135,0.514 0.219,0.14 0.287,0.107 0.178,0.035 0.237,0.126 0.316,0.047 0.212,-0.046 0.265,0.108 0.043,-0.047 0.035,-0.766 0.222,0.128 0.128,-0.002 0.112,-0.094 0.058,-0.127 0.038,-0.253 -0.049,-0.253 0.099,-0.116 0.077,-0.026 0.057,0.031 0.034,0.065 0.01,0.229 0.16,0.097 0.098,0.056 0.093,0.194 0.091,0.185 0.058,0.433 0.225,0.03 0.264,0.083 0.177,-0.081 0.137,0.048 0.047,0.205 -10e-4,0.191 0.02,0.152 0.071,0.043 0.23,-0.095 0.193,-0.013 0.178,0.091 0.221,0.138 0.321,0.362 0.106,0.052 0.484,0.028 0.101,0.074 0.166,0 0.18,-0.065 0.399,0.117 0.013,0.066 -0.067,0.091 -0.951,0.5 -0.07,0.154 -0.194,0.195 -0.212,0.111 -0.103,0.004 -0.465,-0.198 -0.054,0.048 -0.038,0.08 0.002,0.087 0.102,0.208 -0.047,0.131 -0.089,0.095 -0.291,-0.083 -0.054,-0.053 -0.006,-0.058 -0.112,0 -0.173,0.058 -0.333,0.359 -0.116,0.188 -0.043,0.113 -0.148,0.064 -0.161,0.024 -0.208,0.169 -0.226,0.131 -0.072,-0.096 -0.044,-0.107 -0.06,-0.034 -0.139,0.025 -0.168,0.004 -0.177,-0.121 -0.229,-0.122 -0.2,-0.043 -0.59,0.057 -0.292,0.06 -0.092,0.059 -0.164,0.016 -0.691,0.123 -0.141,-0.048 -0.104,-0.194 -0.091,-0.21 -0.179,-0.076 -0.201,-0.059 -0.075,-0.084 -0.005,-0.102 0.021,-0.1 0.016,-0.052 0.466,-0.402 0.42,-0.362 0.039,-0.029 0.038,-0.069 0.071,-0.125 0,-0.065 -0.314,-0.144 -0.012,-0.066 0.063,-0.068 0,-0.091 -0.222,-0.266 -0.384,-0.415 -0.111,-0.043 -0.082,0.027 -0.15,0.401 -0.075,0.102 -0.438,0.263 -0.366,0.181 -0.652,0.321 -0.17,0.101 -0.118,-0.018 -0.118,-0.063 -0.366,-0.325 -0.236,-0.111 -0.159,0.11 -0.134,0.16 0.013,0.329 -0.151,0.173 -0.151,0.078 0.275,0.879 -0.027,0.113 -0.21,0.031 0.154,0.33 -0.13,0.038 -0.331,-0.077 -0.445,-0.051 -0.84,0.146 -0.062,0.057 -0.023,0.073 0.049,0.066 0.407,0.007 0.398,-0.033 0.11,0.061 0.017,0.108 -0.046,0.068 -0.133,0.012 -0.291,0.065 -0.033,0.069 -0.01,0.066 0.099,0.191 0.11,0.122 0.014,0.072 -0.046,0.061 -0.056,0.024 -0.098,-0.09 -0.056,0.018 -0.027,0.082 -0.027,0.096 -0.064,0.07 -0.136,-0.037 -0.135,0.027 -0.08,0.348 -0.068,0.394 -0.222,0.262 -0.123,0.095 -0.181,0.028 -0.269,-0.032 -0.163,-0.039 -0.472,-0.058 -0.473,-0.107 -0.532,-0.1 -0.495,0.231 -0.143,0.141 -0.091,0.132 -0.093,0.061 -0.215,0.808 0.022,0.092 0.119,0.072 0.607,0.167 0.089,0.069 0.053,0.079 0.026,0.362 0.05,0.05 0.208,0.045 0.301,-0.003 0.236,-0.036 0.237,0.033 0.166,0.078 0.081,0.123 0.045,0.133 -0.282,0.793 0.023,0.288 0.087,0.412 0.16,0.323 0.301,0.315 0.229,0.202 0.048,0.095 0.012,0.147 -0.037,0.188 -0.132,0.298 -0.162,0.26 -0.175,0.11 -0.243,0.33 -0.215,0.405 -0.413,0.53 -0.139,0.295 -0.046,0.851 -0.109,0.255 -0.017,-0.097 -0.149,-0.097 -0.26,0.017 -0.171,-0.046 -0.082,-0.109 -0.212,0.031 -0.342,0.169 -0.349,-0.09 -0.355,-0.35 -0.677,-0.128 -0.857,0.08 -0.032,-0.388 0.002,-0.495 0.039,-0.659 0.292,-0.518 -0.009,-0.099 -0.057,-0.095 -0.089,-0.085 -0.519,-0.143 -0.152,-0.075 -0.201,-0.164 -0.254,-0.172 -0.221,-0.119 -0.347,-0.157 -0.32,-0.087 -0.188,0.066 -0.173,0.084 -0.162,0.002 -0.162,-0.046 -0.6,-0.393 -0.906,-0.68 -0.718,-0.476 -0.451,-0.228 -0.107,-0.073 -0.253,-0.214 -0.622,-0.578 -0.413,0.085 -0.59,-0.376 -0.53,-0.368 -0.12,-0.1 -0.603,-0.682 -0.602,-0.443 -0.656,-0.484 -0.424,-0.304 -0.719,-0.516 -0.352,-0.312 -0.119,-0.115 -0.116,-0.221 -0.188,-1.083 -0.216,-0.498 -0.308,-0.271 -0.262,-0.523 -0.218,-0.777 -0.18,-0.506 -0.143,-0.234 -0.288,-0.259 -0.437,-0.284 -0.414,-0.135 -0.149,0.005 -0.074,0.035 -0.084,0.048 -0.164,0.212 -0.242,0.022 -0.178,-0.005 -0.166,-0.076 -0.524,-0.067 -0.186,-0.074 -0.315,0.011 -0.677,0.11 -0.165,-0.02 -0.715,-0.474 -0.311,-0.188 -0.062,-0.104 0.003,-0.182 0.105,-0.258 0.09,-0.183 -0.04,-0.19 -0.136,-0.208 0,-0.222 0.093,-0.124 0.19,0.039 0.068,-0.078 -0.024,-0.118 -0.103,-0.084 -0.137,-0.189 -0.405,-0.176 -0.058,-0.072 0.021,-0.082 0.07,-0.088 0.014,-0.186 0.007,-0.24 0.054,-0.125 0.015,-0.098 -0.059,-0.079 -0.137,-0.092 -0.219,-0.223 -0.269,-0.024 -0.875,0.008 -0.271,-0.09 -0.218,-0.125 -0.218,-0.476 -0.11,-0.113 -0.103,-0.047 -0.245,-0.016 -0.295,-0.046 -0.151,-0.081 -0.412,-0.436 -0.396,-0.39 -0.159,0.368 -0.154,0.073 -0.349,-0.034 -0.262,-0.062 -0.149,0.083 -0.154,0.145 0.029,0.096 0.118,0.101 0.237,0.187 0.363,0.457 0.165,0.252 0.024,0.088 -0.031,0.066 -0.049,0.028 -0.072,-10e-4 -0.097,-0.001 -0.056,-0.075 -0.019,-0.13 -0.121,-0.197 -0.125,-0.114 -0.137,-0.071 -0.192,-0.053 -0.253,-0.094 -0.131,-0.004 -0.127,0.109 -0.106,0.147 -0.063,0.321 -0.189,0.394 -0.116,0.155 -0.36,0.094 -0.854,0.032 -0.255,0.123 -0.174,0.148 -0.323,0.479 -0.225,0.159 -0.195,0.219 0.059,0.702 0.094,0.817 0.164,0.226 0.104,0.068 0.014,0.08 -0.067,0.071 -0.086,0.089 -0.13,0.163 -0.146,-0.006 -0.294,-0.041 -0.245,-0.044 -0.824,-0.047 -0.668,-0.038 -0.742,-0.042 -10e-4,-0.856 0,-0.859 0,-0.862 -0.001,-0.865 0,-0.869 0,-0.872 -10e-4,-0.875 0,-0.878 0,-0.881 0,-0.885 -10e-4,-0.888 0,-0.892 0,-0.896 -10e-4,-0.899 0,-0.902 0,-0.906 0.35,-0.112 0.442,-0.143 0.424,-0.136 0.505,-0.163 0.569,-0.184 0.486,-0.157 0.58,-0.187 0.442,-0.143 0.415,-0.134 0.531,-0.16 0.826,-0.248 0.461,-0.139 0.466,-0.14 0.444,-0.134 0.297,-0.05 0.319,0.191 0.388,0.262 0.388,0.262 0.388,0.262 0.388,0.262 0.388,0.261 0.388,0.261 0.388,0.261 0.388,0.26 0.388,0.26 0.388,0.26 0.388,0.259 0.388,0.259 0.388,0.259 0.388,0.258 0.388,0.258 0.388,0.258 0.36,0.24 0.162,0.178 0.089,0.392 0.179,0.311 0.311,0.336 0.318,0.344 0.396,0.453 0.274,0.314 0.279,0.32 0.462,0.527 0.288,0.328 0.229,0.011 0.465,-0.078 0.622,-0.104 0.491,-0.083 0.594,-0.1 0.566,-0.095 0.446,-0.076 0.668,0.057 0.659,0.057 0.473,0.041 0.463,0.04 0.549,0.047 0.307,0.026 0.352,0.03 0.148,-0.079 0.303,-0.162 0.286,-0.152 0.297,-0.159 0.263,-0.08 0.274,0.253 0.229,0.292 0.241,0.307 0.279,0.295 0.271,0.175 0.363,0.237 0.209,0.404 0.279,0.539 0.184,0.354 0.189,0.363 0.275,-0.143 0.293,-0.153 0.266,-0.139 -0.032,0.449 -0.028,0.407 -0.045,0.615 -0.036,0.502 -0.096,0.598 -0.007,0.455 -0.006,0.399 -0.004,0.316 0.515,0.014 0.381,0.01 0.477,0.013 0.046,0.396 0.064,0.556 0.097,0.502 0.082,0.421 0.122,0.543 0.066,0.29 0.114,0.341 0.113,0.082 0.181,0.054 0.63,-0.041 0.522,-0.034 0.412,-0.026 0.438,-0.028 0.581,-0.038 0.197,0.087 0.17,-0.061 0.196,-0.061 0.156,0.247 0.079,0.125 0.111,0.13 0.15,0.121 -0.063,0.253 -0.093,0.369 -0.026,0.189 0.181,0.204 0.135,0.119 0.369,0.242 0.347,0.135 0.226,0.04 0.216,-0.052 0.079,-0.137 -0.02,-0.189 -0.104,-0.199 0.008,-0.237 0.069,-0.173 0.221,-0.315 0.209,-0.298 0.32,-0.304 0.381,-0.301 0.158,-0.22 0.061,-0.383 0.249,-0.217 0.269,-0.13 0.334,-0.113 0.092,-0.192 0.461,-0.326 0.276,-0.161 0.349,-0.094 0.482,-0.212 0.381,-0.25 0.365,-0.471 0.29,-0.309 0.244,-0.19 0.205,-0.007 0.144,0.154 0.124,0.013 0.081,-0.07 0.138,-0.198 0.148,-0.231 0.139,-0.096 0.269,-0.049 0.249,-0.153 z m -0.826,4.906 -0.01,-0.09 -0.087,-0.151 -0.13,-0.085 -0.062,0.037 0.053,0.123 0.151,0.175 0.085,-0.009 z m 1.554,3.833 -0.141,0.033 -0.258,-0.005 -0.147,-0.038 0.09,-0.296 0.003,-0.059 -0.011,-0.008 -0.074,-0.04 -0.112,-0.121 -0.039,-0.179 0.044,-0.166 0.082,-0.069 0.052,0.012 0.158,0.253 0.141,0.074 0.275,0.042 -0.139,0.25 0.103,0.267 -0.027,0.05 z m 1.609,-0.21 -0.075,0.157 -0.132,-0.038 -0.104,-0.104 0.034,-0.082 0.155,-0.045 0.081,-0.045 0.068,-0.008 -0.027,0.165 z",
                        title: "Uzbekistan",
                        id: "UZ",
                    },
                    { d: "m 509.80575,333.9114 -0.024,0.003 -0.009,-0.013 0.009,-0.017 0.021,-0.003 z", title: "Vatican City", id: "VA" },
                    {
                        d:
                            "m 303.20975,425.9094 -0.083,0.045 -0.206,-0.192 0.025,-0.224 0.125,-0.123 0.118,-0.072 0.121,-0.008 0.042,0.185 -0.029,0.261 -0.113,0.128 z m -0.145,0.468 -0.045,0.031 0.021,0 -0.021,0.021 -0.014,-0.021 -0.022,-0.013 -0.028,-0.006 -0.033,10e-4 0,-0.021 0.042,0.013 0.063,-0.013 0,-0.023 -0.019,-0.021 -0.008,-0.015 0.023,-0.022 0.078,-0.05 0.033,-0.026 0.004,0.011 10e-4,0.01 0.004,0.01 0.012,0.01 -0.04,0.039 -0.051,0.085 z m -0.304,0.857 -0.028,0.001 -0.025,-0.01 0.007,-0.009 0.032,-0.007 0.015,-0.019 -0.005,-0.025 10e-4,-0.028 0.025,-0.017 0.02,-0.001 0.009,0.011 0.005,0.026 -0.015,0.02 -0.017,0.016 -0.008,0.025 -0.016,0.017 z",
                        title: "Saint Vincent and the Grenadines",
                        id: "VC",
                    },
                    {
                        d:
                            "m 306.45675,438.9994 0.521,0.686 0.008,0.076 -0.057,0.086 -0.325,0.161 -0.073,0.083 -0.117,0.305 -0.409,0.167 -0.283,0.21 -0.19,0.184 -0.095,0.074 -0.374,0.041 -0.12,0.116 -0.151,0.348 -0.11,0.146 -0.194,0.171 -0.001,0.104 0.268,0.38 0.048,0.12 -0.083,0.181 0.008,0.128 0.141,0.154 0.168,0.035 0.164,-0.064 0.204,0.006 0.133,0.041 0.055,0.045 0.009,0.118 -0.084,0.25 -0.121,0.162 -0.536,0.248 -0.238,0.144 -0.132,0.106 -0.289,-0.057 -0.147,0.004 -0.113,0.082 -0.069,0.07 -0.194,0.018 -0.274,0.042 -0.115,0.047 -0.089,0.123 -0.074,0.175 0.062,0.21 0.086,0.188 -0.004,0.172 0.066,0.479 -0.086,0.112 -0.184,0.126 -0.219,0.224 -0.246,0.311 0.039,0.089 0.588,0.652 0.598,0.663 0.595,0.659 0.084,0.029 0.112,0.076 0.104,0.23 0.085,0.245 0.002,0.126 -0.067,0.159 -0.145,0.183 -0.176,0.148 -0.257,0.126 -0.205,0.119 -0.169,0.313 -0.103,0.11 -0.094,0.044 -0.186,0.041 -0.3,-0.01 -0.198,-0.024 -0.246,0.234 -0.313,0.086 -0.21,0.32 -0.748,0.254 -0.732,0.197 -0.201,0.078 -0.723,-0.163 -0.174,0.051 -0.2,0.152 -0.185,0.117 -0.156,0.007 -0.131,0.061 -0.078,0.217 -0.069,0.747 -0.26,0.222 -0.313,-10e-4 -0.215,-0.259 -0.255,-0.195 -0.445,-0.463 -0.124,-0.061 -0.115,0.003 -0.413,0.138 -0.196,-0.06 -0.158,-0.072 -0.264,0.023 -0.47,0.005 -0.3,0.004 -0.146,-0.126 -0.136,-0.259 -0.091,-0.093 -0.107,-0.075 -0.177,-0.038 -0.757,10e-4 -0.143,0 -0.104,-0.05 -0.146,-0.222 -0.159,-0.104 -0.187,-0.004 -0.082,0.123 0.324,0.399 0.094,0.217 0.284,0.313 0.821,0.663 0.152,0.21 -0.017,0.269 -0.005,0.411 0.028,0.389 0.211,0.558 0.296,0.567 0.081,0.362 -0.055,0.267 -0.057,0.143 0.006,0.063 0.061,0.057 0.283,0.082 0.594,0.051 0.359,0 0.548,0.062 0.041,0.199 -0.054,0.329 -0.108,0.187 -0.088,0.054 -0.298,0.043 -0.314,0.202 -0.456,0.199 -0.26,0.027 -0.108,0.039 -0.092,0.06 -0.076,0.076 -0.088,0.374 -0.134,0.422 -0.253,0.25 -0.278,0.207 -0.283,0.023 -0.227,-0.017 -0.113,0.061 -0.163,0.17 -0.233,0.212 -0.18,0.113 -0.242,-0.011 -0.259,0.104 -0.327,0.171 -0.217,0.14 -0.185,0.24 -0.265,0.251 -0.272,0.177 -0.13,0.218 -0.186,0.276 -0.232,0.009 -0.019,-0.166 0.111,-0.267 -0.121,-0.23 -0.221,-0.124 -0.104,-0.037 -0.103,0.015 -0.262,0.114 -0.321,0.207 -0.198,0.149 -0.179,0.068 -0.368,0.062 -0.31,0.032 -0.128,-0.042 -0.23,-0.152 -0.533,-0.476 -0.721,-0.644 -0.055,-0.187 0.031,-0.19 -0.131,-0.278 -0.077,-0.296 -0.065,-0.102 -0.019,-0.222 -0.156,-0.399 -0.128,-0.327 -0.118,-0.166 0.05,-0.142 -0.05,-0.141 -0.095,-0.115 -0.14,-0.371 0.049,-0.16 -0.037,-0.16 -0.118,-0.11 -0.167,-0.118 -0.223,-0.246 -0.266,-0.234 -0.136,-0.092 -0.093,-0.037 -0.081,-0.222 -0.062,-0.068 -0.136,-0.018 -0.279,-0.093 -0.26,0.111 -0.006,-0.172 0.074,-0.104 0.898,-0.822 0.452,-0.378 0.049,-0.056 0.04,-0.087 0.031,-0.117 -0.103,-0.134 -0.424,-0.635 -0.147,-0.12 -0.145,-0.098 -0.166,-0.267 -0.199,-0.621 -0.143,-0.312 -0.043,-0.24 0.009,-0.271 -0.053,-0.208 -0.115,-0.145 0,-0.443 0.115,-0.742 0.028,-0.564 -0.058,-0.386 0.103,-0.294 0.263,-0.202 0.147,-0.312 0.031,-0.422 0.158,-0.347 0.284,-0.271 0.097,-0.268 -0.09,-0.265 -0.029,-0.169 -0.241,-0.172 -0.447,-0.121 -0.37,-0.014 -0.224,0.135 -0.573,0.125 -0.922,0.115 -0.743,0 -0.563,-0.116 -0.428,0.039 -0.294,0.194 -0.207,0.044 -0.12,-0.106 -0.13,-0.029 -0.197,0.067 -0.034,-0.031 -0.437,-0.523 -0.404,-0.485 -0.464,-0.578 -0.535,-0.667 -0.096,-0.044 -0.166,0.004 -0.219,0.012 -0.34,-0.069 -0.233,-0.097 -0.182,-0.094 -0.336,-0.119 -0.23,-0.021 -0.207,0.035 -0.569,0.233 -0.323,0.022 -0.25,0.004 -0.672,-0.115 -0.459,-0.019 -0.534,0.076 -0.229,0.043 -0.32,-0.119 -0.218,-0.181 -0.203,-0.43 -0.143,-0.338 -0.249,-0.068 -0.276,-0.058 -0.136,-0.112 -0.082,-0.195 -0.02,-0.25 0.028,-0.407 0.026,-0.146 0.038,-0.439 0.152,-0.23 0.096,-0.111 -0.019,-0.185 -0.073,-0.378 -0.074,-0.268 -0.306,-0.303 -0.392,-0.389 -0.169,-0.623 -0.199,-0.736 -0.156,-0.074 -0.147,0.037 -0.156,-0.037 -0.138,-0.296 -0.138,-0.056 -0.22,0.104 -0.159,0.081 -0.403,0.074 -0.083,-0.074 0.028,-0.092 0.17,-0.269 0.2,-0.344 0.233,-0.313 0.216,-0.321 0.162,-0.342 0.11,-0.681 0.076,-0.47 0.2,-0.838 0.365,-0.669 0.138,-0.308 0.331,-0.401 0.152,-0.218 0.202,-0.172 0.555,-0.233 0.663,-1.153 0.152,-0.184 0.67,-0.172 0.515,-0.134 0.381,-0.141 0.125,-0.075 0.101,-0.035 -0.083,0.134 -0.183,0.17 -0.207,0.104 -1.067,0.261 -0.109,0.055 -0.139,0.108 -0.001,0.248 0.029,0.194 0.314,0.638 0.123,0.157 0.42,0.345 -0.096,0.048 -0.155,0.006 0.113,0.452 0.258,0.31 0.012,0.195 -0.198,0.606 -0.361,0.362 -0.256,0.421 -0.199,0.167 -0.441,0.828 0.335,0.493 0.048,0.25 0.29,0.355 0.189,0.116 0.126,0.144 -0.058,0.242 0.116,0.328 0.15,0.173 0.188,0.069 0.233,0 0.669,-0.219 0.159,-0.098 0.102,-0.175 0.335,-0.355 0.021,-0.459 0.072,-0.552 -0.082,-0.36 -0.352,-0.514 -0.154,-0.365 -0.349,-0.34 -0.214,-0.583 -0.088,-0.182 -0.066,-0.251 -0.075,-0.445 0.234,-0.162 -0.024,-0.365 0.576,-0.101 1.246,-0.594 0.771,-0.15 0.878,-0.317 0.204,-0.157 0.176,-0.261 0.137,-0.03 0.458,0.245 0.226,-0.085 0.089,-0.191 -0.125,-0.372 -0.263,0 -0.791,0.135 -0.077,-0.16 0,-0.141 -0.187,-0.444 0.116,-0.334 0.119,-0.271 0.227,-0.109 0.332,-0.118 0.251,0.181 0.152,0.172 0.083,0.167 0.057,0.453 0.135,0.458 0.142,0.318 0.226,0.24 0.173,-0.016 0.124,-0.04 0.823,-0.054 0.5,0.164 0.636,0.083 0.594,0.348 0.611,0.422 0.156,0.308 0.051,0.294 0.148,0.197 -0.147,0.203 0.08,0.338 0.175,0.341 0.264,0.217 0.753,0.059 0.814,-0.146 1.258,-0.133 0.405,-0.114 2.082,-0.062 0.397,0.164 0.039,0.163 0.004,0.125 0.67,0.61 0.55,0.083 0.467,0.195 0.483,0.105 0.528,0.148 0.297,-0.019 0.223,-0.052 0.262,-0.009 1.858,-1.02 0.996,0.026 0.153,-0.066 0.132,-0.089 -0.367,-0.155 -0.829,-0.06 -0.251,0.104 -0.142,-0.263 0.27,0.007 0.922,-0.088 1.057,0.058 0.861,-0.187 0.433,-0.031 0.25,0.037 0.686,-0.121 1.291,0.143 1.018,-0.118 -0.118,0.169 -0.334,0.103 -0.541,0.032 -0.413,0.247 -0.88,-0.045 -0.618,0.089 0.198,0.069 0,0.253 0.084,0.051 0.089,0.002 0.21,0.188 0.057,0.123 0.068,0.258 -0.093,0.279 -0.128,0.125 0.251,-0.042 0.142,-0.131 -0.021,-0.132 0.021,-0.153 0.141,0.048 0.099,0.069 0.321,0.73 0.226,0.383 0.058,-0.014 0.054,-0.014 0.067,-0.073 0.1,-0.18 0.086,0.114 0.052,0.044 0.052,0.014 -0.048,-0.163 0.064,-0.209 -0.022,-0.073 0.1,-0.016 0.12,0.028 0.17,0.058 0.303,0.24 0.2,0.249 0.017,0.139 0.073,0.078 0.131,0.082 0.064,0.128 0.012,-0.202 -0.077,-0.147 -0.019,-0.168 0.394,-0.007 0.103,-0.221 0.215,0.133 0.57,0.607 0.21,0.1 0.621,0.116 0.391,0.292 0.229,0.262 -0.136,0.274 -0.365,0.137 -0.146,0.171 -0.084,0.168 -0.001,0.169 -0.111,0.196 -0.016,0.069 -0.066,0.276 -0.15,0.333 -0.2,0.353 -1.042,0.008 0.257,0.145 0.237,0.105 0.389,0.277 0.309,-0.218 0.443,-0.016 0.479,-0.242 0.181,-0.038 0.896,0.126 0.216,-0.177 0.18,-0.052 0.485,0.033 0.431,0.195 z m -10.754,-7.307 0.09,0.371 -0.027,0.07 -0.254,0.25 -0.213,0.018 -0.172,-0.009 -0.13,-0.048 -0.167,-0.163 -0.163,0.049 -0.403,-0.057 -0.112,-0.057 0.151,-0.2 0.277,-0.081 0.102,-0.017 0.081,0.123 0.202,0.106 0.237,0.011 0.059,-0.189 0.321,-0.281 0.121,0.104 z m -3.825,0.638 -0.151,0.064 -0.277,-0.064 -0.139,-0.089 0.088,-0.102 0.227,0 0.213,0.124 0.039,0.067 z m 12.324,5.006 -0.337,0.093 0.005,-0.075 0.09,-0.131 0.175,-0.037 0.066,-0.045 0.111,-0.03 0.064,0.005 0.064,0.037 -0.153,0.074 -0.085,0.109 z m -0.496,0.766 -0.174,0.057 -0.026,-0.283 0.053,-0.076 0.296,-0.228 0.082,-0.043 0.06,0.048 -0.015,0.061 0.143,0.103 -0.035,0.13 -0.154,0.142 -0.23,0.089 z",
                        title: "Venezuela",
                        id: "VE",
                    },
                    {
                        d:
                            "m 294.47175,409.7094 0.04,0.099 -0.024,-0.002 -0.16,-0.068 -0.124,-0.005 -0.051,-0.018 -0.028,-0.037 0.248,-0.004 0.099,0.035 z m -0.301,0.812 -0.073,0.021 -0.047,-0.005 -0.016,-0.042 0.05,-0.117 0.285,-0.013 -0.199,0.156 z m -0.557,0.181 -0.22,0.011 -0.065,-0.037 0.124,-0.091 0.23,-0.011 0.067,0.024 -0.136,0.104 z",
                        title: "British Virgin Islands",
                        id: "VG",
                    },
                    {
                        d:
                            "m 292.90875,410.9164 -0.21,0.026 -0.291,-0.136 0.229,-0.052 0.148,0.033 0.124,0.129 z m 0.519,-0.071 -0.186,0.078 -0.125,-0.011 -0.048,-0.028 0.099,-0.091 0.26,0.052 z m -0.296,1.643 0.235,0.129 0.285,0 -0.297,0.129 -0.569,0.013 0.013,-0.207 0.333,-0.064 z",
                        title: "US Virgin Islands",
                        id: "VI",
                    },
                    {
                        d:
                            "m 777.91975,401.4854 -0.132,0.027 -0.327,0.005 -0.286,0.273 -0.197,0.114 -0.309,0.095 -0.328,0.154 -0.095,0.271 -0.009,0.196 -0.053,0.219 -0.532,0.318 -0.148,-0.033 -0.103,-0.118 -0.157,0.024 -0.106,0.059 -0.126,-0.008 -0.141,0.072 -0.185,-0.022 -0.17,-0.101 -0.098,-0.026 -0.117,-10e-4 -0.022,0.119 0.174,0.461 0.045,0.212 -0.569,0.622 0.063,0.4 -0.154,0.307 -0.344,0.247 -0.645,0.636 -0.291,0.014 -0.219,0.144 -0.478,1.042 -0.005,0.357 -0.075,0.261 0.016,0.25 -0.209,0.492 -0.218,0.208 -0.048,0.268 0.309,0.551 0.035,0.097 0.18,0.296 0.087,0.211 0.138,0.211 0.497,0.547 0.222,0.167 0.267,0.113 0.484,0.492 0.244,0.313 -0.111,0.213 0.055,0.451 -0.345,-0.133 0.04,0.053 0.411,0.247 0.614,0.864 0.535,0.426 0.543,0.484 0.17,0.459 0.49,0.304 0.545,0.44 -0.023,0.099 0.147,0.118 0.366,0.233 0.223,0.247 0.086,0.234 0.135,0.038 0.153,-0.058 0.152,-0.022 0.108,0.018 0.164,0.257 0.229,0.229 0.11,0.211 0.09,-0.028 0.074,0.032 0.019,0.176 0.033,0.116 0.307,0.338 0.146,0.318 0.366,0.516 0.271,0.293 0.192,0.165 0.221,0.141 0.216,0.571 0.117,0.518 0.231,0.573 0.175,0.25 0.006,0.471 0.142,0.485 0.151,0.327 0.045,0.334 0.047,0.166 0.058,0.125 0.165,0.565 -0.043,0.263 -0.115,-0.257 0.015,0.758 0.101,0.401 -0.045,0.491 0.105,0.172 0.188,0.555 0.133,0.199 -0.012,0.677 0.07,0.342 -0.178,-0.204 -0.129,-0.232 -0.173,0.123 -0.155,0.181 0.241,0.728 -0.274,-0.069 0.024,0.978 0.114,0.228 0.008,0.109 -0.033,0.13 -0.076,-0.143 -0.016,-0.147 -0.043,0.033 0.002,0.076 -0.092,0.172 -0.027,0.213 0.099,0.182 0.017,0.138 -0.071,0.171 -0.114,0.181 -0.261,0.024 -0.06,0.354 -0.089,0.375 -0.466,0.06 -0.338,0.331 -0.418,0.123 -0.373,0.327 -0.411,0.303 -0.268,0.04 -0.229,0.065 -0.263,0.502 -0.438,0.058 -0.787,0.41 -0.265,0.198 -0.241,0.077 -0.345,0.171 -0.074,-0.061 -0.115,-0.147 -0.298,-0.076 -0.146,-0.165 -0.042,-0.212 -0.039,-0.083 -0.064,0.12 -0.05,0.504 -0.053,0.114 -0.127,0.05 -0.251,-0.143 -0.239,-0.291 -0.341,0.201 0.104,0.024 0.155,-0.016 0.12,0.05 0.102,0.194 -0.004,0.105 -0.053,0.123 -0.319,0.02 -0.426,-0.043 -0.078,0.016 0.389,0.189 0.355,0.109 0.157,0.119 0,0.099 -0.199,0.159 -0.154,0.195 -0.003,0.121 -0.003,0.135 -0.173,0.116 -0.107,-0.023 -0.304,-0.203 -0.877,-0.799 0.132,0.226 0.909,0.908 0.16,0.299 0.022,0.211 -0.094,0.106 -0.154,0.125 -0.298,0.009 -0.488,-0.337 -0.781,-0.81 -0.266,-0.11 0.79,0.926 0.13,0.225 0.133,0.259 -0.038,0.154 -0.068,0.145 -1.872,0.857 -0.28,0.369 -0.222,0.455 -0.368,0.253 -0.216,0.231 -0.624,0.13 -0.341,-0.041 0.354,-0.42 -0.219,-0.156 -0.011,-1.083 0.086,-1.189 0.163,-0.594 0.235,-0.148 0.296,-0.091 0.007,-0.125 -0.029,-0.143 -0.159,-0.203 -0.174,-0.094 -0.26,-0.041 -0.2,-0.249 -0.152,0.01 -0.236,0.083 -0.143,-0.107 -0.053,-0.167 -0.219,-0.208 -0.252,-0.202 0.114,-0.032 0.132,-0.116 0.142,-0.149 0.352,-0.021 0.353,0.007 0.099,-0.039 0.143,-0.158 0.231,-0.203 0.176,-0.113 0.042,-0.091 -0.07,-0.214 -0.039,-0.22 0.065,-0.069 0.319,0.039 0.351,0.103 0.085,0.046 0.201,-0.27 0.055,-0.033 0.132,0.001 0.348,-0.05 0.34,-0.071 0.161,0.012 0.156,0.181 0.119,0.178 0.062,0.014 0.177,-0.076 0.146,0.095 0.306,0.155 0.183,0.007 -0.091,-0.361 0.102,-0.257 -0.02,-0.07 -0.172,-0.118 -0.584,-0.472 -0.1,-0.141 0.014,-0.222 -0.02,-0.326 -0.052,-0.205 0.009,-0.12 0.036,-0.096 0.107,-0.038 0.104,-0.013 0.083,-0.084 0.14,-0.215 0.272,0.019 0.382,0.122 0.282,0.076 0.167,-0.015 0.037,-0.031 -0.005,-0.116 0.02,-0.494 -0.011,-0.105 0.241,-0.048 0.368,-0.011 0.194,-0.029 0.181,-0.208 0.466,-0.072 0.337,-0.281 0.304,-0.289 0.149,-0.077 0.189,-0.05 0.142,0.007 0.178,0.167 0.147,-0.101 0.17,-0.196 0.089,-0.192 0.049,-0.309 -0.033,-0.474 -0.09,-0.371 -0.085,-0.278 -0.017,-0.278 0.196,-0.559 0.169,-0.609 -0.032,-0.24 -0.184,-0.38 -0.187,-0.463 -0.204,-0.51 -0.077,-0.076 -0.055,-0.142 -0.031,-0.166 0.081,-0.521 0.012,-0.175 0.235,-0.238 0.126,-0.272 0.118,-0.301 -0.045,-0.159 -0.016,-0.324 0.03,-0.157 -0.056,-0.127 -0.068,-0.185 0.045,-0.12 0.165,-0.103 0.097,-0.177 0.124,-0.207 0.055,-0.189 -0.089,-0.158 -0.161,-0.237 -0.294,-0.214 -0.339,-0.274 -0.166,-0.169 -0.132,-0.172 -0.121,-0.2 -0.066,-0.16 0.064,-0.105 0.482,-0.241 0.088,-0.087 0.051,-0.134 -0.038,-0.131 -0.13,-0.071 -0.151,-0.048 -0.222,-0.152 -0.414,-0.417 -0.19,-0.093 -0.2,-0.12 -0.106,-0.126 -0.116,-0.346 -0.053,-0.031 -0.115,0.105 -0.146,0.109 -0.122,-0.019 -0.111,-0.098 -0.053,-0.132 -0.123,-0.181 -0.134,-0.147 -0.035,-0.496 -0.021,-0.162 -0.066,-0.226 -0.104,-0.081 -0.11,-0.06 -0.26,-0.412 -0.18,-0.213 -0.738,-0.58 -0.092,-0.093 -0.199,-0.239 -0.346,-0.339 -0.247,-0.273 -0.18,-0.283 -0.084,-0.246 -0.025,-0.192 -0.196,-0.275 -0.169,-0.226 -0.164,-0.073 -0.187,-0.031 -0.169,-0.134 -0.309,-0.304 -0.137,-0.195 -0.081,-0.132 0.004,-0.136 0.074,-0.226 0.09,-0.129 0.003,-0.101 -0.088,-0.082 -0.343,-0.146 -0.776,-0.221 -0.29,-0.169 -0.268,-0.216 -0.202,-0.147 -0.946,-0.625 -0.287,-0.104 -0.246,-0.111 -0.075,-0.108 0.013,-0.104 0.101,-0.077 0.268,-0.161 0.1,-0.184 -0.032,-0.241 -0.106,-0.244 0.052,-0.084 0.087,-0.01 0.18,-0.007 0.373,-0.014 0.804,0.222 0.116,-0.024 0.437,-0.403 0.164,-0.241 0.038,-0.201 0.086,-0.128 0.23,-0.21 0.003,-0.192 -0.113,-0.257 -0.115,-0.099 -0.099,-0.043 -0.319,0.034 -0.062,-0.058 -0.042,-0.191 -0.015,-0.117 -0.105,-0.137 -0.345,-0.117 -0.292,-0.033 -0.068,-0.049 0.112,-0.132 0.199,-0.13 0.151,-0.076 0.119,-0.135 0.022,-0.138 -0.148,-0.123 -0.193,-0.137 -0.313,-0.261 -0.434,-0.277 -0.264,-0.095 -0.138,0.013 -0.478,0.238 -0.257,0.155 -0.214,0.276 -0.223,0.059 -0.226,-0.122 -0.256,-0.125 -0.709,-0.182 -0.299,-0.152 -0.619,-0.93 -0.091,-0.189 0.059,-0.214 0.043,-0.307 0.062,-0.199 0.109,-0.19 0.03,-0.169 -0.027,-0.166 -0.089,-0.095 -0.117,-0.028 -0.087,-0.038 -0.082,-0.218 -0.05,0.028 -0.076,0.265 -0.091,0.095 -0.121,0.047 -0.094,-0.042 -0.06,-0.106 -0.026,-0.18 -0.062,-0.242 -0.076,-0.158 -0.267,-0.161 -0.126,-0.209 -0.396,-0.455 -0.332,-0.319 -0.155,-0.287 0.136,-0.107 0.171,-0.155 0.184,-0.242 0.206,-0.304 0.086,-0.186 0.061,-0.075 0.121,-0.055 0.13,0.03 0.228,0.123 0.344,0.157 0.307,0.186 0.124,0.187 0.171,0.179 0.131,0.054 0.066,-0.014 0.197,-0.135 0.17,-0.135 0.004,-0.153 0.156,-0.138 0.204,-0.227 0.097,-0.154 0.073,-0.016 0.083,0.045 0.322,0.476 0.062,0.029 0.091,-0.071 0.127,-0.372 0.14,-0.144 0.048,0.036 0.779,0.701 0.074,-0.005 0.084,-0.031 0.055,-0.108 0.061,-0.243 0.116,-0.26 0.25,-0.145 0.195,-0.028 0.072,0.124 0.169,0.171 0.205,0.024 0.436,-0.303 0.143,-0.048 0.152,0.005 0.155,-0.012 0.148,-0.116 0.156,-0.153 0.053,-0.302 0.033,-0.271 0.107,-0.11 0.128,-0.073 0.24,-0.103 0.542,-0.263 0.14,-0.125 0.103,-0.07 0.211,0.114 0.252,0.22 0.152,0.166 0.102,0.179 0.049,0.149 0.401,0.13 0.256,0.184 0.17,0.141 0.168,-0.006 0.168,-0.038 0.108,-0.113 0.189,-0.002 0.224,0.017 0.1,0.045 0.185,0.26 0.083,0.036 0.165,-0.018 0.317,-0.092 0.255,-0.044 0.23,0.104 0.438,0.289 -0.123,0.206 -0.098,0.222 -0.192,0.156 -0.142,0.039 -0.09,0.217 -0.04,0.32 0.049,0.163 0.11,0.052 0.122,0.108 0.05,0.143 0.017,0.316 -0.007,0.356 0.017,0.118 0.095,-0.022 0.09,-0.042 0.182,0.055 0.226,0.093 0.143,0.094 0.128,-0.012 0.1,0.092 0.037,0.176 0.118,0.123 0.328,0.231 0.263,0.02 0.222,0.305 0.23,-0.1 0.106,0.132 0.477,-0.046 0.332,-0.124 0.119,0.029 0.299,0.254 0.176,0.154 z m -1.038,0.872 -0.404,0.375 -0.155,-0.006 0.138,-0.424 0.066,-0.101 0.243,0.146 0.112,0.01 z m -0.229,0.868 -0.157,0.078 -0.186,-0.009 0.223,-0.146 0.113,-0.181 0.091,-0.063 -10e-4,0.158 -0.083,0.163 z m -1.841,0.331 -0.032,0.058 -0.143,-0.141 -0.095,-0.061 0.072,-0.19 0.168,0.208 0.03,0.126 z m 0.466,0.205 -0.116,0.012 -0.223,-0.242 0.12,-0.128 0.253,0.09 0.059,0.059 -0.002,0.052 -0.061,0.115 -0.03,0.042 z m 0.382,30.014 -0.235,0.171 -0.016,-0.144 0.204,-0.093 0.072,-0.073 0.052,0.001 -0.077,0.138 z m -8.71,0.018 0.053,0.141 -0.02,0.33 -0.109,0.323 0.032,0.141 -0.084,0.09 -0.187,-0.605 -0.235,-0.262 -0.052,-0.101 0.137,0.007 0.245,-0.166 0.118,-0.004 0.102,0.106 z m 7.166,4.829 -0.079,0.006 -0.06,-0.058 0.254,-0.185 -0.025,0.123 0.009,0.062 -0.099,0.052 z",
                        title: "Vietnam",
                        id: "VN",
                    },
                    {
                        d:
                            "m 944.95075,502.0824 -0.041,0.028 -0.065,-0.022 -0.166,-0.348 0.042,-0.116 0.209,-0.111 0.186,0.193 0.018,0.107 -0.002,0.091 -0.028,0.079 -0.124,0.033 -0.029,0.066 z m 0.269,1.017 -0.117,0.146 -0.316,-0.048 -0.075,-0.039 0.021,-0.242 0.079,-0.083 0.189,-0.075 0.259,0.119 -0.04,0.222 z m -2.354,1.631 0.181,0.955 0.21,-0.002 0.107,-0.051 0.124,-0.224 0.056,-0.351 0.109,-0.05 0.138,0.038 -0.06,0.112 0.04,0.281 0.106,0.156 0.07,0.028 0.142,0.735 0.053,0.154 -0.003,0.124 -0.297,0.275 -0.441,-0.008 -0.311,0.165 -0.189,-0.011 10e-4,-0.186 -0.168,-0.148 -0.19,-0.317 0.047,-0.563 -0.339,-1.043 -0.003,-0.261 0.116,-0.34 0.113,-0.016 0.154,0.284 0.234,0.264 z m 4.051,1.449 -0.049,0.179 -0.116,-0.208 -0.074,-0.874 0.03,-0.081 0.061,-0.006 0.142,0.608 0.006,0.382 z m -0.781,0.31 -0.188,0.133 -0.348,-0.013 -0.129,-0.075 0.427,-0.404 0.494,-0.083 -0.256,0.442 z m 0.847,1.549 -0.047,0.003 -0.048,-0.133 -0.158,-0.71 0.104,-0.634 0.065,0.134 0.237,1.113 -0.032,0.182 -0.121,0.045 z m -2.79,-0.714 -0.051,0.075 -0.298,-0.188 0.068,-0.181 0.324,0.065 -0.043,0.229 z m 0.544,1.078 0.129,0.063 0.07,0 0.042,0.141 0.402,0.282 0.11,-0.008 0.093,0.154 0.173,0.078 0.047,0.157 0.123,0.16 -0.215,0.194 -0.417,-0.052 -0.238,0.22 -0.216,-0.056 -0.038,-0.116 0.03,-0.039 -0.129,-0.295 -0.058,-0.45 -0.087,-0.265 -0.095,-0.113 -0.194,0.099 -0.079,0.017 -0.188,-0.217 0.089,-0.441 0.047,-0.126 0.151,-0.024 0.23,0.116 0.218,0.521 z m 2.481,0.699 -0.321,0.03 -0.451,-0.091 -0.182,-0.126 -0.078,-0.126 0.156,-0.094 0.224,-0.044 0.279,-0.289 0.097,0.11 0.104,0.324 0.112,0.098 0.063,0.098 -0.003,0.11 z m 0.421,1.287 0.084,0.043 -0.047,0.121 -0.385,-0.138 -0.311,0.054 -0.087,-0.006 -0.092,-0.111 -0.068,-0.221 0.031,-0.154 0.13,-0.108 0.049,-0.017 0.098,0.133 0.089,0.091 0.086,0.039 0.196,0.217 0.227,0.057 z m -0.003,2.229 0.279,0.417 0.111,0.033 -0.169,0.299 -0.352,0.026 -0.415,-0.077 0.152,-0.103 -0.079,-0.116 -0.125,-0.023 -0.144,0.055 -0.066,-0.019 0.092,-0.192 0.23,-0.271 0.068,-0.021 0.062,-0.003 0.061,0.024 0.295,-0.029 z m 2.495,4.106 -0.13,0.143 -0.113,-0.016 -0.732,-0.33 0.031,-0.136 -0.03,-0.347 0.08,-0.188 0.202,-0.077 0.157,0.04 0.096,0.277 0.219,0.113 -0.153,0.095 0.267,0.209 0.106,0.217 z m 0.44,1.773 -0.148,0.322 -0.256,-0.075 -0.239,-0.233 -0.125,-0.203 0.084,-0.389 0.122,-0.068 0.128,0.022 0.065,0.38 0.369,0.244 z m 1.137,1.917 -0.099,0.164 -0.152,-0.002 -0.195,-0.116 0.037,-0.145 0.222,-0.026 0.064,0.01 0.123,0.115 z",
                        title: "Vanuatu",
                        id: "VU",
                    },
                    {
                        d:
                            "m 990.83875,500.4344 -0.046,0.023 -0.052,-0.112 0.067,-0.169 0.065,-0.06 0.056,0.133 -0.09,0.185 z m -5.293,2.83 -0.159,0.019 -0.155,-0.038 -0.101,-0.162 0.046,-0.069 0.101,0.032 0.104,0.12 0.172,0.055 -0.008,0.043 z",
                        title: "Wallis and Futuna",
                        id: "WF",
                    },
                    {
                        d:
                            "m 1001.5787,500.8144 0.314,0.271 0.126,0.359 -0.136,0.343 -0.297,-0.084 -0.432,0.073 -0.144,-0.025 -0.345,-0.421 -0.24,-0.189 -0.096,-0.178 0.305,0.02 0.446,-0.118 0.499,-0.051 z m 2.469,1.668 -0.77,0.002 -0.381,-0.13 -0.135,-10e-4 -0.326,-0.272 -0.05,-0.143 0.171,-0.094 0.355,-0.049 0.714,0.207 0.108,0.184 0.164,0.02 0.128,0.08 0.033,0.129 -0.011,0.067 z",
                        title: "Samoa",
                        id: "WS",
                    },
                    {
                        d:
                            "m 623.87975,415.8344 -1.415,0.518 -0.373,0.23 -0.339,0.284 -0.254,0.355 -0.178,0.623 0.135,0.569 -0.013,0.305 -0.365,0.202 -0.341,0.145 -0.379,0.222 -0.23,0.055 -0.188,0.176 -0.219,0.123 -0.789,0.32 -0.862,0.247 -1.37,0.296 -0.529,0.321 -0.481,0.22 -0.731,0.066 -1.004,0.305 -0.558,0.244 -0.693,0.397 -0.153,0.125 -0.122,0.292 -0.213,0.252 -0.417,0.413 -0.313,0.212 -0.209,0.011 -0.406,0.116 -0.481,0.024 -0.808,-0.145 -0.208,0.101 -0.171,0.161 -0.623,0.283 -0.633,0.565 -0.463,0.15 -0.749,0.177 -0.524,0.235 -0.352,0.094 -0.453,0.049 -0.839,-0.024 -0.795,0.085 -0.737,0.159 -0.346,0.301 -0.395,0.477 -0.645,0.197 -0.152,0.171 -0.199,0.351 -0.417,0.091 -0.378,0.059 -0.386,-0.153 -0.728,0.424 -0.275,0.07 -0.418,0.017 -0.297,0.089 -0.213,-0.025 -0.265,-0.166 -0.564,-0.201 -0.412,0.131 -0.035,-0.401 -0.683,-1.226 0.142,-1.069 0,-0.151 -0.136,-0.478 -0.407,-0.437 0.012,-0.554 -0.136,-0.396 -0.108,-0.408 0.035,-0.108 0.006,-0.098 -0.208,-0.629 -0.069,-0.127 -0.026,-0.132 0.068,-0.101 -0.002,-0.117 -0.11,-0.193 -0.117,-0.368 -0.555,-0.289 0.113,-0.271 0.108,0.095 0.146,0.081 0.03,-0.175 0.002,-0.131 -0.232,-0.819 0.344,-1.094 -0.113,-0.987 0.525,-0.399 0.132,-0.12 0.076,-0.105 0.124,-0.226 0.169,-0.073 0.06,-0.238 -0.005,-0.119 -0.109,-0.102 -0.082,-0.277 0.027,-0.352 0.027,-0.147 0.057,-0.269 0.184,-0.1 0.043,-0.08 -0.142,-0.17 0.013,-0.102 0.312,-0.285 0.123,-0.085 0.202,-0.088 0.158,10e-4 0.182,0.05 0.163,0.08 0.158,0.145 0.167,0.165 0.256,0.063 0.174,-0.016 0.142,0.073 0.12,-0.04 0.136,-0.085 0.218,0.005 0.196,-0.096 0.558,-0.046 0.538,0.029 0.562,-0.08 0.561,0.006 0.566,0.006 0.125,0.012 0.123,0.05 0.477,0.252 0.362,0.052 0.727,0.069 0.775,0.074 0.672,0.063 0.57,-0.06 0.473,-0.049 0.128,0.008 0.143,0.156 0.285,0.389 0.269,0.366 0.471,0.02 0.302,-0.138 0.332,-0.194 0.203,-0.15 0.235,-0.596 0.152,-0.386 0.349,-0.435 0.292,-0.364 0.386,-0.483 0.214,-0.267 0.422,-0.528 0.403,-0.206 0.778,-0.397 0.763,-0.391 0.497,-0.255 0.423,-0.116 0.709,-0.1 0.833,-0.118 0.833,-0.118 0.889,-0.125 0.99,-0.14 0.679,-0.096 0.865,-0.123 0.72,-0.102 0.64,-0.09 0.659,-0.093 0.124,0.294 0.124,0.294 0.125,0.294 0.124,0.294 0.124,0.294 0.124,0.294 0.124,0.293 0.125,0.293 0.124,0.293 0.124,0.293 0.124,0.293 0.125,0.293 0.124,0.292 0.124,0.292 0.124,0.292 0.124,0.292 0.122,0.285 0.2,0.095 0.119,0.27 0.17,0.385 0.171,0.384 0.17,0.384 0.168,0.385 z m -29.455,3.903 -0.088,0.064 -0.027,-0.112 0.058,-0.252 0.092,-0.073 0.062,0.187 -0.04,0.103 -0.057,0.083 z m 0.553,3.839 -0.037,0.061 -0.051,-0.013 -0.174,-0.153 0.191,-0.171 0.102,0.159 -0.031,0.117 z m -0.089,0.768 -0.186,0.088 0.127,-0.228 0.13,-0.047 0.036,0.009 -0.107,0.178 z m 30.892,3.057 0.174,0.034 0.263,-0.099 0.754,-0.013 0.909,0.318 -0.172,0.083 -0.102,0.115 -0.399,0.105 -0.398,0.245 -1.152,0.119 -0.338,-0.066 -0.278,-0.237 -0.515,-0.308 0.203,-0.197 0.044,-0.09 0.076,-0.086 0.291,-0.149 0.291,0.024 0.349,0.202 z",
                        title: "Yemen",
                        id: "YE",
                    },
                    {
                        d: "m 601.69375,499.4144 -0.177,0.024 -0.083,-0.076 -0.051,-0.18 0.052,-0.173 0.015,-0.14 -0.143,-0.243 0.14,-0.138 0.119,0.161 0.068,0.011 0.18,0.112 -0.053,0.206 0.012,0.068 -0.082,0.206 z",
                        title: "Mayotte",
                        id: "YT",
                    },
                    {
                        d:
                            "m 562.70375,527.0484 0.015,0.159 0.02,0.072 0.134,0.419 0.2,0.628 0.133,0.58 0.183,0.797 -0.006,0.445 0.045,0.172 0.164,0.215 0.201,0.37 0.068,0.209 0.067,0.157 0.212,0.298 0.165,0.452 0.14,0.599 0.12,0.288 0.045,0.142 0.054,0.258 -0.007,0.545 0.003,0.633 0.004,0.707 0.003,0.585 -0.021,0.296 0.015,0.843 -0.181,0.439 0.022,0.346 0.056,0.224 -0.074,0.035 -0.141,0.04 -0.648,-0.355 -0.632,-0.375 -0.091,-0.011 -0.133,0.039 -0.358,0.272 -0.335,0.426 -0.154,0.364 -0.247,0.376 -0.398,0.606 -0.041,0.131 -0.004,0.494 0.019,0.471 0.035,0.066 0.215,0.022 0.154,0.386 0.352,0.616 0.591,0.396 0.549,0.18 0.766,0.045 0.606,-0.013 -0.035,-0.416 0.06,-0.667 0.077,-0.448 0.085,-0.02 0.159,0.043 0.088,0.046 0.243,-0.019 0.432,0.088 0.349,-0.009 0.312,-0.009 0.527,-0.015 0.308,-0.005 -0.104,0.723 -0.402,1.135 -0.137,0.522 -0.343,1.871 -0.448,0.947 -0.251,0.392 -0.726,0.694 -0.202,0.141 -0.179,0.09 -0.318,0.08 -1.244,1.41 -0.463,0.682 -0.412,0.997 -0.409,0.549 -0.601,1.174 -0.537,0.909 -0.515,0.832 -0.891,1.148 -0.396,0.333 -0.267,0.152 -0.708,0.669 -0.997,1.08 -0.763,0.96 -1.141,1.094 -0.661,0.48 -0.992,0.947 -0.277,0.14 -1.118,0.883 -0.804,0.538 -1.301,0.625 -0.517,0.175 -1.235,-0.162 -0.515,0.086 -0.431,0.378 -0.04,0.544 -0.18,0.082 -0.272,-0.024 -0.863,-0.227 -0.468,0.043 -0.273,0.291 -0.22,0.368 -0.65,0.019 -1.158,-0.381 -1.362,-0.232 -0.315,-0.026 -0.66,0.283 -0.23,0.041 -0.961,-0.061 -0.533,-0.178 -0.51,-0.001 -0.391,0.147 -0.474,0.052 -1.281,1.025 -0.662,10e-4 -0.571,0.119 -0.283,-0.004 -0.53,-0.144 -0.197,0.01 -0.302,0.064 -0.302,0.181 -0.688,0.078 -0.267,0.155 -1.162,0.941 -0.265,-0.038 -0.214,-0.061 -0.604,-0.012 -0.683,-0.501 -0.262,0.032 0.07,-0.15 0.021,-0.266 -0.145,-0.188 -0.097,-0.084 -0.268,0.016 -0.143,-0.226 -0.41,-0.021 -0.142,0.057 -0.197,0.012 -0.017,-0.229 0.015,-0.144 -0.012,-0.221 -0.049,-0.271 -0.159,-0.086 -0.122,-0.036 -0.29,0.019 -0.2,0.029 -0.094,0.079 -0.107,0.199 -10e-4,0.604 -0.144,-0.173 -0.164,-0.362 -0.053,-0.386 0.059,-0.455 0.311,-0.173 -0.024,-0.307 -0.066,-0.266 -0.347,-0.68 -0.135,-0.311 -0.294,-0.21 -0.229,-0.506 -0.23,-0.183 -0.096,-0.354 -0.225,-0.282 -0.076,-0.446 0.124,-0.255 0.196,-0.14 0.2,0.221 0.249,-0.086 0.353,-0.322 0.209,-0.488 0.013,-0.779 -0.054,-0.485 -0.28,-1.25 -0.132,-0.287 -0.632,-0.891 -0.733,-1.189 -0.927,-1.865 -0.443,-1.116 -0.671,-2.24 -0.591,-1.261 -0.726,-1.172 -0.093,-0.076 0.111,-0.142 0.391,-0.27 0.177,-0.073 0.095,0.034 0.092,-0.074 0.089,-0.183 0.02,-0.171 0.044,-0.242 0.087,-0.145 0.096,-0.288 0.163,-0.185 0.345,-0.123 0.261,0.163 0.109,0.159 0.045,0.21 0.116,0.102 0.186,-0.007 0.131,0.129 0.076,0.266 -0.015,0.192 -0.106,0.12 0.015,0.157 0.135,0.195 0.056,0.186 0.09,0.246 0.474,0.143 0.232,0.08 0.399,0.027 0.377,0.11 0.355,0.192 0.584,0.046 0.813,-0.099 0.669,0.044 0.525,0.188 0.381,0.035 0.236,-0.119 0.103,-0.171 -0.032,-0.224 0.117,-0.141 0.265,-0.06 0.212,-0.168 0.16,-0.277 0.369,-0.225 0.579,-0.173 0.288,0.006 0,-0.447 0,-1.408 0,-1.401 0,-1.396 0,-1.391 0,-1.385 0,-1.379 0,-1.375 0,-1.293 0.135,0.093 0.889,0.686 0.24,0.361 0.119,0.229 0.382,0.833 0.284,0.749 0.231,0.566 0.018,0.259 0.033,0.253 0.033,0.125 -0.021,0.138 -0.163,0.309 -0.166,0.236 -0.2,0.323 -0.019,0.427 0.06,0.504 0.123,0.251 0.154,0.083 0.368,-0.125 0.233,0.039 0.329,0.096 1.078,-0.059 0.13,0.031 0.407,0.036 0.136,-0.042 0.122,-0.107 0.141,-0.302 0.126,-0.1 0.229,-0.051 0.271,-0.082 0.224,-0.174 0.355,-0.597 0.711,-0.529 0.218,-0.126 0.138,-0.142 0.12,-0.191 0.249,-0.664 0.188,-0.552 0.064,-0.26 0.168,-0.424 0.203,-0.271 0.199,-0.143 0.1,-0.036 0.256,-0.073 0.329,-0.068 0.346,0.076 0.371,0.164 0.419,0.276 0.429,0.342 0.197,0.174 0.213,0.078 0.379,0.027 0.248,-0.006 0.386,0.34 0.195,0.021 0.437,0.103 0.54,0.106 0.339,-0.012 0.364,-0.184 0.262,-0.008 0.339,0.015 0.373,-0.05 0.273,-0.079 0.209,-0.16 0.184,-0.175 0.212,-0.521 0.122,-0.418 0.188,-0.481 0.231,-0.651 0.083,-0.453 0.084,-0.125 0.336,-0.138 0.277,-0.095 0.748,-0.178 0.153,-0.095 0.14,-0.213 0.326,-0.361 0.402,-0.301 0.208,-0.172 0.38,-1.458 0.046,-0.18 0.276,-0.386 0.171,-0.163 0.11,-0.003 0.156,-0.102 0.203,-0.2 0.241,-0.124 0.279,-0.046 0.181,-0.133 0.083,-0.218 0.144,-0.106 0.205,0.006 0.117,-0.069 0.028,-0.145 0.124,-0.125 0.219,-0.103 0.114,-0.123 0.011,-0.141 0.261,-0.343 0.511,-0.545 0.481,-0.303 0.452,-0.062 0.429,-0.113 0.405,-0.165 0.297,-0.259 0.19,-0.352 0.327,-0.197 0.659,-0.058 0.036,-0.003 0.802,-0.14 0.671,0.114 0.809,0.322 0.757,0.114 0.706,-0.094 0.574,-0.021 0.441,0.052 0.348,0.112 0.25,0.174 z m -7.159,23.992 0.461,-0.205 0.208,-0.125 0.15,-0.103 0.194,-0.156 0.067,-0.379 0.057,-0.322 0.148,-0.159 0.152,-0.105 0.125,-0.167 0.155,-0.401 0.106,-0.392 0.011,-0.16 -0.055,-0.164 -0.099,-0.175 -0.097,-0.236 -0.117,-0.037 -0.229,-0.132 -0.337,-0.266 -0.292,-0.231 -0.274,-0.335 -0.112,-0.055 -0.265,-0.227 -0.114,-0.13 -0.08,-0.156 -0.075,-0.051 -0.119,0.04 -0.313,0.069 -0.671,0.272 -0.416,0.25 -0.35,0.298 -0.363,0.114 -0.266,0.099 -0.211,0.341 -0.197,0.318 -0.177,0.287 -0.102,0.129 -0.092,0.083 -0.093,0.184 -0.191,0.306 -0.175,0.205 -0.244,0.112 -0.315,0.145 -0.107,0.084 -0.015,0.124 0.112,0.288 0.108,0.278 0.177,0.326 0.13,0.239 0.205,0.292 0.12,0.171 -0.016,0.287 0.041,0.103 0.068,0.119 0.057,0.03 0.064,0.043 0.17,0.083 0.041,0.055 0.119,0.098 0.114,0.179 0.216,0.246 0.243,0.187 0.417,0.077 0.326,0.06 0.108,-0.037 0.111,-0.151 0.091,-0.192 0.029,-0.244 0.104,-0.13 0.391,-0.619 0.215,-0.229 0.132,-0.017 0.169,-0.044 0.216,-0.019 0.162,0.019 0.035,-0.007 0.254,-0.082 z m 25.595,60.671 -0.121,0.076 -0.567,-0.067 -0.061,-0.157 0.167,-0.242 0.099,-0.102 0.293,0.055 0.234,0.196 0.042,0.066 -0.086,0.175 z",
                        title: "South Africa",
                        id: "ZA",
                    },
                    {
                        d:
                            "m 567.28475,489.2674 0.01,0.075 0.077,0.142 0.081,0.102 0.007,0.15 0.038,0.14 0.118,0.034 0.097,0.009 0.09,-0.1 0.122,0.002 0.134,0.064 0.048,0.161 0.105,0.216 0.169,0.148 0.114,0.143 -0.039,0.26 -0.072,0.237 0.23,0.235 0.299,0.223 0.081,0.099 0.024,0.332 0.046,0.112 0.203,0.276 0.099,0.183 -0.007,0.106 -0.545,0.547 -0.173,0.053 -0.164,0.031 -0.146,0.112 -0.088,0.117 0.032,0.062 0.058,0.187 0.127,0.296 0.115,0.207 -0.096,0.259 -0.216,0.44 -0.1,0.039 -0.018,0.333 0.066,0.122 0.108,0.096 0.044,0.226 0.003,0.312 -0.012,0.251 -0.136,0.639 0.246,0.559 0.084,0.061 0.341,0.004 0.058,0.047 -0.081,0.159 -0.148,0.164 -0.091,0.083 -0.434,0.191 -0.623,0.211 -0.13,0.202 -0.083,0.295 0.07,0.173 0.082,0.099 -0.026,0.257 -0.055,0.272 0.019,0.214 -0.028,0.189 -0.082,0.093 -0.109,0.285 -0.134,0.287 -0.106,0.131 -0.156,0.137 -0.247,0.114 0.004,0.058 0.28,0.132 0.072,0.092 0.026,0.063 -0.06,0.06 -0.057,0.085 0.129,0.088 0.158,0.074 0.149,0.191 0.133,0.267 0.038,0.094 0.031,0.037 0.048,0.004 0.093,-0.04 0.171,-0.146 0.125,-0.052 0.151,0.208 -0.603,0.206 -0.316,0.108 -0.901,0.308 -0.787,0.269 -0.205,0.051 -0.408,0.131 -0.203,0.081 -0.711,0.235 -0.297,0.117 -0.239,0.117 -0.587,0.174 -0.555,0.164 -0.606,0.17 -0.678,0.189 -0.381,0.137 -0.257,0.118 -0.601,0.24 -0.028,0.058 0.008,0.163 0.077,0.336 0.15,0.305 0.126,0.176 0.082,0.452 0.046,0.397 -0.408,10e-4 -0.718,0.002 -0.745,10e-4 -0.68,0.152 -0.559,0.231 -0.667,0.361 -0.217,0.142 -0.168,0.109 -0.106,0.141 -0.052,0.308 0,0.476 -0.068,0.342 -0.202,0.315 0,-10e-4 -1.013,0.381 -0.662,0.311 -0.65,0.369 -0.493,0.479 -0.336,0.589 -0.558,0.73 -0.568,0.633 -0.603,0.674 -0.676,0.244 -0.568,-0.055 -0.685,-0.273 -0.544,-0.052 -0.403,0.17 -0.372,-0.053 -0.342,-0.274 -0.286,-0.1 -0.232,0.074 -0.296,-0.013 -0.541,-0.15 -0.468,-0.467 -0.253,-0.192 -0.195,-0.074 -0.56,-0.075 -1.285,-0.107 -0.134,0.024 -0.534,0.092 -0.667,0.115 -0.574,0.115 -0.601,0.12 -0.559,-0.486 -0.633,-0.551 -0.657,-0.615 -0.493,-0.481 -0.244,-0.277 -0.433,-0.366 -0.312,-0.179 -0.121,-0.09 -0.31,-0.972 -0.169,-0.892 0,-0.671 -0.001,-0.929 0,-0.928 0,-0.926 -10e-4,-0.925 0,-0.924 0,-0.921 -10e-4,-0.921 0,-0.92 0,-0.447 0.647,0 0.734,0 0.767,0 0.834,0 0.834,0 0.834,0 0.582,0 0.153,-0.007 0.184,-0.028 0.013,-0.091 -0.24,-0.451 0.012,-0.16 0.064,-0.306 0.099,-0.264 0.131,-0.347 0.014,-0.204 -0.105,-0.665 0.01,-0.37 0.03,-0.385 0.03,-0.364 -0.036,-0.254 0.044,-0.138 0.079,-0.198 0.041,-0.224 0.049,-0.096 -0.016,-0.089 -0.044,-0.166 -0.044,-0.372 -0.061,-0.517 -0.061,-0.372 0.102,0.021 0.212,0.035 0.103,0.182 0.06,0.2 0.143,0.011 0.372,0.118 0.129,0.165 0.085,0.357 -0.051,0.183 -0.12,0.147 0.12,0.13 0.249,0.087 0.146,-0.026 0.42,-0.243 0.168,-0.043 0.219,-0.048 0.198,-0.062 0.559,-0.111 0.305,-0.049 0.172,-0.087 0.12,0 0.086,0.07 -0.077,0.252 -0.026,0.226 0.107,0.423 0.08,0.197 0.18,0.144 0.131,0.075 0.145,0.153 0.301,-0.026 0.662,0.216 0.201,0.1 0.279,0.1 0.198,0.037 0.683,0.076 0.252,0.051 0.468,0.068 0.374,0.012 0.265,-0.031 0.186,-0.062 0.114,-0.068 0.052,-0.059 0.077,-0.211 0.139,-0.458 0.055,-0.137 0.138,-0.063 0.179,-0.041 0.105,0.073 0.117,0.508 0.521,0.459 0.178,0.386 0.13,0.33 0.113,0.09 0.198,0.113 0.316,0.04 0.282,0.012 0.594,0.238 0.472,0.189 0.338,0.136 0.155,0.103 0.108,0.169 0.064,0.131 0.104,0.34 0.111,0.269 0.181,0.051 0.162,0.021 0.16,0.184 0.121,0.161 0.24,0.394 0.177,0.272 0.058,0.265 0.201,0.177 0.274,0.075 0.253,0.01 0.146,-0.079 0.359,-0.138 0.28,-0.157 0.204,-0.055 0.121,0.034 0.092,0.109 0.049,0.213 0.012,0.119 0.199,0.113 0.147,-0.045 0.057,-0.131 0.003,-0.065 -10e-4,-0.58 0,-0.502 -10e-4,-0.472 0,-0.575 -10e-4,-0.501 0,-0.412 -10e-4,-0.43 -0.128,0.024 -0.161,0.098 -0.371,0.012 -0.145,0.073 -0.045,0.111 0.028,0.144 0.008,0.196 -0.055,0.092 -0.162,0.037 -0.236,-0.076 -0.427,-0.098 -0.356,-0.061 -0.256,-0.26 -0.346,-0.392 -0.227,-0.197 -0.546,-0.409 -0.093,-0.082 -0.166,-0.191 -0.142,-0.324 -0.07,-0.215 -0.066,-0.16 -0.073,-0.238 0.132,-0.366 0.185,-0.696 0.134,-0.501 0.074,-0.371 0.265,-0.378 0.019,-0.338 -0.107,-0.433 0.027,-0.239 0.018,-0.607 0.015,-0.51 0.004,-0.248 -0.073,-0.431 -0.179,-0.477 -0.394,-0.664 0.002,-0.142 0.234,-0.157 0.371,-0.274 0.182,-0.163 0.218,-0.231 0.097,-0.118 0.214,-0.296 0.135,-0.241 0.047,-0.311 -0.102,-0.296 0.208,-0.058 0.683,-0.104 0.752,-0.115 0.793,-0.122 0.8,-0.122 0.775,-0.119 0.703,-0.107 0.486,-0.075 0.072,0.203 0.152,0.338 0.171,0.248 0.215,0.218 0.182,0.132 0.121,0.04 0.77,-0.014 0.276,0.132 0.241,0.168 0.06,0.26 0.158,0.163 0.171,0.128 0.074,0.016 0.126,-0.031 0.206,-0.003 0.191,0.056 0.091,0.057 0.009,0.218 0.058,0.097 0.26,0.038 0.265,0.017 0.256,0.148 0.276,0.026 0.32,0.061 0.152,0.159 0.339,0.163 0.416,0.146 0.3,0.165 z",
                        title: "Zambia",
                        id: "ZM",
                    },
                    {
                        d:
                            "m 562.70375,527.0484 -0.254,-0.172 -0.347,-0.112 -0.442,-0.052 -0.573,0.021 -0.706,0.095 -0.757,-0.115 -0.809,-0.322 -0.671,-0.114 -0.802,0.14 -0.036,0.003 -0.138,-0.109 -0.22,-0.235 -0.365,-0.042 -0.099,-0.054 -0.082,-0.088 -0.054,-0.112 -0.021,-0.125 0.06,-0.386 -0.033,-0.043 -0.097,-0.047 -0.201,-0.046 -0.481,-0.175 -0.606,-0.17 -0.983,-0.186 -0.382,-0.048 -0.089,-0.057 -0.11,-0.142 -0.189,-0.443 -0.177,-0.292 -0.423,-0.451 -0.067,-0.139 0.021,-0.358 0.031,-0.288 0.045,-0.244 -0.02,-0.229 -0.006,-0.284 0.013,-0.19 -0.057,-0.082 -0.153,-0.058 -0.437,-0.026 -0.528,0.011 -0.017,-0.288 -0.051,-0.446 -0.098,-0.256 -0.122,-0.133 -0.243,-0.139 -0.491,-0.19 -0.669,-0.289 -0.572,-0.428 -0.655,-0.531 -0.205,-0.092 -0.242,-0.498 -0.368,-0.852 0.024,-0.283 -0.056,-0.139 -0.358,-0.417 -0.079,-0.217 -0.063,-0.219 -0.569,-0.61 -0.194,-0.266 -0.148,-0.342 -0.147,-0.273 -0.124,-0.11 -0.162,-0.185 -0.112,-0.212 -0.052,-0.158 0.043,-0.211 0.055,-0.145 0.541,0.15 0.296,0.013 0.232,-0.074 0.286,0.1 0.342,0.274 0.372,0.053 0.403,-0.17 0.544,0.052 0.685,0.273 0.568,0.055 0.676,-0.244 0.603,-0.674 0.568,-0.633 0.558,-0.73 0.336,-0.589 0.493,-0.479 0.65,-0.369 0.662,-0.311 1.013,-0.381 0,10e-4 0.202,-0.315 0.068,-0.342 0,-0.476 0.052,-0.308 0.106,-0.141 0.168,-0.109 0.217,-0.142 0.667,-0.361 0.559,-0.231 0.68,-0.152 0.745,-10e-4 0.718,-0.002 0.408,-10e-4 0.006,0.457 0.031,0.515 0.08,0.049 0.54,0.011 0.866,0.037 0.835,0.034 0.533,0.374 0.179,0.08 0.554,0.1 0.708,0.623 0.852,0.058 0.586,0.195 0.516,0.214 0.297,0.257 0.192,0.058 0.26,0.019 0.126,0.024 -0.027,0.185 -0.174,0.314 0.023,0.45 0.239,0.624 0.032,0.544 -0.073,0.959 0.002,0.931 0.025,0.333 0.039,0.22 0.051,0.121 -0.01,0.138 -0.142,0.392 -0.114,0.412 -0.004,0.165 -0.044,0.117 -0.085,0.103 -0.372,0.191 -0.063,0.118 10e-4,0.214 0.047,0.18 0.14,0.066 0.168,0.102 0.066,0.134 10e-4,0.142 -0.054,0.263 -0.15,0.435 0.15,0.502 0.167,0.326 0.231,0.376 0.096,0.233 -0.005,0.167 -0.035,0.163 -0.345,0.69 -0.249,0.43 -0.304,0.46 -0.402,0.289 -0.104,0.139 -0.041,0.158 0.014,0.346 -0.018,0.363 -0.344,0.557 0.213,0.48 -0.048,0.045 -0.116,0.068 -0.495,0.541 -0.501,0.549 -0.366,0.401 -0.416,0.456 -0.466,0.512 -0.399,0.439 z",
                        title: "Zimbabwe",
                        id: "ZW",
                    },
                ],
                R = function ({ countries: t }) {
                    const [e, i] = (0, l.useState)(""),
                        s = () => {
                            i("");
                        };
                    return (0, n.jsxs)(n.Fragment, {
                        children: [
                            (0, n.jsx)("svg", {
                                className: "world-map",
                                xmlns: "http://www.w3.org/2000/svg",
                                width: "1000",
                                height: "665",
                                children: N.map((e, o) =>
                                    (0, n.jsx)(
                                        "path",
                                        {
                                            d: e.d,
                                            id: e.id,
                                            className: "world-map-country " + (t[e.id] ? "active" : ""),
                                            onMouseEnter: (s) => {
                                                return (n = e.id), (o = e.title), void (t[n] && i(`${o} ${t[n]} views`));
                                                var n, o;
                                            },
                                            onMouseLeave: s,
                                        },
                                        o
                                    )
                                ),
                            }),
                            (0, n.jsx)(c.m_, { anchorSelect: ".world-map-country.active", place: "top", children: e }),
                        ],
                    });
                },
                V = (0, n.jsx)("svg", {
                    viewBox: "0 0 24 24",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: (0, n.jsxs)("g", {
                        fill: "#1C274C",
                        children: [
                            (0, n.jsx)("path", {
                                opacity: ".5",
                                d:
                                    "M2 16c0-2.828 0-4.243.879-5.121C3.757 10 5.172 10 8 10h8c2.828 0 4.243 0 5.121.879C22 11.757 22 13.172 22 16c0 2.828 0 4.243-.879 5.121C20.243 22 18.828 22 16 22H8c-2.828 0-4.243 0-5.121-.879C2 20.243 2 18.828 2 16Z",
                            }),
                            (0, n.jsx)("path", { d: "M12.75 14a.75.75 0 0 0-1.5 0v4a.75.75 0 0 0 1.5 0v-4ZM6.75 8a5.25 5.25 0 0 1 10.5 0v2.004c.567.005 1.064.018 1.5.05V8a6.75 6.75 0 0 0-13.5 0v2.055a23.57 23.57 0 0 1 1.5-.051V8Z" }),
                        ],
                    }),
                }),
                F = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "visitor",
                    viewBox: "0 0 24 24",
                    width: 20,
                    height: 20,
                    color: "#000000",
                    fill: "none",
                    children: [
                        (0, n.jsx)("path", { d: "M22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12Z", stroke: "#000000", strokeWidth: "1.5" }),
                        (0, n.jsx)("path", { d: "M12.2422 17V12C12.2422 11.5286 12.2422 11.2929 12.0957 11.1464C11.9493 11 11.7136 11 11.2422 11", stroke: "#000000", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                        (0, n.jsx)("path", { d: "M11.992 8H12.001", stroke: "#471717ff", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                    ],
                }),
                B = function () {
                    return (0, n.jsxs)("div", { className: "pbb-analytics-lock", children: [V, (0, n.jsx)("p", { children: (0, _.__)("This feature is available in Pro version", "popup-builder-block") })] });
                },
                H = () => {
                    const { isProActive: t } = T(),
                        { data: e, isLoading: i } = O({ type: "countries" }),
                        s = (0, l.useRef)(null),
                        o = (0, l.useRef)(null),
                        [a, r] = (0, l.useState)(!1),
                        [c, d] = (0, l.useState)(0),
                        [h, u] = (0, l.useState)(0),
                        [p, m] = (0, l.useState)(0),
                        [f, g] = (0, l.useState)(0),
                        b = (0, l.useMemo)(() => {
                            const t = {};
                            for (const i of e) t[i.country_name] = i.total_count;
                            return t;
                        }, [e]),
                        x = Object.keys(b).length > 0,
                        v = (t) => {
                            r(!0), (s.current.style.cursor = "grabbing");
                            const e = "touchstart" === t.type ? t.touches[0].pageX : t.pageX,
                                i = "touchstart" === t.type ? t.touches[0].pageY : t.pageY;
                            d(e - s.current.offsetLeft), u(i - s.current.offsetTop), m(s.current.scrollLeft), g(s.current.scrollTop);
                        },
                        y = (t) => {
                            if (!a) return;
                            t.preventDefault();
                            const e = "touchmove" === t.type ? t.touches[0].pageX : t.pageX,
                                i = "touchmove" === t.type ? t.touches[0].pageY : t.pageY,
                                n = e - s.current.offsetLeft,
                                o = i - s.current.offsetTop,
                                r = 1.5 * (n - c),
                                l = 1.5 * (o - h);
                            (s.current.scrollLeft = p - r), (s.current.scrollTop = f - l);
                        },
                        C = () => {
                            r(!1), (s.current.style.cursor = "grab");
                        };
                    return (0, n.jsxs)("div", {
                        className: "pbb-analytics-country",
                        children: [
                            (0, n.jsx)("h3", { className: "pbb-analytics-statistics__title", children: (0, _.__)("Countries", "popup-builder") }),
                            (0, n.jsx)("div", {
                                className: "chart-container",
                                children: t
                                    ? i
                                        ? (0, n.jsx)(P, {})
                                        : x
                                        ? (0, n.jsx)("div", {
                                              ref: s,
                                              className: "map-container",
                                              onMouseDown: v,
                                              onMouseMove: y,
                                              onMouseUp: C,
                                              onMouseLeave: C,
                                              onTouchStart: v,
                                              onTouchMove: y,
                                              onTouchEnd: C,
                                              children: (0, n.jsx)("figure", { ref: o, className: "map-wrapper", children: (0, n.jsx)(R, { countries: b }) }),
                                          })
                                        : (0, n.jsx)("p", { children: (0, _.__)("No data found", "popup-builder") })
                                    : (0, n.jsx)(B, {}),
                            }),
                        ],
                    });
                },
                W = ({ itemsPerPage: t, totalItems: e, onPageChange: i, currentPage: s, pageRangeDisplayed: o = 5, marginPagesDisplayed: a = 1 }) => {
                    const r = Math.ceil(e / t),
                        l = (() => {
                            const t = [],
                                e = Math.max(a, s - Math.floor(o / 2)),
                                i = Math.min(r - a, s + Math.floor(o / 2)),
                                n = e > a,
                                l = i < r - a;
                            for (let e = 0; e < a; e++) t.push(e);
                            n && t.push("left-ellipsis");
                            for (let s = e; s <= i; s++) t.push(s);
                            l && t.push("right-ellipsis");
                            for (let e = r - a; e < r; e++) e >= a && e > i && t.push(e);
                            return t;
                        })();
                    return (0, n.jsxs)("ul", {
                        className: "pagination",
                        children: [
                            (0, n.jsx)("li", {
                                className: "page-item " + (0 === s ? "disabled" : ""),
                                onClick: () => s > 0 && i(s - 1),
                                children: (0, n.jsx)("span", {
                                    className: "page-link",
                                    children: (0, n.jsx)("svg", {
                                        xmlns: "http://www.w3.org/2000/svg",
                                        width: "8",
                                        height: "12",
                                        viewBox: "0 0 8 12",
                                        fill: "none",
                                        children: (0, n.jsx)("path", { d: "M6.5 11L1.5 6L6.5 1", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                    }),
                                }),
                            }),
                            l.map((t, e) =>
                                "left-ellipsis" === t || "right-ellipsis" === t
                                    ? (0, n.jsx)("li", { className: "page-item disabled", children: (0, n.jsx)("span", { className: "page-link", children: "..." }) }, e)
                                    : (0, n.jsx)("li", { className: "page-item " + (t === s ? "active" : ""), onClick: () => i(t), children: (0, n.jsx)("span", { className: "page-link", children: t + 1 }) }, e)
                            ),
                            (0, n.jsx)("li", {
                                className: "page-item " + (s === r - 1 ? "disabled" : ""),
                                onClick: () => s < r - 1 && i(s + 1),
                                children: (0, n.jsx)("span", {
                                    className: "page-link",
                                    children: (0, n.jsx)("svg", {
                                        xmlns: "http://www.w3.org/2000/svg",
                                        width: "8",
                                        height: "12",
                                        viewBox: "0 0 8 12",
                                        fill: "none",
                                        children: (0, n.jsx)("path", { d: "M1.5 11L6.5 6L1.5 1", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                    }),
                                }),
                            }),
                        ],
                    });
                };
            function Y({ currentItems: t }) {
                return (0, n.jsx)(n.Fragment, {
                    children: t && t.map((t, e) => (0, n.jsxs)("div", { className: "referrer", children: [(0, n.jsx)("span", { children: t.referrer_name }), (0, n.jsx)("span", { children: t.total_count })] }, e)),
                });
            }
            function $({ itemsPerPage: t, items: e }) {
                const [i, s] = (0, l.useState)(0),
                    o = i * t,
                    a = e.slice(o, o + t);
                return (0, n.jsxs)(n.Fragment, { children: [(0, n.jsx)(Y, { currentItems: a }), (0, n.jsx)(W, { itemsPerPage: t, totalItems: e.length, onPageChange: s, currentPage: i })] });
            }
            const U = () => {
                const { isProActive: t } = T(),
                    { data: e, isLoading: i } = O({ type: "referrers" }),
                    s = e.length > 0;
                return (0, n.jsxs)("div", {
                    className: "pbb-analytics-referrer",
                    children: [
                        (0, n.jsx)("h3", { className: "pbb-analytics-statistics__title", children: (0, _.__)("Top Referres", "popup-builder") }),
                        (0, n.jsx)("div", {
                            className: "chart-container",
                            children: t
                                ? i
                                    ? (0, n.jsx)(P, {})
                                    : s
                                    ? (0, n.jsxs)("div", {
                                          className: "referrer-container",
                                          children: [
                                              (0, n.jsxs)("div", {
                                                  className: "referrer-header",
                                                  children: [(0, n.jsx)("span", { children: (0, _.__)("Url", "popup-builder") }), (0, n.jsx)("span", { children: (0, _.__)("Conversions", "popup-builder") })],
                                              }),
                                              (0, n.jsx)($, { itemsPerPage: 8, items: e }),
                                          ],
                                      })
                                    : (0, n.jsx)("p", { children: (0, _.__)("No data found", "popup-builder") })
                                : (0, n.jsxs)("div", { className: "pbb-analytics-lock", children: [V, (0, n.jsx)("p", { children: (0, _.__)("This feature is available in Pro version", "popup-builder") })] }),
                        }),
                    ],
                });
            };
            function Z({ currentItems: t, campaigns: e }) {
                return (0, n.jsx)(n.Fragment, {
                    children: t.map((t, i) => {
                        const s = e.find((e) => e.id == t.campaign_id);
                        let o = "(no title)";
                        return s && (o = (0, j.A)(s.title)), (0, n.jsxs)("div", { className: "campaigns", children: [(0, n.jsx)("span", { children: o }), (0, n.jsx)("span", { children: t.count })] }, i);
                    }),
                });
            }
            function G({ itemsPerPage: t, items: e, campaigns: i }) {
                const [s, o] = (0, l.useState)(0),
                    a = s * t,
                    r = e.slice(a, a + t);
                return (0, n.jsxs)(n.Fragment, { children: [(0, n.jsx)(Z, { currentItems: r, campaigns: i }), (0, n.jsx)(W, { itemsPerPage: t, totalItems: e.length, onPageChange: o, currentPage: s })] });
            }
            const K = () => {
                    const { isProActive: t, campaigns: e } = T(),
                        { data: i, isLoading: s } = O({ type: "campaigns" }),
                        o = i.length > 0;
                    return (0, n.jsxs)("div", {
                        className: "pbb-analytics-campaigns",
                        children: [
                            (0, n.jsx)("h3", { className: "pbb-analytics-statistics__title", children: (0, _.__)("Top Campaigns", "popup-builder") }),
                            (0, n.jsx)("div", {
                                className: "chart-container",
                                children: t
                                    ? s
                                        ? (0, n.jsx)(P, {})
                                        : o
                                        ? (0, n.jsxs)("div", {
                                              className: "campaigns-container",
                                              children: [
                                                  (0, n.jsxs)("div", {
                                                      className: "campaigns-header",
                                                      children: [(0, n.jsx)("span", { children: (0, _.__)("Campaign", "popup-builder") }), (0, n.jsx)("span", { children: (0, _.__)("Conversions", "popup-builder") })],
                                                  }),
                                                  e.length > 0 && (0, n.jsx)(G, { itemsPerPage: 8, items: i, campaigns: e }),
                                              ],
                                          })
                                        : (0, n.jsx)("p", { children: (0, _.__)("No data found", "popup-builder") })
                                    : (0, n.jsx)(B, {}),
                            }),
                        ],
                    });
                },
                q = () => {
                    const { labels: t, isProActive: e } = T(),
                        { data: i, isLoading: s } = O({ type: "browsers" }),
                        o = (0, l.useRef)(null),
                        a = i.length > 0;
                    return (
                        (0, l.useEffect)(() => {
                            const t = o.current?.getContext("2d");
                            let s = null;
                            if (t && a && e) {
                                const e = {
                                    labels: i.map((t) => t.browser_name),
                                    datasets: [
                                        {
                                            label: "Views",
                                            data: i.map((t) => t.total_count),
                                            backgroundColor: [
                                                "rgba(255, 99, 132, 0.2)",
                                                "rgba(255, 159, 64, 0.2)",
                                                "rgba(255, 205, 86, 0.2)",
                                                "rgba(75, 192, 192, 0.2)",
                                                "rgba(54, 162, 235, 0.2)",
                                                "rgba(153, 102, 255, 0.2)",
                                                "rgba(201, 203, 207, 0.2)",
                                            ],
                                            borderColor: ["rgb(255, 99, 132)", "rgb(255, 159, 64)", "rgb(255, 205, 86)", "rgb(75, 192, 192)", "rgb(54, 162, 235)", "rgb(153, 102, 255)", "rgb(201, 203, 207)"],
                                            borderWidth: 1,
                                        },
                                    ],
                                };
                                s = new Chart(t, { type: "polarArea", data: e, options: { plugins: { tooltip: { mode: "index", intersect: !1 } }, responsive: !0, maintainAspectRatio: !1 } });
                            }
                            return () => {
                                s && s.destroy();
                            };
                        }, [t, a, e]),
                        (0, n.jsxs)("div", {
                            className: "pbb-analytics-browsers",
                            children: [
                                (0, n.jsx)("h3", { className: "pbb-analytics-statistics__title", children: (0, _.__)("Browsers", "popup-builder") }),
                                (0, n.jsx)("div", {
                                    className: "chart-container",
                                    children: e ? (s ? (0, n.jsx)(P, {}) : a ? (0, n.jsx)("canvas", { id: "chart-canvas", ref: o }) : (0, n.jsx)("p", { children: (0, _.__)("No data found", "popup-builder") })) : (0, n.jsx)(B, {}),
                                }),
                            ],
                        })
                    );
                },
                X = () => {
                    const { dateRange: t } = T(),
                        e = (0, l.useRef)(null),
                        { data: i, isLoading: s } = O({ type: "convertion" }),
                        { labels: o, resultByDate: a, totalViews: r, totalConverted: d, conversionRate: h } = (0, l.useMemo)(() => {
                            if (!Object.keys(i).length) return { labels: [], resultByDate: {}, totalViews: 0, totalConverted: 0, conversionRate: 0 };
                            const { totalViews: e, totalConverted: s } = i.total[0] || {};
                            let n = e > 0 ? (Number(s) / Number(e)) * 100 : 0;
                            n = Number.isInteger(n) ? n : n.toFixed(2);
                            const o = [],
                                a = {};
                            let r = moment(t.start);
                            for (; r.isSameOrBefore(moment(t.end)); ) o.push(r.format("DD MMM YY")), r.add(1, "day");
                            for (const t of i.group) a[moment(t.dateLog).format("DD MMM YY")] = { views: t.totalViews, converted: t.totalConverted };
                            for (const t of o) a[t] || (a[t] = { views: 0, converted: 0 });
                            return { labels: o, resultByDate: a, totalViews: e || 0, totalConverted: s || 0, conversionRate: n || 0 };
                        }, [i]);
                    return (
                        (0, l.useEffect)(() => {
                            const t = e.current?.getContext("2d");
                            let s = null;
                            return (
                                t &&
                                    Object.keys(i).length &&
                                    (s = new Chart(t, {
                                        type: "line",
                                        data: {
                                            labels: o,
                                            datasets: [
                                                { label: "Views", tension: 0.15, data: o.map((t) => a[t].views), fill: "start", borderColor: "#36A2EB", backgroundColor: "#9bd0f57d", borderWidth: 2, pointRadius: 0 },
                                                { label: "Conversions", tension: 0.15, data: o.map((t) => a[t].converted), fill: "start", borderColor: "#0e8c37", backgroundColor: "#0e8c3763", borderWidth: 2, pointRadius: 0 },
                                            ],
                                        },
                                        options: { plugins: { tooltip: { mode: "index", intersect: !1 } }, responsive: !0, maintainAspectRatio: !1, scales: { y: { beginAtZero: !0 } }, elements: { point: { pointStyle: "cross" } } },
                                    })),
                                () => {
                                    s && s.destroy();
                                }
                            );
                        }, [o, a]),
                        (0, n.jsxs)(n.Fragment, {
                            children: [
                                (0, n.jsxs)("div", {
                                    className: "pbb-analytics-container",
                                    children: [
                                        (0, n.jsx)("div", {
                                            className: "pbb-analytics-container__content",
                                            children: (0, n.jsxs)("div", {
                                                className: "pbb-analytics-container__content-lists",
                                                children: [
                                                    (0, n.jsx)("div", {
                                                        className: "pbb-analytics-container__content-lists-item",
                                                        children: (0, n.jsxs)("div", {
                                                            className: "pbb-analytics-container__content-lists-item-wrapper",
                                                            children: [
                                                                (0, n.jsx)("div", {
                                                                    className: "pbb-analytics-container__content-lists-item-icon",
                                                                    children: (0, n.jsxs)("svg", {
                                                                        xmlns: "http://www.w3.org/2000/svg",
                                                                        viewBox: "0 0 24 24",
                                                                        width: 40,
                                                                        height: 40,
                                                                        color: "#000000",
                                                                        fill: "none",
                                                                        children: [
                                                                            (0, n.jsx)("path", {
                                                                                d:
                                                                                    "M2.5 12C2.5 7.52166 2.5 5.28249 3.89124 3.89124C5.28249 2.5 7.52166 2.5 12 2.5C16.4783 2.5 18.7175 2.5 20.1088 3.89124C21.5 5.28249 21.5 7.52166 21.5 12C21.5 16.4783 21.5 18.7175 20.1088 20.1088C18.7175 21.5 16.4783 21.5 12 21.5C7.52166 21.5 5.28249 21.5 3.89124 20.1088C2.5 18.7175 2.5 16.4783 2.5 12Z",
                                                                                stroke: "#000000",
                                                                                strokeWidth: "1.5",
                                                                            }),
                                                                            (0, n.jsx)("path", { d: "M2.5 9H21.5", stroke: "#000000", strokeWidth: "1.5", strokeLinejoin: "round" }),
                                                                            (0, n.jsx)("path", { d: "M13 13L17 13", stroke: "#000000", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                            (0, n.jsx)("path", { d: "M13 17H15", stroke: "#000000", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                            (0, n.jsx)("path", { d: "M6.99981 6H7.00879", stroke: "#000000", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                            (0, n.jsx)("path", { d: "M10.9998 6H11.0088", stroke: "#000000", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                            (0, n.jsx)("path", { d: "M9 9V21.5", stroke: "#000000", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                        ],
                                                                    }),
                                                                }),
                                                                (0, n.jsxs)("div", {
                                                                    className: "pbb-analytics-container__content-lists-item-value",
                                                                    children: [
                                                                        (0, n.jsxs)("span", { className: "count-digit", children: [" ", r, " "] }),
                                                                        (0, n.jsx)("div", {
                                                                            className: "pbb-analytics-container__content-lists-item-text",
                                                                            children: (0, n.jsxs)("span", { className: "text", children: [(0, _.__)("Total views ", "popup-builder"), F] }),
                                                                        }),
                                                                    ],
                                                                }),
                                                            ],
                                                        }),
                                                    }),
                                                    (0, n.jsx)("div", {
                                                        className: "pbb-analytics-container__content-lists-item",
                                                        children: (0, n.jsxs)("div", {
                                                            className: "pbb-analytics-container__content-lists-item-wrapper",
                                                            children: [
                                                                (0, n.jsx)("div", {
                                                                    className: "pbb-analytics-container__content-lists-item-icon",
                                                                    children: (0, n.jsx)("svg", {
                                                                        xmlns: "http://www.w3.org/2000/svg",
                                                                        viewBox: "0 0 24 24",
                                                                        width: 40,
                                                                        height: 40,
                                                                        color: "#000000",
                                                                        fill: "none",
                                                                        children: (0, n.jsx)("path", {
                                                                            d:
                                                                                "M9.80282 4.62973L15.8364 6.99069C19.3164 8.35243 21.0564 9.03329 20.9987 10.1133C20.941 11.1934 19.1251 11.6886 15.4933 12.6791C14.412 12.974 13.8713 13.1215 13.4964 13.4963C13.1215 13.8712 12.9741 14.4119 12.6791 15.4933C11.6887 19.125 11.1934 20.9409 10.1134 20.9986C9.03335 21.0563 8.35249 19.3163 6.99075 15.8363L4.62979 9.80276C3.20411 6.15934 2.49127 4.33764 3.41448 3.41442C4.3377 2.49121 6.15941 3.20405 9.80282 4.62973Z",
                                                                            stroke: "#000000",
                                                                            strokeWidth: "1.5",
                                                                            strokeLinejoin: "round",
                                                                        }),
                                                                    }),
                                                                }),
                                                                (0, n.jsxs)("div", {
                                                                    className: "pbb-analytics-container__content-lists-item-value",
                                                                    children: [
                                                                        (0, n.jsxs)("span", { className: "count-digit", children: [" ", d, " "] }),
                                                                        (0, n.jsx)("div", {
                                                                            className: "pbb-analytics-container__content-lists-item-text",
                                                                            children: (0, n.jsxs)("span", { className: "text", children: [(0, _.__)("Conversions ", "popup-builder"), F] }),
                                                                        }),
                                                                    ],
                                                                }),
                                                            ],
                                                        }),
                                                    }),
                                                    (0, n.jsx)("div", {
                                                        className: "pbb-analytics-container__content-lists-item",
                                                        children: (0, n.jsxs)("div", {
                                                            className: "pbb-analytics-container__content-lists-item-wrapper",
                                                            children: [
                                                                (0, n.jsx)("div", {
                                                                    className: "pbb-analytics-container__content-lists-item-icon",
                                                                    children: (0, n.jsx)("svg", {
                                                                        xmlns: "http://www.w3.org/2000/svg",
                                                                        viewBox: "0 0 24 24",
                                                                        width: "40",
                                                                        height: "40",
                                                                        color: "#000000",
                                                                        fill: "none",
                                                                        children: (0, n.jsx)("path", {
                                                                            d:
                                                                                "M16.9767 19.5C19.4017 17.8876 21 15.1305 21 12C21 7.02944 16.9706 3 12 3C11.3126 3 10.6432 3.07706 10 3.22302M16.9767 19.5V16M16.9767 19.5H20.5M7 4.51555C4.58803 6.13007 3 8.87958 3 12C3 16.9706 7.02944 21 12 21C12.6874 21 13.3568 20.9229 14 20.777M7 4.51555V8M7 4.51555H3.5",
                                                                            stroke: "#141B34",
                                                                            "stroke-width": "1.5",
                                                                            "stroke-linecap": "round",
                                                                            "stroke-linejoin": "round",
                                                                        }),
                                                                    }),
                                                                }),
                                                                (0, n.jsxs)("div", {
                                                                    className: "pbb-analytics-container__content-lists-item-value",
                                                                    children: [
                                                                        (0, n.jsxs)("span", { className: "count-digit", children: [" ", h, "% "] }),
                                                                        (0, n.jsx)("div", {
                                                                            className: "pbb-analytics-container__content-lists-item-text",
                                                                            children: (0, n.jsxs)("span", { className: "text", children: [(0, _.__)("Conversion rate", "popup-builder"), F] }),
                                                                        }),
                                                                    ],
                                                                }),
                                                            ],
                                                        }),
                                                    }),
                                                ],
                                            }),
                                        }),
                                        (0, n.jsxs)("div", {
                                            className: "pbb-analytics-content-wrapper",
                                            children: [
                                                (0, n.jsxs)("div", {
                                                    className: "pbb-analytics-statistics",
                                                    children: [
                                                        (0, n.jsx)("h3", { className: "pbb-analytics-statistics__title", children: (0, _.__)("Statistics", "popup-builder") }),
                                                        (0, n.jsx)("div", {
                                                            className: "chart-container",
                                                            children: s
                                                                ? (0, n.jsx)(P, {})
                                                                : Object.keys(i).length > 0
                                                                ? (0, n.jsx)("canvas", { id: "chart-canvas", ref: e })
                                                                : (0, n.jsx)("p", { children: (0, _.__)("No data found", "popup-builder") }),
                                                        }),
                                                    ],
                                                }),
                                                (0, n.jsx)(I, {}),
                                            ],
                                        }),
                                        (0, n.jsxs)("div", { className: "pbb-analytics-components", children: [(0, n.jsx)(K, {}), (0, n.jsx)(U, {}), (0, n.jsx)(H, {}), (0, n.jsx)(q, {})] }),
                                    ],
                                }),
                                (0, n.jsx)(c.m_, { anchorSelect: ".visitor", place: "right", children: (0, _.__)("Number of total views of campaigns by visitors", "popup-builder") }),
                                (0, n.jsx)(c.m_, { anchorSelect: ".conversion", place: "right", children: (0, _.__)("Number of total converted visitor from campaigns", "popup-builder") }),
                                (0, n.jsx)(c.m_, { anchorSelect: ".conversion-rate", place: "right", children: (0, _.__)("Percentage of views became conversions", "popup-builder") }),
                            ],
                        })
                    );
                },
                J = function () {
                    const { campaignId: t, campaignOptions: e, dateRange: i, dispatch: s, initialDateRange: o } = T();
                    return (0, n.jsxs)("div", {
                        className: "pbb-analytics-header",
                        children: [
                            (0, n.jsx)("h2", { className: "pbb-analytics-header__title", children: (0, _.__)("Analytics", "popup-builder-block") }),
                            (0, n.jsxs)("div", {
                                className: "pbb-analytics-header__content",
                                children: [
                                    (0, n.jsx)(k, { initialDateRange: o, value: i, onChange: (t) => s({ type: "SET_DATE_RANGE", dateRange: t }) }),
                                    (0, n.jsx)("div", {
                                        className: "pbb-subscribers-select",
                                        children: (0, n.jsx)(C.A, { label: (0, _.__)("Select Campaign", "popup-builder-block"), options: e, value: t, onChange: (t) => s({ type: "SET_CAMPAIGN_ID", campaignId: t }) }),
                                    }),
                                ],
                            }),
                        ],
                    });
                };
            i(8527);
            const Q = {
                    isLoaded: !1,
                    campaignId: { value: "", label: (0, _.__)("All Campaigns", "popup-builder-block") },
                    campaignOptions: [{ value: "", label: (0, _.__)("All Campaigns", "popup-builder") }],
                    dateRange: { start: moment().subtract(6, "days"), end: moment(), label: "Last 7 Days" },
                    campaigns: [],
                    data: [],
                    analyticsData: {},
                    initialDateRange: "",
                    isProActive: !1,
                },
                tt = (t, e) => {
                    switch (e.type) {
                        case "SET_LOADED":
                            return { ...t, isLoaded: e.isLoaded };
                        case "SET_CAMPAIGN_ID":
                            return { ...t, campaignId: e.campaignId };
                        case "SET_CAMPAIGN_OPTIONS":
                            return { ...t, campaignOptions: e.campaignOptions };
                        case "SET_DATE_RANGE":
                            return { ...t, dateRange: e.dateRange };
                        case "SET_CAMPAIGNS":
                            return { ...t, campaigns: e.campaigns };
                        case "SET_DATA":
                            return { ...t, data: e.data };
                        case "SET_ANALYTICS_DATA":
                            return { ...t, analyticsData: e.analyticsData };
                        case "SET_INITIAL_DATE_RANGE":
                            return { ...t, initialDateRange: e.initialDateRange };
                        case "SET_PRO_ACTIVE":
                            return { ...t, isProActive: e.isProActive };
                        default:
                            return t;
                    }
                },
                et = ({ children: t }) => {
                    const [e, i] = (0, l.useReducer)(tt, Q);
                    return (0, n.jsx)(D.Provider, { value: { ...e, dispatch: i }, children: t });
                };
            function it() {
                const { campaignOptions: t, dispatch: e } = T(),
                    i = f({ windowVariable: "popupBuilderBlock", hookName: "pbb.is-pro-active", cookieName: "isPopupkitValid", apiPath: "pbb" });
                return (
                    (0, l.useEffect)(() => {
                        e({ type: "SET_PRO_ACTIVE", isProActive: i });
                    }, [i]),
                    (0, l.useEffect)(() => {
                        u()({ path: "/pbb/v1/popup/campaigns" })
                            .then((i) => {
                                if ("success" !== i.status) return;
                                e({ type: "SET_CAMPAIGNS", campaigns: i.data });
                                const s = i.data.map(({ id: t, title: e }) => ({ value: t, label: (0, j.A)(e) || "Untitled" }));
                                e({ type: "SET_CAMPAIGN_OPTIONS", campaignOptions: [...t, ...s] });
                            })
                            .catch((t) => {
                                console.error(t);
                            }),
                            u()({ path: "/pbb/v1/popup/date?cat=logs" })
                                .then((t) => {
                                    "error" !== t.status && 0 !== t?.data?.length && e({ type: "SET_INITIAL_DATE_RANGE", initialDateRange: t?.data[0]?.date });
                                })
                                .catch((t) => {
                                    console.error(t);
                                });
                    }, []),
                    (0, n.jsxs)(n.Fragment, { children: [(0, n.jsx)(J, {}), (0, n.jsx)(X, {})] })
                );
            }
            const st = function () {
                return (0, n.jsx)(et, { children: (0, n.jsx)(it, {}) });
            };
            var nt = i(6942),
                ot = i.n(nt);
            const at = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "40",
                    height: "40",
                    viewBox: "0 0 40 40",
                    fill: "none",
                    children: [
                        (0, n.jsxs)("g", {
                            clipPath: "url(#clip0_900_3759)",
                            children: [
                                (0, n.jsx)("path", { d: "M20 0C8.96874 0 0 8.96874 0 20C0 31.0313 8.96874 40 20 40C31.0313 40 40 31.0313 40 20C40 8.96874 31.0313 0 20 0Z", fill: "#FDDD4C" }),
                                (0, n.jsx)("path", {
                                    d:
                                        "M11.2416 25.2146C10.8043 24.5525 11.9043 23.5505 11.4568 22.709C11.1989 22.2239 10.7774 21.9215 10.2712 21.858C9.78529 21.797 9.28477 21.9749 8.96574 22.3225C8.46206 22.8706 8.38373 23.6167 8.48116 23.8807C8.51681 23.9775 8.57286 24.0039 8.61297 24.0096C8.88731 24.0457 9.04169 23.3416 9.1364 23.1949C9.39829 22.7907 9.99293 22.6685 10.4036 22.934C11.1823 23.4377 10.5071 24.2517 10.5653 24.9392C10.622 25.6086 11.0391 25.8777 11.4135 25.906C11.7778 25.9197 12.0326 25.7175 12.0968 25.5697C12.251 25.217 11.6014 25.7593 11.2416 25.2146Z",
                                    fill: "black",
                                }),
                                (0, n.jsx)("path", {
                                    d:
                                        "M27.5115 19.1369C27.3072 19.1088 27.0841 19.1094 26.8518 19.1369C26.6755 18.9145 26.5175 18.5542 26.4284 18.1338C26.2698 17.3858 26.2864 16.8439 26.7289 16.7735C27.1715 16.7032 27.3854 17.1558 27.5439 17.9038C27.6504 18.4067 27.6299 18.8687 27.5115 19.1369Z",
                                    fill: "black",
                                }),
                                (0, n.jsx)("path", {
                                    d:
                                        "M22.6645 19.582C22.6821 19.7513 22.6882 19.9228 22.6832 20.0806C23.1115 20.1058 23.4148 20.309 23.4955 20.4382C23.5369 20.5048 23.5203 20.5482 23.5071 20.5682C23.4626 20.6372 23.3676 20.6266 23.1686 20.6042C22.9948 20.5848 22.8076 20.5676 22.6131 20.5765C22.5072 20.9012 22.1933 20.9316 21.9728 20.6915C21.8188 20.7383 21.5162 20.9316 21.4259 20.7216C21.4252 20.6175 21.5342 20.4659 21.7315 20.3322C21.5968 20.0752 21.5065 19.8002 21.4532 19.5153C21.1735 19.5658 20.9218 19.644 20.7245 19.7055C20.6319 19.7343 20.2655 19.8999 20.2225 19.7133C20.1938 19.5845 20.3943 19.372 20.6065 19.2186C20.8433 19.0505 21.1062 18.9309 21.3788 18.8619C21.3729 18.4562 21.4763 18.173 21.7712 18.1262C22.1366 18.068 22.3632 18.3495 22.5199 18.8705C22.9616 18.9932 23.4028 19.2975 23.5975 19.612C23.6732 19.734 23.6879 19.8283 23.6388 19.878C23.5163 20.0049 22.8382 19.637 22.6645 19.582Z",
                                    fill: "black",
                                }),
                                (0, n.jsx)("path", {
                                    d:
                                        "M25.5677 21.4053C25.8478 21.541 26.1561 21.4876 26.2567 21.2859C26.3573 21.084 26.2115 20.8106 25.9313 20.6749C25.6511 20.5392 25.343 20.5926 25.2423 20.7943C25.1417 20.996 25.2875 21.2695 25.5677 21.4053Z",
                                    fill: "black",
                                }),
                                (0, n.jsx)("path", {
                                    d:
                                        "M26.9469 20.4034C26.9519 20.0948 27.141 19.8484 27.3685 19.8521C27.5957 19.8565 27.7759 20.1092 27.7709 20.4172C27.7657 20.7252 27.5766 20.9717 27.3493 20.9678C27.1219 20.9641 26.9417 20.7114 26.9469 20.4034Z",
                                    fill: "black",
                                }),
                                (0, n.jsx)("path", {
                                    fillRule: "evenodd",
                                    clipRule: "evenodd",
                                    d:
                                        "M33.1126 24.1829C33.1107 24.1765 33.117 24.1988 33.1126 24.1829C33.5691 24.1829 34.2861 24.7009 34.2861 25.9524C34.2861 27.1976 33.7627 28.6081 33.6391 28.9212C31.7537 33.3815 27.2536 35.8644 21.893 35.7072C16.8956 35.5608 12.6336 32.9578 10.7684 28.7144C9.64071 28.7156 8.47793 28.2259 7.59408 27.4528C6.66246 26.6382 6.08809 25.5841 5.97602 24.4846C5.88878 23.6286 5.99512 22.8322 6.26702 22.1376L5.21952 21.2614C0.425806 17.2662 15.4188 0.816569 20.2139 4.94501C20.238 4.96576 21.8453 6.52208 21.8491 6.52586C24.1611 5.55686 30.356 3.71193 30.3629 8.00677C30.3654 9.433 29.4447 11.0962 27.9693 12.6054C29.6744 14.1662 29.2247 16.3835 29.4963 18.4178L30.0884 18.5799C31.2174 18.8924 32.0204 19.3091 32.4134 19.7164C32.8063 20.1231 33.0011 20.5172 33.0718 20.9792C33.138 21.3519 33.1291 22.0101 32.6311 22.7461C32.8104 23.2209 32.9741 23.6944 33.1126 24.1829ZM10.6838 27.5572C10.8512 27.5609 11.0174 27.5502 11.1804 27.5226C12.9323 27.2278 13.3907 25.3496 13.1023 23.5054C12.7763 21.4229 11.3492 20.6888 10.3806 20.6366C10.1113 20.6228 9.86103 20.6466 9.65472 20.6875C7.92585 21.0314 6.94966 22.4834 7.14196 24.3691C7.31581 26.0756 9.06442 27.5144 10.6838 27.5572ZM6.76818 21.1992C7.34829 20.3676 8.29645 19.7661 9.37262 19.5592C10.7423 15.9299 13.0297 12.5859 16.057 10.2847C18.3036 8.43483 20.7264 7.10791 20.7264 7.10791C20.7264 7.10791 19.4217 5.61444 19.0276 5.50444C16.6033 4.85827 11.3677 8.42226 8.02455 13.1315C6.67202 15.0366 4.73556 18.4108 5.66145 20.1464C5.77543 20.3614 6.42176 20.9138 6.76818 21.1992ZM26.4226 26.7236C26.4263 26.7626 26.4021 26.8029 26.3671 26.8174C26.3671 26.8174 24.4191 27.7118 21.325 26.7671C21.4363 27.6945 22.561 28.0459 23.3468 28.1732C27.1808 28.8244 30.7654 26.6602 31.5721 26.1152C31.7107 26.0216 31.5704 26.2622 31.5454 26.2975C30.5577 27.5552 27.9024 29.0116 24.4478 29.0111C22.9411 29.0104 21.4353 28.4868 20.8824 27.6816C20.0247 26.4326 20.8398 24.6092 22.2694 24.7989C24.6859 25.0684 27.1631 24.8659 29.4001 23.8411C31.3506 22.9472 32.0873 21.9642 31.9766 21.1678C31.8047 19.9335 29.9749 19.7405 29.0499 19.4405C28.6474 19.3091 28.4487 19.2041 28.4036 18.4568C28.3839 18.1305 28.3264 16.9922 28.3054 16.5214C28.2686 15.6974 28.1679 14.5704 27.4599 14.1052C27.2751 13.9838 27.0701 13.9254 26.8543 13.9141C26.6821 13.9058 26.58 13.9295 26.5251 13.9422C26.5128 13.9451 26.5028 13.9474 26.4951 13.9486C26.1127 14.0128 25.8784 14.2062 25.6021 14.4344C25.5863 14.4475 25.5701 14.4608 25.554 14.4741C24.6707 15.2008 23.925 15.3195 23.0953 15.2844C22.8369 15.2735 22.5706 15.2478 22.2896 15.2205C22.0311 15.1955 21.7604 15.1692 21.4721 15.1524L21.12 15.1322C19.7306 15.0618 18.2404 16.2461 17.9927 17.9281C17.716 19.8056 18.7654 20.9556 19.4478 21.7035C19.6166 21.8884 19.7628 22.0485 19.8611 22.1892C19.9241 22.2741 19.9974 22.3935 19.9974 22.5072C19.9974 22.6431 19.9081 22.7505 19.821 22.8422C18.4034 24.2811 17.9501 26.5672 18.4844 28.4724C18.5513 28.7099 18.6358 28.9375 18.7358 29.1549C19.9891 32.0458 23.8773 33.3922 27.675 32.1676C30.3367 31.3095 32.6884 29.2356 33.1673 26.3748C33.2813 25.6294 33.1139 25.3415 32.8859 25.2025C32.6446 25.0561 32.3554 25.1069 32.3554 25.1069C32.3554 25.1069 32.2236 24.2164 31.8504 23.4068C30.7431 24.2691 29.318 24.8751 28.2328 25.1824C26.4944 25.6748 24.6164 25.8664 22.82 25.6342C22.0913 25.5401 21.6017 25.4768 21.3918 26.1498C23.7881 27.0159 26.3244 26.6451 26.3244 26.6451C26.3734 26.6401 26.4174 26.6752 26.4226 26.7236ZM19.509 9.9151C18.1984 10.577 16.7351 11.7555 15.5468 13.1114C15.5048 13.1598 15.5673 13.2264 15.6188 13.1894C16.6453 12.4521 18.0526 11.7669 19.8961 11.3231C21.9611 10.8259 23.9493 11.0346 25.1636 11.3093C25.2247 11.3231 25.2628 11.2194 25.2089 11.1892C24.4064 10.7448 23.1748 10.4431 22.3013 10.4368C22.2586 10.4362 22.2344 10.3872 22.2598 10.3532C22.4107 10.1527 22.6177 9.9547 22.8069 9.81139C22.8489 9.7787 22.8234 9.71146 22.7698 9.71458C21.6831 9.78047 19.2007 10.9123 19.2097 10.8712C19.2733 10.5694 19.4738 10.1709 19.5777 9.98487C19.6026 9.94087 19.5541 9.89247 19.509 9.9151Z",
                                    fill: "black",
                                }),
                            ],
                        }),
                        (0, n.jsx)("defs", { children: (0, n.jsx)("clipPath", { id: "clip0_900_3759", children: (0, n.jsx)("rect", { width: "40", height: "40", fill: "white" }) }) }),
                    ],
                }),
                rt = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "100",
                    height: "40",
                    viewBox: "0 0 100 40",
                    fill: "none",
                    children: [
                        (0, n.jsxs)("g", {
                            clipPath: "url(#clip0_900_3768)",
                            children: [
                                (0, n.jsx)("path", {
                                    d:
                                        "M23.688 24.5684L23.6737 24.5239L32.565 16.384V12.4621H18.3005V16.384H26.8209L26.8349 16.4215L18.0303 24.5684V28.4903H32.7082V24.5688L23.688 24.5684ZM41.4655 12.0889C39.8203 12.0889 38.4793 12.3367 37.443 12.8334C36.4775 13.2659 35.6643 13.9785 35.1087 14.8789C34.5772 15.785 34.2434 16.7933 34.1293 17.8376L38.4573 18.4462C38.614 17.5237 38.9272 16.8702 39.3968 16.485C39.9308 16.0822 40.5887 15.8787 41.2569 15.9098C42.1353 15.9098 42.7724 16.1444 43.1685 16.6143C43.561 17.0839 43.7604 17.7343 43.7604 18.5917V19.0191H39.5989C37.4806 19.0191 35.9588 19.4887 35.0332 20.4282C34.108 21.3673 33.6462 22.6077 33.6477 24.1484C33.6477 25.7263 34.1095 26.9008 35.0336 27.6712C35.9573 28.4411 37.119 28.824 38.5184 28.8193C40.2546 28.8193 41.5906 28.222 42.5251 27.027C43.077 26.293 43.4712 25.4528 43.6829 24.5591H43.8401L44.4367 28.481H48.3585V18.5491C48.3585 16.4966 47.8177 14.9068 46.7357 13.7799C45.6541 12.6522 43.897 12.0885 41.4655 12.0885V12.0889ZM42.8375 24.3311C42.215 24.8502 41.4001 25.1084 40.3855 25.1084C39.5493 25.1084 38.9686 24.9621 38.6431 24.6695C38.4844 24.531 38.3582 24.3593 38.2733 24.1665C38.1885 23.9738 38.1472 23.7647 38.1522 23.5542C38.143 23.3556 38.1742 23.1571 38.2441 22.971C38.314 22.7849 38.421 22.6149 38.5587 22.4714C38.7075 22.3318 38.883 22.2238 39.0747 22.1539C39.2664 22.0841 39.4702 22.0538 39.674 22.0649H43.7673V22.3351C43.7756 22.7169 43.6961 23.0954 43.5348 23.4416C43.3736 23.7877 43.135 24.0918 42.8375 24.3311ZM72.0733 12.4621H67.4399V28.4926H72.0733V12.4621ZM99.4305 12.4621C98.1216 12.4621 97.0899 12.9239 96.3354 13.848C95.7939 14.5115 95.382 15.4925 95.1002 16.7901H94.9639L94.3581 12.4621H90.4009V28.4903H95.0347V20.2706C95.0347 19.2343 95.2771 18.4396 95.7625 17.8872C96.248 17.3344 97.1434 17.058 98.4491 17.058H100.208V12.4621H99.4305ZM85.8024 12.9859C84.7208 12.3425 83.3562 12.0216 81.7094 12.0231C79.1165 12.0231 77.0872 12.761 75.622 14.2374C74.1564 15.7139 73.424 17.7494 73.424 20.3438C73.3865 21.9122 73.7289 23.4664 74.4219 24.8738C75.0562 26.1281 76.0441 27.1691 77.2634 27.8682C78.4909 28.5774 79.9507 28.9328 81.6436 28.9343C83.1073 28.9343 84.3302 28.709 85.3115 28.258C86.2345 27.853 87.0384 27.2182 87.6462 26.4142C88.2248 25.625 88.6545 24.7369 88.914 23.7934L84.9221 22.6758C84.7537 23.2892 84.4302 23.8489 83.9826 24.3009C83.5316 24.7515 82.7759 24.9772 81.7164 24.9772C80.4559 24.9772 79.5164 24.6164 78.8982 23.8944C78.4491 23.373 78.1677 22.6286 78.0434 21.6635H88.9752C89.0201 21.2125 89.0433 20.8343 89.0433 20.5292V19.5309C89.0697 18.1901 88.7929 16.8607 88.2335 15.6419C87.7094 14.5317 86.862 13.6059 85.8024 12.9859ZM81.5755 15.844C83.4541 15.844 84.5191 16.7684 84.7715 18.6177H78.1255C78.2308 18.0006 78.4865 17.4189 78.8699 16.924C79.4788 16.2024 80.3808 15.8424 81.5755 15.844ZM69.8071 6.00153C69.4585 5.98958 69.1111 6.04786 68.7855 6.17289C68.4599 6.29791 68.1628 6.48714 67.9118 6.7293C67.6646 6.97407 67.4708 7.26742 67.3427 7.59083C67.2146 7.91425 67.1549 8.26072 67.1674 8.60837C67.1548 8.95827 67.2145 9.30702 67.3428 9.6328C67.471 9.95858 67.6652 10.2544 67.913 10.5018C68.1606 10.7493 68.4566 10.9431 68.7825 11.0711C69.1084 11.199 69.4572 11.2584 69.8071 11.2454C70.1548 11.2585 70.5014 11.1991 70.8248 11.0709C71.1482 10.9427 71.4415 10.7486 71.6858 10.501C71.9283 10.2508 72.1177 9.95411 72.2424 9.62876C72.3672 9.30342 72.4247 8.95618 72.4116 8.60798C72.4278 8.26196 72.3716 7.91638 72.2465 7.59334C72.1215 7.27031 71.9304 6.97694 71.6854 6.73201C71.4405 6.48689 71.1472 6.29552 70.8242 6.17014C70.5012 6.04476 70.1556 5.98813 69.8094 6.00385L69.8071 6.00153ZM60.2349 12.0231C58.6566 12.0231 57.3884 12.5186 56.4303 13.5097C55.7207 14.2436 55.2004 15.3399 54.8687 16.7974H54.7208L54.1146 12.4695H50.1575V33.0981H54.7909V24.6013H54.96C55.1013 25.1679 55.2996 25.7188 55.5519 26.2454C55.9439 27.1033 56.5868 27.8222 57.3958 28.3072C58.2342 28.7649 59.1789 28.9926 60.1338 28.9672C62.0737 28.9672 63.5505 28.2116 64.5652 26.701C65.5798 25.1901 66.0873 23.0819 66.0873 20.3763C66.0873 17.7633 65.5961 15.7178 64.6147 14.2398C63.633 12.7621 62.1732 12.0231 60.2349 12.0231ZM60.7045 23.6386C60.164 24.4213 59.319 24.8127 58.1681 24.8127C57.6936 24.8346 57.2208 24.7431 56.7887 24.5458C56.3567 24.3486 55.9778 24.0513 55.6836 23.6784C55.0835 22.9255 54.7847 21.8942 54.7866 20.5854V20.2803C54.7866 18.951 55.0855 17.9332 55.6836 17.2271C56.2813 16.521 57.1101 16.1719 58.1681 16.1796C59.3395 16.1796 60.19 16.5512 60.7211 17.2953C61.2518 18.0389 61.517 19.076 61.517 20.4069C61.5205 21.7831 61.2511 22.8605 60.7091 23.6386H60.7045Z",
                                    fill: "#201515",
                                }),
                                (0, n.jsx)("path", { d: "M16.0305 24.5684H0V28.4953H16.0305V24.5684Z", fill: "#FF4F00" }),
                            ],
                        }),
                        (0, n.jsx)("defs", { children: (0, n.jsx)("clipPath", { id: "clip0_900_3768", children: (0, n.jsx)("rect", { width: "100", height: "40", fill: "white" }) }) }),
                    ],
                }),
                lt = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "36",
                    height: "40",
                    viewBox: "0 0 36 40",
                    fill: "none",
                    children: [
                        (0, n.jsx)("rect", { y: "2", width: "36", height: "36", rx: "6", fill: "#004CFE" }),
                        (0, n.jsx)("path", {
                            d:
                                "M25.3842 18.6106C25.8302 18.9194 26.0704 19.331 26.0704 19.777V20.0171C26.0704 20.3602 25.9331 20.8748 25.3842 21.2865C25.1098 21.4923 22.434 23.3448 19.5866 25.3002C16.8079 27.2213 13.6518 29.4168 13.2745 29.6913V30L13.1029 29.6913C13.1029 29.6913 13.0686 29.6569 13.1029 29.6226V27.976C13.1029 27.4271 13.1715 27.1527 13.789 26.741C14.3036 26.3979 22.5369 20.7033 23.6346 19.9485C22.5369 19.1938 14.4408 13.5677 13.892 13.1561L13.8233 13.1218C13.4117 12.813 13.1029 12.5729 13.1029 11.9554V10L13.2745 10.1029C13.6861 10.4117 25.0755 18.3705 25.3842 18.6106ZM18.283 20.8062C18.0086 20.8062 17.7341 20.7033 17.4254 20.4974C16.705 20.0171 13.0686 17.4786 13.0343 17.4442L13 17.4099V16.175C13 15.9005 13.1372 15.6604 13.343 15.5575C13.5832 15.4545 13.8577 15.4889 14.1321 15.6604C14.681 16.0034 19.9983 19.7084 20.0326 19.7427L20.1698 19.8113L20.0326 19.8799C20.0326 19.8799 19.6896 20.1201 19.2779 20.3945C18.9005 20.669 18.5918 20.8062 18.283 20.8062Z",
                            fill: "white",
                        }),
                    ],
                }),
                ct = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "143",
                    height: "40",
                    fill: "none",
                    children: [
                        (0, n.jsx)("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M24 10.4C24 9.075 22.925 8 21.6 8H2.4A2.401 2.401 0 0 0 0 10.4v19.2C0 30.925 1.075 32 2.4 32h19.2c1.325 0 2.4-1.075 2.4-2.4V10.4z",
                            fill: "#7742E6",
                        }),
                        (0, n.jsx)("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M20.077 13.69 5.595 17.57a2.255 2.255 0 0 0-1.671 2.178v1.52l13.014-3.488a4.234 4.234 0 0 0 3.139-4.09zm-6.2 6.704-8.282 2.22a2.254 2.254 0 0 0-1.671 2.177v1.52l6.815-1.827a4.234 4.234 0 0 0 3.138-4.09z",
                            fill: "#fff",
                        }),
                        (0, n.jsx)("path", {
                            d:
                                "M37.835 11.556c.319-.032.562.012.729.131.167.12.25.307.25.562 0 .493-.27.764-.811.812l-.693.048c-.908.063-1.585.338-2.03.824-.447.486-.71 1.214-.789 2.186l-.048.669h2.604c.255 0 .45.067.585.203a.727.727 0 0 1 .203.537c0 .239-.071.43-.215.573-.143.144-.35.215-.62.215h-2.676l-.74 9.293c-.017.302-.12.533-.311.693-.191.159-.422.239-.693.239a1 1 0 0 1-.68-.24c-.184-.159-.268-.39-.252-.692l.74-9.293h-1.6c-.255 0-.45-.067-.585-.203a.726.726 0 0 1-.203-.537c0-.24.072-.43.215-.574.143-.143.358-.214.645-.214h1.648l.024-.43c.112-1.545.566-2.704 1.362-3.476.796-.773 1.95-1.207 3.464-1.302l.477-.024zM40.2 28.541a.956.956 0 0 1-.669-.24c-.175-.159-.254-.397-.238-.716l1.218-15.24c.016-.303.127-.53.334-.681.207-.152.446-.227.717-.227.27 0 .49.075.657.227.167.15.243.378.227.68l-1.219 15.24c-.015.32-.123.558-.322.718-.2.159-.434.239-.705.239zm13.88-11.992c.286 0 .513.083.68.25.167.168.235.403.203.705l-.812 10.153a.851.851 0 0 1-.323.645c-.199.159-.433.239-.704.239-.27 0-.486-.076-.645-.227-.16-.152-.231-.363-.215-.634l.095-1.146a4.127 4.127 0 0 1-1.6 1.517c-.669.358-1.417.537-2.246.537-1.29 0-2.269-.338-2.938-1.015-.669-.677-1.003-1.668-1.003-2.974 0-.287.008-.502.024-.645l.501-6.45c.032-.302.148-.537.347-.705a1.06 1.06 0 0 1 .704-.25c.287 0 .514.083.681.25.167.168.235.403.203.705l-.501 6.33a3.868 3.868 0 0 0-.024.502c0 1.752.836 2.628 2.508 2.628 1.035 0 1.863-.319 2.484-.956s.972-1.52 1.051-2.651l.478-5.853c.032-.302.148-.537.347-.705.199-.167.434-.25.704-.25zm5.087 6.354v.095c0 1.274.315 2.262.944 2.962.63.701 1.54 1.052 2.735 1.052 1.258 0 2.365-.35 3.32-1.052a.83.83 0 0 1 .479-.167c.19 0 .346.072.465.215.12.144.18.31.18.502 0 .287-.128.55-.383.788-.43.383-1.03.693-1.803.932a7.923 7.923 0 0 1-2.353.358c-1.688 0-3.03-.51-4.025-1.529-.996-1.019-1.493-2.388-1.493-4.108 0-1.274.235-2.397.704-3.369.47-.971 1.139-1.728 2.007-2.269.868-.541 1.875-.812 3.022-.812 1.56 0 2.755.466 3.583 1.397.828.932 1.242 2.282 1.242 4.05 0 .302-.08.537-.239.704-.159.167-.374.25-.645.25h-7.74zm3.87-4.897c-1.067 0-1.919.314-2.556.943-.637.63-1.043 1.533-1.218 2.712h6.784c.048-1.195-.195-2.103-.728-2.724-.534-.62-1.294-.931-2.282-.931zm13.64-1.505c1.306 0 2.302.342 2.987 1.027.684.685 1.027 1.68 1.027 2.986 0 .287-.008.502-.024.645l-.502 6.426c-.032.319-.143.557-.334.717-.191.159-.422.239-.693.239-.303 0-.537-.08-.705-.24-.167-.159-.235-.397-.203-.716l.502-6.307c.016-.111.024-.278.024-.501 0-1.768-.852-2.652-2.556-2.652-1.083 0-1.943.323-2.58.968s-1.003 1.532-1.099 2.663l-.478 5.829c-.016.319-.12.557-.31.717-.191.159-.43.239-.717.239s-.514-.08-.68-.24c-.168-.159-.244-.397-.228-.716l.836-10.129c.016-.286.124-.51.323-.668.199-.16.434-.24.705-.24.27 0 .485.08.645.24.159.159.23.374.215.644l-.096 1.147a4.168 4.168 0 0 1 1.624-1.529c.685-.366 1.458-.55 2.318-.55zm9.866 7.716a3.62 3.62 0 0 0-.024.477c0 .765.175 1.346.526 1.744.35.398.844.598 1.48.598.208 0 .407-.012.598-.036a3.8 3.8 0 0 1 .43-.036c.16 0 .29.064.394.191.104.127.156.303.156.525 0 .335-.14.57-.418.705-.28.136-.769.203-1.47.203-1.146 0-2.038-.326-2.675-.98-.637-.652-.956-1.576-.956-2.77 0-.223.008-.398.024-.526l.454-5.996h-1.576c-.255 0-.45-.067-.586-.203a.726.726 0 0 1-.203-.537c0-.255.076-.45.227-.585.151-.136.362-.203.633-.203h1.625l.215-2.724c.031-.27.139-.49.322-.657.183-.167.418-.25.705-.25.302 0 .537.087.704.262.168.175.235.406.204.693l-.215 2.676h2.627c.24 0 .43.067.574.203a.705.705 0 0 1 .215.537c0 .255-.072.45-.215.585-.144.136-.35.203-.621.203h-2.7l-.454 5.9z",
                            fill: "#7742E6",
                        }),
                        (0, n.jsx)("path", {
                            d:
                                "M101.067 28.636c-1.752 0-3.277-.358-4.575-1.075a7.31 7.31 0 0 1-2.986-3.034c-.693-1.306-1.04-2.819-1.04-4.539 0-1.72.347-3.229 1.04-4.527a7.327 7.327 0 0 1 2.986-3.021c1.298-.717 2.823-1.075 4.575-1.075 1.098 0 2.161.167 3.189.501 1.027.335 1.867.78 2.52 1.338l-1.362 3.106c-1.385-.972-2.803-1.458-4.252-1.458-1.37 0-2.417.43-3.141 1.29-.725.86-1.087 2.142-1.087 3.846 0 1.704.362 2.99 1.087 3.858.724.868 1.772 1.302 3.141 1.302 1.449 0 2.867-.485 4.252-1.457l1.362 3.106c-.653.557-1.493 1.003-2.52 1.337a10.244 10.244 0 0 1-3.189.502zm23.172-.215h-4.826l-2.914-5.375c-.367-.621-.948-.932-1.744-.932h-1.338v6.307h-4.324V11.58h8.027c2.038 0 3.571.442 4.598 1.325 1.028.884 1.541 2.162 1.541 3.835 0 1.274-.35 2.353-1.051 3.236-.701.884-1.688 1.477-2.962 1.78.971.207 1.744.836 2.317 1.887l2.676 4.778zm-7.812-9.603c.972 0 1.668-.151 2.09-.454.422-.303.633-.796.633-1.481 0-.7-.211-1.206-.633-1.517-.422-.31-1.118-.466-2.09-.466h-3.058v3.918h3.058zm23.172-7.238h3.392V28.42h-3.822v-8.839l-3.249 6.044h-2.819l-3.225-5.9-.024 8.695h-3.822V11.58h3.464l5.064 9.579 5.041-9.58z",
                            fill: "#441D99",
                        }),
                    ],
                }),
                dt = (0, n.jsx)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "37",
                    height: "40",
                    viewBox: "0 0 37 40",
                    fill: "none",
                    children: (0, n.jsx)("path", {
                        d:
                            "M25.8063 8.83551L20.702 22.8647C20.4931 23.4319 20.2244 23.79 19.8066 24.0587C19.3887 24.2975 18.9111 24.387 18.3738 24.387C17.5977 24.387 17.0306 24.2378 16.6127 23.9393C16.2545 23.6109 15.9261 23.1931 15.7172 22.6259L10.9114 9.91008V22.8946C10.9114 23.3722 10.7622 23.79 10.4637 24.1482C10.1354 24.5064 9.56822 24.6855 8.76229 24.6855C7.9862 24.6855 7.41906 24.5363 7.09072 24.2378C6.76238 23.9393 6.64298 23.4617 6.64298 22.805V4.2387C6.64298 3.46262 6.94147 2.89548 7.44891 2.53729C7.9862 2.20895 8.70259 2 9.65777 2C10.5831 2 11.3293 2.14925 11.8069 2.53729C12.2845 2.92533 12.6726 3.40292 12.8815 4.05961L18.4036 19.8201L23.6571 4.20885C23.8959 3.43277 24.3138 2.89548 24.8809 2.53729C25.4481 2.20895 26.2242 2.0597 27.2092 2.0597C28.1047 2.0597 28.7912 2.20895 29.3285 2.53729C29.8658 2.86563 30.1046 3.40292 30.1046 4.05961V22.8647C30.1046 23.3423 29.9553 23.7602 29.6568 24.1184C29.3285 24.4766 28.7614 24.6557 27.9554 24.6557C27.1793 24.6557 26.6421 24.5064 26.3137 24.1781C25.9854 23.8497 25.8361 23.3722 25.8361 22.7453C25.8063 22.6856 25.8063 8.83551 25.8063 8.83551ZM35.5073 27.0154C34.0447 26.2692 33.2089 26.6871 32.7015 27.7617C32.0448 28.9855 30.821 29.7616 29.4479 29.7616H24.0153C21.8662 29.7616 19.8066 30.6571 18.3439 32.1197C16.8813 30.6571 14.8217 29.7616 12.6726 29.7616H7.32952C5.95645 29.7616 4.67292 28.9855 4.07594 27.7617C3.53865 26.6871 2.73271 26.299 1.27009 27.0154C0.0164204 27.6423 -0.282073 28.687 0.255215 29.7616C1.59844 32.3883 4.31473 34.0599 7.26982 34.0599H12.7024C14.374 34.0599 15.8366 35.1942 16.2843 36.806C16.2843 36.8359 16.4336 38 18.3738 38C20.2841 38 20.4632 36.806 20.4632 36.806C20.911 35.224 22.3736 34.0599 24.0452 34.0599H29.4479C32.4328 34.03 35.1491 32.3883 36.4924 29.7317C37.0595 28.687 36.7908 27.6124 35.5073 27.0154Z",
                        fill: "#FE5301",
                    }),
                }),
                ht = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "114",
                    height: "40",
                    viewBox: "0 0 114 40",
                    fill: "none",
                    children: [
                        (0, n.jsx)("path", {
                            d:
                                "M14.8849 20.9095C12.9854 20.9095 11.4761 21.6982 10.4091 23.2482C9.68043 21.7797 8.22321 20.8824 6.63578 20.9095C5.12648 20.855 3.69519 21.5349 2.73239 22.7588V22.4868C2.73239 21.6982 2.10789 21.0455 1.35317 21.0455C0.598587 21.0455 0 21.6982 0 22.4868V33.4466C0.0260421 34.2352 0.676587 34.8607 1.4313 34.8064C2.13393 34.7792 2.70635 34.1809 2.73239 33.4466V25.8591C3.35689 24.7985 4.29377 23.6018 5.98524 23.6018C7.59858 23.6018 8.22321 24.4177 8.22321 26.539V33.4466C8.24925 34.2352 8.8998 34.8607 9.65438 34.8064C10.357 34.7792 10.9296 34.1809 10.9556 33.4466V25.8591C11.5801 24.7985 12.5169 23.6018 14.2083 23.6018C15.8218 23.6018 16.4463 24.4177 16.4463 26.539V33.4466C16.4723 34.2352 17.1229 34.8607 17.8776 34.8064C18.5802 34.7792 19.1526 34.1809 19.1787 33.4466V26.0767C19.2308 23.5746 17.8776 20.9095 14.8849 20.9095Z",
                            fill: "#111111",
                        }),
                        (0, n.jsx)("path", {
                            d:
                                "M27.9997 20.9092C26.5165 20.9092 25.0332 21.2355 23.68 21.861C23.1856 22.0515 22.8732 22.5409 22.8732 23.0849C22.8732 23.7648 23.3677 24.3086 24.0183 24.3358H24.0442C24.1745 24.3358 24.3045 24.3086 24.4346 24.2814C25.4495 23.9007 26.5165 23.6831 27.6093 23.6831C29.7172 23.6831 30.602 24.4991 30.6279 26.5114H27.9216C24.2525 26.4842 22.0405 28.116 22.0405 30.8899C22.0405 33.5823 24.1745 34.9964 26.2822 34.9964C27.8696 35.0508 29.405 34.4798 30.6279 33.4192V33.4464C30.654 34.235 31.3045 34.8605 32.0592 34.8061C32.7619 34.779 33.3343 34.1806 33.3603 33.4464V26.2124C33.3603 23.5744 31.6949 20.9092 27.9997 20.9092ZM27.1149 32.4129C25.5796 32.4129 24.7729 31.8146 24.7729 30.6452C24.7729 30.21 24.7729 28.9046 28.2079 28.9046H30.6279V30.6724C29.8994 31.4882 28.5723 32.4129 27.1149 32.4129Z",
                            fill: "#111111",
                        }),
                        (0, n.jsx)("path", {
                            d:
                                "M38.5913 15.7966H38.7475C39.5802 15.7966 40.2568 16.5037 40.2568 17.374V17.4828C40.2568 18.3531 39.5802 19.0602 38.7475 19.0602H38.5913C37.7586 19.0602 37.082 18.3531 37.082 17.4828V17.374C37.082 16.5037 37.7586 15.7966 38.5913 15.7966Z",
                            fill: "#111111",
                        }),
                        (0, n.jsx)("path", {
                            d:
                                "M38.6437 21.0178C37.8891 21.0178 37.2905 21.6432 37.2905 22.432V22.4592V33.419C37.3166 34.2076 37.9671 34.8331 38.7218 34.7787C39.4245 34.7515 39.9969 34.1532 40.0229 33.419V22.4592C40.0229 21.6704 39.4245 21.0178 38.6437 21.0178Z",
                            fill: "#111111",
                        }),
                        (0, n.jsx)("path", {
                            d:
                                "M45.5915 15.3884C44.8367 15.3884 44.2383 16.0139 44.2383 16.8027V16.8299V33.4191C44.2642 34.2077 44.9149 34.8332 45.6695 34.7789C46.3721 34.7517 46.9446 34.1534 46.9705 33.4191V16.8299C46.9705 16.0411 46.3721 15.3884 45.6174 15.3884C45.5915 15.3884 45.5915 15.3884 45.5915 15.3884Z",
                            fill: "#111111",
                        }),
                        (0, n.jsx)("path", {
                            d:
                                "M56.443 20.9092C54.4912 20.9092 52.8779 21.6706 51.7849 23.1121C50.8481 24.363 50.3276 26.0763 50.3276 27.9529C50.3276 32.3586 52.7997 34.9964 56.9113 34.9964C59.1753 34.9964 60.2943 34.4526 61.3352 33.8271C61.7775 33.6095 62.0637 33.1472 62.1158 32.6304C62.1158 31.9233 61.5693 31.3523 60.9188 31.3523H60.8927C60.7106 31.3523 60.5025 31.3795 60.3464 31.4882C59.3574 32.0322 58.2645 32.2769 57.1715 32.2497C54.8816 32.2497 53.5284 31.1347 53.1901 29.0135H61.153C61.8817 29.0407 62.5062 28.4423 62.5322 27.6809C62.5322 27.6537 62.5322 27.6265 62.5322 27.5721C62.5322 23.0032 59.3834 20.9092 56.443 20.9092ZM56.443 23.4111C57.5879 23.4111 59.5136 24.091 59.7738 26.5931H53.112C53.3723 24.3902 54.9337 23.4111 56.443 23.4111Z",
                            fill: "#111111",
                        }),
                        (0, n.jsx)("path", {
                            d:
                                "M72.0304 20.9095H71.9004C70.5993 20.9095 69.4022 21.5622 68.3092 22.8132V22.4869C68.3092 21.6983 67.6847 21.0456 66.9301 21.0456C66.1754 21.0456 65.5509 21.6983 65.577 22.4869V33.4467C65.6029 34.2353 66.2535 34.8608 67.0081 34.8065C67.7108 34.7793 68.2833 34.181 68.3092 33.4467V25.7503C69.194 24.4178 70.4431 23.6834 71.8483 23.6834H71.9785C72.707 23.7379 73.3056 23.1668 73.3577 22.4053C73.3577 22.3782 73.3577 22.351 73.3577 22.3238C73.3836 21.5622 72.7852 20.9095 72.0565 20.8823C72.0565 20.9095 72.0304 20.9095 72.0304 20.9095Z",
                            fill: "#111111",
                        }),
                        (0, n.jsx)("path", {
                            d:
                                "M109.92 5H82.2315C80.0717 5 78.3281 6.82206 78.3281 9.07934V34.9966L83.7148 29.4215H109.945C112.105 29.4215 113.849 27.5995 113.849 25.3422V9.07934C113.822 6.82206 112.079 5 109.92 5ZM86.6293 23.2753C86.6293 23.8737 86.161 24.3631 85.5884 24.3631C85.016 24.3631 84.5476 23.8737 84.5476 23.2753V11.7172C84.5476 11.119 85.016 10.6294 85.5884 10.6294C86.161 10.6294 86.6293 11.119 86.6293 11.7172V23.2753ZM91.4696 23.2753C91.4696 23.8737 91.0011 24.3631 90.4287 24.3631C89.8561 24.3631 89.3878 23.8737 89.3878 23.2753V15.6334C89.3878 15.0351 89.8561 14.5456 90.4287 14.5456C91.0011 14.5456 91.4696 15.0351 91.4696 15.6334V23.2753ZM91.5997 12.1524C91.5997 12.8051 91.1053 13.3218 90.4806 13.3218H90.3766C89.7521 13.3218 89.2577 12.8051 89.2577 12.1524V12.0708C89.2577 11.4182 89.7521 10.9014 90.3766 10.9014H90.4806C91.1053 10.9014 91.5997 11.4182 91.5997 12.0708V12.1524ZM98.938 24.0912C98.4696 24.3359 97.9491 24.4447 97.4028 24.4447C95.6071 24.4447 94.6443 23.5473 94.6443 21.834V16.5853H93.7075C93.3952 16.5853 93.135 16.3405 93.135 16.0142V15.987C93.135 15.7966 93.2391 15.6063 93.3952 15.4702L95.7113 13.1042C95.8414 12.9683 95.9975 12.8867 96.1797 12.8595C96.4919 12.8595 96.7781 13.1315 96.7781 13.4577C96.7781 13.4577 96.7781 13.4577 96.7781 13.485V14.6272H98.4436C98.964 14.6272 99.3804 15.0623 99.3804 15.6063C99.3804 16.1501 98.964 16.5853 98.4436 16.5853H96.7781V21.6979C96.7781 22.4323 97.1425 22.4867 97.6369 22.4867C97.8451 22.4867 98.0533 22.4595 98.2355 22.405C98.3656 22.3507 98.5217 22.3507 98.6518 22.3235C99.1202 22.3235 99.5105 22.7314 99.5366 23.2482C99.4845 23.6017 99.2504 23.9552 98.938 24.0912ZM105.314 22.405C106.068 22.4323 106.823 22.2419 107.499 21.8884C107.63 21.8068 107.786 21.7796 107.915 21.7796C108.436 21.7796 108.853 22.1875 108.853 22.7314C108.853 22.7314 108.853 22.7314 108.853 22.7587C108.826 23.1394 108.619 23.4929 108.28 23.6561C107.552 24.0912 106.771 24.4719 105.157 24.4719C102.243 24.4719 100.473 22.5954 100.473 19.468C100.473 15.7966 102.815 14.464 104.793 14.464C107.76 14.464 109.113 16.9388 109.113 19.2232C109.139 19.7943 108.697 20.2838 108.15 20.311C108.124 20.311 108.098 20.311 108.072 20.311H102.607C102.893 21.6708 103.83 22.405 105.314 22.405Z",
                            fill: "#09C269",
                        }),
                        (0, n.jsx)("path", { d: "M104.845 16.3946C103.7 16.3675 102.737 17.265 102.633 18.4615H107.083C106.953 17.265 105.99 16.3675 104.845 16.3946Z", fill: "#09C269" }),
                    ],
                }),
                ut = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "99",
                    height: "40",
                    viewBox: "0 0 99 40",
                    fill: "none",
                    children: [
                        (0, n.jsx)("path", {
                            d:
                                "M10.7147 10.6353V18.53H3.44773V10.6353H0V29.4811H3.44867V21.8425H10.7137V29.4811H14.1633V10.6353H10.7147ZM25.2019 23.3898C25.2019 24.1452 24.9012 24.8696 24.366 25.4037C23.8309 25.9379 23.105 26.238 22.3482 26.238C21.5914 26.238 20.8655 25.9379 20.3304 25.4037C19.7952 24.8696 19.4945 24.1452 19.4945 23.3898V15.3171H16.2232V23.3898C16.2232 25.0095 16.8679 26.5629 18.0154 27.7082C19.1629 28.8535 20.7193 29.4969 22.3421 29.4969C23.965 29.4969 25.5213 28.8535 26.6689 27.7082C27.8164 26.5629 28.4611 25.0095 28.4611 23.3898V15.3171H25.2019V23.3898ZM49.4415 16.149C49.4415 14.4937 50.5381 13.9692 51.7393 13.9692C52.7081 13.9692 53.9868 14.7051 54.824 15.5975L56.966 13.0768C55.8964 11.6329 53.7273 10.6353 51.9512 10.6353C48.4017 10.6353 45.8351 12.7098 45.8351 16.149C45.8351 22.53 53.6489 20.5048 53.6489 24.0763C53.6489 25.1774 52.5775 26.1499 51.3511 26.1499C49.4163 26.1499 48.7891 25.2063 47.9005 24.2077L45.5224 26.6753C47.0437 28.5384 48.9197 29.4848 51.1663 29.4848C54.5384 29.4848 57.2507 27.3851 57.2507 24.1024C57.2507 17.019 49.4359 19.2203 49.4359 16.149M97.7825 26.4704C95.8496 26.4704 95.2999 25.6357 95.2999 24.3577V18.6986H98.3052V15.8313H95.2999V12.0484L91.9828 13.5342V25.061C91.9828 28.0093 94.0212 29.4951 96.8156 29.4951C97.2543 29.5025 97.6929 29.4671 98.1241 29.3907L98.9333 26.4173C98.5684 26.4424 98.1493 26.4676 97.7825 26.4676M37.6544 15.4112C36.0341 15.4112 34.9029 15.8807 33.8091 16.951V10.748H30.5331V22.2459C30.5331 26.5496 33.6504 29.4988 37.1541 29.4988C41.0405 29.4988 44.4593 26.4974 44.4593 22.4564C44.4593 18.4657 41.3131 15.414 37.6544 15.414M37.6339 26.2077C37.1456 26.2077 36.6622 26.1117 36.2111 25.9252C35.76 25.7387 35.3501 25.4654 35.0049 25.1208C34.6596 24.7762 34.3858 24.3672 34.1989 23.917C34.0121 23.4668 33.9159 22.9842 33.9159 22.4969C33.9159 22.0096 34.0121 21.5271 34.1989 21.0769C34.3858 20.6267 34.6596 20.2176 35.0049 19.873C35.3501 19.5284 35.76 19.2551 36.2111 19.0686C36.6622 18.8821 37.1456 18.7862 37.6339 18.7862C38.6199 18.7862 39.5656 19.1771 40.2628 19.873C40.9601 20.5689 41.3518 21.5128 41.3518 22.4969C41.3518 23.4811 40.9601 24.4249 40.2628 25.1208C39.5656 25.8167 38.6199 26.2077 37.6339 26.2077ZM73.2331 22.285C73.2331 18.2366 69.8217 15.2426 65.9279 15.2426C62.4251 15.2426 59.3068 18.1909 59.3068 22.4955V34H62.5828V27.7885C63.6748 28.857 64.8079 29.3283 66.4263 29.3283C70.0849 29.3283 73.2331 26.2766 73.2331 22.285ZM70.1307 22.244C70.1307 23.2282 69.739 24.172 69.0417 24.8679C68.3445 25.5638 67.3988 25.9548 66.4127 25.9548C65.4267 25.9548 64.481 25.5638 63.7838 24.8679C63.0865 24.172 62.6948 23.2282 62.6948 22.244C62.6948 21.2599 63.0865 20.316 63.7838 19.6201C64.481 18.9242 65.4267 18.5333 66.4127 18.5333C67.3988 18.5333 68.3445 18.9242 69.0417 19.6201C69.739 20.316 70.1307 21.2599 70.1307 22.244Z",
                            fill: "#33475B",
                        }),
                        (0, n.jsx)("path", {
                            d:
                                "M83.8188 15.0843V11.7988C84.2538 11.5959 84.6221 11.2738 84.8809 10.8701C85.1396 10.4664 85.2782 9.99764 85.2804 9.5184V9.44294C85.2804 8.04564 84.1455 6.9129 82.7455 6.9129H82.6698C81.9975 6.9129 81.3528 7.17946 80.8774 7.65393C80.402 8.12841 80.1349 8.77193 80.1349 9.44294V9.5184C80.1371 9.99764 80.2757 10.4664 80.5344 10.8701C80.7932 11.2738 81.1615 11.5959 81.5965 11.7988V15.0843C80.3463 15.2754 79.1688 15.7928 78.1833 16.5841L69.1552 9.56591C69.2196 9.33395 69.2532 9.09548 69.2569 8.85608C69.258 8.29223 69.0916 7.74071 68.7786 7.2713C68.4656 6.80188 68.0202 6.43566 67.4986 6.21895C66.9771 6.00223 66.4028 5.94477 65.8486 6.05382C65.2943 6.16288 64.7849 6.43355 64.3847 6.8316C63.9846 7.22965 63.7117 7.7372 63.6007 8.29005C63.4896 8.84289 63.5453 9.4162 63.7607 9.93745C63.9761 10.4587 64.3416 10.9045 64.8109 11.2184C65.2802 11.5323 65.8322 11.7002 66.3972 11.701C66.8914 11.6987 67.3764 11.567 67.8037 11.319L76.6937 18.2236C75.8951 19.4277 75.4785 20.8441 75.4981 22.288C75.5177 23.732 75.9728 25.1365 76.8039 26.3186L74.1 29.0182C73.8814 28.9484 73.6537 28.9114 73.4243 28.9082C72.9605 28.9086 72.5073 29.0462 72.1219 29.3035C71.7365 29.5609 71.4361 29.9265 71.2588 30.3542C71.0815 30.7819 71.0352 31.2524 71.1258 31.7063C71.2164 32.1603 71.4397 32.5772 71.7676 32.9045C72.0955 33.2318 72.5133 33.4547 72.9681 33.5451C73.4229 33.6354 73.8943 33.5892 74.3228 33.4123C74.7513 33.2353 75.1177 32.9356 75.3755 32.5509C75.6334 32.1662 75.7712 31.7139 75.7716 31.251C75.7686 31.022 75.7315 30.7947 75.6615 30.5766L78.3364 27.9059C79.2087 28.5762 80.2231 29.0382 81.3019 29.2567C82.3808 29.4753 83.4954 29.4444 84.5604 29.1665C85.6255 28.8887 86.6127 28.3712 87.4464 27.6537C88.2801 26.9363 88.9382 26.0379 89.3703 25.0273C89.8024 24.0168 89.997 22.921 89.9392 21.8238C89.8815 20.7266 89.5728 19.6572 89.037 18.6974C88.5011 17.7377 87.7522 16.9131 86.8478 16.2868C85.9433 15.6605 84.9072 15.2492 83.8188 15.0843ZM82.71 25.8901C82.2156 25.9037 81.7236 25.8182 81.2628 25.6388C80.8021 25.4593 80.3821 25.1895 80.0277 24.8453C79.6732 24.5012 79.3914 24.0895 79.1991 23.6348C79.0067 23.1801 78.9075 22.6915 78.9075 22.198C78.9075 21.7044 79.0067 21.2158 79.1991 20.7611C79.3914 20.3064 79.6732 19.8947 80.0277 19.5506C80.3821 19.2064 80.8021 18.9366 81.2628 18.7571C81.7236 18.5777 82.2156 18.4922 82.71 18.5058C83.6681 18.5393 84.5759 18.9426 85.242 19.6308C85.9081 20.319 86.2807 21.2383 86.2811 22.1952C86.2816 23.1521 85.91 24.0718 85.2446 24.7607C84.5791 25.4495 83.6718 25.8538 82.7137 25.8882",
                            fill: "#FF7A59",
                        }),
                    ],
                }),
                pt = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "33",
                    height: "40",
                    viewBox: "0 0 33 40",
                    fill: "none",
                    children: [
                        (0, n.jsx)("path", {
                            d:
                                "M32.5208 33.4952C32.5275 34.7779 31.9835 36.0017 31.0267 36.8561C30.07 37.7104 28.7925 38.1131 27.5188 37.9618C25.2267 37.6226 23.5471 35.628 23.6029 33.3116V6.68049C23.5476 4.3616 25.2313 2.36603 27.5265 2.03036C28.799 1.88142 30.0743 2.28513 31.0292 3.1392C31.9842 3.99327 32.5273 5.21576 32.5208 6.49693V33.4952Z",
                            fill: "#F9AB00",
                        }),
                        (0, n.jsx)("path", {
                            d:
                                "M4.45892 29.0821C6.92151 29.0821 8.91784 31.0784 8.91784 33.541C8.91784 36.0036 6.92151 37.9999 4.45892 37.9999C1.99633 37.9999 0 36.0036 0 33.541C0 31.0784 1.99633 29.0821 4.45892 29.0821ZM16.1913 15.5677C13.7171 15.7033 11.7974 17.7787 11.8548 20.256V32.2332C11.8548 35.4837 13.285 37.4569 15.3806 37.8776C16.6962 38.1442 18.062 37.805 19.1 36.9538C20.138 36.1027 20.7381 34.8298 20.7344 33.4875V20.0495C20.7366 18.8495 20.2566 17.699 19.4024 16.8562C18.5481 16.0135 17.3912 15.5492 16.1913 15.5677Z",
                            fill: "#E37400",
                        }),
                    ],
                }),
                mt = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "60",
                    height: "40",
                    viewBox: "0 0 60 40",
                    fill: "none",
                    children: [
                        (0, n.jsxs)("g", {
                            clipPath: "url(#clip0_900_3793)",
                            children: [
                                (0, n.jsx)("path", {
                                    d:
                                        "M5.61259 2H54.8407C57.9561 2 60.4782 4.52189 60.4782 7.63745V26.4286C60.4782 29.5439 57.9563 32.0661 54.8407 32.0661H37.1871L39.6102 38L28.9535 32.0661H5.63763C2.5223 32.0661 0.000180256 29.5442 0.000180256 26.4286V7.63745C-0.0245448 4.54669 2.49726 2 5.61259 2Z",
                                    fill: "#7F54B3",
                                }),
                                (0, n.jsx)("path", {
                                    d:
                                        "M3.44347 7.13832C3.78766 6.67122 4.30394 6.42536 4.9923 6.3762C6.24611 6.27786 6.95906 6.86789 7.13117 8.14629C7.89328 13.2846 8.72916 17.6359 9.61431 21.2008L14.9983 10.9491C15.49 10.0148 16.1046 9.52316 16.8421 9.47399C17.9238 9.40024 18.5876 10.0886 18.858 11.5391C19.4726 14.8089 20.2594 17.5869 21.1936 19.947C21.8328 13.7024 22.9145 9.20362 24.4388 6.42541C24.8076 5.73704 25.3485 5.39286 26.0614 5.34368C26.6269 5.29451 27.1431 5.4666 27.6102 5.83537C28.0773 6.20414 28.3232 6.67124 28.3724 7.23669C28.3969 7.67922 28.3232 8.04797 28.1265 8.41674C27.1677 10.1868 26.381 13.1617 25.7419 17.2916C25.1273 21.299 24.906 24.4212 25.0535 26.6584C25.1027 27.273 25.0043 27.8139 24.7585 28.281C24.4635 28.8218 24.0209 29.1169 23.4555 29.166C22.8163 29.2152 22.1526 28.9202 21.5134 28.2564C19.227 25.9209 17.4077 22.43 16.0803 17.7833C14.4823 20.9301 13.3023 23.2904 12.5402 24.8637C11.0897 27.6417 9.86047 29.0677 8.82786 29.1414C8.16407 29.1905 7.59862 28.6251 7.10693 27.445C5.85312 24.2243 4.50094 18.0046 3.05041 8.78544C2.95208 8.14624 3.09958 7.5808 3.44376 7.13827L3.44347 7.13832ZM56.2767 10.998C55.3916 9.44921 54.0886 8.5149 52.3432 8.14612C51.8761 8.04779 51.4336 7.99862 51.0157 7.99862C48.6556 7.99862 46.738 9.22786 45.2384 11.6864C43.96 13.776 43.3208 16.0871 43.3208 18.6191C43.3208 20.5121 43.7141 22.1346 44.5008 23.4869C45.3859 25.0357 46.6889 25.97 48.4343 26.3388C48.9014 26.4371 49.3439 26.4863 49.7618 26.4863C52.1465 26.4863 54.064 25.2571 55.5391 22.7986C56.8175 20.6843 57.4567 18.3733 57.4567 15.8412C57.4813 13.9236 57.0634 12.3257 56.2767 10.998ZM53.1791 17.808C52.8349 19.4305 52.2203 20.6351 51.3106 21.4466C50.5977 22.0858 49.9339 22.3562 49.3193 22.2333C48.7293 22.1103 48.2376 21.5941 47.8688 20.6353C47.5738 19.8732 47.4263 19.111 47.4263 18.3981C47.4263 17.7835 47.4755 17.1689 47.5984 16.6034C47.8196 15.5955 48.2376 14.6121 48.9013 13.6778C49.7126 12.4732 50.5731 11.9815 51.4582 12.1536C52.0482 12.2765 52.5399 12.7928 52.9087 13.7516C53.2037 14.5137 53.3512 15.2758 53.3512 15.9888C53.3512 16.628 53.302 17.2425 53.1791 17.808ZM40.8867 10.998C40.0016 9.44921 38.6741 8.5149 36.9532 8.14612C36.4861 8.04779 36.0436 7.99862 35.6257 7.99862C33.2656 7.99862 31.348 9.22786 29.8484 11.6864C28.57 13.776 27.9308 16.0871 27.9308 18.6191C27.9308 20.5121 28.3241 22.1346 29.1108 23.4869C29.9959 25.0357 31.2989 25.97 33.0443 26.3388C33.5114 26.4371 33.9539 26.4863 34.3718 26.4863C36.7565 26.4863 38.674 25.2571 40.1491 22.7986C41.4275 20.6843 42.0667 18.3733 42.0667 15.8412C42.0667 13.9236 41.6734 12.3257 40.8867 10.998ZM37.7645 17.808C37.4203 19.4305 36.8057 20.6351 35.8961 21.4466C35.1831 22.0858 34.5194 22.3562 33.9047 22.2333C33.3147 22.1103 32.823 21.5941 32.4542 20.6353C32.1592 19.8732 32.0117 19.111 32.0117 18.3981C32.0117 17.7835 32.0609 17.1689 32.1838 16.6034C32.4051 15.5955 32.823 14.6121 33.4868 13.6778C34.2981 12.4732 35.1585 11.9815 36.0436 12.1536C36.6337 12.2765 37.1254 12.7928 37.4941 13.7516C37.7891 14.5137 37.9366 15.2758 37.9366 15.9888C37.9612 16.628 37.8874 17.2425 37.7645 17.808Z",
                                    fill: "white",
                                }),
                            ],
                        }),
                        (0, n.jsx)("defs", { children: (0, n.jsx)("clipPath", { id: "clip0_900_3793", children: (0, n.jsx)("rect", { width: "60", height: "40", fill: "white" }) }) }),
                    ],
                }),
                ft = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "60",
                    height: "60",
                    viewBox: "0 0 60 60",
                    fill: "none",
                    children: [
                        (0, n.jsxs)("g", {
                            clipPath: "url(#clip0_876_20)",
                            children: [
                                (0, n.jsx)("path", {
                                    d:
                                        "M60 30.0001C60 46.5636 46.5682 59.9905 30 59.9905C24.8052 59.9905 19.9188 58.6711 15.6582 56.3481C6.32941 51.2623 0 41.3705 0 30.0001C0 13.437 13.4314 0.00976562 29.9997 0.00976562C46.5682 0.00976562 60 13.437 60 30.0001Z",
                                    fill: "#20B276",
                                }),
                                (0, n.jsx)("path", {
                                    d:
                                        "M41.9678 38.5338C38.7929 41.8038 34.9397 43.4401 30.4093 43.4401C27.6442 43.4401 25.0752 42.9724 22.6669 41.6135L22.6379 59.0261L22.4097 58.9645L22.2684 58.9284L22.1017 58.8376L22.0231 58.6955L21.9507 58.5351L22.031 58.4344L14.0859 48.967L14.0883 26.5871C14.0883 21.9239 15.6755 17.9634 18.8508 14.705C22.0254 11.4463 25.8784 9.81738 30.4093 9.81738C34.9397 9.81738 38.7926 11.4521 41.9678 14.7228C45.1424 17.9931 46.7303 21.9619 46.7303 26.6286C46.7303 31.2959 45.1424 35.2638 41.9678 38.5338ZM35.9073 20.9604C34.3999 19.4062 32.5671 18.6295 30.4093 18.6295C28.2507 18.6295 26.418 19.4062 24.911 20.9604C23.4035 22.5144 22.6497 24.4035 22.6497 26.6291C22.6497 28.854 23.4032 30.743 24.911 32.297C26.418 33.8515 28.2507 34.6286 30.4093 34.6286C32.5671 34.6286 34.3999 33.8515 35.9073 32.297C37.4148 30.743 38.1685 28.854 38.1685 26.6291C38.1685 24.4035 37.4148 22.5142 35.9073 20.9604Z",
                                    fill: "#147F52",
                                }),
                                (0, n.jsx)("path", {
                                    d:
                                        "M41.3419 37.9161C38.1667 41.1876 34.3135 42.824 29.7827 42.824C27.0175 42.824 24.4312 42.1442 22.0229 40.785L22.0204 58.9302C22.0204 58.9302 21.4343 58.7689 20.6715 58.5225C20.4834 58.4619 20.2934 58.3968 20.0944 58.3266C19.9997 58.2929 19.9536 58.2731 19.8562 58.2451C19.6066 58.1734 19.2903 58.0345 19.0465 57.9398C18.2273 57.6209 17.5635 57.3171 17.5475 57.3097C17.5315 57.3019 15.1865 56.1837 14.9221 56.0186C14.6853 55.8708 14.4745 55.7549 14.2938 55.6253C14.2361 55.584 14.1925 55.5545 14.1377 55.5168C13.7082 55.2218 13.4681 55.0521 13.4681 55.0521L13.4609 25.9662C13.4609 21.3013 15.0483 17.3397 18.2238 14.0805C21.3988 10.8206 25.2518 9.19141 29.7829 9.19141C34.3138 9.19141 38.1667 10.8267 41.3422 14.0984C44.5171 17.3696 46.1053 21.3396 46.1053 26.0075C46.1047 30.6755 44.5168 34.645 41.3419 37.9161ZM35.2811 20.3373C33.7734 18.7827 31.9409 18.0058 29.7825 18.0058C27.6238 18.0058 25.791 18.7827 24.2839 20.3373C22.7763 21.8919 22.0227 23.7815 22.0227 26.0075C22.0227 28.2333 22.7763 30.123 24.2839 31.6772C25.791 33.2326 27.6238 34.0097 29.7825 34.0097C31.9406 34.0097 33.7734 33.2326 35.2811 31.6772C36.7883 30.123 37.5426 28.2333 37.5426 26.0075C37.5426 23.7815 36.7883 21.8919 35.2811 20.3373Z",
                                    fill: "white",
                                }),
                            ],
                        }),
                        (0, n.jsx)("defs", { children: (0, n.jsx)("clipPath", { id: "clip0_876_20", children: (0, n.jsx)("rect", { width: "60", height: "60", fill: "white" }) }) }),
                    ],
                }),
                gt = (0, n.jsxs)("svg", {
                    width: "60",
                    height: "60",
                    viewBox: "0 0 60.6 59.4",
                    style: { enableBackground: "new 0 0 60.6 59.4" },
                    xmlns: "http://www.w3.org/2000/svg",
                    children: [
                        " ",
                        (0, n.jsx)("path", {
                            d:
                                "M34.3 0c-1.4 0-2.7.7-3.6 1.7-6.2 7.9-9.9 17.1-11.5 26.4-1.5 8-.9 18.3 1.9 27.9.5 1.9 1.5 3.4 9.2 3.4 20.9 0 30.3-8.2 30.3-29.6C60.6 8.7 51.7 0 34.3 0m-.6 56.7c-1.2.7-2.9.2-3.4-1-4.3-8-5.7-17.1-3.9-26.2s6.2-17.1 13-23.3c1-.9 2.7-.9 3.6.2 1 1 .9 2.6-.2 3.6-5.8 5.1-9.9 12.2-11.3 20.4-1.5 8 0 16.1 3.4 23v.2c.6.9 0 2.4-1.2 3.1m15.8-38c-4.3 3.4-7.4 7.9-8.4 13.2-1 5.3 0 10.6 2.7 15.1v.2c.5.7.2 1.7-.7 2.1-.9.3-1.9.2-2.4-.7-3.1-5-4.3-11-3.1-17 1.2-6 4.6-11.1 9.4-15.1l.2-.2c.7-.5 1.9-.5 2.4.2.8.6.6 1.7-.1 2.2M9.2 52.2c.2 1-1 1.7-1.9 1-4.6-4-7.3-9.4-7.3-23.6C0 11.3 7.2 3.4 17 .9c1-.3 1.7.9 1.2 1.5-4.5 7.4-7.5 15.4-9.1 24s-1.4 17.4.1 25.8z",
                            fill: "#246be8",
                        }),
                    ],
                }),
                bt = function () {
                    return (0, n.jsxs)(n.Fragment, {
                        children: [
                            (0, n.jsxs)("svg", {
                                xmlns: "http://www.w3.org/2000/svg",
                                width: "50",
                                height: "50",
                                fill: "none",
                                children: [
                                    (0, n.jsx)("path", {
                                        d:
                                            "M41.292 50H8.258a3.215 3.215 0 0 1-3.211-3.212v-3.67a1.377 1.377 0 0 1 1.376-1.376h36.704a1.377 1.377 0 0 1 1.377 1.376v3.67A3.216 3.216 0 0 1 41.292 50zM7.8 44.495v2.294a.46.46 0 0 0 .458.458h33.034a.46.46 0 0 0 .459-.459v-2.293H7.8z",
                                        fill: "#0D1427",
                                    }),
                                    (0, n.jsx)("path", {
                                        d:
                                            "M43.127 44.495H6.423a1.377 1.377 0 0 1-1.373-1.271L3.34 20.992a2.294 2.294 0 0 1 3.314-2.228l8.383 4.19 7.734-13.92a2.295 2.295 0 0 1 4.01-.002l7.734 13.922 8.384-4.19a2.294 2.294 0 0 1 3.313 2.226L44.5 43.224a1.378 1.378 0 0 1-1.373 1.27zm-35.43-2.753h34.156l1.552-20.153-8.054 4.025a2.288 2.288 0 0 1-3.029-.938l-7.547-13.584-7.547 13.585a2.289 2.289 0 0 1-3.027.937l-8.056-4.025 1.552 20.153z",
                                        fill: "#0D1427",
                                    }),
                                    (0, n.jsx)("g", {
                                        fill: "#54ACE8",
                                        children: (0, n.jsx)("path", {
                                            d:
                                                "M2.753 17.434a2.753 2.753 0 1 0 0-5.505 2.753 2.753 0 0 0 0 5.505zM46.798 17.434a2.753 2.753 0 1 0 0-5.505 2.753 2.753 0 0 0 0 5.505zM24.775 5.506a2.753 2.753 0 1 0 0-5.506 2.753 2.753 0 0 0 0 5.506zM11.011 40.365a1.835 1.835 0 1 0 0-3.67 1.835 1.835 0 0 0 0 3.67zM16.517 40.365a1.835 1.835 0 1 0 0-3.67 1.835 1.835 0 0 0 0 3.67zM22.023 40.365a1.835 1.835 0 1 0 0-3.67 1.835 1.835 0 0 0 0 3.67zM27.528 40.365a1.835 1.835 0 1 0 0-3.67 1.835 1.835 0 0 0 0 3.67zM33.033 40.365a1.835 1.835 0 1 0 0-3.67 1.835 1.835 0 0 0 0 3.67zM38.54 40.365a1.835 1.835 0 1 0 0-3.67 1.835 1.835 0 0 0 0 3.67z",
                                        }),
                                    }),
                                ],
                            }),
                            (0, n.jsx)("h2", { children: (0, _.__)("Go Premium", "popup-builder-block") }),
                            (0, n.jsxs)("p", {
                                children: [
                                    (0, _.__)("Purchase the", "popup-builder-block"),
                                    (0, n.jsx)("a", { target: "_blank", href: "https://wpmet.com/plugin/popupkit/pricing", children: (0, _.__)("Pro Version", "popup-builder-block") }),
                                    (0, _.__)("to unlock Advanced features!", "popup-builder-block"),
                                ],
                            }),
                            (0, n.jsxs)("a", {
                                href: "https://wpmet.com/plugin/popupkit/pricing/",
                                className: "gkit-pro-upgrade-notice-button",
                                children: [
                                    (0, n.jsxs)("svg", {
                                        xmlns: "http://www.w3.org/2000/svg",
                                        width: "14",
                                        height: "14",
                                        viewBox: "0 0 14 14",
                                        fill: "none",
                                        children: [
                                            (0, n.jsx)("path", {
                                                d:
                                                    "M11.2 6.3999H2.79998C2.13723 6.3999 1.59998 6.93716 1.59998 7.5999V11.7999C1.59998 12.4626 2.13723 12.9999 2.79998 12.9999H11.2C11.8627 12.9999 12.4 12.4626 12.4 11.7999V7.5999C12.4 6.93716 11.8627 6.3999 11.2 6.3999Z",
                                                stroke: "white",
                                                strokeWidth: "1.5",
                                                strokeLinecap: "round",
                                                strokeLinejoin: "round",
                                            }),
                                            (0, n.jsx)("path", {
                                                d: "M4.00012 6.4V4C4.00012 3.20435 4.31619 2.44129 4.8788 1.87868C5.44141 1.31607 6.20447 1 7.00012 1C7.79577 1 8.55883 1.31607 9.12144 1.87868C9.68405 2.44129 10.0001 3.20435 10.0001 4V6.4",
                                                stroke: "white",
                                                strokeWidth: "1.5",
                                                strokeLinecap: "round",
                                                strokeLinejoin: "round",
                                            }),
                                        ],
                                    }),
                                    (0, _.__)("Upgrade to Pro", "popup-builder-block"),
                                ],
                            }),
                        ],
                    });
                },
                xt = {
                    mailchimp: {
                        slug: "mailchimp",
                        title: (0, _.__)("MailChimp", "popup-builder-block"),
                        description: (0, _.__)("Integrate PopupKit with Mailchimp to establish seamless email marketing with automation.", "popup-builder-block"),
                        accounts: [{ "account-name": "", "api-key": "" }],
                        status: "active",
                    },
                    fluentCRM: {
                        slug: "fluentCRM",
                        title: (0, _.__)("FluentCRM", "popup-builder-block"),
                        description: (0, _.__)("Automate, track, and analyze your email campaign with powerful FluentCRM integration.", "popup-builder-block"),
                        accounts: [{ "account-name": "", "webhook-url": "" }],
                        status: "active",
                    },
                    activeCampaign: {
                        slug: "activeCampaign",
                        title: (0, _.__)("Active Campaign", "popup-builder-block"),
                        description: (0, _.__)("Connect your Active Campaign with PopupKit to power up marketing, sales, and customer retention.", "popup-builder-block"),
                        accounts: [{ "account-name": "", "api-url": "", "api-key": "" }],
                        status: "active",
                    },
                    zapier: {
                        slug: "zapier",
                        title: (0, _.__)("Zapier", "popup-builder-block"),
                        description: (0, _.__)("Automate your workflow by integrating with diverse powerful tools using Zapier integration.", "popup-builder-block"),
                        accounts: [{ "account-name": "", "webhook-url": "" }],
                        status: "active",
                    },
                    hubspot: {
                        slug: "hubspot",
                        title: (0, _.__)("HubSpot", "popup-builder-block"),
                        description: (0, _.__)("Integrate PopupKit with HubSpot to automate your marketing and sales processes.", "popup-builder-block"),
                        accounts: [{ "account-name": "", "access-token": "" }],
                        status: "active",
                    },
                    pabbly: {
                        slug: "pabbly",
                        title: (0, _.__)("Pabbly", "popup-builder-block"),
                        description: (0, _.__)("Easily Connect Multiple Applications & Automate your Tasks with Pabbly Connect", "popup-builder-block"),
                        accounts: [{ "account-name": "", "webhook-url": "" }],
                        status: "active",
                    },
                    aweber: {
                        slug: "aweber",
                        title: (0, _.__)("AWeber", "popup-builder-block"),
                        description: (0, _.__)("Easily Connect Multiple Applications & Automate your Tasks with AWber Connect", "popup-builder-block"),
                        accounts: [{ "account-name": "", "authorize-code": "" }],
                        status: "active",
                    },
                    mailpoet: {
                        slug: "mailpoet",
                        title: (0, _.__)("Mail Poet", "popup-builder-block"),
                        description: (0, _.__)("Create, send, and automate email campaigns with MailPoet integration.", "popup-builder-block"),
                        accounts: [{ "account-name": "" }],
                        status: "inactive",
                    },
                    mailerlite: {
                        slug: "mailerlite",
                        title: (0, _.__)("Mailer Lite", "popup-builder-block"),
                        description: (0, _.__)("Automate your email campaign and expand your reach with Mailer Lite integration.", "popup-builder-block"),
                        accounts: [{ "account-name": "", "api-key": "" }],
                        status: "inactive",
                    },
                },
                vt = ({ fieldKey: t, slug: e, fieldValue: i, onInputChange: s, hideLabel: o = !1 }) =>
                    (0, n.jsxs)("div", {
                        className: "pbb-admin-dashboard__settings-api__content-input",
                        children: [!o && (0, n.jsx)("h4", { className: "field-key", children: `${e} ${t}` }), (0, n.jsx)("input", { type: "text", placeholder: `Enter your ${t}`, id: t, value: i, onChange: (e) => s(t, e.target.value) })],
                    }),
                yt = () => {
                    const e = (0, M.getQueryArg)(location.href, "slug"),
                        [i, s] = (0, l.useState)([]),
                        [o, a] = (0, l.useState)(!1),
                        [r, c] = (0, l.useState)(""),
                        [d, h] = (0, l.useState)(!1),
                        [p, m] = (0, l.useState)(""),
                        [g, x] = (0, l.useState)(""),
                        [v, C] = (0, l.useState)(null),
                        [w, z] = (0, l.useState)(""),
                        [k, j] = (0, l.useState)(!1),
                        [A, L] = (0, l.useState)(!1),
                        [D, T] = (0, l.useState)(!1),
                        E = f({ windowVariable: "popupBuilderBlock", hookName: "pbb.is-pro-active", cookieName: "isPopupkitValid", apiPath: "pbb" }),
                        O = document.getElementById("response-result"),
                        P = document.querySelector(".response-wrapper");
                    (0, l.useEffect)(() => {
                        E &&
                            u()({ path: "/pbb/v1/lists" })
                                .then((t) => {
                                    s(t.data), e && "active" === xt[e].status && N(xt[e], "add");
                                })
                                .catch((t) => {
                                    console.error("Error fetching API list:", t);
                                });
                    }, []);
                    const I = () => h(!1),
                        N = (t, e = "") => {
                            c(t), z(e), a(!0);
                        },
                        R = () => a(!1),
                        V = (t, e, i) => {
                            c((s) => {
                                if (!s || !s.accounts || !s.accounts[t]) return console.error("Invalid state or account index:", { prev: s, accountIndex: t }), s;
                                const n = [...s.accounts];
                                return (n[t] = { ...n[t], [e]: i }), { ...s, accounts: n };
                            });
                        },
                        F = () => {
                            if (!r || !r.accounts || 0 === r.accounts.length) return void console.error("No account data available.");
                            const t = { slug: r.slug, accounts: r.accounts };
                            j(!0),
                                u()({ path: "/pbb/v1/lists", method: "POST", data: t })
                                    .then((t) => {
                                        s((e) => ({ ...e, [r.slug]: { ...e[r.slug], accounts: t.data.accounts } })),
                                            c((t) => ({ ...t, accounts: t.accounts.map((t) => Object.fromEntries(Object.keys(t).map((t) => [t, ""]))) })),
                                            z("edit"),
                                            L(!1),
                                            S.oR.success("Successfully Connected.");
                                    })
                                    .catch((t) => {
                                        P.classList.add("error"), console.error("Error saving changes:", t), (O.innerText = t?.message || t?.data?.message);
                                    })
                                    .finally(() => {
                                        j(!1);
                                    });
                        },
                        B = () => {
                            const t = { ...p, slug: r.slug };
                            j(!0),
                                u()({ path: "/pbb/v1/edit/list", method: "POST", data: t })
                                    .then((t) => {
                                        t.success ? s((e) => ({ ...e, [r.slug]: { ...e[r.slug], accounts: t.updated_data.accounts } })) : console.error("Failed to update accounts:", t.message), T(!1), S.oR.success("Successfully Updated.");
                                    })
                                    .catch((t) => {
                                        P.classList.add("error"), (O.innerText = "Oops! Couldn’t Update. Please, enter correct Secret Key and API Key.");
                                    })
                                    .finally(() => {
                                        j(!1);
                                    });
                        };
                    return (0, n.jsxs)(n.Fragment, {
                        children: [
                            (0, n.jsx)(S.N9, {}),
                            (0, n.jsx)("h2", { className: "pbb-admin-dashboard__settings-api-title", children: (0, _.__)("API Integrations", "popup-builder-block") }),
                            (0, n.jsxs)("div", {
                                className: "pbb-admin-dashboard__settings-api-wrapper",
                                children: [
                                    Object.entries(xt).map(([e, s]) =>
                                        (0, n.jsxs)(
                                            "div",
                                            {
                                                className: ot()("pbb-admin-dashboard__settings-api", { "coming-soon": "inactive" === s?.status }),
                                                children: [
                                                    "inactive" === s.status &&
                                                        (0, n.jsx)("div", {
                                                            className: "coming-soon-badge",
                                                            children: (0, n.jsxs)("svg", {
                                                                xmlns: "http://www.w3.org/2000/svg",
                                                                width: "75",
                                                                height: "75",
                                                                viewBox: "0 0 75 75",
                                                                fill: "none",
                                                                children: [
                                                                    (0, n.jsx)("path", { d: "M4.47035e-06 0.137331V0.000244141L28.1472 0.000244815L75 46.8531L75 75.0002L74.8629 75.0002L4.47035e-06 0.137331Z", fill: "#3B67FE" }),
                                                                    (0, n.jsx)("path", {
                                                                        d:
                                                                            "M62.3965 54.8341C61.8308 54.2684 61.4631 53.6518 61.2934 52.9843C61.1293 52.3112 61.1576 51.6323 61.3782 50.9479C61.6045 50.2577 62.0203 49.61 62.6256 49.0047C63.2365 48.3938 63.8927 47.9752 64.5941 47.7489C65.3012 47.517 66.0112 47.4915 66.7239 47.6725C67.4367 47.8536 68.1042 48.2552 68.7265 48.8775C69.4223 49.5732 69.8324 50.3171 69.9568 51.1091C70.0869 51.9067 69.9229 52.6704 69.4647 53.4001L68.1834 52.1188C68.3588 51.7738 68.404 51.4117 68.3192 51.0327C68.2456 50.6537 68.0279 50.2832 67.6658 49.9211C67.2811 49.5365 66.8682 49.2932 66.427 49.1914C65.9857 49.0896 65.5417 49.1207 65.0948 49.2847C64.6479 49.4488 64.2123 49.743 63.788 50.1672C63.3581 50.5971 63.064 51.0327 62.9056 51.4739C62.7472 51.9152 62.7189 52.3451 62.8207 52.7637C62.9339 53.1823 63.1686 53.5698 63.525 53.9262C64.0454 54.4466 64.5772 54.7012 65.1202 54.6899C65.6746 54.6786 66.2007 54.4749 66.6985 54.0789L65.239 52.6195L66.096 51.7624L68.7095 54.3759L65.4257 57.6597L64.365 56.5991L65.0354 55.759C64.7242 55.8212 64.4188 55.8326 64.119 55.793C63.8305 55.7534 63.5448 55.6544 63.2619 55.496C62.9735 55.3432 62.685 55.1226 62.3965 54.8341Z",
                                                                        fill: "white",
                                                                    }),
                                                                    (0, n.jsx)("path", {
                                                                        d:
                                                                            "M53.5419 45.7759L59.4816 39.8362L60.6271 40.9818L59.261 47.8124L63.3594 43.714L64.5049 44.8595L58.5652 50.7992L57.4197 49.6537L58.7773 42.8316L54.6874 46.9215L53.5419 45.7759Z",
                                                                        fill: "white",
                                                                    }),
                                                                    (0, n.jsx)("path", { d: "M51.0603 43.2943L57 37.3546L58.1455 38.5002L52.2058 44.4399L51.0603 43.2943Z", fill: "white" }),
                                                                    (0, n.jsx)("path", {
                                                                        d:
                                                                            "M43.3748 35.6089L49.3145 29.6692L50.6807 31.0353L48.7884 36.5592L54.2954 34.65L55.6615 36.0162L49.7218 41.9559L48.5763 40.8103L52.5644 36.8223L47.8381 38.409L46.9302 37.5011L48.5084 32.7663L44.5204 36.7544L43.3748 35.6089Z",
                                                                        fill: "white",
                                                                    }),
                                                                    (0, n.jsx)("path", {
                                                                        d:
                                                                            "M39.1901 31.6277C38.6131 31.0507 38.2341 30.4115 38.053 29.7101C37.872 29.0086 37.8862 28.3043 38.0955 27.5972C38.3104 26.8845 38.7206 26.2254 39.3258 25.6202C39.9311 25.0149 40.5873 24.6076 41.2944 24.3983C42.0072 24.1833 42.7143 24.1664 43.4157 24.3474C44.1172 24.5284 44.7564 24.9074 45.3334 25.4844C45.9161 26.0671 46.2979 26.7091 46.4789 27.4106C46.6599 28.112 46.6401 28.8163 46.4195 29.5234C46.2102 30.2305 45.8029 30.8867 45.1977 31.492C44.5924 32.0973 43.9333 32.5074 43.2206 32.7223C42.5191 32.9373 41.8177 32.9543 41.1162 32.7733C40.4148 32.5922 39.7727 32.2104 39.1901 31.6277ZM40.2168 30.601C40.5788 30.9631 40.972 31.1922 41.3962 31.2883C41.8318 31.3845 42.2759 31.3534 42.7284 31.195C43.181 31.0366 43.6166 30.7481 44.0352 30.3295C44.4594 29.9052 44.7479 29.4696 44.9007 29.0228C45.0591 28.5702 45.0873 28.129 44.9855 27.6991C44.8894 27.2748 44.6602 26.8816 44.2982 26.5196C43.9418 26.1632 43.5487 25.9341 43.1188 25.8323C42.6888 25.7305 42.2476 25.7588 41.7951 25.9171C41.3482 26.0699 40.9126 26.3584 40.4883 26.7826C40.0697 27.2013 39.7812 27.6368 39.6228 28.0894C39.4644 28.5419 39.4333 28.986 39.5295 29.4216C39.6313 29.8515 39.8604 30.2446 40.2168 30.601Z",
                                                                        fill: "white",
                                                                    }),
                                                                    (0, n.jsx)("path", {
                                                                        d:
                                                                            "M32.6795 25.1171C32.0855 24.5232 31.7008 23.8839 31.5255 23.1995C31.3614 22.515 31.3925 21.8277 31.6188 21.1375C31.8564 20.4474 32.2778 19.7997 32.8831 19.1944C33.4884 18.5891 34.1361 18.1677 34.8263 17.9301C35.522 17.6982 36.2122 17.6642 36.8967 17.8283C37.5868 17.998 38.2288 18.3798 38.8228 18.9738C39.5412 19.6922 39.9514 20.4587 40.0532 21.2733C40.155 22.0879 39.9372 22.877 39.3998 23.6407L38.1525 22.3934C38.3957 22.003 38.4862 21.6014 38.424 21.1885C38.3731 20.7755 38.1581 20.3795 37.7791 20.0005C37.4284 19.6498 37.0409 19.432 36.6166 19.3472C36.2037 19.2623 35.7766 19.3047 35.3354 19.4744C34.8998 19.6385 34.4699 19.9326 34.0456 20.3569C33.627 20.7755 33.3328 21.2054 33.1631 21.6467C32.9934 22.0879 32.951 22.515 33.0359 22.9279C33.1264 23.3465 33.347 23.7312 33.6977 24.0819C34.0767 24.4609 34.4642 24.6844 34.8602 24.7523C35.2618 24.8145 35.6493 24.7325 36.0227 24.5062L37.2785 25.762C36.5488 26.2655 35.7794 26.4635 34.9705 26.356C34.1616 26.2485 33.3979 25.8356 32.6795 25.1171Z",
                                                                        fill: "white",
                                                                    }),
                                                                    (0, n.jsx)("path", {
                                                                        d:
                                                                            "M24.7351 16.9691L30.6748 11.0294L32.8979 13.2525C33.3787 13.7334 33.6955 14.2142 33.8483 14.695C34.001 15.1759 34.0151 15.6312 33.8907 16.0612C33.7662 16.4911 33.5258 16.8842 33.1694 17.2406C32.8413 17.5687 32.4652 17.7978 32.0409 17.9279C31.6166 18.058 31.1584 18.0524 30.6663 17.911C30.1798 17.7639 29.6905 17.4443 29.1983 16.9521L28.1207 15.8745L25.8806 18.1146L24.7351 16.9691ZM29.0456 14.9496L30.0553 15.9593C30.423 16.327 30.7681 16.5081 31.0905 16.5024C31.4243 16.4967 31.7298 16.3553 32.0069 16.0781C32.3011 15.784 32.4454 15.4757 32.4397 15.1532C32.4454 14.8308 32.2643 14.4857 31.8966 14.118L30.8869 13.1083L29.0456 14.9496Z",
                                                                        fill: "white",
                                                                    }),
                                                                    (0, n.jsx)("path", {
                                                                        d:
                                                                            "M20.9543 13.3919C20.5187 12.9564 20.2104 12.4727 20.0294 11.941C19.8484 11.4092 19.8286 10.8633 19.97 10.3033C20.1114 9.74327 20.4536 9.19173 20.9967 8.64867L24.6454 5L25.7909 6.14551L22.1337 9.80267C21.8396 10.0968 21.6388 10.3938 21.5313 10.6936C21.4295 10.9878 21.421 11.2735 21.5058 11.5506C21.5963 11.8335 21.7689 12.1022 22.0234 12.3567C22.2836 12.617 22.5523 12.7895 22.8295 12.8743C23.1124 12.9648 23.4009 12.9592 23.695 12.8574C23.9948 12.7499 24.2918 12.5491 24.586 12.2549L28.2431 8.59776L29.3886 9.74327L25.74 13.3919C25.1969 13.935 24.6425 14.2744 24.0769 14.4102C23.5112 14.5459 22.9568 14.5177 22.4137 14.3253C21.8763 14.1386 21.3899 13.8275 20.9543 13.3919Z",
                                                                        fill: "white",
                                                                    }),
                                                                ],
                                                            }),
                                                        }),
                                                    (0, n.jsxs)("div", {
                                                        className: "pbb-admin-dashboard__settings-api__header",
                                                        children: [
                                                            (0, n.jsxs)("div", {
                                                                className: "pbb-admin-dashboard__settings-api__header-title",
                                                                children: [
                                                                    (0, n.jsxs)("div", {
                                                                        className: "icon-wrapper",
                                                                        children: [
                                                                            (0, n.jsx)("span", { children: t[s.slug] }),
                                                                            (0, n.jsx)("div", {
                                                                                className: "pbb-admin-dashboard__settings-api__header-action-button",
                                                                                children: (0, n.jsxs)("button", {
                                                                                    className: "manage-btn",
                                                                                    onClick: () => {
                                                                                        const t = i[s.slug]?.accounts?.length;
                                                                                        t || E ? N(s, t ? "config" : "add") : h(!0);
                                                                                    },
                                                                                    children: [
                                                                                        (0, n.jsxs)("svg", {
                                                                                            xmlns: "http://www.w3.org/2000/svg",
                                                                                            width: "15",
                                                                                            height: "14",
                                                                                            viewBox: "0 0 15 14",
                                                                                            fill: "none",
                                                                                            children: [
                                                                                                (0, n.jsx)("path", {
                                                                                                    d:
                                                                                                        "M7.63674 8.90702C8.68995 8.90702 9.54374 8.05323 9.54374 7.00002C9.54374 5.94681 8.68995 5.09302 7.63674 5.09302C6.58353 5.09302 5.72974 5.94681 5.72974 7.00002C5.72974 8.05323 6.58353 8.90702 7.63674 8.90702Z",
                                                                                                    stroke: "#181A26",
                                                                                                    strokeWidth: "1.5",
                                                                                                    strokeMiterlimit: "10",
                                                                                                    strokeLinecap: "round",
                                                                                                    strokeLinejoin: "round",
                                                                                                }),
                                                                                                (0, n.jsx)("path", {
                                                                                                    d:
                                                                                                        "M1.28003 7.55939V6.44061C1.28003 5.77952 1.82035 5.23285 2.4878 5.23285C3.63836 5.23285 4.10875 4.41919 3.53029 3.42119C3.19974 2.84909 3.3968 2.10536 3.97526 1.77482L5.07496 1.14551C5.57714 0.846741 6.22552 1.02473 6.52428 1.52691L6.59421 1.64768C7.16631 2.64568 8.1071 2.64568 8.68555 1.64768L8.75548 1.52691C9.05424 1.02473 9.70262 0.846741 10.2048 1.14551L11.3045 1.77482C11.883 2.10536 12.08 2.84909 11.7495 3.42119C11.171 4.41919 11.6414 5.23285 12.792 5.23285C13.4531 5.23285 13.9997 5.77316 13.9997 6.44061V7.55939C13.9997 8.22048 13.4594 8.76715 12.792 8.76715C11.6414 8.76715 11.171 9.58081 11.7495 10.5788C12.08 11.1573 11.883 11.8946 11.3045 12.2252L10.2048 12.8545C9.70262 13.1533 9.05424 12.9753 8.75548 12.4731L8.68555 12.3523C8.11345 11.3543 7.17267 11.3543 6.59421 12.3523L6.52428 12.4731C6.22552 12.9753 5.57714 13.1533 5.07496 12.8545L3.97526 12.2252C3.3968 11.8946 3.19974 11.1509 3.53029 10.5788C4.10875 9.58081 3.63836 8.76715 2.4878 8.76715C1.82035 8.76715 1.28003 8.22048 1.28003 7.55939Z",
                                                                                                    stroke: "#181A26",
                                                                                                    strokeWidth: "1.5",
                                                                                                    strokeMiterlimit: "10",
                                                                                                    strokeLinecap: "round",
                                                                                                    strokeLinejoin: "round",
                                                                                                }),
                                                                                            ],
                                                                                        }),
                                                                                        (0, n.jsx)("span", { children: (0, _.__)("Manage", "popup-builder-block") }),
                                                                                    ],
                                                                                }),
                                                                            }),
                                                                        ],
                                                                    }),
                                                                    (0, n.jsxs)("div", {
                                                                        className: "pbb-admin-dashboard__settings-api__header-wrap",
                                                                        children: [
                                                                            (0, n.jsx)("h2", { children: (0, _.__)(s.title || "Untitled API", "popup-builder-block") }),
                                                                            (0, n.jsx)("div", {
                                                                                className: "badge pro",
                                                                                children: (0, n.jsxs)("svg", {
                                                                                    xmlns: "http://www.w3.org/2000/svg",
                                                                                    width: "32",
                                                                                    height: "16",
                                                                                    viewBox: "0 0 32 16",
                                                                                    fill: "none",
                                                                                    children: [
                                                                                        (0, n.jsx)("path", {
                                                                                            d: "M0 4C0 1.79086 1.79086 0 4 0H28C30.2091 0 32 1.79086 32 4V12C32 14.2091 30.2091 16 28 16H4C1.79086 16 0 14.2091 0 12V4Z",
                                                                                            fill: "#F8174B",
                                                                                        }),
                                                                                        (0, n.jsx)("path", {
                                                                                            fillRule: "evenodd",
                                                                                            clipRule: "evenodd",
                                                                                            d:
                                                                                                "M23.3841 12C22.8845 12 22.407 11.9265 21.9516 11.7796C21.4961 11.6327 21.0957 11.4013 20.7505 11.0854C20.4052 10.7695 20.1334 10.3618 19.935 9.86226C19.7367 9.35537 19.6375 8.75298 19.6375 8.0551V7.83471C19.6375 7.15886 19.7367 6.57851 19.935 6.09366C20.1334 5.60882 20.4052 5.21212 20.7505 4.90358C21.0957 4.59504 21.4961 4.36731 21.9516 4.22039C22.407 4.07346 22.8845 4 23.3841 4C23.8983 4 24.3795 4.07346 24.8276 4.22039C25.2757 4.36731 25.6724 4.59504 26.0177 4.90358C26.363 5.21212 26.6348 5.60882 26.8331 6.09366C27.0315 6.57851 27.1306 7.15886 27.1306 7.83471V8.0551C27.1306 8.75298 27.0315 9.35537 26.8331 9.86226C26.6348 10.3618 26.363 10.7695 26.0177 11.0854C25.6724 11.4013 25.2757 11.6327 24.8276 11.7796C24.3795 11.9265 23.8983 12 23.3841 12ZM23.3731 10.3471C23.6742 10.3471 23.9534 10.281 24.2105 10.1488C24.4676 10.0092 24.6733 9.77778 24.8276 9.45455C24.9892 9.12397 25.07 8.65748 25.07 8.0551V7.83471C25.07 7.26171 24.9892 6.81726 24.8276 6.50138C24.6733 6.18549 24.4676 5.96511 24.2105 5.84022C23.9534 5.71534 23.6742 5.65289 23.3731 5.65289C23.0866 5.65289 22.8147 5.71534 22.5576 5.84022C22.3005 5.96511 22.0911 6.18549 21.9295 6.50138C21.7679 6.81726 21.6871 7.26171 21.6871 7.83471V8.0551C21.6871 8.65748 21.7679 9.12397 21.9295 9.45455C22.0911 9.77778 22.3005 10.0092 22.5576 10.1488C22.8147 10.281 23.0866 10.3471 23.3731 10.3471Z",
                                                                                            fill: "white",
                                                                                        }),
                                                                                        (0, n.jsx)("path", {
                                                                                            fillRule: "evenodd",
                                                                                            clipRule: "evenodd",
                                                                                            d:
                                                                                                "M12.2512 11.8568V4.14326H15.6121C16.2585 4.14326 16.7948 4.24978 17.2209 4.46282C17.6543 4.67586 17.9812 4.97338 18.2016 5.35538C18.422 5.73738 18.5322 6.19284 18.5322 6.72177C18.5322 7.27273 18.4 7.74656 18.1355 8.14326C17.8784 8.5326 17.489 8.81911 16.9675 9.00276L18.7526 11.8568H16.5487L15.0501 9.21213H14.2347V11.8568H12.2512ZM14.2347 7.66943H15.1713C15.7002 7.66943 16.0602 7.59229 16.2512 7.43802C16.4495 7.27641 16.5487 7.03765 16.5487 6.72177C16.5487 6.40588 16.4495 6.1708 16.2512 6.01653C16.0602 5.85492 15.7002 5.77411 15.1713 5.77411H14.2347V7.66943Z",
                                                                                            fill: "white",
                                                                                        }),
                                                                                        (0, n.jsx)("path", {
                                                                                            fillRule: "evenodd",
                                                                                            clipRule: "evenodd",
                                                                                            d:
                                                                                                "M4.86914 4.14326V11.8568H6.85261V9.41047H8.00964C8.72956 9.41047 9.32093 9.30763 9.78374 9.10193C10.2466 8.88889 10.5881 8.58403 10.8085 8.18733C11.0363 7.79064 11.1501 7.32048 11.1501 6.77687C11.1501 6.2259 11.0363 5.75574 10.8085 5.3664C10.5881 4.9697 10.2466 4.66851 9.78374 4.46282C9.32093 4.24978 8.72956 4.14326 8.00964 4.14326H4.86914ZM7.78925 7.77962H6.85261V5.77411H7.78925C8.29614 5.77411 8.65243 5.85859 8.85812 6.02755C9.06381 6.19652 9.16666 6.44629 9.16666 6.77687C9.16666 7.10744 9.06381 7.35721 8.85812 7.52618C8.65243 7.69514 8.29614 7.77962 7.78925 7.77962Z",
                                                                                            fill: "white",
                                                                                        }),
                                                                                    ],
                                                                                }),
                                                                            }),
                                                                        ],
                                                                    }),
                                                                ],
                                                            }),
                                                            "active" === s?.status
                                                                ? (0, n.jsx)("p", {
                                                                      className: "pbb-admin-dashboard__settings-api__header-description",
                                                                      children: (0, _.__)(s.description || "No description available.", "popup-builder-block"),
                                                                  })
                                                                : (0, n.jsx)("div", {
                                                                      className: "pbb-admin-dashboard__settings-api__header-description",
                                                                      children: (0, n.jsxs)("svg", {
                                                                          xmlns: "http://www.w3.org/2000/svg",
                                                                          width: "260",
                                                                          height: "34",
                                                                          viewBox: "0 0 260 34",
                                                                          fill: "none",
                                                                          children: [
                                                                              (0, n.jsx)("rect", { width: "260", height: "10", rx: "5", fill: "#FADBED" }),
                                                                              (0, n.jsx)("rect", { y: "24", width: "180", height: "10", rx: "5", fill: "#E8EBFB" }),
                                                                          ],
                                                                      }),
                                                                  }),
                                                        ],
                                                    }),
                                                    (0, n.jsxs)("div", {
                                                        className: "pbb-admin-dashboard__settings-api__footer",
                                                        children: [
                                                            (0, n.jsxs)("a", {
                                                                className: "pbb-admin-dashboard__settings-api__header-documentation",
                                                                href: `https://wpmet.com/doc/popupkit-${s.slug.toLowerCase()}-integration`,
                                                                target: "_blank",
                                                                rel: "noopener noreferrer",
                                                                children: [
                                                                    (0, _.__)("API Documentation", "popup-builder-block"),
                                                                    (0, n.jsxs)("svg", {
                                                                        xmlns: "http://www.w3.org/2000/svg",
                                                                        width: "12",
                                                                        height: "10",
                                                                        viewBox: "0 0 12 10",
                                                                        fill: "none",
                                                                        children: [
                                                                            (0, n.jsx)("path", { d: "M1 5H11", stroke: "#3353F4", strokeWidth: "1.5", strokeLinecap: "round" }),
                                                                            (0, n.jsx)("path", { d: "M7 1L11 5L7 9", stroke: "#3353F4", strokeWidth: "1.5", strokeLinecap: "round" }),
                                                                        ],
                                                                    }),
                                                                ],
                                                            }),
                                                            "active" === s?.status &&
                                                                (0, n.jsxs)("span", { className: "connections-count", children: [i[s.slug]?.accounts?.length || 0, " ", (0, _.__)("Connections", "popup-builder-block")] }),
                                                        ],
                                                    }),
                                                ],
                                            },
                                            e
                                        )
                                    ),
                                    o &&
                                        (0, n.jsx)(y.A, {
                                            className: "modal-api-integration",
                                            closeModal: R,
                                            children: (0, n.jsx)("div", {
                                                className: "pbb-admin-dashboard__settings-api__content " + ("delete" === w ? "delete" : ""),
                                                children:
                                                    "add" === w
                                                        ? r?.accounts?.length > 0 &&
                                                          (0, n.jsxs)(n.Fragment, {
                                                              children: [
                                                                  (0, n.jsx)("div", {
                                                                      className: "pbb-admin-dashboard__settings-api__content-header",
                                                                      children: (0, n.jsx)("h2", { children: (0, _.__)(`Add ${r?.title} Integrations`, "popup-builder-block") }),
                                                                  }),
                                                                  r.accounts?.slice(0, 1).map((t, e) =>
                                                                      (0, n.jsxs)(
                                                                          "div",
                                                                          {
                                                                              className: "pbb-admin-dashboard__settings-api__lists-content",
                                                                              children: [
                                                                                  Object.entries(t).map(([t, i]) =>
                                                                                      (0, n.jsxs)(
                                                                                          "div",
                                                                                          {
                                                                                              children: [
                                                                                                  (0, n.jsx)(vt, {
                                                                                                      slug: r.slug,
                                                                                                      fieldKey: t.replace(/-/g, " ").replace(/\bapi\b/gi, "API"),
                                                                                                      fieldValue: i || "",
                                                                                                      onInputChange: (i, s) => V(e, t, s),
                                                                                                  }),
                                                                                                  "authorize-code" === t &&
                                                                                                      (0, n.jsxs)("p", {
                                                                                                          className: "text-xs text-gray-500 mt-1",
                                                                                                          children: [(0, n.jsx)("strong", { children: "Note:" }), ' You can get authorize code clik on "Get Authorize Code" button.'],
                                                                                                      }),
                                                                                              ],
                                                                                          },
                                                                                          t
                                                                                      )
                                                                                  ),
                                                                                  (0, n.jsx)(b.Button, {
                                                                                      className: "save-btn",
                                                                                      onClick: F,
                                                                                      disabled: k,
                                                                                      children: (0, _.__)(k ? `Connecting ${r.title}...` : `Connect ${r.title} Integration`, "popup-builder-block"),
                                                                                  }),
                                                                                  "aweber" === r.slug &&
                                                                                      (0, n.jsx)(b.Button, {
                                                                                          className: "authorize-btn",
                                                                                          onClick: () => {
                                                                                              window.open(
                                                                                                  "https://auth.aweber.com/oauth2/authorize?response_type=code&client_id=gOoQAqHAQxJUCAwzp5w1kRnM79nbHotU&state=68a2ad10ebb9f&redirect_uri=urn:ietf:wg:oauth:2.0:oob&scope=account.read+list.read+subscriber.read+subscriber.write+landing-page.read",
                                                                                                  "AWeberAuth",
                                                                                                  "width=600,height=600,scrollbars=yes,resizable=yes"
                                                                                              );
                                                                                          },
                                                                                          children: "Get Authorize Code",
                                                                                      }),
                                                                                  (0, n.jsx)(b.Button, { className: "cancel-btn", onClick: R, children: (0, _.__)("Cancel", "popup-builder-block") }),
                                                                                  (0, n.jsxs)("div", {
                                                                                      className: "response-wrapper",
                                                                                      children: [
                                                                                          (0, n.jsxs)("svg", {
                                                                                              xmlns: "http://www.w3.org/2000/svg",
                                                                                              width: "20",
                                                                                              height: "20",
                                                                                              viewBox: "0 0 20 20",
                                                                                              fill: "none",
                                                                                              children: [
                                                                                                  (0, n.jsx)("path", {
                                                                                                      d: "M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19Z",
                                                                                                      stroke: "#FC4143",
                                                                                                      strokeWidth: "1.5",
                                                                                                  }),
                                                                                                  (0, n.jsx)("path", { d: "M9.99268 12.6997H9.99988", stroke: "#FC4143", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                                                  (0, n.jsx)("path", { d: "M10 9.99941V6.39941", stroke: "#FC4143", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                                              ],
                                                                                          }),
                                                                                          (0, n.jsx)("span", { id: "response-result", className: "response" }),
                                                                                      ],
                                                                                  }),
                                                                              ],
                                                                          },
                                                                          e
                                                                      )
                                                                  ),
                                                              ],
                                                          })
                                                        : "delete" === w
                                                        ? (0, n.jsx)(n.Fragment, {
                                                              children: (0, n.jsxs)("div", {
                                                                  className: "pbb-admin-dashboard__settings-api-confirmations",
                                                                  children: [
                                                                      (0, n.jsx)("span", {
                                                                          className: "alert-icon",
                                                                          children: (0, n.jsxs)("svg", {
                                                                              xmlns: "http://www.w3.org/2000/svg",
                                                                              width: "38",
                                                                              height: "37",
                                                                              viewBox: "0 0 38 37",
                                                                              fill: "none",
                                                                              children: [
                                                                                  (0, n.jsx)("path", {
                                                                                      d:
                                                                                          "M6.97908 13.9293C11.3237 6.24157 13.496 2.39771 16.4769 1.40825C18.1167 0.863916 19.8832 0.863916 21.523 1.40825C24.504 2.39771 26.6763 6.24157 31.0209 13.9293C35.3656 21.6169 37.5378 25.4608 36.8862 28.5928C36.5277 30.3159 35.6444 31.8787 34.363 33.0575C32.0338 35.2 27.6893 35.2 19 35.2C10.3108 35.2 5.96615 35.2 3.63693 33.0575C2.35555 31.8787 1.47231 30.3159 1.1138 28.5928C0.462149 25.4608 2.63446 21.6169 6.97908 13.9293Z",
                                                                                      stroke: "#FEAD0C",
                                                                                      strokeWidth: "2",
                                                                                  }),
                                                                                  (0, n.jsx)("path", { d: "M18.9844 25.2998H19.0024", stroke: "#FEAD0C", strokeWidth: "2.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                                  (0, n.jsx)("path", { d: "M19 19.9002V12.7002", stroke: "#FEAD0C", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                              ],
                                                                          }),
                                                                      }),
                                                                      (0, n.jsx)("h4", { className: "confirmation-title", children: (0, _.__)("Are you sure you want to disconnect?", "popup-builder-block") }),
                                                                      (0, n.jsx)("p", {
                                                                          className: "confirmation-description",
                                                                          children: (0, _.__)("This action will interrupt all the active campaigns relying on it.", "popup-builder-block"),
                                                                      }),
                                                                      (0, n.jsxs)("div", {
                                                                          className: "confirmation-actions",
                                                                          children: [
                                                                              (0, n.jsx)(b.Button, {
                                                                                  className: "confirm-btn",
                                                                                  onClick: () => {
                                                                                      ((t) => {
                                                                                          if (void 0 === t || t < 0) return void console.error("Invalid index:", t);
                                                                                          const e = { index: t, slug: r.slug };
                                                                                          u()({ path: "/pbb/v1/delete/list", method: "POST", data: e })
                                                                                              .then((t) => {
                                                                                                  t.success
                                                                                                      ? s((e) => ({ ...e, [r.slug]: { ...e[r.slug], accounts: t.updated_data.accounts } }))
                                                                                                      : console.error("Failed to update accounts:", t.message),
                                                                                                      S.oR.success("Successfully Deleted."),
                                                                                                      z("edit");
                                                                                              })
                                                                                              .catch((t) => {
                                                                                                  P.classList.add("error"), console.error("Error saving changes:", t);
                                                                                              });
                                                                                      })(g);
                                                                                  },
                                                                                  children: (0, _.__)("Yes, I'm Sure", "popup-builder-block"),
                                                                              }),
                                                                              (0, n.jsx)(b.Button, { className: "cancel-btn", onClick: () => z("edit"), children: (0, _.__)("Cancel", "popup-builder-block") }),
                                                                          ],
                                                                      }),
                                                                  ],
                                                              }),
                                                          })
                                                        : "add" !== w && i[r.slug]?.accounts?.length > 0
                                                        ? (0, n.jsxs)("div", {
                                                              className: "pbb-admin-dashboard__settings-api-integrations",
                                                              children: [
                                                                  (0, n.jsx)("div", {
                                                                      className: "pbb-admin-dashboard__settings-api__content-header",
                                                                      children: (0, n.jsx)("h2", { className: "integration-detail-title", children: (0, _.__)(`Existing ${r?.title} Integration`, "popup-builder-block") }),
                                                                  }),
                                                                  (0, n.jsx)("div", {
                                                                      className: "pbb-admin-dashboard__settings-api__lists-content",
                                                                      children: (0, n.jsx)("table", {
                                                                          className: "integration-detail-table",
                                                                          children: (0, n.jsx)("tbody", {
                                                                              children: i[r.slug].accounts.map((t, e) =>
                                                                                  (0, n.jsxs)(
                                                                                      React.Fragment,
                                                                                      {
                                                                                          children: [
                                                                                              (0, n.jsxs)(
                                                                                                  "tr",
                                                                                                  {
                                                                                                      className: "integration-detail " + (v === e && D ? "editing" : ""),
                                                                                                      children: [
                                                                                                          (0, n.jsx)("td", { className: "column-integration-name", children: t["account-name"] || "Unnamed Account" }),
                                                                                                          (0, n.jsx)("td", {
                                                                                                              className: "column-actions",
                                                                                                              children: (0, n.jsxs)("div", {
                                                                                                                  className: "inline-action-links",
                                                                                                                  children: [
                                                                                                                      (0, n.jsx)("div", {
                                                                                                                          className: "action-item",
                                                                                                                          children: (0, n.jsxs)("a", {
                                                                                                                              className: "pbb-btn update-integration",
                                                                                                                              name: "edit-integration",
                                                                                                                              onClick: (t) => {
                                                                                                                                  ((t) => {
                                                                                                                                      if (void 0 === t || t < 0) return void console.error("Invalid index:", t);
                                                                                                                                      const e = i[r.slug].accounts[t];
                                                                                                                                      if (e) {
                                                                                                                                          const i = { ...e, index: t };
                                                                                                                                          z("edit"), m(i);
                                                                                                                                      }
                                                                                                                                  })(e),
                                                                                                                                      C(e),
                                                                                                                                      T(!D);
                                                                                                                              },
                                                                                                                              children: [
                                                                                                                                  (0, n.jsx)("span", {
                                                                                                                                      className: "button-icon",
                                                                                                                                      children: (0, n.jsxs)("svg", {
                                                                                                                                          xmlns: "http://www.w3.org/2000/svg",
                                                                                                                                          width: "12",
                                                                                                                                          height: "12",
                                                                                                                                          viewBox: "0 0 12 12",
                                                                                                                                          fill: "none",
                                                                                                                                          children: [
                                                                                                                                              (0, n.jsx)("path", {
                                                                                                                                                  d: "M6 10.8119H11",
                                                                                                                                                  stroke: "#181A26",
                                                                                                                                                  strokeWidth: "1.5",
                                                                                                                                                  strokeLinecap: "round",
                                                                                                                                                  strokeLinejoin: "round",
                                                                                                                                              }),
                                                                                                                                              (0, n.jsx)("path", {
                                                                                                                                                  d:
                                                                                                                                                      "M8.5 1.64523C8.72101 1.42421 9.02077 1.30005 9.33333 1.30005C9.4881 1.30005 9.64135 1.33053 9.78433 1.38976C9.92731 1.44898 10.0572 1.53579 10.1667 1.64523C10.2761 1.75466 10.3629 1.88458 10.4221 2.02756C10.4814 2.17055 10.5118 2.3238 10.5118 2.47856C10.5118 2.63332 10.4814 2.78657 10.4221 2.92956C10.3629 3.07254 10.2761 3.20246 10.1667 3.31189L3.22222 10.2563L1 10.8119L1.55556 8.58967L8.5 1.64523Z",
                                                                                                                                                  stroke: "#181A26",
                                                                                                                                                  strokeWidth: "1.5",
                                                                                                                                                  strokeLinecap: "round",
                                                                                                                                                  strokeLinejoin: "round",
                                                                                                                                              }),
                                                                                                                                          ],
                                                                                                                                      }),
                                                                                                                                  }),
                                                                                                                                  (0, _.__)("Edit", "popup-builder-block"),
                                                                                                                              ],
                                                                                                                          }),
                                                                                                                      }),
                                                                                                                      (0, n.jsx)("div", {
                                                                                                                          className: "action-item",
                                                                                                                          children: (0, n.jsxs)("a", {
                                                                                                                              className: "pbb-btn delete-integration " + (v === e && D ? "editing" : ""),
                                                                                                                              name: "disconnect-integration",
                                                                                                                              onClick: () => {
                                                                                                                                  z("delete"), x(e);
                                                                                                                              },
                                                                                                                              children: [
                                                                                                                                  (0, n.jsx)("span", {
                                                                                                                                      className: "button-icon",
                                                                                                                                      children: (0, n.jsxs)("svg", {
                                                                                                                                          xmlns: "http://www.w3.org/2000/svg",
                                                                                                                                          width: "12",
                                                                                                                                          height: "14",
                                                                                                                                          viewBox: "0 0 12 14",
                                                                                                                                          fill: "none",
                                                                                                                                          children: [
                                                                                                                                              (0, n.jsx)("path", {
                                                                                                                                                  d:
                                                                                                                                                      "M10.1668 3.44446L9.82255 9.01396C9.73455 10.4369 9.69061 11.1484 9.33394 11.66C9.15755 11.9128 8.93055 12.1263 8.66722 12.2867C8.13466 12.6111 7.42183 12.6111 5.99611 12.6111C4.56856 12.6111 3.85477 12.6111 3.32186 12.2861C3.05838 12.1254 2.83127 11.9116 2.65499 11.6582C2.29843 11.1459 2.25541 10.4334 2.16939 9.00846L1.8335 3.44446",
                                                                                                                                                  stroke: "#181A26",
                                                                                                                                                  strokeWidth: "1.5",
                                                                                                                                                  strokeLinecap: "round",
                                                                                                                                              }),
                                                                                                                                              (0, n.jsx)("path", {
                                                                                                                                                  d:
                                                                                                                                                      "M1 3.44444H11M8.25317 3.44444L7.87394 2.66207C7.622 2.14237 7.496 1.88251 7.27872 1.72045C7.23056 1.6845 7.1795 1.65252 7.12611 1.62483C6.8855 1.5 6.59672 1.5 6.01917 1.5C5.42711 1.5 5.13111 1.5 4.88649 1.63007C4.83228 1.65889 4.78054 1.69217 4.73183 1.72954C4.51202 1.89817 4.38924 2.16753 4.14367 2.70626L3.80718 3.44444",
                                                                                                                                                  stroke: "#181A26",
                                                                                                                                                  strokeWidth: "1.5",
                                                                                                                                                  strokeLinecap: "round",
                                                                                                                                              }),
                                                                                                                                          ],
                                                                                                                                      }),
                                                                                                                                  }),
                                                                                                                                  (0, _.__)("Disconnect", "popup-builder-block"),
                                                                                                                              ],
                                                                                                                          }),
                                                                                                                      }),
                                                                                                                  ],
                                                                                                              }),
                                                                                                          }),
                                                                                                      ],
                                                                                                  },
                                                                                                  e
                                                                                              ),
                                                                                              v === e &&
                                                                                                  D &&
                                                                                                  (0, n.jsx)("tr", {
                                                                                                      className: "edit-row",
                                                                                                      children: (0, n.jsx)("td", {
                                                                                                          colSpan: "2",
                                                                                                          children: (0, n.jsx)("div", {
                                                                                                              className: "pbb-admin-dashboard__settings-api__content-edit",
                                                                                                              children: (0, n.jsxs)("div", {
                                                                                                                  className: "pbb-admin-dashboard__settings-api__lists-content lists-content-edit",
                                                                                                                  children: [
                                                                                                                      (0, n.jsx)("p", {
                                                                                                                          className: "edit-integration-note",
                                                                                                                          children: (0, _.__)(
                                                                                                                              "Changing this integration may impact connected campaigns. Please review and confirm settings after updating.",
                                                                                                                              "popup-builder-block"
                                                                                                                          ),
                                                                                                                      }),
                                                                                                                      Object.entries(p)
                                                                                                                          .filter(([t]) => "index" !== t)
                                                                                                                          .map(([t, e]) =>
                                                                                                                              (0, n.jsx)(
                                                                                                                                  vt,
                                                                                                                                  {
                                                                                                                                      slug: r.slug,
                                                                                                                                      hideLabel: !0,
                                                                                                                                      fieldKey: t.replace(/-/g, " ").replace(/\bapi\b/gi, "API"),
                                                                                                                                      fieldValue: e || "",
                                                                                                                                      onInputChange: (e, i) =>
                                                                                                                                          ((t, e, i) => {
                                                                                                                                              m((t) => ({ ...t, [e]: i }));
                                                                                                                                          })(0, t, i),
                                                                                                                                  },
                                                                                                                                  t
                                                                                                                              )
                                                                                                                          ),
                                                                                                                      (0, n.jsx)(b.Button, {
                                                                                                                          className: "save-btn",
                                                                                                                          onClick: B,
                                                                                                                          disabled: k,
                                                                                                                          children: (0, _.__)(k ? "Updating..." : `Update Integration To ${r.title}`, "popup-builder-block"),
                                                                                                                      }),
                                                                                                                      (0, n.jsx)(b.Button, {
                                                                                                                          className: "cancel-btn",
                                                                                                                          onClick: () => T(!1),
                                                                                                                          children: (0, _.__)("Cancel", "popup-builder-block"),
                                                                                                                      }),
                                                                                                                      (0, n.jsxs)("div", {
                                                                                                                          className: "response-wrapper",
                                                                                                                          children: [
                                                                                                                              (0, n.jsxs)("svg", {
                                                                                                                                  xmlns: "http://www.w3.org/2000/svg",
                                                                                                                                  width: "20",
                                                                                                                                  height: "20",
                                                                                                                                  viewBox: "0 0 20 20",
                                                                                                                                  fill: "none",
                                                                                                                                  children: [
                                                                                                                                      (0, n.jsx)("path", {
                                                                                                                                          d:
                                                                                                                                              "M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19Z",
                                                                                                                                          stroke: "#FC4143",
                                                                                                                                          strokeWidth: "1.5",
                                                                                                                                      }),
                                                                                                                                      (0, n.jsx)("path", {
                                                                                                                                          d: "M9.99268 12.6997H9.99988",
                                                                                                                                          stroke: "#FC4143",
                                                                                                                                          strokeWidth: "2",
                                                                                                                                          strokeLinecap: "round",
                                                                                                                                          strokeLinejoin: "round",
                                                                                                                                      }),
                                                                                                                                      (0, n.jsx)("path", {
                                                                                                                                          d: "M10 9.99941V6.39941",
                                                                                                                                          stroke: "#FC4143",
                                                                                                                                          strokeWidth: "1.5",
                                                                                                                                          strokeLinecap: "round",
                                                                                                                                          strokeLinejoin: "round",
                                                                                                                                      }),
                                                                                                                                  ],
                                                                                                                              }),
                                                                                                                              (0, n.jsx)("span", { id: "response-result", className: "response" }),
                                                                                                                          ],
                                                                                                                      }),
                                                                                                                  ],
                                                                                                              }),
                                                                                                          }),
                                                                                                      }),
                                                                                                  }),
                                                                                          ],
                                                                                      },
                                                                                      e
                                                                                  )
                                                                              ),
                                                                          }),
                                                                      }),
                                                                  }),
                                                                  A &&
                                                                      (0, n.jsx)("div", {
                                                                          className: "pbb-admin-dashboard__settings-api__content-add",
                                                                          children: r.accounts?.slice(0, 1).map((t, e) =>
                                                                              (0, n.jsx)(
                                                                                  "div",
                                                                                  {
                                                                                      className: "pbb-admin-dashboard__settings-api__lists-content lists-content-add",
                                                                                      children: (0, n.jsxs)("div", {
                                                                                          className: "pbb-admin-dashboard__settings-api__lists-content-wrap",
                                                                                          children: [
                                                                                              (0, n.jsx)("h4", { className: "add-account-title", children: (0, _.__)(`Add a New ${r?.title} Integration`, "popup-builder-block") }),
                                                                                              Object.entries(t).map(([t, i]) =>
                                                                                                  (0, n.jsxs)(n.Fragment, {
                                                                                                      children: [
                                                                                                          (0, n.jsx)(
                                                                                                              vt,
                                                                                                              {
                                                                                                                  slug: r.slug,
                                                                                                                  hideLabel: !0,
                                                                                                                  fieldKey: t.replace(/-/g, " ").replace(/\bapi\b/gi, "API"),
                                                                                                                  fieldValue: i || "",
                                                                                                                  onInputChange: (i, s) => V(e, t, s),
                                                                                                              },
                                                                                                              t
                                                                                                          ),
                                                                                                          "authorize-code" === t &&
                                                                                                              (0, n.jsxs)("p", {
                                                                                                                  className: "text-xs text-gray-500 mt-1",
                                                                                                                  children: [
                                                                                                                      (0, n.jsx)("strong", { children: "Note:" }),
                                                                                                                      ' You can get authorize code by clicking on "Get Authorize Code" button.',
                                                                                                                  ],
                                                                                                              }),
                                                                                                      ],
                                                                                                  })
                                                                                              ),
                                                                                              (0, n.jsx)(b.Button, {
                                                                                                  className: "save-btn",
                                                                                                  onClick: F,
                                                                                                  disabled: k,
                                                                                                  children: (0, _.__)(k ? `Connecting ${r.title}...` : `Connect To ${r.title}`, "popup-builder-block"),
                                                                                              }),
                                                                                              "aweber" === r.slug &&
                                                                                                  (0, n.jsx)(b.Button, {
                                                                                                      className: "authorize-btn",
                                                                                                      onClick: () => {
                                                                                                          window.open(
                                                                                                              "https://auth.aweber.com/oauth2/authorize?response_type=code&client_id=gOoQAqHAQxJUCAwzp5w1kRnM79nbHotU&state=68a2ad10ebb9f&redirect_uri=urn:ietf:wg:oauth:2.0:oob&scope=account.read+list.read+subscriber.read+subscriber.write+landing-page.read",
                                                                                                              "AWeberAuth",
                                                                                                              "width=600,height=600,scrollbars=yes,resizable=yes"
                                                                                                          );
                                                                                                      },
                                                                                                      children: "Get Authorize Code",
                                                                                                  }),
                                                                                              (0, n.jsx)(b.Button, { className: "cancel-btn", onClick: () => L(!1), children: (0, _.__)("Cancel", "popup-builder-block") }),
                                                                                              (0, n.jsxs)("div", {
                                                                                                  className: "response-wrapper",
                                                                                                  children: [
                                                                                                      (0, n.jsxs)("svg", {
                                                                                                          xmlns: "http://www.w3.org/2000/svg",
                                                                                                          width: "20",
                                                                                                          height: "20",
                                                                                                          viewBox: "0 0 20 20",
                                                                                                          fill: "none",
                                                                                                          children: [
                                                                                                              (0, n.jsx)("path", {
                                                                                                                  d: "M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19Z",
                                                                                                                  stroke: "#FC4143",
                                                                                                                  strokeWidth: "1.5",
                                                                                                              }),
                                                                                                              (0, n.jsx)("path", {
                                                                                                                  d: "M9.99268 12.6997H9.99988",
                                                                                                                  stroke: "#FC4143",
                                                                                                                  strokeWidth: "2",
                                                                                                                  strokeLinecap: "round",
                                                                                                                  strokeLinejoin: "round",
                                                                                                              }),
                                                                                                              (0, n.jsx)("path", {
                                                                                                                  d: "M10 9.99941V6.39941",
                                                                                                                  stroke: "#FC4143",
                                                                                                                  strokeWidth: "1.5",
                                                                                                                  strokeLinecap: "round",
                                                                                                                  strokeLinejoin: "round",
                                                                                                              }),
                                                                                                          ],
                                                                                                      }),
                                                                                                      (0, n.jsx)("span", { id: "response-result", className: "response" }),
                                                                                                  ],
                                                                                              }),
                                                                                          ],
                                                                                      }),
                                                                                  },
                                                                                  e
                                                                              )
                                                                          ),
                                                                      }),
                                                                  !(D || A) &&
                                                                      (0, n.jsx)("div", {
                                                                          className: "pbb-admin-dashboard__settings-api__lists-content-footer",
                                                                          children: (0, n.jsxs)("div", {
                                                                              className: "pbb-admin-dashboard__settings-api__lists-content-footer-actions",
                                                                              children: [
                                                                                  (0, n.jsxs)("a", {
                                                                                      className: "action-add-btn",
                                                                                      onClick: () => L(!A),
                                                                                      children: [
                                                                                          (0, n.jsxs)("svg", {
                                                                                              xmlns: "http://www.w3.org/2000/svg",
                                                                                              width: "16",
                                                                                              height: "16",
                                                                                              viewBox: "0 0 16 16",
                                                                                              fill: "none",
                                                                                              children: [
                                                                                                  (0, n.jsx)("path", {
                                                                                                      d: "M8.0002 5.19995V10.8M10.8002 7.99995H5.2002",
                                                                                                      stroke: "#181A26",
                                                                                                      strokeWidth: "1.5",
                                                                                                      strokeLinecap: "round",
                                                                                                      strokeLinejoin: "round",
                                                                                                  }),
                                                                                                  (0, n.jsx)("path", {
                                                                                                      d: "M8 15C11.866 15 15 11.866 15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15Z",
                                                                                                      stroke: "#181A26",
                                                                                                      strokeWidth: "1.5",
                                                                                                      strokeLinejoin: "round",
                                                                                                  }),
                                                                                              ],
                                                                                          }),
                                                                                          "Add New Connection",
                                                                                      ],
                                                                                  }),
                                                                                  (0, n.jsx)("a", { className: "action-cancel-btn", onClick: R, children: "Cancel" }),
                                                                              ],
                                                                          }),
                                                                      }),
                                                              ],
                                                          })
                                                        : z("add"),
                                            }),
                                        }),
                                    d &&
                                        (0, n.jsxs)(y.A, {
                                            closeModal: I,
                                            className: "modal-pro",
                                            children: [
                                                (0, n.jsx)(bt, {}),
                                                (0, n.jsx)("div", {
                                                    className: "pbb-modal-pro-actions-close",
                                                    children: (0, n.jsx)("a", {
                                                        href: "#",
                                                        className: "close-btn",
                                                        onClick: I,
                                                        children: (0, n.jsxs)("svg", {
                                                            xmlns: "http://www.w3.org/2000/svg",
                                                            width: "12",
                                                            height: "12",
                                                            viewBox: "0 0 12 12",
                                                            fill: "none",
                                                            children: [
                                                                (0, n.jsx)("path", { d: "M11 1L1 11", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                (0, n.jsx)("path", { d: "M1 1L11 11", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                            ],
                                                        }),
                                                    }),
                                                }),
                                            ],
                                        }),
                                ],
                            }),
                        ],
                    });
                };
            var _t = i(1609);
            const Ct = "https://wpmet.com/plugin/popupkit/wp-json/popupkit/essential/v1/",
                wt = [Ct + "seasonal/", Ct + "goal/", Ct + "industry/", Ct + "feature/"],
                zt = "seasonal",
                kt = "goal",
                Mt = "industry",
                jt = "feature",
                St = { [zt]: [], [kt]: [], [Mt]: [], [jt]: [] },
                At = (0, _t.createContext)(null),
                Lt = () => {
                    const t = (0, _t.useContext)(At);
                    if (!t) throw new Error("useContext must be used within a TemplatesProvider");
                    return t;
                },
                Dt = ({ category: t }) => (0, n.jsx)("div", { className: "templates-filter__category-title", children: (0, n.jsx)("h4", { children: t.name }) }),
                Tt = () => {
                    const { catagoryList: t } = (() => {
                            const { state: t, dispatch: e } = Lt(),
                                [i, s] = (0, _t.useState)(!1),
                                [n, o] = (0, _t.useState)(null),
                                { catagoryList: a } = t;
                            return (
                                (0, _t.useEffect)(() => {
                                    (async () => {
                                        s(!0), o(null);
                                        try {
                                            const t = await Promise.all(wt.map((t) => fetch(t, { method: "GET" }))),
                                                i = (await Promise.all(t.map((t) => t.json()))).flat().reduce((t, e) => {
                                                    const { id: i, count: s, description: n, link: o, name: a, slug: r, taxonomy: l, meta: c } = e;
                                                    return (
                                                        t[l] ||
                                                            (t[l] = {
                                                                id: ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (t) => (t ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (t / 4)))).toString(16)),
                                                                name: l.charAt(0).toUpperCase() + l.slice(1),
                                                                slug: l.toLowerCase(),
                                                                types: "template",
                                                                created_at: new Date().toISOString(),
                                                                updated_at: new Date().toISOString(),
                                                                categoryList: [],
                                                            }),
                                                        t[l].categoryList.push({
                                                            id: i,
                                                            count: s,
                                                            description: n,
                                                            link: o,
                                                            name: a,
                                                            slug: r,
                                                            taxonomy: l,
                                                            meta: c,
                                                            created_at: new Date().toISOString(),
                                                            updated_at: new Date().toISOString(),
                                                        }),
                                                        t
                                                    );
                                                }, {}),
                                                s = Object.values(i);
                                            e({ type: "SET_CATEGORY", payload: s });
                                        } catch (t) {
                                            console.warn("Error fetching category details:", t), o(new Error("Failed to fetch category details."));
                                        } finally {
                                            s(!1);
                                        }
                                    })();
                                }, []),
                                { catagoryList: a, CLoading: i, CError: n }
                            );
                        })(),
                        { state: e, dispatch: i } = Lt(),
                        { selectedCats: s } = e;
                    return (0, n.jsx)(n.Fragment, {
                        children:
                            t &&
                            t.map((t) =>
                                (0, n.jsxs)(
                                    "div",
                                    {
                                        className: "templates-filter__category",
                                        children: [
                                            (0, n.jsx)(Dt, { category: t }),
                                            (0, n.jsx)("div", {
                                                className: "templates-filter__category-list",
                                                children: t.categoryList.map((t) =>
                                                    (0, n.jsxs)(
                                                        "label",
                                                        {
                                                            children: [
                                                                (0, n.jsx)("input", {
                                                                    type: "checkbox",
                                                                    name: "custom-checkbox",
                                                                    value: t.slug,
                                                                    checked: s[t.taxonomy]?.some((e) => e.id === t.id) || !1,
                                                                    onChange: () =>
                                                                        ((t) => {
                                                                            const e = s[t.taxonomy]?.some((e) => e.id === t.id) ? s[t.taxonomy].filter((e) => e.id !== t.id) : [...(s[t.taxonomy] || []), t];
                                                                            i({ type: "SET_SELECTED_CATS", payload: { ...s, [t.taxonomy]: e } });
                                                                        })(t),
                                                                }),
                                                                (0, n.jsx)("span", { children: t.name }),
                                                            ],
                                                        },
                                                        t.id
                                                    )
                                                ),
                                            }),
                                        ],
                                    },
                                    t.id
                                )
                            ),
                    });
                },
                Et = () => {
                    const { state: t, dispatch: e } = Lt(),
                        { packageType: i, packageList: s } = t,
                        o = () =>
                            (0, n.jsxs)("svg", {
                                width: "20",
                                height: "20",
                                viewBox: "0 0 20 20",
                                fill: "none",
                                xmlns: "http://www.w3.org/2000/svg",
                                children: [
                                    (0, n.jsx)("rect", { width: "20", height: "20", rx: "10", fill: "#3B67FE" }),
                                    (0, n.jsx)("path", { d: "M14 7.25L8.5 12.75L6 10.25", stroke: "white", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
                                ],
                            }),
                        a = () =>
                            (0, n.jsx)("svg", {
                                xmlns: "http://www.w3.org/2000/svg",
                                width: "20",
                                height: "20",
                                viewBox: "0 0 20 20",
                                fill: "none",
                                children: (0, n.jsx)("rect", { x: "0.75", y: "0.75", width: "18.5", height: "18.5", rx: "9.25", fill: "white", stroke: "#C8C8CE", strokeWidth: "1.5" }),
                            });
                    return (0, n.jsxs)("div", {
                        className: "templates-filter__type",
                        children: [
                            (0, n.jsx)("h4", { children: "Type" }),
                            (0, n.jsx)("div", {
                                className: "templates-filter__type-list",
                                children: s.map((t, s) =>
                                    (0, n.jsxs)(
                                        "label",
                                        {
                                            className: "templates-filter_item " + (i.slug === t.slug ? "active" : ""),
                                            children: [
                                                (0, n.jsxs)("div", {
                                                    className: "package-item-radio",
                                                    children: [
                                                        (0, n.jsx)("input", {
                                                            id: `radio-${t.slug}`,
                                                            type: "radio",
                                                            name: "custom-radio",
                                                            value: t.slug,
                                                            checked: i.slug === t.slug,
                                                            onChange: () => {
                                                                ((t) => {
                                                                    e({ type: "SET_PACKAGE_TYPE", payload: t });
                                                                })(t);
                                                            },
                                                            style: { display: "none" },
                                                        }),
                                                        i.slug === t.slug ? (0, n.jsx)(o, {}) : (0, n.jsx)(a, {}),
                                                    ],
                                                }),
                                                (0, n.jsx)("span", { children: t?.name }),
                                            ],
                                        },
                                        s
                                    )
                                ),
                            }),
                        ],
                    });
                },
                Ot = () => {
                    const { state: t, dispatch: e } = Lt(),
                        {
                            keyWords: { search: i },
                        } = t,
                        s = (0, l.useRef)(null);
                    return (0, n.jsx)("div", {
                        className: "sort-search-wrapper",
                        children: (0, n.jsxs)("div", {
                            className: "search-container",
                            children: [
                                (0, n.jsx)("input", {
                                    ref: s,
                                    className: "search-input",
                                    type: "input",
                                    placeholder: "Search template...",
                                    value: i,
                                    onChange: (i) => {
                                        e({ type: "SET_KEY_WORDS", payload: { ...t.keyWords, search: i.target.value } });
                                    },
                                }),
                                i &&
                                    (0, n.jsx)("span", {
                                        className: "custom-clear-icon",
                                        onClick: () => {
                                            e({ type: "SET_KEY_WORDS", payload: { ...t.keyWords, search: "" } }), s.current.focus();
                                        },
                                        children: (0, n.jsxs)("svg", {
                                            xmlns: "http://www.w3.org/2000/svg",
                                            width: "10",
                                            height: "10",
                                            viewBox: "0 0 10 10",
                                            fill: "none",
                                            children: [
                                                (0, n.jsx)("path", { d: "M9 1L1 9", stroke: "#95969B", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                (0, n.jsx)("path", { d: "M1 1L9 9", stroke: "#95969B", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                            ],
                                        }),
                                    }),
                            ],
                        }),
                    });
                },
                Pt = () => {
                    const { state: t, dispatch: e } = Lt(),
                        { selectedCats: i } = t;
                    return (0, n.jsx)("button", {
                        onClick: () => {
                            e({ type: "SET_SELECTED_CATS", payload: { ...i, ...St } });
                        },
                        className: "clear-filters",
                        children: (0, n.jsx)("span", { children: "Clear Filters" }),
                    });
                },
                It = () =>
                    (0, n.jsx)("div", { className: "template-filter", children: (0, n.jsxs)("div", { className: "template-filter__inner", children: [(0, n.jsx)(Ot, {}), (0, n.jsx)(Et, {}), (0, n.jsx)(Tt, {}), (0, n.jsx)(Pt, {})] }) }),
                Nt = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "120",
                    height: "80",
                    viewBox: "0 0 120 80",
                    fill: "none",
                    children: [
                        (0, n.jsx)("rect", { width: "120", height: "80", fill: "white" }),
                        (0, n.jsx)("rect", { x: "0.5", y: "0.5", width: "119", height: "79", stroke: "#181A26", strokeOpacity: "0.1" }),
                        (0, n.jsx)("path", { d: "M92 22L82.5882 14H28V54L37.8824 62H92V22Z", fill: "#E3E8FF", fillOpacity: "0.7" }),
                        (0, n.jsx)("g", { filter: "url(#filter0_d_2024_21)", children: (0, n.jsx)("rect", { x: "38", y: "22", width: "54", height: "40", fill: "#5A67AA" }) }),
                        (0, n.jsx)("rect", { x: "44", y: "26", width: "42", height: "16", fill: "#B4C0FF" }),
                        (0, n.jsx)("rect", { x: "44", y: "44", width: "42", height: "6", fill: "white" }),
                        (0, n.jsx)("rect", { x: "44", y: "52", width: "42", height: "6", fill: "#FFCE52" }),
                        (0, n.jsx)("defs", {
                            children: (0, n.jsxs)("filter", {
                                id: "filter0_d_2024_21",
                                x: "28",
                                y: "14",
                                width: "64",
                                height: "48",
                                filterUnits: "userSpaceOnUse",
                                colorInterpolationFilters: "sRGB",
                                children: [
                                    (0, n.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                                    (0, n.jsx)("feColorMatrix", { in: "SourceAlpha", type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0", result: "hardAlpha" }),
                                    (0, n.jsx)("feOffset", { dx: "-10", dy: "-8" }),
                                    (0, n.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
                                    (0, n.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0.837866 0 0 0 0 0.865432 0 0 0 0 0.99637 0 0 0 1 0" }),
                                    (0, n.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_2024_21" }),
                                    (0, n.jsx)("feBlend", { mode: "normal", in: "SourceGraphic", in2: "effect1_dropShadow_2024_21", result: "shape" }),
                                ],
                            }),
                        }),
                    ],
                }),
                Rt = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "120",
                    height: "80",
                    viewBox: "0 0 120 80",
                    fill: "none",
                    children: [
                        (0, n.jsx)("rect", { width: "120", height: "80", fill: "white" }),
                        (0, n.jsx)("rect", { x: "0.5", y: "0.5", width: "119", height: "79", stroke: "#181A26", strokeOpacity: "0.1" }),
                        (0, n.jsx)("path", { d: "M110 20L100 12H14V30L24 38H110V20Z", fill: "#E3E8FF", fillOpacity: "0.7" }),
                        (0, n.jsx)("g", { filter: "url(#filter0_d_2024_103)", children: (0, n.jsx)("rect", { x: "24", y: "20", width: "86", height: "18", fill: "#5A67AA" }) }),
                        (0, n.jsx)("rect", { x: "30", y: "25", width: "52", height: "8", fill: "white" }),
                        (0, n.jsx)("rect", { x: "84", y: "25", width: "20", height: "8", fill: "#88F950" }),
                        (0, n.jsx)("rect", { x: "14", y: "46", width: "48", height: "6", fill: "#F1DEFE" }),
                        (0, n.jsx)("rect", { x: "14", y: "56", width: "30", height: "4", fill: "#EBEDF3" }),
                        (0, n.jsx)("rect", { x: "14", y: "64", width: "40", height: "4", fill: "#EBEDF3" }),
                        (0, n.jsx)("rect", { x: "70", y: "46", width: "40", height: "22", fill: "#EBEDF3" }),
                        (0, n.jsx)("defs", {
                            children: (0, n.jsxs)("filter", {
                                id: "filter0_d_2024_103",
                                x: "14",
                                y: "12",
                                width: "96",
                                height: "26",
                                filterUnits: "userSpaceOnUse",
                                colorInterpolationFilters: "sRGB",
                                children: [
                                    (0, n.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                                    (0, n.jsx)("feColorMatrix", { in: "SourceAlpha", type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0", result: "hardAlpha" }),
                                    (0, n.jsx)("feOffset", { dx: "-10", dy: "-8" }),
                                    (0, n.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
                                    (0, n.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0.837866 0 0 0 0 0.865432 0 0 0 0 0.99637 0 0 0 1 0" }),
                                    (0, n.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_2024_103" }),
                                    (0, n.jsx)("feBlend", { mode: "normal", in: "SourceGraphic", in2: "effect1_dropShadow_2024_103", result: "shape" }),
                                ],
                            }),
                        }),
                    ],
                }),
                Vt = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "120",
                    height: "80",
                    viewBox: "0 0 120 80",
                    fill: "none",
                    children: [
                        (0, n.jsx)("rect", { width: "120", height: "80", fill: "white" }),
                        (0, n.jsx)("rect", { x: "0.5", y: "0.5", width: "119", height: "79", stroke: "#181A26", strokeOpacity: "0.1" }),
                        (0, n.jsx)("rect", { x: "6", y: "6", width: "108", height: "68", fill: "#D6DDFE" }),
                        (0, n.jsx)("path", { d: "M114 22.8889L95 14H25V66L36.4606 74H114V22.8889Z", fill: "#E2E7FF" }),
                        (0, n.jsx)("rect", { x: "25", y: "14", width: "70", height: "52", fill: "#5A67AA" }),
                        (0, n.jsx)("rect", { x: "33", y: "21", width: "54", height: "18", fill: "#B4C0FF" }),
                        (0, n.jsx)("rect", { x: "33", y: "41", width: "54", height: "8", fill: "white" }),
                        (0, n.jsx)("rect", { x: "33", y: "51", width: "54", height: "8", fill: "#FFCE52" }),
                    ],
                }),
                Ft = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "120",
                    height: "80",
                    viewBox: "0 0 120 80",
                    fill: "none",
                    children: [
                        (0, n.jsx)("rect", { width: "120", height: "80", fill: "white" }),
                        (0, n.jsx)("rect", { x: "0.5", y: "0.5", width: "119", height: "79", stroke: "#181A26", strokeOpacity: "0.1" }),
                        (0, n.jsx)("rect", { x: "14", y: "8", width: "86", height: "3", fill: "#F1DEFE" }),
                        (0, n.jsx)("rect", { x: "14", y: "14", width: "86", height: "3", fill: "#EBEDF3" }),
                        (0, n.jsx)("rect", { x: "14", y: "64", width: "86", height: "3", fill: "#EBEDF3" }),
                        (0, n.jsx)("rect", { x: "14", y: "70", width: "86", height: "3", fill: "#EBEDF3" }),
                        (0, n.jsx)("path", { d: "M110 30L100 22H14V50L24 58H110V30Z", fill: "#E3E8FF", fillOpacity: "0.7" }),
                        (0, n.jsx)("g", { filter: "url(#filter0_d_2024_591)", children: (0, n.jsx)("rect", { x: "24", y: "30", width: "86", height: "28", fill: "#5A67AA" }) }),
                        (0, n.jsx)("rect", { x: "56", y: "35", width: "48", height: "8", fill: "#B4C0FF" }),
                        (0, n.jsx)("rect", { x: "30", y: "35", width: "24", height: "8", fill: "#B4C0FF" }),
                        (0, n.jsx)("rect", { x: "30", y: "45", width: "52", height: "8", fill: "white" }),
                        (0, n.jsx)("rect", { x: "84", y: "45", width: "20", height: "8", fill: "#52EEFF" }),
                        (0, n.jsx)("defs", {
                            children: (0, n.jsxs)("filter", {
                                id: "filter0_d_2024_591",
                                x: "14",
                                y: "22",
                                width: "96",
                                height: "36",
                                filterUnits: "userSpaceOnUse",
                                colorInterpolationFilters: "sRGB",
                                children: [
                                    (0, n.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                                    (0, n.jsx)("feColorMatrix", { in: "SourceAlpha", type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0", result: "hardAlpha" }),
                                    (0, n.jsx)("feOffset", { dx: "-10", dy: "-8" }),
                                    (0, n.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
                                    (0, n.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0.837866 0 0 0 0 0.865432 0 0 0 0 0.99637 0 0 0 1 0" }),
                                    (0, n.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_2024_591" }),
                                    (0, n.jsx)("feBlend", { mode: "normal", in: "SourceGraphic", in2: "effect1_dropShadow_2024_591", result: "shape" }),
                                ],
                            }),
                        }),
                    ],
                }),
                Bt = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "120",
                    height: "80",
                    viewBox: "0 0 120 80",
                    fill: "none",
                    children: [
                        (0, n.jsx)("rect", { width: "120", height: "80", fill: "white" }),
                        (0, n.jsx)("rect", { x: "0.5", y: "0.5", width: "119", height: "79", stroke: "#181A26", strokeOpacity: "0.1" }),
                        (0, n.jsx)("path", { d: "M110 30L100 22H62V62L72 70H110V30Z", fill: "#E3E8FF", fillOpacity: "0.7" }),
                        (0, n.jsx)("g", { filter: "url(#filter0_d_2024_338)", children: (0, n.jsx)("rect", { x: "72", y: "30", width: "38", height: "40", fill: "#5A67AA" }) }),
                        (0, n.jsx)("rect", { x: "78", y: "34", width: "26", height: "16", fill: "#B4C0FF" }),
                        (0, n.jsx)("rect", { x: "78", y: "52", width: "26", height: "6", fill: "white" }),
                        (0, n.jsx)("rect", { x: "78", y: "60", width: "26", height: "6", fill: "#FFCE52" }),
                        (0, n.jsx)("defs", {
                            children: (0, n.jsxs)("filter", {
                                id: "filter0_d_2024_338",
                                x: "62",
                                y: "22",
                                width: "48",
                                height: "48",
                                filterUnits: "userSpaceOnUse",
                                colorInterpolationFilters: "sRGB",
                                children: [
                                    (0, n.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                                    (0, n.jsx)("feColorMatrix", { in: "SourceAlpha", type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0", result: "hardAlpha" }),
                                    (0, n.jsx)("feOffset", { dx: "-10", dy: "-8" }),
                                    (0, n.jsx)("feComposite", { in2: "hardAlpha", operator: "out" }),
                                    (0, n.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0.837866 0 0 0 0 0.865432 0 0 0 0 0.99637 0 0 0 1 0" }),
                                    (0, n.jsx)("feBlend", { mode: "normal", in2: "BackgroundImageFix", result: "effect1_dropShadow_2024_338" }),
                                    (0, n.jsx)("feBlend", { mode: "normal", in: "SourceGraphic", in2: "effect1_dropShadow_2024_338", result: "shape" }),
                                ],
                            }),
                        }),
                    ],
                }),
                Ht = (0, n.jsxs)("svg", {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "120",
                    height: "80",
                    viewBox: "0 0 120 80",
                    fill: "none",
                    children: [
                        (0, n.jsx)("rect", { width: "120", height: "80", fill: "white" }),
                        (0, n.jsx)("rect", { x: "0.5", y: "0.5", width: "119", height: "79", stroke: "#181A26", strokeOpacity: "0.1" }),
                        (0, n.jsx)("path", { d: "M72 12L56 6H6V74H56L72 68V12Z", fill: "#E3E8FF", fillOpacity: "0.7" }),
                        (0, n.jsx)("rect", { x: "6", y: "6", width: "50", height: "68", fill: "#D6DDFE" }),
                        (0, n.jsx)("rect", { x: "12", y: "12", width: "60", height: "56", fill: "#5A67AA" }),
                        (0, n.jsx)("path", { d: "M24.012 53.4461C20.8434 56.2721 16.6723 58.0001 12.0985 58.0001H12V41.3681L24.012 53.4461Z", fill: "#B4C0FF" }),
                        (0, n.jsx)("path", { d: "M29.9819 40.729C29.7939 45.454 27.7979 49.72 24.6562 52.825L12.6353 40.729H29.9819Z", fill: "#B4C0FF" }),
                        (0, n.jsx)("path", { d: "M24.2894 26.833L12 39.19V22H12.0985C16.8155 22 21.094 23.827 24.2894 26.833Z", fill: "#B4C0FF" }),
                        (0, n.jsx)("path", {
                            d: "M29.9997 39.8291H12.6262L24.9336 27.4541C25.9897 28.5521 26.9117 29.7851 27.6635 31.1261C28.4154 32.4401 28.9972 33.8531 29.391 35.3471C29.7759 36.7781 29.9818 38.2811 29.9997 39.8291Z",
                            fill: "#B4C0FF",
                        }),
                        (0, n.jsx)("path", { d: "M29.3915 35.3469L22.7231 35.6439L27.664 31.1259C28.4158 32.4399 28.9976 33.8529 29.3915 35.3469Z", fill: "#FFBA57" }),
                        (0, n.jsx)("rect", { x: "36", y: "24", width: "30", height: "16", fill: "#B4C0FF" }),
                        (0, n.jsx)("rect", { x: "36", y: "42", width: "30", height: "6", fill: "white" }),
                        (0, n.jsx)("rect", { x: "36", y: "50", width: "30", height: "6", fill: "#FFCE52" }),
                    ],
                }),
                Wt = () => {
                    const { state: t, dispatch: i } = Lt(),
                        { campaignType: s } = t,
                        [o, a] = (0, l.useState)(null);
                    (0, l.useEffect)(() => {
                        const t = (0, M.addQueryArgs)(Ct + "campaign-type/");
                        (async () => {
                            try {
                                const e = await fetch(t, { method: "GET" }),
                                    s = await e.json();
                                i({ type: "SET_CAMPAIGN_TYPE", payload: s[4] }), a(s);
                            } catch (t) {
                                console.warn("Error fetching campaign type details:", t);
                            }
                        })();
                    }, []);
                    const r = () =>
                            (0, n.jsxs)("svg", {
                                width: "20",
                                height: "20",
                                viewBox: "0 0 20 20",
                                fill: "none",
                                xmlns: "http://www.w3.org/2000/svg",
                                children: [
                                    (0, n.jsx)("rect", { width: "20", height: "20", rx: "10", fill: "#3B67FE" }),
                                    (0, n.jsx)("path", { d: "M14 7.25L8.5 12.75L6 10.25", stroke: "white", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
                                ],
                            }),
                        c = () =>
                            (0, n.jsx)("svg", {
                                width: "20",
                                height: "20",
                                viewBox: "0 0 24 24",
                                fill: "none",
                                xmlns: "http://www.w3.org/2000/svg",
                                children: (0, n.jsx)("circle", { cx: "12", cy: "12", r: "10", stroke: "#ccc", strokeWidth: "2" }),
                            }),
                        d = ["inline"];
                    return (0, n.jsxs)("div", {
                        className: "package-container-wrapper",
                        children: [
                            (0, n.jsx)("h4", { className: "package-title", children: " Select a Campaign Type: " }),
                            (0, n.jsx)("div", {
                                className: "package-container",
                                children:
                                    o &&
                                    o.map((t) => {
                                        const o = d.includes(t.slug),
                                            a = s.slug === t.slug;
                                        return (0, n.jsxs)(
                                            "label",
                                            {
                                                "data-key": t.slug,
                                                className: `package-item ${a ? "active" : ""} ${o ? "disabled" : ""}`,
                                                children: [
                                                    (0, n.jsxs)("div", {
                                                        className: "package-item-radio",
                                                        children: [
                                                            (0, n.jsx)("input", {
                                                                type: "radio",
                                                                name: "custom-radio",
                                                                value: t.slug,
                                                                checked: a,
                                                                onChange: () => {
                                                                    i({ type: "SET_CAMPAIGN_TYPE", payload: t });
                                                                },
                                                                style: { display: "none" },
                                                                disabled: o,
                                                            }),
                                                            a ? (0, n.jsx)(r, {}) : (0, n.jsx)(c, {}),
                                                        ],
                                                    }),
                                                    (0, n.jsxs)("div", {
                                                        className: "package-item-content",
                                                        children: [
                                                            (0, n.jsx)("span", { children: e[t.slug] }),
                                                            (0, n.jsx)("span", { className: "package-item-title", children: t.name }),
                                                            o && (0, n.jsx)("span", { className: "upcoming-badge", children: "Upcoming" }),
                                                        ],
                                                    }),
                                                ],
                                            },
                                            t.id
                                        );
                                    }),
                            }),
                        ],
                    });
                },
                Yt = () => (0, n.jsx)("div", { className: "templates-header", children: (0, n.jsx)(Wt, {}) });
            var $t = i(5795);
            const Ut = ({ popup: t, popupId: e, setIsOpen: i }) => {
                    const { iframeContent: s } = ((t) => {
                            const [e, i] = (0, _t.useState)(null),
                                [s, n] = (0, _t.useState)(!0),
                                [o, a] = (0, _t.useState)(null);
                            return (
                                (0, _t.useEffect)(() => {
                                    (async () => {
                                        if (!t?.link) return a("Popup link is missing"), void n(!0);
                                        n(!0);
                                        try {
                                            const e = await u()({ path: "/pbb/v1/live-preview", method: "POST", data: { url: t.link } });
                                            i(e.content);
                                        } catch (t) {
                                            a(t.message || "An error occurred while fetching the popup.");
                                        } finally {
                                            n(!1);
                                        }
                                    })();
                                }, [t?.link]),
                                { iframeContent: e, PLoading: s, PError: o }
                            );
                        })(t),
                        [o, a] = (0, l.useState)(!0),
                        r = (0, l.useRef)(null),
                        c = (0, l.useRef)(null);
                    return (
                        (0, l.useEffect)(() => {
                            const t = r.current,
                                e = c.current,
                                s = () => {
                                    const e = t.contentDocument || t.contentWindow.document,
                                        s = new MutationObserver((t) => {
                                            for (const n of t)
                                                if ("childList" === n.type || "subtree" === n.type) {
                                                    const t = e.querySelector("#beacon-container"),
                                                        n = e.querySelector(".popup-builder-close"),
                                                        o = e.querySelector(".popup-builder-container");
                                                    t && (t.remove(), s.disconnect()),
                                                        n &&
                                                            n.addEventListener("click", () => {
                                                                i(!1);
                                                            }),
                                                        o && a(!1);
                                                }
                                        });
                                    s.observe(e.body, { childList: !0, subtree: !0 });
                                },
                                n = () => {
                                    const t = new MutationObserver((e) => {
                                        for (const s of e)
                                            ("childList" !== s.type && "subtree" !== s.type) ||
                                                (s.removedNodes.length > 0 &&
                                                    s.removedNodes.forEach((e) => {
                                                        "IFRAME" === e.nodeName && (i(!1), t.disconnect());
                                                    }));
                                    });
                                    t.observe(e, { childList: !0, subtree: !0 });
                                };
                            return (
                                t && (t.addEventListener("load", s), t.addEventListener("load", n)),
                                () => {
                                    t && (t.removeEventListener("load", s), t.removeEventListener("load", n), (r.current = null));
                                }
                            );
                        }, []),
                        (0, n.jsx)("dialog", {
                            className: "pbb-dialog",
                            ref: c,
                            children: (0, n.jsxs)("div", {
                                className: "dialog-box",
                                children: [
                                    o && (0, n.jsx)("div", { className: "loading", children: (0, n.jsx)(b.Spinner, { style: { height: "calc(4px * 20)", width: "calc(4px * 20)" } }) }),
                                    (0, n.jsx)("iframe", { ref: r, srcDoc: s, title: t?.title?.rendered, frameBorder: "0", scrolling: "no", seamless: "seamless", loading: "lazy" }),
                                ],
                            }),
                        })
                    );
                },
                Zt = ({ importData: t }) => {
                    const { isLoading: e, importSuccess: i, message: s, handleImport: o } = (() => {
                            const { state: t, dispatch: e } = Lt(),
                                [i, s] = (0, _t.useState)(!1),
                                [n, o] = (0, _t.useState)(!1),
                                [a, r] = (0, _t.useState)({ image: "", process: "", import: "", success: "", plugin: { gutenkit: "", gutenkitPro: "" } }),
                                [l, c] = (0, _t.useState)(null),
                                { campaignTitle: d } = t;
                            return {
                                isLoading: i,
                                importSuccess: n,
                                error: l,
                                message: a,
                                handleImport: async (t) => {
                                    s(!0), o(!1), c(null);
                                    try {
                                        const i = await (async (t) => {
                                                try {
                                                    const e = await fetch(`https://wpmet.com/plugin/popupkit/wp-json/popupkit/essential/v1/template-lite?id=${t}`);
                                                    return await e.json();
                                                } catch (t) {
                                                    return console.error("Error fetching post:", t), null;
                                                }
                                            })(t.id),
                                            n = await (async () => {
                                                try {
                                                    const t = await u()({ path: "/pbb/v1/settings" });
                                                    return "success" === t.status && { remoteImage: "active" === t.settings.remote_image.status, unfilteredUpload: "active" === t.settings.unfiltered_upload.status };
                                                } catch (t) {
                                                    return console.error("Error fetching settings:", t), !1;
                                                }
                                            })();
                                        let a = null;
                                        n.remoteImage &&
                                            (r((t) => ({ ...t, process: "Processing images..." })),
                                            (a = await u()({
                                                path: "pbb/v1/download",
                                                method: "POST",
                                                headers: { "Content-Type": "application/json" },
                                                body: JSON.stringify({ rawContent: i.post_content, unfilteredUpload: n.unfilteredUpload }),
                                            }))),
                                            r((t) => ({ ...t, import: "Importing the Campaign..." }));
                                        const l = { title: d || t.title, status: "publish", content: n.remoteImage ? a.updatedContent : i.post_content },
                                            c = await u()({ path: "pbb/v1/popupkit-campaigns", method: "POST", data: l, headers: { "Content-Type": "application/json" } });
                                        if (!c || !c.id) throw new Error("Failed to create the popup-builder-block post");
                                        e({ type: "SET_CAMPAIGN_CREATED", payload: c }), o(!0), s(!1), r((t) => ({ ...t, success: "Campaign has been successfully imported" }));
                                    } catch (t) {
                                        c(t.message), o(!1), s(!1);
                                    }
                                },
                            };
                        })(),
                        { state: a, dispatch: r } = Lt(),
                        { confirm: l, isImportOpen: c, campaignTitle: d, campaignCreated: h } = a;
                    (0, _t.useEffect)(() => {
                        if (i) {
                            const e = `${window.popupBuilderBlock.adminUrl}post.php?post=${h.id}&action=edit`;
                            (async (t) => {
                                try {
                                    return await fetch(`https://wpmet.com/plugin/popupkit/wp-json/pbb/v1/update-download-count/${t}`, { method: "POST", headers: { "Content-Type": "application/json" } });
                                } catch (t) {
                                    throw (console.error("Failed to update download count:", t), t);
                                }
                            })(t.id);
                            const s = h.id;
                            i &&
                                s &&
                                ((t = "") => {
                                    if ("undefined" == typeof pbbFontAjax || !pbbFontAjax.ajax_url || !pbbFontAjax.nonce || !pbbFontAjax.action) return void console.error("PBB Error: Font AJAX data (pbbFontAjax) is not available.");
                                    if (!t) return void console.error("PBB Error: Could not trigger font update. Post ID not found.");
                                    const e = new FormData();
                                    e.append("action", pbbFontAjax.action),
                                        e.append("security", pbbFontAjax.nonce),
                                        e.append("post_id", t),
                                        fetch(pbbFontAjax.ajax_url, { method: "POST", body: e })
                                            .then(async (t) => {
                                                const e = await t.json();
                                                if (!t.ok) throw new Error(e?.data?.message || `HTTP error! Status: ${t.status}`);
                                                return e;
                                            })
                                            .then((t) => {
                                                t.success || console.error("PBB Error: Font family update failed:", t.data?.message || "Unknown error");
                                            })
                                            .catch((t) => {
                                                console.error("PBB Error: AJAX request failed:", t.message || t);
                                            });
                                })(s),
                                (window.location.href = e),
                                r({ type: "SET_CONFIRM", payload: !1 }),
                                r({ type: "SET_IMPORT_OPEN", payload: !1 }),
                                r({ type: "SET_CAMPAIGN_TITLE", payload: "" });
                        }
                    }, [i]);
                    const p = () => {
                            r({ type: "SET_CONFIRM", payload: !1 }), r({ type: "SET_IMPORT_OPEN", payload: !1 });
                        },
                        m = ({ onClick: t }) =>
                            (0, n.jsx)("button", {
                                className: "import-dialog-close-btn",
                                onClick: t,
                                children: (0, n.jsxs)("svg", {
                                    xmlns: "http://www.w3.org/2000/svg",
                                    width: "12",
                                    height: "12",
                                    viewBox: "0 0 12 12",
                                    fill: "none",
                                    children: [
                                        (0, n.jsx)("path", { d: "M11 1L1 11", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                        (0, n.jsx)("path", { d: "M1 1L11 11", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                    ],
                                }),
                            });
                    return (0, n.jsx)("div", {
                        className: "import-dialog-overlay",
                        children: (0, n.jsxs)("div", {
                            className: "import-dialog-box",
                            children: [
                                (0, n.jsxs)("div", {
                                    className: "import-dialog-header",
                                    children: [(0, n.jsx)("h2", { className: "import-dialog-header-title", children: "Create Your Campaign" }), !l && (0, n.jsx)(m, { onClick: p }), i && (0, n.jsx)(m, { onClick: p })],
                                }),
                                (0, n.jsxs)("div", {
                                    className: "import-dialog-content",
                                    children: [
                                        (0, n.jsxs)("div", {
                                            className: "import-dialog-info",
                                            children: [
                                                (0, n.jsxs)("h5", {
                                                    className: "import-label",
                                                    children: [
                                                        "What is your campaign name?",
                                                        (0, n.jsxs)("svg", {
                                                            title: "Enter the campaign title or leave it blank to use the default.",
                                                            xmlns: "http://www.w3.org/2000/svg",
                                                            width: "18",
                                                            height: "18",
                                                            viewBox: "0 0 18 18",
                                                            fill: "none",
                                                            children: [
                                                                (0, n.jsx)("path", {
                                                                    d: "M9 17C13.4183 17 17 13.4183 17 9C17 4.58172 13.4183 1 9 1C4.58172 1 1 4.58172 1 9C1 13.4183 4.58172 17 9 17Z",
                                                                    stroke: "#545558",
                                                                    strokeWidth: "1.5",
                                                                    strokeLinecap: "round",
                                                                    strokeLinejoin: "round",
                                                                }),
                                                                (0, n.jsx)("path", { d: "M9 12.2V9", stroke: "#545558", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                (0, n.jsx)("path", { d: "M9 5.7998H9.008", stroke: "#545558", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                            ],
                                                        }),
                                                        (0, n.jsx)("span", { className: "tooltip", children: "Enter the campaign title or leave it blank to use the default." }),
                                                    ],
                                                }),
                                                (0, n.jsx)("span", {
                                                    className: "import-title",
                                                    children: (0, n.jsx)("input", {
                                                        className: "import-title-input",
                                                        type: "text",
                                                        value: d,
                                                        onChange: (t) => r({ type: "SET_CAMPAIGN_TITLE", payload: t.target.value }),
                                                        placeholder: "Type Campaign Title...",
                                                    }),
                                                }),
                                            ],
                                        }),
                                        (0, n.jsxs)("div", {
                                            className: "import-dialog-actions",
                                            children: [
                                                (0, n.jsxs)("p", {
                                                    className: "import-message",
                                                    children: ["Please fill out the campaign title before proceeding. To proceed ", (0, n.jsx)("br", {}), ' with the campaign, click the "Import" button.'],
                                                }),
                                                !i &&
                                                    (0, n.jsxs)("button", {
                                                        onClick: () => {
                                                            r({ type: "SET_CONFIRM", payload: !0 }), o(t);
                                                        },
                                                        children: [
                                                            e ? "Importing " : "Import",
                                                            e
                                                                ? (0, n.jsx)(b.Spinner, {})
                                                                : (0, n.jsxs)("svg", {
                                                                      xmlns: "http://www.w3.org/2000/svg",
                                                                      width: "18",
                                                                      height: "18",
                                                                      viewBox: "0 0 18 18",
                                                                      fill: "none",
                                                                      children: [
                                                                          (0, n.jsx)("path", {
                                                                              d: "M9 17C13.4182 17 17 13.4182 17 9C17 4.58172 13.4182 1 9 1C4.58172 1 1 4.58172 1 9C1 13.4182 4.58172 17 9 17Z",
                                                                              stroke: "white",
                                                                              strokeWidth: "1.5",
                                                                          }),
                                                                          (0, n.jsx)("path", {
                                                                              d: "M8.9999 5V9.4M7.3999 8.2L8.43422 9.23432C8.70086 9.50096 8.83422 9.63432 8.9999 9.63432C9.16558 9.63432 9.29894 9.50096 9.56558 9.23432L10.5999 8.2",
                                                                              stroke: "white",
                                                                              strokeWidth: "1.5",
                                                                              strokeLinecap: "round",
                                                                              strokeLinejoin: "round",
                                                                          }),
                                                                          (0, n.jsx)("path", { d: "M6.59229 12.2H11.3923", stroke: "white", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                                                      ],
                                                                  }),
                                                        ],
                                                    }),
                                            ],
                                        }),
                                    ],
                                }),
                            ],
                        }),
                    });
                },
                Gt = () =>
                    (0, n.jsx)("div", {
                        className: "no-message-border",
                        children: (0, n.jsxs)("div", {
                            className: "no-message",
                            children: [
                                (0, n.jsxs)("svg", {
                                    xmlns: "http://www.w3.org/2000/svg",
                                    width: "28",
                                    height: "28",
                                    viewBox: "0 0 28 28",
                                    fill: "none",
                                    children: [
                                        (0, n.jsx)("path", { d: "M14 27C21.1797 27 27 21.1797 27 14C27 6.8203 21.1797 1 14 1C6.8203 1 1 6.8203 1 14C1 21.1797 6.8203 27 14 27Z", stroke: "#3353F4", strokeWidth: "2" }),
                                        (0, n.jsx)("path", { d: "M13.9896 17.8999H14.0013", stroke: "#3353F4", strokeWidth: "2.5", strokeLinecap: "round", strokeLinejoin: "round" }),
                                        (0, n.jsx)("path", { d: "M14 14V8.80005", stroke: "#3353F4", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
                                    ],
                                }),
                                (0, n.jsx)("span", { children: "Oops! No templates are available for your current search." }),
                            ],
                        }),
                    }),
                Kt = ({ items: t }) =>
                    Array.from({ length: t }, (t, e) =>
                        (0, n.jsxs)(
                            "div",
                            {
                                className: "placeholder-card",
                                children: [
                                    (0, n.jsx)("div", {
                                        className: "placeholder-image",
                                        children: (0, n.jsxs)("svg", {
                                            xmlns: "http://www.w3.org/2000/svg",
                                            viewBox: "0 0 315 220",
                                            fill: "none",
                                            children: [
                                                (0, n.jsx)("rect", { width: "315", height: "220", fill: "#F1F2F7" }),
                                                (0, n.jsx)("path", {
                                                    d:
                                                        "M96.5 131L117.828 111.287C120.115 109.232 123.633 109.314 125.818 111.476L141.218 126.694L171.583 90.8472C173.879 88.1381 178.083 88.1115 180.413 90.788L216.5 131L96.5 131ZM135.427 89.4927C135.427 83.6969 130.675 79 124.81 79C118.946 79 114.193 83.6969 114.193 89.4927C114.193 95.2886 118.945 99.9853 124.81 99.9853C130.674 99.9855 135.427 95.2886 135.427 89.4927Z",
                                                    fill: "#D8DAE3",
                                                }),
                                            ],
                                        }),
                                    }),
                                    (0, n.jsxs)("div", {
                                        className: "placeholder-text-container",
                                        children: [
                                            (0, n.jsx)("div", { className: "placeholder-line", children: (0, n.jsx)("div", { className: "shimmer" }) }),
                                            (0, n.jsx)("div", { className: "placeholder-line-short", children: (0, n.jsx)("div", { className: "shimmer" }) }),
                                        ],
                                    }),
                                ],
                            },
                            e
                        )
                    ),
                qt = (0, n.jsxs)("svg", {
                    width: "313",
                    height: "210",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: [
                        (0, n.jsx)("path", { fill: "#F1F2F7", d: "M0 0h313v210H0z" }),
                        (0, n.jsx)("path", {
                            d:
                                "m96.5 131 21.328-19.713c2.287-2.055 5.805-1.973 7.99.189l15.4 15.218 30.365-35.847c2.296-2.709 6.5-2.735 8.83-.059L216.5 131h-120Zm38.927-41.507c0-5.796-4.752-10.493-10.617-10.493-5.864 0-10.617 4.697-10.617 10.493s4.752 10.492 10.617 10.492c5.864 0 10.617-4.696 10.617-10.492Z",
                            fill: "#D8DAE3",
                        }),
                    ],
                }),
                Xt = ({ popup: t, onPreview: e, onImportOpen: i, isProActive: s }) => {
                    const o = (0, j.A)(t?.title);
                    return (0, n.jsx)(n.Fragment, {
                        children: (0, n.jsx)("div", {
                            className: "popups-item",
                            children: (0, n.jsxs)("div", {
                                className: "popups-content",
                                children: [
                                    (0, n.jsxs)("div", {
                                        className: "popups-image",
                                        children: [
                                            (0, n.jsx)("div", {
                                                className: "preview-overlay",
                                                children: (0, n.jsxs)("div", {
                                                    className: "preview-overlay-button",
                                                    children: [
                                                        "pro" === t.package
                                                            ? s
                                                                ? (0, n.jsx)("button", { className: "use-template-btn", onClick: i, children: "Use Template" })
                                                                : (0, n.jsxs)("a", {
                                                                      href: "https://wpmet.com/plugin/popupkit/pricing",
                                                                      target: "_blank",
                                                                      className: "pro-btn",
                                                                      children: [
                                                                          (0, n.jsxs)("svg", {
                                                                              xmlns: "http://www.w3.org/2000/svg",
                                                                              width: "14",
                                                                              height: "14",
                                                                              viewBox: "0 0 14 14",
                                                                              fill: "none",
                                                                              children: [
                                                                                  (0, n.jsx)("path", {
                                                                                      d:
                                                                                          "M11.2 6.3999H2.79998C2.13723 6.3999 1.59998 6.93716 1.59998 7.5999V11.7999C1.59998 12.4626 2.13723 12.9999 2.79998 12.9999H11.2C11.8627 12.9999 12.4 12.4626 12.4 11.7999V7.5999C12.4 6.93716 11.8627 6.3999 11.2 6.3999Z",
                                                                                      stroke: "white",
                                                                                      strokeWidth: "1.5",
                                                                                      strokeLinecap: "round",
                                                                                      strokeLinejoin: "round",
                                                                                  }),
                                                                                  (0, n.jsx)("path", {
                                                                                      d:
                                                                                          "M4.00012 6.4V4C4.00012 3.20435 4.31619 2.44129 4.8788 1.87868C5.44141 1.31607 6.20447 1 7.00012 1C7.79577 1 8.55883 1.31607 9.12144 1.87868C9.68405 2.44129 10.0001 3.20435 10.0001 4V6.4",
                                                                                      stroke: "white",
                                                                                      strokeWidth: "1.5",
                                                                                      strokeLinecap: "round",
                                                                                      strokeLinejoin: "round",
                                                                                  }),
                                                                              ],
                                                                          }),
                                                                          "Pro Upgrade",
                                                                      ],
                                                                  })
                                                            : (0, n.jsx)("button", { className: "use-template-btn", onClick: i, children: "Use Template" }),
                                                        (0, n.jsx)("button", { className: "live-preview-btn", onClick: e, children: "Live Preview " }),
                                                    ],
                                                }),
                                            }),
                                            t?.featured_media ? (0, n.jsx)("img", { src: t.featured_media, alt: o || "Loading..." }) : qt,
                                        ],
                                    }),
                                    (0, n.jsxs)("div", {
                                        className: "popups-info",
                                        children: [
                                            (0, n.jsx)("span", { className: "popups-title", children: o }),
                                            t.tag.includes("featured")
                                                ? (0, n.jsxs)("svg", {
                                                      xmlns: "http://www.w3.org/2000/svg",
                                                      width: "72",
                                                      height: "18",
                                                      viewBox: "0 0 72 18",
                                                      fill: "none",
                                                      children: [
                                                          (0, n.jsx)("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H69C70.6569 0 72 1.34315 72 3V15C72 16.6569 70.6569 18 69 18H3C1.34315 18 0 16.6569 0 15V3Z", fill: "#FFCE52" }),
                                                          (0, n.jsx)("path", { d: "M5 4.72205V13.122H7.16V9.88205H10.58V8.32205H7.16V6.37805H10.94V4.72205H5Z", fill: "#483402" }),
                                                          (0, n.jsx)("path", { d: "M12.1367 13.122V4.72205H18.2567V6.37805H14.2967V8.02205H17.8967V9.58205H14.2967V11.466H18.2567V13.122H12.1367Z", fill: "#483402" }),
                                                          (0, n.jsx)("path", {
                                                              fillRule: "evenodd",
                                                              clipRule: "evenodd",
                                                              d: "M22.094 4.72205L19.022 13.122H21.074L21.65 11.514H24.458L25.034 13.122H27.314L24.254 4.72205H22.094ZM23.054 7.36205L23.846 9.85805H22.262L23.054 7.36205Z",
                                                              fill: "#483402",
                                                          }),
                                                          (0, n.jsx)("path", { d: "M29.4097 13.122V6.49805H26.8297V4.72205H34.1497V6.49805H31.5697V13.122H29.4097Z", fill: "#483402" }),
                                                          (0, n.jsx)("path", {
                                                              d:
                                                                  "M36.8304 12.894C37.3824 13.15 38.0304 13.278 38.7744 13.278C39.5344 13.278 40.1864 13.15 40.7304 12.894C41.2744 12.63 41.6944 12.238 41.9904 11.718C42.2864 11.19 42.4344 10.538 42.4344 9.76205V4.72205H40.2744V9.52205C40.2744 10.162 40.1664 10.65 39.9504 10.986C39.7344 11.314 39.3424 11.478 38.7744 11.478C38.2224 11.478 37.8344 11.314 37.6104 10.986C37.3864 10.65 37.2744 10.158 37.2744 9.51005V4.72205H35.1144V9.76205C35.1144 10.538 35.2624 11.19 35.5584 11.718C35.8624 12.238 36.2864 12.63 36.8304 12.894Z",
                                                              fill: "#483402",
                                                          }),
                                                          (0, n.jsx)("path", {
                                                              fillRule: "evenodd",
                                                              clipRule: "evenodd",
                                                              d:
                                                                  "M44 13.122V4.72205H47.66C48.364 4.72205 48.948 4.83805 49.412 5.07005C49.884 5.30205 50.24 5.62605 50.48 6.04205C50.72 6.45805 50.84 6.95405 50.84 7.53005C50.84 8.13005 50.696 8.64605 50.408 9.07805C50.128 9.50205 49.704 9.81405 49.136 10.014L51.08 13.122H48.68L47.048 10.242H46.16V13.122H44ZM46.16 8.56205H47.18C47.756 8.56205 48.148 8.47805 48.356 8.31005C48.572 8.13405 48.68 7.87405 48.68 7.53005C48.68 7.18605 48.572 6.93005 48.356 6.76205C48.148 6.58605 47.756 6.49805 47.18 6.49805H46.16V8.56205Z",
                                                              fill: "#483402",
                                                          }),
                                                          (0, n.jsx)("path", { d: "M52.3438 4.72205V13.122H58.4637V11.466H54.5037V9.58205H58.1037V8.02205H54.5037V6.37805H58.4637V4.72205H52.3438Z", fill: "#483402" }),
                                                          (0, n.jsx)("path", {
                                                              fillRule: "evenodd",
                                                              clipRule: "evenodd",
                                                              d:
                                                                  "M59.8438 4.72205V13.122H62.9038C63.7677 13.122 64.5077 12.966 65.1237 12.654C65.7477 12.334 66.2238 11.866 66.5518 11.25C66.8797 10.634 67.0438 9.87805 67.0438 8.98205V8.74205C67.0438 7.86205 66.8838 7.12605 66.5638 6.53405C66.2438 5.93405 65.7837 5.48205 65.1838 5.17805C64.5838 4.87405 63.8638 4.72205 63.0238 4.72205H59.8438ZM62.7837 11.346H62.0037V6.49805H62.9038C63.2558 6.49805 63.5758 6.57405 63.8638 6.72605C64.1517 6.87005 64.3797 7.10605 64.5477 7.43405C64.7237 7.76205 64.8117 8.19805 64.8117 8.74205V8.98205C64.8117 9.55805 64.7158 10.022 64.5238 10.374C64.3317 10.718 64.0838 10.966 63.7798 11.118C63.4837 11.27 63.1517 11.346 62.7837 11.346Z",
                                                              fill: "#483402",
                                                          }),
                                                      ],
                                                  })
                                                : "pro" === t.package
                                                ? (0, n.jsxs)("svg", {
                                                      xmlns: "http://www.w3.org/2000/svg",
                                                      width: "34",
                                                      height: "17",
                                                      viewBox: "0 0 34 17",
                                                      fill: "none",
                                                      children: [
                                                          (0, n.jsx)("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H31C32.6569 0 34 1.34315 34 3V14C34 15.6569 32.6569 17 31 17H3C1.34315 17 0 15.6569 0 14V3Z", fill: "#FE0467" }),
                                                          (0, n.jsx)("path", {
                                                              fillRule: "evenodd",
                                                              clipRule: "evenodd",
                                                              d:
                                                                  "M24.9609 12.8124C24.4223 12.8124 23.9075 12.7332 23.4165 12.5748C22.9254 12.4164 22.4938 12.1669 22.1216 11.8264C21.7493 11.4858 21.4563 11.0462 21.2425 10.5077C21.0286 9.96122 20.9217 9.31179 20.9217 8.5594V8.3218C20.9217 7.59317 21.0286 6.9675 21.2425 6.44479C21.4563 5.92208 21.7493 5.4944 22.1216 5.16177C22.4938 4.82913 22.9254 4.58362 23.4165 4.42522C23.9075 4.26682 24.4223 4.18762 24.9609 4.18762C25.5152 4.18762 26.034 4.26682 26.5171 4.42522C27.0002 4.58362 27.4279 4.82913 27.8001 5.16177C28.1724 5.4944 28.4654 5.92208 28.6792 6.44479C28.8931 6.9675 29 7.59317 29 8.3218V8.5594C29 9.31179 28.8931 9.96122 28.6792 10.5077C28.4654 11.0462 28.1724 11.4858 27.8001 11.8264C27.4279 12.1669 27.0002 12.4164 26.5171 12.5748C26.034 12.7332 25.5152 12.8124 24.9609 12.8124ZM24.949 11.0304C25.2737 11.0304 25.5746 10.9591 25.8518 10.8166C26.129 10.6661 26.3508 10.4166 26.5171 10.0681C26.6914 9.71175 26.7785 9.20883 26.7785 8.5594V8.3218C26.7785 7.70405 26.6914 7.2249 26.5171 6.88434C26.3508 6.54379 26.129 6.30619 25.8518 6.17155C25.5746 6.03692 25.2737 5.9696 24.949 5.9696C24.6401 5.9696 24.3471 6.03692 24.0699 6.17155C23.7927 6.30619 23.567 6.54379 23.3927 6.88434C23.2185 7.2249 23.1314 7.70405 23.1314 8.3218V8.5594C23.1314 9.20883 23.2185 9.71175 23.3927 10.0681C23.567 10.4166 23.7927 10.6661 24.0699 10.8166C24.3471 10.9591 24.6401 11.0304 24.949 11.0304Z",
                                                              fill: "white",
                                                          }),
                                                          (0, n.jsx)("path", {
                                                              fillRule: "evenodd",
                                                              clipRule: "evenodd",
                                                              d:
                                                                  "M12.9586 12.6579V4.34207H16.5819C17.2789 4.34207 17.857 4.4569 18.3164 4.68658C18.7836 4.91626 19.1361 5.23701 19.3737 5.64885C19.6113 6.06068 19.7301 6.55171 19.7301 7.12195C19.7301 7.71594 19.5875 8.22677 19.3024 8.65445C19.0252 9.0742 18.6054 9.38308 18.0431 9.58107L19.9677 12.6579H17.5917L15.976 9.80679H15.0969V12.6579H12.9586ZM15.0969 8.14361H16.1067C16.6769 8.14361 17.065 8.06045 17.2709 7.89414C17.4848 7.7199 17.5917 7.4625 17.5917 7.12195C17.5917 6.78139 17.4848 6.52796 17.2709 6.36164C17.065 6.1874 16.6769 6.10028 16.1067 6.10028H15.0969V8.14361Z",
                                                              fill: "white",
                                                          }),
                                                          (0, n.jsx)("path", {
                                                              fillRule: "evenodd",
                                                              clipRule: "evenodd",
                                                              d:
                                                                  "M5 4.34207V12.6579H7.13837V10.0206H8.38575C9.1619 10.0206 9.79945 9.90975 10.2984 9.68799C10.7974 9.45831 11.1656 9.12964 11.4032 8.70196C11.6487 8.27429 11.7715 7.76742 11.7715 7.18135C11.7715 6.58735 11.6487 6.08048 11.4032 5.66073C11.1656 5.23305 10.7974 4.90834 10.2984 4.68658C9.79945 4.4569 9.1619 4.34207 8.38575 4.34207H5ZM8.14816 8.26241H7.13837V6.10028H8.14816C8.69463 6.10028 9.07874 6.19136 9.3005 6.37352C9.52226 6.55567 9.63313 6.82495 9.63313 7.18135C9.63313 7.53774 9.52226 7.80702 9.3005 7.98918C9.07874 8.17133 8.69463 8.26241 8.14816 8.26241Z",
                                                              fill: "white",
                                                          }),
                                                      ],
                                                  })
                                                : null,
                                        ],
                                    }),
                                ],
                            }),
                        }),
                    });
                },
                Jt = () => {
                    const { state: t, dispatch: e } = Lt(),
                        i = f({ windowVariable: "popupBuilderBlock", hookName: "pbb.is-pro-active", cookieName: "isPopupkitValid", apiPath: "pbb" }),
                        [s, o] = (0, l.useState)(null),
                        [a, r] = (0, l.useState)(!1),
                        { popupsList: c, campaignType: d, packageType: h, selectedCats: p, keyWords: m, isImportOpen: g, isTemplatesLoaded: b } = t;
                    (0, l.useEffect)(() => {
                        u()({ path: "/pbb/v1/templates" })
                            .then((t) => {
                                "success" === t.status && e({ type: "SET_POPUP_LIST", payload: t.data || [] });
                            })
                            .catch((t) => {
                                console.error("Error fetching templates:", t), o(t), e({ type: "SET_TEMPLATES_LOADED", payload: !0 });
                            });
                    }, []);
                    const x = ((t, e = {}, i = {}, s = {}, n = {}) => {
                        const { sortby: o, search: a } = n;
                        return (0, l.useMemo)(
                            () =>
                                t.filter((t) => {
                                    if (e && t["campaign-type"] && !t["campaign-type"].includes(e.id)) return !1;
                                    if (i && t.package && "all" !== i.slug && t.package !== i.slug) return !1;
                                    if (
                                        s &&
                                        Object.keys(s).length > 0 &&
                                        Object.keys(s).some((t) => s[t]?.length > 0) &&
                                        !Object.keys(s).every((e) => {
                                            const i = s[e].map((t) => t.id);
                                            return !s[e].length || (t[e] && t[e].some((t) => i.includes(t)));
                                        })
                                    )
                                        return !1;
                                    if (a) {
                                        const e = a.toLowerCase();
                                        if (!t.title.toLowerCase().includes(e)) return !1;
                                    }
                                    return !0;
                                }),
                            [t, e, i, s, n]
                        );
                    })(c, d, h, p, m);
                    (0, l.useEffect)(() => {
                        x.length > 0 && !b && e({ type: "SET_TEMPLATES_LOADED", payload: !0 });
                    }, [x]);
                    const [v, y] = (0, l.useState)({}),
                        _ = s || 0 === x.length || ("" !== m.search && 0 === x.length);
                    return (0, n.jsxs)(n.Fragment, {
                        children: [
                            _ && b && (0, n.jsx)(Gt, {}),
                            (0, n.jsxs)("div", {
                                className: `popups ${d?.slug ? d?.slug : "popup"}`,
                                children: [
                                    !b && (0, n.jsx)(Kt, { items: 16 }),
                                    b &&
                                        x.length > 0 &&
                                        x.map((t) =>
                                            (0, n.jsx)(
                                                Xt,
                                                {
                                                    popup: t,
                                                    onPreview: (e) =>
                                                        ((t, e) => {
                                                            e.preventDefault(), y(t), r(!a);
                                                        })(t, e),
                                                    onImportOpen: () =>
                                                        ((t) => {
                                                            y(t), e({ type: "SET_IMPORT_OPEN", payload: !0 });
                                                        })(t),
                                                    isProActive: i,
                                                },
                                                t.id
                                            )
                                        ),
                                ],
                            }),
                            a && (0, $t.createPortal)((0, n.jsx)(Ut, { popup: v, popupId: v.id, setIsOpen: r }), document.body),
                            g && (0, $t.createPortal)((0, n.jsx)(Zt, { importData: v }), document.body),
                        ],
                    });
                },
                Qt = {
                    popupsPage: 1,
                    popupsList: [],
                    popupsHasMore: !0,
                    popupsCats: [],
                    campaignType: {},
                    packageType: { slug: "all", name: "All" },
                    packageList: [
                        { slug: "all", name: "All" },
                        { slug: "free", name: "Free" },
                        { slug: "pro", name: "Pro" },
                    ],
                    catagoryList: [],
                    selectedCats: { ...St },
                    keyWords: { search: "" },
                    isTemplatesLoaded: !1,
                    confirm: !1,
                    isImportOpen: !1,
                    campaignTitle: "",
                    campaignCreated: {},
                },
                te = (t, e) => {
                    switch (e.type) {
                        case "SET_POPUP_PAGE":
                            return { ...t, popupsPage: e.payload };
                        case "SET_POPUP_LIST":
                            return { ...t, popupsList: e.payload };
                        case "SET_POPUP_HAS_MORE":
                            return { ...t, popupsHasMore: e.payload };
                        case "SET_POPUP_CATS":
                            return { ...t, popupsCats: e.payload };
                        case "SET_CAMPAIGN_TYPE":
                            return { ...t, campaignType: e.payload };
                        case "SET_PACKAGE_TYPE":
                            return { ...t, packageType: e.payload };
                        case "SET_PACKAGE":
                            return { ...t, packageList: e.payload };
                        case "SET_CATEGORY":
                            return { ...t, catagoryList: e.payload };
                        case "SET_SELECTED_CATS":
                            return { ...t, selectedCats: e.payload };
                        case "SET_KEY_WORDS":
                            return { ...t, keyWords: e.payload };
                        case "SET_CONFIRM":
                            return { ...t, confirm: e.payload };
                        case "SET_IMPORT_OPEN":
                            return { ...t, isImportOpen: e.payload };
                        case "SET_CAMPAIGN_TITLE":
                            return { ...t, campaignTitle: e.payload };
                        case "SET_CAMPAIGN_CREATED":
                            return { ...t, campaignCreated: e.payload };
                        case "SET_TEMPLATES_LOADED":
                            return { ...t, isTemplatesLoaded: e.payload };
                        default:
                            return t;
                    }
                },
                ee = ({ children: t }) => {
                    const [e, i] = (0, _t.useReducer)(te, Qt);
                    return (0, n.jsx)(At.Provider, { value: { state: e, dispatch: i }, children: t });
                },
                ie = () =>
                    (0, n.jsx)(ee, { children: (0, n.jsxs)("div", { className: "pbb-templates", children: [(0, n.jsx)(Yt, {}), (0, n.jsxs)("div", { className: "templates-page", children: [(0, n.jsx)(It, {}), (0, n.jsx)(Jt, {})] })] }) }),
                se = () => (0, n.jsx)("div", { className: "pbb-settings__header", children: (0, n.jsx)("h3", { className: "pbb-settings__header-title", children: "Popup Builder Settings" }) }),
                ne = (0, _t.createContext)(null),
                oe = () => {
                    const t = (0, _t.useContext)(ne);
                    if (!t) throw new Error("useContext must be used within a TemplatesProvider");
                    return t;
                },
                ae = () => {
                    const { state: t, dispatch: e } = oe(),
                        { settings: i } = t;
                    return (
                        (0, _t.useEffect)(() => {
                            (async () => {
                                try {
                                    const t = await u()({ path: "/pbb/v1/settings" });
                                    "success" === t.status && e({ type: "SET_SETTINGS", payload: t.settings });
                                } catch (t) {
                                    console.error("Error fetching settings:", t);
                                }
                            })();
                        }, []),
                        i
                    );
                },
                re = (t, e, i, s, n) => {
                    t({ type: "SET_SETTINGS", payload: i }),
                        u()({ path: "/pbb/v1/settings", method: "POST", data: { settings: i } })
                            .then((t) => {
                                "success" === t?.status
                                    ? s.success("Settings updated successfully!", { position: "top-right", autoClose: 2e3, hideProgressBar: !1, closeOnClick: !0, pauseOnHover: !1, draggable: !0, progress: void 0, transition: n })
                                    : s.warn("Unexpected response from the server.", { position: "top-right", autoClose: 2e3, hideProgressBar: !1, closeOnClick: !0, pauseOnHover: !1, draggable: !0, progress: void 0, transition: n });
                            })
                            .catch((i) => {
                                console.error("Error updating settings:", i),
                                    s.error("Failed to update settings. Please try again.", { position: "top-right", autoClose: 2e3, hideProgressBar: !1, closeOnClick: !1, pauseOnHover: !0, draggable: !0, progress: void 0, transition: n }),
                                    t({ type: "SET_SETTINGS", payload: e });
                            });
                },
                le = function ({ id: t, title: e, description: i, switcherEnable: s = !0, checked: o, onChange: a }) {
                    return (0, n.jsxs)("div", {
                        className: "pbb-settings__option",
                        children: [
                            (0, n.jsxs)("label", {
                                className: "pbb-settings__label",
                                style: { marginBottom: "10px" },
                                children: [(0, n.jsx)("span", { className: "pbb-settings__title", children: e }), (0, n.jsx)("p", { className: "pbb-settings__description", children: i })],
                            }),
                            s &&
                                (0, n.jsxs)("div", {
                                    className: "pbb-settings__toggle",
                                    children: [(0, n.jsx)("input", { type: "checkbox", id: t, className: "pbb-settings__input", onChange: a, checked: o }), (0, n.jsx)("label", { htmlFor: t, className: "pbb-settings__toggle-label" })],
                                }),
                        ],
                    });
                },
                ce = () => {
                    const t = ae(),
                        e = Object.values(t),
                        {
                            state: { toast: i, tBounce: s },
                            dispatch: o,
                        } = oe();
                    return e.map((e) =>
                        "analytics" === e.slug
                            ? (0, n.jsxs)(
                                  "div",
                                  {
                                      className: "pbb-settings__tab-content",
                                      children: [
                                          (0, n.jsx)(le, { id: e._id, title: e.title, description: e.description, switcherEnable: !1 }),
                                          (0, n.jsx)("div", {
                                              className: "pbb-settings__select-option",
                                              children: (0, n.jsx)(b.SelectControl, {
                                                  __next40pxDefaultSize: !0,
                                                  __nextHasNoMarginBottom: !0,
                                                  value: e.value,
                                                  options: [
                                                      { label: "1 Year", value: "1" },
                                                      { label: "2 Years", value: "2" },
                                                      { label: "3 Years", value: "3" },
                                                      { label: "5 Years", value: "5" },
                                                      { label: "Keep Forever", value: "forever" },
                                                  ],
                                                  onChange: (n) =>
                                                      ((e, n) => {
                                                          const a = { ...t, [n.slug]: { ...n, status: e ? "active" : "inactive", value: e } };
                                                          re(o, t, a, i, s);
                                                      })(n, e),
                                              }),
                                          }),
                                      ],
                                  },
                                  e._id
                              )
                            : null
                    );
                },
                de = () => {
                    const t = ae(),
                        e = Object.values(t),
                        {
                            state: { toast: i, tBounce: s },
                            dispatch: o,
                        } = oe();
                    return e.map((e) =>
                        "uninstall-data" === e.slug
                            ? (0, n.jsx)(
                                  "div",
                                  {
                                      className: "pbb-settings__tab-content",
                                      children: (0, n.jsx)(le, {
                                          id: e._id,
                                          title: e.title,
                                          description: e.description,
                                          checked: "active" === e.status,
                                          onChange: (n) =>
                                              ((e, n) => {
                                                  const a = { ...t, [e.slug]: { ...e, status: n ? "active" : "inactive" } };
                                                  re(o, t, a, i, s);
                                              })(e, n.target.checked),
                                      }),
                                  },
                                  e._id
                              )
                            : null
                    );
                },
                he = () => {
                    const t = ae(),
                        e = Object.values(t),
                        {
                            state: { toast: i, tBounce: s },
                            dispatch: o,
                        } = oe();
                    return e.map((e) =>
                        "unfiltered_upload" === e.slug || "remote_image" === e.slug || "user_consent" === e.slug
                            ? (0, n.jsx)(
                                  "div",
                                  {
                                      className: "pbb-settings__tab-content",
                                      children: (0, n.jsx)(le, {
                                          id: e._id,
                                          title: e.title,
                                          description: e.description,
                                          checked: "active" === e.status,
                                          onChange: (n) =>
                                              ((e, n) => {
                                                  const a = { ...t, [e.slug]: { ...e, status: n ? "active" : "inactive" } };
                                                  re(o, t, a, i, s);
                                              })(e, n.target.checked),
                                      }),
                                  },
                                  e._id
                              )
                            : null
                    );
                },
                ue = () => {
                    const { state: t, dispatch: e } = oe(),
                        { selectTab: i } = t,
                        s = { General: (0, n.jsx)(he, {}), Advanced: (0, n.jsx)(ce, {}), Data: (0, n.jsx)(de, {}), Version: null };
                    return (0, n.jsx)("div", { className: "pbb-settings__content", children: s[i.name] });
                },
                pe = {
                    general: (0, n.jsx)("svg", {
                        xmlns: "http://www.w3.org/2000/svg",
                        viewBox: "0 0 16 16",
                        fill: "currentColor",
                        children: (0, n.jsx)("path", {
                            d:
                                "M8,5.2C6.4,5.2,5.1,6.4,5.1,8s1.3,2.8,2.8,2.8s2.8-1.3,2.8-2.8S9.6,5.2,8,5.2z M8,9.3C7.3,9.3,6.6,8.7,6.6,8\r c0-0.7,0.6-1.3,1.3-1.3c0.7,0,1.3,0.6,1.3,1.3C9.3,8.7,8.7,9.3,8,9.3z M13.7,5.3c-0.3,0-0.6-0.1-0.6-0.2C13,5,13,4.8,13.2,4.4\r c0.3-0.5,0.3-1,0.2-1.6c-0.1-0.5-0.5-1-1-1.3l-1.2-0.7c-0.9-0.5-2.1-0.2-2.6,0.7L8.5,1.7C8.3,2.1,8.1,2.2,8,2.2\r c-0.1,0-0.3-0.1-0.5-0.5L7.4,1.6C7.2,1.2,6.7,0.8,6.2,0.7c-0.5-0.1-1-0.1-1.4,0.2L3.6,1.6c-0.5,0.3-0.8,0.7-1,1.3\r C2.5,3.4,2.5,4,2.8,4.4C3,4.8,3,5,3,5.1C2.9,5.2,2.6,5.3,2.3,5.3c-1.1,0-2.1,0.9-2.1,2.1v1.2c0,1.1,0.9,2.1,2.1,2.1\r c0.4,0,0.6,0.1,0.6,0.2C3,11,3,11.2,2.8,11.6c-0.3,0.5-0.3,1-0.2,1.6c0.1,0.5,0.5,1,1,1.3l1.2,0.7c0.4,0.3,1,0.3,1.5,0.2\r c0.5-0.1,0.9-0.4,1.2-0.9l0.1-0.1c0.2-0.3,0.4-0.5,0.5-0.5c0,0,0,0,0,0c0.1,0,0.3,0.1,0.5,0.4l0.1,0.1c0.3,0.4,0.7,0.8,1.2,0.9\r c0.2,0,0.3,0.1,0.5,0.1c0.3,0,0.7-0.1,0.9-0.3l1.2-0.7c1-0.6,1.3-1.8,0.8-2.8C13,11.2,13,11,13,10.9c0.1-0.1,0.3-0.2,0.6-0.2\r c1.1,0,2.1-0.9,2.1-2.1V7.4C15.7,6.2,14.8,5.3,13.7,5.3z M14.2,8.6c0,0.3-0.3,0.6-0.6,0.6c-0.9,0-1.6,0.4-1.9,1s-0.3,1.4,0.1,2.2\r c0.2,0.3,0.1,0.6-0.2,0.8l-1.2,0.7c-0.1,0.1-0.2,0.1-0.3,0c-0.1,0-0.2-0.1-0.3-0.2l-0.1-0.1c-0.4-0.8-1.1-1.2-1.8-1.2h0\r c-0.7,0-1.4,0.4-1.8,1.2l-0.1,0.1c-0.1,0.1-0.2,0.2-0.3,0.2c-0.1,0-0.2,0-0.3,0l-1.2-0.7c-0.1-0.1-0.2-0.2-0.3-0.3\r c0-0.2,0-0.3,0.1-0.4c0.4-0.8,0.5-1.5,0.1-2.2c-0.4-0.6-1.1-1-1.9-1C2,9.2,1.7,8.9,1.7,8.6V7.4c0-0.3,0.3-0.6,0.6-0.6\r c0.9,0,1.6-0.4,1.9-1c0.4-0.6,0.3-1.4-0.1-2.2C4,3.6,4,3.4,4.1,3.2c0-0.1,0.1-0.3,0.3-0.3l1.2-0.7c0.1-0.1,0.2-0.1,0.3,0\r c0.1,0,0.2,0.1,0.3,0.2l0.1,0.1C6.6,3.2,7.3,3.7,8,3.7c0,0,0,0,0,0c0.7,0,1.4-0.4,1.8-1.2l0.1-0.1c0.1-0.2,0.4-0.3,0.6-0.2l1.2,0.7\r c0.1,0.1,0.2,0.2,0.3,0.3c0,0.1,0,0.3-0.1,0.4c-0.4,0.8-0.5,1.5-0.1,2.2c0.4,0.6,1.1,1,1.9,1c0.3,0,0.6,0.3,0.6,0.6V8.6z",
                        }),
                    }),
                    performance: (0, n.jsx)("svg", {
                        xmlns: "http://www.w3.org/2000/svg",
                        viewBox: "0 0 289.9 289.9",
                        fill: "currentColor",
                        children: (0, n.jsx)("path", {
                            d:
                                "M145 20.5A145 145 0 0 0 42.5 268a5 5 0 1 0 7-7 135 135 0 1 1 191 0 5 5 0 1 0 7 7A145 145 0 0 0 145 20.5zm0 15.3a127.5 127.5 0 0 0-90.2 217.7 2.5 2.5 0 1 0 3.5-3.6A122.5 122.5 0 0 1 145 40.8a2.5 2.5 0 1 0 0-5zm79.9 44.6a5 5 0 0 0-3.5 1.5l-62.7 62.7a25 25 0 0 0-38.8 20.8c0 13.8 11.3 25 25 25a25.1 25.1 0 0 0 20.9-38.7L228.5 89a5 5 0 0 0-3.6-8.6zm-80 70c8.4 0 15 6.7 15 15s-6.6 15-15 15-15-6.6-15-15 6.7-15 15-15zm0 2.6c-6.8 0-12.4 5.6-12.4 12.5a2.5 2.5 0 1 0 5 0c0-4.2 3.3-7.5 7.5-7.5a2.5 2.5 0 1 0 0-5z",
                        }),
                    }),
                    version: (0, n.jsxs)("svg", {
                        id: "Icons",
                        enableBackground: "new 0 0 64 64",
                        height: "16",
                        viewBox: "0 0 64 64",
                        width: "16",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [
                            (0, n.jsx)("path", { d: "m31.71 34.61 12 9c.884.663 2.137.484 2.8-.4s.484-2.137-.4-2.8l-11.11-8.41v-17c0-1.105-.895-2-2-2s-2 .895-2 2v18c0 .664.278 1.262.71 1.61z" }),
                            (0, n.jsx)("path", {
                                d:
                                    "m34 2c-14.639 0-27.14 10.566-29.58 25l-.76-1.13c-.619-.917-1.863-1.159-2.78-.54s-1.159 1.863-.54 2.78l4 6c.329.5.865.827 1.46.89h.2c.53-.002 1.037-.214 1.41-.59l5-5c.781-.781.781-2.049 0-2.83s-2.049-.781-2.83 0l-1.24 1.25c2.303-14.174 15.66-23.796 29.833-21.493s23.797 15.659 21.494 29.833c-2.045 12.586-12.916 21.832-25.667 21.83-8.042.146-15.648-3.648-20.37-10.16-.641-.9-1.89-1.111-2.79-.47s-1.111 1.89-.47 2.79c5.468 7.572 14.292 11.993 23.63 11.84 16.569 0 30-13.431 30-30s-13.431-30-30-30z",
                            }),
                        ],
                    }),
                    advanced: (0, n.jsx)("svg", {
                        xmlns: "http://www.w3.org/2000/svg",
                        width: "16",
                        height: "16",
                        fill: "currentColor",
                        viewBox: "0 0 16 16",
                        children: (0, n.jsx)("path", { fillRule: "evenodd", d: "M2 15.5V2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.74.439L8 13.069l-5.26 2.87A.5.5 0 0 1 2 15.5M6 6a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1z" }),
                    }),
                    data: (0, n.jsxs)("svg", {
                        xmlns: "http://www.w3.org/2000/svg",
                        width: "16",
                        height: "16",
                        fill: "currentColor",
                        viewBox: "0 0 16 16",
                        children: [
                            (0, n.jsx)("path", {
                                d:
                                    "M13.879 10.414a2.501 2.501 0 0 0-3.465 3.465zm.707.707-3.465 3.465a2.501 2.501 0 0 0 3.465-3.465m-4.56-1.096a3.5 3.5 0 1 1 4.949 4.95 3.5 3.5 0 0 1-4.95-4.95ZM8 1c-1.573 0-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4s.875 1.755 1.904 2.223C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777C13.125 5.755 14 5.007 14 4s-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1",
                            }),
                            (0, n.jsx)("path", {
                                d:
                                    "M2 7v-.839c.457.432 1.004.751 1.49.972C4.722 7.693 6.318 8 8 8s3.278-.307 4.51-.867c.486-.22 1.033-.54 1.49-.972V7c0 .424-.155.802-.411 1.133a4.51 4.51 0 0 0-4.815 1.843A12 12 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777C2.875 8.755 2 8.007 2 7m6.257 3.998L8 11c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13h.027a4.55 4.55 0 0 1 .23-2.002m-.002 3L8 14c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.5 4.5 0 0 1-1.3-1.905",
                            }),
                        ],
                    }),
                },
                me = () => {
                    const t = (() => {
                            const { state: t, dispatch: e } = oe(),
                                { settingsTabs: i } = t;
                            return (
                                (0, _t.useEffect)(() => {
                                    (async () => {
                                        try {
                                            const t = await u()({ path: "/pbb/v1/settings" });
                                            if ("success" === t.status) {
                                                const i = Object.values(t.settings).reduce(
                                                    (t, e) => (
                                                        t.some((t) => t.slug === e.category) ||
                                                            t.push({
                                                                id: ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (t) => (t ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (t / 4)))).toString(16)),
                                                                name: e.category.charAt(0).toUpperCase() + e.category.slice(1),
                                                                icon: pe[e?.category],
                                                                slug: e.category,
                                                            }),
                                                        t
                                                    ),
                                                    []
                                                );
                                                e({ type: "SET_SETTINGS_TABS", payload: i });
                                            }
                                        } catch (t) {
                                            console.error("Error fetching settings:", t);
                                        }
                                    })();
                                }, []),
                                i
                            );
                        })(),
                        { state: e, dispatch: i } = oe(),
                        { selectTab: s } = e;
                    return (
                        (0, _t.useEffect)(() => {
                            t.length > 0 && i({ type: "SET_SELECT_TAB", payload: t[0] });
                        }, [t]),
                        (0, n.jsx)("div", {
                            className: "pbb-settings__tab",
                            children: (0, n.jsx)("ul", {
                                className: "pbb-settings__tab-list",
                                children: t.map((t) =>
                                    (0, n.jsxs)(
                                        "li",
                                        {
                                            className: "pbb-settings__tab-item " + (s.id === t.id ? "active" : ""),
                                            onClick: () =>
                                                ((t) => {
                                                    i({ type: "SET_SELECT_TAB", payload: t });
                                                })(t),
                                            children: [t.icon, (0, n.jsx)("span", { children: t.name })],
                                        },
                                        t.id
                                    )
                                ),
                            }),
                        })
                    );
                },
                fe = { settings: {}, settingsTabs: [], selectTab: {} },
                ge = (t, e) => {
                    switch (e.type) {
                        case "SET_SETTINGS":
                            return { ...t, settings: e.payload };
                        case "SET_SETTINGS_TABS":
                            return { ...t, settingsTabs: e.payload };
                        case "SET_SELECT_TAB":
                            return { ...t, selectTab: e.payload };
                        default:
                            return t;
                    }
                },
                be = ({ children: t }) => {
                    const [e, i] = (0, _t.useReducer)(ge, fe),
                        s = { ...e, toast: S.oR, tBounce: S.br };
                    return (0, n.jsxs)(ne.Provider, {
                        value: { state: s, dispatch: i },
                        children: [
                            t,
                            (0, n.jsx)(S.N9, {
                                position: "top-right",
                                autoClose: 5e3,
                                hideProgressBar: !1,
                                newestOnTop: !1,
                                closeOnClick: !1,
                                rtl: !1,
                                pauseOnFocusLoss: !0,
                                draggable: !0,
                                pauseOnHover: !0,
                                theme: "light",
                                transition: S.br,
                            }),
                        ],
                    });
                },
                xe = () => (0, n.jsxs)(be, { children: [(0, n.jsx)(se, {}), (0, n.jsxs)("div", { className: "pbb-settings", children: [(0, n.jsx)(me, {}), (0, n.jsx)(ue, {})] })] });
            var ve = i(568);
            const ye = function () {
                const [t, e] = (0, l.useState)(window.location.hash?.slice(1) || "campaigns");
                (0, l.useEffect)(() => {
                    const t = window.location.hash.slice(1),
                        i = document.querySelectorAll("#toplevel_page_popupkit ul li");
                    for (const e of i) e.querySelector("a")?.innerText.toLowerCase() === t && e.classList.add("current");
                    const s = () => {
                        const t = window.location.hash.slice(1);
                        t && e(t);
                        for (const e of i) e.classList.remove("current"), e.querySelector("a")?.innerText.toLowerCase() === t && e.classList.add("current");
                    };
                    return (
                        window.addEventListener("popstate", s),
                        () => {
                            window.removeEventListener("popstate", s);
                        }
                    );
                }, []);
                let i = { campaigns: ve.A, subscribers: L, analytics: st, integrations: yt, templates: ie, settings: xe };
                i = (0, d.applyFilters)("popupkit.dashboard.pages", i, S.N9, S.oR);
                const s = i[t];
                return (0, n.jsxs)(n.Fragment, { children: [(0, n.jsx)(g, { links: i, currentPage: t, setCurrentPage: e }), (0, n.jsx)(s, {})] });
            };
            window.addEventListener("load", () => {
                const t = document.querySelector(".pbb-dashboard");
                "dashboard" === t.getAttribute("data-admin") && (0, s.H)(t).render((0, n.jsx)(ye, {}));
            });
        })();
})();
